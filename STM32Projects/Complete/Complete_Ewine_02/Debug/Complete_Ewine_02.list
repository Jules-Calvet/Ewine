
Complete_Ewine_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d540  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  0801d680  0801d680  0002d680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801dec4  0801dec4  0002dec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801decc  0801decc  0002decc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ded0  0801ded0  0002ded0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000244  20000008  0801ded4  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000085e4  20000250  0801e118  00030250  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20008834  0801e118  00038834  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003024c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00066e4f  00000000  00000000  0003027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000740c  00000000  00000000  000970cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003418  00000000  00000000  0009e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000030f0  00000000  00000000  000a18f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030127  00000000  00000000  000a49e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003d7bb  00000000  00000000  000d4b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011affc  00000000  00000000  001122c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022d2be  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000f110  00000000  00000000  0022d310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000250 	.word	0x20000250
 800015c:	00000000 	.word	0x00000000
 8000160:	0801d668 	.word	0x0801d668

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000254 	.word	0x20000254
 800017c:	0801d668 	.word	0x0801d668

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_ldivmod>:
 8000b58:	b97b      	cbnz	r3, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5a:	b972      	cbnz	r2, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bfbe      	ittt	lt
 8000b60:	2000      	movlt	r0, #0
 8000b62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b66:	e006      	blt.n	8000b76 <__aeabi_ldivmod+0x1e>
 8000b68:	bf08      	it	eq
 8000b6a:	2800      	cmpeq	r0, #0
 8000b6c:	bf1c      	itt	ne
 8000b6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b72:	f04f 30ff 	movne.w	r0, #4294967295
 8000b76:	f000 b9bf 	b.w	8000ef8 <__aeabi_idiv0>
 8000b7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b82:	2900      	cmp	r1, #0
 8000b84:	db09      	blt.n	8000b9a <__aeabi_ldivmod+0x42>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db1a      	blt.n	8000bc0 <__aeabi_ldivmod+0x68>
 8000b8a:	f000 f84d 	bl	8000c28 <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4770      	bx	lr
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db1b      	blt.n	8000bdc <__aeabi_ldivmod+0x84>
 8000ba4:	f000 f840 	bl	8000c28 <__udivmoddi4>
 8000ba8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb0:	b004      	add	sp, #16
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	4252      	negs	r2, r2
 8000bba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bbe:	4770      	bx	lr
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bc6:	f000 f82f 	bl	8000c28 <__udivmoddi4>
 8000bca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd2:	b004      	add	sp, #16
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bda:	4770      	bx	lr
 8000bdc:	4252      	negs	r2, r2
 8000bde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be2:	f000 f821 	bl	8000c28 <__udivmoddi4>
 8000be6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bee:	b004      	add	sp, #16
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MLX_IR_Init>:

/* Private function prototypes -----------------------------------------------*/
static void MLX_90614_AmbiantTemperature_Process(void);

void MLX_IR_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END IR_Init_PreTreatment */

  /* Initialize the peripherals and the IR components */

	if(mlx90614_init() == true)printf(" ****** Initialization MLX90614 OK ****** \n");
 8000f00:	f000 fc5e 	bl	80017c0 <mlx90614_init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <MLX_IR_Init+0x16>
 8000f0a:	4810      	ldr	r0, [pc, #64]	; (8000f4c <MLX_IR_Init+0x50>)
 8000f0c:	f01a faaa 	bl	801b464 <puts>
 8000f10:	e002      	b.n	8000f18 <MLX_IR_Init+0x1c>
	else printf("Initialization Failed ! \n");
 8000f12:	480f      	ldr	r0, [pc, #60]	; (8000f50 <MLX_IR_Init+0x54>)
 8000f14:	f01a faa6 	bl	801b464 <puts>

  /* USER CODE BEGIN IR_Init_PostTreatment */
	mlx90614.configReg.DualIRSensor = 0;
 8000f18:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <MLX_IR_Init+0x58>)
 8000f1a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8000f1e:	f36f 1386 	bfc	r3, #6, #1
 8000f22:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	mlx90614.configReg.SelectObjAmb = 1;
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <MLX_IR_Init+0x58>)
 8000f28:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	f361 1305 	bfi	r3, r1, #4, #2
 8000f32:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	mlx90614.configReg.FIR = 4;
 8000f36:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <MLX_IR_Init+0x58>)
 8000f38:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	f361 0302 	bfi	r3, r1, #0, #3
 8000f42:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
  /* USER CODE END IR_Init_PostTreatment */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	0801d680 	.word	0x0801d680
 8000f50:	0801d6ac 	.word	0x0801d6ac
 8000f54:	200002dc 	.word	0x200002dc

08000f58 <MLX_IR_Process>:

void MLX_IR_Process(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IR_Process_PreTreatment */

  /* USER CODE END IR_Process_PreTreatment */

	printf("\n\n ****** Start MLX90614 Test ****** \n\n");
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MLX_IR_Process+0x18>)
 8000f5e:	f01a fa81 	bl	801b464 <puts>
	MLX_90614_AmbiantTemperature_Process();
 8000f62:	f000 f809 	bl	8000f78 <MLX_90614_AmbiantTemperature_Process>
	printf("\n\n ****** End MLX90614 Test ****** \n\n");
 8000f66:	4803      	ldr	r0, [pc, #12]	; (8000f74 <MLX_IR_Process+0x1c>)
 8000f68:	f01a fa7c 	bl	801b464 <puts>

  /* USER CODE BEGIN IR_Process_PostTreatment */

  /* USER CODE END IR_Process_PostTreatment */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	0801d6c8 	.word	0x0801d6c8
 8000f74:	0801d6f0 	.word	0x0801d6f0

08000f78 <MLX_90614_AmbiantTemperature_Process>:

static void MLX_90614_AmbiantTemperature_Process(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
  for(int i = 1 ; i < 10 ; i++ ){
 8000f7e:	2301      	movs	r3, #1
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	e022      	b.n	8000fca <MLX_90614_AmbiantTemperature_Process+0x52>
	  printf("loop %d start\n",i);
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4815      	ldr	r0, [pc, #84]	; (8000fdc <MLX_90614_AmbiantTemperature_Process+0x64>)
 8000f88:	f01a f9d0 	bl	801b32c <iprintf>

	  if ( mlx90614_getAmbient(&temp) == true ) printf("getAmbient OK : %0.2f *C\n", temp);
 8000f8c:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <MLX_90614_AmbiantTemperature_Process+0x68>)
 8000f8e:	f000 fd21 	bl	80019d4 <mlx90614_getAmbient>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00a      	beq.n	8000fae <MLX_90614_AmbiantTemperature_Process+0x36>
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MLX_90614_AmbiantTemperature_Process+0x68>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff faab 	bl	80004f8 <__aeabi_f2d>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	480f      	ldr	r0, [pc, #60]	; (8000fe4 <MLX_90614_AmbiantTemperature_Process+0x6c>)
 8000fa8:	f01a f9c0 	bl	801b32c <iprintf>
 8000fac:	e002      	b.n	8000fb4 <MLX_90614_AmbiantTemperature_Process+0x3c>
	  else printf("Failed to read ambient temperature\n");
 8000fae:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <MLX_90614_AmbiantTemperature_Process+0x70>)
 8000fb0:	f01a fa58 	bl	801b464 <puts>

	  printf("loop %d end\n",i);
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	480d      	ldr	r0, [pc, #52]	; (8000fec <MLX_90614_AmbiantTemperature_Process+0x74>)
 8000fb8:	f01a f9b8 	bl	801b32c <iprintf>
	  HAL_Delay(1500);
 8000fbc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000fc0:	f015 fa16 	bl	80163f0 <HAL_Delay>
  for(int i = 1 ; i < 10 ; i++ ){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b09      	cmp	r3, #9
 8000fce:	ddd9      	ble.n	8000f84 <MLX_90614_AmbiantTemperature_Process+0xc>
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	0801d718 	.word	0x0801d718
 8000fe0:	2000026c 	.word	0x2000026c
 8000fe4:	0801d728 	.word	0x0801d728
 8000fe8:	0801d744 	.word	0x0801d744
 8000fec:	0801d768 	.word	0x0801d768

08000ff0 <VL_TOF_Init>:
static void VL_53L1A2_SimpleRanging_Process_R(void);
static void VL_53L1A2_SimpleRanging_Process_L(void);
static void print_result(RANGING_SENSOR_Result_t *Result);

void VL_TOF_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END SV */

  /* USER CODE BEGIN TOF_Init_PreTreatment */

	REPETITION_NUMBER = 10 ;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <VL_TOF_Init+0x14>)
 8000ff6:	220a      	movs	r2, #10
 8000ff8:	601a      	str	r2, [r3, #0]

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  VL_53L1A2_SimpleRanging_Init_C();
 8000ffa:	f000 f823 	bl	8001044 <VL_53L1A2_SimpleRanging_Init_C>
  //VL_53L1A2_SimpleRanging_Init_L();

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008

08001008 <VL_TOF_Process>:

/*
 * LM background task
 */
void VL_TOF_Process(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */
  printf("\n\n ****** Start TOF Test ****** \n\n");
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <VL_TOF_Process+0x2c>)
 800100e:	f01a fa29 	bl	801b464 <puts>
  /* USER CODE END TOF_Process_PreTreatment */
  printf("\n ---- start TOF Center ---- \n");
 8001012:	4809      	ldr	r0, [pc, #36]	; (8001038 <VL_TOF_Process+0x30>)
 8001014:	f01a fa26 	bl	801b464 <puts>
  VL_53L1A2_SimpleRanging_Process_C();
 8001018:	f000 f830 	bl	800107c <VL_53L1A2_SimpleRanging_Process_C>
  printf("\n ---- end TOF Center ---- \n");
 800101c:	4807      	ldr	r0, [pc, #28]	; (800103c <VL_TOF_Process+0x34>)
 800101e:	f01a fa21 	bl	801b464 <puts>
  HAL_Delay(2000);
 8001022:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001026:	f015 f9e3 	bl	80163f0 <HAL_Delay>
  printf("\n ---- start TOF Left ---- \n");
  VL_53L1A2_SimpleRanging_Process_L();
  printf("\n ---- end TOF Left ---- \n");
  HAL_Delay(2000);*/
  /* USER CODE BEGIN TOF_Process_PostTreatment */
  printf("\n\n ****** End TOF Test ****** \n\n");
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <VL_TOF_Process+0x38>)
 800102c:	f01a fa1a 	bl	801b464 <puts>
  /* USER CODE END TOF_Process_PostTreatment */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	0801d778 	.word	0x0801d778
 8001038:	0801d79c 	.word	0x0801d79c
 800103c:	0801d7bc 	.word	0x0801d7bc
 8001040:	0801d7d8 	.word	0x0801d7d8

08001044 <VL_53L1A2_SimpleRanging_Init_C>:

static void VL_53L1A2_SimpleRanging_Init_C(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusCenter = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_CENTER);
 8001048:	2001      	movs	r0, #1
 800104a:	f001 fbc3 	bl	80027d4 <VL53L1A2_RANGING_SENSOR_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <VL_53L1A2_SimpleRanging_Init_C+0x2c>)
 8001052:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusCenter != BSP_ERROR_NONE)
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <VL_53L1A2_SimpleRanging_Init_C+0x2c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <VL_53L1A2_SimpleRanging_Init_C+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <VL_53L1A2_SimpleRanging_Init_C+0x30>)
 800105e:	f01a fa01 	bl	801b464 <puts>
    while(1);
 8001062:	e7fe      	b.n	8001062 <VL_53L1A2_SimpleRanging_Init_C+0x1e>
  }
  else printf(" ****** Initialization TOF CENTER OK ****** \n");
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <VL_53L1A2_SimpleRanging_Init_C+0x34>)
 8001066:	f01a f9fd 	bl	801b464 <puts>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000284 	.word	0x20000284
 8001074:	0801d7f8 	.word	0x0801d7f8
 8001078:	0801d81c 	.word	0x0801d81c

0800107c <VL_53L1A2_SimpleRanging_Process_C>:
  }
  else printf(" ****** Initialization TOF LEFT OK ****** \n");
}

static void VL_53L1A2_SimpleRanging_Process_C(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	; 0x50
 8001080:	af00      	add	r7, sp, #0
  uint32_t Id_Center;
  RANGING_SENSOR_Result_t Result_Center;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_CENTER, &Id_Center);
 8001082:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001086:	4619      	mov	r1, r3
 8001088:	2001      	movs	r0, #1
 800108a:	f001 fbc9 	bl	8002820 <VL53L1A2_RANGING_SENSOR_ReadID>

  // sensor configuration
  ProfileCenter.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 800108e:	4b27      	ldr	r3, [pc, #156]	; (800112c <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]
  ProfileCenter.TimingBudget = TIMING_BUDGET;
 8001094:	4b25      	ldr	r3, [pc, #148]	; (800112c <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 8001096:	221e      	movs	r2, #30
 8001098:	605a      	str	r2, [r3, #4]
  ProfileCenter.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 800109a:	4b24      	ldr	r3, [pc, #144]	; (800112c <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  ProfileCenter.EnableAmbient = 0; // Enable: 1, Disable: 0
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  ProfileCenter.EnableSignal = 0; // Enable: 1, Disable: 0
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]

  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_CENTER, &ProfileCenter);
 80010ac:	491f      	ldr	r1, [pc, #124]	; (800112c <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 80010ae:	2001      	movs	r0, #1
 80010b0:	f001 fbde 	bl	8002870 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

  statusCenter = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 80010b4:	2101      	movs	r1, #1
 80010b6:	2001      	movs	r0, #1
 80010b8:	f001 fc2a 	bl	8002910 <VL53L1A2_RANGING_SENSOR_Start>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a1c      	ldr	r2, [pc, #112]	; (8001130 <VL_53L1A2_SimpleRanging_Process_C+0xb4>)
 80010c0:	6013      	str	r3, [r2, #0]

  if (statusCenter != BSP_ERROR_NONE)
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <VL_53L1A2_SimpleRanging_Process_C+0xb4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <VL_53L1A2_SimpleRanging_Process_C+0x56>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Center failed\n");
 80010ca:	481a      	ldr	r0, [pc, #104]	; (8001134 <VL_53L1A2_SimpleRanging_Process_C+0xb8>)
 80010cc:	f01a f9ca 	bl	801b464 <puts>
    while(1);
 80010d0:	e7fe      	b.n	80010d0 <VL_53L1A2_SimpleRanging_Process_C+0x54>
  }
/*
  while (1)
  {*/
  for(int i = 1 ; i < REPETITION_NUMBER ; i++){
 80010d2:	2301      	movs	r3, #1
 80010d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010d6:	e01a      	b.n	800110e <VL_53L1A2_SimpleRanging_Process_C+0x92>
    /* repetition mode */
    statusCenter = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_CENTER, &Result_Center);
 80010d8:	463b      	mov	r3, r7
 80010da:	4619      	mov	r1, r3
 80010dc:	2001      	movs	r0, #1
 80010de:	f001 fbef 	bl	80028c0 <VL53L1A2_RANGING_SENSOR_GetDistance>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a12      	ldr	r2, [pc, #72]	; (8001130 <VL_53L1A2_SimpleRanging_Process_C+0xb4>)
 80010e6:	6013      	str	r3, [r2, #0]

    if (statusCenter == BSP_ERROR_NONE)
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <VL_53L1A2_SimpleRanging_Process_C+0xb4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d107      	bne.n	8001100 <VL_53L1A2_SimpleRanging_Process_C+0x84>
    {
      printf("\n CENTER %d\n",i);
 80010f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80010f2:	4811      	ldr	r0, [pc, #68]	; (8001138 <VL_53L1A2_SimpleRanging_Process_C+0xbc>)
 80010f4:	f01a f91a 	bl	801b32c <iprintf>
      print_result(&Result_Center);
 80010f8:	463b      	mov	r3, r7
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f820 	bl	8001140 <print_result>
    }

    HAL_Delay(REPETITION_TIMING);
 8001100:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001104:	f015 f974 	bl	80163f0 <HAL_Delay>
  for(int i = 1 ; i < REPETITION_NUMBER ; i++){
 8001108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800110a:	3301      	adds	r3, #1
 800110c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <VL_53L1A2_SimpleRanging_Process_C+0xc0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001114:	429a      	cmp	r2, r3
 8001116:	dbdf      	blt.n	80010d8 <VL_53L1A2_SimpleRanging_Process_C+0x5c>
  }
  statusCenter = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_CENTER);
 8001118:	2001      	movs	r0, #1
 800111a:	f001 fc21 	bl	8002960 <VL53L1A2_RANGING_SENSOR_Stop>
 800111e:	4603      	mov	r3, r0
 8001120:	4a03      	ldr	r2, [pc, #12]	; (8001130 <VL_53L1A2_SimpleRanging_Process_C+0xb4>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	3750      	adds	r7, #80	; 0x50
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000270 	.word	0x20000270
 8001130:	20000284 	.word	0x20000284
 8001134:	0801d8a4 	.word	0x0801d8a4
 8001138:	0801d8d0 	.word	0x0801d8d0
 800113c:	20000008 	.word	0x20000008

08001140 <print_result>:
  }
  statusLeft = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_LEFT);
}

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint8_t i, j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e03f      	b.n	80011ce <print_result+0x8e>
  {
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	4413      	add	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	440b      	add	r3, r1
 800115c:	3304      	adds	r3, #4
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	4820      	ldr	r0, [pc, #128]	; (80011e4 <print_result+0xa4>)
 8001164:	f01a f8e2 	bl	801b32c <iprintf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 8001168:	2300      	movs	r3, #0
 800116a:	73bb      	strb	r3, [r7, #14]
 800116c:	e020      	b.n	80011b0 <print_result+0x70>
    {
      printf(" |---> ");
 800116e:	481e      	ldr	r0, [pc, #120]	; (80011e8 <print_result+0xa8>)
 8001170:	f01a f8dc 	bl	801b32c <iprintf>
      printf("Status = %ld, Distance = %5ld mm ",
        (long)Result->ZoneResult[i].Status[j],
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	7bb8      	ldrb	r0, [r7, #14]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	4413      	add	r3, r2
 8001180:	4403      	add	r3, r0
 8001182:	3304      	adds	r3, #4
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 800118a:	461c      	mov	r4, r3
        (long)Result->ZoneResult[i].Distance[j]);
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	7bb8      	ldrb	r0, [r7, #14]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	4413      	add	r3, r2
 8001198:	4403      	add	r3, r0
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80011a0:	461a      	mov	r2, r3
 80011a2:	4621      	mov	r1, r4
 80011a4:	4811      	ldr	r0, [pc, #68]	; (80011ec <print_result+0xac>)
 80011a6:	f01a f8c1 	bl	801b32c <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	3301      	adds	r3, #1
 80011ae:	73bb      	strb	r3, [r7, #14]
 80011b0:	7bb9      	ldrb	r1, [r7, #14]
 80011b2:	7bfa      	ldrb	r2, [r7, #15]
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4403      	add	r3, r0
 80011c0:	3304      	adds	r3, #4
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4299      	cmp	r1, r3
 80011c6:	d3d2      	bcc.n	800116e <print_result+0x2e>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	3301      	adds	r3, #1
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0bc      	beq.n	800114e <print_result+0xe>
    }
  }
  printf ("\n");
 80011d4:	200a      	movs	r0, #10
 80011d6:	f01a f8c1 	bl	801b35c <putchar>
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd90      	pop	{r4, r7, pc}
 80011e2:	bf00      	nop
 80011e4:	0801d950 	.word	0x0801d950
 80011e8:	0801d960 	.word	0x0801d960
 80011ec:	0801d968 	.word	0x0801d968

080011f0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4313      	orrs	r3, r2
 8001206:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4013      	ands	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001214:	68fb      	ldr	r3, [r7, #12]
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001238:	2004      	movs	r0, #4
 800123a:	f7ff ffd9 	bl	80011f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2002      	movs	r0, #2
 8001240:	f7ff ffd6 	bl	80011f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff ffd3 	bl	80011f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124a:	2008      	movs	r0, #8
 800124c:	f7ff ffd0 	bl	80011f0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2123      	movs	r1, #35	; 0x23
 8001254:	4814      	ldr	r0, [pc, #80]	; (80012a8 <MX_GPIO_Init+0x84>)
 8001256:	f015 fc35 	bl	8016ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800125a:	2310      	movs	r3, #16
 800125c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4810      	ldr	r0, [pc, #64]	; (80012ac <MX_GPIO_Init+0x88>)
 800126c:	f015 f9c4 	bl	80165f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001270:	2323      	movs	r3, #35	; 0x23
 8001272:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4808      	ldr	r0, [pc, #32]	; (80012a8 <MX_GPIO_Init+0x84>)
 8001286:	f015 f9b7 	bl	80165f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800128a:	2303      	movs	r3, #3
 800128c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_GPIO_Init+0x8c>)
 800129c:	f015 f9ac 	bl	80165f8 <HAL_GPIO_Init>

}
 80012a0:	bf00      	nop
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	48000400 	.word	0x48000400
 80012ac:	48000800 	.word	0x48000800
 80012b0:	48000c00 	.word	0x48000c00

080012b4 <LL_AHB2_GRP1_EnableClock>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4013      	ands	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012d8:	68fb      	ldr	r3, [r7, #12]
}
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80012ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80012fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001302:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4013      	ands	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001324:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	43db      	mvns	r3, r3
 800132a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800132e:	4013      	ands	r3, r2
 8001330:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <MX_I2C3_Init+0x74>)
 8001346:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <MX_I2C3_Init+0x78>)
 8001348:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <MX_I2C3_Init+0x74>)
 800134c:	4a1b      	ldr	r2, [pc, #108]	; (80013bc <MX_I2C3_Init+0x7c>)
 800134e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001350:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <MX_I2C3_Init+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <MX_I2C3_Init+0x74>)
 8001358:	2201      	movs	r2, #1
 800135a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <MX_I2C3_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_I2C3_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <MX_I2C3_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_I2C3_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_I2C3_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800137a:	480e      	ldr	r0, [pc, #56]	; (80013b4 <MX_I2C3_Init+0x74>)
 800137c:	f015 fbba 	bl	8016af4 <HAL_I2C_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001386:	f000 f997 	bl	80016b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800138a:	2100      	movs	r1, #0
 800138c:	4809      	ldr	r0, [pc, #36]	; (80013b4 <MX_I2C3_Init+0x74>)
 800138e:	f016 fb61 	bl	8017a54 <HAL_I2CEx_ConfigAnalogFilter>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001398:	f000 f98e 	bl	80016b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800139c:	2100      	movs	r1, #0
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_I2C3_Init+0x74>)
 80013a0:	f016 fba3 	bl	8017aea <HAL_I2CEx_ConfigDigitalFilter>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80013aa:	f000 f985 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000288 	.word	0x20000288
 80013b8:	40005c00 	.word	0x40005c00
 80013bc:	00707cbb 	.word	0x00707cbb

080013c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b09c      	sub	sp, #112	; 0x70
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2250      	movs	r2, #80	; 0x50
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f019 fb31 	bl	801aa48 <memset>
  if(i2cHandle->Instance==I2C3)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a16      	ldr	r2, [pc, #88]	; (8001444 <HAL_I2C_MspInit+0x84>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d125      	bne.n	800143c <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80013f0:	2308      	movs	r3, #8
 80013f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80013f4:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	4618      	mov	r0, r3
 8001400:	f018 f854 	bl	80194ac <HAL_RCCEx_PeriphCLKConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800140a:	f000 f955 	bl	80016b8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	2004      	movs	r0, #4
 8001410:	f7ff ff50 	bl	80012b4 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001414:	2303      	movs	r3, #3
 8001416:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001418:	2312      	movs	r3, #18
 800141a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001424:	2304      	movs	r3, #4
 8001426:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001428:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800142c:	4619      	mov	r1, r3
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <HAL_I2C_MspInit+0x88>)
 8001430:	f015 f8e2 	bl	80165f8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001434:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001438:	f7ff ff55 	bl	80012e6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800143c:	bf00      	nop
 800143e:	3770      	adds	r7, #112	; 0x70
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40005c00 	.word	0x40005c00
 8001448:	48000800 	.word	0x48000800

0800144c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a09      	ldr	r2, [pc, #36]	; (8001480 <HAL_I2C_MspDeInit+0x34>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d10b      	bne.n	8001476 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800145e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001462:	f7ff ff59 	bl	8001318 <LL_APB1_GRP1_DisableClock>

    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001466:	2101      	movs	r1, #1
 8001468:	4806      	ldr	r0, [pc, #24]	; (8001484 <HAL_I2C_MspDeInit+0x38>)
 800146a:	f015 fa35 	bl	80168d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 800146e:	2102      	movs	r1, #2
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <HAL_I2C_MspDeInit+0x38>)
 8001472:	f015 fa31 	bl	80168d8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40005c00 	.word	0x40005c00
 8001484:	48000800 	.word	0x48000800

08001488 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001490:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001494:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d013      	beq.n	80014c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80014a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80014a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00b      	beq.n	80014c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014b0:	e000      	b.n	80014b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80014b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f9      	beq.n	80014b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80014be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014c8:	687b      	ldr	r3, [r7, #4]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80014de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e6:	f023 0218 	bic.w	r2, r3, #24
 80014ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e009      	b.n	8001528 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	60ba      	str	r2, [r7, #8]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ffb3 	bl	8001488 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbf1      	blt.n	8001514 <_write+0x12>
}
return len;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153e:	f014 ff0b 	bl	8016358 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001542:	f000 f813 	bl	800156c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001546:	f000 f887 	bl	8001658 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f7ff fe6b 	bl	8001224 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800154e:	f000 fddd 	bl	800210c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001552:	f000 fea1 	bl	8002298 <MX_USB_PCD_Init>
  MX_I2C3_Init();
 8001556:	f7ff fef3 	bl	8001340 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  //Tof Initialization
  VL_TOF_Init();
 800155a:	f7ff fd49 	bl	8000ff0 <VL_TOF_Init>
  //mlx90614 Initialization
  MLX_IR_Init();
 800155e:	f7ff fccd 	bl	8000efc <MLX_IR_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  VL_TOF_Process();
 8001562:	f7ff fd51 	bl	8001008 <VL_TOF_Process>
	  MLX_IR_Process();
 8001566:	f7ff fcf7 	bl	8000f58 <MLX_IR_Process>
	  VL_TOF_Process();
 800156a:	e7fa      	b.n	8001562 <main+0x28>

0800156c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b09a      	sub	sp, #104	; 0x68
 8001570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 0320 	add.w	r3, r7, #32
 8001576:	2248      	movs	r2, #72	; 0x48
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f019 fa64 	bl	801aa48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
 800158e:	615a      	str	r2, [r3, #20]
 8001590:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800159c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015a0:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80015a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f023 0303 	bic.w	r3, r3, #3
 80015ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015b6:	f016 fbe7 	bl	8017d88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff ff8b 	bl	80014d6 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c0:	4b24      	ldr	r3, [pc, #144]	; (8001654 <SystemClock_Config+0xe8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015c8:	4a22      	ldr	r2, [pc, #136]	; (8001654 <SystemClock_Config+0xe8>)
 80015ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <SystemClock_Config+0xe8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80015dc:	2327      	movs	r3, #39	; 0x27
 80015de:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015e6:	2301      	movs	r3, #1
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015f0:	2301      	movs	r3, #1
 80015f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f4:	2340      	movs	r3, #64	; 0x40
 80015f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80015f8:	2300      	movs	r3, #0
 80015fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015fc:	2360      	movs	r3, #96	; 0x60
 80015fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001600:	2300      	movs	r3, #0
 8001602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001604:	f107 0320 	add.w	r3, r7, #32
 8001608:	4618      	mov	r0, r3
 800160a:	f016 ff5d 	bl	80184c8 <HAL_RCC_OscConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001614:	f000 f850 	bl	80016b8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001618:	236f      	movs	r3, #111	; 0x6f
 800161a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800161c:	2302      	movs	r3, #2
 800161e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	2101      	movs	r1, #1
 8001638:	4618      	mov	r0, r3
 800163a:	f017 fab9 	bl	8018bb0 <HAL_RCC_ClockConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001644:	f000 f838 	bl	80016b8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001648:	f018 f8a6 	bl	8019798 <HAL_RCCEx_EnableMSIPLLMode>
}
 800164c:	bf00      	nop
 800164e:	3768      	adds	r7, #104	; 0x68
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	58000400 	.word	0x58000400

08001658 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b094      	sub	sp, #80	; 0x50
 800165c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800165e:	463b      	mov	r3, r7
 8001660:	2250      	movs	r2, #80	; 0x50
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f019 f9ef 	bl	801aa48 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800166a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001670:	2300      	movs	r3, #0
 8001672:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001674:	2300      	movs	r3, #0
 8001676:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001678:	463b      	mov	r3, r7
 800167a:	4618      	mov	r0, r3
 800167c:	f017 ff16 	bl	80194ac <HAL_RCCEx_PeriphCLKConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8001686:	f000 f817 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800168a:	bf00      	nop
 800168c:	3750      	adds	r7, #80	; 0x50
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d101      	bne.n	80016aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016a6:	f014 fe77 	bl	8016398 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40014800 	.word	0x40014800

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <Error_Handler+0x8>
	...

080016c4 <mlx90614_read16>:
  }
  return crc;
}
//###################################################################################################
bool mlx90614_read16(uint8_t address, int16_t *data)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af04      	add	r7, sp, #16
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  uint8_t d[3];
  if(HAL_I2C_Mem_Read(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	2364      	movs	r3, #100	; 0x64
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	2303      	movs	r3, #3
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2301      	movs	r3, #1
 80016e4:	21b4      	movs	r1, #180	; 0xb4
 80016e6:	480b      	ldr	r0, [pc, #44]	; (8001714 <mlx90614_read16+0x50>)
 80016e8:	f015 fcac 	bl	8017044 <HAL_I2C_Mem_Read>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <mlx90614_read16+0x32>
    return false;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e009      	b.n	800170a <mlx90614_read16+0x46>
  *data = d[0] | (d[1] << 8);
 80016f6:	7b3b      	ldrb	r3, [r7, #12]
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	7b7b      	ldrb	r3, [r7, #13]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b21b      	sxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b21a      	sxth	r2, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	801a      	strh	r2, [r3, #0]
  return true;
 8001708:	2301      	movs	r3, #1
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000288 	.word	0x20000288

08001718 <mlx90614_calcTemperature>:
	}
	return rawTemp;
}
//###################################################################################################
float mlx90614_calcTemperature(int16_t rawTemp)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
	float retTemp;
	if(mlx90614.unit == MLX90614_UNIT_RAW)
 8001722:	4b22      	ldr	r3, [pc, #136]	; (80017ac <mlx90614_calcTemperature+0x94>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d108      	bne.n	800173c <mlx90614_calcTemperature+0x24>
	{
		retTemp = (float) rawTemp;
 800172a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172e:	ee07 3a90 	vmov	s15, r3
 8001732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001736:	edc7 7a03 	vstr	s15, [r7, #12]
 800173a:	e02e      	b.n	800179a <mlx90614_calcTemperature+0x82>
	}
	else
	{
		retTemp = (float)(rawTemp) * 0.02f;
 800173c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001748:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80017b0 <mlx90614_calcTemperature+0x98>
 800174c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001750:	edc7 7a03 	vstr	s15, [r7, #12]
    if(mlx90614.unit != MLX90614_UNIT_K)
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <mlx90614_calcTemperature+0x94>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d01e      	beq.n	800179a <mlx90614_calcTemperature+0x82>
		{
			retTemp -= 273.15f;
 800175c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001760:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80017b4 <mlx90614_calcTemperature+0x9c>
 8001764:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001768:	edc7 7a03 	vstr	s15, [r7, #12]
/*
			if(obj == true){
				retTemp = retTemp * 0.26f;
			}
*/
			if(mlx90614.unit == MLX90614_UNIT_F)
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <mlx90614_calcTemperature+0x94>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d112      	bne.n	800179a <mlx90614_calcTemperature+0x82>
			{
				retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 8001774:	edd7 7a03 	vldr	s15, [r7, #12]
 8001778:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800177c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001780:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001784:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001788:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80017b8 <mlx90614_calcTemperature+0xa0>
 800178c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001790:	edc7 7a03 	vstr	s15, [r7, #12]
				printf("Convertion Farenheight Done ! \n");
 8001794:	4809      	ldr	r0, [pc, #36]	; (80017bc <mlx90614_calcTemperature+0xa4>)
 8001796:	f019 fe65 	bl	801b464 <puts>

			}
		}
	}
	return retTemp;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	ee07 3a90 	vmov	s15, r3
}
 80017a0:	eeb0 0a67 	vmov.f32	s0, s15
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200002dc 	.word	0x200002dc
 80017b0:	3ca3d70a 	.word	0x3ca3d70a
 80017b4:	43889333 	.word	0x43889333
 80017b8:	42000000 	.word	0x42000000
 80017bc:	0801d98c 	.word	0x0801d98c

080017c0 <mlx90614_init>:
//###################################################################################################
bool mlx90614_init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  memset(&mlx90614, 0, sizeof(mlx90614));
 80017c4:	2234      	movs	r2, #52	; 0x34
 80017c6:	2100      	movs	r1, #0
 80017c8:	4821      	ldr	r0, [pc, #132]	; (8001850 <mlx90614_init+0x90>)
 80017ca:	f019 f93d 	bl	801aa48 <memset>
  mlx90614.unit = MLX90614_UNIT_C;
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <mlx90614_init+0x90>)
 80017d0:	2202      	movs	r2, #2
 80017d2:	701a      	strb	r2, [r3, #0]
  if(HAL_I2C_IsDeviceReady(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 1, 100) != HAL_OK)
 80017d4:	2364      	movs	r3, #100	; 0x64
 80017d6:	2201      	movs	r2, #1
 80017d8:	21b4      	movs	r1, #180	; 0xb4
 80017da:	481e      	ldr	r0, [pc, #120]	; (8001854 <mlx90614_init+0x94>)
 80017dc:	f015 fd4c 	bl	8017278 <HAL_I2C_IsDeviceReady>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <mlx90614_init+0x2a>
    return false;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e030      	b.n	800184c <mlx90614_init+0x8c>
  mlx90614_read16(MLX90614_REGISTER_CONFIG, (int16_t*)&mlx90614.configReg);
 80017ea:	491b      	ldr	r1, [pc, #108]	; (8001858 <mlx90614_init+0x98>)
 80017ec:	2025      	movs	r0, #37	; 0x25
 80017ee:	f7ff ff69 	bl	80016c4 <mlx90614_read16>
  if(mlx90614_readID(NULL) == false)
 80017f2:	2000      	movs	r0, #0
 80017f4:	f000 f832 	bl	800185c <mlx90614_readID>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f083 0301 	eor.w	r3, r3, #1
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <mlx90614_init+0x48>
    return false;
 8001804:	2300      	movs	r3, #0
 8001806:	e021      	b.n	800184c <mlx90614_init+0x8c>
  if(mlx90614_getEmissivity(NULL) == false)
 8001808:	2000      	movs	r0, #0
 800180a:	f000 f861 	bl	80018d0 <mlx90614_getEmissivity>
 800180e:	4603      	mov	r3, r0
 8001810:	f083 0301 	eor.w	r3, r3, #1
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <mlx90614_init+0x5e>
    return false;
 800181a:	2300      	movs	r3, #0
 800181c:	e016      	b.n	800184c <mlx90614_init+0x8c>
  if(mlx90614_getMax(NULL) == false)
 800181e:	2000      	movs	r0, #0
 8001820:	f000 f890 	bl	8001944 <mlx90614_getMax>
 8001824:	4603      	mov	r3, r0
 8001826:	f083 0301 	eor.w	r3, r3, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <mlx90614_init+0x74>
    return false;
 8001830:	2300      	movs	r3, #0
 8001832:	e00b      	b.n	800184c <mlx90614_init+0x8c>
  if(mlx90614_getMin(NULL) == false)
 8001834:	2000      	movs	r0, #0
 8001836:	f000 f8a9 	bl	800198c <mlx90614_getMin>
 800183a:	4603      	mov	r3, r0
 800183c:	f083 0301 	eor.w	r3, r3, #1
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <mlx90614_init+0x8a>
    return false;
 8001846:	2300      	movs	r3, #0
 8001848:	e000      	b.n	800184c <mlx90614_init+0x8c>

  return true;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200002dc 	.word	0x200002dc
 8001854:	20000288 	.word	0x20000288
 8001858:	2000030c 	.word	0x2000030c

0800185c <mlx90614_readID>:
{
  mlx90614.unit = MLX90614_UNIT_;
}
//###################################################################################################
bool mlx90614_readID(int16_t *id)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	e028      	b.n	80018bc <mlx90614_readID+0x60>
	{
		int16_t temp = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	817b      	strh	r3, [r7, #10]
		if (!mlx90614_read16(MLX90614_REGISTER_ID0 + i, &temp))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	333c      	adds	r3, #60	; 0x3c
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f107 020a 	add.w	r2, r7, #10
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff21 	bl	80016c4 <mlx90614_read16>
 8001882:	4603      	mov	r3, r0
 8001884:	f083 0301 	eor.w	r3, r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <mlx90614_readID+0x36>
			return false;
 800188e:	2300      	movs	r3, #0
 8001890:	e018      	b.n	80018c4 <mlx90614_readID+0x68>
		if(id != NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <mlx90614_readID+0x4a>
			id[i] = (uint16_t)temp;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	4413      	add	r3, r2
 80018a0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80018a4:	801a      	strh	r2, [r3, #0]
		mlx90614.id[i] = (uint16_t)temp;
 80018a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018aa:	b299      	uxth	r1, r3
 80018ac:	4a07      	ldr	r2, [pc, #28]	; (80018cc <mlx90614_readID+0x70>)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	3314      	adds	r3, #20
 80018b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<4; i++)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3301      	adds	r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	ddd3      	ble.n	800186a <mlx90614_readID+0xe>
	}
	return true;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200002dc 	.word	0x200002dc

080018d0 <mlx90614_getEmissivity>:
//###################################################################################################
bool mlx90614_getEmissivity(float *emissivity)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_KE, &mlx90614.rawEmissivity))
 80018d8:	4917      	ldr	r1, [pc, #92]	; (8001938 <mlx90614_getEmissivity+0x68>)
 80018da:	2024      	movs	r0, #36	; 0x24
 80018dc:	f7ff fef2 	bl	80016c4 <mlx90614_read16>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d022      	beq.n	800192c <mlx90614_getEmissivity+0x5c>
	{
    mlx90614.emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <mlx90614_getEmissivity+0x6c>)
 80018e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	ee07 3a90 	vmov	s15, r3
 80018f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018f6:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001940 <mlx90614_getEmissivity+0x70>
 80018fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <mlx90614_getEmissivity+0x6c>)
 8001900:	edc3 7a04 	vstr	s15, [r3, #16]
		if(emissivity != NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00e      	beq.n	8001928 <mlx90614_getEmissivity+0x58>
      *emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <mlx90614_getEmissivity+0x6c>)
 800190c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001910:	b29b      	uxth	r3, r3
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800191a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001940 <mlx90614_getEmissivity+0x70>
 800191e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <mlx90614_getEmissivity+0x5e>
	}
	return false;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200002de 	.word	0x200002de
 800193c:	200002dc 	.word	0x200002dc
 8001940:	477fff00 	.word	0x477fff00

08001944 <mlx90614_getMax>:
	mlx90614.rawMin = mlx90614_calcRawTemp(minTemp);
	return mlx90614_write16(MLX90614_REGISTER_TOMIN, mlx90614.rawMin);
}
//###################################################################################################
bool mlx90614_getMax(float *maxTemp)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMAX, &mlx90614.rawMax))
 800194c:	490d      	ldr	r1, [pc, #52]	; (8001984 <mlx90614_getMax+0x40>)
 800194e:	2020      	movs	r0, #32
 8001950:	f7ff feb8 	bl	80016c4 <mlx90614_read16>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00e      	beq.n	8001978 <mlx90614_getMax+0x34>
	{
    if(maxTemp != NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d009      	beq.n	8001974 <mlx90614_getMax+0x30>
      *maxTemp = mlx90614.rawMax;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <mlx90614_getMax+0x44>)
 8001962:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <mlx90614_getMax+0x36>
	}
	return false;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200002e6 	.word	0x200002e6
 8001988:	200002dc 	.word	0x200002dc

0800198c <mlx90614_getMin>:
//###################################################################################################
bool mlx90614_getMin(float *minTemp)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMIN, &mlx90614.rawMin))
 8001994:	490d      	ldr	r1, [pc, #52]	; (80019cc <mlx90614_getMin+0x40>)
 8001996:	2021      	movs	r0, #33	; 0x21
 8001998:	f7ff fe94 	bl	80016c4 <mlx90614_read16>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00e      	beq.n	80019c0 <mlx90614_getMin+0x34>
	{
    if(minTemp != NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d009      	beq.n	80019bc <mlx90614_getMin+0x30>
      *minTemp = mlx90614.rawMin;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <mlx90614_getMin+0x44>)
 80019aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <mlx90614_getMin+0x36>
	}
	return false;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200002e8 	.word	0x200002e8
 80019d0:	200002dc 	.word	0x200002dc

080019d4 <mlx90614_getAmbient>:
//###################################################################################################
bool mlx90614_getAmbient(float *ambientTemp)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	if (mlx90614_read16(MLX90614_REGISTER_TA, &mlx90614.rawAmbient))
 80019dc:	490d      	ldr	r1, [pc, #52]	; (8001a14 <mlx90614_getAmbient+0x40>)
 80019de:	2006      	movs	r0, #6
 80019e0:	f7ff fe70 	bl	80016c4 <mlx90614_read16>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00f      	beq.n	8001a0a <mlx90614_getAmbient+0x36>
	{
    if(ambientTemp != NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00a      	beq.n	8001a06 <mlx90614_getAmbient+0x32>
      *ambientTemp = mlx90614_calcTemperature(mlx90614.rawAmbient);
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <mlx90614_getAmbient+0x44>)
 80019f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fe8e 	bl	8001718 <mlx90614_calcTemperature>
 80019fc:	eef0 7a40 	vmov.f32	s15, s0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <mlx90614_getAmbient+0x38>
	}
	return false;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200002e0 	.word	0x200002e0
 8001a18:	200002dc 	.word	0x200002dc

08001a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b085      	sub	sp, #20
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08c      	sub	sp, #48	; 0x30
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	201a      	movs	r0, #26
 8001a72:	f014 fd99 	bl	80165a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001a76:	201a      	movs	r0, #26
 8001a78:	f014 fdb0 	bl	80165dc <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001a7c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001a80:	f7ff ffd3 	bl	8001a2a <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a84:	f107 0208 	add.w	r2, r7, #8
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f017 fa7a 	bl	8018f88 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a94:	f017 fa62 	bl	8018f5c <HAL_RCC_GetPCLK2Freq>
 8001a98:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9c:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <HAL_InitTick+0x8c>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	0c9b      	lsrs	r3, r3, #18
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001aa8:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_InitTick+0x90>)
 8001aaa:	4a11      	ldr	r2, [pc, #68]	; (8001af0 <HAL_InitTick+0x94>)
 8001aac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001aae:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <HAL_InitTick+0x90>)
 8001ab0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ab4:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001ab6:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <HAL_InitTick+0x90>)
 8001ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aba:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_InitTick+0x90>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <HAL_InitTick+0x90>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001ac8:	4808      	ldr	r0, [pc, #32]	; (8001aec <HAL_InitTick+0x90>)
 8001aca:	f017 ff7c 	bl	80199c6 <HAL_TIM_Base_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d104      	bne.n	8001ade <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <HAL_InitTick+0x90>)
 8001ad6:	f017 ffd7 	bl	8019a88 <HAL_TIM_Base_Start_IT>
 8001ada:	4603      	mov	r3, r0
 8001adc:	e000      	b.n	8001ae0 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3730      	adds	r7, #48	; 0x30
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	431bde83 	.word	0x431bde83
 8001aec:	20000310 	.word	0x20000310
 8001af0:	40014800 	.word	0x40014800

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001b52:	f017 ffe7 	bl	8019b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000310 	.word	0x20000310

08001b60 <LL_AHB2_GRP1_EnableClock>:
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4013      	ands	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b84:	68fb      	ldr	r3, [r7, #12]
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_APB1_GRP1_EnableClock>:
{
 8001b92:	b480      	push	{r7}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ba0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_APB1_GRP1_DisableClock>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bda:	4013      	ands	r3, r2
 8001bdc:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <BSP_I2C1_Init+0x70>)
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <BSP_I2C1_Init+0x74>)
 8001bfa:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <BSP_I2C1_Init+0x78>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	4918      	ldr	r1, [pc, #96]	; (8001c64 <BSP_I2C1_Init+0x78>)
 8001c04:	600a      	str	r2, [r1, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d122      	bne.n	8001c50 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001c0a:	4814      	ldr	r0, [pc, #80]	; (8001c5c <BSP_I2C1_Init+0x70>)
 8001c0c:	f015 fc3b 	bl	8017486 <HAL_I2C_GetState>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d11c      	bne.n	8001c50 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001c16:	4811      	ldr	r0, [pc, #68]	; (8001c5c <BSP_I2C1_Init+0x70>)
 8001c18:	f000 f8ee 	bl	8001df8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d116      	bne.n	8001c50 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001c22:	480e      	ldr	r0, [pc, #56]	; (8001c5c <BSP_I2C1_Init+0x70>)
 8001c24:	f000 f8a4 	bl	8001d70 <MX_I2C1_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001c2e:	f06f 0307 	mvn.w	r3, #7
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	e00c      	b.n	8001c50 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c36:	2100      	movs	r1, #0
 8001c38:	4808      	ldr	r0, [pc, #32]	; (8001c5c <BSP_I2C1_Init+0x70>)
 8001c3a:	f015 ff0b 	bl	8017a54 <HAL_I2CEx_ConfigAnalogFilter>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001c44:	f06f 0307 	mvn.w	r3, #7
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	e001      	b.n	8001c50 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001c50:	687b      	ldr	r3, [r7, #4]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000035c 	.word	0x2000035c
 8001c60:	40005400 	.word	0x40005400
 8001c64:	200003b0 	.word	0x200003b0

08001c68 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <BSP_I2C1_DeInit+0x48>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d014      	beq.n	8001ca4 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <BSP_I2C1_DeInit+0x48>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <BSP_I2C1_DeInit+0x48>)
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <BSP_I2C1_DeInit+0x48>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10b      	bne.n	8001ca4 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001c8c:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <BSP_I2C1_DeInit+0x4c>)
 8001c8e:	f000 f8f7 	bl	8001e80 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001c92:	4808      	ldr	r0, [pc, #32]	; (8001cb4 <BSP_I2C1_DeInit+0x4c>)
 8001c94:	f014 ffbd 	bl	8016c12 <HAL_I2C_DeInit>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001c9e:	f06f 0307 	mvn.w	r3, #7
 8001ca2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001ca4:	687b      	ldr	r3, [r7, #4]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200003b0 	.word	0x200003b0
 8001cb4:	2000035c 	.word	0x2000035c

08001cb8 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	80fb      	strh	r3, [r7, #6]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001ccc:	88bb      	ldrh	r3, [r7, #4]
 8001cce:	88f9      	ldrh	r1, [r7, #6]
 8001cd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cd4:	9200      	str	r2, [sp, #0]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	480b      	ldr	r0, [pc, #44]	; (8001d08 <BSP_I2C1_Send+0x50>)
 8001cda:	f014 ffc9 	bl	8016c70 <HAL_I2C_Master_Transmit>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00c      	beq.n	8001cfe <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001ce4:	4808      	ldr	r0, [pc, #32]	; (8001d08 <BSP_I2C1_Send+0x50>)
 8001ce6:	f015 fbdc 	bl	80174a2 <HAL_I2C_GetError>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d003      	beq.n	8001cf8 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001cf0:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	e002      	b.n	8001cfe <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001cf8:	f06f 0303 	mvn.w	r3, #3
 8001cfc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	2000035c 	.word	0x2000035c

08001d0c <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	4603      	mov	r3, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	80fb      	strh	r3, [r7, #6]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001d20:	88bb      	ldrh	r3, [r7, #4]
 8001d22:	88f9      	ldrh	r1, [r7, #6]
 8001d24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d28:	9200      	str	r2, [sp, #0]
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	480b      	ldr	r0, [pc, #44]	; (8001d5c <BSP_I2C1_Recv+0x50>)
 8001d2e:	f015 f893 	bl	8016e58 <HAL_I2C_Master_Receive>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00c      	beq.n	8001d52 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001d38:	4808      	ldr	r0, [pc, #32]	; (8001d5c <BSP_I2C1_Recv+0x50>)
 8001d3a:	f015 fbb2 	bl	80174a2 <HAL_I2C_GetError>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d003      	beq.n	8001d4c <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001d44:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	e002      	b.n	8001d52 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001d4c:	f06f 0303 	mvn.w	r3, #3
 8001d50:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	2000035c 	.word	0x2000035c

08001d60 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001d64:	f014 fb2c 	bl	80163c0 <HAL_GetTick>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <MX_I2C1_Init+0x80>)
 8001d80:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <MX_I2C1_Init+0x84>)
 8001d86:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f014 fe9e 	bl	8016af4 <HAL_I2C_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f015 fe45 	bl	8017a54 <HAL_I2CEx_ConfigAnalogFilter>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f015 fe87 	bl	8017aea <HAL_I2CEx_ConfigDigitalFilter>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40005400 	.word	0x40005400
 8001df4:	00707cbb 	.word	0x00707cbb

08001df8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b09c      	sub	sp, #112	; 0x70
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	2250      	movs	r2, #80	; 0x50
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f018 fe1d 	bl	801aa48 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e0e:	2304      	movs	r3, #4
 8001e10:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e12:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f017 fb45 	bl	80194ac <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	2002      	movs	r0, #2
 8001e24:	f7ff fe9c 	bl	8001b60 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e2e:	2312      	movs	r3, #18
 8001e30:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001e3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e42:	4619      	mov	r1, r3
 8001e44:	480d      	ldr	r0, [pc, #52]	; (8001e7c <I2C1_MspInit+0x84>)
 8001e46:	f014 fbd7 	bl	80165f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001e4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e50:	2312      	movs	r3, #18
 8001e52:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001e60:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e64:	4619      	mov	r1, r3
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <I2C1_MspInit+0x84>)
 8001e68:	f014 fbc6 	bl	80165f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e6c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001e70:	f7ff fe8f 	bl	8001b92 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001e74:	bf00      	nop
 8001e76:	3770      	adds	r7, #112	; 0x70
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	48000400 	.word	0x48000400

08001e80 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001e88:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001e8c:	f7ff fe9a 	bl	8001bc4 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e94:	4805      	ldr	r0, [pc, #20]	; (8001eac <I2C1_MspDeInit+0x2c>)
 8001e96:	f014 fd1f 	bl	80168d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001e9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e9e:	4803      	ldr	r0, [pc, #12]	; (8001eac <I2C1_MspDeInit+0x2c>)
 8001ea0:	f014 fd1a 	bl	80168d8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	48000400 	.word	0x48000400

08001eb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return 1;
 8001eb4:	2301      	movs	r3, #1
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <_kill>:

int _kill(int pid, int sig)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eca:	f018 fd85 	bl	801a9d8 <__errno>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2216      	movs	r2, #22
 8001ed2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_exit>:

void _exit (int status)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ffe7 	bl	8001ec0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ef2:	e7fe      	b.n	8001ef2 <_exit+0x12>

08001ef4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	e00a      	b.n	8001f1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f06:	f3af 8000 	nop.w
 8001f0a:	4601      	mov	r1, r0
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	60ba      	str	r2, [r7, #8]
 8001f12:	b2ca      	uxtb	r2, r1
 8001f14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	dbf0      	blt.n	8001f06 <_read+0x12>
  }

  return len;
 8001f24:	687b      	ldr	r3, [r7, #4]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f56:	605a      	str	r2, [r3, #4]
  return 0;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_isatty>:

int _isatty(int file)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <_sbrk+0x5c>)
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <_sbrk+0x60>)
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <_sbrk+0x64>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <_sbrk+0x68>)
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d207      	bcs.n	8001fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc8:	f018 fd06 	bl	801a9d8 <__errno>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	220c      	movs	r2, #12
 8001fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e009      	b.n	8001fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <_sbrk+0x64>)
 8001fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20030000 	.word	0x20030000
 8001ff8:	00000400 	.word	0x00000400
 8001ffc:	200003b4 	.word	0x200003b4
 8002000:	20008838 	.word	0x20008838

08002004 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002008:	4b24      	ldr	r3, [pc, #144]	; (800209c <SystemInit+0x98>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200e:	4a23      	ldr	r2, [pc, #140]	; (800209c <SystemInit+0x98>)
 8002010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002030:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <SystemInit+0x9c>)
 800203e:	4013      	ands	r3, r2
 8002040:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800204e:	f023 0305 	bic.w	r3, r3, #5
 8002052:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800205e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206e:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <SystemInit+0xa0>)
 8002070:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <SystemInit+0xa0>)
 8002078:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800207a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002088:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800208a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000ed00 	.word	0xe000ed00
 80020a0:	faf6fefb 	.word	0xfaf6fefb
 80020a4:	22041000 	.word	0x22041000

080020a8 <LL_AHB2_GRP1_EnableClock>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4313      	orrs	r3, r2
 80020be:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4013      	ands	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020cc:	68fb      	ldr	r3, [r7, #12]
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_APB2_GRP1_EnableClock>:
{
 80020da:	b480      	push	{r7}
 80020dc:	b085      	sub	sp, #20
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80020e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80020f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4013      	ands	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020fe:	68fb      	ldr	r3, [r7, #12]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002110:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <MX_USART1_UART_Init+0x94>)
 8002112:	4a24      	ldr	r2, [pc, #144]	; (80021a4 <MX_USART1_UART_Init+0x98>)
 8002114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002116:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <MX_USART1_UART_Init+0x94>)
 8002118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800211c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <MX_USART1_UART_Init+0x94>)
 8002120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002124:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <MX_USART1_UART_Init+0x94>)
 8002128:	2200      	movs	r2, #0
 800212a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800212c:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <MX_USART1_UART_Init+0x94>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002132:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <MX_USART1_UART_Init+0x94>)
 8002134:	220c      	movs	r2, #12
 8002136:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <MX_USART1_UART_Init+0x94>)
 800213a:	2200      	movs	r2, #0
 800213c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800213e:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <MX_USART1_UART_Init+0x94>)
 8002140:	2200      	movs	r2, #0
 8002142:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002144:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <MX_USART1_UART_Init+0x94>)
 8002146:	2200      	movs	r2, #0
 8002148:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <MX_USART1_UART_Init+0x94>)
 800214c:	2200      	movs	r2, #0
 800214e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <MX_USART1_UART_Init+0x94>)
 8002152:	2200      	movs	r2, #0
 8002154:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002156:	4812      	ldr	r0, [pc, #72]	; (80021a0 <MX_USART1_UART_Init+0x94>)
 8002158:	f017 fece 	bl	8019ef8 <HAL_UART_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002162:	f7ff faa9 	bl	80016b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002166:	2100      	movs	r1, #0
 8002168:	480d      	ldr	r0, [pc, #52]	; (80021a0 <MX_USART1_UART_Init+0x94>)
 800216a:	f018 fb2e 	bl	801a7ca <HAL_UARTEx_SetTxFifoThreshold>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002174:	f7ff faa0 	bl	80016b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002178:	2100      	movs	r1, #0
 800217a:	4809      	ldr	r0, [pc, #36]	; (80021a0 <MX_USART1_UART_Init+0x94>)
 800217c:	f018 fb63 	bl	801a846 <HAL_UARTEx_SetRxFifoThreshold>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002186:	f7ff fa97 	bl	80016b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800218a:	4805      	ldr	r0, [pc, #20]	; (80021a0 <MX_USART1_UART_Init+0x94>)
 800218c:	f018 fae4 	bl	801a758 <HAL_UARTEx_DisableFifoMode>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002196:	f7ff fa8f 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200003b8 	.word	0x200003b8
 80021a4:	40013800 	.word	0x40013800

080021a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b09c      	sub	sp, #112	; 0x70
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	2250      	movs	r2, #80	; 0x50
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f018 fc3d 	bl	801aa48 <memset>
  if(uartHandle->Instance==USART1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a16      	ldr	r2, [pc, #88]	; (800222c <HAL_UART_MspInit+0x84>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d124      	bne.n	8002222 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021d8:	2301      	movs	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021dc:	2300      	movs	r3, #0
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	4618      	mov	r0, r3
 80021e6:	f017 f961 	bl	80194ac <HAL_RCCEx_PeriphCLKConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021f0:	f7ff fa62 	bl	80016b8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021f8:	f7ff ff6f 	bl	80020da <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fc:	2002      	movs	r0, #2
 80021fe:	f7ff ff53 	bl	80020a8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002202:	23c0      	movs	r3, #192	; 0xc0
 8002204:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800220a:	2301      	movs	r3, #1
 800220c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002212:	2307      	movs	r3, #7
 8002214:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002216:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800221a:	4619      	mov	r1, r3
 800221c:	4804      	ldr	r0, [pc, #16]	; (8002230 <HAL_UART_MspInit+0x88>)
 800221e:	f014 f9eb 	bl	80165f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002222:	bf00      	nop
 8002224:	3770      	adds	r7, #112	; 0x70
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40013800 	.word	0x40013800
 8002230:	48000400 	.word	0x48000400

08002234 <LL_AHB2_GRP1_EnableClock>:
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800223c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4313      	orrs	r3, r2
 800224a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800224c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002250:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4013      	ands	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002258:	68fb      	ldr	r3, [r7, #12]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <LL_APB1_GRP1_EnableClock>:
{
 8002266:	b480      	push	{r7}
 8002268:	b085      	sub	sp, #20
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800226e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002272:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002274:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4313      	orrs	r3, r2
 800227c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800227e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002282:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4013      	ands	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800228a:	68fb      	ldr	r3, [r7, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800229c:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <MX_USB_PCD_Init+0x48>)
 800229e:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <MX_USB_PCD_Init+0x4c>)
 80022a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <MX_USB_PCD_Init+0x48>)
 80022a4:	2208      	movs	r2, #8
 80022a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80022a8:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <MX_USB_PCD_Init+0x48>)
 80022aa:	2202      	movs	r2, #2
 80022ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <MX_USB_PCD_Init+0x48>)
 80022b0:	2202      	movs	r2, #2
 80022b2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <MX_USB_PCD_Init+0x48>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_USB_PCD_Init+0x48>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80022c0:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <MX_USB_PCD_Init+0x48>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_USB_PCD_Init+0x48>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80022cc:	4804      	ldr	r0, [pc, #16]	; (80022e0 <MX_USB_PCD_Init+0x48>)
 80022ce:	f015 fc58 	bl	8017b82 <HAL_PCD_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80022d8:	f7ff f9ee 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	2000044c 	.word	0x2000044c
 80022e4:	40006800 	.word	0x40006800

080022e8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b09c      	sub	sp, #112	; 0x70
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	2250      	movs	r2, #80	; 0x50
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f018 fb9d 	bl	801aa48 <memset>
  if(pcdHandle->Instance==USB)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a1f      	ldr	r2, [pc, #124]	; (8002390 <HAL_PCD_MspInit+0xa8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d136      	bne.n	8002386 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800231c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800231e:	2318      	movs	r3, #24
 8002320:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002326:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002328:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800232c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800232e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002332:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002338:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800233a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800233e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	4618      	mov	r0, r3
 8002346:	f017 f8b1 	bl	80194ac <HAL_RCCEx_PeriphCLKConfig>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8002350:	f7ff f9b2 	bl	80016b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002354:	2001      	movs	r0, #1
 8002356:	f7ff ff6d 	bl	8002234 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800235a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800235e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800236c:	230a      	movs	r3, #10
 800236e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002370:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002374:	4619      	mov	r1, r3
 8002376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800237a:	f014 f93d 	bl	80165f8 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800237e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002382:	f7ff ff70 	bl	8002266 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002386:	bf00      	nop
 8002388:	3770      	adds	r7, #112	; 0x70
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40006800 	.word	0x40006800

08002394 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002394:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002396:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002398:	3304      	adds	r3, #4

0800239a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800239a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800239e:	d3f9      	bcc.n	8002394 <CopyDataInit>
  bx lr
 80023a0:	4770      	bx	lr

080023a2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80023a2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80023a4:	3004      	adds	r0, #4

080023a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80023a6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80023a8:	d3fb      	bcc.n	80023a2 <FillZerobss>
  bx lr
 80023aa:	4770      	bx	lr

080023ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023ac:	480c      	ldr	r0, [pc, #48]	; (80023e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023b0:	f7ff fe28 	bl	8002004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80023b4:	480b      	ldr	r0, [pc, #44]	; (80023e4 <LoopForever+0x6>)
 80023b6:	490c      	ldr	r1, [pc, #48]	; (80023e8 <LoopForever+0xa>)
 80023b8:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <LoopForever+0xe>)
 80023ba:	2300      	movs	r3, #0
 80023bc:	f7ff ffed 	bl	800239a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80023c0:	480b      	ldr	r0, [pc, #44]	; (80023f0 <LoopForever+0x12>)
 80023c2:	490c      	ldr	r1, [pc, #48]	; (80023f4 <LoopForever+0x16>)
 80023c4:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <LoopForever+0x1a>)
 80023c6:	2300      	movs	r3, #0
 80023c8:	f7ff ffe7 	bl	800239a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80023cc:	480b      	ldr	r0, [pc, #44]	; (80023fc <LoopForever+0x1e>)
 80023ce:	490c      	ldr	r1, [pc, #48]	; (8002400 <LoopForever+0x22>)
 80023d0:	2300      	movs	r3, #0
 80023d2:	f7ff ffe8 	bl	80023a6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80023d6:	f018 fb05 	bl	801a9e4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80023da:	f7ff f8ae 	bl	800153a <main>

080023de <LoopForever>:

LoopForever:
  b LoopForever
 80023de:	e7fe      	b.n	80023de <LoopForever>
  ldr   r0, =_estack
 80023e0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80023e4:	20000008 	.word	0x20000008
 80023e8:	2000024c 	.word	0x2000024c
 80023ec:	0801ded4 	.word	0x0801ded4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80023f0:	20030000 	.word	0x20030000
 80023f4:	20030000 	.word	0x20030000
 80023f8:	0801e118 	.word	0x0801e118
  INIT_BSS _sbss, _ebss
 80023fc:	20000250 	.word	0x20000250
 8002400:	20008834 	.word	0x20008834

08002404 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002404:	e7fe      	b.n	8002404 <ADC1_IRQHandler>

08002406 <LL_AHB2_GRP1_EnableClock>:
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4313      	orrs	r3, r2
 800241c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4013      	ands	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800242a:	68fb      	ldr	r3, [r7, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <VL53L1A2_Init>:
  * @brief Initialize X-NUCLEO-53L1A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L1A2_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
  int32_t status = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 8002442:	4b36      	ldr	r3, [pc, #216]	; (800251c <VL53L1A2_Init+0xe4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	4934      	ldr	r1, [pc, #208]	; (800251c <VL53L1A2_Init+0xe4>)
 800244a:	600a      	str	r2, [r1, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d154      	bne.n	80024fa <VL53L1A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 8002450:	f000 f8d4 	bl	80025fc <_I2cFailRecover>
 8002454:	4602      	mov	r2, r0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4313      	orrs	r3, r2
 800245a:	607b      	str	r3, [r7, #4]
    status |= VL53L1A2_I2C_Init();
 800245c:	f7ff fbc6 	bl	8001bec <BSP_I2C1_Init>
 8002460:	4602      	mov	r2, r0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4313      	orrs	r3, r2
 8002466:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d147      	bne.n	80024fe <VL53L1A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 800246e:	463a      	mov	r2, r7
 8002470:	2302      	movs	r3, #2
 8002472:	2100      	movs	r1, #0
 8002474:	2086      	movs	r0, #134	; 0x86
 8002476:	f000 f953 	bl	8002720 <_ExpanderRd>
 800247a:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d13f      	bne.n	8002502 <VL53L1A2_Init+0xca>
 8002482:	783b      	ldrb	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d13c      	bne.n	8002502 <VL53L1A2_Init+0xca>
 8002488:	787b      	ldrb	r3, [r7, #1]
 800248a:	2b16      	cmp	r3, #22
 800248c:	d139      	bne.n	8002502 <VL53L1A2_Init+0xca>
	  {
      VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 800248e:	463a      	mov	r2, r7
 8002490:	2302      	movs	r3, #2
 8002492:	2100      	movs	r1, #0
 8002494:	2084      	movs	r0, #132	; 0x84
 8002496:	f000 f943 	bl	8002720 <_ExpanderRd>
 800249a:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d131      	bne.n	8002506 <VL53L1A2_Init+0xce>
 80024a2:	783b      	ldrb	r3, [r7, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d12e      	bne.n	8002506 <VL53L1A2_Init+0xce>
 80024a8:	787b      	ldrb	r3, [r7, #1]
 80024aa:	2b16      	cmp	r3, #22
 80024ac:	d12b      	bne.n	8002506 <VL53L1A2_Init+0xce>
	  {
		  VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 80024ae:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <VL53L1A2_Init+0xe8>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 80024b4:	23ff      	movs	r3, #255	; 0xff
 80024b6:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 80024b8:	23ff      	movs	r3, #255	; 0xff
 80024ba:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 80024bc:	463a      	mov	r2, r7
 80024be:	2302      	movs	r3, #2
 80024c0:	2114      	movs	r1, #20
 80024c2:	2086      	movs	r0, #134	; 0x86
 80024c4:	f000 f95e 	bl	8002784 <_ExpanderWR>
 80024c8:	6078      	str	r0, [r7, #4]

	  if (status)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d11c      	bne.n	800250a <VL53L1A2_Init+0xd2>
	  {
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 80024d0:	23ff      	movs	r3, #255	; 0xff
 80024d2:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 80024d4:	23bf      	movs	r3, #191	; 0xbf
 80024d6:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 80024d8:	463a      	mov	r2, r7
 80024da:	2302      	movs	r3, #2
 80024dc:	2114      	movs	r1, #20
 80024de:	2084      	movs	r0, #132	; 0x84
 80024e0:	f000 f950 	bl	8002784 <_ExpanderWR>
 80024e4:	6078      	str	r0, [r7, #4]

	  if (status)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d110      	bne.n	800250e <VL53L1A2_Init+0xd6>
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <VL53L1A2_Init+0xe8>)
 80024ee:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 80024f2:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 80024f4:	f000 f8f4 	bl	80026e0 <_ExpandersSetAllIO>
 80024f8:	6078      	str	r0, [r7, #4]
	  {
		VL53L1A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 80024fa:	bf00      	nop
 80024fc:	e008      	b.n	8002510 <VL53L1A2_Init+0xd8>
      goto done_err;
 80024fe:	bf00      	nop
 8002500:	e006      	b.n	8002510 <VL53L1A2_Init+0xd8>
      goto done_err;
 8002502:	bf00      	nop
 8002504:	e004      	b.n	8002510 <VL53L1A2_Init+0xd8>
		  goto done_err;
 8002506:	bf00      	nop
 8002508:	e002      	b.n	8002510 <VL53L1A2_Init+0xd8>
		goto done_err;
 800250a:	bf00      	nop
 800250c:	e000      	b.n	8002510 <VL53L1A2_Init+0xd8>
		goto done_err;
 800250e:	bf00      	nop
  return status;
 8002510:	687b      	ldr	r3, [r7, #4]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000740 	.word	0x20000740
 8002520:	20000744 	.word	0x20000744

08002524 <VL53L1A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L1A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L1A2_ResetId(uint8_t DevNo, uint8_t state)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	460a      	mov	r2, r1
 800252e:	71fb      	strb	r3, [r7, #7]
 8002530:	4613      	mov	r3, r2
 8002532:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d037      	beq.n	80025aa <VL53L1A2_ResetId+0x86>
 800253a:	2b02      	cmp	r3, #2
 800253c:	dc4e      	bgt.n	80025dc <VL53L1A2_ResetId+0xb8>
 800253e:	2b00      	cmp	r3, #0
 8002540:	d01a      	beq.n	8002578 <VL53L1A2_ResetId+0x54>
 8002542:	2b01      	cmp	r3, #1
 8002544:	d14a      	bne.n	80025dc <VL53L1A2_ResetId+0xb8>
  {
    case VL53L1A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 8002546:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <VL53L1A2_ResetId+0xcc>)
 8002548:	78db      	ldrb	r3, [r3, #3]
 800254a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800254e:	b2da      	uxtb	r2, r3
 8002550:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <VL53L1A2_ResetId+0xcc>)
 8002552:	70da      	strb	r2, [r3, #3]

      if (state)
 8002554:	79bb      	ldrb	r3, [r7, #6]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <VL53L1A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 800255a:	4b25      	ldr	r3, [pc, #148]	; (80025f0 <VL53L1A2_ResetId+0xcc>)
 800255c:	78db      	ldrb	r3, [r3, #3]
 800255e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002562:	b2da      	uxtb	r2, r3
 8002564:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <VL53L1A2_ResetId+0xcc>)
 8002566:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8002568:	2301      	movs	r3, #1
 800256a:	4a22      	ldr	r2, [pc, #136]	; (80025f4 <VL53L1A2_ResetId+0xd0>)
 800256c:	2113      	movs	r1, #19
 800256e:	2084      	movs	r0, #132	; 0x84
 8002570:	f000 f908 	bl	8002784 <_ExpanderWR>
 8002574:	60f8      	str	r0, [r7, #12]
      break;
 8002576:	e035      	b.n	80025e4 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 8002578:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <VL53L1A2_ResetId+0xcc>)
 800257a:	785b      	ldrb	r3, [r3, #1]
 800257c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <VL53L1A2_ResetId+0xcc>)
 8002584:	705a      	strb	r2, [r3, #1]

      if (state)
 8002586:	79bb      	ldrb	r3, [r7, #6]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d006      	beq.n	800259a <VL53L1A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 800258c:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <VL53L1A2_ResetId+0xcc>)
 800258e:	785b      	ldrb	r3, [r3, #1]
 8002590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <VL53L1A2_ResetId+0xcc>)
 8002598:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800259a:	2301      	movs	r3, #1
 800259c:	4a16      	ldr	r2, [pc, #88]	; (80025f8 <VL53L1A2_ResetId+0xd4>)
 800259e:	2113      	movs	r1, #19
 80025a0:	2086      	movs	r0, #134	; 0x86
 80025a2:	f000 f8ef 	bl	8002784 <_ExpanderWR>
 80025a6:	60f8      	str	r0, [r7, #12]
      break;
 80025a8:	e01c      	b.n	80025e4 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <VL53L1A2_ResetId+0xcc>)
 80025ac:	785b      	ldrb	r3, [r3, #1]
 80025ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <VL53L1A2_ResetId+0xcc>)
 80025b6:	705a      	strb	r2, [r3, #1]

      if (state)
 80025b8:	79bb      	ldrb	r3, [r7, #6]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <VL53L1A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <VL53L1A2_ResetId+0xcc>)
 80025c0:	785b      	ldrb	r3, [r3, #1]
 80025c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <VL53L1A2_ResetId+0xcc>)
 80025ca:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80025cc:	2301      	movs	r3, #1
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <VL53L1A2_ResetId+0xd4>)
 80025d0:	2113      	movs	r1, #19
 80025d2:	2086      	movs	r0, #134	; 0x86
 80025d4:	f000 f8d6 	bl	8002784 <_ExpanderWR>
 80025d8:	60f8      	str	r0, [r7, #12]
      break;
 80025da:	e003      	b.n	80025e4 <VL53L1A2_ResetId+0xc0>

    default:
      VL53L1A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295
 80025e0:	60fb      	str	r3, [r7, #12]
      goto done;
 80025e2:	e000      	b.n	80025e6 <VL53L1A2_ResetId+0xc2>
  if (status)
  {
    VL53L1A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 80025e4:	bf00      	nop
  return status;
 80025e6:	68fb      	ldr	r3, [r7, #12]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000744 	.word	0x20000744
 80025f4:	20000747 	.word	0x20000747
 80025f8:	20000745 	.word	0x20000745

080025fc <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	75bb      	strb	r3, [r7, #22]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 8002606:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <_I2cFailRecover+0xdc>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 800260e:	2300      	movs	r3, #0
 8002610:	e05e      	b.n	80026d0 <_I2cFailRecover+0xd4>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002612:	2002      	movs	r0, #2
 8002614:	f7ff fef7 	bl	8002406 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SCL_GPIO_PIN;
 8002618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800261c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800261e:	2311      	movs	r3, #17
 8002620:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002622:	2301      	movs	r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002626:	463b      	mov	r3, r7
 8002628:	4619      	mov	r1, r3
 800262a:	482c      	ldr	r0, [pc, #176]	; (80026dc <_I2cFailRecover+0xe0>)
 800262c:	f013 ffe4 	bl	80165f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SDA_GPIO_PIN;
 8002630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002634:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002636:	2311      	movs	r3, #17
 8002638:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800263a:	2301      	movs	r3, #1
 800263c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 800263e:	463b      	mov	r3, r7
 8002640:	4619      	mov	r1, r3
 8002642:	4826      	ldr	r0, [pc, #152]	; (80026dc <_I2cFailRecover+0xe0>)
 8002644:	f013 ffd8 	bl	80165f8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8002648:	2201      	movs	r2, #1
 800264a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800264e:	4823      	ldr	r0, [pc, #140]	; (80026dc <_I2cFailRecover+0xe0>)
 8002650:	f014 fa38 	bl	8016ac4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 8002654:	2201      	movs	r2, #1
 8002656:	f44f 7100 	mov.w	r1, #512	; 0x200
 800265a:	4820      	ldr	r0, [pc, #128]	; (80026dc <_I2cFailRecover+0xe0>)
 800265c:	f014 fa32 	bl	8016ac4 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8002660:	2300      	movs	r3, #0
 8002662:	75fb      	strb	r3, [r7, #23]
 8002664:	e014      	b.n	8002690 <_I2cFailRecover+0x94>
    {
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 8002666:	2200      	movs	r2, #0
 8002668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800266c:	481b      	ldr	r0, [pc, #108]	; (80026dc <_I2cFailRecover+0xe0>)
 800266e:	f014 fa29 	bl	8016ac4 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8002672:	2001      	movs	r0, #1
 8002674:	f013 febc 	bl	80163f0 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8002678:	2201      	movs	r2, #1
 800267a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800267e:	4817      	ldr	r0, [pc, #92]	; (80026dc <_I2cFailRecover+0xe0>)
 8002680:	f014 fa20 	bl	8016ac4 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8002684:	2001      	movs	r0, #1
 8002686:	f013 feb3 	bl	80163f0 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 800268a:	7dfb      	ldrb	r3, [r7, #23]
 800268c:	3301      	adds	r3, #1
 800268e:	75fb      	strb	r3, [r7, #23]
 8002690:	7dfb      	ldrb	r3, [r7, #23]
 8002692:	2b09      	cmp	r3, #9
 8002694:	d9e7      	bls.n	8002666 <_I2cFailRecover+0x6a>
    }
    retry_cnt++;
 8002696:	7dbb      	ldrb	r3, [r7, #22]
 8002698:	3301      	adds	r3, #1
 800269a:	75bb      	strb	r3, [r7, #22]
  } while ((HAL_GPIO_ReadPin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 800269c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026a0:	480e      	ldr	r0, [pc, #56]	; (80026dc <_I2cFailRecover+0xe0>)
 80026a2:	f014 f9f7 	bl	8016a94 <HAL_GPIO_ReadPin>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <_I2cFailRecover+0xb6>
 80026ac:	7dbb      	ldrb	r3, [r7, #22]
 80026ae:	2b06      	cmp	r3, #6
 80026b0:	d9d6      	bls.n	8002660 <_I2cFailRecover+0x64>

  if (HAL_GPIO_ReadPin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 80026b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026b6:	4809      	ldr	r0, [pc, #36]	; (80026dc <_I2cFailRecover+0xe0>)
 80026b8:	f014 f9ec 	bl	8016a94 <HAL_GPIO_ReadPin>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <_I2cFailRecover+0xcc>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 80026c2:	f06f 0304 	mvn.w	r3, #4
 80026c6:	e003      	b.n	80026d0 <_I2cFailRecover+0xd4>
  }

  is_already_init = 1U;
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <_I2cFailRecover+0xdc>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000748 	.word	0x20000748
 80026dc:	48000400 	.word	0x48000400

080026e0 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 80026e6:	2302      	movs	r3, #2
 80026e8:	4a0b      	ldr	r2, [pc, #44]	; (8002718 <_ExpandersSetAllIO+0x38>)
 80026ea:	2112      	movs	r1, #18
 80026ec:	2086      	movs	r0, #134	; 0x86
 80026ee:	f000 f849 	bl	8002784 <_ExpanderWR>
 80026f2:	6078      	str	r0, [r7, #4]

  if (status)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d107      	bne.n	800270a <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 80026fa:	2302      	movs	r3, #2
 80026fc:	4a07      	ldr	r2, [pc, #28]	; (800271c <_ExpandersSetAllIO+0x3c>)
 80026fe:	2112      	movs	r1, #18
 8002700:	2084      	movs	r0, #132	; 0x84
 8002702:	f000 f83f 	bl	8002784 <_ExpanderWR>
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	e000      	b.n	800270c <_ExpandersSetAllIO+0x2c>
    goto done_err;
 800270a:	bf00      	nop

done_err:
  return status;
 800270c:	687b      	ldr	r3, [r7, #4]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000744 	.word	0x20000744
 800271c:	20000746 	.word	0x20000746

08002720 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	74fb      	strb	r3, [r7, #19]
  VL53L1A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	b299      	uxth	r1, r3
 8002738:	f107 0213 	add.w	r2, r7, #19
 800273c:	2364      	movs	r3, #100	; 0x64
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	2301      	movs	r3, #1
 8002742:	480f      	ldr	r0, [pc, #60]	; (8002780 <_ExpanderRd+0x60>)
 8002744:	f014 fa94 	bl	8016c70 <HAL_I2C_Master_Transmit>
 8002748:	4603      	mov	r3, r0
 800274a:	617b      	str	r3, [r7, #20]

    if (status)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d110      	bne.n	8002774 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L1A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	b299      	uxth	r1, r3
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	b29a      	uxth	r2, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2064      	movs	r0, #100	; 0x64
 800275e:	fb00 f303 	mul.w	r3, r0, r3
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4805      	ldr	r0, [pc, #20]	; (8002780 <_ExpanderRd+0x60>)
 800276a:	f014 fb75 	bl	8016e58 <HAL_I2C_Master_Receive>
 800276e:	4603      	mov	r3, r0
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e000      	b.n	8002776 <_ExpanderRd+0x56>
      break;
 8002774:	bf00      	nop
  } while (0);

  VL53L1A2_PutI2cBus();

  return status;
 8002776:	697b      	ldr	r3, [r7, #20]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	2000035c 	.word	0x2000035c

08002784 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08c      	sub	sp, #48	; 0x30
 8002788:	af02      	add	r7, sp, #8
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	3301      	adds	r3, #1
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f018 f942 	bl	801aa2c <memcpy>

  VL53L1A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	b299      	uxth	r1, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3301      	adds	r3, #1
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	f107 0214 	add.w	r2, r7, #20
 80027b8:	2064      	movs	r0, #100	; 0x64
 80027ba:	9000      	str	r0, [sp, #0]
 80027bc:	4804      	ldr	r0, [pc, #16]	; (80027d0 <_ExpanderWR+0x4c>)
 80027be:	f014 fa57 	bl	8016c70 <HAL_I2C_Master_Transmit>
 80027c2:	4603      	mov	r3, r0
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L1A2_PutI2cBus();

  return status;
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3728      	adds	r7, #40	; 0x28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	2000035c 	.word	0x2000035c

080027d4 <VL53L1A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d903      	bls.n	80027ea <VL53L1A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80027e2:	f06f 0301 	mvn.w	r3, #1
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	e014      	b.n	8002814 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L1A2_Init() != 0)
 80027ea:	f7ff fe25 	bl	8002438 <VL53L1A2_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <VL53L1A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80027f4:	f06f 0303 	mvn.w	r3, #3
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	e00b      	b.n	8002814 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 80027fc:	2101      	movs	r1, #1
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f8d4 	bl	80029ac <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8002804:	2100      	movs	r1, #0
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f8d0 	bl	80029ac <VL53L1A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L1CB_Probe(Instance);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f90d 	bl	8002a2c <VL53L1CB_Probe>
 8002812:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002814:	68fb      	ldr	r3, [r7, #12]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <VL53L1A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d903      	bls.n	8002838 <VL53L1A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002830:	f06f 0301 	mvn.w	r3, #1
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	e012      	b.n	800285e <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ReadID(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <VL53L1A2_RANGING_SENSOR_ReadID+0x48>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	490b      	ldr	r1, [pc, #44]	; (800286c <VL53L1A2_RANGING_SENSOR_ReadID+0x4c>)
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002846:	6839      	ldr	r1, [r7, #0]
 8002848:	4610      	mov	r0, r2
 800284a:	4798      	blx	r3
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	da03      	bge.n	800285a <VL53L1A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002852:	f06f 0304 	mvn.w	r3, #4
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	e001      	b.n	800285e <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000758 	.word	0x20000758
 800286c:	2000074c 	.word	0x2000074c

08002870 <VL53L1A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d903      	bls.n	8002888 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002880:	f06f 0301 	mvn.w	r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	e012      	b.n	80028ae <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x48>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	490b      	ldr	r1, [pc, #44]	; (80028bc <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002896:	6839      	ldr	r1, [r7, #0]
 8002898:	4610      	mov	r0, r2
 800289a:	4798      	blx	r3
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	da03      	bge.n	80028aa <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80028a2:	f06f 0304 	mvn.w	r3, #4
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	e001      	b.n	80028ae <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80028ae:	68fb      	ldr	r3, [r7, #12]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000758 	.word	0x20000758
 80028bc:	2000074c 	.word	0x2000074c

080028c0 <VL53L1A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d903      	bls.n	80028d8 <VL53L1A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80028d0:	f06f 0301 	mvn.w	r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	e012      	b.n	80028fe <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->GetDistance(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <VL53L1A2_RANGING_SENSOR_GetDistance+0x48>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	490b      	ldr	r1, [pc, #44]	; (800290c <VL53L1A2_RANGING_SENSOR_GetDistance+0x4c>)
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80028e6:	6839      	ldr	r1, [r7, #0]
 80028e8:	4610      	mov	r0, r2
 80028ea:	4798      	blx	r3
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	da03      	bge.n	80028fa <VL53L1A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80028f2:	f06f 0304 	mvn.w	r3, #4
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	e001      	b.n	80028fe <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80028fe:	68fb      	ldr	r3, [r7, #12]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000758 	.word	0x20000758
 800290c:	2000074c 	.word	0x2000074c

08002910 <VL53L1A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d903      	bls.n	8002928 <VL53L1A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002920:	f06f 0301 	mvn.w	r3, #1
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	e012      	b.n	800294e <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Start(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <VL53L1A2_RANGING_SENSOR_Start+0x48>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	490b      	ldr	r1, [pc, #44]	; (800295c <VL53L1A2_RANGING_SENSOR_Start+0x4c>)
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002936:	6839      	ldr	r1, [r7, #0]
 8002938:	4610      	mov	r0, r2
 800293a:	4798      	blx	r3
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	da03      	bge.n	800294a <VL53L1A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002942:	f06f 0304 	mvn.w	r3, #4
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	e001      	b.n	800294e <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800294e:	68fb      	ldr	r3, [r7, #12]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000758 	.word	0x20000758
 800295c:	2000074c 	.word	0x2000074c

08002960 <VL53L1A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d903      	bls.n	8002976 <VL53L1A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800296e:	f06f 0301 	mvn.w	r3, #1
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	e011      	b.n	800299a <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Stop(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <VL53L1A2_RANGING_SENSOR_Stop+0x44>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	490a      	ldr	r1, [pc, #40]	; (80029a8 <VL53L1A2_RANGING_SENSOR_Stop+0x48>)
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002984:	4610      	mov	r0, r2
 8002986:	4798      	blx	r3
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	da03      	bge.n	8002996 <VL53L1A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800298e:	f06f 0304 	mvn.w	r3, #4
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	e001      	b.n	800299a <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800299a:	68fb      	ldr	r3, [r7, #12]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20000758 	.word	0x20000758
 80029a8:	2000074c 	.word	0x2000074c

080029ac <VL53L1A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d903      	bls.n	80029c4 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80029bc:	f06f 0301 	mvn.w	r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	e02e      	b.n	8002a22 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d112      	bne.n	80029f0 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 1) < 0)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2101      	movs	r1, #1
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fda7 	bl	8002524 <VL53L1A2_ResetId>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	da03      	bge.n	80029e4 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80029dc:	f06f 0303 	mvn.w	r3, #3
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	e01e      	b.n	8002a22 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 80029e4:	2002      	movs	r0, #2
 80029e6:	f013 fd03 	bl	80163f0 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	e018      	b.n	8002a22 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d112      	bne.n	8002a1c <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 0) < 0)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2100      	movs	r1, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fd91 	bl	8002524 <VL53L1A2_ResetId>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	da03      	bge.n	8002a10 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002a08:	f06f 0303 	mvn.w	r3, #3
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	e008      	b.n	8002a22 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8002a10:	2002      	movs	r0, #2
 8002a12:	f013 fced 	bl	80163f0 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	e002      	b.n	8002a22 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a1c:	f06f 0301 	mvn.w	r3, #1
 8002a20:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002a22:	68fb      	ldr	r3, [r7, #12]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <VL53L1CB_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L1CB_Probe(uint32_t Instance)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08a      	sub	sp, #40	; 0x28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  VL53L1CB_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L1CB_Object_t   VL53L1CBObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L1CB_ADDRESS;
 8002a34:	2352      	movs	r3, #82	; 0x52
 8002a36:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L1A2_I2C_Init;
 8002a38:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <VL53L1CB_Probe+0xf0>)
 8002a3a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L1A2_I2C_DeInit;
 8002a3c:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <VL53L1CB_Probe+0xf4>)
 8002a3e:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L1A2_I2C_WriteReg;
 8002a40:	4b38      	ldr	r3, [pc, #224]	; (8002b24 <VL53L1CB_Probe+0xf8>)
 8002a42:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L1A2_I2C_ReadReg;
 8002a44:	4b38      	ldr	r3, [pc, #224]	; (8002b28 <VL53L1CB_Probe+0xfc>)
 8002a46:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L1A2_GetTick;
 8002a48:	4b38      	ldr	r3, [pc, #224]	; (8002b2c <VL53L1CB_Probe+0x100>)
 8002a4a:	623b      	str	r3, [r7, #32]

  if (VL53L1CB_RegisterBusIO(&(VL53L1CBObj[Instance]), &IOCtx) != VL53L1CB_OK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f642 2290 	movw	r2, #10896	; 0x2a90
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	4a36      	ldr	r2, [pc, #216]	; (8002b30 <VL53L1CB_Probe+0x104>)
 8002a58:	4413      	add	r3, r2
 8002a5a:	f107 020c 	add.w	r2, r7, #12
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f013 f824 	bl	8015aae <VL53L1CB_RegisterBusIO>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <VL53L1CB_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a6c:	f06f 0304 	mvn.w	r3, #4
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
 8002a72:	e04d      	b.n	8002b10 <VL53L1CB_Probe+0xe4>
  }
  else if (VL53L1CB_ReadID(&(VL53L1CBObj[Instance]), &id) != VL53L1CB_OK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f642 2290 	movw	r2, #10896	; 0x2a90
 8002a7a:	fb02 f303 	mul.w	r3, r2, r3
 8002a7e:	4a2c      	ldr	r2, [pc, #176]	; (8002b30 <VL53L1CB_Probe+0x104>)
 8002a80:	4413      	add	r3, r2
 8002a82:	f107 0208 	add.w	r2, r7, #8
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f013 f8cc 	bl	8015c26 <VL53L1CB_ReadID>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <VL53L1CB_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a94:	f06f 0304 	mvn.w	r3, #4
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9a:	e039      	b.n	8002b10 <VL53L1CB_Probe+0xe4>
  }
  else
  {
    if (id != VL53L1CB_ID)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f64e 22cc 	movw	r2, #60108	; 0xeacc
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d003      	beq.n	8002aae <VL53L1CB_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002aa6:	f06f 0306 	mvn.w	r3, #6
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8002aac:	e030      	b.n	8002b10 <VL53L1CB_Probe+0xe4>
    }
    else
    {
      VL53L1A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L1CB_RANGING_SENSOR_Driver;
 8002aae:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <VL53L1CB_Probe+0x108>)
 8002ab0:	4a21      	ldr	r2, [pc, #132]	; (8002b38 <VL53L1CB_Probe+0x10c>)
 8002ab2:	601a      	str	r2, [r3, #0]
      VL53L1A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L1CBObj[Instance]);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f642 2290 	movw	r2, #10896	; 0x2a90
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <VL53L1CB_Probe+0x104>)
 8002ac0:	441a      	add	r2, r3
 8002ac2:	491e      	ldr	r1, [pc, #120]	; (8002b3c <VL53L1CB_Probe+0x110>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L1A2_RANGING_SENSOR_Drv->Init(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) != VL53L1CB_OK)
 8002aca:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <VL53L1CB_Probe+0x108>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	491a      	ldr	r1, [pc, #104]	; (8002b3c <VL53L1CB_Probe+0x110>)
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4798      	blx	r3
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <VL53L1CB_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002ae2:	f06f 0304 	mvn.w	r3, #4
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae8:	e012      	b.n	8002b10 <VL53L1CB_Probe+0xe4>
      }
      else if (VL53L1A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L1A2_RANGING_SENSOR_CompObj[Instance], &VL53L1A2_RANGING_SENSOR_Cap) != VL53L1CB_OK)
 8002aea:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <VL53L1CB_Probe+0x108>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4912      	ldr	r1, [pc, #72]	; (8002b3c <VL53L1CB_Probe+0x110>)
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002af8:	4911      	ldr	r1, [pc, #68]	; (8002b40 <VL53L1CB_Probe+0x114>)
 8002afa:	4610      	mov	r0, r2
 8002afc:	4798      	blx	r3
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <VL53L1CB_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b04:	f06f 0304 	mvn.w	r3, #4
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0a:	e001      	b.n	8002b10 <VL53L1CB_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3728      	adds	r7, #40	; 0x28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	08001bed 	.word	0x08001bed
 8002b20:	08001c69 	.word	0x08001c69
 8002b24:	08001cb9 	.word	0x08001cb9
 8002b28:	08001d0d 	.word	0x08001d0d
 8002b2c:	08001d61 	.word	0x08001d61
 8002b30:	20000770 	.word	0x20000770
 8002b34:	20000758 	.word	0x20000758
 8002b38:	2000003c 	.word	0x2000003c
 8002b3c:	2000074c 	.word	0x2000074c
 8002b40:	2000075c 	.word	0x2000075c

08002b44 <CheckValidRectRoi>:

}


static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8002b50:	793b      	ldrb	r3, [r7, #4]
 8002b52:	2b0f      	cmp	r3, #15
 8002b54:	d808      	bhi.n	8002b68 <CheckValidRectRoi+0x24>
 8002b56:	797b      	ldrb	r3, [r7, #5]
 8002b58:	2b0f      	cmp	r3, #15
 8002b5a:	d805      	bhi.n	8002b68 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8002b5c:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8002b5e:	2b0f      	cmp	r3, #15
 8002b60:	d802      	bhi.n	8002b68 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	2b0f      	cmp	r3, #15
 8002b66:	d901      	bls.n	8002b6c <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002b68:	23fc      	movs	r3, #252	; 0xfc
 8002b6a:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8002b6c:	793a      	ldrb	r2, [r7, #4]
 8002b6e:	79bb      	ldrb	r3, [r7, #6]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d803      	bhi.n	8002b7c <CheckValidRectRoi+0x38>
 8002b74:	797a      	ldrb	r2, [r7, #5]
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d201      	bcs.n	8002b80 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002b7c:	23fc      	movs	r3, #252	; 0xfc
 8002b7e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <VL53L1_SetDeviceAddress>:




VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3318      	adds	r3, #24
 8002ba4:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8002bac:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	085b      	lsrs	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f012 fd7d 	bl	80156b8 <VL53L1_WrByte>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	085b      	lsrs	r3, r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8002bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d105      	bne.n	8002bfe <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f002 fc56 	bl	80054a6 <VL53L1_data_init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8002bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10b      	bne.n	8002c1e <VL53L1_DataInit+0x40>
		pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3318      	adds	r3, #24
 8002c0a:	60bb      	str	r3, [r7, #8]
		memset(&pdev->per_vcsel_cal_data, 0,
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8002c12:	3308      	adds	r3, #8
 8002c14:	220c      	movs	r2, #12
 8002c16:	2100      	movs	r1, #0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f017 ff15 	bl	801aa48 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53L1_ERROR_NONE)
 8002c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d105      	bne.n	8002c32 <VL53L1_DataInit+0x54>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002c32:	2300      	movs	r3, #0
 8002c34:	73bb      	strb	r3, [r7, #14]
 8002c36:	e012      	b.n	8002c5e <VL53L1_DataInit+0x80>
		if (Status == VL53L1_ERROR_NONE)
 8002c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d112      	bne.n	8002c66 <VL53L1_DataInit+0x88>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8002c40:	7bbb      	ldrb	r3, [r7, #14]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	2201      	movs	r2, #1
 8002c46:	4619      	mov	r1, r3
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fc90 	bl	800356e <VL53L1_SetLimitCheckEnable>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	461a      	mov	r2, r3
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002c58:	7bbb      	ldrb	r3, [r7, #14]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	73bb      	strb	r3, [r7, #14]
 8002c5e:	7bbb      	ldrb	r3, [r7, #14]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d9e9      	bls.n	8002c38 <VL53L1_DataInit+0x5a>
 8002c64:	e000      	b.n	8002c68 <VL53L1_DataInit+0x8a>
		else
			break;
 8002c66:	bf00      	nop

	}


	if (Status == VL53L1_ERROR_NONE) {
 8002c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <VL53L1_DataInit+0x9e>
		Status = VL53L1_set_dmax_mode(Dev,
 8002c70:	2102      	movs	r1, #2
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f005 faef 	bl	8008256 <VL53L1_set_dmax_mode>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	73fb      	strb	r3, [r7, #15]
				VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8002c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	7bba      	ldrb	r2, [r7, #14]
 8002ca8:	76da      	strb	r2, [r3, #27]

	Status = VL53L1_SetPresetMode(Dev,
 8002caa:	2101      	movs	r1, #1
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f947 	bl	8002f40 <VL53L1_SetPresetMode>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_RANGING);
	VL53L1_SetDistanceMode(Dev,
 8002cb6:	2102      	movs	r1, #2
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f98b 	bl	8002fd4 <VL53L1_SetDistanceMode>
			VL53L1_DISTANCEMODE_MEDIUM);
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	VL53L1_SmudgeCorrectionEnable(Dev,
 8002cca:	2100      	movs	r1, #0
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f001 fe69 	bl	80049a4 <VL53L1_SmudgeCorrectionEnable>
			VL53L1_SMUDGE_CORRECTION_NONE);

	LOG_FUNCTION_END(Status);
	return Status;
 8002cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8002cea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f011 ffa1 	bl	8014c36 <VL53L1_poll_for_boot_completion>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8002cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <ComputeDevicePresetMode>:

static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	; 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	603a      	str	r2, [r7, #0]
 8002d0e:	71fb      	strb	r3, [r7, #7]
 8002d10:	460b      	mov	r3, r1
 8002d12:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	77fb      	strb	r3, [r7, #31]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8002d18:	4a48      	ldr	r2, [pc, #288]	; (8002e3c <ComputeDevicePresetMode+0x138>)
 8002d1a:	f107 0318 	add.w	r3, r7, #24
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	4611      	mov	r1, r2
 8002d22:	8019      	strh	r1, [r3, #0]
 8002d24:	3302      	adds	r3, #2
 8002d26:	0c12      	lsrs	r2, r2, #16
 8002d28:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes RangingModes[3] = {
 8002d2a:	4a45      	ldr	r2, [pc, #276]	; (8002e40 <ComputeDevicePresetMode+0x13c>)
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	4611      	mov	r1, r2
 8002d34:	8019      	strh	r1, [r3, #0]
 8002d36:	3302      	adds	r3, #2
 8002d38:	0c12      	lsrs	r2, r2, #16
 8002d3a:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	VL53L1_DevicePresetModes ScanningModes[3] = {
 8002d3c:	4a41      	ldr	r2, [pc, #260]	; (8002e44 <ComputeDevicePresetMode+0x140>)
 8002d3e:	f107 0310 	add.w	r3, r7, #16
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	4611      	mov	r1, r2
 8002d46:	8019      	strh	r1, [r3, #0]
 8002d48:	3302      	adds	r3, #2
 8002d4a:	0c12      	lsrs	r2, r2, #16
 8002d4c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE};

	VL53L1_DevicePresetModes TimedModes[3] = {
 8002d4e:	4a3e      	ldr	r2, [pc, #248]	; (8002e48 <ComputeDevicePresetMode+0x144>)
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	4611      	mov	r1, r2
 8002d58:	8019      	strh	r1, [r3, #0]
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	0c12      	lsrs	r2, r2, #16
 8002d5e:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8002d60:	4a3a      	ldr	r2, [pc, #232]	; (8002e4c <ComputeDevicePresetMode+0x148>)
 8002d62:	f107 0308 	add.w	r3, r7, #8
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	4611      	mov	r1, r2
 8002d6a:	8019      	strh	r1, [r3, #0]
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	0c12      	lsrs	r2, r2, #16
 8002d70:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8002d78:	79bb      	ldrb	r3, [r7, #6]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d002      	beq.n	8002d84 <ComputeDevicePresetMode+0x80>
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d003      	beq.n	8002d8a <ComputeDevicePresetMode+0x86>
 8002d82:	e005      	b.n	8002d90 <ComputeDevicePresetMode+0x8c>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	77bb      	strb	r3, [r7, #30]
		break;
 8002d88:	e004      	b.n	8002d94 <ComputeDevicePresetMode+0x90>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	77bb      	strb	r3, [r7, #30]
		break;
 8002d8e:	e001      	b.n	8002d94 <ComputeDevicePresetMode+0x90>
	default:
		DistIdx = 2;
 8002d90:	2302      	movs	r3, #2
 8002d92:	77bb      	strb	r3, [r7, #30]
	}

	switch (PresetMode) {
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d845      	bhi.n	8002e28 <ComputeDevicePresetMode+0x124>
 8002d9c:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <ComputeDevicePresetMode+0xa0>)
 8002d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da2:	bf00      	nop
 8002da4:	08002dd9 	.word	0x08002dd9
 8002da8:	08002de9 	.word	0x08002de9
 8002dac:	08002df9 	.word	0x08002df9
 8002db0:	08002dc9 	.word	0x08002dc9
 8002db4:	08002e29 	.word	0x08002e29
 8002db8:	08002e29 	.word	0x08002e29
 8002dbc:	08002e19 	.word	0x08002e19
 8002dc0:	08002e09 	.word	0x08002e09
 8002dc4:	08002e21 	.word	0x08002e21
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8002dc8:	7fbb      	ldrb	r3, [r7, #30]
 8002dca:	3320      	adds	r3, #32
 8002dcc:	443b      	add	r3, r7
 8002dce:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
		break;
 8002dd6:	e029      	b.n	8002e2c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_RANGING:
		*pDevicePresetMode = RangingModes[DistIdx];
 8002dd8:	7fbb      	ldrb	r3, [r7, #30]
 8002dda:	3320      	adds	r3, #32
 8002ddc:	443b      	add	r3, r7
 8002dde:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	701a      	strb	r2, [r3, #0]
		break;
 8002de6:	e021      	b.n	8002e2c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		*pDevicePresetMode = ScanningModes[DistIdx];
 8002de8:	7fbb      	ldrb	r3, [r7, #30]
 8002dea:	3320      	adds	r3, #32
 8002dec:	443b      	add	r3, r7
 8002dee:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	701a      	strb	r2, [r3, #0]
		break;
 8002df6:	e019      	b.n	8002e2c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8002df8:	7fbb      	ldrb	r3, [r7, #30]
 8002dfa:	3320      	adds	r3, #32
 8002dfc:	443b      	add	r3, r7
 8002dfe:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	701a      	strb	r2, [r3, #0]
		break;
 8002e06:	e011      	b.n	8002e2c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8002e08:	7fbb      	ldrb	r3, [r7, #30]
 8002e0a:	3320      	adds	r3, #32
 8002e0c:	443b      	add	r3, r7
 8002e0e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	701a      	strb	r2, [r3, #0]
		break;
 8002e16:	e009      	b.n	8002e2c <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_OLT:
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2211      	movs	r2, #17
 8002e1c:	701a      	strb	r2, [r3, #0]
		break;
 8002e1e:	e005      	b.n	8002e2c <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
		*pDevicePresetMode =
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2227      	movs	r2, #39	; 0x27
 8002e24:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE;
		break;
 8002e26:	e001      	b.n	8002e2c <ComputeDevicePresetMode+0x128>

	default:

		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8002e28:	23f8      	movs	r3, #248	; 0xf8
 8002e2a:	77fb      	strb	r3, [r7, #31]
	}

	return Status;
 8002e2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3724      	adds	r7, #36	; 0x24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	0801d9d8 	.word	0x0801d9d8
 8002e40:	0801d9dc 	.word	0x0801d9dc
 8002e44:	0801d9e0 	.word	0x0801d9e0
 8002e48:	0801d9e4 	.word	0x0801d9e4
 8002e4c:	0801d9e8 	.word	0x0801d9e8

08002e50 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8002e50:	b5b0      	push	{r4, r5, r7, lr}
 8002e52:	b08e      	sub	sp, #56	; 0x38
 8002e54:	af04      	add	r7, sp, #16
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	72fb      	strb	r3, [r7, #11]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8002e78:	7afb      	ldrb	r3, [r7, #11]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d002      	beq.n	8002e84 <SetPresetMode+0x34>
 8002e7e:	7afb      	ldrb	r3, [r7, #11]
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d103      	bne.n	8002e8c <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8002e84:	2340      	movs	r3, #64	; 0x40
 8002e86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002e8a:	e002      	b.n	8002e92 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8002e8c:	2320      	movs	r3, #32
 8002e8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8002e92:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8002e96:	7ab9      	ldrb	r1, [r7, #10]
 8002e98:	7afb      	ldrb	r3, [r7, #11]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff ff32 	bl	8002d04 <ComputeDevicePresetMode>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8002ea6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d112      	bne.n	8002ed4 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8002eae:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002eb2:	f107 001c 	add.w	r0, r7, #28
 8002eb6:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8002eba:	f107 0314 	add.w	r3, r7, #20
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	f107 0318 	add.w	r3, r7, #24
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f002 ffaf 	bl	8005e2c <VL53L1_get_preset_mode_timing_cfg>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8002ed4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d112      	bne.n	8002f02 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8002edc:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8002ee0:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8002ee2:	69fd      	ldr	r5, [r7, #28]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	9102      	str	r1, [sp, #8]
 8002eec:	9201      	str	r2, [sp, #4]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	462b      	mov	r3, r5
 8002ef2:	4622      	mov	r2, r4
 8002ef4:	4601      	mov	r1, r0
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f003 f8ee 	bl	80060d8 <VL53L1_set_preset_mode>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8002f02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d103      	bne.n	8002f12 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f10:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8002f12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <SetPresetMode+0xd8>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002f20:	461a      	mov	r2, r3
 8002f22:	7afb      	ldrb	r3, [r7, #11]
 8002f24:	f882 3a6c 	strb.w	r3, [r2, #2668]	; 0xa6c

	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	LOG_FUNCTION_END(Status);
	return Status;
 8002f34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3728      	adds	r7, #40	; 0x28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bdb0      	pop	{r4, r5, r7, pc}

08002f40 <VL53L1_SetPresetMode>:


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002f50:	2303      	movs	r3, #3
 8002f52:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);


	Status = VL53L1_low_power_auto_data_init(Dev);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f00c f94a 	bl	800f1ee <VL53L1_low_power_auto_data_init>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	73fb      	strb	r3, [r7, #15]

	if (PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE)
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	2b09      	cmp	r3, #9
 8002f62:	d101      	bne.n	8002f68 <VL53L1_SetPresetMode+0x28>
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73bb      	strb	r3, [r7, #14]
	Status = SetPresetMode(Dev,
 8002f68:	7bba      	ldrb	r2, [r7, #14]
 8002f6a:	78f9      	ldrb	r1, [r7, #3]
 8002f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff6d 	bl	8002e50 <SetPresetMode>
 8002f76:	4603      	mov	r3, r0
 8002f78:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8002f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d117      	bne.n	8002fb2 <VL53L1_SetPresetMode+0x72>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d005      	beq.n	8002f94 <VL53L1_SetPresetMode+0x54>
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d002      	beq.n	8002f94 <VL53L1_SetPresetMode+0x54>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d107      	bne.n	8002fa4 <VL53L1_SetPresetMode+0x64>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8002f94:	f24a 0128 	movw	r1, #41000	; 0xa028
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f8a9 	bl	80030f0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	e006      	b.n	8002fb2 <VL53L1_SetPresetMode+0x72>
				Dev, 41000);
		else

			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8002fa4:	f248 2135 	movw	r1, #33333	; 0x8235
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f8a1 	bl	80030f0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <VL53L1_SetPresetMode+0x88>

		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8002fba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fa68 	bl	8003494 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b0a2      	sub	sp, #136	; 0x88
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t MmTimeoutUs = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t PhaseCalTimeoutUs = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	677b      	str	r3, [r7, #116]	; 0x74
	VL53L1_zone_config_t zone_config;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002ff8:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8002ffc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86



	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 8003000:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003004:	2b09      	cmp	r3, #9
 8003006:	d105      	bne.n	8003014 <VL53L1_SetDistanceMode+0x40>
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d002      	beq.n	8003014 <VL53L1_SetDistanceMode+0x40>
		(DistanceMode != VL53L1_DISTANCEMODE_SHORT))
		return VL53L1_ERROR_INVALID_PARAMS;
 800300e:	f06f 0303 	mvn.w	r3, #3
 8003012:	e069      	b.n	80030e8 <VL53L1_SetDistanceMode+0x114>
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d008      	beq.n	800302c <VL53L1_SetDistanceMode+0x58>
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	2b02      	cmp	r3, #2
 800301e:	d005      	beq.n	800302c <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	2b03      	cmp	r3, #3
 8003024:	d002      	beq.n	800302c <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8003026:	f06f 0303 	mvn.w	r3, #3
 800302a:	e05d      	b.n	80030e8 <VL53L1_SetDistanceMode+0x114>

	if (Status == VL53L1_ERROR_NONE)
 800302c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8003030:	2b00      	cmp	r3, #0
 8003032:	d108      	bne.n	8003046 <VL53L1_SetDistanceMode+0x72>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 8003034:	f107 0308 	add.w	r3, r7, #8
 8003038:	4619      	mov	r1, r3
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f002 fede 	bl	8005dfc <VL53L1_get_zone_config>
 8003040:	4603      	mov	r3, r0
 8003042:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800304e:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10b      	bne.n	800306e <VL53L1_SetDistanceMode+0x9a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8003056:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800305a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800305e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f002 fd8a 	bl	8005b7c <VL53L1_get_timeouts_us>
 8003068:	4603      	mov	r3, r0
 800306a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800306e:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10a      	bne.n	800308c <VL53L1_SetDistanceMode+0xb8>
		Status = SetPresetMode(Dev,
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 800307c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff fee5 	bl	8002e50 <SetPresetMode>
 8003086:	4603      	mov	r3, r0
 8003088:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800308c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8003090:	2b00      	cmp	r3, #0
 8003092:	d106      	bne.n	80030a2 <VL53L1_SetDistanceMode+0xce>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800309a:	461a      	mov	r2, r3
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	f882 3a6e 	strb.w	r3, [r2, #2670]	; 0xa6e
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80030a2:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10f      	bne.n	80030ca <VL53L1_SetDistanceMode+0xf6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80030aa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80030ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80030ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f002 fd2a 	bl	8005b0a <VL53L1_set_timeouts_us>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 80030bc:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <VL53L1_SetDistanceMode+0xf6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 80030c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 80030ca:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d108      	bne.n	80030e4 <VL53L1_SetDistanceMode+0x110>
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 80030d2:	f107 0308 	add.w	r3, r7, #8
 80030d6:	4619      	mov	r1, r3
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f002 fe4c 	bl	8005d76 <VL53L1_set_zone_config>
 80030de:	4603      	mov	r3, r0
 80030e0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	LOG_FUNCTION_END(Status);
	return Status;
 80030e4:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3788      	adds	r7, #136	; 0x88
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08c      	sub	sp, #48	; 0x30
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8003114:	4b75      	ldr	r3, [pc, #468]	; (80032ec <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1fc>)
 8003116:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	4a75      	ldr	r2, [pc, #468]	; (80032f0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x200>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d902      	bls.n	8003126 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003120:	23fc      	movs	r3, #252	; 0xfc
 8003122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8003126:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800312e:	f107 031a 	add.w	r3, r7, #26
 8003132:	461a      	mov	r2, r3
 8003134:	2105      	movs	r1, #5
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fb9a 	bl	8003870 <VL53L1_GetSequenceStepEnable>
 800313c:	4603      	mov	r3, r0
 800313e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003142:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800314a:	f107 0319 	add.w	r3, r7, #25
 800314e:	461a      	mov	r2, r3
 8003150:	2106      	movs	r1, #6
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fb8c 	bl	8003870 <VL53L1_GetSequenceStepEnable>
 8003158:	4603      	mov	r3, r0
 800315a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800315e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10b      	bne.n	800317e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8003166:	f107 0314 	add.w	r3, r7, #20
 800316a:	f107 0210 	add.w	r2, r7, #16
 800316e:	f107 010c 	add.w	r1, r7, #12
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f002 fd02 	bl	8005b7c <VL53L1_get_timeouts_us>
 8003178:	4603      	mov	r3, r0
 800317a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800317e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003182:	2b00      	cmp	r3, #0
 8003184:	f040 80a0 	bne.w	80032c8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
		PresetMode = VL53L1DevDataGet(Dev,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800318e:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8003192:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8003198:	2301      	movs	r3, #1
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 800319c:	7efb      	ldrb	r3, [r7, #27]
 800319e:	3b01      	subs	r3, #1
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d861      	bhi.n	8003268 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
 80031a4:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbc>)
 80031a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031aa:	bf00      	nop
 80031ac:	08003251 	.word	0x08003251
 80031b0:	08003251 	.word	0x08003251
 80031b4:	080031ed 	.word	0x080031ed
 80031b8:	080031d1 	.word	0x080031d1
 80031bc:	08003269 	.word	0x08003269
 80031c0:	08003269 	.word	0x08003269
 80031c4:	0800325d 	.word	0x0800325d
 80031c8:	08003213 	.word	0x08003213
 80031cc:	08003251 	.word	0x08003251
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80031d0:	7ebb      	ldrb	r3, [r7, #26]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d002      	beq.n	80031dc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 80031d6:	7e7b      	ldrb	r3, [r7, #25]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d103      	bne.n	80031e4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
				TimingGuard = 5000;
 80031dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 80031e2:	e044      	b.n	800326e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
				TimingGuard = 1000;
 80031e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80031ea:	e040      	b.n	800326e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80031f2:	7ebb      	ldrb	r3, [r7, #26]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d002      	beq.n	80031fe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10e>
 80031f8:	7e7b      	ldrb	r3, [r7, #25]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d103      	bne.n	8003206 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x116>
				TimingGuard = 26600;
 80031fe:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28
 8003204:	e002      	b.n	800320c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
			else
				TimingGuard = 21600;
 8003206:	f245 4360 	movw	r3, #21600	; 0x5460
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800320c:	2302      	movs	r3, #2
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8003210:	e02d      	b.n	800326e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8003218:	23f5      	movs	r3, #245	; 0xf5
 800321a:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800321c:	f107 0308 	add.w	r3, r7, #8
 8003220:	461a      	mov	r2, r3
 8003222:	f248 0188 	movw	r1, #32904	; 0x8088
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f005 f88c 	bl	8008344 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	dd07      	ble.n	8003242 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x152>
				vhv += vhv_loops *
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	22f5      	movs	r2, #245	; 0xf5
 8003236:	fb02 f303 	mul.w	r3, r2, r3
 800323a:	461a      	mov	r2, r3
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	4413      	add	r3, r2
 8003240:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800324a:	2302      	movs	r3, #2
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800324e:	e00e      	b.n	800326e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			TimingGuard = 1700;
 8003250:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8003254:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 6;
 8003256:	2306      	movs	r3, #6
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800325a:	e008      	b.n	800326e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_OLT:
			TimingGuard = MmTimeoutUs + 5000;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003262:	3308      	adds	r3, #8
 8003264:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003266:	e002      	b.n	800326e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003268:	23f8      	movs	r3, #248	; 0xf8
 800326a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003272:	429a      	cmp	r2, r3
 8003274:	d803      	bhi.n	800327e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8003276:	23fc      	movs	r3, #252	; 0xfc
 8003278:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800327c:	e003      	b.n	8003286 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8003284:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8003286:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800328a:	2b00      	cmp	r3, #0
 800328c:	d11c      	bne.n	80032c8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	429a      	cmp	r2, r3
 8003294:	d203      	bcs.n	800329e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ae>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8003296:	23fc      	movs	r3, #252	; 0xfc
 8003298:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800329c:	e00d      	b.n	80032ba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ca>
			else {
				TimingBudget /= divisor;
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a6:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 80032a8:	68f9      	ldr	r1, [r7, #12]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f002 fc2b 	bl	8005b0a <VL53L1_set_timeouts_us>
 80032b4:	4603      	mov	r3, r0
 80032b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 80032ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
				VL53L1DevDataSet(Dev,
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 80032c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d106      	bne.n	80032de <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ee>
		VL53L1DevDataSet(Dev,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80032d6:	461a      	mov	r2, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	f8c2 3a70 	str.w	r3, [r2, #2672]	; 0xa70
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80032de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3730      	adds	r7, #48	; 0x30
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	00086470 	.word	0x00086470
 80032f0:	00989680 	.word	0x00989680

080032f4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08c      	sub	sp, #48	; 0x30
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80032fe:	2300      	movs	r3, #0
 8003300:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8003322:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800332a:	f107 031b 	add.w	r3, r7, #27
 800332e:	461a      	mov	r2, r3
 8003330:	2105      	movs	r1, #5
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fa9c 	bl	8003870 <VL53L1_GetSequenceStepEnable>
 8003338:	4603      	mov	r3, r0
 800333a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800333e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003346:	f107 031a 	add.w	r3, r7, #26
 800334a:	461a      	mov	r2, r3
 800334c:	2106      	movs	r1, #6
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fa8e 	bl	8003870 <VL53L1_GetSequenceStepEnable>
 8003354:	4603      	mov	r3, r0
 8003356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800335a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10b      	bne.n	800337a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8003362:	f107 0310 	add.w	r3, r7, #16
 8003366:	f107 0214 	add.w	r2, r7, #20
 800336a:	f107 010c 	add.w	r1, r7, #12
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f002 fc04 	bl	8005b7c <VL53L1_get_timeouts_us>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800337a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800337e:	2b00      	cmp	r3, #0
 8003380:	d179      	bne.n	8003476 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003388:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 800338c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8003390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003394:	3b01      	subs	r3, #1
 8003396:	2b08      	cmp	r3, #8
 8003398:	d869      	bhi.n	800346e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x17a>
 800339a:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xac>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	0800344d 	.word	0x0800344d
 80033a4:	0800344d 	.word	0x0800344d
 80033a8:	080033e7 	.word	0x080033e7
 80033ac:	080033c5 	.word	0x080033c5
 80033b0:	0800346f 	.word	0x0800346f
 80033b4:	0800346f 	.word	0x0800346f
 80033b8:	0800345f 	.word	0x0800345f
 80033bc:	0800340f 	.word	0x0800340f
 80033c0:	0800344d 	.word	0x0800344d
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80033c4:	7efb      	ldrb	r3, [r7, #27]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d002      	beq.n	80033d0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
 80033ca:	7ebb      	ldrb	r3, [r7, #26]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d105      	bne.n	80033dc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80033d6:	3308      	adds	r3, #8
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 80033da:	e04d      	b.n	8003478 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80033e4:	e048      	b.n	8003478 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80033e6:	7efb      	ldrb	r3, [r7, #27]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d002      	beq.n	80033f2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xfe>
 80033ec:	7ebb      	ldrb	r3, [r7, #26]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d106      	bne.n	8003400 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x10c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 80033f8:	3334      	adds	r3, #52	; 0x34
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 80033fe:	e03b      	b.n	8003478 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8003406:	3330      	adds	r3, #48	; 0x30
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800340c:	e034      	b.n	8003478 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800340e:	23f5      	movs	r3, #245	; 0xf5
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8003412:	f107 0308 	add.w	r3, r7, #8
 8003416:	461a      	mov	r2, r3
 8003418:	f248 0188 	movw	r1, #32904	; 0x8088
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f004 ff91 	bl	8008344 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	dd07      	ble.n	8003438 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x144>
				vhv += vhv_loops *
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	22f5      	movs	r2, #245	; 0xf5
 800342c:	fb02 f303 	mul.w	r3, r2, r3
 8003430:	461a      	mov	r2, r3
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	4413      	add	r3, r2
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800343e:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	4413      	add	r3, r2
 8003448:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800344a:	e015      	b.n	8003478 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800345c:	e00c      	b.n	8003478 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_OLT:
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	4413      	add	r3, r2
 8003464:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003468:	3308      	adds	r3, #8
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800346c:	e004      	b.n	8003478 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800346e:	23f8      	movs	r3, #248	; 0xf8
 8003470:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003474:	e000      	b.n	8003478 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		}
	}
 8003476:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 8003478:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x192>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003484:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003486:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800348a:	4618      	mov	r0, r3
 800348c:	3730      	adds	r7, #48	; 0x30
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop

08003494 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");


	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	019b      	lsls	r3, r3, #6
 80034aa:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	099b      	lsrs	r3, r3, #6
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	4413      	add	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f002 facc 	bl	8005a58 <VL53L1_set_inter_measurement_period_ms>
 80034c0:	4603      	mov	r3, r0
 80034c2:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 80034c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	10624dd3 	.word	0x10624dd3

080034d4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80034de:	2300      	movs	r3, #0
 80034e0:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 80034e2:	f107 0308 	add.w	r3, r7, #8
 80034e6:	4619      	mov	r1, r3
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f002 fae3 	bl	8005ab4 <VL53L1_get_inter_measurement_period_ms>
 80034ee:	4603      	mov	r3, r0
 80034f0:	73fb      	strb	r3, [r7, #15]

	adjustedIMP -= (adjustedIMP * 64) / 1000;
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	019b      	lsls	r3, r3, #6
 80034f8:	4907      	ldr	r1, [pc, #28]	; (8003518 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 80034fa:	fba1 1303 	umull	r1, r3, r1, r3
 80034fe:	099b      	lsrs	r3, r3, #6
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 800350a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	10624dd3 	.word	0x10624dd3

0800351c <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	460b      	mov	r3, r1
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800352a:	2300      	movs	r3, #0
 800352c:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800352e:	897b      	ldrh	r3, [r7, #10]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <SetLimitValue+0x1e>
 8003534:	2b01      	cmp	r3, #1
 8003536:	d009      	beq.n	800354c <SetLimitValue+0x30>
 8003538:	e011      	b.n	800355e <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	0b9b      	lsrs	r3, r3, #14
 800353e:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8003540:	8abb      	ldrh	r3, [r7, #20]
 8003542:	4619      	mov	r1, r3
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f003 f988 	bl	800685a <VL53L1_set_lite_sigma_threshold>
		break;
 800354a:	e00a      	b.n	8003562 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	0a5b      	lsrs	r3, r3, #9
 8003550:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8003552:	8abb      	ldrh	r3, [r7, #20]
 8003554:	4619      	mov	r1, r3
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f003 f9ad 	bl	80068b6 <VL53L1_set_lite_min_count_rate>
		break;
 800355c:	e001      	b.n	8003562 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800355e:	23fc      	movs	r3, #252	; 0xfc
 8003560:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003562:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	460b      	mov	r3, r1
 8003578:	807b      	strh	r3, [r7, #2]
 800357a:	4613      	mov	r3, r2
 800357c:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800357e:	2300      	movs	r3, #0
 8003580:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003586:	887b      	ldrh	r3, [r7, #2]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d902      	bls.n	8003592 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800358c:	23fc      	movs	r3, #252	; 0xfc
 800358e:	73fb      	strb	r3, [r7, #15]
 8003590:	e015      	b.n	80035be <VL53L1_SetLimitCheckEnable+0x50>
	} else {

		if (LimitCheckEnable == 0)
 8003592:	787b      	ldrb	r3, [r7, #1]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d102      	bne.n	800359e <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	e007      	b.n	80035ae <VL53L1_SetLimitCheckEnable+0x40>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800359e:	887b      	ldrh	r3, [r7, #2]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 80035ae:	887b      	ldrh	r3, [r7, #2]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	4619      	mov	r1, r3
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff ffb1 	bl	800351c <SetLimitValue>
 80035ba:	4603      	mov	r3, r0
 80035bc:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 80035be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10e      	bne.n	80035e4 <VL53L1_SetLimitCheckEnable+0x76>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80035c6:	787b      	ldrb	r3, [r7, #1]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf14      	ite	ne
 80035cc:	2301      	movne	r3, #1
 80035ce:	2300      	moveq	r3, #0
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	887b      	ldrh	r3, [r7, #2]
 80035d4:	4611      	mov	r1, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80035de:	3334      	adds	r3, #52	; 0x34
 80035e0:	460a      	mov	r2, r1
 80035e2:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 80035e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	460b      	mov	r3, r1
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80035fe:	2300      	movs	r3, #0
 8003600:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003602:	897b      	ldrh	r3, [r7, #10]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d905      	bls.n	8003614 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003608:	23fc      	movs	r3, #252	; 0xfc
 800360a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	e00a      	b.n	800362a <VL53L1_GetLimitCheckEnable+0x3a>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003614:	897b      	ldrh	r3, [r7, #10]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4413      	add	r3, r2
 800361a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800361e:	3334      	adds	r3, #52	; 0x34
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	7dba      	ldrb	r2, [r7, #22]
 8003628:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800362a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800362e:	4618      	mov	r0, r3
 8003630:	371c      	adds	r7, #28
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b088      	sub	sp, #32
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	460b      	mov	r3, r1
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003648:	2300      	movs	r3, #0
 800364a:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8003650:	897b      	ldrh	r3, [r7, #10]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <VL53L1_GetLimitCheckValue+0x22>
 8003656:	2b01      	cmp	r3, #1
 8003658:	d00c      	beq.n	8003674 <VL53L1_GetLimitCheckValue+0x3a>
 800365a:	e017      	b.n	800368c <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	4619      	mov	r1, r3
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f003 f8e2 	bl	800682c <VL53L1_get_lite_sigma_threshold>
 8003668:	4603      	mov	r3, r0
 800366a:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800366c:	8abb      	ldrh	r3, [r7, #20]
 800366e:	039b      	lsls	r3, r3, #14
 8003670:	61bb      	str	r3, [r7, #24]
		break;
 8003672:	e00d      	b.n	8003690 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8003674:	f107 0316 	add.w	r3, r7, #22
 8003678:	4619      	mov	r1, r3
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f003 f904 	bl	8006888 <VL53L1_get_lite_min_count_rate>
 8003680:	4603      	mov	r3, r0
 8003682:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8003684:	8afb      	ldrh	r3, [r7, #22]
 8003686:	025b      	lsls	r3, r3, #9
 8003688:	61bb      	str	r3, [r7, #24]
		break;
 800368a:	e001      	b.n	8003690 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800368c:	23fc      	movs	r3, #252	; 0xfc
 800368e:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003690:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d129      	bne.n	80036ec <VL53L1_GetLimitCheckValue+0xb2>

		if (TempFix1616 == 0) {
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d113      	bne.n	80036c6 <VL53L1_GetLimitCheckValue+0x8c>

			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800369e:	897b      	ldrh	r3, [r7, #10]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80036b4:	897b      	ldrh	r3, [r7, #10]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80036be:	3334      	adds	r3, #52	; 0x34
 80036c0:	2200      	movs	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	e012      	b.n	80036ec <VL53L1_GetLimitCheckValue+0xb2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80036cc:	897b      	ldrh	r3, [r7, #10]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80036dc:	897b      	ldrh	r3, [r7, #10]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80036e6:	3334      	adds	r3, #52	; 0x34
 80036e8:	2201      	movs	r2, #1
 80036ea:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 80036ec:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <VL53L1_SetROI>:
	return Status;
}

VL53L1_Error VL53L1_SetROI(VL53L1_DEV Dev,
		VL53L1_RoiConfig_t *pRoiConfig)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b0a0      	sub	sp, #128	; 0x80
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003702:	2300      	movs	r3, #0
 8003704:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	VL53L1_PresetModes PresetMode;
	uint8_t MaxNumberOfROI = 1;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t  width, height;

	LOG_FUNCTION_START("");


	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003714:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8003718:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c


	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 800371c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8003720:	2b02      	cmp	r3, #2
 8003722:	d102      	bne.n	800372a <VL53L1_SetROI+0x32>
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 8003724:	2310      	movs	r3, #16
 8003726:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8003732:	429a      	cmp	r2, r3
 8003734:	d303      	bcc.n	800373e <VL53L1_SetROI+0x46>
			(pRoiConfig->NumberOfRoi < 1))
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	781b      	ldrb	r3, [r3, #0]
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <VL53L1_SetROI+0x4c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800373e:	23fc      	movs	r3, #252	; 0xfc
 8003740:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (Status == VL53L1_ERROR_NONE) {
 8003744:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8003748:	2b00      	cmp	r3, #0
 800374a:	d17e      	bne.n	800384a <VL53L1_SetROI+0x152>


		zone_cfg.max_zones = MaxNumberOfROI;
 800374c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003750:	733b      	strb	r3, [r7, #12]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	3b01      	subs	r3, #1
 8003758:	b2db      	uxtb	r3, r3
 800375a:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 800375c:	2300      	movs	r3, #0
 800375e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8003762:	e06a      	b.n	800383a <VL53L1_SetROI+0x142>
			CurrROI = pRoiConfig->UserRois[i];
 8003764:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	f107 0208 	add.w	r2, r7, #8
 8003772:	3301      	adds	r3, #1
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	6010      	str	r0, [r2, #0]

			Status = CheckValidRectRoi(CurrROI);
 8003778:	68b8      	ldr	r0, [r7, #8]
 800377a:	f7ff f9e3 	bl	8002b44 <CheckValidRectRoi>
 800377e:	4603      	mov	r3, r0
 8003780:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (Status != VL53L1_ERROR_NONE)
 8003784:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8003788:	2b00      	cmp	r3, #0
 800378a:	d15d      	bne.n	8003848 <VL53L1_SetROI+0x150>
				break;

			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 800378c:	7abb      	ldrb	r3, [r7, #10]
 800378e:	461a      	mov	r2, r3
 8003790:	7a3b      	ldrb	r3, [r7, #8]
 8003792:	4413      	add	r3, r2
 8003794:	3301      	adds	r3, #1
					/ 2;
 8003796:	0fda      	lsrs	r2, r3, #31
 8003798:	4413      	add	r3, r2
 800379a:	105b      	asrs	r3, r3, #1
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 800379c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 80037a0:	7a7b      	ldrb	r3, [r7, #9]
 80037a2:	461a      	mov	r2, r3
 80037a4:	7afb      	ldrb	r3, [r7, #11]
 80037a6:	4413      	add	r3, r2
 80037a8:	3301      	adds	r3, #1
					/ 2;
 80037aa:	0fda      	lsrs	r2, r3, #31
 80037ac:	4413      	add	r3, r2
 80037ae:	105b      	asrs	r3, r3, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 80037b0:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 80037b4:	7aba      	ldrb	r2, [r7, #10]
 80037b6:	7a3b      	ldrb	r3, [r7, #8]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 80037be:	7a7a      	ldrb	r2, [r7, #9]
 80037c0:	7afb      	ldrb	r3, [r7, #11]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			if ((width < 3) || (height < 3)) {
 80037c8:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d903      	bls.n	80037d8 <VL53L1_SetROI+0xe0>
 80037d0:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d803      	bhi.n	80037e0 <VL53L1_SetROI+0xe8>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 80037d8:	23fc      	movs	r3, #252	; 0xfc
 80037da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 80037de:	e034      	b.n	800384a <VL53L1_SetROI+0x152>
			}
			zone_cfg.user_zones[i].x_centre = x_centre;
 80037e0:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80037e4:	3306      	adds	r3, #6
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	3380      	adds	r3, #128	; 0x80
 80037ea:	443b      	add	r3, r7
 80037ec:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 80037f0:	f803 2c70 	strb.w	r2, [r3, #-112]
			zone_cfg.user_zones[i].y_centre = y_centre;
 80037f4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80037f8:	3306      	adds	r3, #6
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	3380      	adds	r3, #128	; 0x80
 80037fe:	443b      	add	r3, r7
 8003800:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8003804:	f803 2c6f 	strb.w	r2, [r3, #-111]
			zone_cfg.user_zones[i].width = width;
 8003808:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800380c:	3306      	adds	r3, #6
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	3380      	adds	r3, #128	; 0x80
 8003812:	443b      	add	r3, r7
 8003814:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 8003818:	f803 2c6e 	strb.w	r2, [r3, #-110]
			zone_cfg.user_zones[i].height = height;
 800381c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8003820:	3306      	adds	r3, #6
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	3380      	adds	r3, #128	; 0x80
 8003826:	443b      	add	r3, r7
 8003828:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 800382c:	f803 2c6d 	strb.w	r2, [r3, #-109]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8003830:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8003834:	3301      	adds	r3, #1
 8003836:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 8003842:	429a      	cmp	r2, r3
 8003844:	d38e      	bcc.n	8003764 <VL53L1_SetROI+0x6c>
 8003846:	e000      	b.n	800384a <VL53L1_SetROI+0x152>
				break;
 8003848:	bf00      	nop
		}
	}

	if (Status == VL53L1_ERROR_NONE)
 800384a:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 800384e:	2b00      	cmp	r3, #0
 8003850:	d108      	bne.n	8003864 <VL53L1_SetROI+0x16c>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 8003852:	f107 030c 	add.w	r3, r7, #12
 8003856:	4619      	mov	r1, r3
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f002 fa8c 	bl	8005d76 <VL53L1_set_zone_config>
 800385e:	4603      	mov	r3, r0
 8003860:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	LOG_FUNCTION_END(Status);
	return Status;
 8003864:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 8003868:	4618      	mov	r0, r3
 800386a:	3780      	adds	r7, #128	; 0x80
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	460b      	mov	r3, r1
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800387e:	2300      	movs	r3, #0
 8003880:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8003882:	7afb      	ldrb	r3, [r7, #11]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	4619      	mov	r1, r3
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f002 f9e3 	bl	8005c54 <VL53L1_get_sequence_config_bit>
 800388e:	4603      	mov	r3, r0
 8003890:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8003892:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <VL53L1_StartMeasurement>:




VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	77fb      	strb	r3, [r7, #31]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;
	uint8_t i;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3318      	adds	r3, #24
 80038b0:	61bb      	str	r3, [r7, #24]


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	7edb      	ldrb	r3, [r3, #27]
 80038b6:	75fb      	strb	r3, [r7, #23]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d002      	beq.n	80038c4 <VL53L1_StartMeasurement+0x24>
		VL53L1_load_patch(Dev);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f001 fc8e 	bl	80051e0 <VL53L1_load_patch>
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80038c4:	2300      	movs	r3, #0
 80038c6:	77bb      	strb	r3, [r7, #30]
 80038c8:	e01a      	b.n	8003900 <VL53L1_StartMeasurement+0x60>
		pdev->PreviousRangeMilliMeter[i] = 0;
 80038ca:	7fbb      	ldrb	r3, [r7, #30]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80038d2:	330c      	adds	r3, #12
 80038d4:	2100      	movs	r1, #0
 80038d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 80038da:	7fbb      	ldrb	r3, [r7, #30]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80038e4:	3320      	adds	r3, #32
 80038e6:	22ff      	movs	r2, #255	; 0xff
 80038e8:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 80038ea:	7fbb      	ldrb	r3, [r7, #30]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80038f4:	3324      	adds	r3, #36	; 0x24
 80038f6:	2200      	movs	r2, #0
 80038f8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80038fa:	7fbb      	ldrb	r3, [r7, #30]
 80038fc:	3301      	adds	r3, #1
 80038fe:	77bb      	strb	r3, [r7, #30]
 8003900:	7fbb      	ldrb	r3, [r7, #30]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d9e1      	bls.n	80038ca <VL53L1_StartMeasurement+0x2a>
	}
	pdev->PreviousStreamCount = 0;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800390c:	2200      	movs	r2, #0
 800390e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	pdev->PreviousRangeActiveResults = 0;
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003918:	2200      	movs	r2, #0
 800391a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003924:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 8003928:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 800392a:	7dbb      	ldrb	r3, [r7, #22]
 800392c:	2b63      	cmp	r3, #99	; 0x63
 800392e:	dc12      	bgt.n	8003956 <VL53L1_StartMeasurement+0xb6>
 8003930:	2b62      	cmp	r3, #98	; 0x62
 8003932:	da0d      	bge.n	8003950 <VL53L1_StartMeasurement+0xb0>
 8003934:	2b05      	cmp	r3, #5
 8003936:	dc0e      	bgt.n	8003956 <VL53L1_StartMeasurement+0xb6>
 8003938:	2b04      	cmp	r3, #4
 800393a:	da09      	bge.n	8003950 <VL53L1_StartMeasurement+0xb0>
 800393c:	2b02      	cmp	r3, #2
 800393e:	dc02      	bgt.n	8003946 <VL53L1_StartMeasurement+0xa6>
 8003940:	2b00      	cmp	r3, #0
 8003942:	da05      	bge.n	8003950 <VL53L1_StartMeasurement+0xb0>
 8003944:	e007      	b.n	8003956 <VL53L1_StartMeasurement+0xb6>
 8003946:	2b03      	cmp	r3, #3
 8003948:	d105      	bne.n	8003956 <VL53L1_StartMeasurement+0xb6>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800394a:	2300      	movs	r3, #0
 800394c:	77fb      	strb	r3, [r7, #31]
		break;
 800394e:	e004      	b.n	800395a <VL53L1_StartMeasurement+0xba>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8003950:	23f2      	movs	r3, #242	; 0xf2
 8003952:	77fb      	strb	r3, [r7, #31]
		break;
 8003954:	e001      	b.n	800395a <VL53L1_StartMeasurement+0xba>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8003956:	23fd      	movs	r3, #253	; 0xfd
 8003958:	77fb      	strb	r3, [r7, #31]
	}


	if ((Status == VL53L1_ERROR_NONE) &&
 800395a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d11f      	bne.n	80039a2 <VL53L1_StartMeasurement+0x102>
 8003962:	7dfb      	ldrb	r3, [r7, #23]
 8003964:	2b40      	cmp	r3, #64	; 0x40
 8003966:	d11c      	bne.n	80039a2 <VL53L1_StartMeasurement+0x102>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003968:	f107 0310 	add.w	r3, r7, #16
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff fcc0 	bl	80032f4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8003974:	4603      	mov	r3, r0
 8003976:	757b      	strb	r3, [r7, #21]
				&MTBus);

		MTBus /= 1000;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4a18      	ldr	r2, [pc, #96]	; (80039dc <VL53L1_StartMeasurement+0x13c>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	099b      	lsrs	r3, r3, #6
 8003982:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003984:	f107 030c 	add.w	r3, r7, #12
 8003988:	4619      	mov	r1, r3
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff fda2 	bl	80034d4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8003990:	4603      	mov	r3, r0
 8003992:	757b      	strb	r3, [r7, #21]
				&IMPms);

		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1d1a      	adds	r2, r3, #4
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	429a      	cmp	r2, r3
 800399c:	d901      	bls.n	80039a2 <VL53L1_StartMeasurement+0x102>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800399e:	23fc      	movs	r3, #252	; 0xfc
 80039a0:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE)
 80039a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d107      	bne.n	80039ba <VL53L1_StartMeasurement+0x11a>
		Status = VL53L1_init_and_start_range(
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	2206      	movs	r2, #6
 80039ae:	4619      	mov	r1, r3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f002 ff97 	bl	80068e4 <VL53L1_init_and_start_range>
 80039b6:	4603      	mov	r3, r0
 80039b8:	77fb      	strb	r3, [r7, #31]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);


	if (Status == VL53L1_ERROR_NONE)
 80039ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d105      	bne.n	80039ce <VL53L1_StartMeasurement+0x12e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80039c8:	2204      	movs	r2, #4
 80039ca:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	LOG_FUNCTION_END(Status);
	return Status;
 80039ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3720      	adds	r7, #32
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	10624dd3 	.word	0x10624dd3

080039e0 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80039e8:	2300      	movs	r3, #0
 80039ea:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f003 fa47 	bl	8006e80 <VL53L1_stop_range>
 80039f2:	4603      	mov	r3, r0
 80039f4:	73fb      	strb	r3, [r7, #15]
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	7edb      	ldrb	r3, [r3, #27]
 80039fa:	73bb      	strb	r3, [r7, #14]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 80039fc:	7bbb      	ldrb	r3, [r7, #14]
 80039fe:	2b40      	cmp	r3, #64	; 0x40
 8003a00:	d002      	beq.n	8003a08 <VL53L1_StopMeasurement+0x28>
		VL53L1_unload_patch(Dev);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f001 fd1a 	bl	800543c <VL53L1_unload_patch>

	if (Status == VL53L1_ERROR_NONE)
 8003a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d105      	bne.n	8003a1c <VL53L1_StopMeasurement+0x3c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003a16:	2203      	movs	r2, #3
 8003a18:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	LOG_FUNCTION_END(Status);
	return Status;
 8003a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7edb      	ldrb	r3, [r3, #27]
 8003a38:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8003a3a:	7bbb      	ldrb	r3, [r7, #14]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f003 ff4b 	bl	80078da <VL53L1_clear_interrupt_and_enable_next_range>
 8003a44:	4603      	mov	r3, r0
 8003a46:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8003a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8003a62:	6839      	ldr	r1, [r7, #0]
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f011 f8ac 	bl	8014bc2 <VL53L1_is_new_data_ready>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8003a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <GenNewPresetMode>:
}

static void GenNewPresetMode(int16_t RefRange,
		VL53L1_DistanceModes InternalDistanceMode,
		VL53L1_DistanceModes *pNewDistanceMode)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	4603      	mov	r3, r0
 8003a82:	603a      	str	r2, [r7, #0]
 8003a84:	80fb      	strh	r3, [r7, #6]
 8003a86:	460b      	mov	r3, r1
 8003a88:	717b      	strb	r3, [r7, #5]
	uint16_t HRLI = 600;
 8003a8a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8003a8e:	81fb      	strh	r3, [r7, #14]
	uint16_t HRLH = 700;
 8003a90:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8003a94:	81bb      	strh	r3, [r7, #12]
	uint16_t MRLI = 1400;
 8003a96:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8003a9a:	817b      	strh	r3, [r7, #10]
	uint16_t MRLH = 1500;
 8003a9c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003aa0:	813b      	strh	r3, [r7, #8]

	switch (InternalDistanceMode) {
 8003aa2:	797b      	ldrb	r3, [r7, #5]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d002      	beq.n	8003aae <GenNewPresetMode+0x34>
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d012      	beq.n	8003ad2 <GenNewPresetMode+0x58>
 8003aac:	e023      	b.n	8003af6 <GenNewPresetMode+0x7c>
	case VL53L1_DISTANCEMODE_SHORT:

		if (RefRange > MRLH)
 8003aae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ab2:	893b      	ldrh	r3, [r7, #8]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	dd03      	ble.n	8003ac0 <GenNewPresetMode+0x46>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2203      	movs	r2, #3
 8003abc:	701a      	strb	r2, [r3, #0]
		else if (RefRange > HRLH)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8003abe:	e02c      	b.n	8003b1a <GenNewPresetMode+0xa0>
		else if (RefRange > HRLH)
 8003ac0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ac4:	89bb      	ldrh	r3, [r7, #12]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	dd27      	ble.n	8003b1a <GenNewPresetMode+0xa0>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2202      	movs	r2, #2
 8003ace:	701a      	strb	r2, [r3, #0]
		break;
 8003ad0:	e023      	b.n	8003b1a <GenNewPresetMode+0xa0>
	case VL53L1_DISTANCEMODE_MEDIUM:

		if (RefRange > MRLH)
 8003ad2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ad6:	893b      	ldrh	r3, [r7, #8]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	dd03      	ble.n	8003ae4 <GenNewPresetMode+0x6a>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2203      	movs	r2, #3
 8003ae0:	701a      	strb	r2, [r3, #0]
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
 8003ae2:	e01c      	b.n	8003b1e <GenNewPresetMode+0xa4>
		else if (RefRange < HRLI)
 8003ae4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ae8:	89fb      	ldrh	r3, [r7, #14]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	da17      	bge.n	8003b1e <GenNewPresetMode+0xa4>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2201      	movs	r2, #1
 8003af2:	701a      	strb	r2, [r3, #0]
		break;
 8003af4:	e013      	b.n	8003b1e <GenNewPresetMode+0xa4>
	default:

		if (RefRange < HRLI)
 8003af6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003afa:	89fb      	ldrh	r3, [r7, #14]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	da03      	bge.n	8003b08 <GenNewPresetMode+0x8e>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2201      	movs	r2, #1
 8003b04:	701a      	strb	r2, [r3, #0]
		else if (RefRange < MRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8003b06:	e00c      	b.n	8003b22 <GenNewPresetMode+0xa8>
		else if (RefRange < MRLI)
 8003b08:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b0c:	897b      	ldrh	r3, [r7, #10]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	da07      	bge.n	8003b22 <GenNewPresetMode+0xa8>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2202      	movs	r2, #2
 8003b16:	701a      	strb	r2, [r3, #0]
		break;
 8003b18:	e003      	b.n	8003b22 <GenNewPresetMode+0xa8>
		break;
 8003b1a:	bf00      	nop
 8003b1c:	e002      	b.n	8003b24 <GenNewPresetMode+0xaa>
		break;
 8003b1e:	bf00      	nop
 8003b20:	e000      	b.n	8003b24 <GenNewPresetMode+0xaa>
		break;
 8003b22:	bf00      	nop
	}
}
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <CheckAndChangeDistanceMode>:
static void CheckAndChangeDistanceMode(VL53L1_DEV Dev,
		VL53L1_TargetRangeData_t *pRangeData,
		int16_t Ambient100DmaxMm,
		VL53L1_DistanceModes *pNewDistanceMode
)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	; 0x28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	80fb      	strh	r3, [r7, #6]
	VL53L1_DistanceModes DistanceMode;
	uint8_t RangeStatus = pRangeData->RangeStatus;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	7ddb      	ldrb	r3, [r3, #23]
 8003b44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DmaxValid;
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 8003b48:	4b28      	ldr	r3, [pc, #160]	; (8003bec <CheckAndChangeDistanceMode+0xbc>)
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	623b      	str	r3, [r7, #32]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3318      	adds	r3, #24
 8003b52:	61fb      	str	r3, [r7, #28]
	int32_t  tmpint32;


	switch (RangeStatus) {
 8003b54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b58:	2bff      	cmp	r3, #255	; 0xff
 8003b5a:	d042      	beq.n	8003be2 <CheckAndChangeDistanceMode+0xb2>
 8003b5c:	2bff      	cmp	r3, #255	; 0xff
 8003b5e:	dc07      	bgt.n	8003b70 <CheckAndChangeDistanceMode+0x40>
 8003b60:	2b07      	cmp	r3, #7
 8003b62:	dc02      	bgt.n	8003b6a <CheckAndChangeDistanceMode+0x3a>
 8003b64:	2b06      	cmp	r3, #6
 8003b66:	da3c      	bge.n	8003be2 <CheckAndChangeDistanceMode+0xb2>
	case VL53L1_RANGESTATUS_SYNCRONISATION_INT:
	case VL53L1_RANGESTATUS_NONE:
		return;
	default:

		break;
 8003b68:	e002      	b.n	8003b70 <CheckAndChangeDistanceMode+0x40>
 8003b6a:	3b0a      	subs	r3, #10
	switch (RangeStatus) {
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d938      	bls.n	8003be2 <CheckAndChangeDistanceMode+0xb2>
		break;
 8003b70:	bf00      	nop
	}

	DmaxValid = 1;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tmpint32 = pdev->hist_data.VL53L1_p_004;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8003b7e:	61bb      	str	r3, [r7, #24]
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	db03      	blt.n	8003b90 <CheckAndChangeDistanceMode+0x60>
 8003b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <CheckAndChangeDistanceMode+0x66>
		DmaxValid = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	DistanceMode = VL53L1DevDataGet(Dev,
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b9c:	f893 3a6e 	ldrb.w	r3, [r3, #2670]	; 0xa6e
 8003ba0:	75fb      	strb	r3, [r7, #23]
			CurrentParameters.DistanceMode);

	*pNewDistanceMode = DistanceMode;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	7dfa      	ldrb	r2, [r7, #23]
 8003ba6:	701a      	strb	r2, [r3, #0]

	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8003ba8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d108      	bne.n	8003bc2 <CheckAndChangeDistanceMode+0x92>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003bb6:	7df9      	ldrb	r1, [r7, #23]
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff ff5d 	bl	8003a7a <GenNewPresetMode>
 8003bc0:	e010      	b.n	8003be4 <CheckAndChangeDistanceMode+0xb4>
				DistanceMode, pNewDistanceMode);
	else {
		if (DmaxValid)
 8003bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <CheckAndChangeDistanceMode+0xaa>
			GenNewPresetMode(Ambient100DmaxMm,
 8003bca:	7df9      	ldrb	r1, [r7, #23]
 8003bcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff ff51 	bl	8003a7a <GenNewPresetMode>
 8003bd8:	e004      	b.n	8003be4 <CheckAndChangeDistanceMode+0xb4>
					DistanceMode, pNewDistanceMode);
		else
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2203      	movs	r2, #3
 8003bde:	701a      	strb	r2, [r3, #0]
 8003be0:	e000      	b.n	8003be4 <CheckAndChangeDistanceMode+0xb4>
		return;
 8003be2:	bf00      	nop
	}
}
 8003be4:	3728      	adds	r7, #40	; 0x28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000010 	.word	0x20000010

08003bf0 <ComputeRQL>:

static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b08d      	sub	sp, #52	; 0x34
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	603a      	str	r2, [r7, #0]
 8003bfa:	71fb      	strb	r3, [r7, #7]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	71bb      	strb	r3, [r7, #6]
	int16_t T_Wide = 150;
 8003c00:	2396      	movs	r3, #150	; 0x96
 8003c02:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t SRL = 300;
 8003c04:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003c08:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t SRAS = 30;
 8003c0a:	231e      	movs	r3, #30
 8003c0c:	843b      	strh	r3, [r7, #32]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587;
 8003c0e:	4b39      	ldr	r3, [pc, #228]	; (8003cf4 <ComputeRQL+0x104>)
 8003c10:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157;
 8003c12:	4b39      	ldr	r3, [pc, #228]	; (8003cf8 <ComputeRQL+0x108>)
 8003c14:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;
 8003c16:	f641 139a 	movw	r3, #6554	; 0x199a
 8003c1a:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d103      	bne.n	8003c2a <ComputeRQL+0x3a>
		returnvalue = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c28:	e05b      	b.n	8003ce2 <ComputeRQL+0xf2>
	else if (((presults_data->max_range_mm -
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8003c30:	461a      	mov	r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
	else if (((presults_data->max_range_mm -
 8003c38:	1ad2      	subs	r2, r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8003c3a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	else if (((presults_data->max_range_mm -
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	da02      	bge.n	8003c48 <ComputeRQL+0x58>
			presults_data->min_range_mm) >= T_Wide) ||
 8003c42:	79bb      	ldrb	r3, [r7, #6]
 8003c44:	2b07      	cmp	r3, #7
 8003c46:	d103      	bne.n	8003c50 <ComputeRQL+0x60>
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
 8003c48:	2332      	movs	r3, #50	; 0x32
 8003c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c4e:	e048      	b.n	8003ce2 <ComputeRQL+0xf2>
	else {
		if (presults_data->median_range_mm < SRL)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8003c56:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	dd03      	ble.n	8003c66 <ComputeRQL+0x76>
			RAS = SRAS * 65536;
 8003c5e:	8c3b      	ldrh	r3, [r7, #32]
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c64:	e007      	b.n	8003c76 <ComputeRQL+0x86>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	fb02 f303 	mul.w	r3, r2, r3
 8003c74:	62fb      	str	r3, [r7, #44]	; 0x2c


		if (RAS != 0) {
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d020      	beq.n	8003cbe <ComputeRQL+0xce>
			partial = (GGm * presults_data->VL53L1_p_005);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003c80:	461a      	mov	r2, r3
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	fb02 f303 	mul.w	r3, r2, r3
 8003c88:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4413      	add	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9c:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d804      	bhi.n	8003cb6 <ComputeRQL+0xc6>
				SRQL = GI - partial;
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb4:	e006      	b.n	8003cc4 <ComputeRQL+0xd4>
			else
				SRQL = 50 * 65536;
 8003cb6:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cbc:	e002      	b.n	8003cc4 <ComputeRQL+0xd4>
		} else
			SRQL = 100 * 65536;
 8003cbe:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8003cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	2b32      	cmp	r3, #50	; 0x32
 8003cce:	d905      	bls.n	8003cdc <ComputeRQL+0xec>
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	bf28      	it	cs
 8003cd6:	2364      	movcs	r3, #100	; 0x64
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	e000      	b.n	8003cde <ComputeRQL+0xee>
 8003cdc:	2332      	movs	r3, #50	; 0x32
 8003cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8003ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3734      	adds	r7, #52	; 0x34
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	0075b333 	.word	0x0075b333
 8003cf8:	0030cccd 	.word	0x0030cccd

08003cfc <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	3b04      	subs	r3, #4
 8003d0a:	2b0f      	cmp	r3, #15
 8003d0c:	d83d      	bhi.n	8003d8a <ConvertStatusLite+0x8e>
 8003d0e:	a201      	add	r2, pc, #4	; (adr r2, 8003d14 <ConvertStatusLite+0x18>)
 8003d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d14:	08003d67 	.word	0x08003d67
 8003d18:	08003d61 	.word	0x08003d61
 8003d1c:	08003d6d 	.word	0x08003d6d
 8003d20:	08003d73 	.word	0x08003d73
 8003d24:	08003d7f 	.word	0x08003d7f
 8003d28:	08003d85 	.word	0x08003d85
 8003d2c:	08003d8b 	.word	0x08003d8b
 8003d30:	08003d8b 	.word	0x08003d8b
 8003d34:	08003d79 	.word	0x08003d79
 8003d38:	08003d8b 	.word	0x08003d8b
 8003d3c:	08003d8b 	.word	0x08003d8b
 8003d40:	08003d8b 	.word	0x08003d8b
 8003d44:	08003d8b 	.word	0x08003d8b
 8003d48:	08003d8b 	.word	0x08003d8b
 8003d4c:	08003d55 	.word	0x08003d55
 8003d50:	08003d5b 	.word	0x08003d5b
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8003d54:	230a      	movs	r3, #10
 8003d56:	73fb      	strb	r3, [r7, #15]
		break;
 8003d58:	e019      	b.n	8003d8e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8003d5a:	2306      	movs	r3, #6
 8003d5c:	73fb      	strb	r3, [r7, #15]
		break;
 8003d5e:	e016      	b.n	8003d8e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8003d60:	2304      	movs	r3, #4
 8003d62:	73fb      	strb	r3, [r7, #15]
		break;
 8003d64:	e013      	b.n	8003d8e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8003d66:	2302      	movs	r3, #2
 8003d68:	73fb      	strb	r3, [r7, #15]
		break;
 8003d6a:	e010      	b.n	8003d8e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
		break;
 8003d70:	e00d      	b.n	8003d8e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8003d72:	2307      	movs	r3, #7
 8003d74:	73fb      	strb	r3, [r7, #15]
		break;
 8003d76:	e00a      	b.n	8003d8e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8003d78:	2309      	movs	r3, #9
 8003d7a:	73fb      	strb	r3, [r7, #15]
		break;
 8003d7c:	e007      	b.n	8003d8e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	73fb      	strb	r3, [r7, #15]
		break;
 8003d82:	e004      	b.n	8003d8e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8003d84:	2300      	movs	r3, #0
 8003d86:	73fb      	strb	r3, [r7, #15]
		break;
 8003d88:	e001      	b.n	8003d8e <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8003d8a:	23ff      	movs	r3, #255	; 0xff
 8003d8c:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <ConvertStatusHisto>:


static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	3b05      	subs	r3, #5
 8003daa:	2b12      	cmp	r3, #18
 8003dac:	d840      	bhi.n	8003e30 <ConvertStatusHisto+0x94>
 8003dae:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <ConvertStatusHisto+0x18>)
 8003db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db4:	08003e01 	.word	0x08003e01
 8003db8:	08003e07 	.word	0x08003e07
 8003dbc:	08003e13 	.word	0x08003e13
 8003dc0:	08003e31 	.word	0x08003e31
 8003dc4:	08003e2b 	.word	0x08003e2b
 8003dc8:	08003e31 	.word	0x08003e31
 8003dcc:	08003e31 	.word	0x08003e31
 8003dd0:	08003e31 	.word	0x08003e31
 8003dd4:	08003e31 	.word	0x08003e31
 8003dd8:	08003e31 	.word	0x08003e31
 8003ddc:	08003e31 	.word	0x08003e31
 8003de0:	08003e31 	.word	0x08003e31
 8003de4:	08003e31 	.word	0x08003e31
 8003de8:	08003e31 	.word	0x08003e31
 8003dec:	08003e0d 	.word	0x08003e0d
 8003df0:	08003e1f 	.word	0x08003e1f
 8003df4:	08003e31 	.word	0x08003e31
 8003df8:	08003e25 	.word	0x08003e25
 8003dfc:	08003e19 	.word	0x08003e19
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8003e00:	2304      	movs	r3, #4
 8003e02:	73fb      	strb	r3, [r7, #15]
		break;
 8003e04:	e016      	b.n	8003e34 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8003e06:	2301      	movs	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
		break;
 8003e0a:	e013      	b.n	8003e34 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8003e0c:	2306      	movs	r3, #6
 8003e0e:	73fb      	strb	r3, [r7, #15]
		break;
 8003e10:	e010      	b.n	8003e34 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8003e12:	2307      	movs	r3, #7
 8003e14:	73fb      	strb	r3, [r7, #15]
		break;
 8003e16:	e00d      	b.n	8003e34 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8003e18:	230c      	movs	r3, #12
 8003e1a:	73fb      	strb	r3, [r7, #15]
		break;
 8003e1c:	e00a      	b.n	8003e34 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8003e1e:	2307      	movs	r3, #7
 8003e20:	73fb      	strb	r3, [r7, #15]
		break;
 8003e22:	e007      	b.n	8003e34 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8003e24:	230b      	movs	r3, #11
 8003e26:	73fb      	strb	r3, [r7, #15]
		break;
 8003e28:	e004      	b.n	8003e34 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	73fb      	strb	r3, [r7, #15]
		break;
 8003e2e:	e001      	b.n	8003e34 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8003e30:	23ff      	movs	r3, #255	; 0xff
 8003e32:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop

08003e44 <SetTargetData>:

static VL53L1_Error SetTargetData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53L1_range_data_t *presults_data,
	VL53L1_TargetRangeData_t *pRangeData)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b092      	sub	sp, #72	; 0x48
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	4611      	mov	r1, r2
 8003e50:	461a      	mov	r2, r3
 8003e52:	4603      	mov	r3, r0
 8003e54:	70fb      	strb	r3, [r7, #3]
 8003e56:	460b      	mov	r3, r1
 8003e58:	70bb      	strb	r3, [r7, #2]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	VL53L1_LLDriverData_t *pdev =
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3318      	adds	r3, #24
 8003e68:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_tuning_parm_storage_t *tp =
 8003e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003e70:	63bb      	str	r3, [r7, #56]	; 0x38
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	VL53L1_PresetModes PresetMode;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;
	int32_t TuningMinValidSignal;
	FixPoint1616_t MinValidSignal;

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8003e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e78:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8003e84:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff feaf 	bl	8003bf0 <ComputeRQL>
 8003e92:	4603      	mov	r3, r0
 8003e94:	461a      	mov	r2, r3
 8003e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e98:	701a      	strb	r2, [r3, #0]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8003e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e9c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003e9e:	025b      	lsls	r3, r3, #9
 8003ea0:	633b      	str	r3, [r7, #48]	; 0x30
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8003ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea6:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8003ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eaa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003eac:	025b      	lsls	r3, r3, #9
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8003eb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb4:	60da      	str	r2, [r3, #12]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8003eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003eba:	025b      	lsls	r3, r3, #9
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8003ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec2:	611a      	str	r2, [r3, #16]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8003ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec6:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8003eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ecc:	829a      	strh	r2, [r3, #20]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8003ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ed0:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8003ed4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ed6:	805a      	strh	r2, [r3, #2]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8003ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eda:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8003ede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ee0:	809a      	strh	r2, [r3, #4]

	pRangeData->RangeFractionalPart = 0;
 8003ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	759a      	strb	r2, [r3, #22]


	switch (device_status) {
 8003ee8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003eec:	2b11      	cmp	r3, #17
 8003eee:	d009      	beq.n	8003f04 <SetTargetData+0xc0>
 8003ef0:	2b11      	cmp	r3, #17
 8003ef2:	dc0f      	bgt.n	8003f14 <SetTargetData+0xd0>
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	dc02      	bgt.n	8003efe <SetTargetData+0xba>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	dc03      	bgt.n	8003f04 <SetTargetData+0xc0>
 8003efc:	e00a      	b.n	8003f14 <SetTargetData+0xd0>
 8003efe:	2b0d      	cmp	r3, #13
 8003f00:	d004      	beq.n	8003f0c <SetTargetData+0xc8>
 8003f02:	e007      	b.n	8003f14 <SetTargetData+0xd0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8003f04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f06:	2205      	movs	r2, #5
 8003f08:	75da      	strb	r2, [r3, #23]
		break;
 8003f0a:	e006      	b.n	8003f1a <SetTargetData+0xd6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8003f0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f0e:	220d      	movs	r2, #13
 8003f10:	75da      	strb	r2, [r3, #23]
		break;
 8003f12:	e002      	b.n	8003f1a <SetTargetData+0xd6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8003f14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f16:	2200      	movs	r2, #0
 8003f18:	75da      	strb	r2, [r3, #23]
	}


	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8003f1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f1c:	7ddb      	ldrb	r3, [r3, #23]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d117      	bne.n	8003f52 <SetTargetData+0x10e>
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d114      	bne.n	8003f52 <SetTargetData+0x10e>
		(active_results == 0)) {
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 8003f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f2a:	22ff      	movs	r2, #255	; 0xff
 8003f2c:	75da      	strb	r2, [r3, #23]
		pRangeData->SignalRateRtnMegaCps = 0;
 8003f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f30:	2200      	movs	r2, #0
 8003f32:	609a      	str	r2, [r3, #8]
		pRangeData->SigmaMilliMeter = 0;
 8003f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f36:	2200      	movs	r2, #0
 8003f38:	611a      	str	r2, [r3, #16]
		pRangeData->RangeMilliMeter = 8191;
 8003f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f3c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003f40:	829a      	strh	r2, [r3, #20]
		pRangeData->RangeMaxMilliMeter = 8191;
 8003f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f44:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003f48:	805a      	strh	r2, [r3, #2]
		pRangeData->RangeMinMilliMeter = 8191;
 8003f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f4c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003f50:	809a      	strh	r2, [r3, #4]
	}


	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8003f52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f54:	7ddb      	ldrb	r3, [r3, #23]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d125      	bne.n	8003fa6 <SetTargetData+0x162>
		PresetMode = VL53L1DevDataGet(Dev,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f60:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8003f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				CurrentParameters.PresetMode);
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 8003f68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d007      	beq.n	8003f80 <SetTargetData+0x13c>
 8003f70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d003      	beq.n	8003f80 <SetTargetData+0x13c>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 8003f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f7c:	2b09      	cmp	r3, #9
 8003f7e:	d109      	bne.n	8003f94 <SetTargetData+0x150>
			(PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE))
			pRangeData->RangeStatus =
				ConvertStatusHisto(FilteredRangeStatus);
 8003f80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ff09 	bl	8003d9c <ConvertStatusHisto>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8003f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f90:	75da      	strb	r2, [r3, #23]
 8003f92:	e008      	b.n	8003fa6 <SetTargetData+0x162>
		else
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8003f94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff feaf 	bl	8003cfc <ConvertStatusLite>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8003fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fa4:	75da      	strb	r2, [r3, #23]
	}


	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8003fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003faa:	025b      	lsls	r3, r3, #9
 8003fac:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb8:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8003fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fbe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003fc0:	025b      	lsls	r3, r3, #9
 8003fc2:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003fca:	461a      	mov	r2, r3
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	f8c2 3a84 	str.w	r3, [r2, #2692]	; 0xa84
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);



	VL53L1_GetLimitCheckValue(Dev,
 8003fd2:	f107 0310 	add.w	r3, r7, #16
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	2100      	movs	r1, #0
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff fb2d 	bl	800363a <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8003fe0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003fe4:	2b06      	cmp	r3, #6
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8003fee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_GetLimitCheckEnable(Dev,
 8003ff2:	f107 0315 	add.w	r3, r7, #21
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff faf8 	bl	80035f0 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8004000:	7d7b      	ldrb	r3, [r7, #21]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d105      	bne.n	8004012 <SetTargetData+0x1ce>
 8004006:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <SetTargetData+0x1ce>
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <SetTargetData+0x1d0>
 8004012:	2300      	movs	r3, #0
 8004014:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800401e:	461a      	mov	r2, r3
 8004020:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004024:	f882 3a76 	strb.w	r3, [r2, #2678]	; 0xa76
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);


	VL53L1_GetLimitCheckValue(Dev,
 8004028:	f107 0310 	add.w	r3, r7, #16
 800402c:	461a      	mov	r2, r3
 800402e:	2101      	movs	r1, #1
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff fb02 	bl	800363a <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8004036:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800403a:	2b04      	cmp	r3, #4
 800403c:	bf0c      	ite	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	2300      	movne	r3, #0
 8004042:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8004044:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	VL53L1_GetLimitCheckEnable(Dev,
 8004048:	f107 0315 	add.w	r3, r7, #21
 800404c:	461a      	mov	r2, r3
 800404e:	2101      	movs	r1, #1
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff facd 	bl	80035f0 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8004056:	7d7b      	ldrb	r3, [r7, #21]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d105      	bne.n	8004068 <SetTargetData+0x224>
 800405c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <SetTargetData+0x224>
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <SetTargetData+0x226>
 8004068:	2300      	movs	r3, #0
 800406a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004074:	461a      	mov	r2, r3
 8004076:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800407a:	f882 3a77 	strb.w	r3, [r2, #2679]	; 0xa77
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800407e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004080:	8a9b      	ldrh	r3, [r3, #20]
 8004082:	847b      	strh	r3, [r7, #34]	; 0x22
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8004084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004086:	7ddb      	ldrb	r3, [r3, #23]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d110      	bne.n	80040ae <SetTargetData+0x26a>
 800408c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004090:	2b00      	cmp	r3, #0
 8004092:	da0c      	bge.n	80040ae <SetTargetData+0x26a>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8004094:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8004098:	4ba3      	ldr	r3, [pc, #652]	; (8004328 <SetTargetData+0x4e4>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	429a      	cmp	r2, r3
 800409e:	da03      	bge.n	80040a8 <SetTargetData+0x264>
			pRangeData->RangeStatus =
 80040a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040a2:	220e      	movs	r2, #14
 80040a4:	75da      	strb	r2, [r3, #23]
 80040a6:	e002      	b.n	80040ae <SetTargetData+0x26a>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 80040a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040aa:	2200      	movs	r2, #0
 80040ac:	829a      	strh	r2, [r3, #20]
	}


	VL53L1_get_tuning_parm(Dev,
 80040ae:	f107 0308 	add.w	r3, r7, #8
 80040b2:	461a      	mov	r2, r3
 80040b4:	f248 01be 	movw	r1, #32958	; 0x80be
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f004 f943 	bl	8008344 <VL53L1_get_tuning_parm>
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS,
		&TuningMinValidSignal);
	MinValidSignal = (FixPoint1616_t)TuningMinValidSignal;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	61fb      	str	r3, [r7, #28]
	if ((iteration > 0) &&
 80040c2:	787b      	ldrb	r3, [r7, #1]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00b      	beq.n	80040e0 <SetTargetData+0x29c>
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 80040c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ca:	7ddb      	ldrb	r3, [r3, #23]
	if ((iteration > 0) &&
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d107      	bne.n	80040e0 <SetTargetData+0x29c>
		(pRangeData->SignalRateRtnMegaCps < MinValidSignal))
 80040d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040d2:	689b      	ldr	r3, [r3, #8]
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d902      	bls.n	80040e0 <SetTargetData+0x29c>
		pRangeData->RangeStatus =
 80040da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040dc:	220c      	movs	r2, #12
 80040de:	75da      	strb	r2, [r3, #23]
			VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;




	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 80040e0:	f107 030c 	add.w	r3, r7, #12
 80040e4:	461a      	mov	r2, r3
 80040e6:	f248 0191 	movw	r1, #32913	; 0x8091
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f004 f92a 	bl	8008344 <VL53L1_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 80040f0:	78bb      	ldrb	r3, [r7, #2]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	76fb      	strb	r3, [r7, #27]
	uwr_status = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 80040fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004100:	8a9b      	ldrh	r3, [r3, #20]
 8004102:	833b      	strh	r3, [r7, #24]
	AddOffset = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	pRangeData->ExtendedRange = 0;
 800410a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800410c:	2200      	movs	r2, #0
 800410e:	761a      	strb	r2, [r3, #24]

	if ((active_results != 1) ||
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d106      	bne.n	8004124 <SetTargetData+0x2e0>
		(pdev->PreviousRangeActiveResults != 1))
 8004116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004118:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800411c:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
	if ((active_results != 1) ||
 8004120:	2b01      	cmp	r3, #1
 8004122:	d001      	beq.n	8004128 <SetTargetData+0x2e4>
		ExtendedRangeEnabled = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 8250 	beq.w	80045d0 <SetTargetData+0x78c>
		(pRangeData->RangeStatus ==
 8004130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004132:	7ddb      	ldrb	r3, [r3, #23]
	if (ExtendedRangeEnabled &&
 8004134:	2b07      	cmp	r3, #7
 8004136:	d004      	beq.n	8004142 <SetTargetData+0x2fe>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8004138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800413a:	7ddb      	ldrb	r3, [r3, #23]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 800413c:	2b04      	cmp	r3, #4
 800413e:	f040 8247 	bne.w	80045d0 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8004142:	787b      	ldrb	r3, [r7, #1]
 8004144:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004146:	4413      	add	r3, r2
 8004148:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800414c:	3320      	adds	r3, #32
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b07      	cmp	r3, #7
 8004152:	d01c      	beq.n	800418e <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8004154:	787b      	ldrb	r3, [r7, #1]
 8004156:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004158:	4413      	add	r3, r2
 800415a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800415e:	3320      	adds	r3, #32
 8004160:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8004162:	2b04      	cmp	r3, #4
 8004164:	d013      	beq.n	800418e <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8004166:	787b      	ldrb	r3, [r7, #1]
 8004168:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800416a:	4413      	add	r3, r2
 800416c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004170:	3320      	adds	r3, #32
 8004172:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8004174:	2b00      	cmp	r3, #0
 8004176:	f040 822b 	bne.w	80045d0 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 800417a:	787b      	ldrb	r3, [r7, #1]
 800417c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800417e:	4413      	add	r3, r2
 8004180:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004184:	3324      	adds	r3, #36	; 0x24
 8004186:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_RANGE_VALID &&
 8004188:	2b01      	cmp	r3, #1
 800418a:	f040 8221 	bne.w	80045d0 <SetTargetData+0x78c>
	{
		if (((pdev->PreviousStreamCount) ==
 800418e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004190:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004194:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8004198:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 800419a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419c:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 80041a0:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d00c      	beq.n	80041c0 <SetTargetData+0x37c>
		|| ((pdev->PreviousStreamCount) ==
 80041a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80041ac:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80041b0:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 80041b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b4:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 80041b8:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 80041ba:	429a      	cmp	r2, r3
 80041bc:	f040 81dc 	bne.w	8004578 <SetTargetData+0x734>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 80041c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041c2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80041c6:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 80041c8:	787b      	ldrb	r3, [r7, #1]
 80041ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041cc:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80041d0:	330c      	adds	r3, #12
 80041d2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80041d6:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	b29b      	uxth	r3, r3
 80041dc:	82fb      	strh	r3, [r7, #22]

		uwr_status = 1;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		switch (pdev->preset_mode) {
 80041e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e6:	785b      	ldrb	r3, [r3, #1]
 80041e8:	2b21      	cmp	r3, #33	; 0x21
 80041ea:	d008      	beq.n	80041fe <SetTargetData+0x3ba>
 80041ec:	2b21      	cmp	r3, #33	; 0x21
 80041ee:	f300 81bf 	bgt.w	8004570 <SetTargetData+0x72c>
 80041f2:	2b1b      	cmp	r3, #27
 80041f4:	f000 8113 	beq.w	800441e <SetTargetData+0x5da>
 80041f8:	2b1e      	cmp	r3, #30
 80041fa:	d004      	beq.n	8004206 <SetTargetData+0x3c2>
 80041fc:	e1b8      	b.n	8004570 <SetTargetData+0x72c>
			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8004204:	e1b9      	b.n	800457a <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8004206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004208:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 800420c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004210:	429a      	cmp	r2, r3
 8004212:	dd0f      	ble.n	8004234 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8004214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004216:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800421a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800421e:	429a      	cmp	r2, r3
 8004220:	da08      	bge.n	8004234 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8004222:	7efb      	ldrb	r3, [r7, #27]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d105      	bne.n	8004234 <SetTargetData+0x3f0>
					sequency == 1) {
					AddOffset =
 8004228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800422e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004232:	e0f3      	b.n	800441c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8004234:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423a:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 800423e:	425b      	negs	r3, r3
 8004240:	429a      	cmp	r2, r3
 8004242:	da10      	bge.n	8004266 <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8004244:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424a:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 800424e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8004250:	429a      	cmp	r2, r3
 8004252:	dd08      	ble.n	8004266 <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8004254:	7efb      	ldrb	r3, [r7, #27]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d105      	bne.n	8004266 <SetTargetData+0x422>
					sequency == 0) {
					AddOffset =
 800425a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425c:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8004260:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004264:	e0da      	b.n	800441c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004268:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 800426c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004270:	429a      	cmp	r2, r3
 8004272:	dd0f      	ble.n	8004294 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8004274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004276:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 800427a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800427e:	429a      	cmp	r2, r3
 8004280:	da08      	bge.n	8004294 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8004282:	7efb      	ldrb	r3, [r7, #27]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d105      	bne.n	8004294 <SetTargetData+0x450>
					sequency == 0) {
					AddOffset =
 8004288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800428e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004292:	e0c3      	b.n	800441c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8004294:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429a:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 800429e:	425b      	negs	r3, r3
 80042a0:	429a      	cmp	r2, r3
 80042a2:	da10      	bge.n	80042c6 <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80042a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042aa:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 80042ae:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80042b0:	429a      	cmp	r2, r3
 80042b2:	dd08      	ble.n	80042c6 <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80042b4:	7efb      	ldrb	r3, [r7, #27]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d105      	bne.n	80042c6 <SetTargetData+0x482>
					sequency == 1) {
					AddOffset =
 80042ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042bc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80042c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80042c4:	e0aa      	b.n	800441c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80042c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c8:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 80042cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	dd0f      	ble.n	80042f4 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80042d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d6:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80042da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80042de:	429a      	cmp	r2, r3
 80042e0:	da08      	bge.n	80042f4 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80042e2:	7efb      	ldrb	r3, [r7, #27]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d105      	bne.n	80042f4 <SetTargetData+0x4b0>
					sequency == 1) {
					AddOffset =
 80042e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ea:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80042ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80042f2:	e093      	b.n	800441c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 80042f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80042f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fa:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 80042fe:	425b      	negs	r3, r3
 8004300:	429a      	cmp	r2, r3
 8004302:	da13      	bge.n	800432c <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8004304:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430a:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 800430e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8004310:	429a      	cmp	r2, r3
 8004312:	dd0b      	ble.n	800432c <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8004314:	7efb      	ldrb	r3, [r7, #27]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d108      	bne.n	800432c <SetTargetData+0x4e8>
					sequency == 0) {
					AddOffset =
 800431a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431c:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8004320:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004324:	e07a      	b.n	800441c <SetTargetData+0x5d8>
 8004326:	bf00      	nop
 8004328:	20000010 	.word	0x20000010
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 800432c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432e:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8004332:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004336:	429a      	cmp	r2, r3
 8004338:	dd0f      	ble.n	800435a <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8004340:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004344:	429a      	cmp	r2, r3
 8004346:	da08      	bge.n	800435a <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8004348:	7efb      	ldrb	r3, [r7, #27]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d105      	bne.n	800435a <SetTargetData+0x516>
					sequency == 0) {
					AddOffset =
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004350:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8004354:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004358:	e060      	b.n	800441c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800435a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8004364:	425b      	negs	r3, r3
 8004366:	429a      	cmp	r2, r3
 8004368:	da10      	bge.n	800438c <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800436a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800436e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004370:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8004374:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8004376:	429a      	cmp	r2, r3
 8004378:	dd08      	ble.n	800438c <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800437a:	7efb      	ldrb	r3, [r7, #27]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d105      	bne.n	800438c <SetTargetData+0x548>
					sequency == 1) {
					AddOffset =
 8004380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004382:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8004386:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800438a:	e047      	b.n	800441c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 800438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438e:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8004392:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004396:	429a      	cmp	r2, r3
 8004398:	da0c      	bge.n	80043b4 <SetTargetData+0x570>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80043a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	dd05      	ble.n	80043b4 <SetTargetData+0x570>
					AddOffset =
 80043a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043aa:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 80043ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80043b2:	e033      	b.n	800441c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_5_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 80043b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b6:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 80043ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80043be:	429a      	cmp	r2, r3
 80043c0:	dd0f      	ble.n	80043e2 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 80043c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c4:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 80043c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	da08      	bge.n	80043e2 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 80043d0:	7efb      	ldrb	r3, [r7, #27]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d105      	bne.n	80043e2 <SetTargetData+0x59e>
					sequency == 1) {
					AddOffset =
 80043d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80043dc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80043e0:	e01c      	b.n	800441c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 80043e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 80043ec:	425b      	negs	r3, r3
 80043ee:	429a      	cmp	r2, r3
 80043f0:	da10      	bge.n	8004414 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 80043f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80043f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f8:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 80043fc:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 80043fe:	429a      	cmp	r2, r3
 8004400:	dd08      	ble.n	8004414 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8004402:	7efb      	ldrb	r3, [r7, #27]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d105      	bne.n	8004414 <SetTargetData+0x5d0>
					sequency == 0) {
					AddOffset =
 8004408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800440e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004412:	e003      	b.n	800441c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangea;
				}
				else
					uwr_status = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800441a:	e0ae      	b.n	800457a <SetTargetData+0x736>
 800441c:	e0ad      	b.n	800457a <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8004424:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004428:	429a      	cmp	r2, r3
 800442a:	dd0f      	ble.n	800444c <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 800442c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442e:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8004432:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004436:	429a      	cmp	r2, r3
 8004438:	da08      	bge.n	800444c <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 800443a:	7efb      	ldrb	r3, [r7, #27]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <SetTargetData+0x608>
					sequency == 0) {
					AddOffset =
 8004440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004442:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8004446:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800444a:	e090      	b.n	800456e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 800444c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004452:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8004456:	425b      	negs	r3, r3
 8004458:	429a      	cmp	r2, r3
 800445a:	da10      	bge.n	800447e <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 800445c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004462:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8004466:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8004468:	429a      	cmp	r2, r3
 800446a:	dd08      	ble.n	800447e <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 800446c:	7efb      	ldrb	r3, [r7, #27]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d105      	bne.n	800447e <SetTargetData+0x63a>
					sequency == 1) {
					AddOffset =
 8004472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004474:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 8004478:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800447c:	e077      	b.n	800456e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004480:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8004484:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004488:	429a      	cmp	r2, r3
 800448a:	dd0f      	ble.n	80044ac <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8004492:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004496:	429a      	cmp	r2, r3
 8004498:	da08      	bge.n	80044ac <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800449a:	7efb      	ldrb	r3, [r7, #27]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d105      	bne.n	80044ac <SetTargetData+0x668>
					sequency == 1) {
					AddOffset =
 80044a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a2:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 80044a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80044aa:	e060      	b.n	800456e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80044ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80044b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b2:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 80044b6:	425b      	negs	r3, r3
 80044b8:	429a      	cmp	r2, r3
 80044ba:	da10      	bge.n	80044de <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80044bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80044c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c2:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 80044c6:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80044c8:	429a      	cmp	r2, r3
 80044ca:	dd08      	ble.n	80044de <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80044cc:	7efb      	ldrb	r3, [r7, #27]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d105      	bne.n	80044de <SetTargetData+0x69a>
					sequency == 0) {
					AddOffset =
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 80044d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80044dc:	e047      	b.n	800456e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80044de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e0:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 80044e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	da0c      	bge.n	8004506 <SetTargetData+0x6c2>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 80044ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ee:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80044f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	dd05      	ble.n	8004506 <SetTargetData+0x6c2>
					AddOffset =
 80044fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fc:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 8004500:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004504:	e033      	b.n	800456e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 800450c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004510:	429a      	cmp	r2, r3
 8004512:	dd0f      	ble.n	8004534 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8004514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004516:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 800451a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800451e:	429a      	cmp	r2, r3
 8004520:	da08      	bge.n	8004534 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8004522:	7efb      	ldrb	r3, [r7, #27]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d105      	bne.n	8004534 <SetTargetData+0x6f0>
					sequency == 1) {
					AddOffset =
 8004528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452a:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800452e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004532:	e01c      	b.n	800456e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8004534:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 800453e:	425b      	negs	r3, r3
 8004540:	429a      	cmp	r2, r3
 8004542:	da10      	bge.n	8004566 <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8004544:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454a:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 800454e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8004550:	429a      	cmp	r2, r3
 8004552:	dd08      	ble.n	8004566 <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8004554:	7efb      	ldrb	r3, [r7, #27]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d105      	bne.n	8004566 <SetTargetData+0x722>
					sequency == 0) {
					AddOffset =
 800455a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455c:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 8004560:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004564:	e003      	b.n	800456e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangea;
				}
				else
					uwr_status = 0;
 8004566:	2300      	movs	r3, #0
 8004568:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800456c:	e005      	b.n	800457a <SetTargetData+0x736>
 800456e:	e004      	b.n	800457a <SetTargetData+0x736>

			default:
				uwr_status = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8004576:	e000      	b.n	800457a <SetTargetData+0x736>
			}
		}
 8004578:	bf00      	nop

		if (uwr_status) {
 800457a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800457e:	2b00      	cmp	r3, #0
 8004580:	d026      	beq.n	80045d0 <SetTargetData+0x78c>
			pRangeData->RangeMilliMeter += AddOffset;
 8004582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004584:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004588:	b29a      	uxth	r2, r3
 800458a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800458e:	4413      	add	r3, r2
 8004590:	b29b      	uxth	r3, r3
 8004592:	b21a      	sxth	r2, r3
 8004594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004596:	829a      	strh	r2, [r3, #20]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8004598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800459a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800459e:	b29a      	uxth	r2, r3
 80045a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80045a4:	4413      	add	r3, r2
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	b21a      	sxth	r2, r3
 80045aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045ac:	809a      	strh	r2, [r3, #4]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 80045ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80045ba:	4413      	add	r3, r2
 80045bc:	b29b      	uxth	r3, r3
 80045be:	b21a      	sxth	r2, r3
 80045c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045c2:	805a      	strh	r2, [r3, #2]
			pRangeData->ExtendedRange = 1;
 80045c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045c6:	2201      	movs	r2, #1
 80045c8:	761a      	strb	r2, [r3, #24]
			pRangeData->RangeStatus = 0;
 80045ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045cc:	2200      	movs	r2, #0
 80045ce:	75da      	strb	r2, [r3, #23]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 80045d0:	787b      	ldrb	r3, [r7, #1]
 80045d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045d4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80045d8:	330c      	adds	r3, #12
 80045da:	8b39      	ldrh	r1, [r7, #24]
 80045dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 80045e0:	787b      	ldrb	r3, [r7, #1]
 80045e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045e4:	7dd1      	ldrb	r1, [r2, #23]
 80045e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80045ee:	3320      	adds	r3, #32
 80045f0:	460a      	mov	r2, r1
 80045f2:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 80045f4:	787b      	ldrb	r3, [r7, #1]
 80045f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045f8:	7e11      	ldrb	r1, [r2, #24]
 80045fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004602:	3324      	adds	r3, #36	; 0x24
 8004604:	460a      	mov	r2, r1
 8004606:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8004608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800460e:	461a      	mov	r2, r3
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	f882 30e8 	strb.w	r3, [r2, #232]	; 0xe8

	return Status;
 8004616:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800461a:	4618      	mov	r0, r3
 800461c:	3748      	adds	r7, #72	; 0x48
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop

08004624 <SetMeasurementData>:
}

static VL53L1_Error SetMeasurementData(VL53L1_DEV Dev,
	VL53L1_range_results_t *presults,
	VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8004624:	b590      	push	{r4, r7, lr}
 8004626:	b091      	sub	sp, #68	; 0x44
 8004628:	af04      	add	r7, sp, #16
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3318      	adds	r3, #24
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;
	uint8_t iteration;
	VL53L1_TargetRangeData_t *pRangeData;
	VL53L1_range_data_t *presults_data;
	int16_t dmax_min;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004636:	2300      	movs	r3, #0
 8004638:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t Furthest_idx = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	int16_t Furthest_range = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t ActiveResults, amb_idx;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	7c9a      	ldrb	r2, [r3, #18]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	719a      	strb	r2, [r3, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	789a      	ldrb	r2, [r3, #2]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800466e:	4293      	cmp	r3, r2
 8004670:	bfa8      	it	ge
 8004672:	4613      	movge	r3, r2
 8004674:	847b      	strh	r3, [r7, #34]	; 0x22
			presults->VL53L1_p_007[DMAX_REFLECTANCE_IDX]);
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800467a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c


	pMultiRangingData->TimeStamp = 0;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	78da      	ldrb	r2, [r3, #3]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	711a      	strb	r2, [r3, #4]

	pMultiRangingData->RecommendedDistanceMode =
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004692:	f893 2a6e 	ldrb.w	r2, [r3, #2670]	; 0xa6e
	pMultiRangingData->RecommendedDistanceMode =
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	ActiveResults = presults->active_results;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	7c9b      	ldrb	r3, [r3, #18]
 80046a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (ActiveResults < 1)
 80046a4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d103      	bne.n	80046b4 <SetMeasurementData+0x90>

		iteration = 1;
 80046ac:	2301      	movs	r3, #1
 80046ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80046b2:	e003      	b.n	80046bc <SetMeasurementData+0x98>
	else
		iteration = ActiveResults;
 80046b4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80046b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < iteration; i++) {
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80046c2:	e048      	b.n	8004756 <SetMeasurementData+0x132>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 80046c4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80046c8:	4613      	mov	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	1a9b      	subs	r3, r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	3308      	adds	r3, #8
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	4413      	add	r3, r2
 80046d6:	61fb      	str	r3, [r7, #28]

		presults_data = &(presults->VL53L1_p_002[i]);
 80046d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046dc:	224c      	movs	r2, #76	; 0x4c
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	3310      	adds	r3, #16
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	4413      	add	r3, r2
 80046e8:	3304      	adds	r3, #4
 80046ea:	617b      	str	r3, [r7, #20]
		if (Status == VL53L1_ERROR_NONE)
 80046ec:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d114      	bne.n	800471e <SetMeasurementData+0xfa>
			Status = SetTargetData(Dev, ActiveResults,
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	7918      	ldrb	r0, [r3, #4]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	7c1b      	ldrb	r3, [r3, #16]
 80046fc:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8004700:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	9202      	str	r2, [sp, #8]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	9201      	str	r2, [sp, #4]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	4623      	mov	r3, r4
 8004710:	4602      	mov	r2, r0
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7ff fb96 	bl	8003e44 <SetTargetData>
 8004718:	4603      	mov	r3, r0
 800471a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53L1_p_006;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	7ddb      	ldrb	r3, [r3, #23]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10d      	bne.n	800474c <SetMeasurementData+0x128>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004736:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800473a:	429a      	cmp	r2, r3
 800473c:	da06      	bge.n	800474c <SetMeasurementData+0x128>
			Furthest_range = pRangeData->RangeMilliMeter;
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	8a9b      	ldrh	r3, [r3, #20]
 8004742:	857b      	strh	r3, [r7, #42]	; 0x2a
			Furthest_idx = i;
 8004744:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004748:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	for (i = 0; i < iteration; i++) {
 800474c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004750:	3301      	adds	r3, #1
 8004752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004756:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800475a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800475e:	429a      	cmp	r2, r3
 8004760:	d3b0      	bcc.n	80046c4 <SetMeasurementData+0xa0>
		}
	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	f893 2483 	ldrb.w	r2, [r3, #1155]	; 0x483
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800476e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8004772:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800477a:	e01f      	b.n	80047bc <SetMeasurementData+0x198>
		pdev->PreviousRangeMilliMeter[i] = 0;
 800477c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004782:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8004786:	330c      	adds	r3, #12
 8004788:	2100      	movs	r1, #0
 800478a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 800478e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004794:	4413      	add	r3, r2
 8004796:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800479a:	3320      	adds	r3, #32
 800479c:	22ff      	movs	r2, #255	; 0xff
 800479e:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 80047a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80047ac:	3324      	adds	r3, #36	; 0x24
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80047b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047b6:	3301      	adds	r3, #1
 80047b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80047bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d9db      	bls.n	800477c <SetMeasurementData+0x158>
	}

	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 80047c4:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d11b      	bne.n	8004804 <SetMeasurementData+0x1e0>
 80047cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d017      	beq.n	8004804 <SetMeasurementData+0x1e0>
		pRangeData = &(pMultiRangingData->RangeData[Furthest_idx]);
 80047d4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80047d8:	4613      	mov	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	3308      	adds	r3, #8
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	4413      	add	r3, r2
 80047e6:	61fb      	str	r3, [r7, #28]
		amb_idx = VL53L1_MAX_AMBIENT_DMAX_VALUES-1;
 80047e8:	2304      	movs	r3, #4
 80047ea:	76fb      	strb	r3, [r7, #27]
		CheckAndChangeDistanceMode(Dev, pRangeData,
 80047ec:	7efb      	ldrb	r3, [r7, #27]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	4413      	add	r3, r2
 80047f4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	337e      	adds	r3, #126	; 0x7e
 80047fc:	69f9      	ldr	r1, [r7, #28]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f7ff f996 	bl	8003b30 <CheckAndChangeDistanceMode>
			presults->VL53L1_p_007[amb_idx],
			&pMultiRangingData->RecommendedDistanceMode);
	}

	return Status;
 8004804:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
}
 8004808:	4618      	mov	r0, r3
 800480a:	3734      	adds	r7, #52	; 0x34
 800480c:	46bd      	mov	sp, r7
 800480e:	bd90      	pop	{r4, r7, pc}

08004810 <VL53L1_GetMultiRangingData>:

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800481a:	2300      	movs	r3, #0
 800481c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3318      	adds	r3, #24
 8004822:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800482a:	3308      	adds	r3, #8
 800482c:	60fb      	str	r3, [r7, #12]
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 800482e:	2280      	movs	r2, #128	; 0x80
 8004830:	21ff      	movs	r1, #255	; 0xff
 8004832:	6838      	ldr	r0, [r7, #0]
 8004834:	f016 f908 	bl	801aa48 <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	2102      	movs	r1, #2
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f002 fc2e 	bl	800709e <VL53L1_get_device_results>
 8004842:	4603      	mov	r3, r0
 8004844:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 8004846:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d118      	bne.n	8004880 <VL53L1_GetMultiRangingData+0x70>
		switch (presults->rd_device_state) {
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	785b      	ldrb	r3, [r3, #1]
 8004852:	2b07      	cmp	r3, #7
 8004854:	d002      	beq.n	800485c <VL53L1_GetMultiRangingData+0x4c>
 8004856:	2b08      	cmp	r3, #8
 8004858:	d004      	beq.n	8004864 <VL53L1_GetMultiRangingData+0x54>
 800485a:	e007      	b.n	800486c <VL53L1_GetMultiRangingData+0x5c>
		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pMultiRangingData->RoiStatus =
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2201      	movs	r2, #1
 8004860:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_NOT_LAST;
			break;
 8004862:	e006      	b.n	8004872 <VL53L1_GetMultiRangingData+0x62>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2202      	movs	r2, #2
 8004868:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_LAST;
			break;
 800486a:	e002      	b.n	8004872 <VL53L1_GetMultiRangingData+0x62>
		default:
			pMultiRangingData->RoiStatus =
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2200      	movs	r2, #0
 8004870:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_NOT_VALID;
		}

		Status = SetMeasurementData(Dev,
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	68f9      	ldr	r1, [r7, #12]
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff fed4 	bl	8004624 <SetMeasurementData>
 800487c:	4603      	mov	r3, r0
 800487e:	75fb      	strb	r3, [r7, #23]
					pMultiRangingData);

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004880:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b090      	sub	sp, #64	; 0x40
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]

	SUPPRESS_UNUSED_WARNING(Dev);

	LOG_FUNCTION_START("");
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004894:	2300      	movs	r3, #0
 8004896:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 800489a:	f240 3305 	movw	r3, #773	; 0x305
 800489e:	81bb      	strh	r3, [r7, #12]
	VL53L1_customer_nvm_managed_t *pc;
	VL53L1_PresetModes PresetMode;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3318      	adds	r3, #24
 80048a4:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 80048a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a8:	3348      	adds	r3, #72	; 0x48
 80048aa:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53L1_ERROR_NONE) {
 80048ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d11c      	bne.n	80048ee <VL53L1_PerformRefSpadManagement+0x62>
		PresetMode = VL53L1DevDataGet(Dev,
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80048ba:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80048be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.PresetMode);
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 80048c2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80048c6:	4619      	mov	r1, r3
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f8e3 	bl	8004a94 <VL53L1_run_ref_spad_char>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L1_ERROR_NONE)
 80048d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d108      	bne.n	80048ee <VL53L1_PerformRefSpadManagement+0x62>
			Status = VL53L1_SetPresetMode(Dev, PresetMode);
 80048dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048e0:	4619      	mov	r1, r3
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fe fb2c 	bl	8002f40 <VL53L1_SetPresetMode>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 80048ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80048f2:	f113 0f1d 	cmn.w	r3, #29
 80048f6:	d14e      	bne.n	8004996 <VL53L1_PerformRefSpadManagement+0x10a>

		Status = VL53L1_read_nvm_raw_data(Dev,
 80048f8:	f107 0310 	add.w	r3, r7, #16
 80048fc:	2206      	movs	r2, #6
 80048fe:	2128      	movs	r1, #40	; 0x28
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f00e fbf6 	bl	80130f2 <VL53L1_read_nvm_raw_data>
 8004906:	4603      	mov	r3, r0
 8004908:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53L1_ERROR_NONE)
 800490c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004910:	2b00      	cmp	r3, #0
 8004912:	d109      	bne.n	8004928 <VL53L1_PerformRefSpadManagement+0x9c>
			Status = VL53L1_WriteMulti(Dev,
 8004914:	f107 020c 	add.w	r2, r7, #12
 8004918:	2302      	movs	r3, #2
 800491a:	2114      	movs	r1, #20
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f010 fe5f 	bl	80155e0 <VL53L1_WriteMulti>
 8004922:	4603      	mov	r3, r0
 8004924:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53L1_ERROR_NONE) {
 8004928:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800492c:	2b00      	cmp	r3, #0
 800492e:	d105      	bne.n	800493c <VL53L1_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8004930:	7b3a      	ldrb	r2, [r7, #12]
 8004932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004934:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 8004936:	7b7a      	ldrb	r2, [r7, #13]
 8004938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493a:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 800493c:	f107 0310 	add.w	r3, r7, #16
 8004940:	3310      	adds	r3, #16
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (Status == VL53L1_ERROR_NONE)
 8004944:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004948:	2b00      	cmp	r3, #0
 800494a:	d108      	bne.n	800495e <VL53L1_PerformRefSpadManagement+0xd2>
			Status = VL53L1_WriteMulti(Dev,
 800494c:	2306      	movs	r3, #6
 800494e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004950:	210d      	movs	r1, #13
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f010 fe44 	bl	80155e0 <VL53L1_WriteMulti>
 8004958:	4603      	mov	r3, r0
 800495a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53L1_ERROR_NONE) {
 800495e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004962:	2b00      	cmp	r3, #0
 8004964:	d117      	bne.n	8004996 <VL53L1_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	781a      	ldrb	r2, [r3, #0]
 800496a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496c:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 800496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004970:	785a      	ldrb	r2, [r3, #1]
 8004972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004974:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004978:	789a      	ldrb	r2, [r3, #2]
 800497a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497c:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 800497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004980:	78da      	ldrb	r2, [r3, #3]
 8004982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004984:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	791a      	ldrb	r2, [r3, #4]
 800498a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498c:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	795a      	ldrb	r2, [r3, #5]
 8004992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004994:	715a      	strb	r2, [r3, #5]
	}

#endif

	LOG_FUNCTION_END(Status);
	return Status;
 8004996:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800499a:	4618      	mov	r0, r3
 800499c:	3740      	adds	r7, #64	; 0x40
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <VL53L1_SmudgeCorrectionEnable>:

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	73fb      	strb	r3, [r7, #15]
	VL53L1_Error s1 = VL53L1_ERROR_NONE;
 80049b4:	2300      	movs	r3, #0
 80049b6:	73bb      	strb	r3, [r7, #14]
	VL53L1_Error s2 = VL53L1_ERROR_NONE;
 80049b8:	2300      	movs	r3, #0
 80049ba:	737b      	strb	r3, [r7, #13]
	VL53L1_Error s3 = VL53L1_ERROR_NONE;
 80049bc:	2300      	movs	r3, #0
 80049be:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d84a      	bhi.n	8004a5c <VL53L1_SmudgeCorrectionEnable+0xb8>
 80049c6:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <VL53L1_SmudgeCorrectionEnable+0x28>)
 80049c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049cc:	080049dd 	.word	0x080049dd
 80049d0:	080049fd 	.word	0x080049fd
 80049d4:	08004a1d 	.word	0x08004a1d
 80049d8:	08004a3d 	.word	0x08004a3d
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f004 fbee 	bl	80091be <VL53L1_dynamic_xtalk_correction_disable>
 80049e2:	4603      	mov	r3, r0
 80049e4:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f004 fc17 	bl	800921a <VL53L1_dynamic_xtalk_correction_apply_disable>
 80049ec:	4603      	mov	r3, r0
 80049ee:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f004 fc40 	bl	8009276 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 80049f6:	4603      	mov	r3, r0
 80049f8:	733b      	strb	r3, [r7, #12]
		break;
 80049fa:	e032      	b.n	8004a62 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f004 fbc7 	bl	8009190 <VL53L1_dynamic_xtalk_correction_enable>
 8004a02:	4603      	mov	r3, r0
 8004a04:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f004 fbf0 	bl	80091ec <VL53L1_dynamic_xtalk_correction_apply_enable>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f004 fc30 	bl	8009276 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8004a16:	4603      	mov	r3, r0
 8004a18:	733b      	strb	r3, [r7, #12]
		break;
 8004a1a:	e022      	b.n	8004a62 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f004 fbb7 	bl	8009190 <VL53L1_dynamic_xtalk_correction_enable>
 8004a22:	4603      	mov	r3, r0
 8004a24:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f004 fbe0 	bl	80091ec <VL53L1_dynamic_xtalk_correction_apply_enable>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f004 fc09 	bl	8009248 <VL53L1_dynamic_xtalk_correction_single_apply_enable>
 8004a36:	4603      	mov	r3, r0
 8004a38:	733b      	strb	r3, [r7, #12]
		break;
 8004a3a:	e012      	b.n	8004a62 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f004 fba7 	bl	8009190 <VL53L1_dynamic_xtalk_correction_enable>
 8004a42:	4603      	mov	r3, r0
 8004a44:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f004 fbe7 	bl	800921a <VL53L1_dynamic_xtalk_correction_apply_disable>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f004 fc10 	bl	8009276 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8004a56:	4603      	mov	r3, r0
 8004a58:	733b      	strb	r3, [r7, #12]
		break;
 8004a5a:	e002      	b.n	8004a62 <VL53L1_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004a5c:	23fc      	movs	r3, #252	; 0xfc
 8004a5e:	73fb      	strb	r3, [r7, #15]
		break;
 8004a60:	bf00      	nop
	}

	if (Status == VL53L1_ERROR_NONE) {
 8004a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10d      	bne.n	8004a86 <VL53L1_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8004a6a:	7bbb      	ldrb	r3, [r7, #14]
 8004a6c:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8004a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <VL53L1_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8004a76:	7b7b      	ldrb	r3, [r7, #13]
 8004a78:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8004a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <VL53L1_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8004a82:	7b3b      	ldrb	r3, [r7, #12]
 8004a84:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop

08004a94 <VL53L1_run_ref_spad_char>:


VL53L1_Error VL53L1_run_ref_spad_char(
	VL53L1_DEV        Dev,
	VL53L1_Error     *pcal_status)
{
 8004a94:	b5b0      	push	{r4, r5, r7, lr}
 8004a96:	b08c      	sub	sp, #48	; 0x30
 8004a98:	af04      	add	r7, sp, #16
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3318      	adds	r3, #24
 8004aa6:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53L1_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8004aae:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8004ab0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d104      	bne.n	8004ac2 <VL53L1_run_ref_spad_char+0x2e>
		status = VL53L1_enable_powerforce(Dev);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f007 fc99 	bl	800c3f0 <VL53L1_enable_powerforce>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8004ac2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d117      	bne.n	8004afa <VL53L1_run_ref_spad_char+0x66>
		status =
		VL53L1_set_ref_spad_char_config(
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	7858      	ldrb	r0, [r3, #1]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	685c      	ldr	r4, [r3, #4]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	891d      	ldrh	r5, [r3, #8]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	899b      	ldrh	r3, [r3, #12]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	8952      	ldrh	r2, [r2, #10]
 8004ade:	69b9      	ldr	r1, [r7, #24]
 8004ae0:	f8b1 1322 	ldrh.w	r1, [r1, #802]	; 0x322
 8004ae4:	9102      	str	r1, [sp, #8]
 8004ae6:	9201      	str	r2, [sp, #4]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	462b      	mov	r3, r5
 8004aec:	4622      	mov	r2, r4
 8004aee:	4601      	mov	r1, r0
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f009 fbda 	bl	800e2aa <VL53L1_set_ref_spad_char_config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53L1_ERROR_NONE)
 8004afa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d107      	bne.n	8004b12 <VL53L1_run_ref_spad_char+0x7e>
		status = VL53L1_run_device_test(
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	4619      	mov	r1, r3
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f891 	bl	8004c30 <VL53L1_run_device_test>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53L1_ERROR_NONE)
 8004b12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d108      	bne.n	8004b2c <VL53L1_run_ref_spad_char+0x98>
		status =
		VL53L1_ReadMulti(
 8004b1a:	f107 020c 	add.w	r2, r7, #12
 8004b1e:	2302      	movs	r3, #2
 8004b20:	21d9      	movs	r1, #217	; 0xd9
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f010 fd92 	bl	801564c <VL53L1_ReadMulti>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53L1_ERROR_NONE) {
 8004b2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10b      	bne.n	8004b4c <VL53L1_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8004b34:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b3c:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8004b40:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b48:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
	}



	if (status == VL53L1_ERROR_NONE)
 8004b4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d108      	bne.n	8004b66 <VL53L1_run_ref_spad_char+0xd2>
		status =
			VL53L1_WriteMulti(
 8004b54:	f107 020c 	add.w	r2, r7, #12
 8004b58:	2302      	movs	r3, #2
 8004b5a:	2114      	movs	r1, #20
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f010 fd3f 	bl	80155e0 <VL53L1_WriteMulti>
 8004b62:	4603      	mov	r3, r0
 8004b64:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8004b66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d107      	bne.n	8004b7e <VL53L1_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8004b6e:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8004b76:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53L1_ERROR_NONE)
 8004b7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d108      	bne.n	8004b98 <VL53L1_run_ref_spad_char+0x104>
		status =
			VL53L1_ReadMulti(
 8004b86:	f107 020c 	add.w	r2, r7, #12
 8004b8a:	2306      	movs	r3, #6
 8004b8c:	21ac      	movs	r1, #172	; 0xac
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f010 fd5c 	bl	801564c <VL53L1_ReadMulti>
 8004b94:	4603      	mov	r3, r0
 8004b96:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53L1_ERROR_NONE)
 8004b98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d108      	bne.n	8004bb2 <VL53L1_run_ref_spad_char+0x11e>
		status =
			VL53L1_WriteMulti(
 8004ba0:	f107 020c 	add.w	r2, r7, #12
 8004ba4:	2306      	movs	r3, #6
 8004ba6:	210d      	movs	r1, #13
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f010 fd19 	bl	80155e0 <VL53L1_WriteMulti>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53L1_ERROR_NONE) {
 8004bb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d117      	bne.n	8004bea <VL53L1_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8004bba:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8004bc2:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8004bca:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8004bd2:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8004bda:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8004be2:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53L1_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53L1_ERROR_NONE) {
 8004bea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d114      	bne.n	8004c1c <VL53L1_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d00c      	beq.n	8004c16 <VL53L1_run_ref_spad_char+0x182>
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	dc0e      	bgt.n	8004c1e <VL53L1_run_ref_spad_char+0x18a>
 8004c00:	2b0e      	cmp	r3, #14
 8004c02:	d002      	beq.n	8004c0a <VL53L1_run_ref_spad_char+0x176>
 8004c04:	2b0f      	cmp	r3, #15
 8004c06:	d003      	beq.n	8004c10 <VL53L1_run_ref_spad_char+0x17c>
 8004c08:	e009      	b.n	8004c1e <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8004c0a:	23e4      	movs	r3, #228	; 0xe4
 8004c0c:	77fb      	strb	r3, [r7, #31]
			break;
 8004c0e:	e006      	b.n	8004c1e <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8004c10:	23e3      	movs	r3, #227	; 0xe3
 8004c12:	77fb      	strb	r3, [r7, #31]
			break;
 8004c14:	e003      	b.n	8004c1e <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8004c16:	23e2      	movs	r3, #226	; 0xe2
 8004c18:	77fb      	strb	r3, [r7, #31]
			break;
 8004c1a:	e000      	b.n	8004c1e <VL53L1_run_ref_spad_char+0x18a>
		}
	}
 8004c1c:	bf00      	nop



	*pcal_status = status;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	7ffa      	ldrb	r2, [r7, #31]
 8004c22:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8004c24:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3720      	adds	r7, #32
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bdb0      	pop	{r4, r5, r7, pc}

08004c30 <VL53L1_run_device_test>:


VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3318      	adds	r3, #24
 8004c44:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8004c4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d108      	bne.n	8004c64 <VL53L1_run_device_test+0x34>
		status =
			VL53L1_RdByte(
 8004c52:	f107 030b 	add.w	r3, r7, #11
 8004c56:	461a      	mov	r2, r3
 8004c58:	2130      	movs	r1, #48	; 0x30
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f010 fd88 	bl	8015770 <VL53L1_RdByte>
 8004c60:	4603      	mov	r3, r0
 8004c62:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 8004c64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d103      	bne.n	8004c74 <VL53L1_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8004c6c:	7afa      	ldrb	r2, [r7, #11]
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e


	if (status == VL53L1_ERROR_NONE)
 8004c74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <VL53L1_run_device_test+0x5a>
		status = VL53L1_start_test(
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f007 fb39 	bl	800c2f8 <VL53L1_start_test>
 8004c86:	4603      	mov	r3, r0
 8004c88:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53L1_ERROR_NONE)
 8004c8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d104      	bne.n	8004c9c <VL53L1_run_device_test+0x6c>
		status = VL53L1_wait_for_test_completion(Dev);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f00f ff5c 	bl	8014b50 <VL53L1_wait_for_test_completion>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8004c9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d108      	bne.n	8004cb6 <VL53L1_run_device_test+0x86>
		status =
			VL53L1_ReadMulti(
 8004ca4:	f107 020c 	add.w	r2, r7, #12
 8004ca8:	2302      	movs	r3, #2
 8004caa:	2189      	movs	r1, #137	; 0x89
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f010 fccd 	bl	801564c <VL53L1_ReadMulti>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8004cb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d107      	bne.n	8004cce <VL53L1_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8004cbe:	7b3a      	ldrb	r2, [r7, #12]
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		pdev->sys_results.result__report_status = comms_buffer[1];
 8004cc6:	7b7a      	ldrb	r2, [r7, #13]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
	}



	pdev->sys_results.result__range_status &=
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 8004ce0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d108      	bne.n	8004cfa <VL53L1_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53L1_ERROR_NONE)
 8004ce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d104      	bne.n	8004cfa <VL53L1_run_device_test+0xca>
			status = VL53L1_clear_interrupt(Dev);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f007 fba1 	bl	800c438 <VL53L1_clear_interrupt>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53L1_ERROR_NONE)
 8004cfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d105      	bne.n	8004d0e <VL53L1_run_device_test+0xde>
		status =
			VL53L1_start_test(
 8004d02:	2100      	movs	r1, #0
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f007 faf7 	bl	800c2f8 <VL53L1_start_test>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8004d0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <select_offset_per_vcsel>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53L1_MAX_I2C_XFER_SIZE 256

static VL53L1_Error select_offset_per_vcsel(VL53L1_LLDriverData_t *pdev,
		int16_t *poffset) {
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004d24:	2300      	movs	r3, #0
 8004d26:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	785b      	ldrb	r3, [r3, #1]
 8004d2c:	2b21      	cmp	r3, #33	; 0x21
 8004d2e:	d006      	beq.n	8004d3e <select_offset_per_vcsel+0x24>
 8004d30:	2b21      	cmp	r3, #33	; 0x21
 8004d32:	dc2b      	bgt.n	8004d8c <select_offset_per_vcsel+0x72>
 8004d34:	2b1b      	cmp	r3, #27
 8004d36:	d01c      	beq.n	8004d72 <select_offset_per_vcsel+0x58>
 8004d38:	2b1e      	cmp	r3, #30
 8004d3a:	d00d      	beq.n	8004d58 <select_offset_per_vcsel+0x3e>
 8004d3c:	e026      	b.n	8004d8c <select_offset_per_vcsel+0x72>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d44:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	; 0xc48
 8004d48:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d50:	f8b3 3c4a 	ldrh.w	r3, [r3, #3146]	; 0xc4a
 8004d54:	817b      	strh	r3, [r7, #10]
		break;
 8004d56:	e02b      	b.n	8004db0 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d5e:	f8b3 3c4c 	ldrh.w	r3, [r3, #3148]	; 0xc4c
 8004d62:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d6a:	f8b3 3c4e 	ldrh.w	r3, [r3, #3150]	; 0xc4e
 8004d6e:	817b      	strh	r3, [r7, #10]
		break;
 8004d70:	e01e      	b.n	8004db0 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d78:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8004d7c:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d84:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8004d88:	817b      	strh	r3, [r7, #10]
		break;
 8004d8a:	e011      	b.n	8004db0 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d92:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8004d96:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d9e:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8004da2:	817b      	strh	r3, [r7, #10]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004da4:	23fc      	movs	r3, #252	; 0xfc
 8004da6:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2200      	movs	r2, #0
 8004dac:	801a      	strh	r2, [r3, #0]
		break;
 8004dae:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004db6:	727b      	strb	r3, [r7, #9]
	if (status == VL53L1_ERROR_NONE)
 8004db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10b      	bne.n	8004dd8 <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8004dc0:	7a7b      	ldrb	r3, [r7, #9]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <select_offset_per_vcsel+0xb6>
 8004dca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004dce:	e001      	b.n	8004dd4 <select_offset_per_vcsel+0xba>
 8004dd0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	8013      	strh	r3, [r2, #0]

	return status;
 8004dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <vl53l1_diff_histo_stddev>:

static void vl53l1_diff_histo_stddev(VL53L1_LLDriverData_t *pdev,
	VL53L1_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8004de8:	b490      	push	{r4, r7}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	4611      	mov	r1, r2
 8004df4:	461a      	mov	r2, r3
 8004df6:	460b      	mov	r3, r1
 8004df8:	71fb      	strb	r3, [r7, #7]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004e1a:	e021      	b.n	8004e60 <vl53l1_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8004e1c:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8004e20:	79fb      	ldrb	r3, [r7, #7]
 8004e22:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	461a      	mov	r2, r3
 8004e28:	0052      	lsls	r2, r2, #1
 8004e2a:	441a      	add	r2, r3
 8004e2c:	00d3      	lsls	r3, r2, #3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	460b      	mov	r3, r1
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	440b      	add	r3, r1
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	4413      	add	r3, r2
 8004e3a:	4423      	add	r3, r4
 8004e3c:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8004e40:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8004e44:	6a3a      	ldr	r2, [r7, #32]
 8004e46:	4413      	add	r3, r2
 8004e48:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8004e4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	3206      	adds	r2, #6
 8004e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e54:	69fa      	ldr	r2, [r7, #28]
 8004e56:	4413      	add	r3, r2
 8004e58:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8004e5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004e60:	79bb      	ldrb	r3, [r7, #6]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d3d8      	bcc.n	8004e1c <vl53l1_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d047      	beq.n	8004f00 <vl53l1_diff_histo_stddev+0x118>
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d044      	beq.n	8004f00 <vl53l1_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004e7e:	e03a      	b.n	8004ef6 <vl53l1_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8004e80:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	0052      	lsls	r2, r2, #1
 8004e8e:	441a      	add	r2, r3
 8004e90:	00d3      	lsls	r3, r2, #3
 8004e92:	461a      	mov	r2, r3
 8004e94:	460b      	mov	r3, r1
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	440b      	add	r3, r1
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	4413      	add	r3, r2
 8004e9e:	4423      	add	r3, r4
 8004ea0:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8004ea4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004ea8:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004eb0:	fb03 f202 	mul.w	r2, r3, r2
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8004eba:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8004ebc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	3206      	adds	r2, #6
 8004ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004eca:	fb03 f202 	mul.w	r2, r3, r2
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	fb92 f3f3 	sdiv	r3, r2, r3
 8004ed4:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	69b9      	ldr	r1, [r7, #24]
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8004ee0:	69b8      	ldr	r0, [r7, #24]
 8004ee2:	6979      	ldr	r1, [r7, #20]
 8004ee4:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8004ee6:	fb01 f303 	mul.w	r3, r1, r3
 8004eea:	441a      	add	r2, r3
 8004eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eee:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8004ef0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ef6:	79bb      	ldrb	r3, [r7, #6]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d3bf      	bcc.n	8004e80 <vl53l1_diff_histo_stddev+0x98>
	}
}
 8004f00:	bf00      	nop
 8004f02:	3728      	adds	r7, #40	; 0x28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bc90      	pop	{r4, r7}
 8004f08:	4770      	bx	lr

08004f0a <vl53l1_histo_merge>:

static void vl53l1_histo_merge(VL53L1_DEV Dev,
		VL53L1_histogram_bin_data_t *pdata) {
 8004f0a:	b5b0      	push	{r4, r5, r7, lr}
 8004f0c:	b08c      	sub	sp, #48	; 0x30
 8004f0e:	af02      	add	r7, sp, #8
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev =
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3318      	adds	r3, #24
 8004f18:	61fb      	str	r3, [r7, #28]
			VL53L1DevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8004f3a:	2318      	movs	r3, #24
 8004f3c:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8004f3e:	f107 0314 	add.w	r3, r7, #20
 8004f42:	461a      	mov	r2, r3
 8004f44:	f248 018f 	movw	r1, #32911	; 0x808f
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f003 f9fb 	bl	8008344 <VL53L1_get_tuning_parm>
			&TuningBinRecSize);

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8004f4e:	f107 0310 	add.w	r3, r7, #16
 8004f52:	461a      	mov	r2, r3
 8004f54:	f248 018e 	movw	r1, #32910	; 0x808e
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f003 f9f3 	bl	8008344 <VL53L1_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f64:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f040 811b 	bne.w	80051a4 <vl53l1_histo_merge+0x29a>

		timing = 1 - pdata->result__stream_count % 2;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8004f88:	7efb      	ldrb	r3, [r7, #27]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	7eba      	ldrb	r2, [r7, #26]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f9a:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d008      	beq.n	8004fb4 <vl53l1_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa8:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8004fac:	3b01      	subs	r3, #1
 8004fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb2:	e004      	b.n	8004fbe <vl53l1_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8004fbe:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8004fc2:	7efb      	ldrb	r3, [r7, #27]
 8004fc4:	69f8      	ldr	r0, [r7, #28]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	0052      	lsls	r2, r2, #1
 8004fca:	441a      	add	r2, r3
 8004fcc:	0153      	lsls	r3, r2, #5
 8004fce:	461a      	mov	r2, r3
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	440b      	add	r3, r1
 8004fd6:	019b      	lsls	r3, r3, #6
 8004fd8:	4413      	add	r3, r2
 8004fda:	4403      	add	r3, r0
 8004fdc:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	dd0c      	ble.n	8005002 <vl53l1_histo_merge+0xf8>
			vl53l1_diff_histo_stddev(pdev, pdata,
 8004fe8:	7e79      	ldrb	r1, [r7, #25]
 8004fea:	7efa      	ldrb	r2, [r7, #27]
 8004fec:	f107 030c 	add.w	r3, r7, #12
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	69f8      	ldr	r0, [r7, #28]
 8004ffe:	f7ff fef3 	bl	8004de8 <vl53l1_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	429a      	cmp	r2, r3
 8005008:	db23      	blt.n	8005052 <vl53l1_histo_merge+0x148>
			memset(pdev->multi_bins_rec, 0,
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8005010:	3318      	adds	r3, #24
 8005012:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8005016:	2100      	movs	r1, #0
 8005018:	4618      	mov	r0, r3
 800501a:	f015 fd15 	bl	801aa48 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

			recom_been_reset = 1;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8005030:	7efb      	ldrb	r3, [r7, #27]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <vl53l1_histo_merge+0x13a>
				pdev->pos_before_next_recom =
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800503c:	2206      	movs	r2, #6
 800503e:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8005042:	e034      	b.n	80050ae <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800504a:	2207      	movs	r2, #7
 800504c:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8005050:	e02d      	b.n	80050ae <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005058:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800505c:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 800505e:	2300      	movs	r3, #0
 8005060:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005064:	e01e      	b.n	80050a4 <vl53l1_histo_merge+0x19a>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8005066:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 800506a:	7e39      	ldrb	r1, [r7, #24]
 800506c:	7efb      	ldrb	r3, [r7, #27]
 800506e:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	3006      	adds	r0, #6
 8005076:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 800507a:	69f8      	ldr	r0, [r7, #28]
 800507c:	461a      	mov	r2, r3
 800507e:	0052      	lsls	r2, r2, #1
 8005080:	441a      	add	r2, r3
 8005082:	00d3      	lsls	r3, r2, #3
 8005084:	461a      	mov	r2, r3
 8005086:	460b      	mov	r3, r1
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	440b      	add	r3, r1
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	4413      	add	r3, r2
 8005090:	442b      	add	r3, r5
 8005092:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8005096:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 800509a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800509e:	3301      	adds	r3, #1
 80050a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80050a4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80050a8:	7ebb      	ldrb	r3, [r7, #26]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d3db      	bcc.n	8005066 <vl53l1_histo_merge+0x15c>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b4:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80050b8:	461a      	mov	r2, r3
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	3b01      	subs	r3, #1
 80050be:	429a      	cmp	r2, r3
 80050c0:	d109      	bne.n	80050d6 <vl53l1_histo_merge+0x1cc>
 80050c2:	7efb      	ldrb	r3, [r7, #27]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d106      	bne.n	80050d6 <vl53l1_histo_merge+0x1cc>
			pdev->bin_rec_pos = 0;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
 80050d4:	e00e      	b.n	80050f4 <vl53l1_histo_merge+0x1ea>
		else if (timing == 1)
 80050d6:	7efb      	ldrb	r3, [r7, #27]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d10b      	bne.n	80050f4 <vl53l1_histo_merge+0x1ea>
			pdev->bin_rec_pos++;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e2:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80050e6:	3301      	adds	r3, #1
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f0:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 80050f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d102      	bne.n	8005102 <vl53l1_histo_merge+0x1f8>
 80050fc:	7efb      	ldrb	r3, [r7, #27]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d069      	beq.n	80051d6 <vl53l1_histo_merge+0x2cc>
			 (pdev->pos_before_next_recom == 0)) {
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005108:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 800510c:	2b00      	cmp	r3, #0
 800510e:	d162      	bne.n	80051d6 <vl53l1_histo_merge+0x2cc>

			for (bin = 0; bin < BuffSize; bin++)
 8005110:	2300      	movs	r3, #0
 8005112:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005114:	e008      	b.n	8005128 <vl53l1_histo_merge+0x21e>
				pdata->bin_data[bin] = 0;
 8005116:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	3206      	adds	r2, #6
 800511c:	2100      	movs	r1, #0
 800511e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8005122:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005124:	3301      	adds	r3, #1
 8005126:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005128:	7ebb      	ldrb	r3, [r7, #26]
 800512a:	b29b      	uxth	r3, r3
 800512c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800512e:	429a      	cmp	r2, r3
 8005130:	d3f1      	bcc.n	8005116 <vl53l1_histo_merge+0x20c>

			for (bin = 0; bin < BuffSize; bin++)
 8005132:	2300      	movs	r3, #0
 8005134:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005136:	e02f      	b.n	8005198 <vl53l1_histo_merge+0x28e>
				for (i = 0; i < TuningBinRecSize; i++)
 8005138:	2300      	movs	r3, #0
 800513a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800513e:	e023      	b.n	8005188 <vl53l1_histo_merge+0x27e>
					pdata->bin_data[bin] +=
 8005140:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	3206      	adds	r2, #6
 8005146:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 800514a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800514e:	7efb      	ldrb	r3, [r7, #27]
 8005150:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8005152:	69fc      	ldr	r4, [r7, #28]
 8005154:	461a      	mov	r2, r3
 8005156:	0052      	lsls	r2, r2, #1
 8005158:	441a      	add	r2, r3
 800515a:	00d3      	lsls	r3, r2, #3
 800515c:	461a      	mov	r2, r3
 800515e:	460b      	mov	r3, r1
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	440b      	add	r3, r1
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	4413      	add	r3, r2
 8005168:	442b      	add	r3, r5
 800516a:	f203 7316 	addw	r3, r3, #1814	; 0x716
 800516e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8005172:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005174:	18c1      	adds	r1, r0, r3
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	3206      	adds	r2, #6
 800517a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 800517e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005182:	3301      	adds	r3, #1
 8005184:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005188:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	429a      	cmp	r2, r3
 8005190:	dbd6      	blt.n	8005140 <vl53l1_histo_merge+0x236>
			for (bin = 0; bin < BuffSize; bin++)
 8005192:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005194:	3301      	adds	r3, #1
 8005196:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005198:	7ebb      	ldrb	r3, [r7, #26]
 800519a:	b29b      	uxth	r3, r3
 800519c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800519e:	429a      	cmp	r2, r3
 80051a0:	d3ca      	bcc.n	8005138 <vl53l1_histo_merge+0x22e>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 80051a2:	e018      	b.n	80051d6 <vl53l1_histo_merge+0x2cc>
		pdev->pos_before_next_recom--;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051aa:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b8:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
		if (pdev->pos_before_next_recom == 255)
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c2:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 80051c6:	2bff      	cmp	r3, #255	; 0xff
 80051c8:	d105      	bne.n	80051d6 <vl53l1_histo_merge+0x2cc>
			pdev->pos_before_next_recom = 0;
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
}
 80051d6:	bf00      	nop
 80051d8:	3728      	adds	r7, #40	; 0x28
 80051da:	46bd      	mov	sp, r7
 80051dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080051e0 <VL53L1_load_patch>:

VL53L1_Error VL53L1_load_patch(
	VL53L1_DEV Dev) {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b0c6      	sub	sp, #280	; 0x118
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80051ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80051ee:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80051f0:	2300      	movs	r3, #0
 80051f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 80051f6:	2300      	movs	r3, #0
 80051f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80051fc:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10b      	bne.n	800521c <VL53L1_load_patch+0x3c>
		status = VL53L1_WrByte(Dev,
 8005204:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005208:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800520c:	2200      	movs	r2, #0
 800520e:	2185      	movs	r1, #133	; 0x85
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	f010 fa51 	bl	80156b8 <VL53L1_WrByte>
 8005216:	4603      	mov	r3, r0
 8005218:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 800521c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8005220:	2b00      	cmp	r3, #0
 8005222:	d106      	bne.n	8005232 <VL53L1_load_patch+0x52>
		VL53L1_enable_powerforce(Dev);
 8005224:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005228:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	f007 f8df 	bl	800c3f0 <VL53L1_enable_powerforce>

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 8005232:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8005236:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800523a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800523e:	f248 018c 	movw	r1, #32908	; 0x808c
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	f003 f87e 	bl	8008344 <VL53L1_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8005248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800524c:	2b03      	cmp	r3, #3
 800524e:	d81b      	bhi.n	8005288 <VL53L1_load_patch+0xa8>
 8005250:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <VL53L1_load_patch+0x78>)
 8005252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005256:	bf00      	nop
 8005258:	08005269 	.word	0x08005269
 800525c:	08005271 	.word	0x08005271
 8005260:	08005279 	.word	0x08005279
 8005264:	08005281 	.word	0x08005281
	case 0:
		patch_power = 0x00;
 8005268:	2300      	movs	r3, #0
 800526a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800526e:	e00e      	b.n	800528e <VL53L1_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 8005270:	2310      	movs	r3, #16
 8005272:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8005276:	e00a      	b.n	800528e <VL53L1_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 8005278:	2320      	movs	r3, #32
 800527a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800527e:	e006      	b.n	800528e <VL53L1_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 8005280:	2340      	movs	r3, #64	; 0x40
 8005282:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8005286:	e002      	b.n	800528e <VL53L1_load_patch+0xae>
	default:
		patch_power = 0x00;
 8005288:	2300      	movs	r3, #0
 800528a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53L1_ERROR_NONE) {
 800528e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8005292:	2b00      	cmp	r3, #0
 8005294:	d134      	bne.n	8005300 <VL53L1_load_patch+0x120>

		comms_buffer[0] = 0x29;
 8005296:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800529a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800529e:	2229      	movs	r2, #41	; 0x29
 80052a0:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80052a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80052a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052aa:	22c9      	movs	r2, #201	; 0xc9
 80052ac:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 80052ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80052b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052b6:	220e      	movs	r2, #14
 80052b8:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 80052ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80052be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052c2:	2240      	movs	r2, #64	; 0x40
 80052c4:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 80052c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80052ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052ce:	2228      	movs	r2, #40	; 0x28
 80052d0:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 80052d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80052dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052e0:	715a      	strb	r2, [r3, #5]

		status = VL53L1_WriteMulti(Dev,
 80052e2:	f107 020c 	add.w	r2, r7, #12
 80052e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80052ea:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80052ee:	2306      	movs	r3, #6
 80052f0:	f240 4176 	movw	r1, #1142	; 0x476
 80052f4:	6800      	ldr	r0, [r0, #0]
 80052f6:	f010 f973 	bl	80155e0 <VL53L1_WriteMulti>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8005300:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8005304:	2b00      	cmp	r3, #0
 8005306:	d132      	bne.n	800536e <VL53L1_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8005308:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800530c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005310:	2203      	movs	r2, #3
 8005312:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8005314:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005318:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800531c:	226d      	movs	r2, #109	; 0x6d
 800531e:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8005320:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005324:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005328:	2203      	movs	r2, #3
 800532a:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800532c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005330:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005334:	226f      	movs	r2, #111	; 0x6f
 8005336:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8005338:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800533c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005340:	2207      	movs	r2, #7
 8005342:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8005344:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005348:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800534c:	2229      	movs	r2, #41	; 0x29
 800534e:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(Dev,
 8005350:	f107 020c 	add.w	r2, r7, #12
 8005354:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005358:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800535c:	2306      	movs	r3, #6
 800535e:	f240 4196 	movw	r1, #1174	; 0x496
 8005362:	6800      	ldr	r0, [r0, #0]
 8005364:	f010 f93c 	bl	80155e0 <VL53L1_WriteMulti>
 8005368:	4603      	mov	r3, r0
 800536a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 800536e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8005372:	2b00      	cmp	r3, #0
 8005374:	d11a      	bne.n	80053ac <VL53L1_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 8005376:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800537a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800537e:	2200      	movs	r2, #0
 8005380:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8005382:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005386:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800538a:	2207      	movs	r2, #7
 800538c:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 800538e:	f107 020c 	add.w	r2, r7, #12
 8005392:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005396:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800539a:	2302      	movs	r3, #2
 800539c:	f240 4172 	movw	r1, #1138	; 0x472
 80053a0:	6800      	ldr	r0, [r0, #0]
 80053a2:	f010 f91d 	bl	80155e0 <VL53L1_WriteMulti>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE) {
 80053ac:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d11a      	bne.n	80053ea <VL53L1_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 80053b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80053b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80053c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80053c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053c8:	2207      	movs	r2, #7
 80053ca:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 80053cc:	f107 020c 	add.w	r2, r7, #12
 80053d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80053d4:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80053d8:	2302      	movs	r3, #2
 80053da:	f240 4174 	movw	r1, #1140	; 0x474
 80053de:	6800      	ldr	r0, [r0, #0]
 80053e0:	f010 f8fe 	bl	80155e0 <VL53L1_WriteMulti>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE)
 80053ea:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10c      	bne.n	800540c <VL53L1_load_patch+0x22c>
		status = VL53L1_WrByte(Dev,
 80053f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80053f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80053fa:	2201      	movs	r2, #1
 80053fc:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	f010 f959 	bl	80156b8 <VL53L1_WrByte>
 8005406:	4603      	mov	r3, r0
 8005408:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__CTRL, 0x01);

	if (status == VL53L1_ERROR_NONE)
 800540c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10b      	bne.n	800542c <VL53L1_load_patch+0x24c>
		status = VL53L1_WrByte(Dev,
 8005414:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005418:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800541c:	2201      	movs	r2, #1
 800541e:	2185      	movs	r1, #133	; 0x85
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	f010 f949 	bl	80156b8 <VL53L1_WrByte>
 8005426:	4603      	mov	r3, r0
 8005428:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800542c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8005430:	4618      	mov	r0, r3
 8005432:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop

0800543c <VL53L1_unload_patch>:

VL53L1_Error VL53L1_unload_patch(
	VL53L1_DEV Dev) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005444:	2300      	movs	r3, #0
 8005446:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8005448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d106      	bne.n	800545e <VL53L1_unload_patch+0x22>
		status = VL53L1_WrByte(Dev,
 8005450:	2200      	movs	r2, #0
 8005452:	2185      	movs	r1, #133	; 0x85
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f010 f92f 	bl	80156b8 <VL53L1_WrByte>
 800545a:	4603      	mov	r3, r0
 800545c:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 800545e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d102      	bne.n	800546c <VL53L1_unload_patch+0x30>
		VL53L1_disable_powerforce(Dev);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f006 ffd4 	bl	800c414 <VL53L1_disable_powerforce>

	if (status == VL53L1_ERROR_NONE)
 800546c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d107      	bne.n	8005484 <VL53L1_unload_patch+0x48>
		status = VL53L1_WrByte(Dev,
 8005474:	2200      	movs	r2, #0
 8005476:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f010 f91c 	bl	80156b8 <VL53L1_WrByte>
 8005480:	4603      	mov	r3, r0
 8005482:	73fb      	strb	r3, [r7, #15]
		VL53L1_PATCH__CTRL, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8005484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d106      	bne.n	800549a <VL53L1_unload_patch+0x5e>
		status = VL53L1_WrByte(Dev,
 800548c:	2201      	movs	r2, #1
 800548e:	2185      	movs	r1, #133	; 0x85
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f010 f911 	bl	80156b8 <VL53L1_WrByte>
 8005496:	4603      	mov	r3, r0
 8005498:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800549a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 80054a6:	b5b0      	push	{r4, r5, r7, lr}
 80054a8:	b08a      	sub	sp, #40	; 0x28
 80054aa:	af04      	add	r7, sp, #16
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	460b      	mov	r3, r1
 80054b0:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80054b2:	2300      	movs	r3, #0
 80054b4:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t    *pdev =
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3318      	adds	r3, #24
 80054ba:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80054c2:	3308      	adds	r3, #8
 80054c4:	60fb      	str	r3, [r7, #12]



	VL53L1_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 80054c6:	2300      	movs	r3, #0
 80054c8:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53L1_init_ll_driver_state(
 80054ca:	2162      	movs	r1, #98	; 0x62
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f006 f810 	bl	800b4f2 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2204      	movs	r2, #4
 80054d6:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2210      	movs	r2, #16
 80054e2:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80054ee:	2300      	movs	r3, #0
 80054f0:	75bb      	strb	r3, [r7, #22]
 80054f2:	e01b      	b.n	800552c <VL53L1_data_init+0x86>
		pobjects = &(pres->zone_results.VL53L1_p_002[i]);
 80054f4:	7dba      	ldrb	r2, [r7, #22]
 80054f6:	4613      	mov	r3, r2
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4413      	add	r3, r2
 8005506:	3308      	adds	r3, #8
 8005508:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53L1_p_020 = 0;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2200      	movs	r2, #0
 800550e:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53L1_p_021  = 0;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2200      	movs	r2, #0
 8005514:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53L1_p_014          = 0;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2200      	movs	r2, #0
 800551a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8005526:	7dbb      	ldrb	r3, [r7, #22]
 8005528:	3301      	adds	r3, #1
 800552a:	75bb      	strb	r3, [r7, #22]
 800552c:	7dbb      	ldrb	r3, [r7, #22]
 800552e:	2b0f      	cmp	r3, #15
 8005530:	d9e0      	bls.n	80054f4 <VL53L1_data_init+0x4e>
				VL53L1_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2210      	movs	r2, #16
 8005536:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2210      	movs	r2, #16
 8005546:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8005552:	2300      	movs	r3, #0
 8005554:	75bb      	strb	r3, [r7, #22]
 8005556:	e039      	b.n	80055cc <VL53L1_data_init+0x126>
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 8005558:	7dba      	ldrb	r2, [r7, #22]
 800555a:	68f9      	ldr	r1, [r7, #12]
 800555c:	4613      	mov	r3, r2
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 800556e:	7dba      	ldrb	r2, [r7, #22]
 8005570:	68f9      	ldr	r1, [r7, #12]
 8005572:	4613      	mov	r3, r2
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	1a9b      	subs	r3, r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 8005584:	7dba      	ldrb	r2, [r7, #22]
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	4613      	mov	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].median_range_mm = 0;
 800559a:	7dba      	ldrb	r2, [r7, #22]
 800559c:	68f9      	ldr	r1, [r7, #12]
 800559e:	4613      	mov	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	440b      	add	r3, r1
 80055a8:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 80055b0:	7dba      	ldrb	r2, [r7, #22]
 80055b2:	68f9      	ldr	r1, [r7, #12]
 80055b4:	4613      	mov	r3, r2
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	1a9b      	subs	r3, r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80055c6:	7dbb      	ldrb	r3, [r7, #22]
 80055c8:	3301      	adds	r3, #1
 80055ca:	75bb      	strb	r3, [r7, #22]
 80055cc:	7dbb      	ldrb	r3, [r7, #22]
 80055ce:	2b0f      	cmp	r3, #15
 80055d0:	d9c2      	bls.n	8005558 <VL53L1_data_init+0xb2>
	}

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	2201      	movs	r2, #1
 80055dc:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = VL53L1_DEVICEZONEPRESET_NONE;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2200      	movs	r2, #0
 80055e2:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	2200      	movs	r2, #0
 80055e8:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2201      	movs	r2, #1
 80055ee:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	2201      	movs	r2, #1
 80055f4:	715a      	strb	r2, [r3, #5]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	2201      	movs	r2, #1
 80055fa:	719a      	strb	r2, [r3, #6]
		VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005602:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800560a:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8005612:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	2264      	movs	r2, #100	; 0x64
 8005618:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005620:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005630:	2203      	movs	r2, #3
 8005632:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	pdev->offset_results.active_results = 0;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327



	pdev->gain_cal.standard_ranging_gain_factor =
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f240 72db 	movw	r2, #2011	; 0x7db
 8005648:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8005652:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53L1_init_version(Dev);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f005 ff2e 	bl	800b4b8 <VL53L1_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8005662:	3318      	adds	r3, #24
 8005664:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8005668:	2100      	movs	r1, #0
 800566a:	4618      	mov	r0, r3
 800566c:	f015 f9ec 	bl	801aa48 <memset>
	pdev->bin_rec_pos = 0;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
	pdev->pos_before_next_recom = 0;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55



	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d008      	beq.n	80056a0 <VL53L1_data_init+0x1fa>
 800568e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d104      	bne.n	80056a0 <VL53L1_data_init+0x1fa>
		status = VL53L1_read_p2p_data(Dev);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f8b8 	bl	800580c <VL53L1_read_p2p_data>
 800569c:	4603      	mov	r3, r0
 800569e:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 80056a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d107      	bne.n	80056b8 <VL53L1_data_init+0x212>
		status = VL53L1_init_refspadchar_config_struct(
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80056ae:	4618      	mov	r0, r3
 80056b0:	f003 fdf8 	bl	80092a4 <VL53L1_init_refspadchar_config_struct>
 80056b4:	4603      	mov	r3, r0
 80056b6:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53L1_ERROR_NONE)
 80056b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d107      	bne.n	80056d0 <VL53L1_data_init+0x22a>
		status = VL53L1_init_ssc_config_struct(
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80056c6:	4618      	mov	r0, r3
 80056c8:	f003 fe10 	bl	80092ec <VL53L1_init_ssc_config_struct>
 80056cc:	4603      	mov	r3, r0
 80056ce:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53L1_ERROR_NONE)
 80056d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10b      	bne.n	80056f0 <VL53L1_data_init+0x24a>
		status = VL53L1_init_xtalk_config_struct(
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80056e4:	4619      	mov	r1, r3
 80056e6:	4610      	mov	r0, r2
 80056e8:	f003 fe21 	bl	800932e <VL53L1_init_xtalk_config_struct>
 80056ec:	4603      	mov	r3, r0
 80056ee:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53L1_ERROR_NONE)
 80056f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d107      	bne.n	8005708 <VL53L1_data_init+0x262>
		status = VL53L1_init_xtalk_extract_config_struct(
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80056fe:	4618      	mov	r0, r3
 8005700:	f003 fe89 	bl	8009416 <VL53L1_init_xtalk_extract_config_struct>
 8005704:	4603      	mov	r3, r0
 8005706:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53L1_ERROR_NONE)
 8005708:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d107      	bne.n	8005720 <VL53L1_data_init+0x27a>
		status = VL53L1_init_offset_cal_config_struct(
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8005716:	4618      	mov	r0, r3
 8005718:	f003 feac 	bl	8009474 <VL53L1_init_offset_cal_config_struct>
 800571c:	4603      	mov	r3, r0
 800571e:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8005720:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d107      	bne.n	8005738 <VL53L1_data_init+0x292>
		status = VL53L1_init_zone_cal_config_struct(
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800572e:	4618      	mov	r0, r3
 8005730:	f003 fec7 	bl	80094c2 <VL53L1_init_zone_cal_config_struct>
 8005734:	4603      	mov	r3, r0
 8005736:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8005738:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10b      	bne.n	8005758 <VL53L1_data_init+0x2b2>
		status = VL53L1_init_hist_post_process_config_struct(
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800574c:	4619      	mov	r1, r3
 800574e:	4610      	mov	r0, r2
 8005750:	f003 fedb 	bl	800950a <VL53L1_init_hist_post_process_config_struct>
 8005754:	4603      	mov	r3, r0
 8005756:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53L1_ERROR_NONE)
 8005758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d107      	bne.n	8005770 <VL53L1_data_init+0x2ca>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8005766:	4618      	mov	r0, r3
 8005768:	f004 f8f6 	bl	8009958 <VL53L1_init_hist_gen3_dmax_config_struct>
 800576c:	4603      	mov	r3, r0
 800576e:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53L1_ERROR_NONE)
 8005770:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d107      	bne.n	8005788 <VL53L1_data_init+0x2e2>
		status = VL53L1_init_tuning_parm_storage_struct(
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800577e:	4618      	mov	r0, r3
 8005780:	f003 ff32 	bl	80095e8 <VL53L1_init_tuning_parm_storage_struct>
 8005784:	4603      	mov	r3, r0
 8005786:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53L1_ERROR_NONE)
 8005788:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d116      	bne.n	80057be <VL53L1_data_init+0x318>
		status = VL53L1_set_preset_mode(
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	7858      	ldrb	r0, [r3, #1]
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	8b1c      	ldrh	r4, [r3, #24]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	689d      	ldr	r5, [r3, #8]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	6912      	ldr	r2, [r2, #16]
 80057a4:	6939      	ldr	r1, [r7, #16]
 80057a6:	6949      	ldr	r1, [r1, #20]
 80057a8:	9102      	str	r1, [sp, #8]
 80057aa:	9201      	str	r2, [sp, #4]
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	462b      	mov	r3, r5
 80057b0:	4622      	mov	r2, r4
 80057b2:	4601      	mov	r1, r0
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fc8f 	bl	80060d8 <VL53L1_set_preset_mode>
 80057ba:	4603      	mov	r3, r0
 80057bc:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53L1_init_histogram_bin_data_struct(
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80057c4:	461a      	mov	r2, r3
 80057c6:	2118      	movs	r1, #24
 80057c8:	2000      	movs	r0, #0
 80057ca:	f00a fa90 	bl	800fcee <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53L1_init_histogram_bin_data_struct(
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80057d4:	461a      	mov	r2, r3
 80057d6:	2118      	movs	r1, #24
 80057d8:	2000      	movs	r0, #0
 80057da:	f00a fa88 	bl	800fcee <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53L1_init_xtalk_bin_data_struct(
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 80057e4:	461a      	mov	r2, r3
 80057e6:	210c      	movs	r1, #12
 80057e8:	2000      	movs	r0, #0
 80057ea:	f006 fc26 	bl	800c03a <VL53L1_init_xtalk_bin_data_struct>
			VL53L1_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53L1_xtalk_cal_data_init(
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f009 fcd2 	bl	800f198 <VL53L1_xtalk_cal_data_init>
			Dev
			);



	VL53L1_dynamic_xtalk_correction_data_init(
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f009 fbd1 	bl	800ef9c <VL53L1_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53L1_low_power_auto_data_init(
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f009 fcf7 	bl	800f1ee <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8005800:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bdb0      	pop	{r4, r5, r7, pc}

0800580c <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800580c:	b590      	push	{r4, r7, lr}
 800580e:	b091      	sub	sp, #68	; 0x44
 8005810:	af04      	add	r7, sp, #16
 8005812:	6078      	str	r0, [r7, #4]



	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8005814:	2300      	movs	r3, #0
 8005816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3318      	adds	r3, #24
 800581e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8005820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005822:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	3348      	adds	r3, #72	; 0x48
 800582c:	623b      	str	r3, [r7, #32]
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	339c      	adds	r3, #156	; 0x9c
 8005832:	61fb      	str	r3, [r7, #28]

	VL53L1_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8005834:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005838:	2b00      	cmp	r3, #0
 800583a:	d109      	bne.n	8005850 <VL53L1_read_p2p_data+0x44>
		status = VL53L1_get_static_nvm_managed(
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f00d fdd1 	bl	80133ec <VL53L1_get_static_nvm_managed>
 800584a:	4603      	mov	r3, r0
 800584c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8005850:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005854:	2b00      	cmp	r3, #0
 8005856:	d108      	bne.n	800586a <VL53L1_read_p2p_data+0x5e>
		status = VL53L1_get_customer_nvm_managed(
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	3348      	adds	r3, #72	; 0x48
 800585c:	4619      	mov	r1, r3
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f00d ff02 	bl	8013668 <VL53L1_get_customer_nvm_managed>
 8005864:	4603      	mov	r3, r0
 8005866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800586a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800586e:	2b00      	cmp	r3, #0
 8005870:	d117      	bne.n	80058a2 <VL53L1_read_p2p_data+0x96>

		status = VL53L1_get_nvm_copy_data(
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	f203 33d6 	addw	r3, r3, #982	; 0x3d6
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f00e fdda 	bl	8014434 <VL53L1_get_nvm_copy_data>
 8005880:	4603      	mov	r3, r0
 8005882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53L1_ERROR_NONE)
 8005886:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800588a:	2b00      	cmp	r3, #0
 800588c:	d109      	bne.n	80058a2 <VL53L1_read_p2p_data+0x96>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8005894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005896:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800589a:	4619      	mov	r1, r3
 800589c:	4610      	mov	r0, r2
 800589e:	f006 f921 	bl	800bae4 <VL53L1_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53L1_ERROR_NONE) {
 80058a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10e      	bne.n	80058c8 <VL53L1_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	895b      	ldrh	r3, [r3, #10]
 80058ae:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53L1_ERROR_NONE)
 80058c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d108      	bne.n	80058e2 <VL53L1_read_p2p_data+0xd6>
		status =
			VL53L1_read_nvm_optical_centre(
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	33c0      	adds	r3, #192	; 0xc0
 80058d4:	4619      	mov	r1, r3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f00d fc3c 	bl	8013154 <VL53L1_read_nvm_optical_centre>
 80058dc:	4603      	mov	r3, r0
 80058de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53L1_ERROR_NONE)
 80058e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d108      	bne.n	80058fc <VL53L1_read_p2p_data+0xf0>
		status =
			VL53L1_read_nvm_cal_peak_rate_map(
 80058ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ec:	3360      	adds	r3, #96	; 0x60
 80058ee:	4619      	mov	r1, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f00d fc52 	bl	801319a <VL53L1_read_nvm_cal_peak_rate_map>
 80058f6:	4603      	mov	r3, r0
 80058f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53L1_ERROR_NONE) {
 80058fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005900:	2b00      	cmp	r3, #0
 8005902:	d12d      	bne.n	8005960 <VL53L1_read_p2p_data+0x154>

		status =
			VL53L1_read_nvm_additional_offset_cal_data(
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	339c      	adds	r3, #156	; 0x9c
 8005908:	4619      	mov	r1, r3
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f00d fc6b 	bl	80131e6 <VL53L1_read_nvm_additional_offset_cal_data>
 8005910:	4603      	mov	r3, r0
 8005912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	889b      	ldrh	r3, [r3, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d120      	bne.n	8005960 <VL53L1_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8005922:	2b00      	cmp	r3, #0
 8005924:	d11c      	bne.n	8005960 <VL53L1_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	2280      	movs	r2, #128	; 0x80
 800592a:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005932:	80da      	strh	r2, [r3, #6]



			VL53L1_calc_mm_effective_spads(
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	f893 0406 	ldrb.w	r0, [r3, #1030]	; 0x406
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	f893 4407 	ldrb.w	r4, [r3, #1031]	; 0x407
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	69f9      	ldr	r1, [r7, #28]
 800594a:	3102      	adds	r1, #2
 800594c:	9103      	str	r1, [sp, #12]
 800594e:	9202      	str	r2, [sp, #8]
 8005950:	2238      	movs	r2, #56	; 0x38
 8005952:	9201      	str	r2, [sp, #4]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	23ff      	movs	r3, #255	; 0xff
 8005958:	22c7      	movs	r2, #199	; 0xc7
 800595a:	4621      	mov	r1, r4
 800595c:	f008 f934 	bl	800dbc8 <VL53L1_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53L1_ERROR_NONE) {
 8005960:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005964:	2b00      	cmp	r3, #0
 8005966:	d12f      	bne.n	80059c8 <VL53L1_read_p2p_data+0x1bc>

		status =
			VL53L1_read_nvm_fmt_range_results_data(
 8005968:	f107 030c 	add.w	r3, r7, #12
 800596c:	461a      	mov	r2, r3
 800596e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f00d fc5a 	bl	801322c <VL53L1_read_nvm_fmt_range_results_data>
 8005978:	4603      	mov	r3, r0
 800597a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53L1_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53L1_ERROR_NONE) {
 800597e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005982:	2b00      	cmp	r3, #0
 8005984:	d120      	bne.n	80059c8 <VL53L1_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8005986:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 800598e:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8005996:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 800599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d006      	beq.n	80059b6 <VL53L1_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059aa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 80059b4:	e003      	b.n	80059be <VL53L1_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	2214      	movs	r2, #20
 80059ba:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059c4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53L1_ERROR_NONE)
 80059c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10b      	bne.n	80059e8 <VL53L1_read_p2p_data+0x1dc>
		status =
			VL53L1_RdWord(
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80059d6:	3308      	adds	r3, #8
 80059d8:	461a      	mov	r2, r3
 80059da:	21de      	movs	r1, #222	; 0xde
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f00f fefb 	bl	80157d8 <VL53L1_RdWord>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L1_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 80059ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f2:	d204      	bcs.n	80059fe <VL53L1_read_p2p_data+0x1f2>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 80059fa:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	}



	if (status == VL53L1_ERROR_NONE)
 80059fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d108      	bne.n	8005a18 <VL53L1_read_p2p_data+0x20c>
		status =
			VL53L1_get_mode_mitigation_roi(
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	33bc      	adds	r3, #188	; 0xbc
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f97d 	bl	8005d0c <VL53L1_get_mode_mitigation_roi>
 8005a12:	4603      	mov	r3, r0
 8005a14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d114      	bne.n	8005a4c <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10f      	bne.n	8005a4c <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8005a4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3734      	adds	r7, #52	; 0x34
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd90      	pop	{r4, r7, pc}

08005a58 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3318      	adds	r3, #24
 8005a6a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a72:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <VL53L1_set_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005a7a:	23f1      	movs	r3, #241	; 0xf1
 8005a7c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8005a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10e      	bne.n	8005aa4 <VL53L1_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a92:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8005a96:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	}

	LOG_FUNCTION_END(status);

	return status;
 8005aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3318      	adds	r3, #24
 8005ac6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ace:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <VL53L1_get_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005ad6:	23f1      	movs	r3, #241	; 0xf1
 8005ad8:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8005ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10b      	bne.n	8005afa <VL53L1_get_inter_measurement_period_ms+0x46>
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005aee:	f8b2 23a8 	ldrh.w	r2, [r2, #936]	; 0x3a8
			pdev->tim_cfg.system__intermeasurement_period /
 8005af2:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms =
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8005afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b088      	sub	sp, #32
 8005b0e:	af02      	add	r7, sp, #8
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	607a      	str	r2, [r7, #4]
 8005b16:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3318      	adds	r3, #24
 8005b20:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <VL53L1_set_timeouts_us+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005b2c:	23f1      	movs	r3, #241	; 0xf1
 8005b2e:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8005b30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d11b      	bne.n	8005b70 <VL53L1_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	611a      	str	r2, [r3, #16]

		status =
		VL53L1_calc_timeout_register_values(
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f8b3 1322 	ldrh.w	r1, [r3, #802]	; 0x322
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f203 3362 	addw	r3, r3, #866	; 0x362
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	f502 725e 	add.w	r2, r2, #888	; 0x378
 8005b5c:	9201      	str	r2, [sp, #4]
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	460b      	mov	r3, r1
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	68b8      	ldr	r0, [r7, #8]
 8005b68:	f006 fe0b 	bl	800c782 <VL53L1_calc_timeout_register_values>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8005b70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b088      	sub	sp, #32
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3318      	adds	r3, #24
 8005b92:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <VL53L1_get_timeouts_us+0x2e>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005ba6:	23f1      	movs	r3, #241	; 0xf1
 8005ba8:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8005baa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d14a      	bne.n	8005c48 <VL53L1_get_timeouts_us+0xcc>


		macro_period_us =
			VL53L1_calc_macro_period_us(
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	f006 fc56 	bl	800c472 <VL53L1_calc_macro_period_us>
 8005bc6:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
			VL53L1_calc_timeout_us(
 8005bce:	6979      	ldr	r1, [r7, #20]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f006 fd14 	bl	800c5fe <VL53L1_calc_timeout_us>
 8005bd6:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
		timeout_encoded =
 8005be2:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8005be4:	8a7b      	ldrh	r3, [r7, #18]
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 8005bf0:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8005bf2:	4413      	add	r3, r2
 8005bf4:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8005bf6:	8a7b      	ldrh	r3, [r7, #18]
 8005bf8:	6979      	ldr	r1, [r7, #20]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f006 fd66 	bl	800c6cc <VL53L1_calc_decoded_timeout_us>
 8005c00:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
		timeout_encoded =
 8005c0c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8005c0e:	8a7b      	ldrh	r3, [r7, #18]
 8005c10:	021b      	lsls	r3, r3, #8
 8005c12:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f893 337d 	ldrb.w	r3, [r3, #893]	; 0x37d
 8005c1a:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8005c1c:	4413      	add	r3, r2
 8005c1e:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8005c20:	8a7b      	ldrh	r3, [r7, #18]
 8005c22:	6979      	ldr	r1, [r7, #20]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f006 fd51 	bl	800c6cc <VL53L1_calc_decoded_timeout_us>
 8005c2a:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8005c48:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3720      	adds	r7, #32
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005c62:	2300      	movs	r3, #0
 8005c64:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3318      	adds	r3, #24
 8005c6a:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8005c70:	7afb      	ldrb	r3, [r7, #11]
 8005c72:	2b07      	cmp	r3, #7
 8005c74:	d81c      	bhi.n	8005cb0 <VL53L1_get_sequence_config_bit+0x5c>

		if (bit_id > 0)
 8005c76:	7afb      	ldrb	r3, [r7, #11]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d004      	beq.n	8005c86 <VL53L1_get_sequence_config_bit+0x32>
			bit_mask  = 0x01 << bit_id;
 8005c7c:	7afb      	ldrb	r3, [r7, #11]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	75bb      	strb	r3, [r7, #22]

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f893 23a1 	ldrb.w	r2, [r3, #929]	; 0x3a1
		*pvalue =
 8005c8c:	7dbb      	ldrb	r3, [r7, #22]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0)
 8005c96:	7afb      	ldrb	r3, [r7, #11]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00b      	beq.n	8005cb4 <VL53L1_get_sequence_config_bit+0x60>
			*pvalue  = *pvalue >> bit_id;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	7afb      	ldrb	r3, [r7, #11]
 8005ca4:	fa42 f303 	asr.w	r3, r2, r3
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	e001      	b.n	8005cb4 <VL53L1_get_sequence_config_bit+0x60>

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005cb0:	23fc      	movs	r3, #252	; 0xfc
 8005cb2:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8005cb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3318      	adds	r3, #24
 8005cd6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	7858      	ldrb	r0, [r3, #1]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	7819      	ldrb	r1, [r3, #0]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f203 339f 	addw	r3, r3, #927	; 0x39f
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f007 fdeb 	bl	800d8c2 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	7898      	ldrb	r0, [r3, #2]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	78d9      	ldrb	r1, [r3, #3]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f007 fe20 	bl	800d940 <VL53L1_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8005d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005d16:	2300      	movs	r3, #0
 8005d18:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3318      	adds	r3, #24
 8005d1e:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8005d32:	f107 020e 	add.w	r2, r7, #14
 8005d36:	f107 010d 	add.w	r1, r7, #13
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f00a f880 	bl	800fe40 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8005d40:	7bba      	ldrb	r2, [r7, #14]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8005d46:	7b7a      	ldrb	r2, [r7, #13]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8005d52:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	091b      	lsrs	r3, r3, #4
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	f003 030f 	and.w	r3, r3, #15
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8005d6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005d80:	2300      	movs	r3, #0
 8005d82:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3318      	adds	r3, #24
 8005d88:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	331c      	adds	r3, #28
 8005d94:	2240      	movs	r2, #64	; 0x40
 8005d96:	4619      	mov	r1, r3
 8005d98:	f014 fe48 	bl	801aa2c <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781a      	ldrb	r2, [r3, #0]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	785a      	ldrb	r2, [r3, #1]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	33c2      	adds	r3, #194	; 0xc2
 8005db4:	4618      	mov	r0, r3
 8005db6:	f00f fbce 	bl	8015556 <VL53L1_init_zone_config_histogram_bins>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d104      	bne.n	8005dd0 <VL53L1_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8005dce:	e00f      	b.n	8005df0 <VL53L1_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	2b0f      	cmp	r3, #15
 8005dd6:	d807      	bhi.n	8005de8 <VL53L1_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	785b      	ldrb	r3, [r3, #1]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8005de6:	e003      	b.n	8005df0 <VL53L1_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2211      	movs	r2, #17
 8005dec:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
				VL53L1_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8005df0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005e06:	2300      	movs	r3, #0
 8005e08:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	3318      	adds	r3, #24
 8005e0e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	33c2      	adds	r3, #194	; 0xc2
 8005e14:	226c      	movs	r2, #108	; 0x6c
 8005e16:	4619      	mov	r1, r3
 8005e18:	6838      	ldr	r0, [r7, #0]
 8005e1a:	f014 fe07 	bl	801aa2c <memcpy>

	LOG_FUNCTION_END(status);

	return status;
 8005e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	607a      	str	r2, [r7, #4]
 8005e36:	603b      	str	r3, [r7, #0]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3318      	adds	r3, #24
 8005e44:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8005e46:	7afb      	ldrb	r3, [r7, #11]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	2b26      	cmp	r3, #38	; 0x26
 8005e4c:	f200 8139 	bhi.w	80060c2 <VL53L1_get_preset_mode_timing_cfg+0x296>
 8005e50:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <VL53L1_get_preset_mode_timing_cfg+0x2c>)
 8005e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e56:	bf00      	nop
 8005e58:	08005ef5 	.word	0x08005ef5
 8005e5c:	08005ef5 	.word	0x08005ef5
 8005e60:	08005ef5 	.word	0x08005ef5
 8005e64:	08005ef5 	.word	0x08005ef5
 8005e68:	08005ef5 	.word	0x08005ef5
 8005e6c:	08005f1f 	.word	0x08005f1f
 8005e70:	08005f1f 	.word	0x08005f1f
 8005e74:	08005f1f 	.word	0x08005f1f
 8005e78:	080060c3 	.word	0x080060c3
 8005e7c:	080060c3 	.word	0x080060c3
 8005e80:	08005f73 	.word	0x08005f73
 8005e84:	0800601b 	.word	0x0800601b
 8005e88:	08005f73 	.word	0x08005f73
 8005e8c:	080060c3 	.word	0x080060c3
 8005e90:	080060c3 	.word	0x080060c3
 8005e94:	080060c3 	.word	0x080060c3
 8005e98:	08005ef5 	.word	0x08005ef5
 8005e9c:	08005f1f 	.word	0x08005f1f
 8005ea0:	08005f73 	.word	0x08005f73
 8005ea4:	08005f73 	.word	0x08005f73
 8005ea8:	08005f73 	.word	0x08005f73
 8005eac:	08005f73 	.word	0x08005f73
 8005eb0:	08005f73 	.word	0x08005f73
 8005eb4:	08005f9d 	.word	0x08005f9d
 8005eb8:	08005fc7 	.word	0x08005fc7
 8005ebc:	08005ff1 	.word	0x08005ff1
 8005ec0:	08005f73 	.word	0x08005f73
 8005ec4:	08005f73 	.word	0x08005f73
 8005ec8:	08005f73 	.word	0x08005f73
 8005ecc:	08006045 	.word	0x08006045
 8005ed0:	08006045 	.word	0x08006045
 8005ed4:	08006045 	.word	0x08006045
 8005ed8:	0800606f 	.word	0x0800606f
 8005edc:	0800606f 	.word	0x0800606f
 8005ee0:	0800606f 	.word	0x0800606f
 8005ee4:	08005f49 	.word	0x08005f49
 8005ee8:	08005f49 	.word	0x08005f49
 8005eec:	08005f49 	.word	0x08005f49
 8005ef0:	08006099 	.word	0x08006099
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
		*pdss_config__target_total_rate_mcps =
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*pphasecal_config_timeout_us =
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
		*pmm_config_timeout_us =
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
		*prange_config_timeout_us =
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	601a      	str	r2, [r3, #0]
	break;
 8005f1c:	e0d4      	b.n	80060c8 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
		*pmm_config_timeout_us =
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
		*prange_config_timeout_us =
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	601a      	str	r2, [r3, #0]
	break;
 8005f46:	e0bf      	b.n	80060c8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
		*pmm_config_timeout_us =
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		*prange_config_timeout_us =
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	601a      	str	r2, [r3, #0]
	break;
 8005f70:	e0aa      	b.n	80060c8 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	601a      	str	r2, [r3, #0]

	break;
 8005f9a:	e095      	b.n	80060c8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
		*pphasecal_config_timeout_us =
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	601a      	str	r2, [r3, #0]
	break;
 8005fc4:	e080      	b.n	80060c8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
		*pphasecal_config_timeout_us =
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	601a      	str	r2, [r3, #0]
	break;
 8005fee:	e06b      	b.n	80060c8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
		*pphasecal_config_timeout_us =
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	601a      	str	r2, [r3, #0]
	break;
 8006018:	e056      	b.n	80060c8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	601a      	str	r2, [r3, #0]
	break;
 8006042:	e041      	b.n	80060c8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	601a      	str	r2, [r3, #0]
	break;
 800606c:	e02c      	b.n	80060c8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	601a      	str	r2, [r3, #0]
	break;
 8006096:	e017      	b.n	80060c8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
		*pdss_config__target_total_rate_mcps =
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	601a      	str	r2, [r3, #0]
	break;
 80060c0:	e002      	b.n	80060c8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80060c2:	23fc      	movs	r3, #252	; 0xfc
 80060c4:	75fb      	strb	r3, [r7, #23]
		break;
 80060c6:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80060c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	371c      	adds	r7, #28
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b098      	sub	sp, #96	; 0x60
 80060dc:	af06      	add	r7, sp, #24
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	607b      	str	r3, [r7, #4]
 80060e2:	460b      	mov	r3, r1
 80060e4:	72fb      	strb	r3, [r7, #11]
 80060e6:	4613      	mov	r3, r2
 80060e8:	813b      	strh	r3, [r7, #8]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53L1_LLDriverData_t *pdev =
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	3318      	adds	r3, #24
 80060f4:	643b      	str	r3, [r7, #64]	; 0x40
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80060fc:	3308      	adds	r3, #8
 80060fe:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_hist_post_process_config_t *phistpostprocess =
 8006100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006102:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006106:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8006108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800610a:	f203 3342 	addw	r3, r3, #834	; 0x342
 800610e:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8006110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006112:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8006116:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8006118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800611a:	f203 3362 	addw	r3, r3, #866	; 0x362
 800611e:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8006120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006122:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8006126:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8006128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800612a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8006130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006132:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8006136:	623b      	str	r3, [r7, #32]
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8006138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800613a:	33c2      	adds	r3, #194	; 0xc2
 800613c:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800613e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006140:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8006144:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8006146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006148:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800614c:	3318      	adds	r3, #24
 800614e:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8006150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006152:	7afa      	ldrb	r2, [r7, #11]
 8006154:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8006156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006158:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800615a:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800615c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800615e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006160:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8006162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006164:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006166:	615a      	str	r2, [r3, #20]



	VL53L1_init_ll_driver_state(
 8006168:	2103      	movs	r1, #3
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f005 f9c1 	bl	800b4f2 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8006170:	7afb      	ldrb	r3, [r7, #11]
 8006172:	3b01      	subs	r3, #1
 8006174:	2b26      	cmp	r3, #38	; 0x26
 8006176:	f200 8321 	bhi.w	80067bc <VL53L1_set_preset_mode+0x6e4>
 800617a:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <VL53L1_set_preset_mode+0xa8>)
 800617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006180:	0800621d 	.word	0x0800621d
 8006184:	08006241 	.word	0x08006241
 8006188:	08006265 	.word	0x08006265
 800618c:	08006289 	.word	0x08006289
 8006190:	080062ad 	.word	0x080062ad
 8006194:	080062d1 	.word	0x080062d1
 8006198:	080062f5 	.word	0x080062f5
 800619c:	08006319 	.word	0x08006319
 80061a0:	080067bd 	.word	0x080067bd
 80061a4:	080067bd 	.word	0x080067bd
 80061a8:	0800633d 	.word	0x0800633d
 80061ac:	080064a5 	.word	0x080064a5
 80061b0:	08006635 	.word	0x08006635
 80061b4:	0800665d 	.word	0x0800665d
 80061b8:	08006685 	.word	0x08006685
 80061bc:	080066ad 	.word	0x080066ad
 80061c0:	080066d5 	.word	0x080066d5
 80061c4:	080066f9 	.word	0x080066f9
 80061c8:	0800647d 	.word	0x0800647d
 80061cc:	08006365 	.word	0x08006365
 80061d0:	0800638d 	.word	0x0800638d
 80061d4:	080063b5 	.word	0x080063b5
 80061d8:	080063dd 	.word	0x080063dd
 80061dc:	08006405 	.word	0x08006405
 80061e0:	0800642d 	.word	0x0800642d
 80061e4:	08006455 	.word	0x08006455
 80061e8:	080064cd 	.word	0x080064cd
 80061ec:	080064f5 	.word	0x080064f5
 80061f0:	0800651d 	.word	0x0800651d
 80061f4:	08006545 	.word	0x08006545
 80061f8:	0800656d 	.word	0x0800656d
 80061fc:	08006595 	.word	0x08006595
 8006200:	080065bd 	.word	0x080065bd
 8006204:	080065e5 	.word	0x080065e5
 8006208:	0800660d 	.word	0x0800660d
 800620c:	0800671d 	.word	0x0800671d
 8006210:	08006745 	.word	0x08006745
 8006214:	0800676d 	.word	0x0800676d
 8006218:	08006795 	.word	0x08006795

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	9303      	str	r3, [sp, #12]
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	9302      	str	r3, [sp, #8]
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	9301      	str	r3, [sp, #4]
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006232:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006234:	f003 fbc6 	bl	80099c4 <VL53L1_preset_mode_standard_ranging>
 8006238:	4603      	mov	r3, r0
 800623a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800623e:	e2c1      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	9303      	str	r3, [sp, #12]
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	9302      	str	r3, [sp, #8]
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	9301      	str	r3, [sp, #4]
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006254:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006256:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006258:	f003 fd2d 	bl	8009cb6 <VL53L1_preset_mode_standard_ranging_short_range>
 800625c:	4603      	mov	r3, r0
 800625e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006262:	e2af      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	9303      	str	r3, [sp, #12]
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	9302      	str	r3, [sp, #8]
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	9301      	str	r3, [sp, #4]
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800627a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800627c:	f003 fd60 	bl	8009d40 <VL53L1_preset_mode_standard_ranging_long_range>
 8006280:	4603      	mov	r3, r0
 8006282:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006286:	e29d      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	9303      	str	r3, [sp, #12]
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	9302      	str	r3, [sp, #8]
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	9301      	str	r3, [sp, #4]
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800629c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800629e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80062a0:	f003 fd93 	bl	8009dca <VL53L1_preset_mode_standard_ranging_mm1_cal>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80062aa:	e28b      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	9303      	str	r3, [sp, #12]
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	9302      	str	r3, [sp, #8]
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	9301      	str	r3, [sp, #4]
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80062c4:	f003 fdaa 	bl	8009e1c <VL53L1_preset_mode_standard_ranging_mm2_cal>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80062ce:	e279      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	9303      	str	r3, [sp, #12]
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	9302      	str	r3, [sp, #8]
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	9301      	str	r3, [sp, #4]
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80062e8:	f003 fdc1 	bl	8009e6e <VL53L1_preset_mode_timed_ranging>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80062f2:	e267      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	9303      	str	r3, [sp, #12]
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	9302      	str	r3, [sp, #8]
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	9301      	str	r3, [sp, #4]
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006308:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800630a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800630c:	f003 fded 	bl	8009eea <VL53L1_preset_mode_timed_ranging_short_range>
 8006310:	4603      	mov	r3, r0
 8006312:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006316:	e255      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	9303      	str	r3, [sp, #12]
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	9302      	str	r3, [sp, #8]
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	9301      	str	r3, [sp, #4]
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800632c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800632e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006330:	f003 fe19 	bl	8009f66 <VL53L1_preset_mode_timed_ranging_long_range>
 8006334:	4603      	mov	r3, r0
 8006336:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800633a:	e243      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING:
		status = VL53L1_preset_mode_histogram_ranging(
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	9304      	str	r3, [sp, #16]
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	9303      	str	r3, [sp, #12]
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	9302      	str	r3, [sp, #8]
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	9301      	str	r3, [sp, #4]
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006354:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006356:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006358:	f003 fefb 	bl	800a152 <VL53L1_preset_mode_histogram_ranging>
 800635c:	4603      	mov	r3, r0
 800635e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006362:	e22f      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM1:
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	9304      	str	r3, [sp, #16]
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	9303      	str	r3, [sp, #12]
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	9302      	str	r3, [sp, #8]
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	9301      	str	r3, [sp, #4]
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800637e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006380:	f003 ff7c 	bl	800a27c <VL53L1_preset_mode_histogram_ranging_with_mm1>
 8006384:	4603      	mov	r3, r0
 8006386:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800638a:	e21b      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM2:
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	9304      	str	r3, [sp, #16]
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	9303      	str	r3, [sp, #12]
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	9302      	str	r3, [sp, #8]
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	9301      	str	r3, [sp, #4]
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063a8:	f003 ffcc 	bl	800a344 <VL53L1_preset_mode_histogram_ranging_with_mm2>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80063b2:	e207      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	9304      	str	r3, [sp, #16]
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	9303      	str	r3, [sp, #12]
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	9302      	str	r3, [sp, #8]
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	9301      	str	r3, [sp, #4]
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063d0:	f003 ffe0 	bl	800a394 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 80063d4:	4603      	mov	r3, r0
 80063d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80063da:	e1f3      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	9304      	str	r3, [sp, #16]
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	9303      	str	r3, [sp, #12]
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	9302      	str	r3, [sp, #8]
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	9301      	str	r3, [sp, #4]
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063f8:	f004 f830 	bl	800a45c <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 80063fc:	4603      	mov	r3, r0
 80063fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006402:	e1df      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		status = VL53L1_preset_mode_histogram_multizone(
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	9304      	str	r3, [sp, #16]
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	9303      	str	r3, [sp, #12]
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	9302      	str	r3, [sp, #8]
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	9301      	str	r3, [sp, #4]
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800641c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800641e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006420:	f004 fe25 	bl	800b06e <VL53L1_preset_mode_histogram_multizone>
 8006424:	4603      	mov	r3, r0
 8006426:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800642a:	e1cb      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	9304      	str	r3, [sp, #16]
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	9303      	str	r3, [sp, #12]
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	9302      	str	r3, [sp, #8]
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	9301      	str	r3, [sp, #4]
 800643c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006444:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006446:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006448:	f004 fe63 	bl	800b112 <VL53L1_preset_mode_histogram_multizone_short_range>
 800644c:	4603      	mov	r3, r0
 800644e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006452:	e1b7      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	9304      	str	r3, [sp, #16]
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	9303      	str	r3, [sp, #12]
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	9302      	str	r3, [sp, #8]
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	9301      	str	r3, [sp, #4]
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800646c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800646e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006470:	f004 fea1 	bl	800b1b6 <VL53L1_preset_mode_histogram_multizone_long_range>
 8006474:	4603      	mov	r3, r0
 8006476:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800647a:	e1a3      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_REF_ARRAY:
		status = VL53L1_preset_mode_histogram_ranging_ref(
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	9304      	str	r3, [sp, #16]
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	9303      	str	r3, [sp, #12]
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	9302      	str	r3, [sp, #8]
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006494:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006496:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006498:	f004 ffde 	bl	800b458 <VL53L1_preset_mode_histogram_ranging_ref>
 800649c:	4603      	mov	r3, r0
 800649e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80064a2:	e18f      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	9304      	str	r3, [sp, #16]
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	9303      	str	r3, [sp, #12]
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	9302      	str	r3, [sp, #8]
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	9301      	str	r3, [sp, #4]
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80064be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80064c0:	f003 fff4 	bl	800a4ac <VL53L1_preset_mode_histogram_ranging_short_timing>
 80064c4:	4603      	mov	r3, r0
 80064c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80064ca:	e17b      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_long_range(
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	9304      	str	r3, [sp, #16]
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	9303      	str	r3, [sp, #12]
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	9302      	str	r3, [sp, #8]
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80064e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80064e8:	f004 f86c 	bl	800a5c4 <VL53L1_preset_mode_histogram_long_range>
 80064ec:	4603      	mov	r3, r0
 80064ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80064f2:	e167      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	9304      	str	r3, [sp, #16]
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	9303      	str	r3, [sp, #12]
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	9302      	str	r3, [sp, #8]
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	9301      	str	r3, [sp, #4]
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800650c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800650e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006510:	f004 f8f6 	bl	800a700 <VL53L1_preset_mode_histogram_long_range_mm1>
 8006514:	4603      	mov	r3, r0
 8006516:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800651a:	e153      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	9304      	str	r3, [sp, #16]
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	9303      	str	r3, [sp, #12]
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	9302      	str	r3, [sp, #8]
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	9301      	str	r3, [sp, #4]
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006534:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006536:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006538:	f004 f943 	bl	800a7c2 <VL53L1_preset_mode_histogram_long_range_mm2>
 800653c:	4603      	mov	r3, r0
 800653e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006542:	e13f      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53L1_preset_mode_histogram_medium_range(
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	9304      	str	r3, [sp, #16]
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	9303      	str	r3, [sp, #12]
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	9302      	str	r3, [sp, #8]
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	9301      	str	r3, [sp, #4]
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800655c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800655e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006560:	f004 f957 	bl	800a812 <VL53L1_preset_mode_histogram_medium_range>
 8006564:	4603      	mov	r3, r0
 8006566:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800656a:	e12b      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	9304      	str	r3, [sp, #16]
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	9303      	str	r3, [sp, #12]
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	9302      	str	r3, [sp, #8]
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	9301      	str	r3, [sp, #4]
 800657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006584:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006586:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006588:	f004 f9e1 	bl	800a94e <VL53L1_preset_mode_histogram_medium_range_mm1>
 800658c:	4603      	mov	r3, r0
 800658e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006592:	e117      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	9304      	str	r3, [sp, #16]
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	9303      	str	r3, [sp, #12]
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	9302      	str	r3, [sp, #8]
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	9301      	str	r3, [sp, #4]
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065b0:	f004 fa2e 	bl	800aa10 <VL53L1_preset_mode_histogram_medium_range_mm2>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80065ba:	e103      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_short_range(
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	9304      	str	r3, [sp, #16]
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	9303      	str	r3, [sp, #12]
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	9302      	str	r3, [sp, #8]
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	9301      	str	r3, [sp, #4]
 80065cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065d8:	f004 fa42 	bl	800aa60 <VL53L1_preset_mode_histogram_short_range>
 80065dc:	4603      	mov	r3, r0
 80065de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80065e2:	e0ef      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	9304      	str	r3, [sp, #16]
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	9303      	str	r3, [sp, #12]
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	9302      	str	r3, [sp, #8]
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006600:	f004 fb4c 	bl	800ac9c <VL53L1_preset_mode_histogram_short_range_mm1>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800660a:	e0db      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	9304      	str	r3, [sp, #16]
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	9303      	str	r3, [sp, #12]
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	9302      	str	r3, [sp, #8]
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006624:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006626:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006628:	f004 fb99 	bl	800ad5e <VL53L1_preset_mode_histogram_short_range_mm2>
 800662c:	4603      	mov	r3, r0
 800662e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006632:	e0c7      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		status = VL53L1_preset_mode_histogram_characterisation(
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	9304      	str	r3, [sp, #16]
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	9303      	str	r3, [sp, #12]
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	9302      	str	r3, [sp, #8]
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	9301      	str	r3, [sp, #4]
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800664c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800664e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006650:	f004 fbad 	bl	800adae <VL53L1_preset_mode_histogram_characterisation>
 8006654:	4603      	mov	r3, r0
 8006656:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800665a:	e0b3      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_PLANAR:
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	9304      	str	r3, [sp, #16]
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	9303      	str	r3, [sp, #12]
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	9302      	str	r3, [sp, #8]
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	9301      	str	r3, [sp, #4]
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006674:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006676:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006678:	f004 fbca 	bl	800ae10 <VL53L1_preset_mode_histogram_xtalk_planar>
 800667c:	4603      	mov	r3, r0
 800667e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006682:	e09f      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM1:
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	9304      	str	r3, [sp, #16]
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	9303      	str	r3, [sp, #12]
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	9302      	str	r3, [sp, #8]
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	9301      	str	r3, [sp, #4]
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800669e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066a0:	f004 fc2d 	bl	800aefe <VL53L1_preset_mode_histogram_xtalk_mm1>
 80066a4:	4603      	mov	r3, r0
 80066a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80066aa:	e08b      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM2:
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	9304      	str	r3, [sp, #16]
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	9303      	str	r3, [sp, #12]
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	9302      	str	r3, [sp, #8]
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	9301      	str	r3, [sp, #4]
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066c8:	f004 fcad 	bl	800b026 <VL53L1_preset_mode_histogram_xtalk_mm2>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80066d2:	e077      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	9303      	str	r3, [sp, #12]
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	9302      	str	r3, [sp, #8]
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	9301      	str	r3, [sp, #4]
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80066ec:	f004 fdb5 	bl	800b25a <VL53L1_preset_mode_olt>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80066f6:	e065      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	9303      	str	r3, [sp, #12]
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	9302      	str	r3, [sp, #8]
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	9301      	str	r3, [sp, #4]
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800670c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800670e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006710:	f003 fce5 	bl	800a0de <VL53L1_preset_mode_singleshot_ranging>
 8006714:	4603      	mov	r3, r0
 8006716:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800671a:	e053      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	9304      	str	r3, [sp, #16]
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	9303      	str	r3, [sp, #12]
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	9302      	str	r3, [sp, #8]
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	9301      	str	r3, [sp, #4]
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006736:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006738:	f003 fc7d 	bl	800a036 <VL53L1_preset_mode_low_power_auto_short_ranging>
 800673c:	4603      	mov	r3, r0
 800673e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8006742:	e03f      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	9304      	str	r3, [sp, #16]
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	9303      	str	r3, [sp, #12]
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	9302      	str	r3, [sp, #8]
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	9301      	str	r3, [sp, #4]
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800675c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800675e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006760:	f003 fc3f 	bl	8009fe2 <VL53L1_preset_mode_low_power_auto_ranging>
 8006764:	4603      	mov	r3, r0
 8006766:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 800676a:	e02b      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	9304      	str	r3, [sp, #16]
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	9303      	str	r3, [sp, #12]
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	9302      	str	r3, [sp, #8]
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	9301      	str	r3, [sp, #4]
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006784:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006786:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006788:	f003 fc7f 	bl	800a08a <VL53L1_preset_mode_low_power_auto_long_ranging>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8006792:	e017      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>


	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_special_histogram_short_range(
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	9304      	str	r3, [sp, #16]
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	9303      	str	r3, [sp, #12]
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	9302      	str	r3, [sp, #8]
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067b0:	f004 f9f4 	bl	800ab9c <VL53L1_preset_mode_special_histogram_short_range>
 80067b4:	4603      	mov	r3, r0
 80067b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
	break;
 80067ba:	e003      	b.n	80067c4 <VL53L1_set_preset_mode+0x6ec>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80067bc:	23fc      	movs	r3, #252	; 0xfc
 80067be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
 80067c2:	bf00      	nop

	}



	if (status == VL53L1_ERROR_NONE) {
 80067c4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d105      	bne.n	80067d8 <VL53L1_set_preset_mode+0x700>

		pstatic->dss_config__target_total_rate_mcps =
 80067cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ce:	893a      	ldrh	r2, [r7, #8]
 80067d0:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 80067d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d4:	893a      	ldrh	r2, [r7, #8]
 80067d6:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53L1_ERROR_NONE)
 80067d8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d108      	bne.n	80067f2 <VL53L1_set_preset_mode+0x71a>
		status =
			VL53L1_set_timeouts_us(
 80067e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067e4:	6879      	ldr	r1, [r7, #4]
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7ff f98f 	bl	8005b0a <VL53L1_set_timeouts_us>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 80067f2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d106      	bne.n	8006808 <VL53L1_set_preset_mode+0x730>
		status =
			VL53L1_set_inter_measurement_period_ms(
 80067fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f7ff f92b 	bl	8005a58 <VL53L1_set_inter_measurement_period_ms>
 8006802:	4603      	mov	r3, r0
 8006804:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8006808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800680a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 800680e:	3301      	adds	r3, #1
 8006810:	b2da      	uxtb	r2, r3
 8006812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006814:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8006818:	4619      	mov	r1, r3
 800681a:	4610      	mov	r0, r2
 800681c:	f005 fa82 	bl	800bd24 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8006820:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8006824:	4618      	mov	r0, r3
 8006826:	3748      	adds	r7, #72	; 0x48
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006836:	2300      	movs	r3, #0
 8006838:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	3318      	adds	r3, #24
 800683e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f8b3 2382 	ldrh.w	r2, [r3, #898]	; 0x382
	*plite_sigma =
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800684a:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800685a:	b480      	push	{r7}
 800685c:	b085      	sub	sp, #20
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	460b      	mov	r3, r1
 8006864:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3318      	adds	r3, #24
 800686e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	887a      	ldrh	r2, [r7, #2]
 8006874:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382

	LOG_FUNCTION_END(status);

	return status;
 8006878:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006892:	2300      	movs	r3, #0
 8006894:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3318      	adds	r3, #24
 800689a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f8b3 2384 	ldrh.w	r2, [r3, #900]	; 0x384
	*plite_mincountrate =
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80068a6:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b085      	sub	sp, #20
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	460b      	mov	r3, r1
 80068c0:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80068c2:	2300      	movs	r3, #0
 80068c4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3318      	adds	r3, #24
 80068ca:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	887a      	ldrh	r2, [r7, #2]
 80068d0:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 80068d4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b0d2      	sub	sp, #328	; 0x148
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80068ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80068f2:	6018      	str	r0, [r3, #0]
 80068f4:	4608      	mov	r0, r1
 80068f6:	4611      	mov	r1, r2
 80068f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80068fc:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8006900:	4602      	mov	r2, r0
 8006902:	701a      	strb	r2, [r3, #0]
 8006904:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006908:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 800690c:	460a      	mov	r2, r1
 800690e:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006910:	2300      	movs	r3, #0
 8006912:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006916:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800691a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3318      	adds	r3, #24
 8006922:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53L1_LLDriverResults_t  *pres =
 8006926:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800692a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006934:	3308      	adds	r3, #8
 8006936:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800693a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800693e:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8006942:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8006946:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800694a:	3348      	adds	r3, #72	; 0x48
 800694c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8006950:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006954:	f203 3342 	addw	r3, r3, #834	; 0x342
 8006958:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800695c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006960:	f203 3362 	addw	r3, r3, #866	; 0x362
 8006964:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8006968:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800696c:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8006970:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8006974:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006978:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800697c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8006980:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006984:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8006988:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800698c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006990:	332c      	adds	r3, #44	; 0x2c
 8006992:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8006996:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800699a:	3348      	adds	r3, #72	; 0x48
 800699c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 80069a0:	f107 030c 	add.w	r3, r7, #12
 80069a4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 80069c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80069c4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80069c8:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 80069cc:	7812      	ldrb	r2, [r2, #0]
 80069ce:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 80069d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80069d4:	791b      	ldrb	r3, [r3, #4]
 80069d6:	b25b      	sxtb	r3, r3
 80069d8:	f003 030f 	and.w	r3, r3, #15
 80069dc:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80069de:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069e2:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 80069e6:	f993 3000 	ldrsb.w	r3, [r3]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	b25b      	sxtb	r3, r3
 80069ee:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 80069f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80069f4:	711a      	strb	r2, [r3, #4]


	status =
		VL53L1_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 80069f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80069fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53L1_set_user_zone(
 80069fe:	3336      	adds	r3, #54	; 0x36
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8006a06:	4413      	add	r3, r2
 8006a08:	1d9a      	adds	r2, r3, #6
 8006a0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a0e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006a12:	4611      	mov	r1, r2
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	f7ff f955 	bl	8005cc4 <VL53L1_set_user_zone>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8006a20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006a24:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d019      	beq.n	8006a60 <VL53L1_init_and_start_range+0x17c>
		status =
		VL53L1_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id])
 8006a2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006a30:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006a34:	461a      	mov	r2, r3
		VL53L1_set_zone_dss_config(
 8006a36:	4613      	mov	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006a42:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8006a46:	4413      	add	r3, r2
 8006a48:	1c9a      	adds	r2, r3, #2
 8006a4a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a4e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006a52:	4611      	mov	r1, r2
 8006a54:	6818      	ldr	r0, [r3, #0]
 8006a56:	f001 fbd7 	bl	8008208 <VL53L1_set_zone_dss_config>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8006a60:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006a64:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10d      	bne.n	8006a8c <VL53L1_init_and_start_range+0x1a8>
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8006a70:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006a74:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d107      	bne.n	8006a8c <VL53L1_init_and_start_range+0x1a8>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8006a7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006a80:	f8b3 22e8 	ldrh.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8006a84:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006a88:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8006a8c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a94:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8006a98:	2bff      	cmp	r3, #255	; 0xff
 8006a9a:	d106      	bne.n	8006aaa <VL53L1_init_and_start_range+0x1c6>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8006a9c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006aaa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab2:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d139      	bne.n	8006b2e <VL53L1_init_and_start_range+0x24a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8006aba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac2:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d131      	bne.n	8006b2e <VL53L1_init_and_start_range+0x24a>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8006aca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006ace:	f893 2364 	ldrb.w	r2, [r3, #868]	; 0x364
		pdev->low_power_auto_data.saved_interrupt_config =
 8006ad2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ada:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8006ade:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364

		if ((pdev->dyn_cfg.system__sequence_config & (
 8006ae8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006aec:	f893 33a1 	ldrb.w	r3, [r3, #929]	; 0x3a1
 8006af0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d109      	bne.n	8006b0c <VL53L1_init_and_start_range+0x228>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8006af8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006afc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006b00:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8006b02:	b21a      	sxth	r2, r3
 8006b04:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b08:	825a      	strh	r2, [r3, #18]
 8006b0a:	e003      	b.n	8006b14 <VL53L1_init_and_start_range+0x230>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8006b0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b10:	2200      	movs	r2, #0
 8006b12:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8006b14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b18:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d805      	bhi.n	8006b2e <VL53L1_init_and_start_range+0x24a>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8006b22:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b26:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006b2a:	2205      	movs	r2, #5
 8006b2c:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006b2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b36:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d117      	bne.n	8006b6e <VL53L1_init_and_start_range+0x28a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8006b3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b46:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d10f      	bne.n	8006b6e <VL53L1_init_and_start_range+0x28a>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8006b4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b56:	f893 243b 	ldrb.w	r2, [r3, #1083]	; 0x43b
		pdev->gen_cfg.system__interrupt_config_gpio =
 8006b5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b5e:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364


		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8006b62:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b66:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006b6a:	2206      	movs	r2, #6
 8006b6c:	701a      	strb	r2, [r3, #0]





	if (status == VL53L1_ERROR_NONE)
 8006b6e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d109      	bne.n	8006b8a <VL53L1_init_and_start_range+0x2a6>
		status = VL53L1_save_cfg_data(Dev);
 8006b76:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b7a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006b7e:	6818      	ldr	r0, [r3, #0]
 8006b80:	f007 f98c 	bl	800de9c <VL53L1_save_cfg_data>
 8006b84:	4603      	mov	r3, r0
 8006b86:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8006b8a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b8e:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	2b05      	cmp	r3, #5
 8006b98:	d826      	bhi.n	8006be8 <VL53L1_init_and_start_range+0x304>
 8006b9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ba0 <VL53L1_init_and_start_range+0x2bc>)
 8006b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba0:	08006be1 	.word	0x08006be1
 8006ba4:	08006bd9 	.word	0x08006bd9
 8006ba8:	08006bd1 	.word	0x08006bd1
 8006bac:	08006bc9 	.word	0x08006bc9
 8006bb0:	08006bc1 	.word	0x08006bc1
 8006bb4:	08006bb9 	.word	0x08006bb9
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006bbe:	e017      	b.n	8006bf0 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8006bc0:	230d      	movs	r3, #13
 8006bc2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006bc6:	e013      	b.n	8006bf0 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8006bc8:	2324      	movs	r3, #36	; 0x24
 8006bca:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006bce:	e00f      	b.n	8006bf0 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8006bd0:	2344      	movs	r3, #68	; 0x44
 8006bd2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006bd6:	e00b      	b.n	8006bf0 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8006bd8:	235a      	movs	r3, #90	; 0x5a
 8006bda:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006bde:	e007      	b.n	8006bf0 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8006be0:	2371      	movs	r3, #113	; 0x71
 8006be2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006be6:	e003      	b.n	8006bf0 <VL53L1_init_and_start_range+0x30c>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8006be8:	2383      	movs	r3, #131	; 0x83
 8006bea:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006bee:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8006bf0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006bf4:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8006bf8:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8006bfc:	f107 030c 	add.w	r3, r7, #12
 8006c00:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8006c04:	2300      	movs	r3, #0
 8006c06:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006c0a:	e00b      	b.n	8006c24 <VL53L1_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8006c0c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8006c16:	2200      	movs	r2, #0
 8006c18:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8006c1a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006c1e:	3301      	adds	r3, #1
 8006c20:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006c24:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8006c28:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d3ed      	bcc.n	8006c0c <VL53L1_init_and_start_range+0x328>



	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8006c30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c34:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	2b05      	cmp	r3, #5
 8006c3c:	d917      	bls.n	8006c6e <VL53L1_init_and_start_range+0x38a>
 8006c3e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d113      	bne.n	8006c6e <VL53L1_init_and_start_range+0x38a>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006c46:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006c4a:	f1c3 0301 	rsb	r3, r3, #1
 8006c4e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006c52:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8006c56:	f107 020c 	add.w	r2, r7, #12
 8006c5a:	4413      	add	r3, r2
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	210b      	movs	r1, #11
 8006c60:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8006c64:	f00c fb0d 	bl	8013282 <VL53L1_i2c_encode_static_nvm_managed>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8006c6e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c72:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d917      	bls.n	8006cac <VL53L1_init_and_start_range+0x3c8>
 8006c7c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d113      	bne.n	8006cac <VL53L1_init_and_start_range+0x3c8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006c84:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006c88:	f1c3 030d 	rsb	r3, r3, #13
 8006c8c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006c90:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8006c94:	f107 020c 	add.w	r2, r7, #12
 8006c98:	4413      	add	r3, r2
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	2117      	movs	r1, #23
 8006c9e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8006ca2:	f00c fbca 	bl	801343a <VL53L1_i2c_encode_customer_nvm_managed>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8006cac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cb0:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d917      	bls.n	8006cea <VL53L1_init_and_start_range+0x406>
 8006cba:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d113      	bne.n	8006cea <VL53L1_init_and_start_range+0x406>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006cc2:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006cc6:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8006cca:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006cce:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8006cd2:	f107 020c 	add.w	r2, r7, #12
 8006cd6:	4413      	add	r3, r2
 8006cd8:	461a      	mov	r2, r3
 8006cda:	2120      	movs	r1, #32
 8006cdc:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8006ce0:	f00c fce9 	bl	80136b6 <VL53L1_i2c_encode_static_config>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8006cea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cee:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d917      	bls.n	8006d28 <VL53L1_init_and_start_range+0x444>
 8006cf8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d113      	bne.n	8006d28 <VL53L1_init_and_start_range+0x444>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006d00:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006d04:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8006d08:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006d0c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8006d10:	f107 020c 	add.w	r2, r7, #12
 8006d14:	4413      	add	r3, r2
 8006d16:	461a      	mov	r2, r3
 8006d18:	2116      	movs	r1, #22
 8006d1a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8006d1e:	f00c fdad 	bl	801387c <VL53L1_i2c_encode_general_config>
 8006d22:	4603      	mov	r3, r0
 8006d24:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8006d28:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d2c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d917      	bls.n	8006d66 <VL53L1_init_and_start_range+0x482>
 8006d36:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d113      	bne.n	8006d66 <VL53L1_init_and_start_range+0x482>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006d3e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006d42:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8006d46:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006d4a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 8006d4e:	f107 020c 	add.w	r2, r7, #12
 8006d52:	4413      	add	r3, r2
 8006d54:	461a      	mov	r2, r3
 8006d56:	2117      	movs	r1, #23
 8006d58:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8006d5c:	f00c fe12 	bl	8013984 <VL53L1_i2c_encode_timing_config>
 8006d60:	4603      	mov	r3, r0
 8006d62:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8006d66:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d6a:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d036      	beq.n	8006de2 <VL53L1_init_and_start_range+0x4fe>
 8006d74:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d132      	bne.n	8006de2 <VL53L1_init_and_start_range+0x4fe>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006d7c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006d80:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8006d84:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8006d88:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006d8c:	791b      	ldrb	r3, [r3, #4]
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d017      	beq.n	8006dc6 <VL53L1_init_and_start_range+0x4e2>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8006d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d9a:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8006d9c:	f043 0301 	orr.w	r3, r3, #1
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006da6:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8006da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dac:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006db8:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8006dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dbe:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8006dc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006dc4:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006dc6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8006dca:	f107 020c 	add.w	r2, r7, #12
 8006dce:	4413      	add	r3, r2
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	2112      	movs	r1, #18
 8006dd4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8006dd8:	f00c fe56 	bl	8013a88 <VL53L1_i2c_encode_dynamic_config>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53L1_ERROR_NONE) {
 8006de2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d113      	bne.n	8006e12 <VL53L1_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 8006dea:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006dee:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8006df2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006df6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 8006dfa:	f107 020c 	add.w	r2, r7, #12
 8006dfe:	4413      	add	r3, r2
 8006e00:	461a      	mov	r2, r3
 8006e02:	2105      	movs	r1, #5
 8006e04:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8006e08:	f00c fec3 	bl	8013b92 <VL53L1_i2c_encode_system_control>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53L1_ERROR_NONE) {
 8006e12:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10f      	bne.n	8006e3a <VL53L1_init_and_start_range+0x556>
		status =
			VL53L1_WriteMulti(
 8006e1a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8006e1e:	f107 020c 	add.w	r2, r7, #12
 8006e22:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 8006e26:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8006e2a:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 8006e2e:	6800      	ldr	r0, [r0, #0]
 8006e30:	f00e fbd6 	bl	80155e0 <VL53L1_WriteMulti>
 8006e34:	4603      	mov	r3, r0
 8006e36:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53L1_ERROR_NONE)
 8006e3a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d109      	bne.n	8006e56 <VL53L1_init_and_start_range+0x572>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8006e42:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e46:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006e4a:	6818      	ldr	r0, [r3, #0]
 8006e4c:	f004 fb82 	bl	800b554 <VL53L1_update_ll_driver_rd_state>
 8006e50:	4603      	mov	r3, r0
 8006e52:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53L1_ERROR_NONE)
 8006e56:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d109      	bne.n	8006e72 <VL53L1_init_and_start_range+0x58e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8006e5e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006e66:	6818      	ldr	r0, [r3, #0]
 8006e68:	f004 fd15 	bl	800b896 <VL53L1_update_ll_driver_cfg_state>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8006e72:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev =
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3318      	adds	r3, #24
 8006e90:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006e98:	3308      	adds	r3, #8
 8006e9a:	60fb      	str	r3, [r7, #12]
			VL53L1DevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8006ea2:	b25b      	sxtb	r3, r3
 8006ea4:	f003 030f 	and.w	r3, r3, #15
 8006ea8:	b25b      	sxtb	r3, r3
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8006eaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006eae:	b25b      	sxtb	r3, r3
 8006eb0:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f00c fea1 	bl	8013c08 <VL53L1_set_system_control>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8006ed0:	f003 030f 	and.w	r3, r3, #15
 8006ed4:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53L1_init_ll_driver_state(
 8006edc:	2103      	movs	r1, #3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f004 fb07 	bl	800b4f2 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8006eea:	3301      	adds	r3, #1
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4610      	mov	r0, r2
 8006ef8:	f004 ff14 	bl	800bd24 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f004 ff46 	bl	800bd8e <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f08:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d102      	bne.n	8006f16 <VL53L1_stop_range+0x96>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f008 f9b4 	bl	800f27e <VL53L1_low_power_auto_data_stop_range>

	return status;
 8006f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b0c8      	sub	sp, #288	; 0x120
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006f2c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006f30:	6018      	str	r0, [r3, #0]
 8006f32:	460a      	mov	r2, r1
 8006f34:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006f38:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8006f3c:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006f44:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006f48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3318      	adds	r3, #24
 8006f50:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8006f54:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f58:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8006f5c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8006f60:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f64:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8006f68:	331c      	adds	r3, #28
 8006f6a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8006f6e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f72:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006f76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8006f7a:	2388      	movs	r3, #136	; 0x88
 8006f7c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8006f80:	2300      	movs	r3, #0
 8006f82:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8006f8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006f90:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d008      	beq.n	8006fac <VL53L1_get_measurement_results+0x8a>
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d10d      	bne.n	8006fba <VL53L1_get_measurement_results+0x98>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8006f9e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8006fa2:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8006fa6:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8006faa:	e00a      	b.n	8006fc2 <VL53L1_get_measurement_results+0xa0>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8006fac:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8006fb0:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8006fb4:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8006fb8:	e003      	b.n	8006fc2 <VL53L1_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 8006fba:	232c      	movs	r3, #44	; 0x2c
 8006fbc:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8006fc0:	bf00      	nop
	}



	if (status == VL53L1_ERROR_NONE)
 8006fc2:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10f      	bne.n	8006fea <VL53L1_get_measurement_results+0xc8>
		status =
			VL53L1_ReadMulti(
 8006fca:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8006fce:	f107 0208 	add.w	r2, r7, #8
 8006fd2:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8006fd6:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8006fda:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 8006fde:	6800      	ldr	r0, [r0, #0]
 8006fe0:	f00e fb34 	bl	801564c <VL53L1_ReadMulti>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8006fea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006fee:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d917      	bls.n	8007028 <VL53L1_get_measurement_results+0x106>
 8006ff8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d113      	bne.n	8007028 <VL53L1_get_measurement_results+0x106>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8007000:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8007004:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8007008:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800700c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 8007010:	f107 0208 	add.w	r2, r7, #8
 8007014:	4413      	add	r3, r2
 8007016:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800701a:	4619      	mov	r1, r3
 800701c:	2038      	movs	r0, #56	; 0x38
 800701e:	f00c ff71 	bl	8013f04 <VL53L1_i2c_decode_debug_results>
 8007022:	4603      	mov	r3, r0
 8007024:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8007028:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800702c:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d017      	beq.n	8007066 <VL53L1_get_measurement_results+0x144>
 8007036:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800703a:	2b00      	cmp	r3, #0
 800703c:	d113      	bne.n	8007066 <VL53L1_get_measurement_results+0x144>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800703e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8007042:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8007046:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800704a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800704e:	f107 0208 	add.w	r2, r7, #8
 8007052:	4413      	add	r3, r2
 8007054:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8007058:	4619      	mov	r1, r3
 800705a:	2021      	movs	r0, #33	; 0x21
 800705c:	f00c fef1 	bl	8013e42 <VL53L1_i2c_decode_core_results>
 8007060:	4603      	mov	r3, r0
 8007062:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8007066:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800706a:	2b00      	cmp	r3, #0
 800706c:	d110      	bne.n	8007090 <VL53L1_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 800706e:	2300      	movs	r3, #0
 8007070:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8007074:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 8007078:	f107 0208 	add.w	r2, r7, #8
 800707c:	4413      	add	r3, r2
 800707e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007082:	4619      	mov	r1, r3
 8007084:	202c      	movs	r0, #44	; 0x2c
 8007086:	f00c fde6 	bl	8013c56 <VL53L1_i2c_decode_system_results>
 800708a:	4603      	mov	r3, r0
 800708c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8007090:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8007094:	4618      	mov	r0, r3
 8007096:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800709e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a2:	b0a0      	sub	sp, #128	; 0x80
 80070a4:	af06      	add	r7, sp, #24
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	460b      	mov	r3, r1
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80070ae:	2300      	movs	r3, #0
 80070b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53L1_LLDriverData_t *pdev =
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3318      	adds	r3, #24
 80070b8:	663b      	str	r3, [r7, #96]	; 0x60
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80070c0:	3308      	adds	r3, #8
 80070c2:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults =
 80070c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070c6:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53L1_zone_objects_t    *pobjects =
 80070c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070ca:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80070ce:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53L1_p_002[0]);
	VL53L1_ll_driver_state_t *pstate   =
 80070d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070d2:	332c      	adds	r3, #44	; 0x2c
 80070d4:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53L1_zone_config_t     *pzone_cfg =
 80070d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070d8:	33c2      	adds	r3, #194	; 0xc2
 80070da:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53L1_zone_hist_info_t  *phist_info =
 80070dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070de:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80070e2:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53L1_p_002[0]);

	VL53L1_dmax_calibration_data_t   dmax_cal;
	VL53L1_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 80070e4:	f107 0314 	add.w	r3, r7, #20
 80070e8:	647b      	str	r3, [r7, #68]	; 0x44
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80070ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070ec:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80070f0:	643b      	str	r3, [r7, #64]	; 0x40
	VL53L1_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 80070f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070f4:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80070f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53L1_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 80070fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070fc:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8007100:	3318      	adds	r3, #24
 8007102:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8007104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007106:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800710a:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 800710c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800710e:	3348      	adds	r3, #72	; 0x48
 8007110:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_zone_histograms_t *pZH = &(pres->zone_hists);
 8007112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007114:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8007118:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 800711a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800711c:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8007120:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t merge_enabled;
	VL53L1_range_data_t *pdata;

	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8007122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007124:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8007128:	2b01      	cmp	r3, #1
 800712a:	d108      	bne.n	800713e <VL53L1_get_device_results+0xa0>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007132:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <VL53L1_get_device_results+0xa0>
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <VL53L1_get_device_results+0xa2>
 800713e:	2300      	movs	r3, #0
 8007140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 VL53L1_PRESETMODE_RANGING);

	if ((pdev->sys_ctrl.system__mode_start &
 8007144:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007146:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 82a9 	beq.w	80076a6 <VL53L1_get_device_results+0x608>
		 VL53L1_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53L1_get_histogram_bin_data(
 8007154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007156:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800715a:	4619      	mov	r1, r3
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 fbd7 	bl	8007910 <VL53L1_get_histogram_bin_data>
 8007162:	4603      	mov	r3, r0
 8007164:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53L1_ERROR_NONE &&
 8007168:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800716c:	2b00      	cmp	r3, #0
 800716e:	d118      	bne.n	80071a2 <VL53L1_get_device_results+0x104>
			pHD->number_of_ambient_bins == 0) {
 8007170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007172:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53L1_ERROR_NONE &&
 8007174:	2b00      	cmp	r3, #0
 8007176:	d114      	bne.n	80071a2 <VL53L1_get_device_results+0x104>
			zid = pdev->ll_state.rd_zone_id;
 8007178:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800717a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800717e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
			&(pZH->VL53L1_p_002[zid]),
 8007182:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800718a:	4413      	add	r3, r2
 800718c:	1d1a      	adds	r2, r3, #4
 800718e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007190:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007194:	4619      	mov	r1, r3
 8007196:	4610      	mov	r0, r2
 8007198:	f005 fb6c 	bl	800c874 <VL53L1_hist_copy_and_scale_ambient_info>
 800719c:	4603      	mov	r3, r0
 800719e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53L1_ERROR_NONE)
 80071a2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f040 8220 	bne.w	80075ec <VL53L1_get_device_results+0x54e>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80071ac:	f107 0313 	add.w	r3, r7, #19
 80071b0:	4619      	mov	r1, r3
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f008 f91a 	bl	800f3ec <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 80071b8:	7cfb      	ldrb	r3, [r7, #19]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <VL53L1_get_device_results+0x124>
			histo_merge_nb = 1;
 80071be:	2301      	movs	r3, #1
 80071c0:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 80071c2:	7cfb      	ldrb	r3, [r7, #19]
 80071c4:	3b01      	subs	r3, #1
 80071c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (merge_enabled)
 80071ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d007      	beq.n	80071e2 <VL53L1_get_device_results+0x144>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 80071d2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80071d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d8:	3202      	adds	r2, #2
 80071da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80071de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e0:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 80071e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071e4:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 80071e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ea:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 80071ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80071f6:	4619      	mov	r1, r3
 80071f8:	4610      	mov	r0, r2
 80071fa:	f005 fa41 	bl	800c680 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 80071fe:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8007200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007202:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007206:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800720a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800720c:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800720e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007210:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8007214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007216:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 8007218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800721a:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 800721c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800721e:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8007222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007224:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8007226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007228:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 800722c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800722e:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8007230:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007232:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8007236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007238:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 800723c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800723e:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8007242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007244:	f893 2375 	ldrb.w	r2, [r3, #885]	; 0x375
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8007248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800724a:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 800724e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007250:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8007254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007256:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8007258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800725a:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 800725e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007260:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8007262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007264:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8007266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007268:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 800726a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800726c:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 800726e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007270:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53L1_copy_rtn_good_spads_to_buffer(
 8007272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007274:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8007278:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800727a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800727e:	4619      	mov	r1, r3
 8007280:	4610      	mov	r0, r2
 8007282:	f004 fc2f 	bl	800bae4 <VL53L1_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8007286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007288:	795b      	ldrb	r3, [r3, #5]
 800728a:	2b03      	cmp	r3, #3
 800728c:	d048      	beq.n	8007320 <VL53L1_get_device_results+0x282>
 800728e:	2b03      	cmp	r3, #3
 8007290:	dc56      	bgt.n	8007340 <VL53L1_get_device_results+0x2a2>
 8007292:	2b01      	cmp	r3, #1
 8007294:	d002      	beq.n	800729c <VL53L1_get_device_results+0x1fe>
 8007296:	2b02      	cmp	r3, #2
 8007298:	d02e      	beq.n	80072f8 <VL53L1_get_device_results+0x25a>
 800729a:	e051      	b.n	8007340 <VL53L1_get_device_results+0x2a2>

		case VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 800729c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800729e:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
 80072a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			VL53L1_hist_combine_mm1_mm2_offsets(
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 80072b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072b4:	f893 e406 	ldrb.w	lr, [r3, #1030]	; 0x406
 80072b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072ba:	f893 8407 	ldrb.w	r8, [r3, #1031]	; 0x407
 80072be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80072c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072c6:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 80072ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80072cc:	319c      	adds	r1, #156	; 0x9c
 80072ce:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80072d0:	f500 7007 	add.w	r0, r0, #540	; 0x21c
 80072d4:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 80072d8:	b2a4      	uxth	r4, r4
 80072da:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 80072dc:	351c      	adds	r5, #28
 80072de:	9505      	str	r5, [sp, #20]
 80072e0:	9404      	str	r4, [sp, #16]
 80072e2:	9003      	str	r0, [sp, #12]
 80072e4:	9102      	str	r1, [sp, #8]
 80072e6:	9201      	str	r2, [sp, #4]
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	4643      	mov	r3, r8
 80072ec:	4672      	mov	r2, lr
 80072ee:	4661      	mov	r1, ip
 80072f0:	4630      	mov	r0, r6
 80072f2:	f006 fa36 	bl	800d762 <VL53L1_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 80072f6:	e027      	b.n	8007348 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_ZONE_OFFSETS:
			zid = pdev->ll_state.rd_zone_id;
 80072f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80072fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			pHP->range_offset_mm = (int16_t)(
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 8007302:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007306:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007308:	4613      	mov	r3, r2
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	1a9b      	subs	r3, r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	440b      	add	r3, r1
 8007312:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8007316:	681b      	ldr	r3, [r3, #0]
			pHP->range_offset_mm = (int16_t)(
 8007318:	b21a      	sxth	r2, r3
 800731a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800731c:	839a      	strh	r2, [r3, #28]
		break;
 800731e:	e013      	b.n	8007348 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8007320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007322:	331c      	adds	r3, #28
 8007324:	4619      	mov	r1, r3
 8007326:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007328:	f7fd fcf7 	bl	8004d1a <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 800732c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800732e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8007332:	b29b      	uxth	r3, r3
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	b29b      	uxth	r3, r3
 8007338:	b21a      	sxth	r2, r3
 800733a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800733c:	839a      	strh	r2, [r3, #28]
		break;
 800733e:	e003      	b.n	8007348 <VL53L1_get_device_results+0x2aa>
		default:
			pHP->range_offset_mm = 0;
 8007340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007342:	2200      	movs	r2, #0
 8007344:	839a      	strh	r2, [r3, #28]
		break;
 8007346:	bf00      	nop

		}



		if (status != VL53L1_ERROR_NONE)
 8007348:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800734c:	2b00      	cmp	r3, #0
 800734e:	f040 814f 	bne.w	80075f0 <VL53L1_get_device_results+0x552>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53L1_calc_max_effective_spads(
 8007352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007354:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 8007358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800735a:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 800735e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007360:	f503 7207 	add.w	r2, r3, #540	; 0x21c
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8007364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007366:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
		VL53L1_calc_max_effective_spads(
 800736a:	b29c      	uxth	r4, r3
 800736c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800736e:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	4623      	mov	r3, r4
 8007376:	f006 fb99 	bl	800daac <VL53L1_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53L1_get_dmax_calibration_data(
 800737a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800737c:	7999      	ldrb	r1, [r3, #6]
 800737e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007380:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8007384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 ff7b 	bl	8008282 <VL53L1_get_dmax_calibration_data>
 800738c:	4603      	mov	r3, r0
 800738e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				pdev->ll_state.rd_zone_id,
				pdmax_cal);



		if (status != VL53L1_ERROR_NONE)
 8007392:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007396:	2b00      	cmp	r3, #0
 8007398:	f040 812c 	bne.w	80075f4 <VL53L1_get_device_results+0x556>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_ipp_hist_process_data(
 800739c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800739e:	f503 7526 	add.w	r5, r3, #664	; 0x298
 80073a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073a4:	f503 7616 	add.w	r6, r3, #600	; 0x258
 80073a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073aa:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 80073ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073b0:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 80073b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073b6:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80073ba:	3308      	adds	r3, #8
				pdev->wArea2,
 80073bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073be:	f502 52d2 	add.w	r2, r2, #6720	; 0x1a40
 80073c2:	3208      	adds	r2, #8
		status = VL53L1_ipp_hist_process_data(
 80073c4:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80073c6:	9405      	str	r4, [sp, #20]
 80073c8:	f107 0413 	add.w	r4, r7, #19
 80073cc:	9404      	str	r4, [sp, #16]
 80073ce:	9203      	str	r2, [sp, #12]
 80073d0:	9302      	str	r3, [sp, #8]
 80073d2:	9001      	str	r0, [sp, #4]
 80073d4:	9100      	str	r1, [sp, #0]
 80073d6:	4633      	mov	r3, r6
 80073d8:	462a      	mov	r2, r5
 80073da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f00e fb45 	bl	8015a6c <VL53L1_ipp_hist_process_data>
 80073e2:	4603      	mov	r3, r0
 80073e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((merge_enabled) && (histo_merge_nb > 1))
 80073e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d050      	beq.n	8007492 <VL53L1_get_device_results+0x3f4>
 80073f0:	7cfb      	ldrb	r3, [r7, #19]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d94d      	bls.n	8007492 <VL53L1_get_device_results+0x3f4>
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80073f6:	2300      	movs	r3, #0
 80073f8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80073fc:	e045      	b.n	800748a <VL53L1_get_device_results+0x3ec>
			pdata = &(presults->VL53L1_p_002[i]);
 80073fe:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007402:	224c      	movs	r2, #76	; 0x4c
 8007404:	fb02 f303 	mul.w	r3, r2, r3
 8007408:	3310      	adds	r3, #16
 800740a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800740c:	4413      	add	r3, r2
 800740e:	3304      	adds	r3, #4
 8007410:	623b      	str	r3, [r7, #32]
			pdata->VL53L1_p_020 /= histo_merge_nb;
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	7cfa      	ldrb	r2, [r7, #19]
 8007418:	fbb3 f2f2 	udiv	r2, r3, r2
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53L1_p_021 /= histo_merge_nb;
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007424:	7cfa      	ldrb	r2, [r7, #19]
 8007426:	fbb3 f2f2 	udiv	r2, r3, r2
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 /= histo_merge_nb;
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007432:	7cfa      	ldrb	r2, [r7, #19]
 8007434:	fb93 f2f2 	sdiv	r2, r3, r2
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007440:	461a      	mov	r2, r3
 8007442:	7cfb      	ldrb	r3, [r7, #19]
 8007444:	fb92 f3f3 	sdiv	r3, r2, r3
 8007448:	b29a      	uxth	r2, r3
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007452:	461a      	mov	r2, r3
 8007454:	7cfb      	ldrb	r3, [r7, #19]
 8007456:	fb92 f3f3 	sdiv	r3, r2, r3
 800745a:	b29a      	uxth	r2, r3
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007464:	461a      	mov	r2, r3
 8007466:	7cfb      	ldrb	r3, [r7, #19]
 8007468:	fb92 f3f3 	sdiv	r3, r2, r3
 800746c:	b29a      	uxth	r2, r3
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_012 /= histo_merge_nb;
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007476:	7cfa      	ldrb	r2, [r7, #19]
 8007478:	fbb3 f2f2 	udiv	r2, r3, r2
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8007480:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007484:	3301      	adds	r3, #1
 8007486:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800748a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800748e:	2b03      	cmp	r3, #3
 8007490:	d9b5      	bls.n	80073fe <VL53L1_get_device_results+0x360>
		}


		if (status != VL53L1_ERROR_NONE)
 8007492:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007496:	2b00      	cmp	r3, #0
 8007498:	f040 80ae 	bne.w	80075f8 <VL53L1_get_device_results+0x55a>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_hist_wrap_dmax(
 800749c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800749e:	f503 7016 	add.w	r0, r3, #600	; 0x258
 80074a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074a4:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 80074a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074aa:	330e      	adds	r3, #14
 80074ac:	461a      	mov	r2, r3
 80074ae:	f006 f922 	bl	800d6f6 <VL53L1_hist_wrap_dmax>
 80074b2:	4603      	mov	r3, r0
 80074b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53L1_ERROR_NONE)
 80074b8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f040 809d 	bne.w	80075fc <VL53L1_get_device_results+0x55e>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80074c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 80074cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 80074d0:	011b      	lsls	r3, r3, #4
 80074d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074d4:	4413      	add	r3, r2
 80074d6:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 80074d8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 80074dc:	4613      	mov	r3, r2
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	4413      	add	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80074e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074ea:	4413      	add	r3, r2
 80074ec:	f103 0208 	add.w	r2, r3, #8
 80074f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f005 fc1d 	bl	800cd32 <VL53L1_hist_phase_consistency_check>
 80074f8:	4603      	mov	r3, r0
 80074fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53L1_ERROR_NONE)
 80074fe:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007502:	2b00      	cmp	r3, #0
 8007504:	d17c      	bne.n	8007600 <VL53L1_get_device_results+0x562>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8007506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007508:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800750c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8007510:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8007514:	011b      	lsls	r3, r3, #4
 8007516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007518:	4413      	add	r3, r2
 800751a:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 800751c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8007520:	4613      	mov	r3, r2
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	4413      	add	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800752c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800752e:	4413      	add	r3, r2
 8007530:	f103 0208 	add.w	r2, r3, #8
 8007534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007536:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f006 f883 	bl	800d646 <VL53L1_hist_xmonitor_consistency_check>
 8007540:	4603      	mov	r3, r0
 8007542:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53L1_ERROR_NONE)
 8007546:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800754a:	2b00      	cmp	r3, #0
 800754c:	d15a      	bne.n	8007604 <VL53L1_get_device_results+0x566>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 800754e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007550:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007554:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	2210      	movs	r2, #16
 800755c:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 800755e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007560:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007564:	3301      	adds	r3, #1
 8007566:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 800756c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007572:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8007574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007576:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 800757a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800757e:	429a      	cmp	r2, r3
 8007580:	d222      	bcs.n	80075c8 <VL53L1_get_device_results+0x52a>

			phist_info =
			&(pZH->VL53L1_p_002[zid]);
 8007582:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			phist_info =
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800758a:	4413      	add	r3, r2
 800758c:	3304      	adds	r3, #4
 800758e:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8007590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007592:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8007594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007596:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8007598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759a:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 800759c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800759e:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 80075a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a2:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 80075a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075a8:	805a      	strh	r2, [r3, #2]

			phist_info->VL53L1_p_009 =
				pHD->VL53L1_p_009;
 80075aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ac:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53L1_p_009 =
 80075b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075b2:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 80075b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 80075ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075bc:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 80075be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 80075c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c6:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53L1_ERROR_NONE)
 80075c8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d11b      	bne.n	8007608 <VL53L1_get_device_results+0x56a>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_hist_copy_results_to_sys_and_core(
 80075d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075d2:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 80075d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075d8:	f203 32aa 	addw	r2, r3, #938	; 0x3aa
 80075dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075de:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80075e2:	331c      	adds	r3, #28
 80075e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075e6:	f006 fbbe 	bl	800dd66 <VL53L1_hist_copy_results_to_sys_and_core>
 80075ea:	e00e      	b.n	800760a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80075ec:	bf00      	nop
 80075ee:	e00c      	b.n	800760a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80075f0:	bf00      	nop
 80075f2:	e00a      	b.n	800760a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80075f4:	bf00      	nop
 80075f6:	e008      	b.n	800760a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80075f8:	bf00      	nop
 80075fa:	e006      	b.n	800760a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80075fc:	bf00      	nop
 80075fe:	e004      	b.n	800760a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8007600:	bf00      	nop
 8007602:	e002      	b.n	800760a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8007604:	bf00      	nop
 8007606:	e000      	b.n	800760a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8007608:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 800760a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760c:	785b      	ldrb	r3, [r3, #1]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d036      	beq.n	8007680 <VL53L1_get_device_results+0x5e2>
			if (pstate->rd_device_state !=
 8007612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007614:	79db      	ldrb	r3, [r3, #7]
 8007616:	2b06      	cmp	r3, #6
 8007618:	d00a      	beq.n	8007630 <VL53L1_get_device_results+0x592>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53L1_ERROR_NONE) {
 800761a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800761e:	2b00      	cmp	r3, #0
 8007620:	d106      	bne.n	8007630 <VL53L1_get_device_results+0x592>
					status = VL53L1_dynamic_zone_update(
 8007622:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f006 fc73 	bl	800df10 <VL53L1_dynamic_zone_update>
 800762a:	4603      	mov	r3, r0
 800762c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8007630:	2300      	movs	r3, #0
 8007632:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8007636:	e015      	b.n	8007664 <VL53L1_get_device_results+0x5c6>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8007638:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800763a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 800763e:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <VL53L1_get_device_results+0x5ac>
 8007646:	2103      	movs	r1, #3
 8007648:	e000      	b.n	800764c <VL53L1_get_device_results+0x5ae>
 800764a:	2101      	movs	r1, #1
 800764c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007650:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007652:	4413      	add	r3, r2
 8007654:	460a      	mov	r2, r1
 8007656:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800765a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800765e:	3301      	adds	r3, #1
 8007660:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8007664:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007668:	2b0f      	cmp	r3, #15
 800766a:	d9e5      	bls.n	8007638 <VL53L1_get_device_results+0x59a>
					VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53L1_ERROR_NONE)
 800766c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007670:	2b00      	cmp	r3, #0
 8007672:	d105      	bne.n	8007680 <VL53L1_get_device_results+0x5e2>
				status = VL53L1_multizone_hist_bins_update(Dev);
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f006 fcc6 	bl	800e006 <VL53L1_multizone_hist_bins_update>
 800767a:	4603      	mov	r3, r0
 800767c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53L1_ERROR_NONE)
 8007680:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007684:	2b00      	cmp	r3, #0
 8007686:	d105      	bne.n	8007694 <VL53L1_get_device_results+0x5f6>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f007 f9d3 	bl	800ea34 <VL53L1_dynamic_xtalk_correction_corrector>
 800768e:	4603      	mov	r3, r0
 8007690:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53L1_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (merge_enabled)
 8007694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007698:	2b00      	cmp	r3, #0
 800769a:	d043      	beq.n	8007724 <VL53L1_get_device_results+0x686>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80076a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	e03e      	b.n	8007724 <VL53L1_get_device_results+0x686>
	} else {

		if (status == VL53L1_ERROR_NONE)
 80076a6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d107      	bne.n	80076be <VL53L1_get_device_results+0x620>
			status = VL53L1_get_measurement_results(
 80076ae:	7afb      	ldrb	r3, [r7, #11]
 80076b0:	4619      	mov	r1, r3
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f7ff fc35 	bl	8006f22 <VL53L1_get_measurement_results>
 80076b8:	4603      	mov	r3, r0
 80076ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53L1_ERROR_NONE)
 80076be:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10d      	bne.n	80076e2 <VL53L1_get_device_results+0x644>
			VL53L1_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 80076c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076c8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53L1_copy_sys_and_core_results_to_range_results(
 80076cc:	4618      	mov	r0, r3
 80076ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076d0:	f203 31aa 	addw	r1, r3, #938	; 0x3aa
 80076d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076d6:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 80076da:	321c      	adds	r2, #28
 80076dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076de:	f000 fc1f 	bl	8007f20 <VL53L1_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 80076e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e4:	785b      	ldrb	r3, [r3, #1]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d11c      	bne.n	8007724 <VL53L1_get_device_results+0x686>

			if ((status == VL53L1_ERROR_NONE) &&
 80076ea:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10d      	bne.n	800770e <VL53L1_get_device_results+0x670>
				(pL->low_power_auto_range_count == 0)) {
 80076f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f4:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53L1_ERROR_NONE) &&
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d109      	bne.n	800770e <VL53L1_get_device_results+0x670>

				status =
				VL53L1_low_power_auto_setup_manual_calibration(
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f007 fe24 	bl	800f348 <VL53L1_low_power_auto_setup_manual_calibration>
 8007700:	4603      	mov	r3, r0
 8007702:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8007706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007708:	2201      	movs	r2, #1
 800770a:	709a      	strb	r2, [r3, #2]
 800770c:	e00a      	b.n	8007724 <VL53L1_get_device_results+0x686>
			} else if ((status == VL53L1_ERROR_NONE) &&
 800770e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007712:	2b00      	cmp	r3, #0
 8007714:	d106      	bne.n	8007724 <VL53L1_get_device_results+0x686>
				(pL->low_power_auto_range_count == 1)) {
 8007716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007718:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53L1_ERROR_NONE) &&
 800771a:	2b01      	cmp	r3, #1
 800771c:	d102      	bne.n	8007724 <VL53L1_get_device_results+0x686>
				pL->low_power_auto_range_count = 2;
 800771e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007720:	2202      	movs	r2, #2
 8007722:	709a      	strb	r2, [r3, #2]
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8007724:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007726:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800772a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800772c:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800772e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007730:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8007734:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007736:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8007738:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800773a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800773e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007740:	709a      	strb	r2, [r3, #2]

	if (status == VL53L1_ERROR_NONE) {
 8007742:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007746:	2b00      	cmp	r3, #0
 8007748:	f040 80b0 	bne.w	80078ac <VL53L1_get_device_results+0x80e>


		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 800774c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800774e:	2210      	movs	r2, #16
 8007750:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8007754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007756:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800775a:	3301      	adds	r3, #1
 800775c:	b2da      	uxtb	r2, r3
 800775e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007760:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 8007764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007766:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800776a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		if (zid < pres->zone_results.max_zones) {
 800776e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007770:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8007774:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007778:	429a      	cmp	r2, r3
 800777a:	f080 8097 	bcs.w	80078ac <VL53L1_get_device_results+0x80e>

			pobjects =
			&(pres->zone_results.VL53L1_p_002[zid]);
 800777e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
			pobjects =
 8007782:	4613      	mov	r3, r2
 8007784:	011b      	lsls	r3, r3, #4
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800778e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007790:	4413      	add	r3, r2
 8007792:	3308      	adds	r3, #8
 8007794:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8007796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007798:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 800779a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800779c:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 800779e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077a0:	785a      	ldrb	r2, [r3, #1]
 80077a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077a4:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 80077a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077a8:	789a      	ldrb	r2, [r3, #2]
 80077aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077ac:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 80077ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077b0:	78da      	ldrb	r2, [r3, #3]
 80077b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077b4:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53L1_p_020 =
				presults->xmonitor.VL53L1_p_020;
 80077b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077b8:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53L1_p_020 =
 80077bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077be:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53L1_p_021 =
				presults->xmonitor.VL53L1_p_021;
 80077c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077c2:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53L1_p_021 =
 80077c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077c8:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53L1_p_014 =
				presults->xmonitor.VL53L1_p_014;
 80077ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077cc:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53L1_p_014 =
 80077d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 80077d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077d8:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 80077dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 80077e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077e4:	7c5a      	ldrb	r2, [r3, #17]
 80077e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077e8:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 80077ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077ec:	7c9a      	ldrb	r2, [r3, #18]
 80077ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077f0:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 80077f2:	2300      	movs	r3, #0
 80077f4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80077f8:	e052      	b.n	80078a0 <VL53L1_get_device_results+0x802>
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
					presults->VL53L1_p_002[i].VL53L1_p_020;
 80077fa:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 80077fe:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_020;
 8007802:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007804:	204c      	movs	r0, #76	; 0x4c
 8007806:	fb00 f303 	mul.w	r3, r0, r3
 800780a:	440b      	add	r3, r1
 800780c:	3338      	adds	r3, #56	; 0x38
 800780e:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8007810:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007812:	4613      	mov	r3, r2
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4403      	add	r3, r0
 800781c:	3308      	adds	r3, #8
 800781e:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8007820:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8007824:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8007828:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800782a:	204c      	movs	r0, #76	; 0x4c
 800782c:	fb00 f303 	mul.w	r3, r0, r3
 8007830:	440b      	add	r3, r1
 8007832:	333c      	adds	r3, #60	; 0x3c
 8007834:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8007836:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007838:	4613      	mov	r3, r2
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4403      	add	r3, r0
 8007842:	330c      	adds	r3, #12
 8007844:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
					presults->VL53L1_p_002[i].VL53L1_p_014;
 8007846:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 800784a:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_014;
 800784e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007850:	204c      	movs	r0, #76	; 0x4c
 8007852:	fb00 f303 	mul.w	r3, r0, r3
 8007856:	440b      	add	r3, r1
 8007858:	3354      	adds	r3, #84	; 0x54
 800785a:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 800785c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800785e:	4613      	mov	r3, r2
 8007860:	005b      	lsls	r3, r3, #1
 8007862:	4413      	add	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	440b      	add	r3, r1
 8007868:	3310      	adds	r3, #16
 800786a:	4602      	mov	r2, r0
 800786c:	801a      	strh	r2, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
					presults->VL53L1_p_002[i].range_status;
 800786e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].range_status =
 8007872:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].range_status;
 8007876:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007878:	204c      	movs	r0, #76	; 0x4c
 800787a:	fb00 f303 	mul.w	r3, r0, r3
 800787e:	440b      	add	r3, r1
 8007880:	335e      	adds	r3, #94	; 0x5e
 8007882:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
 8007884:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007886:	4613      	mov	r3, r2
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	4413      	add	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	440b      	add	r3, r1
 8007890:	3312      	adds	r3, #18
 8007892:	4602      	mov	r2, r0
 8007894:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8007896:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800789a:	3301      	adds	r3, #1
 800789c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80078a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078a2:	7c9b      	ldrb	r3, [r3, #18]
 80078a4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d3a6      	bcc.n	80077fa <VL53L1_get_device_results+0x75c>
		}
	}



	memcpy(
 80078ac:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80078b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f013 f8ba 	bl	801aa2c <memcpy>
		presults,
		sizeof(VL53L1_range_results_t));



	if (status == VL53L1_ERROR_NONE)
 80078b8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d105      	bne.n	80078cc <VL53L1_get_device_results+0x82e>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f003 ff35 	bl	800b730 <VL53L1_check_ll_driver_rd_state>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80078cc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3768      	adds	r7, #104	; 0x68
 80078d4:	46bd      	mov	sp, r7
 80078d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080078da <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	70fb      	strb	r3, [r7, #3]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]





	if (status == VL53L1_ERROR_NONE)
 80078ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d107      	bne.n	8007902 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 80078f2:	78fb      	ldrb	r3, [r7, #3]
 80078f4:	2203      	movs	r2, #3
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7fe fff3 	bl	80068e4 <VL53L1_init_and_start_range>
 80078fe:	4603      	mov	r3, r0
 8007900:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8007902:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
	...

08007910 <VL53L1_get_histogram_bin_data>:


VL53L1_Error VL53L1_get_histogram_bin_data(
		VL53L1_DEV                   Dev,
		VL53L1_histogram_bin_data_t *pdata)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b0d2      	sub	sp, #328	; 0x148
 8007914:	af00      	add	r7, sp, #0
 8007916:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800791a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800791e:	6018      	str	r0, [r3, #0]
 8007920:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007924:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007928:	6019      	str	r1, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800792a:	2300      	movs	r3, #0
 800792c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev =
 8007930:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007934:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3318      	adds	r3, #24
 800793c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8007940:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007944:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800794e:	3308      	adds	r3, #8
 8007950:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53L1_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8007954:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007958:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800795c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8007960:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007964:	f203 3342 	addw	r3, r3, #834	; 0x342
 8007968:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 800796c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007970:	f203 3362 	addw	r3, r3, #866	; 0x362
 8007974:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8007978:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800797c:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8007980:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_range_results_t        *presults  = &(pres->range_results);
 8007984:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007988:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53L1_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 800798c:	f107 030c 	add.w	r3, r7, #12
 8007990:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8007994:	2300      	movs	r3, #0
 8007996:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 800799a:	2300      	movs	r3, #0
 800799c:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 80079a0:	2300      	movs	r3, #0
 80079a2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint32_t   pll_period_us            = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t    i                        = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	int32_t    hist_merge				= 0;
 80079be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80079c2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80079c6:	2200      	movs	r2, #0
 80079c8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 80079ca:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10d      	bne.n	80079ee <VL53L1_get_histogram_bin_data+0xde>
		status = VL53L1_ReadMulti(
 80079d2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80079d6:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 80079da:	2353      	movs	r3, #83	; 0x53
 80079dc:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80079e0:	2188      	movs	r1, #136	; 0x88
 80079e2:	6800      	ldr	r0, [r0, #0]
 80079e4:	f00d fe32 	bl	801564c <VL53L1_ReadMulti>
 80079e8:	4603      	mov	r3, r0
 80079ea:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53L1_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 80079ee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80079f2:	781a      	ldrb	r2, [r3, #0]
 80079f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80079f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8007a02:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007a06:	785a      	ldrb	r2, [r3, #1]
 8007a08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007a0c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8007a16:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007a1a:	789a      	ldrb	r2, [r3, #2]
 8007a1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007a20:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8007a2a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007a2e:	78da      	ldrb	r2, [r3, #3]
 8007a30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007a34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 8007a3e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007a42:	3304      	adds	r3, #4
 8007a44:	4619      	mov	r1, r3
 8007a46:	2002      	movs	r0, #2
 8007a48:	f004 fb75 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8007a50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007a54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8007a5e:	234e      	movs	r3, #78	; 0x4e
 8007a60:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8007a64:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007a68:	f107 020c 	add.w	r2, r7, #12
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8007a72:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007a76:	2002      	movs	r0, #2
 8007a78:	f004 fb5d 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8007a80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007a84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8007a8e:	2350      	movs	r3, #80	; 0x50
 8007a90:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__VCSEL_START -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8007a94:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007a98:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007a9c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8007aa0:	5cd2      	ldrb	r2, [r2, r3]
 8007aa2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007aa6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8007ab0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007ab4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8007abe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac6:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8007aca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007ace:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8007ad8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ae0:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2



	i2c_buffer_offset_bytes =
 8007ae4:	2351      	movs	r3, #81	; 0x51
 8007ae6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8007aea:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007aee:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007af2:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8007af6:	5cd3      	ldrb	r3, [r2, r3]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8007afe:	2352      	movs	r3, #82	; 0x52
 8007b00:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8007b04:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007b08:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007b0c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8007b10:	5cd2      	ldrb	r2, [r2, r3]
 8007b12:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8007b16:	4413      	add	r3, r2
 8007b18:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8007b1c:	234d      	movs	r3, #77	; 0x4d
 8007b1e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8007b22:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007b26:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007b2a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8007b2e:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8007b32:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8007b34:	2306      	movs	r3, #6
 8007b36:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_0_2 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8007b3a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007b3e:	f107 020c 	add.w	r2, r7, #12
 8007b42:	4413      	add	r3, r2
 8007b44:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8007b4e:	e01a      	b.n	8007b86 <VL53L1_get_histogram_bin_data+0x276>
		pdata->bin_data[bin] =
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8007b50:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007b54:	2003      	movs	r0, #3
 8007b56:	f004 fb8d 	bl	800c274 <VL53L1_i2c_decode_uint32_t>
 8007b5a:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8007b5c:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8007b60:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8007b62:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007b66:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3206      	adds	r2, #6
 8007b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8007b72:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007b76:	3303      	adds	r3, #3
 8007b78:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8007b7c:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8007b80:	3301      	adds	r3, #1
 8007b82:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8007b86:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8007b8a:	2b17      	cmp	r3, #23
 8007b8c:	d9e0      	bls.n	8007b50 <VL53L1_get_histogram_bin_data+0x240>
	}

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 8007b8e:	f107 0208 	add.w	r2, r7, #8
 8007b92:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007b96:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007b9a:	f248 018d 	movw	r1, #32909	; 0x808d
 8007b9e:	6818      	ldr	r0, [r3, #0]
 8007ba0:	f000 fbd0 	bl	8008344 <VL53L1_get_tuning_parm>
			&hist_merge);

	if (pdata->result__stream_count == 0) {
 8007ba4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007ba8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d118      	bne.n	8007be8 <VL53L1_get_histogram_bin_data+0x2d8>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8007bb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007bba:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8007bbe:	3318      	adds	r3, #24
 8007bc0:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f012 ff3e 	bl	801aa48 <memset>
		pdev->bin_rec_pos = 0;
 8007bcc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
		pdev->pos_before_next_recom = 0;
 8007bda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
	}

	if (hist_merge == 1)
 8007be8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007bec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d10b      	bne.n	8007c0e <VL53L1_get_histogram_bin_data+0x2fe>
		vl53l1_histo_merge(Dev, pdata);
 8007bf6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007bfa:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8007bfe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c02:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007c06:	6811      	ldr	r1, [r2, #0]
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	f7fd f97e 	bl	8004f0a <vl53l1_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8007c0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007c12:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8007c16:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c1a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	709a      	strb	r2, [r3, #2]
	pdata->VL53L1_p_022               = 0;
 8007c22:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c26:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023             = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8007c30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2218      	movs	r2, #24
 8007c3c:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8007c3e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c42:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2218      	movs	r2, #24
 8007c4a:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8007c4c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007c50:	78da      	ldrb	r2, [r3, #3]
 8007c52:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c56:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8007c60:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007c64:	799b      	ldrb	r3, [r3, #6]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	011b      	lsls	r3, r3, #4
 8007c6a:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8007c6c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c70:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 8007c7a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c7e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8007c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c8c:	7c1b      	ldrb	r3, [r3, #16]
 8007c8e:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8007c90:	4413      	add	r3, r2
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c98:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53L1_p_019 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8007ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca6:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53L1_p_019 =
 8007ca8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007cac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 8007cb6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007cba:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8007cbe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007cc2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007cc6:	6811      	ldr	r1, [r2, #0]
 8007cc8:	6818      	ldr	r0, [r3, #0]
 8007cca:	f004 fed4 	bl	800ca76 <VL53L1_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8007cce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007cd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d117      	bne.n	8007d0a <VL53L1_get_histogram_bin_data+0x3fa>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8007cda:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007cde:	791b      	ldrb	r3, [r3, #4]
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	021b      	lsls	r3, r3, #8
 8007ce4:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8007ce6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007cea:	795b      	ldrb	r3, [r3, #5]
 8007cec:	b29b      	uxth	r3, r3
		encoded_timeout =
 8007cee:	4413      	add	r3, r2
 8007cf0:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 8007cf4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007cf8:	799a      	ldrb	r2, [r3, #6]
 8007cfa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007cfe:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8007d08:	e016      	b.n	8007d38 <VL53L1_get_histogram_bin_data+0x428>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8007d0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007d0e:	79db      	ldrb	r3, [r3, #7]
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8007d16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007d1a:	7a1b      	ldrb	r3, [r3, #8]
 8007d1c:	b29b      	uxth	r3, r3
		encoded_timeout =
 8007d1e:	4413      	add	r3, r2
 8007d20:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 8007d24:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007d28:	7a5a      	ldrb	r2, [r3, #9]
 8007d2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007d2e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8007d38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007d3c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2200      	movs	r2, #0
 8007d44:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8007d46:	2300      	movs	r3, #0
 8007d48:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8007d4c:	e01f      	b.n	8007d8e <VL53L1_get_histogram_bin_data+0x47e>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8007d4e:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8007d52:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007d56:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8007d5a:	6812      	ldr	r2, [r2, #0]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	7b1b      	ldrb	r3, [r3, #12]
 8007d60:	f003 0307 	and.w	r3, r3, #7
 8007d64:	2b07      	cmp	r3, #7
 8007d66:	d10d      	bne.n	8007d84 <VL53L1_get_histogram_bin_data+0x474>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8007d68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007d6c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	7adb      	ldrb	r3, [r3, #11]
 8007d74:	3304      	adds	r3, #4
 8007d76:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8007d78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007d7c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8007d84:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8007d88:	3301      	adds	r3, #1
 8007d8a:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8007d8e:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8007d92:	2b05      	cmp	r3, #5
 8007d94:	d9db      	bls.n	8007d4e <VL53L1_get_histogram_bin_data+0x43e>
	}

	pdata->total_periods_elapsed =
		VL53L1_decode_timeout(encoded_timeout);
 8007d96:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f004 fcdb 	bl	800c756 <VL53L1_decode_timeout>
 8007da0:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8007da2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007da6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 8007db0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007db4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f007 fb54 	bl	800f46c <VL53L1_calc_pll_period_us>
 8007dc4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8007dc8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007dcc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8007ddc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007de0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53L1_duration_maths(
 8007dea:	4619      	mov	r1, r3
 8007dec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007df4:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8007df8:	f007 fb4f 	bl	800f49a <VL53L1_duration_maths>
 8007dfc:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8007dfe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e02:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8007e0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53L1_hist_calc_zero_distance_phase(pdata);
 8007e1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e20:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	f007 fc5e 	bl	800f6e6 <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 8007e2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e2e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e32:	6818      	ldr	r0, [r3, #0]
 8007e34:	f008 f875 	bl	800ff22 <VL53L1_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 8007e38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007e3c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007e40:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8007e4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007e50:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8007e54:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e58:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 8007e60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e64:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	789b      	ldrb	r3, [r3, #2]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	4613      	mov	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	005b      	lsls	r3, r3, #1
 8007e76:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8007e7a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007e7e:	4413      	add	r3, r2
 8007e80:	3302      	adds	r3, #2
 8007e82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8007e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e8a:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8007e8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e90:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8007e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e9e:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8007ea0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007ea4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8007eae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8007eb6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007eba:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8007ec4:	f003 031f 	and.w	r3, r3, #31
 8007ec8:	2b11      	cmp	r3, #17
 8007eca:	bf8c      	ite	hi
 8007ecc:	2201      	movhi	r2, #1
 8007ece:	2200      	movls	r2, #0
 8007ed0:	b2d2      	uxtb	r2, r2
 8007ed2:	2a00      	cmp	r2, #0
 8007ed4:	d11b      	bne.n	8007f0e <VL53L1_get_histogram_bin_data+0x5fe>
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	409a      	lsls	r2, r3
 8007eda:	4b10      	ldr	r3, [pc, #64]	; (8007f1c <VL53L1_get_histogram_bin_data+0x60c>)
 8007edc:	4013      	ands	r3, r2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	bf14      	ite	ne
 8007ee2:	2301      	movne	r3, #1
 8007ee4:	2300      	moveq	r3, #0
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d010      	beq.n	8007f0e <VL53L1_get_histogram_bin_data+0x5fe>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8007eec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007ef0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8007efa:	f003 031f 	and.w	r3, r3, #31
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007f04:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53L1_ERROR_RANGE_ERROR;
 8007f06:	23fa      	movs	r3, #250	; 0xfa
 8007f08:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8007f0c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8007f0e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	0002200e 	.word	0x0002200e

08007f20 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b08b      	sub	sp, #44	; 0x2c
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
 8007f2c:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8007f34:	2300      	movs	r3, #0
 8007f36:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	78da      	ldrb	r2, [r3, #3]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	2204      	movs	r2, #4
 8007f54:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	8a1b      	ldrh	r3, [r3, #16]
 8007f60:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	8a9b      	ldrh	r3, [r3, #20]
 8007f66:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	8a5b      	ldrh	r3, [r3, #18]
 8007f6c:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f74:	e00b      	b.n	8007f8e <VL53L1_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53L1_p_007[i] = 0;
 8007f76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	4413      	add	r3, r2
 8007f80:	2200      	movs	r2, #0
 8007f82:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8007f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f88:	3301      	adds	r3, #1
 8007f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	d9ef      	bls.n	8007f76 <VL53L1_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53L1_p_002[0]);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	3314      	adds	r3, #20
 8007f9a:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007fa2:	e0fe      	b.n	80081a2 <VL53L1_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007faa:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	78db      	ldrb	r3, [r3, #3]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10a      	bne.n	8007fd0 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	785b      	ldrb	r3, [r3, #1]
 8007fbe:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8007fc2:	2b09      	cmp	r3, #9
 8007fc4:	d104      	bne.n	8007fd0 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	2213      	movs	r2, #19
 8007fca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8007fce:	e007      	b.n	8007fe0 <VL53L1_copy_sys_and_core_results_to_range_results+0xc0>
				VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	785b      	ldrb	r3, [r3, #1]
 8007fd4:	f003 031f 	and.w	r3, r3, #31
 8007fd8:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53L1_p_015 = 0;
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	721a      	strb	r2, [r3, #8]
		pdata->VL53L1_p_022    = 0;
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	725a      	strb	r2, [r3, #9]
		pdata->VL53L1_p_025   = 0;
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	729a      	strb	r2, [r3, #10]
		pdata->VL53L1_p_026     = 0;
 8007ff2:	6a3b      	ldr	r3, [r7, #32]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	72da      	strb	r2, [r3, #11]
		pdata->VL53L1_p_016   = 0;
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	731a      	strb	r2, [r3, #12]
		pdata->VL53L1_p_027    = 0;
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	2200      	movs	r2, #0
 8008002:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8008004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <VL53L1_copy_sys_and_core_results_to_range_results+0xf2>
 800800c:	2b01      	cmp	r3, #1
 800800e:	d05c      	beq.n	80080ca <VL53L1_copy_sys_and_core_results_to_range_results+0x1aa>
 8008010:	e0a8      	b.n	8008164 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	789b      	ldrb	r3, [r3, #2]
 8008016:	2b07      	cmp	r3, #7
 8008018:	d103      	bne.n	8008022 <VL53L1_copy_sys_and_core_results_to_range_results+0x102>
				VL53L1_DEVICEREPORTSTATUS_MM1)
				pdata->VL53L1_p_006 =
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	8a7a      	ldrh	r2, [r7, #18]
 800801e:	82da      	strh	r2, [r3, #22]
 8008020:	e00b      	b.n	800803a <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	789b      	ldrb	r3, [r3, #2]
 8008026:	2b08      	cmp	r3, #8
 8008028:	d103      	bne.n	8008032 <VL53L1_copy_sys_and_core_results_to_range_results+0x112>
					VL53L1_DEVICEREPORTSTATUS_MM2)
				pdata->VL53L1_p_006 =
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	8aba      	ldrh	r2, [r7, #20]
 800802e:	82da      	strh	r2, [r3, #22]
 8008030:	e003      	b.n	800803a <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd0;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53L1_p_006 =
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	8afa      	ldrh	r2, [r7, #22]
 800803e:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	895b      	ldrh	r3, [r3, #10]
 8008054:	015b      	lsls	r3, r3, #5
 8008056:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800805e:	d302      	bcc.n	8008066 <VL53L1_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8008060:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008064:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	b29a      	uxth	r2, r3
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd0;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53L1_p_014 =
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 800807c:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	fb02 f303 	mul.w	r3, r2, r3
 8008086:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800808e:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	2b00      	cmp	r3, #0
 8008094:	da01      	bge.n	800809a <VL53L1_copy_sys_and_core_results_to_range_results+0x17a>
 8008096:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800809a:	12db      	asrs	r3, r3, #11
 800809c:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	b21a      	sxth	r2, r3
 80080a2:	6a3b      	ldr	r3, [r7, #32]
 80080a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd0;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685a      	ldr	r2, [r3, #4]
			pdata->VL53L1_p_021 =
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd0;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689a      	ldr	r2, [r3, #8]
			pdata->VL53L1_p_013 =
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 80080bc:	6a3b      	ldr	r3, [r7, #32]
 80080be:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd0;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681a      	ldr	r2, [r3, #0]
			pdata->VL53L1_p_020 =
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 80080c8:	e04c      	b.n	8008164 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd1;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53L1_p_006 =
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080e0:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	8bdb      	ldrh	r3, [r3, #30]
 80080ee:	015b      	lsls	r3, r3, #5
 80080f0:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080f8:	d302      	bcc.n	8008100 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 80080fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080fe:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	b29a      	uxth	r2, r3
 8008104:	6a3b      	ldr	r3, [r7, #32]
 8008106:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd1;
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53L1_p_014 =
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 8008116:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	fb02 f303 	mul.w	r3, r2, r3
 8008120:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008128:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	2b00      	cmp	r3, #0
 800812e:	da01      	bge.n	8008134 <VL53L1_copy_sys_and_core_results_to_range_results+0x214>
 8008130:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8008134:	12db      	asrs	r3, r3, #11
 8008136:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	b21a      	sxth	r2, r3
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd1;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	695a      	ldr	r2, [r3, #20]
			pdata->VL53L1_p_021 =
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd1;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	699a      	ldr	r2, [r3, #24]
			pdata->VL53L1_p_013 =
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd1;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	691a      	ldr	r2, [r3, #16]
			pdata->VL53L1_p_020 =
 800815e:	6a3b      	ldr	r3, [r7, #32]
 8008160:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8008162:	bf00      	nop
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 800816e:	6a3b      	ldr	r3, [r7, #32]
 8008170:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	334c      	adds	r3, #76	; 0x4c
 8008196:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8008198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800819c:	3301      	adds	r3, #1
 800819e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80081a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	f67f aefc 	bls.w	8007fa4 <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	2200      	movs	r2, #0
 80081b0:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	785b      	ldrb	r3, [r3, #1]
 80081b6:	f003 031f 	and.w	r3, r3, #31
 80081ba:	2b11      	cmp	r3, #17
 80081bc:	bf8c      	ite	hi
 80081be:	2201      	movhi	r2, #1
 80081c0:	2200      	movls	r2, #0
 80081c2:	b2d2      	uxtb	r2, r2
 80081c4:	2a00      	cmp	r2, #0
 80081c6:	d116      	bne.n	80081f6 <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
 80081c8:	2201      	movs	r2, #1
 80081ca:	409a      	lsls	r2, r3
 80081cc:	4b0d      	ldr	r3, [pc, #52]	; (8008204 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e4>)
 80081ce:	4013      	ands	r3, r2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	bf14      	ite	ne
 80081d4:	2301      	movne	r3, #1
 80081d6:	2300      	moveq	r3, #0
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00b      	beq.n	80081f6 <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	785b      	ldrb	r3, [r3, #1]
 80081e2:	f003 031f 	and.w	r3, r3, #31
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53L1_p_002[0].range_status =
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53L1_DEVICEERROR_NOUPDATE;
	break;
 80081f4:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 80081f6:	bf00      	nop
 80081f8:	372c      	adds	r7, #44	; 0x2c
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	0002200e 	.word	0x0002200e

08008208 <VL53L1_set_zone_dss_config>:


VL53L1_Error VL53L1_set_zone_dss_config(
	VL53L1_DEV                      Dev,
	VL53L1_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8008208:	b480      	push	{r7}
 800820a:	b087      	sub	sp, #28
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008212:	2300      	movs	r3, #0
 8008214:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	3318      	adds	r3, #24
 800821a:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	332c      	adds	r3, #44	; 0x2c
 8008220:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	2b05      	cmp	r3, #5
 8008228:	d109      	bne.n	800823e <VL53L1_set_zone_dss_config+0x36>
		VL53L1_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2202      	movs	r2, #2
 800822e:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
 800823c:	e003      	b.n	8008246 <VL53L1_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 8008246:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800824a:	4618      	mov	r0, r3
 800824c:	371c      	adds	r7, #28
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <VL53L1_set_dmax_mode>:


VL53L1_Error VL53L1_set_dmax_mode(
	VL53L1_DEV               Dev,
	VL53L1_DeviceDmaxMode    dmax_mode)
{
 8008256:	b480      	push	{r7}
 8008258:	b085      	sub	sp, #20
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	460b      	mov	r3, r1
 8008260:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008262:	2300      	movs	r3, #0
 8008264:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	3318      	adds	r3, #24
 800826a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	78fa      	ldrb	r2, [r7, #3]
 8008270:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8008272:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <VL53L1_get_dmax_calibration_data>:
VL53L1_Error VL53L1_get_dmax_calibration_data(
	VL53L1_DEV                      Dev,
	VL53L1_DeviceDmaxMode           dmax_mode,
	uint8_t                         zone_id,
	VL53L1_dmax_calibration_data_t *pdmax_cal)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b088      	sub	sp, #32
 8008286:	af00      	add	r7, sp, #0
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	607b      	str	r3, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	72fb      	strb	r3, [r7, #11]
 8008290:	4613      	mov	r3, r2
 8008292:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008294:	2300      	movs	r3, #0
 8008296:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t    *pdev =
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3318      	adds	r3, #24
 800829c:	61bb      	str	r3, [r7, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80082a4:	3308      	adds	r3, #8
 80082a6:	617b      	str	r3, [r7, #20]
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 80082a8:	7afb      	ldrb	r3, [r7, #11]
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d006      	beq.n	80082bc <VL53L1_get_dmax_calibration_data+0x3a>
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	dc3e      	bgt.n	8008330 <VL53L1_get_dmax_calibration_data+0xae>
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d034      	beq.n	8008320 <VL53L1_get_dmax_calibration_data+0x9e>
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d02a      	beq.n	8008310 <VL53L1_get_dmax_calibration_data+0x8e>
 80082ba:	e039      	b.n	8008330 <VL53L1_get_dmax_calibration_data+0xae>

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 80082bc:	7aba      	ldrb	r2, [r7, #10]
 80082be:	6979      	ldr	r1, [r7, #20]
 80082c0:	4613      	mov	r3, r2
 80082c2:	00db      	lsls	r3, r3, #3
 80082c4:	1a9b      	subs	r3, r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	440b      	add	r3, r1
 80082ca:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	b29a      	uxth	r2, r3
		pdmax_cal->ref__actual_effective_spads =
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	801a      	strh	r2, [r3, #0]
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 80082d6:	7aba      	ldrb	r2, [r7, #10]
 80082d8:	6979      	ldr	r1, [r7, #20]
 80082da:	4613      	mov	r3, r2
 80082dc:	00db      	lsls	r3, r3, #3
 80082de:	1a9b      	subs	r3, r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	440b      	add	r3, r1
 80082e4:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	b29a      	uxth	r2, r3
		pdmax_cal->ref__peak_signal_count_rate_mcps =
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
		pres->zone_cal.cal_distance_mm;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f9b3 3792 	ldrsh.w	r3, [r3, #1938]	; 0x792
 80082f6:	b29a      	uxth	r2, r3
		pdmax_cal->ref__distance_mm =
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	809a      	strh	r2, [r3, #4]
		pdmax_cal->ref_reflectance_pc =
		pres->zone_cal.cal_reflectance_pc;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	f8b3 2794 	ldrh.w	r2, [r3, #1940]	; 0x794
		pdmax_cal->ref_reflectance_pc =
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	80da      	strh	r2, [r3, #6]
		pdmax_cal->coverglass_transmission = 0x0100;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f44f 7280 	mov.w	r2, #256	; 0x100
 800830c:	811a      	strh	r2, [r3, #8]
	break;
 800830e:	e012      	b.n	8008336 <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8008314:	220a      	movs	r2, #10
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f012 fb87 	bl	801aa2c <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 800831e:	e00a      	b.n	8008336 <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8008324:	220a      	movs	r2, #10
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f012 fb7f 	bl	801aa2c <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 800832e:	e002      	b.n	8008336 <VL53L1_get_dmax_calibration_data+0xb4>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008330:	23fc      	movs	r3, #252	; 0xfc
 8008332:	77fb      	strb	r3, [r7, #31]
	break;
 8008334:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8008336:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3720      	adds	r7, #32
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
	...

08008344 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8008344:	b480      	push	{r7}
 8008346:	b089      	sub	sp, #36	; 0x24
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	460b      	mov	r3, r1
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	817b      	strh	r3, [r7, #10]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008352:	2300      	movs	r3, #0
 8008354:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3318      	adds	r3, #24
 800835a:	61bb      	str	r3, [r7, #24]
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8008362:	617b      	str	r3, [r7, #20]
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800836a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800836c:	897b      	ldrh	r3, [r7, #10]
 800836e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8008372:	2bbe      	cmp	r3, #190	; 0xbe
 8008374:	f200 86fc 	bhi.w	8009170 <VL53L1_get_tuning_parm+0xe2c>
 8008378:	a201      	add	r2, pc, #4	; (adr r2, 8008380 <VL53L1_get_tuning_parm+0x3c>)
 800837a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837e:	bf00      	nop
 8008380:	0800867d 	.word	0x0800867d
 8008384:	0800868d 	.word	0x0800868d
 8008388:	0800869d 	.word	0x0800869d
 800838c:	080086ad 	.word	0x080086ad
 8008390:	080086bb 	.word	0x080086bb
 8008394:	080086c9 	.word	0x080086c9
 8008398:	080086d7 	.word	0x080086d7
 800839c:	080086e5 	.word	0x080086e5
 80083a0:	080086f3 	.word	0x080086f3
 80083a4:	08008701 	.word	0x08008701
 80083a8:	0800870f 	.word	0x0800870f
 80083ac:	0800871b 	.word	0x0800871b
 80083b0:	08008729 	.word	0x08008729
 80083b4:	08008737 	.word	0x08008737
 80083b8:	08008743 	.word	0x08008743
 80083bc:	08008751 	.word	0x08008751
 80083c0:	0800875f 	.word	0x0800875f
 80083c4:	0800876f 	.word	0x0800876f
 80083c8:	0800877f 	.word	0x0800877f
 80083cc:	0800878d 	.word	0x0800878d
 80083d0:	0800879d 	.word	0x0800879d
 80083d4:	080087ab 	.word	0x080087ab
 80083d8:	080087bb 	.word	0x080087bb
 80083dc:	080087cb 	.word	0x080087cb
 80083e0:	080087db 	.word	0x080087db
 80083e4:	080087eb 	.word	0x080087eb
 80083e8:	080087fb 	.word	0x080087fb
 80083ec:	0800880b 	.word	0x0800880b
 80083f0:	0800881b 	.word	0x0800881b
 80083f4:	0800882b 	.word	0x0800882b
 80083f8:	0800883b 	.word	0x0800883b
 80083fc:	08008849 	.word	0x08008849
 8008400:	08008859 	.word	0x08008859
 8008404:	08008869 	.word	0x08008869
 8008408:	08008879 	.word	0x08008879
 800840c:	08008889 	.word	0x08008889
 8008410:	08008899 	.word	0x08008899
 8008414:	080088a9 	.word	0x080088a9
 8008418:	080088b9 	.word	0x080088b9
 800841c:	080088c9 	.word	0x080088c9
 8008420:	080088d9 	.word	0x080088d9
 8008424:	080088e9 	.word	0x080088e9
 8008428:	080088f9 	.word	0x080088f9
 800842c:	08008909 	.word	0x08008909
 8008430:	08008919 	.word	0x08008919
 8008434:	08008929 	.word	0x08008929
 8008438:	08008939 	.word	0x08008939
 800843c:	08008949 	.word	0x08008949
 8008440:	08008959 	.word	0x08008959
 8008444:	08008969 	.word	0x08008969
 8008448:	08008979 	.word	0x08008979
 800844c:	08008987 	.word	0x08008987
 8008450:	08008995 	.word	0x08008995
 8008454:	080089a3 	.word	0x080089a3
 8008458:	080089b1 	.word	0x080089b1
 800845c:	080089bf 	.word	0x080089bf
 8008460:	080089cd 	.word	0x080089cd
 8008464:	080089db 	.word	0x080089db
 8008468:	080089e9 	.word	0x080089e9
 800846c:	080089f7 	.word	0x080089f7
 8008470:	08008a05 	.word	0x08008a05
 8008474:	08008a13 	.word	0x08008a13
 8008478:	08008a21 	.word	0x08008a21
 800847c:	08008a2f 	.word	0x08008a2f
 8008480:	08008a3d 	.word	0x08008a3d
 8008484:	08008a4b 	.word	0x08008a4b
 8008488:	08008a59 	.word	0x08008a59
 800848c:	08008a67 	.word	0x08008a67
 8008490:	08008a75 	.word	0x08008a75
 8008494:	08008a83 	.word	0x08008a83
 8008498:	08008a91 	.word	0x08008a91
 800849c:	08008a9f 	.word	0x08008a9f
 80084a0:	08008aad 	.word	0x08008aad
 80084a4:	08008abb 	.word	0x08008abb
 80084a8:	08008ac7 	.word	0x08008ac7
 80084ac:	08008ad5 	.word	0x08008ad5
 80084b0:	08008ae3 	.word	0x08008ae3
 80084b4:	08008aef 	.word	0x08008aef
 80084b8:	08008afb 	.word	0x08008afb
 80084bc:	08008b07 	.word	0x08008b07
 80084c0:	08008b13 	.word	0x08008b13
 80084c4:	08008b1f 	.word	0x08008b1f
 80084c8:	08008b2b 	.word	0x08008b2b
 80084cc:	08008b39 	.word	0x08008b39
 80084d0:	08008b47 	.word	0x08008b47
 80084d4:	08008b55 	.word	0x08008b55
 80084d8:	08008b63 	.word	0x08008b63
 80084dc:	08008b71 	.word	0x08008b71
 80084e0:	08008b7f 	.word	0x08008b7f
 80084e4:	08008b8d 	.word	0x08008b8d
 80084e8:	08008b9b 	.word	0x08008b9b
 80084ec:	08008ba9 	.word	0x08008ba9
 80084f0:	08008bb7 	.word	0x08008bb7
 80084f4:	08008bc5 	.word	0x08008bc5
 80084f8:	08008bd3 	.word	0x08008bd3
 80084fc:	08008be1 	.word	0x08008be1
 8008500:	08008bef 	.word	0x08008bef
 8008504:	08008bfd 	.word	0x08008bfd
 8008508:	08008c0b 	.word	0x08008c0b
 800850c:	08008c19 	.word	0x08008c19
 8008510:	08008c27 	.word	0x08008c27
 8008514:	08008c35 	.word	0x08008c35
 8008518:	08008c43 	.word	0x08008c43
 800851c:	08008c51 	.word	0x08008c51
 8008520:	08008c5f 	.word	0x08008c5f
 8008524:	08008c6d 	.word	0x08008c6d
 8008528:	08008c7b 	.word	0x08008c7b
 800852c:	08008c89 	.word	0x08008c89
 8008530:	08008c97 	.word	0x08008c97
 8008534:	08008ca5 	.word	0x08008ca5
 8008538:	08008cb3 	.word	0x08008cb3
 800853c:	08008cc1 	.word	0x08008cc1
 8008540:	08008ccf 	.word	0x08008ccf
 8008544:	08008cdd 	.word	0x08008cdd
 8008548:	08008ceb 	.word	0x08008ceb
 800854c:	08008cf9 	.word	0x08008cf9
 8008550:	08008d07 	.word	0x08008d07
 8008554:	08008d15 	.word	0x08008d15
 8008558:	08008d23 	.word	0x08008d23
 800855c:	08008d35 	.word	0x08008d35
 8008560:	08008d47 	.word	0x08008d47
 8008564:	08008d59 	.word	0x08008d59
 8008568:	08008d6b 	.word	0x08008d6b
 800856c:	08008d7d 	.word	0x08008d7d
 8008570:	08008d8f 	.word	0x08008d8f
 8008574:	08008da1 	.word	0x08008da1
 8008578:	08008db3 	.word	0x08008db3
 800857c:	08008dc5 	.word	0x08008dc5
 8008580:	08008dd7 	.word	0x08008dd7
 8008584:	08008de9 	.word	0x08008de9
 8008588:	08008dfb 	.word	0x08008dfb
 800858c:	08008e0d 	.word	0x08008e0d
 8008590:	08008e1f 	.word	0x08008e1f
 8008594:	08008e31 	.word	0x08008e31
 8008598:	08008e43 	.word	0x08008e43
 800859c:	08008e55 	.word	0x08008e55
 80085a0:	08008e67 	.word	0x08008e67
 80085a4:	08008e79 	.word	0x08008e79
 80085a8:	08008e87 	.word	0x08008e87
 80085ac:	08008e95 	.word	0x08008e95
 80085b0:	08008ea3 	.word	0x08008ea3
 80085b4:	08008eb1 	.word	0x08008eb1
 80085b8:	08008ebf 	.word	0x08008ebf
 80085bc:	08008ecd 	.word	0x08008ecd
 80085c0:	08008edb 	.word	0x08008edb
 80085c4:	08008eed 	.word	0x08008eed
 80085c8:	08008efb 	.word	0x08008efb
 80085cc:	08008f09 	.word	0x08008f09
 80085d0:	08008f17 	.word	0x08008f17
 80085d4:	08008f25 	.word	0x08008f25
 80085d8:	08008f33 	.word	0x08008f33
 80085dc:	08008f41 	.word	0x08008f41
 80085e0:	08008f4f 	.word	0x08008f4f
 80085e4:	08008f5d 	.word	0x08008f5d
 80085e8:	08008f6b 	.word	0x08008f6b
 80085ec:	08008f79 	.word	0x08008f79
 80085f0:	08008f87 	.word	0x08008f87
 80085f4:	08008f95 	.word	0x08008f95
 80085f8:	08008fa3 	.word	0x08008fa3
 80085fc:	08008fb1 	.word	0x08008fb1
 8008600:	08008fbf 	.word	0x08008fbf
 8008604:	08008fcd 	.word	0x08008fcd
 8008608:	08008fdb 	.word	0x08008fdb
 800860c:	08008fe9 	.word	0x08008fe9
 8008610:	08008ff7 	.word	0x08008ff7
 8008614:	08009005 	.word	0x08009005
 8008618:	08009013 	.word	0x08009013
 800861c:	08009021 	.word	0x08009021
 8008620:	0800902f 	.word	0x0800902f
 8008624:	0800903d 	.word	0x0800903d
 8008628:	0800904b 	.word	0x0800904b
 800862c:	08009059 	.word	0x08009059
 8008630:	08009067 	.word	0x08009067
 8008634:	08009075 	.word	0x08009075
 8008638:	08009083 	.word	0x08009083
 800863c:	08009091 	.word	0x08009091
 8008640:	0800909f 	.word	0x0800909f
 8008644:	080090ad 	.word	0x080090ad
 8008648:	080090bb 	.word	0x080090bb
 800864c:	080090c9 	.word	0x080090c9
 8008650:	080090d7 	.word	0x080090d7
 8008654:	080090e5 	.word	0x080090e5
 8008658:	080090f3 	.word	0x080090f3
 800865c:	08009101 	.word	0x08009101
 8008660:	0800910f 	.word	0x0800910f
 8008664:	0800911d 	.word	0x0800911d
 8008668:	0800912b 	.word	0x0800912b
 800866c:	08009139 	.word	0x08009139
 8008670:	08009147 	.word	0x08009147
 8008674:	08009155 	.word	0x08009155
 8008678:	08009163 	.word	0x08009163

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 8008682:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	601a      	str	r2, [r3, #0]
	break;
 8008688:	f000 bd79 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 8008692:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	601a      	str	r2, [r3, #0]
	break;
 8008698:	f000 bd71 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 80086a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	601a      	str	r2, [r3, #0]
	break;
 80086a8:	f000 bd69 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	601a      	str	r2, [r3, #0]
	break;
 80086b6:	f000 bd62 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	785b      	ldrb	r3, [r3, #1]
 80086be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	601a      	str	r2, [r3, #0]
	break;
 80086c4:	f000 bd5b 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	789b      	ldrb	r3, [r3, #2]
 80086cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	601a      	str	r2, [r3, #0]
	break;
 80086d2:	f000 bd54 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	78db      	ldrb	r3, [r3, #3]
 80086da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	601a      	str	r2, [r3, #0]
	break;
 80086e0:	f000 bd4d 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	791b      	ldrb	r3, [r3, #4]
 80086e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	601a      	str	r2, [r3, #0]
	break;
 80086ee:	f000 bd46 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	795b      	ldrb	r3, [r3, #5]
 80086f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	601a      	str	r2, [r3, #0]
	break;
 80086fc:	f000 bd3f 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	799b      	ldrb	r3, [r3, #6]
 8008704:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	601a      	str	r2, [r3, #0]
	break;
 800870a:	f000 bd38 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	601a      	str	r2, [r3, #0]
	break;
 8008716:	f000 bd32 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	891b      	ldrh	r3, [r3, #8]
 800871e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	601a      	str	r2, [r3, #0]
	break;
 8008724:	f000 bd2b 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	8a1b      	ldrh	r3, [r3, #16]
 800872c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	601a      	str	r2, [r3, #0]
	break;
 8008732:	f000 bd24 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	601a      	str	r2, [r3, #0]
	break;
 800873e:	f000 bd1e 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	7e1b      	ldrb	r3, [r3, #24]
 8008746:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	601a      	str	r2, [r3, #0]
	break;
 800874c:	f000 bd17 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	8b5b      	ldrh	r3, [r3, #26]
 8008754:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	601a      	str	r2, [r3, #0]
	break;
 800875a:	f000 bd10 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8008764:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	601a      	str	r2, [r3, #0]
	break;
 800876a:	f000 bd08 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008774:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	601a      	str	r2, [r3, #0]
	break;
 800877a:	f000 bd00 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008782:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	601a      	str	r2, [r3, #0]
	break;
 8008788:	f000 bcf9 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008792:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	601a      	str	r2, [r3, #0]
	break;
 8008798:	f000 bcf1 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80087a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	601a      	str	r2, [r3, #0]
	break;
 80087a6:	f000 bcea 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80087b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	601a      	str	r2, [r3, #0]
	break;
 80087b6:	f000 bce2 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 80087c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	601a      	str	r2, [r3, #0]
	break;
 80087c6:	f000 bcda 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80087d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	601a      	str	r2, [r3, #0]
	break;
 80087d6:	f000 bcd2 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80087e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	601a      	str	r2, [r3, #0]
	break;
 80087e6:	f000 bcca 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80087f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	601a      	str	r2, [r3, #0]
	break;
 80087f6:	f000 bcc2 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8008800:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	601a      	str	r2, [r3, #0]
	break;
 8008806:	f000 bcba 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	f9b3 32ea 	ldrsh.w	r3, [r3, #746]	; 0x2ea
		*ptuning_parm_value = (int32_t)(
 8008810:	461a      	mov	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	601a      	str	r2, [r3, #0]
	break;
 8008816:	f000 bcb2 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	f9b3 32ec 	ldrsh.w	r3, [r3, #748]	; 0x2ec
		*ptuning_parm_value = (int32_t)(
 8008820:	461a      	mov	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	601a      	str	r2, [r3, #0]
	break;
 8008826:	f000 bcaa 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8008830:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	601a      	str	r2, [r3, #0]
	break;
 8008836:	f000 bca2 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800883e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	601a      	str	r2, [r3, #0]
	break;
 8008844:	f000 bc9b 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
		*ptuning_parm_value = (int32_t)(
 800884e:	461a      	mov	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	601a      	str	r2, [r3, #0]
	break;
 8008854:	f000 bc93 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800885e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	601a      	str	r2, [r3, #0]
	break;
 8008864:	f000 bc8b 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	f9b3 32e2 	ldrsh.w	r3, [r3, #738]	; 0x2e2
 800886e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	601a      	str	r2, [r3, #0]
	break;
 8008874:	f000 bc83 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 800887e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	601a      	str	r2, [r3, #0]
	break;
 8008884:	f000 bc7b 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 800888e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	601a      	str	r2, [r3, #0]
	break;
 8008894:	f000 bc73 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800889e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	601a      	str	r2, [r3, #0]
	break;
 80088a4:	f000 bc6b 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80088ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	601a      	str	r2, [r3, #0]
	break;
 80088b4:	f000 bc63 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 80088be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	601a      	str	r2, [r3, #0]
	break;
 80088c4:	f000 bc5b 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 80088ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	601a      	str	r2, [r3, #0]
	break;
 80088d4:	f000 bc53 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 80088de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	601a      	str	r2, [r3, #0]
	break;
 80088e4:	f000 bc4b 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 80088ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	601a      	str	r2, [r3, #0]
	break;
 80088f4:	f000 bc43 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 80088fe:	461a      	mov	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	601a      	str	r2, [r3, #0]
	break;
 8008904:	f000 bc3b 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800890e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	601a      	str	r2, [r3, #0]
	break;
 8008914:	f000 bc33 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 800891e:	461a      	mov	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	601a      	str	r2, [r3, #0]
	break;
 8008924:	f000 bc2b 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800892e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	601a      	str	r2, [r3, #0]
	break;
 8008934:	f000 bc23 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800893e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	601a      	str	r2, [r3, #0]
	break;
 8008944:	f000 bc1b 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800894e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	601a      	str	r2, [r3, #0]
	break;
 8008954:	f000 bc13 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800895e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	601a      	str	r2, [r3, #0]
	break;
 8008964:	f000 bc0b 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 800896e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	601a      	str	r2, [r3, #0]
	break;
 8008974:	f000 bc03 	b.w	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800897e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	601a      	str	r2, [r3, #0]
	break;
 8008984:	e3fb      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 800898c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	601a      	str	r2, [r3, #0]
	break;
 8008992:	e3f4      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	f9b3 32e4 	ldrsh.w	r3, [r3, #740]	; 0x2e4
 800899a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	601a      	str	r2, [r3, #0]
	break;
 80089a0:	e3ed      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 80089a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	601a      	str	r2, [r3, #0]
	break;
 80089ae:	e3e6      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 80089b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	601a      	str	r2, [r3, #0]
	break;
 80089bc:	e3df      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80089c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	601a      	str	r2, [r3, #0]
	break;
 80089ca:	e3d8      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 80089d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	601a      	str	r2, [r3, #0]
	break;
 80089d8:	e3d1      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80089e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	601a      	str	r2, [r3, #0]
	break;
 80089e6:	e3ca      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 80089ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	601a      	str	r2, [r3, #0]
	break;
 80089f4:	e3c3      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80089fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	601a      	str	r2, [r3, #0]
	break;
 8008a02:	e3bc      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8008a0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	601a      	str	r2, [r3, #0]
	break;
 8008a10:	e3b5      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	; 0x2a4
 8008a18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	601a      	str	r2, [r3, #0]
	break;
 8008a1e:	e3ae      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	; 0x2a6
 8008a26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	601a      	str	r2, [r3, #0]
	break;
 8008a2c:	e3a7      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 8008a34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	601a      	str	r2, [r3, #0]
	break;
 8008a3a:	e3a0      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 8008a42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	601a      	str	r2, [r3, #0]
	break;
 8008a48:	e399      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8008a50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	601a      	str	r2, [r3, #0]
	break;
 8008a56:	e392      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008a5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	601a      	str	r2, [r3, #0]
	break;
 8008a64:	e38b      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8008a6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	601a      	str	r2, [r3, #0]
	break;
 8008a72:	e384      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 8008a7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	601a      	str	r2, [r3, #0]
	break;
 8008a80:	e37d      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8008a88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	601a      	str	r2, [r3, #0]
	break;
 8008a8e:	e376      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 8008a96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	601a      	str	r2, [r3, #0]
	break;
 8008a9c:	e36f      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8008aa4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	601a      	str	r2, [r3, #0]
	break;
 8008aaa:	e368      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8008ab2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	601a      	str	r2, [r3, #0]
	break;
 8008ab8:	e361      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	7c1b      	ldrb	r3, [r3, #16]
 8008abe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	601a      	str	r2, [r3, #0]
	break;
 8008ac4:	e35b      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008acc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	601a      	str	r2, [r3, #0]
	break;
 8008ad2:	e354      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008ada:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	601a      	str	r2, [r3, #0]
	break;
 8008ae0:	e34d      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	881b      	ldrh	r3, [r3, #0]
 8008ae6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	601a      	str	r2, [r3, #0]
	break;
 8008aec:	e347      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	601a      	str	r2, [r3, #0]
	break;
 8008af8:	e341      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	8adb      	ldrh	r3, [r3, #22]
 8008afe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	601a      	str	r2, [r3, #0]
	break;
 8008b04:	e33b      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	8b1b      	ldrh	r3, [r3, #24]
 8008b0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	601a      	str	r2, [r3, #0]
	break;
 8008b10:	e335      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	601a      	str	r2, [r3, #0]
	break;
 8008b1c:	e32f      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	601a      	str	r2, [r3, #0]
	break;
 8008b28:	e329      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	f8b3 32f4 	ldrh.w	r3, [r3, #756]	; 0x2f4
 8008b30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	601a      	str	r2, [r3, #0]
	break;
 8008b36:	e322      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8008b3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	601a      	str	r2, [r3, #0]
	break;
 8008b44:	e31b      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008b4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	601a      	str	r2, [r3, #0]
	break;
 8008b52:	e314      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8008b5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	601a      	str	r2, [r3, #0]
	break;
 8008b60:	e30d      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 8008b68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	601a      	str	r2, [r3, #0]
	break;
 8008b6e:	e306      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8008b76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	601a      	str	r2, [r3, #0]
	break;
 8008b7c:	e2ff      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 8008b84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	601a      	str	r2, [r3, #0]
	break;
 8008b8a:	e2f8      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 8008b92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	601a      	str	r2, [r3, #0]
	break;
 8008b98:	e2f1      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 8008ba0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	601a      	str	r2, [r3, #0]
	break;
 8008ba6:	e2ea      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8008bae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	601a      	str	r2, [r3, #0]
	break;
 8008bb4:	e2e3      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	f8b3 3318 	ldrh.w	r3, [r3, #792]	; 0x318
 8008bbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	601a      	str	r2, [r3, #0]
	break;
 8008bc2:	e2dc      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8008bca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	601a      	str	r2, [r3, #0]
	break;
 8008bd0:	e2d5      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	f8b3 331a 	ldrh.w	r3, [r3, #794]	; 0x31a
 8008bd8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	601a      	str	r2, [r3, #0]
	break;
 8008bde:	e2ce      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 8008be6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	601a      	str	r2, [r3, #0]
	break;
 8008bec:	e2c7      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
 8008bf4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	601a      	str	r2, [r3, #0]
	break;
 8008bfa:	e2c0      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	f8b3 3254 	ldrh.w	r3, [r3, #596]	; 0x254
 8008c02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	601a      	str	r2, [r3, #0]
	break;
 8008c08:	e2b9      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 8008c10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	601a      	str	r2, [r3, #0]
	break;
 8008c16:	e2b2      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8008c1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	601a      	str	r2, [r3, #0]
	break;
 8008c24:	e2ab      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8008c2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	601a      	str	r2, [r3, #0]
	break;
 8008c32:	e2a4      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 8008c3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	601a      	str	r2, [r3, #0]
	break;
 8008c40:	e29d      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8008c48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	601a      	str	r2, [r3, #0]
	break;
 8008c4e:	e296      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8008c56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	601a      	str	r2, [r3, #0]
	break;
 8008c5c:	e28f      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8008c64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	601a      	str	r2, [r3, #0]
	break;
 8008c6a:	e288      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008c72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	601a      	str	r2, [r3, #0]
	break;
 8008c78:	e281      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8008c80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	601a      	str	r2, [r3, #0]
	break;
 8008c86:	e27a      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8008c8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	601a      	str	r2, [r3, #0]
	break;
 8008c94:	e273      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8008c9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	601a      	str	r2, [r3, #0]
	break;
 8008ca2:	e26c      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8008caa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	601a      	str	r2, [r3, #0]
	break;
 8008cb0:	e265      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8008cb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	601a      	str	r2, [r3, #0]
	break;
 8008cbe:	e25e      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8008cc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	601a      	str	r2, [r3, #0]
	break;
 8008ccc:	e257      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8008cd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	601a      	str	r2, [r3, #0]
	break;
 8008cda:	e250      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8008ce2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	601a      	str	r2, [r3, #0]
	break;
 8008ce8:	e249      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8008cf0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	601a      	str	r2, [r3, #0]
	break;
 8008cf6:	e242      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8008cfe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	601a      	str	r2, [r3, #0]
	break;
 8008d04:	e23b      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8008d0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	601a      	str	r2, [r3, #0]
	break;
 8008d12:	e234      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8008d1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	601a      	str	r2, [r3, #0]
	break;
 8008d20:	e22d      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d28:	f8b3 33dc 	ldrh.w	r3, [r3, #988]	; 0x3dc
 8008d2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	601a      	str	r2, [r3, #0]
	break;
 8008d32:	e224      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d3a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	601a      	str	r2, [r3, #0]
	break;
 8008d44:	e21b      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d4c:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8008d50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	601a      	str	r2, [r3, #0]
	break;
 8008d56:	e212      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d5e:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008d62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	601a      	str	r2, [r3, #0]
	break;
 8008d68:	e209      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d70:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8008d74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	601a      	str	r2, [r3, #0]
	break;
 8008d7a:	e200      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d82:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8008d86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	601a      	str	r2, [r3, #0]
	break;
 8008d8c:	e1f7      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d94:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 8008d98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	601a      	str	r2, [r3, #0]
	break;
 8008d9e:	e1ee      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008da6:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8008daa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	601a      	str	r2, [r3, #0]
	break;
 8008db0:	e1e5      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db8:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8008dbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	601a      	str	r2, [r3, #0]
	break;
 8008dc2:	e1dc      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dca:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
 8008dce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	601a      	str	r2, [r3, #0]
	break;
 8008dd4:	e1d3      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ddc:	f9b3 3404 	ldrsh.w	r3, [r3, #1028]	; 0x404
 8008de0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	601a      	str	r2, [r3, #0]
	break;
 8008de6:	e1ca      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dee:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8008df2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	601a      	str	r2, [r3, #0]
	break;
 8008df8:	e1c1      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e00:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 8008e04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	601a      	str	r2, [r3, #0]
	break;
 8008e0a:	e1b8      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e12:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
		*ptuning_parm_value = (int32_t)(
 8008e16:	461a      	mov	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	601a      	str	r2, [r3, #0]
	break;
 8008e1c:	e1af      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e24:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008e28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	601a      	str	r2, [r3, #0]
	break;
 8008e2e:	e1a6      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e36:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008e3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	601a      	str	r2, [r3, #0]
	break;
 8008e40:	e19d      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e48:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008e4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	601a      	str	r2, [r3, #0]
	break;
 8008e52:	e194      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e5a:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 8008e5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	601a      	str	r2, [r3, #0]
	break;
 8008e64:	e18b      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e6c:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8008e70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	601a      	str	r2, [r3, #0]
	break;
 8008e76:	e182      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008e7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	601a      	str	r2, [r3, #0]
	break;
 8008e84:	e17b      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8008e8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	601a      	str	r2, [r3, #0]
	break;
 8008e92:	e174      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8008e9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	601a      	str	r2, [r3, #0]
	break;
 8008ea0:	e16d      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8008ea8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	601a      	str	r2, [r3, #0]
	break;
 8008eae:	e166      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8008eb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	601a      	str	r2, [r3, #0]
	break;
 8008ebc:	e15f      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8008ec4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	601a      	str	r2, [r3, #0]
	break;
 8008eca:	e158      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 8008ed2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	601a      	str	r2, [r3, #0]
	break;
 8008ed8:	e151      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ee0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8008ee4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	601a      	str	r2, [r3, #0]
	break;
 8008eea:	e148      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 8008ef2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	601a      	str	r2, [r3, #0]
	break;
 8008ef8:	e141      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 8008f00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	601a      	str	r2, [r3, #0]
	break;
 8008f06:	e13a      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 8008f0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	601a      	str	r2, [r3, #0]
	break;
 8008f14:	e133      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 8008f1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	601a      	str	r2, [r3, #0]
	break;
 8008f22:	e12c      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 8008f2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	601a      	str	r2, [r3, #0]
	break;
 8008f30:	e125      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 8008f38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	601a      	str	r2, [r3, #0]
	break;
 8008f3e:	e11e      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 8008f46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	601a      	str	r2, [r3, #0]
	break;
 8008f4c:	e117      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 8008f54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	601a      	str	r2, [r3, #0]
	break;
 8008f5a:	e110      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 8008f62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	601a      	str	r2, [r3, #0]
	break;
 8008f68:	e109      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 8008f70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	601a      	str	r2, [r3, #0]
	break;
 8008f76:	e102      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 8008f7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	601a      	str	r2, [r3, #0]
	break;
 8008f84:	e0fb      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 8008f8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	601a      	str	r2, [r3, #0]
	break;
 8008f92:	e0f4      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 8008f9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	601a      	str	r2, [r3, #0]
	break;
 8008fa0:	e0ed      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 8008fa8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	601a      	str	r2, [r3, #0]
	break;
 8008fae:	e0e6      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 8008fb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	601a      	str	r2, [r3, #0]
	break;
 8008fbc:	e0df      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 8008fc4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	601a      	str	r2, [r3, #0]
	break;
 8008fca:	e0d8      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 8008fd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	601a      	str	r2, [r3, #0]
	break;
 8008fd8:	e0d1      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 8008fe0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	601a      	str	r2, [r3, #0]
	break;
 8008fe6:	e0ca      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 8008fee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	601a      	str	r2, [r3, #0]
	break;
 8008ff4:	e0c3      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 8008ffc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	601a      	str	r2, [r3, #0]
	break;
 8009002:	e0bc      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 800900a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	601a      	str	r2, [r3, #0]
	break;
 8009010:	e0b5      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 8009018:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	601a      	str	r2, [r3, #0]
	break;
 800901e:	e0ae      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 8009026:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	601a      	str	r2, [r3, #0]
	break;
 800902c:	e0a7      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 8009034:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	601a      	str	r2, [r3, #0]
	break;
 800903a:	e0a0      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 8009042:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	601a      	str	r2, [r3, #0]
	break;
 8009048:	e099      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 8009050:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	601a      	str	r2, [r3, #0]
	break;
 8009056:	e092      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 800905e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	601a      	str	r2, [r3, #0]
	break;
 8009064:	e08b      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 800906c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	601a      	str	r2, [r3, #0]
	break;
 8009072:	e084      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 800907a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	601a      	str	r2, [r3, #0]
	break;
 8009080:	e07d      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 8009088:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	601a      	str	r2, [r3, #0]
	break;
 800908e:	e076      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 8009096:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	601a      	str	r2, [r3, #0]
	break;
 800909c:	e06f      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 80090a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	601a      	str	r2, [r3, #0]
	break;
 80090aa:	e068      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 80090b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	601a      	str	r2, [r3, #0]
	break;
 80090b8:	e061      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 80090c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	601a      	str	r2, [r3, #0]
	break;
 80090c6:	e05a      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 80090ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	601a      	str	r2, [r3, #0]
	break;
 80090d4:	e053      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 80090dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	601a      	str	r2, [r3, #0]
	break;
 80090e2:	e04c      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 80090ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	601a      	str	r2, [r3, #0]
	break;
 80090f0:	e045      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 80090f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	601a      	str	r2, [r3, #0]
	break;
 80090fe:	e03e      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 8009106:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	601a      	str	r2, [r3, #0]
	break;
 800910c:	e037      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 8009114:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	601a      	str	r2, [r3, #0]
	break;
 800911a:	e030      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 8009122:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	601a      	str	r2, [r3, #0]
	break;
 8009128:	e029      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	f9b3 320e 	ldrsh.w	r3, [r3, #526]	; 0x20e
 8009130:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	601a      	str	r2, [r3, #0]
	break;
 8009136:	e022      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	f9b3 3210 	ldrsh.w	r3, [r3, #528]	; 0x210
 800913e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	601a      	str	r2, [r3, #0]
	break;
 8009144:	e01b      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	f9b3 3212 	ldrsh.w	r3, [r3, #530]	; 0x212
 800914c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	601a      	str	r2, [r3, #0]
	break;
 8009152:	e014      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	f9b3 3214 	ldrsh.w	r3, [r3, #532]	; 0x214
 800915a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	601a      	str	r2, [r3, #0]
	break;
 8009160:	e00d      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_min_signal_secondary_targets;
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009168:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	601a      	str	r2, [r3, #0]
	break;
 800916e:	e006      	b.n	800917e <VL53L1_get_tuning_parm+0xe3a>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8009176:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009178:	23fc      	movs	r3, #252	; 0xfc
 800917a:	77fb      	strb	r3, [r7, #31]
	break;
 800917c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800917e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3724      	adds	r7, #36	; 0x24
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop

08009190 <VL53L1_dynamic_xtalk_correction_enable>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_enable(
	VL53L1_DEV                          Dev
	)
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009198:	2300      	movs	r3, #0
 800919a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	3318      	adds	r3, #24
 80091a0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 80091ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <VL53L1_dynamic_xtalk_correction_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_disable(
	VL53L1_DEV                          Dev
	)
{
 80091be:	b480      	push	{r7}
 80091c0:	b085      	sub	sp, #20
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80091c6:	2300      	movs	r3, #0
 80091c8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	3318      	adds	r3, #24
 80091ce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 80091dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <VL53L1_dynamic_xtalk_correction_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80091f4:	2300      	movs	r3, #0
 80091f6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	3318      	adds	r3, #24
 80091fc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009204:	2201      	movs	r2, #1
 8009206:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 800920a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr

0800921a <VL53L1_dynamic_xtalk_correction_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 800921a:	b480      	push	{r7}
 800921c:	b085      	sub	sp, #20
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009222:	2300      	movs	r3, #0
 8009224:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3318      	adds	r3, #24
 800922a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009232:	2200      	movs	r2, #0
 8009234:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 8009238:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009250:	2300      	movs	r3, #0
 8009252:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	3318      	adds	r3, #24
 8009258:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009260:	2201      	movs	r2, #1
 8009262:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 8009266:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 8009276:	b480      	push	{r7}
 8009278:	b085      	sub	sp, #20
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800927e:	2300      	movs	r3, #0
 8009280:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	3318      	adds	r3, #24
 8009286:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800928e:	2200      	movs	r2, #0
 8009290:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 8009294:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <VL53L1_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2208      	movs	r2, #8
 80092b4:	701a      	strb	r2, [r3, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	220b      	movs	r2, #11
 80092ba:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092c2:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80092ca:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80092d2:	815a      	strh	r2, [r3, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80092da:	819a      	strh	r2, [r3, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80092dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <VL53L1_init_ssc_config_struct>:


VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092f4:	2300      	movs	r3, #0
 80092f6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	701a      	strb	r2, [r3, #0]


	pdata->VL53L1_p_009 =
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2212      	movs	r2, #18
 8009302:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	220f      	movs	r2, #15
 8009308:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2202      	movs	r2, #2
 800930e:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8009316:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	220c      	movs	r2, #12
 800931c:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800931e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009338:	2300      	movs	r3, #0
 800933a:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	895b      	ldrh	r3, [r3, #10]
 8009340:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	895b      	ldrh	r3, [r3, #10]
 800935e:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800937e:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2200      	movs	r2, #0
 8009384:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2240      	movs	r2, #64	; 0x40
 800938a:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10d      	bne.n	80093b0 <VL53L1_init_xtalk_config_struct+0x82>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d108      	bne.n	80093b0 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d103      	bne.n	80093b0 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	2200      	movs	r2, #0
 80093ac:	741a      	strb	r2, [r3, #16]
 80093ae:	e002      	b.n	80093b6 <VL53L1_init_xtalk_config_struct+0x88>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	2201      	movs	r2, #1
 80093b4:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 80093b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d114      	bne.n	80093e8 <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d110      	bne.n	80093e8 <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53L1_calc_range_ignore_threshold(
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	6818      	ldr	r0, [r3, #0]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	7d9b      	ldrb	r3, [r3, #22]
 80093da:	f003 f879 	bl	800c4d0 <VL53L1_calc_range_ignore_threshold>
 80093de:	4603      	mov	r3, r0
 80093e0:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	831a      	strh	r2, [r3, #24]
 80093e6:	e002      	b.n	80093ee <VL53L1_init_xtalk_config_struct+0xc0>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2200      	movs	r2, #0
 80093ec:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	f64f 72ce 	movw	r2, #65486	; 0xffce
 80093f4:	835a      	strh	r2, [r3, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2232      	movs	r2, #50	; 0x32
 80093fa:	839a      	strh	r2, [r3, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8009402:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	228c      	movs	r2, #140	; 0x8c
 8009408:	841a      	strh	r2, [r3, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800940a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <VL53L1_init_xtalk_extract_config_struct>:

VL53L1_Error VL53L1_init_xtalk_extract_config_struct(
	VL53L1_xtalkextract_config_t   *pdata)
{
 8009416:	b480      	push	{r7}
 8009418:	b085      	sub	sp, #20
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800941e:	2300      	movs	r3, #0
 8009420:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009428:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009430:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2207      	movs	r2, #7
 8009436:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800943e:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f242 7210 	movw	r2, #10000	; 0x2710
 8009446:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f64f 72ba 	movw	r2, #65466	; 0xffba
 800944e:	825a      	strh	r2, [r3, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2246      	movs	r2, #70	; 0x46
 8009454:	829a      	strh	r2, [r3, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800945c:	82da      	strh	r2, [r3, #22]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	228c      	movs	r2, #140	; 0x8c
 8009462:	831a      	strh	r2, [r3, #24]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8009464:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3714      	adds	r7, #20
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <VL53L1_init_offset_cal_config_struct>:


VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800947c:	2300      	movs	r3, #0
 800947e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8009486:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800948e:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8009496:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800949e:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2208      	movs	r2, #8
 80094a4:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2228      	movs	r2, #40	; 0x28
 80094aa:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2209      	movs	r2, #9
 80094b0:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80094b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <VL53L1_init_zone_cal_config_struct>:

VL53L1_Error VL53L1_init_zone_cal_config_struct(
	VL53L1_zonecal_config_t   *pdata)
{
 80094c2:	b480      	push	{r7}
 80094c4:	b085      	sub	sp, #20
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094ca:	2300      	movs	r3, #0
 80094cc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80094d4:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f643 2298 	movw	r2, #15000	; 0x3a98
 80094dc:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094e4:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80094ec:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2210      	movs	r2, #16
 80094f2:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2208      	movs	r2, #8
 80094f8:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80094fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <VL53L1_init_hist_post_process_config_struct>:


VL53L1_Error VL53L1_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53L1_hist_post_process_config_t   *pdata)
{
 800950a:	b480      	push	{r7}
 800950c:	b085      	sub	sp, #20
 800950e:	af00      	add	r7, sp, #0
 8009510:	4603      	mov	r3, r0
 8009512:	6039      	str	r1, [r7, #0]
 8009514:	71fb      	strb	r3, [r7, #7]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	2204      	movs	r2, #4
 800951e:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	2201      	movs	r2, #1
 8009524:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2201      	movs	r2, #1
 800952a:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	2202      	movs	r2, #2
 8009530:	70da      	strb	r2, [r3, #3]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2201      	movs	r2, #1
 8009536:	711a      	strb	r2, [r3, #4]
			VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	2250      	movs	r2, #80	; 0x50
 800953c:	715a      	strb	r2, [r3, #5]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2270      	movs	r2, #112	; 0x70
 8009542:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	f241 023d 	movw	r2, #4157	; 0x103d
 800954a:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	2210      	movs	r2, #16
 8009550:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2232      	movs	r2, #50	; 0x32
 8009556:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	2264      	movs	r2, #100	; 0x64
 800955c:	615a      	str	r2, [r3, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	2201      	movs	r2, #1
 8009562:	761a      	strb	r2, [r3, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	22a0      	movs	r2, #160	; 0xa0
 8009568:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	2200      	movs	r2, #0
 800956e:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8009576:	83da      	strh	r2, [r3, #30]
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	2208      	movs	r2, #8
 800957c:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	2288      	movs	r2, #136	; 0x88
 8009584:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	2208      	movs	r2, #8
 800958c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800959e:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	22fa      	movs	r2, #250	; 0xfa
 80095a4:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	79fa      	ldrb	r2, [r7, #7]
 80095aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	f64f 72ce 	movw	r2, #65486	; 0xffce
 80095b4:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2232      	movs	r2, #50	; 0x32
 80095ba:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80095c2:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	228c      	movs	r2, #140	; 0x8c
 80095c8:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2250      	movs	r2, #80	; 0x50
 80095ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2232      	movs	r2, #50	; 0x32
 80095d6:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 80095d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3714      	adds	r7, #20
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <VL53L1_init_tuning_parm_storage_struct>:
}


VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80095f0:	2300      	movs	r3, #0
 80095f2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2220      	movs	r2, #32
 80095f8:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	220e      	movs	r2, #14
 80095fe:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f642 7294 	movw	r2, #12180	; 0x2f94
 8009606:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	220e      	movs	r2, #14
 800960c:	719a      	strb	r2, [r3, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	220a      	movs	r2, #10
 8009612:	71da      	strb	r2, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2206      	movs	r2, #6
 8009618:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	220e      	movs	r2, #14
 800961e:	725a      	strb	r2, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	220a      	movs	r2, #10
 8009624:	729a      	strb	r2, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2206      	movs	r2, #6
 800962a:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2209      	movs	r2, #9
 8009630:	731a      	strb	r2, [r3, #12]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2205      	movs	r2, #5
 8009636:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2203      	movs	r2, #3
 800963c:	739a      	strb	r2, [r3, #14]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2206      	movs	r2, #6
 8009642:	73da      	strb	r2, [r3, #15]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2206      	movs	r2, #6
 8009648:	741a      	strb	r2, [r3, #16]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2206      	movs	r2, #6
 800964e:	745a      	strb	r2, [r3, #17]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	749a      	strb	r2, [r3, #18]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2221      	movs	r2, #33	; 0x21
 800965a:	74da      	strb	r2, [r3, #19]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	223c      	movs	r2, #60	; 0x3c
 800966c:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	223c      	movs	r2, #60	; 0x3c
 8009672:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	223c      	movs	r2, #60	; 0x3c
 8009678:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2280      	movs	r2, #128	; 0x80
 800967e:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2280      	movs	r2, #128	; 0x80
 8009684:	841a      	strh	r2, [r3, #32]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2280      	movs	r2, #128	; 0x80
 800968a:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2208      	movs	r2, #8
 8009690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2210      	movs	r2, #16
 8009698:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2202      	movs	r2, #2
 80096a8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2202      	movs	r2, #2
 80096b8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80096ca:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80096d2:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80096da:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80096e2:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096ea:	639a      	str	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f643 2298 	movw	r2, #15000	; 0x3a98
 80096f2:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f242 3228 	movw	r2, #9000	; 0x2328
 80096fa:	641a      	str	r2, [r3, #64]	; 0x40
	VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f241 7270 	movw	r2, #6000	; 0x1770
 8009702:	645a      	str	r2, [r3, #68]	; 0x44
	VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f643 2298 	movw	r2, #15000	; 0x3a98
 800970a:	649a      	str	r2, [r3, #72]	; 0x48
	VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f242 3228 	movw	r2, #9000	; 0x2328
 8009712:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f241 7270 	movw	r2, #6000	; 0x1770
 800971a:	651a      	str	r2, [r3, #80]	; 0x50
		VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009722:	655a      	str	r2, [r3, #84]	; 0x54
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800972a:	659a      	str	r2, [r3, #88]	; 0x58
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009732:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800973a:	661a      	str	r2, [r3, #96]	; 0x60
			VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009742:	665a      	str	r2, [r3, #100]	; 0x64
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f24f 6218 	movw	r2, #63000	; 0xf618
 800974a:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009752:	671a      	str	r2, [r3, #112]	; 0x70
		VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800975a:	675a      	str	r2, [r3, #116]	; 0x74
			VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8009762:	679a      	str	r2, [r3, #120]	; 0x78
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	669a      	str	r2, [r3, #104]	; 0x68
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009770:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009778:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53L1_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f242 7210 	movw	r2, #10000	; 0x2710
 8009790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2206      	movs	r2, #6
 8009798:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	pdata->tp_uwr_enable =
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53L1_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80097aa:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f640 22be 	movw	r2, #2750	; 0xabe
 80097b4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	22fa      	movs	r2, #250	; 0xfa
 80097bc:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80097c6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80097d0:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80097da:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80097e4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80097ee:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f64f 7238 	movw	r2, #65336	; 0xff38
 80097f8:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	22c8      	movs	r2, #200	; 0xc8
 8009800:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_z_6_min =
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	22fa      	movs	r2, #250	; 0xfa
 8009808:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN_DEFAULT;
	pdata->tp_uwr_med_z_6_max =
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8009812:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f640 1206 	movw	r2, #2310	; 0x906
 800981c:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f640 1206 	movw	r2, #2310	; 0x906
 800982e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f640 421c 	movw	r2, #3100	; 0xc1c
 8009838:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8009842:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f640 421c 	movw	r2, #3100	; 0xc1c
 800984c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8009856:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f641 022e 	movw	r2, #6190	; 0x182e
 8009860:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangea =
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f641 3230 	movw	r2, #6960	; 0x1b30
 800987a:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f641 022e 	movw	r2, #6190	; 0x182e
 8009884:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	22fa      	movs	r2, #250	; 0xfa
 800988c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8009896:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f640 42b2 	movw	r2, #3250	; 0xcb2
 80098a0:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f241 1294 	movw	r2, #4500	; 0x1194
 80098aa:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f64f 7238 	movw	r2, #65336	; 0xff38
 80098b4:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	22c8      	movs	r2, #200	; 0xc8
 80098bc:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f640 3222 	movw	r2, #2850	; 0xb22
 80098c6:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f640 42e4 	movw	r2, #3300	; 0xce4
 80098d0:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f640 721e 	movw	r2, #3870	; 0xf1e
 80098ea:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f241 222a 	movw	r2, #4650	; 0x122a
 80098f4:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f640 720a 	movw	r2, #3850	; 0xf0a
 80098fe:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f641 6214 	movw	r2, #7700	; 0x1e14
 8009920:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 800992a:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_min_signal_secondary_targets =
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f641 1288 	movw	r2, #6536	; 0x1988
 8009944:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS_DEFAULT;
	LOG_FUNCTION_END(status);

	return status;
 8009948:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <VL53L1_init_hist_gen3_dmax_config_struct>:


VL53L1_Error VL53L1_init_hist_gen3_dmax_config_struct(
	VL53L1_hist_gen3_dmax_config_t   *pdata)
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009960:	2300      	movs	r3, #0
 8009962:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800996a:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2238      	movs	r2, #56	; 0x38
 8009970:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2220      	movs	r2, #32
 8009976:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2270      	movs	r2, #112	; 0x70
 800997c:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2210      	movs	r2, #16
 8009982:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2264      	movs	r2, #100	; 0x64
 8009988:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009990:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	220f      	movs	r2, #15
 8009996:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2234      	movs	r2, #52	; 0x34
 800999c:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	22c8      	movs	r2, #200	; 0xc8
 80099a2:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80099aa:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80099b2:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80099b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3714      	adds	r7, #20
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b087      	sub	sp, #28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80099d2:	2300      	movs	r3, #0
 80099d4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80099dc:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2200      	movs	r2, #0
 80099e2:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2200      	movs	r2, #0
 80099f4:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2211      	movs	r2, #17
 8009a1e:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2202      	movs	r2, #2
 8009a24:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2202      	movs	r2, #2
 8009a30:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2208      	movs	r2, #8
 8009a36:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8009a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a40:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8009a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8009a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a54:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2200      	movs	r2, #0
 8009a66:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	22ff      	movs	r2, #255	; 0xff
 8009a78:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8009a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7c:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8009a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a84:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2220      	movs	r2, #32
 8009aac:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	220b      	movs	r2, #11
 8009ab2:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	220d      	movs	r2, #13
 8009ac6:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8009aee:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2238      	movs	r2, #56	; 0x38
 8009afa:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	22ff      	movs	r2, #255	; 0xff
 8009b00:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	221a      	movs	r2, #26
 8009b12:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	2200      	movs	r2, #0
 8009b18:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2220      	movs	r2, #32
 8009b1e:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	2201      	movs	r2, #1
 8009b24:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	22cc      	movs	r2, #204	; 0xcc
 8009b2a:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	220b      	movs	r2, #11
 8009b30:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	2201      	movs	r2, #1
 8009b36:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	22f5      	movs	r2, #245	; 0xf5
 8009b3c:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2209      	movs	r2, #9
 8009b42:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8009b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b46:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8009b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4e:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	2208      	movs	r2, #8
 8009b58:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	2278      	movs	r2, #120	; 0x78
 8009b5e:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	2200      	movs	r2, #0
 8009b64:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	2207      	movs	r2, #7
 8009b70:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	2221      	movs	r2, #33	; 0x21
 8009b76:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	2243      	movs	r2, #67	; 0x43
 8009b7c:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2210      	movs	r2, #16
 8009b82:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2232      	movs	r2, #50	; 0x32
 8009b88:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	2254      	movs	r2, #84	; 0x54
 8009b8e:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	2207      	movs	r2, #7
 8009b94:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	2221      	movs	r2, #33	; 0x21
 8009b9a:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	2243      	movs	r2, #67	; 0x43
 8009ba0:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	2210      	movs	r2, #16
 8009ba6:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	2202      	movs	r2, #2
 8009bac:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	2243      	movs	r2, #67	; 0x43
 8009bb2:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2205      	movs	r2, #5
 8009bb8:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2207      	movs	r2, #7
 8009bc4:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	2221      	movs	r2, #33	; 0x21
 8009bca:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2243      	movs	r2, #67	; 0x43
 8009bd0:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2210      	movs	r2, #16
 8009bd6:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	2232      	movs	r2, #50	; 0x32
 8009bdc:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2254      	movs	r2, #84	; 0x54
 8009be2:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bea:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bf2:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 8009bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfc:	2210      	movs	r2, #16
 8009bfe:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8009c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c02:	2200      	movs	r2, #0
 8009c04:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c08:	220f      	movs	r2, #15
 8009c0a:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0e:	220f      	movs	r2, #15
 8009c10:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8009c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c14:	2208      	movs	r2, #8
 8009c16:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8009c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1a:	2208      	movs	r2, #8
 8009c1c:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	2201      	movs	r2, #1
 8009c22:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	2200      	movs	r2, #0
 8009c28:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	2200      	movs	r2, #0
 8009c34:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8009c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c38:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8009c40:	6a3b      	ldr	r3, [r7, #32]
 8009c42:	220b      	movs	r2, #11
 8009c44:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8009c46:	6a3b      	ldr	r3, [r7, #32]
 8009c48:	2209      	movs	r2, #9
 8009c4a:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8009c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4e:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8009c50:	6a3b      	ldr	r3, [r7, #32]
 8009c52:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8009c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c56:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8009c58:	6a3b      	ldr	r3, [r7, #32]
 8009c5a:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8009c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c64:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8009c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8009c72:	6a3b      	ldr	r3, [r7, #32]
 8009c74:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	22c7      	movs	r2, #199	; 0xc7
 8009c7a:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	22ff      	movs	r2, #255	; 0xff
 8009c80:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8009c82:	6a3b      	ldr	r3, [r7, #32]
 8009c84:	22db      	movs	r2, #219	; 0xdb
 8009c86:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8009c88:	6a3b      	ldr	r3, [r7, #32]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	2200      	movs	r2, #0
 8009c92:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	2201      	movs	r2, #1
 8009c98:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	2221      	movs	r2, #33	; 0x21
 8009ca4:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD |
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8009ca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	371c      	adds	r7, #28
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b08a      	sub	sp, #40	; 0x28
 8009cba:	af04      	add	r7, sp, #16
 8009cbc:	60f8      	str	r0, [r7, #12]
 8009cbe:	60b9      	str	r1, [r7, #8]
 8009cc0:	607a      	str	r2, [r7, #4]
 8009cc2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cca:	9303      	str	r3, [sp, #12]
 8009ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cce:	9302      	str	r3, [sp, #8]
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	9301      	str	r3, [sp, #4]
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	68b9      	ldr	r1, [r7, #8]
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f7ff fe70 	bl	80099c4 <VL53L1_preset_mode_standard_ranging>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009ce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d121      	bne.n	8009d34 <VL53L1_preset_mode_standard_ranging_short_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x07;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	2207      	movs	r2, #7
 8009cf4:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	2205      	movs	r2, #5
 8009cfa:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8009cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfe:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__sigma_thresh                  =
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8009d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d06:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	2208      	movs	r2, #8
 8009d10:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2238      	movs	r2, #56	; 0x38
 8009d16:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x07;
 8009d18:	6a3b      	ldr	r3, [r7, #32]
 8009d1a:	2207      	movs	r2, #7
 8009d1c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	2205      	movs	r2, #5
 8009d22:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8009d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d26:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8009d28:	6a3b      	ldr	r3, [r7, #32]
 8009d2a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8009d30:	6a3b      	ldr	r3, [r7, #32]
 8009d32:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8009d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3718      	adds	r7, #24
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b08a      	sub	sp, #40	; 0x28
 8009d44:	af04      	add	r7, sp, #16
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
 8009d4c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d54:	9303      	str	r3, [sp, #12]
 8009d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d58:	9302      	str	r3, [sp, #8]
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	9301      	str	r3, [sp, #4]
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	68b9      	ldr	r1, [r7, #8]
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f7ff fe2b 	bl	80099c4 <VL53L1_preset_mode_standard_ranging>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009d72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d121      	bne.n	8009dbe <VL53L1_preset_mode_standard_ranging_long_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x0F;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	220f      	movs	r2, #15
 8009d7e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	220d      	movs	r2, #13
 8009d84:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__sigma_thresh                  =
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8009d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d90:	8bda      	ldrh	r2, [r3, #30]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2208      	movs	r2, #8
 8009d9a:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	22b8      	movs	r2, #184	; 0xb8
 8009da0:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x0F;
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	220f      	movs	r2, #15
 8009da6:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 8009da8:	6a3b      	ldr	r3, [r7, #32]
 8009daa:	220d      	movs	r2, #13
 8009dac:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8009dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db0:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8009db2:	6a3b      	ldr	r3, [r7, #32]
 8009db4:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8009db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db8:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8009dba:	6a3b      	ldr	r3, [r7, #32]
 8009dbc:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8009dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3718      	adds	r7, #24
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b08a      	sub	sp, #40	; 0x28
 8009dce:	af04      	add	r7, sp, #16
 8009dd0:	60f8      	str	r0, [r7, #12]
 8009dd2:	60b9      	str	r1, [r7, #8]
 8009dd4:	607a      	str	r2, [r7, #4]
 8009dd6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dde:	9303      	str	r3, [sp, #12]
 8009de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de2:	9302      	str	r3, [sp, #8]
 8009de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de6:	9301      	str	r3, [sp, #4]
 8009de8:	6a3b      	ldr	r3, [r7, #32]
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	68b9      	ldr	r1, [r7, #8]
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f7ff fde6 	bl	80099c4 <VL53L1_preset_mode_standard_ranging>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009dfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d105      	bne.n	8009e10 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2202      	movs	r2, #2
 8009e08:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	223b      	movs	r2, #59	; 0x3b
 8009e0e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009e10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3718      	adds	r7, #24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b08a      	sub	sp, #40	; 0x28
 8009e20:	af04      	add	r7, sp, #16
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
 8009e28:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e30:	9303      	str	r3, [sp, #12]
 8009e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e34:	9302      	str	r3, [sp, #8]
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	9301      	str	r3, [sp, #4]
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	68b9      	ldr	r1, [r7, #8]
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f7ff fdbd 	bl	80099c4 <VL53L1_preset_mode_standard_ranging>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009e4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d105      	bne.n	8009e62 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2202      	movs	r2, #2
 8009e5a:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	225b      	movs	r2, #91	; 0x5b
 8009e60:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009e62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3718      	adds	r7, #24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b08a      	sub	sp, #40	; 0x28
 8009e72:	af04      	add	r7, sp, #16
 8009e74:	60f8      	str	r0, [r7, #12]
 8009e76:	60b9      	str	r1, [r7, #8]
 8009e78:	607a      	str	r2, [r7, #4]
 8009e7a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e82:	9303      	str	r3, [sp, #12]
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e86:	9302      	str	r3, [sp, #8]
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	9301      	str	r3, [sp, #4]
 8009e8c:	6a3b      	ldr	r3, [r7, #32]
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	68b9      	ldr	r1, [r7, #8]
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f7ff fd94 	bl	80099c4 <VL53L1_preset_mode_standard_ranging>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d11a      	bne.n	8009ede <VL53L1_preset_mode_timed_ranging+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	749a      	strb	r2, [r3, #18]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	22b1      	movs	r2, #177	; 0xb1
 8009eb8:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	22d4      	movs	r2, #212	; 0xd4
 8009ec4:	721a      	strb	r2, [r3, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009ecc:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	2240      	movs	r2, #64	; 0x40
 8009edc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009ede:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3718      	adds	r7, #24
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b08a      	sub	sp, #40	; 0x28
 8009eee:	af04      	add	r7, sp, #16
 8009ef0:	60f8      	str	r0, [r7, #12]
 8009ef2:	60b9      	str	r1, [r7, #8]
 8009ef4:	607a      	str	r2, [r7, #4]
 8009ef6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 8009efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efe:	9303      	str	r3, [sp, #12]
 8009f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f02:	9302      	str	r3, [sp, #8]
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	6a3b      	ldr	r3, [r7, #32]
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	68b9      	ldr	r1, [r7, #8]
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f7ff fecf 	bl	8009cb6 <VL53L1_preset_mode_standard_ranging_short_range>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009f1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d11a      	bne.n	8009f5a <VL53L1_preset_mode_timed_ranging_short_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	2200      	movs	r2, #0
 8009f28:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2284      	movs	r2, #132	; 0x84
 8009f34:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	22b1      	movs	r2, #177	; 0xb1
 8009f40:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009f48:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8009f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8009f50:	6a3b      	ldr	r3, [r7, #32]
 8009f52:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8009f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f56:	2240      	movs	r2, #64	; 0x40
 8009f58:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b08a      	sub	sp, #40	; 0x28
 8009f6a:	af04      	add	r7, sp, #16
 8009f6c:	60f8      	str	r0, [r7, #12]
 8009f6e:	60b9      	str	r1, [r7, #8]
 8009f70:	607a      	str	r2, [r7, #4]
 8009f72:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009f74:	2300      	movs	r3, #0
 8009f76:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 8009f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7a:	9303      	str	r3, [sp, #12]
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	9302      	str	r3, [sp, #8]
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f82:	9301      	str	r3, [sp, #4]
 8009f84:	6a3b      	ldr	r3, [r7, #32]
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	68b9      	ldr	r1, [r7, #8]
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f7ff fed6 	bl	8009d40 <VL53L1_preset_mode_standard_ranging_long_range>
 8009f94:	4603      	mov	r3, r0
 8009f96:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009f98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d11a      	bne.n	8009fd6 <VL53L1_preset_mode_timed_ranging_long_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	2297      	movs	r2, #151	; 0x97
 8009fb0:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	22b1      	movs	r2, #177	; 0xb1
 8009fbc:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009fc4:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8009fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8009fcc:	6a3b      	ldr	r3, [r7, #32]
 8009fce:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd2:	2240      	movs	r2, #64	; 0x40
 8009fd4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b08a      	sub	sp, #40	; 0x28
 8009fe6:	af04      	add	r7, sp, #16
 8009fe8:	60f8      	str	r0, [r7, #12]
 8009fea:	60b9      	str	r1, [r7, #8]
 8009fec:	607a      	str	r2, [r7, #4]
 8009fee:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 8009ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff6:	9303      	str	r3, [sp, #12]
 8009ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffa:	9302      	str	r3, [sp, #8]
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	9301      	str	r3, [sp, #4]
 800a000:	6a3b      	ldr	r3, [r7, #32]
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	68b9      	ldr	r1, [r7, #8]
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f7ff ff2f 	bl	8009e6e <VL53L1_preset_mode_timed_ranging>
 800a010:	4603      	mov	r3, r0
 800a012:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a014:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d106      	bne.n	800a02a <VL53L1_preset_mode_low_power_auto_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800a01c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a01e:	6a39      	ldr	r1, [r7, #32]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f005 f978 	bl	800f316 <VL53L1_config_low_power_auto_mode>
 800a026:	4603      	mov	r3, r0
 800a028:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a02a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b08a      	sub	sp, #40	; 0x28
 800a03a:	af04      	add	r7, sp, #16
 800a03c:	60f8      	str	r0, [r7, #12]
 800a03e:	60b9      	str	r1, [r7, #8]
 800a040:	607a      	str	r2, [r7, #4]
 800a042:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a044:	2300      	movs	r3, #0
 800a046:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 800a048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04a:	9303      	str	r3, [sp, #12]
 800a04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04e:	9302      	str	r3, [sp, #8]
 800a050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a052:	9301      	str	r3, [sp, #4]
 800a054:	6a3b      	ldr	r3, [r7, #32]
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	68b9      	ldr	r1, [r7, #8]
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f7ff ff43 	bl	8009eea <VL53L1_preset_mode_timed_ranging_short_range>
 800a064:	4603      	mov	r3, r0
 800a066:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a068:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d106      	bne.n	800a07e <VL53L1_preset_mode_low_power_auto_short_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800a070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a072:	6a39      	ldr	r1, [r7, #32]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f005 f94e 	bl	800f316 <VL53L1_config_low_power_auto_mode>
 800a07a:	4603      	mov	r3, r0
 800a07c:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a07e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3718      	adds	r7, #24
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b08a      	sub	sp, #40	; 0x28
 800a08e:	af04      	add	r7, sp, #16
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	60b9      	str	r1, [r7, #8]
 800a094:	607a      	str	r2, [r7, #4]
 800a096:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a098:	2300      	movs	r3, #0
 800a09a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 800a09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09e:	9303      	str	r3, [sp, #12]
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	9302      	str	r3, [sp, #8]
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a6:	9301      	str	r3, [sp, #4]
 800a0a8:	6a3b      	ldr	r3, [r7, #32]
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	68b9      	ldr	r1, [r7, #8]
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f7ff ff57 	bl	8009f66 <VL53L1_preset_mode_timed_ranging_long_range>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a0bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d106      	bne.n	800a0d2 <VL53L1_preset_mode_low_power_auto_long_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800a0c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0c6:	6a39      	ldr	r1, [r7, #32]
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f005 f924 	bl	800f316 <VL53L1_config_low_power_auto_mode>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a0d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3718      	adds	r7, #24
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b08a      	sub	sp, #40	; 0x28
 800a0e2:	af04      	add	r7, sp, #16
 800a0e4:	60f8      	str	r0, [r7, #12]
 800a0e6:	60b9      	str	r1, [r7, #8]
 800a0e8:	607a      	str	r2, [r7, #4]
 800a0ea:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800a0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f2:	9303      	str	r3, [sp, #12]
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	9302      	str	r3, [sp, #8]
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fa:	9301      	str	r3, [sp, #4]
 800a0fc:	6a3b      	ldr	r3, [r7, #32]
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	68b9      	ldr	r1, [r7, #8]
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f7ff fc5c 	bl	80099c4 <VL53L1_preset_mode_standard_ranging>
 800a10c:	4603      	mov	r3, r0
 800a10e:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a110:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d116      	bne.n	800a146 <VL53L1_preset_mode_singleshot_ranging+0x68>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800a118:	6a3b      	ldr	r3, [r7, #32]
 800a11a:	2200      	movs	r2, #0
 800a11c:	749a      	strb	r2, [r3, #18]




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2200      	movs	r2, #0
 800a122:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	22b1      	movs	r2, #177	; 0xb1
 800a128:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	2200      	movs	r2, #0
 800a12e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	22d4      	movs	r2, #212	; 0xd4
 800a134:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800a136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a138:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800a140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a142:	2210      	movs	r2, #16
 800a144:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a146:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3718      	adds	r7, #24
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <VL53L1_preset_mode_histogram_ranging>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b090      	sub	sp, #64	; 0x40
 800a156:	af0a      	add	r7, sp, #40	; 0x28
 800a158:	60f8      	str	r0, [r7, #12]
 800a15a:	60b9      	str	r1, [r7, #8]
 800a15c:	607a      	str	r2, [r7, #4]
 800a15e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a160:	2300      	movs	r3, #0
 800a162:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_standard_ranging(
 800a164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a166:	9303      	str	r3, [sp, #12]
 800a168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16a:	9302      	str	r3, [sp, #8]
 800a16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16e:	9301      	str	r3, [sp, #4]
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	9300      	str	r3, [sp, #0]
 800a174:	6a3b      	ldr	r3, [r7, #32]
 800a176:	683a      	ldr	r2, [r7, #0]
 800a178:	6879      	ldr	r1, [r7, #4]
 800a17a:	68b8      	ldr	r0, [r7, #8]
 800a17c:	f7ff fc22 	bl	80099c4 <VL53L1_preset_mode_standard_ranging>
 800a180:	4603      	mov	r3, r0
 800a182:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a184:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d171      	bne.n	800a270 <VL53L1_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800a192:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	9308      	str	r3, [sp, #32]
 800a198:	2305      	movs	r3, #5
 800a19a:	9307      	str	r3, [sp, #28]
 800a19c:	2304      	movs	r3, #4
 800a19e:	9306      	str	r3, [sp, #24]
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	9305      	str	r3, [sp, #20]
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	9304      	str	r3, [sp, #16]
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	9303      	str	r3, [sp, #12]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9302      	str	r3, [sp, #8]
 800a1b0:	2304      	movs	r3, #4
 800a1b2:	9301      	str	r3, [sp, #4]
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	2302      	movs	r3, #2
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	2100      	movs	r1, #0
 800a1be:	2007      	movs	r0, #7
 800a1c0:	f001 fe1b 	bl	800bdfa <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c6:	3302      	adds	r3, #2
 800a1c8:	9308      	str	r3, [sp, #32]
 800a1ca:	2305      	movs	r3, #5
 800a1cc:	9307      	str	r3, [sp, #28]
 800a1ce:	2304      	movs	r3, #4
 800a1d0:	9306      	str	r3, [sp, #24]
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	9305      	str	r3, [sp, #20]
 800a1d6:	2302      	movs	r3, #2
 800a1d8:	9304      	str	r3, [sp, #16]
 800a1da:	2301      	movs	r3, #1
 800a1dc:	9303      	str	r3, [sp, #12]
 800a1de:	2300      	movs	r3, #0
 800a1e0:	9302      	str	r3, [sp, #8]
 800a1e2:	2304      	movs	r3, #4
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	2007      	movs	r0, #7
 800a1f2:	f001 fe92 	bl	800bf1a <VL53L1_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 800a1f6:	6a3b      	ldr	r3, [r7, #32]
 800a1f8:	2209      	movs	r2, #9
 800a1fa:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	220b      	movs	r2, #11
 800a200:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 800a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a204:	2209      	movs	r2, #9
 800a206:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800a208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20a:	220b      	movs	r2, #11
 800a20c:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800a20e:	6a3b      	ldr	r3, [r7, #32]
 800a210:	2200      	movs	r2, #0
 800a212:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 800a214:	6a3b      	ldr	r3, [r7, #32]
 800a216:	2220      	movs	r2, #32
 800a218:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	2200      	movs	r2, #0
 800a21e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 800a220:	6a3b      	ldr	r3, [r7, #32]
 800a222:	221a      	movs	r2, #26
 800a224:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	2200      	movs	r2, #0
 800a22a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	2228      	movs	r2, #40	; 0x28
 800a230:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	2200      	movs	r2, #0
 800a236:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 800a238:	6a3b      	ldr	r3, [r7, #32]
 800a23a:	2221      	movs	r2, #33	; 0x21
 800a23c:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	22f5      	movs	r2, #245	; 0xf5
 800a242:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2208      	movs	r2, #8
 800a248:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2288      	movs	r2, #136	; 0x88
 800a250:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	68b9      	ldr	r1, [r7, #8]
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f001 f821 	bl	800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 800a264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a266:	229b      	movs	r2, #155	; 0x9b
 800a268:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800a26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26c:	2226      	movs	r2, #38	; 0x26
 800a26e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a270:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3718      	adds	r7, #24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <VL53L1_preset_mode_histogram_ranging_with_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b090      	sub	sp, #64	; 0x40
 800a280:	af0a      	add	r7, sp, #40	; 0x28
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
 800a288:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a28a:	2300      	movs	r3, #0
 800a28c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a290:	9304      	str	r3, [sp, #16]
 800a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a294:	9303      	str	r3, [sp, #12]
 800a296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a298:	9302      	str	r3, [sp, #8]
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	9301      	str	r3, [sp, #4]
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	68b9      	ldr	r1, [r7, #8]
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f7ff ff52 	bl	800a152 <VL53L1_preset_mode_histogram_ranging>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a2b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d13e      	bne.n	800a338 <VL53L1_preset_mode_histogram_ranging_with_mm1+0xbc>



		VL53L1_init_histogram_config_structure(
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	9308      	str	r3, [sp, #32]
 800a2be:	2305      	movs	r3, #5
 800a2c0:	9307      	str	r3, [sp, #28]
 800a2c2:	2304      	movs	r3, #4
 800a2c4:	9306      	str	r3, [sp, #24]
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	9305      	str	r3, [sp, #20]
 800a2ca:	230a      	movs	r3, #10
 800a2cc:	9304      	str	r3, [sp, #16]
 800a2ce:	2309      	movs	r3, #9
 800a2d0:	9303      	str	r3, [sp, #12]
 800a2d2:	2308      	movs	r3, #8
 800a2d4:	9302      	str	r3, [sp, #8]
 800a2d6:	2304      	movs	r3, #4
 800a2d8:	9301      	str	r3, [sp, #4]
 800a2da:	2303      	movs	r3, #3
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	2302      	movs	r3, #2
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	2007      	movs	r0, #7
 800a2e6:	f001 fd88 	bl	800bdfa <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	3302      	adds	r3, #2
 800a2ee:	9308      	str	r3, [sp, #32]
 800a2f0:	2305      	movs	r3, #5
 800a2f2:	9307      	str	r3, [sp, #28]
 800a2f4:	2304      	movs	r3, #4
 800a2f6:	9306      	str	r3, [sp, #24]
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	9305      	str	r3, [sp, #20]
 800a2fc:	230a      	movs	r3, #10
 800a2fe:	9304      	str	r3, [sp, #16]
 800a300:	2309      	movs	r3, #9
 800a302:	9303      	str	r3, [sp, #12]
 800a304:	2308      	movs	r3, #8
 800a306:	9302      	str	r3, [sp, #8]
 800a308:	2304      	movs	r3, #4
 800a30a:	9301      	str	r3, [sp, #4]
 800a30c:	2303      	movs	r3, #3
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	2302      	movs	r3, #2
 800a312:	2201      	movs	r2, #1
 800a314:	2100      	movs	r1, #0
 800a316:	2007      	movs	r0, #7
 800a318:	f001 fdff 	bl	800bf1a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	68b9      	ldr	r1, [r7, #8]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 ffbd 	bl	800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800a32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32e:	22bb      	movs	r2, #187	; 0xbb
 800a330:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN |
				VL53L1_SEQUENCE_RANGE_EN;



		psystem->system__mode_start =
 800a332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a334:	2226      	movs	r2, #38	; 0x26
 800a336:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a338:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <VL53L1_preset_mode_histogram_ranging_with_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b08c      	sub	sp, #48	; 0x30
 800a348:	af06      	add	r7, sp, #24
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
 800a350:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a352:	2300      	movs	r3, #0
 800a354:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 800a356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a358:	9304      	str	r3, [sp, #16]
 800a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35c:	9303      	str	r3, [sp, #12]
 800a35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a360:	9302      	str	r3, [sp, #8]
 800a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a364:	9301      	str	r3, [sp, #4]
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	68b9      	ldr	r1, [r7, #8]
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f7ff ff83 	bl	800a27c <VL53L1_preset_mode_histogram_ranging_with_mm1>
 800a376:	4603      	mov	r3, r0
 800a378:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a37a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d102      	bne.n	800a388 <VL53L1_preset_mode_histogram_ranging_with_mm2+0x44>



		pdynamic->system__sequence_config =
 800a382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a384:	22db      	movs	r2, #219	; 0xdb
 800a386:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a388:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3718      	adds	r7, #24
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b090      	sub	sp, #64	; 0x40
 800a398:	af0a      	add	r7, sp, #40	; 0x28
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a8:	9304      	str	r3, [sp, #16]
 800a3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ac:	9303      	str	r3, [sp, #12]
 800a3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b0:	9302      	str	r3, [sp, #8]
 800a3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b4:	9301      	str	r3, [sp, #4]
 800a3b6:	6a3b      	ldr	r3, [r7, #32]
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	68b9      	ldr	r1, [r7, #8]
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f7ff fec6 	bl	800a152 <VL53L1_preset_mode_histogram_ranging>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a3ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d13e      	bne.n	800a450 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0xbc>



		VL53L1_init_histogram_config_structure(
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	9308      	str	r3, [sp, #32]
 800a3d6:	230d      	movs	r3, #13
 800a3d8:	9307      	str	r3, [sp, #28]
 800a3da:	230c      	movs	r3, #12
 800a3dc:	9306      	str	r3, [sp, #24]
 800a3de:	230b      	movs	r3, #11
 800a3e0:	9305      	str	r3, [sp, #20]
 800a3e2:	230a      	movs	r3, #10
 800a3e4:	9304      	str	r3, [sp, #16]
 800a3e6:	2309      	movs	r3, #9
 800a3e8:	9303      	str	r3, [sp, #12]
 800a3ea:	2308      	movs	r3, #8
 800a3ec:	9302      	str	r3, [sp, #8]
 800a3ee:	230c      	movs	r3, #12
 800a3f0:	9301      	str	r3, [sp, #4]
 800a3f2:	230b      	movs	r3, #11
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	230a      	movs	r3, #10
 800a3f8:	2209      	movs	r2, #9
 800a3fa:	2108      	movs	r1, #8
 800a3fc:	2007      	movs	r0, #7
 800a3fe:	f001 fcfc 	bl	800bdfa <VL53L1_init_histogram_config_structure>
				  7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a404:	3302      	adds	r3, #2
 800a406:	9308      	str	r3, [sp, #32]
 800a408:	230d      	movs	r3, #13
 800a40a:	9307      	str	r3, [sp, #28]
 800a40c:	230c      	movs	r3, #12
 800a40e:	9306      	str	r3, [sp, #24]
 800a410:	230b      	movs	r3, #11
 800a412:	9305      	str	r3, [sp, #20]
 800a414:	230a      	movs	r3, #10
 800a416:	9304      	str	r3, [sp, #16]
 800a418:	2309      	movs	r3, #9
 800a41a:	9303      	str	r3, [sp, #12]
 800a41c:	2308      	movs	r3, #8
 800a41e:	9302      	str	r3, [sp, #8]
 800a420:	230c      	movs	r3, #12
 800a422:	9301      	str	r3, [sp, #4]
 800a424:	230b      	movs	r3, #11
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	230a      	movs	r3, #10
 800a42a:	2209      	movs	r2, #9
 800a42c:	2108      	movs	r1, #8
 800a42e:	2007      	movs	r0, #7
 800a430:	f001 fd73 	bl	800bf1a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	6a3b      	ldr	r3, [r7, #32]
 800a43a:	683a      	ldr	r2, [r7, #0]
 800a43c:	68b9      	ldr	r1, [r7, #8]
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 ff31 	bl	800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pgeneral->dss_config__roi_mode_control =
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2202      	movs	r2, #2
 800a448:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;



		pdynamic->system__sequence_config =
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	22bb      	movs	r2, #187	; 0xbb
 800a44e:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800a450:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3718      	adds	r7, #24
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b08c      	sub	sp, #48	; 0x30
 800a460:	af06      	add	r7, sp, #24
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
 800a468:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a46a:	2300      	movs	r3, #0
 800a46c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	9304      	str	r3, [sp, #16]
 800a472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a474:	9303      	str	r3, [sp, #12]
 800a476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a478:	9302      	str	r3, [sp, #8]
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	9301      	str	r3, [sp, #4]
 800a47e:	6a3b      	ldr	r3, [r7, #32]
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	68b9      	ldr	r1, [r7, #8]
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f7ff ff83 	bl	800a394 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 800a48e:	4603      	mov	r3, r0
 800a490:	75fb      	strb	r3, [r7, #23]
				pdynamic,
				psystem,
				ptuning_parms,
				pzone_cfg);

	if (status == VL53L1_ERROR_NONE) {
 800a492:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d102      	bne.n	800a4a0 <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x44>



		pdynamic->system__sequence_config =
 800a49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49c:	22db      	movs	r2, #219	; 0xdb
 800a49e:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800a4a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3718      	adds	r7, #24
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <VL53L1_preset_mode_histogram_ranging_short_timing>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b090      	sub	sp, #64	; 0x40
 800a4b0:	af0a      	add	r7, sp, #40	; 0x28
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
 800a4b8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	9304      	str	r3, [sp, #16]
 800a4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c4:	9303      	str	r3, [sp, #12]
 800a4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c8:	9302      	str	r3, [sp, #8]
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	9301      	str	r3, [sp, #4]
 800a4ce:	6a3b      	ldr	r3, [r7, #32]
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	68b9      	ldr	r1, [r7, #8]
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f7ff fe3a 	bl	800a152 <VL53L1_preset_mode_histogram_ranging>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a4e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d166      	bne.n	800a5b8 <VL53L1_preset_mode_histogram_ranging_short_timing+0x10c>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800a4f0:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	9308      	str	r3, [sp, #32]
 800a4f6:	2304      	movs	r3, #4
 800a4f8:	9307      	str	r3, [sp, #28]
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	9306      	str	r3, [sp, #24]
 800a4fe:	2302      	movs	r3, #2
 800a500:	9305      	str	r3, [sp, #20]
 800a502:	2301      	movs	r3, #1
 800a504:	9304      	str	r3, [sp, #16]
 800a506:	2300      	movs	r3, #0
 800a508:	9303      	str	r3, [sp, #12]
 800a50a:	2307      	movs	r3, #7
 800a50c:	9302      	str	r3, [sp, #8]
 800a50e:	2304      	movs	r3, #4
 800a510:	9301      	str	r3, [sp, #4]
 800a512:	2303      	movs	r3, #3
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	2302      	movs	r3, #2
 800a518:	2201      	movs	r2, #1
 800a51a:	2100      	movs	r1, #0
 800a51c:	2007      	movs	r0, #7
 800a51e:	f001 fc6c 	bl	800bdfa <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				7, 0, 1, 2, 3, 4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a524:	3302      	adds	r3, #2
 800a526:	9308      	str	r3, [sp, #32]
 800a528:	2304      	movs	r3, #4
 800a52a:	9307      	str	r3, [sp, #28]
 800a52c:	2303      	movs	r3, #3
 800a52e:	9306      	str	r3, [sp, #24]
 800a530:	2302      	movs	r3, #2
 800a532:	9305      	str	r3, [sp, #20]
 800a534:	2301      	movs	r3, #1
 800a536:	9304      	str	r3, [sp, #16]
 800a538:	2300      	movs	r3, #0
 800a53a:	9303      	str	r3, [sp, #12]
 800a53c:	2307      	movs	r3, #7
 800a53e:	9302      	str	r3, [sp, #8]
 800a540:	2304      	movs	r3, #4
 800a542:	9301      	str	r3, [sp, #4]
 800a544:	2303      	movs	r3, #3
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	2302      	movs	r3, #2
 800a54a:	2201      	movs	r2, #1
 800a54c:	2100      	movs	r1, #0
 800a54e:	2007      	movs	r0, #7
 800a550:	f001 fce3 	bl	800bf1a <VL53L1_init_histogram_multizone_config_structure>
				7, 0, 1, 2, 3, 4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	6a3b      	ldr	r3, [r7, #32]
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	68b9      	ldr	r1, [r7, #8]
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fea1 	bl	800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x04;
 800a564:	6a3b      	ldr	r3, [r7, #32]
 800a566:	2204      	movs	r2, #4
 800a568:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 800a56a:	6a3b      	ldr	r3, [r7, #32]
 800a56c:	2203      	movs	r2, #3
 800a56e:	725a      	strb	r2, [r3, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800a570:	6a3b      	ldr	r3, [r7, #32]
 800a572:	2200      	movs	r2, #0
 800a574:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x42;
 800a576:	6a3b      	ldr	r3, [r7, #32]
 800a578:	2242      	movs	r2, #66	; 0x42
 800a57a:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800a57c:	6a3b      	ldr	r3, [r7, #32]
 800a57e:	2200      	movs	r2, #0
 800a580:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x42;
 800a582:	6a3b      	ldr	r3, [r7, #32]
 800a584:	2242      	movs	r2, #66	; 0x42
 800a586:	70da      	strb	r2, [r3, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a588:	6a3b      	ldr	r3, [r7, #32]
 800a58a:	2200      	movs	r2, #0
 800a58c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x52;
 800a58e:	6a3b      	ldr	r3, [r7, #32]
 800a590:	2252      	movs	r2, #82	; 0x52
 800a592:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a594:	6a3b      	ldr	r3, [r7, #32]
 800a596:	2200      	movs	r2, #0
 800a598:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 800a59a:	6a3b      	ldr	r3, [r7, #32]
 800a59c:	2266      	movs	r2, #102	; 0x66
 800a59e:	721a      	strb	r2, [r3, #8]

		pgeneral->cal_config__vcsel_start = 0x04;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	2204      	movs	r2, #4
 800a5a4:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	22a4      	movs	r2, #164	; 0xa4
 800a5aa:	71da      	strb	r2, [r3, #7]



		pdynamic->system__sequence_config =
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	229b      	movs	r2, #155	; 0x9b
 800a5b0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800a5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b4:	2226      	movs	r2, #38	; 0x26
 800a5b6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a5b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <VL53L1_preset_mode_histogram_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b090      	sub	sp, #64	; 0x40
 800a5c8:	af0a      	add	r7, sp, #40	; 0x28
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
 800a5d0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	9304      	str	r3, [sp, #16]
 800a5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5dc:	9303      	str	r3, [sp, #12]
 800a5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e0:	9302      	str	r3, [sp, #8]
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e4:	9301      	str	r3, [sp, #4]
 800a5e6:	6a3b      	ldr	r3, [r7, #32]
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	68b9      	ldr	r1, [r7, #8]
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f7ff fdae 	bl	800a152 <VL53L1_preset_mode_histogram_ranging>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a5fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d178      	bne.n	800a6f4 <VL53L1_preset_mode_histogram_long_range+0x130>





		VL53L1_init_histogram_config_structure(
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	9308      	str	r3, [sp, #32]
 800a606:	2305      	movs	r3, #5
 800a608:	9307      	str	r3, [sp, #28]
 800a60a:	2304      	movs	r3, #4
 800a60c:	9306      	str	r3, [sp, #24]
 800a60e:	2303      	movs	r3, #3
 800a610:	9305      	str	r3, [sp, #20]
 800a612:	2302      	movs	r3, #2
 800a614:	9304      	str	r3, [sp, #16]
 800a616:	2301      	movs	r3, #1
 800a618:	9303      	str	r3, [sp, #12]
 800a61a:	2300      	movs	r3, #0
 800a61c:	9302      	str	r3, [sp, #8]
 800a61e:	2304      	movs	r3, #4
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	2303      	movs	r3, #3
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	2302      	movs	r3, #2
 800a628:	2201      	movs	r2, #1
 800a62a:	2100      	movs	r1, #0
 800a62c:	2007      	movs	r0, #7
 800a62e:	f001 fbe4 	bl	800bdfa <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a634:	3302      	adds	r3, #2
 800a636:	9308      	str	r3, [sp, #32]
 800a638:	2305      	movs	r3, #5
 800a63a:	9307      	str	r3, [sp, #28]
 800a63c:	2304      	movs	r3, #4
 800a63e:	9306      	str	r3, [sp, #24]
 800a640:	2303      	movs	r3, #3
 800a642:	9305      	str	r3, [sp, #20]
 800a644:	2302      	movs	r3, #2
 800a646:	9304      	str	r3, [sp, #16]
 800a648:	2301      	movs	r3, #1
 800a64a:	9303      	str	r3, [sp, #12]
 800a64c:	2300      	movs	r3, #0
 800a64e:	9302      	str	r3, [sp, #8]
 800a650:	2304      	movs	r3, #4
 800a652:	9301      	str	r3, [sp, #4]
 800a654:	2303      	movs	r3, #3
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	2302      	movs	r3, #2
 800a65a:	2201      	movs	r2, #1
 800a65c:	2100      	movs	r1, #0
 800a65e:	2007      	movs	r0, #7
 800a660:	f001 fc5b 	bl	800bf1a <VL53L1_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	6a3b      	ldr	r3, [r7, #32]
 800a66a:	683a      	ldr	r2, [r7, #0]
 800a66c:	68b9      	ldr	r1, [r7, #8]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 fe19 	bl	800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800a674:	6a3b      	ldr	r3, [r7, #32]
 800a676:	2209      	movs	r2, #9
 800a678:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 800a67a:	6a3b      	ldr	r3, [r7, #32]
 800a67c:	220b      	movs	r2, #11
 800a67e:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	2200      	movs	r2, #0
 800a684:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	2221      	movs	r2, #33	; 0x21
 800a68a:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800a68c:	6a3b      	ldr	r3, [r7, #32]
 800a68e:	2200      	movs	r2, #0
 800a690:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 800a692:	6a3b      	ldr	r3, [r7, #32]
 800a694:	221b      	movs	r2, #27
 800a696:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a698:	6a3b      	ldr	r3, [r7, #32]
 800a69a:	2200      	movs	r2, #0
 800a69c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800a69e:	6a3b      	ldr	r3, [r7, #32]
 800a6a0:	2229      	movs	r2, #41	; 0x29
 800a6a2:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a6a4:	6a3b      	ldr	r3, [r7, #32]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	2222      	movs	r2, #34	; 0x22
 800a6ae:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	2209      	movs	r2, #9
 800a6b4:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	22f5      	movs	r2, #245	; 0xf5
 800a6ba:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6be:	2209      	movs	r2, #9
 800a6c0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c4:	220b      	movs	r2, #11
 800a6c6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 800a6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ca:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ce:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 800a6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d2:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2208      	movs	r2, #8
 800a6dc:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2288      	movs	r2, #136	; 0x88
 800a6e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ea:	229b      	movs	r2, #155	; 0x9b
 800a6ec:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800a6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f0:	2226      	movs	r2, #38	; 0x26
 800a6f2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a6f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3718      	adds	r7, #24
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <VL53L1_preset_mode_histogram_long_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b090      	sub	sp, #64	; 0x40
 800a704:	af0a      	add	r7, sp, #40	; 0x28
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a70e:	2300      	movs	r3, #0
 800a710:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800a712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a714:	9304      	str	r3, [sp, #16]
 800a716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a718:	9303      	str	r3, [sp, #12]
 800a71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71c:	9302      	str	r3, [sp, #8]
 800a71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	6a3b      	ldr	r3, [r7, #32]
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	68b9      	ldr	r1, [r7, #8]
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f7ff ff49 	bl	800a5c4 <VL53L1_preset_mode_histogram_long_range>
 800a732:	4603      	mov	r3, r0
 800a734:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a736:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d13b      	bne.n	800a7b6 <VL53L1_preset_mode_histogram_long_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	9308      	str	r3, [sp, #32]
 800a742:	2305      	movs	r3, #5
 800a744:	9307      	str	r3, [sp, #28]
 800a746:	2304      	movs	r3, #4
 800a748:	9306      	str	r3, [sp, #24]
 800a74a:	2303      	movs	r3, #3
 800a74c:	9305      	str	r3, [sp, #20]
 800a74e:	230a      	movs	r3, #10
 800a750:	9304      	str	r3, [sp, #16]
 800a752:	2309      	movs	r3, #9
 800a754:	9303      	str	r3, [sp, #12]
 800a756:	2308      	movs	r3, #8
 800a758:	9302      	str	r3, [sp, #8]
 800a75a:	2304      	movs	r3, #4
 800a75c:	9301      	str	r3, [sp, #4]
 800a75e:	2303      	movs	r3, #3
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	2302      	movs	r3, #2
 800a764:	2201      	movs	r2, #1
 800a766:	2100      	movs	r1, #0
 800a768:	2007      	movs	r0, #7
 800a76a:	f001 fb46 	bl	800bdfa <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a770:	3302      	adds	r3, #2
 800a772:	9308      	str	r3, [sp, #32]
 800a774:	2305      	movs	r3, #5
 800a776:	9307      	str	r3, [sp, #28]
 800a778:	2304      	movs	r3, #4
 800a77a:	9306      	str	r3, [sp, #24]
 800a77c:	2303      	movs	r3, #3
 800a77e:	9305      	str	r3, [sp, #20]
 800a780:	230a      	movs	r3, #10
 800a782:	9304      	str	r3, [sp, #16]
 800a784:	2309      	movs	r3, #9
 800a786:	9303      	str	r3, [sp, #12]
 800a788:	2308      	movs	r3, #8
 800a78a:	9302      	str	r3, [sp, #8]
 800a78c:	2304      	movs	r3, #4
 800a78e:	9301      	str	r3, [sp, #4]
 800a790:	2303      	movs	r3, #3
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	2302      	movs	r3, #2
 800a796:	2201      	movs	r2, #1
 800a798:	2100      	movs	r1, #0
 800a79a:	2007      	movs	r0, #7
 800a79c:	f001 fbbd 	bl	800bf1a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	6a3b      	ldr	r3, [r7, #32]
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	68b9      	ldr	r1, [r7, #8]
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 fd7b 	bl	800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b2:	22bb      	movs	r2, #187	; 0xbb
 800a7b4:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a7b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3718      	adds	r7, #24
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <VL53L1_preset_mode_histogram_long_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t      *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b08c      	sub	sp, #48	; 0x30
 800a7c6:	af06      	add	r7, sp, #24
 800a7c8:	60f8      	str	r0, [r7, #12]
 800a7ca:	60b9      	str	r1, [r7, #8]
 800a7cc:	607a      	str	r2, [r7, #4]
 800a7ce:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range_mm1(
 800a7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d6:	9304      	str	r3, [sp, #16]
 800a7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7da:	9303      	str	r3, [sp, #12]
 800a7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7de:	9302      	str	r3, [sp, #8]
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	9301      	str	r3, [sp, #4]
 800a7e4:	6a3b      	ldr	r3, [r7, #32]
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	68b9      	ldr	r1, [r7, #8]
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f7ff ff86 	bl	800a700 <VL53L1_preset_mode_histogram_long_range_mm1>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a7f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d102      	bne.n	800a806 <VL53L1_preset_mode_histogram_long_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	22db      	movs	r2, #219	; 0xdb
 800a804:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a806:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <VL53L1_preset_mode_histogram_medium_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b090      	sub	sp, #64	; 0x40
 800a816:	af0a      	add	r7, sp, #40	; 0x28
 800a818:	60f8      	str	r0, [r7, #12]
 800a81a:	60b9      	str	r1, [r7, #8]
 800a81c:	607a      	str	r2, [r7, #4]
 800a81e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a820:	2300      	movs	r3, #0
 800a822:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a826:	9304      	str	r3, [sp, #16]
 800a828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82a:	9303      	str	r3, [sp, #12]
 800a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82e:	9302      	str	r3, [sp, #8]
 800a830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a832:	9301      	str	r3, [sp, #4]
 800a834:	6a3b      	ldr	r3, [r7, #32]
 800a836:	9300      	str	r3, [sp, #0]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	68b9      	ldr	r1, [r7, #8]
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f7ff fc87 	bl	800a152 <VL53L1_preset_mode_histogram_ranging>
 800a844:	4603      	mov	r3, r0
 800a846:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a848:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d178      	bne.n	800a942 <VL53L1_preset_mode_histogram_medium_range+0x130>





		VL53L1_init_histogram_config_structure(
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	9308      	str	r3, [sp, #32]
 800a854:	2303      	movs	r3, #3
 800a856:	9307      	str	r3, [sp, #28]
 800a858:	2302      	movs	r3, #2
 800a85a:	9306      	str	r3, [sp, #24]
 800a85c:	2301      	movs	r3, #1
 800a85e:	9305      	str	r3, [sp, #20]
 800a860:	2302      	movs	r3, #2
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	2301      	movs	r3, #1
 800a866:	9303      	str	r3, [sp, #12]
 800a868:	2300      	movs	r3, #0
 800a86a:	9302      	str	r3, [sp, #8]
 800a86c:	2302      	movs	r3, #2
 800a86e:	9301      	str	r3, [sp, #4]
 800a870:	2302      	movs	r3, #2
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	2301      	movs	r3, #1
 800a876:	2201      	movs	r2, #1
 800a878:	2100      	movs	r1, #0
 800a87a:	2007      	movs	r0, #7
 800a87c:	f001 fabd 	bl	800bdfa <VL53L1_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a882:	3302      	adds	r3, #2
 800a884:	9308      	str	r3, [sp, #32]
 800a886:	2303      	movs	r3, #3
 800a888:	9307      	str	r3, [sp, #28]
 800a88a:	2302      	movs	r3, #2
 800a88c:	9306      	str	r3, [sp, #24]
 800a88e:	2301      	movs	r3, #1
 800a890:	9305      	str	r3, [sp, #20]
 800a892:	2302      	movs	r3, #2
 800a894:	9304      	str	r3, [sp, #16]
 800a896:	2301      	movs	r3, #1
 800a898:	9303      	str	r3, [sp, #12]
 800a89a:	2300      	movs	r3, #0
 800a89c:	9302      	str	r3, [sp, #8]
 800a89e:	2302      	movs	r3, #2
 800a8a0:	9301      	str	r3, [sp, #4]
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	2007      	movs	r0, #7
 800a8ae:	f001 fb34 	bl	800bf1a <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	6a3b      	ldr	r3, [r7, #32]
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	68b9      	ldr	r1, [r7, #8]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fcf2 	bl	800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 800a8c2:	6a3b      	ldr	r3, [r7, #32]
 800a8c4:	2205      	movs	r2, #5
 800a8c6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 800a8c8:	6a3b      	ldr	r3, [r7, #32]
 800a8ca:	2207      	movs	r2, #7
 800a8cc:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 800a8d4:	6a3b      	ldr	r3, [r7, #32]
 800a8d6:	2236      	movs	r2, #54	; 0x36
 800a8d8:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800a8da:	6a3b      	ldr	r3, [r7, #32]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 800a8e0:	6a3b      	ldr	r3, [r7, #32]
 800a8e2:	2228      	movs	r2, #40	; 0x28
 800a8e4:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a8e6:	6a3b      	ldr	r3, [r7, #32]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 800a8ec:	6a3b      	ldr	r3, [r7, #32]
 800a8ee:	2244      	movs	r2, #68	; 0x44
 800a8f0:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a8f2:	6a3b      	ldr	r3, [r7, #32]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 800a8f8:	6a3b      	ldr	r3, [r7, #32]
 800a8fa:	2233      	movs	r2, #51	; 0x33
 800a8fc:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	2205      	movs	r2, #5
 800a902:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	22f5      	movs	r2, #245	; 0xf5
 800a908:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	2205      	movs	r2, #5
 800a90e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 800a910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a912:	2207      	movs	r2, #7
 800a914:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 800a916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a918:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 800a91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a920:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 800a922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a924:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2208      	movs	r2, #8
 800a92a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2248      	movs	r2, #72	; 0x48
 800a932:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a938:	229b      	movs	r2, #155	; 0x9b
 800a93a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800a93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93e:	2226      	movs	r2, #38	; 0x26
 800a940:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a942:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3718      	adds	r7, #24
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <VL53L1_preset_mode_histogram_medium_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b090      	sub	sp, #64	; 0x40
 800a952:	af0a      	add	r7, sp, #40	; 0x28
 800a954:	60f8      	str	r0, [r7, #12]
 800a956:	60b9      	str	r1, [r7, #8]
 800a958:	607a      	str	r2, [r7, #4]
 800a95a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a95c:	2300      	movs	r3, #0
 800a95e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800a960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a962:	9304      	str	r3, [sp, #16]
 800a964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a966:	9303      	str	r3, [sp, #12]
 800a968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96a:	9302      	str	r3, [sp, #8]
 800a96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96e:	9301      	str	r3, [sp, #4]
 800a970:	6a3b      	ldr	r3, [r7, #32]
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	68b9      	ldr	r1, [r7, #8]
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f7ff ff49 	bl	800a812 <VL53L1_preset_mode_histogram_medium_range>
 800a980:	4603      	mov	r3, r0
 800a982:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a984:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d13b      	bne.n	800aa04 <VL53L1_preset_mode_histogram_medium_range_mm1+0xb6>



		VL53L1_init_histogram_config_structure(
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	9308      	str	r3, [sp, #32]
 800a990:	2303      	movs	r3, #3
 800a992:	9307      	str	r3, [sp, #28]
 800a994:	2302      	movs	r3, #2
 800a996:	9306      	str	r3, [sp, #24]
 800a998:	2301      	movs	r3, #1
 800a99a:	9305      	str	r3, [sp, #20]
 800a99c:	230a      	movs	r3, #10
 800a99e:	9304      	str	r3, [sp, #16]
 800a9a0:	2309      	movs	r3, #9
 800a9a2:	9303      	str	r3, [sp, #12]
 800a9a4:	2308      	movs	r3, #8
 800a9a6:	9302      	str	r3, [sp, #8]
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	9301      	str	r3, [sp, #4]
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	2007      	movs	r0, #7
 800a9b8:	f001 fa1f 	bl	800bdfa <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 1, 2, 2,
				8+0, 8+1, 8+2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9be:	3302      	adds	r3, #2
 800a9c0:	9308      	str	r3, [sp, #32]
 800a9c2:	2303      	movs	r3, #3
 800a9c4:	9307      	str	r3, [sp, #28]
 800a9c6:	2302      	movs	r3, #2
 800a9c8:	9306      	str	r3, [sp, #24]
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	9305      	str	r3, [sp, #20]
 800a9ce:	230a      	movs	r3, #10
 800a9d0:	9304      	str	r3, [sp, #16]
 800a9d2:	2309      	movs	r3, #9
 800a9d4:	9303      	str	r3, [sp, #12]
 800a9d6:	2308      	movs	r3, #8
 800a9d8:	9302      	str	r3, [sp, #8]
 800a9da:	2302      	movs	r3, #2
 800a9dc:	9301      	str	r3, [sp, #4]
 800a9de:	2302      	movs	r3, #2
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	2007      	movs	r0, #7
 800a9ea:	f001 fa96 	bl	800bf1a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f0:	9300      	str	r3, [sp, #0]
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	683a      	ldr	r2, [r7, #0]
 800a9f6:	68b9      	ldr	r1, [r7, #8]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fc54 	bl	800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa00:	22bb      	movs	r2, #187	; 0xbb
 800aa02:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800aa04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3718      	adds	r7, #24
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <VL53L1_preset_mode_histogram_medium_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b08c      	sub	sp, #48	; 0x30
 800aa14:	af06      	add	r7, sp, #24
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
 800aa1c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range_mm1(
 800aa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa24:	9304      	str	r3, [sp, #16]
 800aa26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa28:	9303      	str	r3, [sp, #12]
 800aa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2c:	9302      	str	r3, [sp, #8]
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa30:	9301      	str	r3, [sp, #4]
 800aa32:	6a3b      	ldr	r3, [r7, #32]
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	68b9      	ldr	r1, [r7, #8]
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f7ff ff86 	bl	800a94e <VL53L1_preset_mode_histogram_medium_range_mm1>
 800aa42:	4603      	mov	r3, r0
 800aa44:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800aa46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d102      	bne.n	800aa54 <VL53L1_preset_mode_histogram_medium_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa50:	22db      	movs	r2, #219	; 0xdb
 800aa52:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800aa54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3718      	adds	r7, #24
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <VL53L1_preset_mode_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b090      	sub	sp, #64	; 0x40
 800aa64:	af0a      	add	r7, sp, #40	; 0x28
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
 800aa6c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	9304      	str	r3, [sp, #16]
 800aa76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa78:	9303      	str	r3, [sp, #12]
 800aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7c:	9302      	str	r3, [sp, #8]
 800aa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa80:	9301      	str	r3, [sp, #4]
 800aa82:	6a3b      	ldr	r3, [r7, #32]
 800aa84:	9300      	str	r3, [sp, #0]
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	68b9      	ldr	r1, [r7, #8]
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f7ff fb60 	bl	800a152 <VL53L1_preset_mode_histogram_ranging>
 800aa92:	4603      	mov	r3, r0
 800aa94:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800aa96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d178      	bne.n	800ab90 <VL53L1_preset_mode_histogram_short_range+0x130>





		VL53L1_init_histogram_config_structure(
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	9308      	str	r3, [sp, #32]
 800aaa2:	2302      	movs	r3, #2
 800aaa4:	9307      	str	r3, [sp, #28]
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	9306      	str	r3, [sp, #24]
 800aaaa:	2301      	movs	r3, #1
 800aaac:	9305      	str	r3, [sp, #20]
 800aaae:	2301      	movs	r3, #1
 800aab0:	9304      	str	r3, [sp, #16]
 800aab2:	2301      	movs	r3, #1
 800aab4:	9303      	str	r3, [sp, #12]
 800aab6:	2300      	movs	r3, #0
 800aab8:	9302      	str	r3, [sp, #8]
 800aaba:	2301      	movs	r3, #1
 800aabc:	9301      	str	r3, [sp, #4]
 800aabe:	2301      	movs	r3, #1
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	2301      	movs	r3, #1
 800aac4:	2200      	movs	r2, #0
 800aac6:	2107      	movs	r1, #7
 800aac8:	2007      	movs	r0, #7
 800aaca:	f001 f996 	bl	800bdfa <VL53L1_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	3302      	adds	r3, #2
 800aad2:	9308      	str	r3, [sp, #32]
 800aad4:	2302      	movs	r3, #2
 800aad6:	9307      	str	r3, [sp, #28]
 800aad8:	2302      	movs	r3, #2
 800aada:	9306      	str	r3, [sp, #24]
 800aadc:	2301      	movs	r3, #1
 800aade:	9305      	str	r3, [sp, #20]
 800aae0:	2301      	movs	r3, #1
 800aae2:	9304      	str	r3, [sp, #16]
 800aae4:	2301      	movs	r3, #1
 800aae6:	9303      	str	r3, [sp, #12]
 800aae8:	2300      	movs	r3, #0
 800aaea:	9302      	str	r3, [sp, #8]
 800aaec:	2301      	movs	r3, #1
 800aaee:	9301      	str	r3, [sp, #4]
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	2107      	movs	r1, #7
 800aafa:	2007      	movs	r0, #7
 800aafc:	f001 fa0d 	bl	800bf1a <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	6a3b      	ldr	r3, [r7, #32]
 800ab06:	683a      	ldr	r2, [r7, #0]
 800ab08:	68b9      	ldr	r1, [r7, #8]
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 fbcb 	bl	800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 800ab10:	6a3b      	ldr	r3, [r7, #32]
 800ab12:	2203      	movs	r2, #3
 800ab14:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 800ab16:	6a3b      	ldr	r3, [r7, #32]
 800ab18:	2205      	movs	r2, #5
 800ab1a:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800ab1c:	6a3b      	ldr	r3, [r7, #32]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 800ab22:	6a3b      	ldr	r3, [r7, #32]
 800ab24:	2252      	movs	r2, #82	; 0x52
 800ab26:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800ab28:	6a3b      	ldr	r3, [r7, #32]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 800ab2e:	6a3b      	ldr	r3, [r7, #32]
 800ab30:	2237      	movs	r2, #55	; 0x37
 800ab32:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800ab34:	6a3b      	ldr	r3, [r7, #32]
 800ab36:	2200      	movs	r2, #0
 800ab38:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 800ab3a:	6a3b      	ldr	r3, [r7, #32]
 800ab3c:	2266      	movs	r2, #102	; 0x66
 800ab3e:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800ab40:	6a3b      	ldr	r3, [r7, #32]
 800ab42:	2200      	movs	r2, #0
 800ab44:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 800ab46:	6a3b      	ldr	r3, [r7, #32]
 800ab48:	2244      	movs	r2, #68	; 0x44
 800ab4a:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2203      	movs	r2, #3
 800ab50:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	22f5      	movs	r2, #245	; 0xf5
 800ab56:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 800ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5a:	2203      	movs	r2, #3
 800ab5c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab60:	2205      	movs	r2, #5
 800ab62:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab66:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6e:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab72:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2208      	movs	r2, #8
 800ab78:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2228      	movs	r2, #40	; 0x28
 800ab80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800ab84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab86:	22bb      	movs	r2, #187	; 0xbb
 800ab88:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800ab8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8c:	2226      	movs	r2, #38	; 0x26
 800ab8e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ab90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3718      	adds	r7, #24
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <VL53L1_preset_mode_special_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b090      	sub	sp, #64	; 0x40
 800aba0:	af0a      	add	r7, sp, #40	; 0x28
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	607a      	str	r2, [r7, #4]
 800aba8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800abaa:	2300      	movs	r3, #0
 800abac:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800abae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb0:	9304      	str	r3, [sp, #16]
 800abb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb4:	9303      	str	r3, [sp, #12]
 800abb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb8:	9302      	str	r3, [sp, #8]
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbc:	9301      	str	r3, [sp, #4]
 800abbe:	6a3b      	ldr	r3, [r7, #32]
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	68b9      	ldr	r1, [r7, #8]
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	f7ff ff49 	bl	800aa60 <VL53L1_preset_mode_histogram_short_range>
 800abce:	4603      	mov	r3, r0
 800abd0:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800abd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d15a      	bne.n	800ac90 <VL53L1_preset_mode_special_histogram_short_range+0xf4>





		VL53L1_init_histogram_config_structure(
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	9308      	str	r3, [sp, #32]
 800abde:	2301      	movs	r3, #1
 800abe0:	9307      	str	r3, [sp, #28]
 800abe2:	2301      	movs	r3, #1
 800abe4:	9306      	str	r3, [sp, #24]
 800abe6:	2301      	movs	r3, #1
 800abe8:	9305      	str	r3, [sp, #20]
 800abea:	2300      	movs	r3, #0
 800abec:	9304      	str	r3, [sp, #16]
 800abee:	2300      	movs	r3, #0
 800abf0:	9303      	str	r3, [sp, #12]
 800abf2:	2300      	movs	r3, #0
 800abf4:	9302      	str	r3, [sp, #8]
 800abf6:	2301      	movs	r3, #1
 800abf8:	9301      	str	r3, [sp, #4]
 800abfa:	2301      	movs	r3, #1
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	2300      	movs	r3, #0
 800ac00:	2200      	movs	r2, #0
 800ac02:	2107      	movs	r1, #7
 800ac04:	2007      	movs	r0, #7
 800ac06:	f001 f8f8 	bl	800bdfa <VL53L1_init_histogram_config_structure>
				7, 7, 0, 0, 1, 1,
				0, 0, 0, 1, 1, 1,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0c:	3302      	adds	r3, #2
 800ac0e:	9308      	str	r3, [sp, #32]
 800ac10:	2301      	movs	r3, #1
 800ac12:	9307      	str	r3, [sp, #28]
 800ac14:	2301      	movs	r3, #1
 800ac16:	9306      	str	r3, [sp, #24]
 800ac18:	2301      	movs	r3, #1
 800ac1a:	9305      	str	r3, [sp, #20]
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	9304      	str	r3, [sp, #16]
 800ac20:	2300      	movs	r3, #0
 800ac22:	9303      	str	r3, [sp, #12]
 800ac24:	2300      	movs	r3, #0
 800ac26:	9302      	str	r3, [sp, #8]
 800ac28:	2301      	movs	r3, #1
 800ac2a:	9301      	str	r3, [sp, #4]
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	2300      	movs	r3, #0
 800ac32:	2200      	movs	r2, #0
 800ac34:	2107      	movs	r1, #7
 800ac36:	2007      	movs	r0, #7
 800ac38:	f001 f96f 	bl	800bf1a <VL53L1_init_histogram_multizone_config_structure>
				0, 0, 0, 1, 1, 1,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800ac3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	6a3b      	ldr	r3, [r7, #32]
 800ac42:	683a      	ldr	r2, [r7, #0]
 800ac44:	68b9      	ldr	r1, [r7, #8]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fb2d 	bl	800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x02;
 800ac4c:	6a3b      	ldr	r3, [r7, #32]
 800ac4e:	2202      	movs	r2, #2
 800ac50:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 800ac52:	6a3b      	ldr	r3, [r7, #32]
 800ac54:	2203      	movs	r2, #3
 800ac56:	725a      	strb	r2, [r3, #9]



		pgeneral->cal_config__vcsel_start = 0x00;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__target = 0x31;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	2231      	movs	r2, #49	; 0x31
 800ac62:	721a      	strb	r2, [r3, #8]



		pdynamic->sd_config__woi_sd0 = 0x02;
 800ac64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac66:	2202      	movs	r2, #2
 800ac68:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x03;
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6c:	2203      	movs	r2, #3
 800ac6e:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800ac70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac72:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800ac74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac76:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800ac78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7a:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x10;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2210      	movs	r2, #16
 800ac84:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x18;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2218      	movs	r2, #24
 800ac8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	}

	LOG_FUNCTION_END(status);

	return status;
 800ac90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3718      	adds	r7, #24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <VL53L1_preset_mode_histogram_short_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b090      	sub	sp, #64	; 0x40
 800aca0:	af0a      	add	r7, sp, #40	; 0x28
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800acaa:	2300      	movs	r3, #0
 800acac:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800acae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb0:	9304      	str	r3, [sp, #16]
 800acb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb4:	9303      	str	r3, [sp, #12]
 800acb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb8:	9302      	str	r3, [sp, #8]
 800acba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbc:	9301      	str	r3, [sp, #4]
 800acbe:	6a3b      	ldr	r3, [r7, #32]
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	68b9      	ldr	r1, [r7, #8]
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f7ff fec9 	bl	800aa60 <VL53L1_preset_mode_histogram_short_range>
 800acce:	4603      	mov	r3, r0
 800acd0:	75fb      	strb	r3, [r7, #23]
				ptuning_parms,
				pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800acd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d13b      	bne.n	800ad52 <VL53L1_preset_mode_histogram_short_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	9308      	str	r3, [sp, #32]
 800acde:	2302      	movs	r3, #2
 800ace0:	9307      	str	r3, [sp, #28]
 800ace2:	2302      	movs	r3, #2
 800ace4:	9306      	str	r3, [sp, #24]
 800ace6:	2301      	movs	r3, #1
 800ace8:	9305      	str	r3, [sp, #20]
 800acea:	2301      	movs	r3, #1
 800acec:	9304      	str	r3, [sp, #16]
 800acee:	2309      	movs	r3, #9
 800acf0:	9303      	str	r3, [sp, #12]
 800acf2:	2308      	movs	r3, #8
 800acf4:	9302      	str	r3, [sp, #8]
 800acf6:	2301      	movs	r3, #1
 800acf8:	9301      	str	r3, [sp, #4]
 800acfa:	2301      	movs	r3, #1
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	2301      	movs	r3, #1
 800ad00:	2200      	movs	r2, #0
 800ad02:	2107      	movs	r1, #7
 800ad04:	2007      	movs	r0, #7
 800ad06:	f001 f878 	bl	800bdfa <VL53L1_init_histogram_config_structure>
				  7,   7, 0, 1, 1, 1,
				8+0, 8+1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0c:	3302      	adds	r3, #2
 800ad0e:	9308      	str	r3, [sp, #32]
 800ad10:	2302      	movs	r3, #2
 800ad12:	9307      	str	r3, [sp, #28]
 800ad14:	2302      	movs	r3, #2
 800ad16:	9306      	str	r3, [sp, #24]
 800ad18:	2301      	movs	r3, #1
 800ad1a:	9305      	str	r3, [sp, #20]
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	9304      	str	r3, [sp, #16]
 800ad20:	2309      	movs	r3, #9
 800ad22:	9303      	str	r3, [sp, #12]
 800ad24:	2308      	movs	r3, #8
 800ad26:	9302      	str	r3, [sp, #8]
 800ad28:	2301      	movs	r3, #1
 800ad2a:	9301      	str	r3, [sp, #4]
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	2301      	movs	r3, #1
 800ad32:	2200      	movs	r2, #0
 800ad34:	2107      	movs	r1, #7
 800ad36:	2007      	movs	r0, #7
 800ad38:	f001 f8ef 	bl	800bf1a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	6a3b      	ldr	r3, [r7, #32]
 800ad42:	683a      	ldr	r2, [r7, #0]
 800ad44:	68b9      	ldr	r1, [r7, #8]
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 faad 	bl	800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4e:	22bb      	movs	r2, #187	; 0xbb
 800ad50:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800ad52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3718      	adds	r7, #24
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <VL53L1_preset_mode_histogram_short_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b08c      	sub	sp, #48	; 0x30
 800ad62:	af06      	add	r7, sp, #24
 800ad64:	60f8      	str	r0, [r7, #12]
 800ad66:	60b9      	str	r1, [r7, #8]
 800ad68:	607a      	str	r2, [r7, #4]
 800ad6a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range_mm1(
 800ad70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad72:	9304      	str	r3, [sp, #16]
 800ad74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad76:	9303      	str	r3, [sp, #12]
 800ad78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7a:	9302      	str	r3, [sp, #8]
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7e:	9301      	str	r3, [sp, #4]
 800ad80:	6a3b      	ldr	r3, [r7, #32]
 800ad82:	9300      	str	r3, [sp, #0]
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	68b9      	ldr	r1, [r7, #8]
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f7ff ff86 	bl	800ac9c <VL53L1_preset_mode_histogram_short_range_mm1>
 800ad90:	4603      	mov	r3, r0
 800ad92:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800ad94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d102      	bne.n	800ada2 <VL53L1_preset_mode_histogram_short_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800ad9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9e:	22db      	movs	r2, #219	; 0xdb
 800ada0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ada2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3718      	adds	r7, #24
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <VL53L1_preset_mode_histogram_characterisation>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b08c      	sub	sp, #48	; 0x30
 800adb2:	af06      	add	r7, sp, #24
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	60b9      	str	r1, [r7, #8]
 800adb8:	607a      	str	r2, [r7, #4]
 800adba:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800adbc:	2300      	movs	r3, #0
 800adbe:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800adc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc2:	9304      	str	r3, [sp, #16]
 800adc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc6:	9303      	str	r3, [sp, #12]
 800adc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adca:	9302      	str	r3, [sp, #8]
 800adcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adce:	9301      	str	r3, [sp, #4]
 800add0:	6a3b      	ldr	r3, [r7, #32]
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	68b9      	ldr	r1, [r7, #8]
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	f7ff f9b9 	bl	800a152 <VL53L1_preset_mode_histogram_ranging>
 800ade0:	4603      	mov	r3, r0
 800ade2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800ade4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10b      	bne.n	800ae04 <VL53L1_preset_mode_histogram_characterisation+0x56>



		pstatic->debug__ctrl = 0x01;
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	2201      	movs	r2, #1
 800adf0:	709a      	strb	r2, [r3, #2]
		psystem->power_management__go1_power_force = 0x01;
 800adf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf4:	2201      	movs	r2, #1
 800adf6:	701a      	strb	r2, [r3, #0]

		pdynamic->system__sequence_config               =
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	2283      	movs	r2, #131	; 0x83
 800adfc:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_VHV_EN |
				VL53L1_SEQUENCE_PHASECAL_EN |
				VL53L1_SEQUENCE_RANGE_EN;

		psystem->system__mode_start                     =
 800adfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae00:	222e      	movs	r2, #46	; 0x2e
 800ae02:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ae04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3718      	adds	r7, #24
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <VL53L1_preset_mode_histogram_xtalk_planar>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b090      	sub	sp, #64	; 0x40
 800ae14:	af0a      	add	r7, sp, #40	; 0x28
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	60b9      	str	r1, [r7, #8]
 800ae1a:	607a      	str	r2, [r7, #4]
 800ae1c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_multizone_long_range(
 800ae22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae24:	9304      	str	r3, [sp, #16]
 800ae26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae28:	9303      	str	r3, [sp, #12]
 800ae2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2c:	9302      	str	r3, [sp, #8]
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae30:	9301      	str	r3, [sp, #4]
 800ae32:	6a3b      	ldr	r3, [r7, #32]
 800ae34:	9300      	str	r3, [sp, #0]
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	68b9      	ldr	r1, [r7, #8]
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f000 f9ba 	bl	800b1b6 <VL53L1_preset_mode_histogram_multizone_long_range>
 800ae42:	4603      	mov	r3, r0
 800ae44:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800ae46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d151      	bne.n	800aef2 <VL53L1_preset_mode_histogram_xtalk_planar+0xe2>



		status =
			VL53L1_zone_preset_xtalk_planar(
 800ae4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae50:	6838      	ldr	r0, [r7, #0]
 800ae52:	f00a fb1c 	bl	801548e <VL53L1_zone_preset_xtalk_planar>
 800ae56:	4603      	mov	r3, r0
 800ae58:	75fb      	strb	r3, [r7, #23]
				pgeneral,
				pzone_cfg);



		ptiming->range_config__vcsel_period_a = 0x09;
 800ae5a:	6a3b      	ldr	r3, [r7, #32]
 800ae5c:	2209      	movs	r2, #9
 800ae5e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800ae60:	6a3b      	ldr	r3, [r7, #32]
 800ae62:	2209      	movs	r2, #9
 800ae64:	725a      	strb	r2, [r3, #9]



		VL53L1_init_histogram_config_structure(
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	9308      	str	r3, [sp, #32]
 800ae6a:	2304      	movs	r3, #4
 800ae6c:	9307      	str	r3, [sp, #28]
 800ae6e:	2303      	movs	r3, #3
 800ae70:	9306      	str	r3, [sp, #24]
 800ae72:	2302      	movs	r3, #2
 800ae74:	9305      	str	r3, [sp, #20]
 800ae76:	2301      	movs	r3, #1
 800ae78:	9304      	str	r3, [sp, #16]
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	9303      	str	r3, [sp, #12]
 800ae7e:	2307      	movs	r3, #7
 800ae80:	9302      	str	r3, [sp, #8]
 800ae82:	2304      	movs	r3, #4
 800ae84:	9301      	str	r3, [sp, #4]
 800ae86:	2303      	movs	r3, #3
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	2302      	movs	r3, #2
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	2100      	movs	r1, #0
 800ae90:	2007      	movs	r0, #7
 800ae92:	f000 ffb2 	bl	800bdfa <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			phistogram);



		VL53L1_init_histogram_multizone_config_structure(
 800ae96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae98:	3302      	adds	r3, #2
 800ae9a:	9308      	str	r3, [sp, #32]
 800ae9c:	2304      	movs	r3, #4
 800ae9e:	9307      	str	r3, [sp, #28]
 800aea0:	2303      	movs	r3, #3
 800aea2:	9306      	str	r3, [sp, #24]
 800aea4:	2302      	movs	r3, #2
 800aea6:	9305      	str	r3, [sp, #20]
 800aea8:	2301      	movs	r3, #1
 800aeaa:	9304      	str	r3, [sp, #16]
 800aeac:	2300      	movs	r3, #0
 800aeae:	9303      	str	r3, [sp, #12]
 800aeb0:	2307      	movs	r3, #7
 800aeb2:	9302      	str	r3, [sp, #8]
 800aeb4:	2304      	movs	r3, #4
 800aeb6:	9301      	str	r3, [sp, #4]
 800aeb8:	2303      	movs	r3, #3
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	2302      	movs	r3, #2
 800aebe:	2201      	movs	r2, #1
 800aec0:	2100      	movs	r1, #0
 800aec2:	2007      	movs	r0, #7
 800aec4:	f001 f829 	bl	800bf1a <VL53L1_init_histogram_multizone_config_structure>
			&(pzone_cfg->multizone_hist_cfg));




		if (status == VL53L1_ERROR_NONE) {
 800aec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d108      	bne.n	800aee2 <VL53L1_preset_mode_histogram_xtalk_planar+0xd2>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800aed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed2:	3302      	adds	r3, #2
 800aed4:	461a      	mov	r2, r3
 800aed6:	6879      	ldr	r1, [r7, #4]
 800aed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeda:	f003 f97d 	bl	800e1d8 <VL53L1_set_histogram_multizone_initial_bin_config>
 800aede:	4603      	mov	r3, r0
 800aee0:	75fb      	strb	r3, [r7, #23]
			&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800aee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	6a3b      	ldr	r3, [r7, #32]
 800aee8:	683a      	ldr	r2, [r7, #0]
 800aeea:	68b9      	ldr	r1, [r7, #8]
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 f9da 	bl	800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>

	}

	LOG_FUNCTION_END(status);

	return status;
 800aef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3718      	adds	r7, #24
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <VL53L1_preset_mode_histogram_xtalk_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b090      	sub	sp, #64	; 0x40
 800af02:	af0a      	add	r7, sp, #40	; 0x28
 800af04:	60f8      	str	r0, [r7, #12]
 800af06:	60b9      	str	r1, [r7, #8]
 800af08:	607a      	str	r2, [r7, #4]
 800af0a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800af0c:	2300      	movs	r3, #0
 800af0e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af12:	9304      	str	r3, [sp, #16]
 800af14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af16:	9303      	str	r3, [sp, #12]
 800af18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1a:	9302      	str	r3, [sp, #8]
 800af1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1e:	9301      	str	r3, [sp, #4]
 800af20:	6a3b      	ldr	r3, [r7, #32]
 800af22:	9300      	str	r3, [sp, #0]
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	68b9      	ldr	r1, [r7, #8]
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	f7ff f911 	bl	800a152 <VL53L1_preset_mode_histogram_ranging>
 800af30:	4603      	mov	r3, r0
 800af32:	75fb      	strb	r3, [r7, #23]
			pzone_cfg);




	if (status == VL53L1_ERROR_NONE) {
 800af34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d16e      	bne.n	800b01a <VL53L1_preset_mode_histogram_xtalk_mm1+0x11c>





		VL53L1_init_histogram_config_structure(
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	9308      	str	r3, [sp, #32]
 800af40:	230c      	movs	r3, #12
 800af42:	9307      	str	r3, [sp, #28]
 800af44:	230b      	movs	r3, #11
 800af46:	9306      	str	r3, [sp, #24]
 800af48:	230a      	movs	r3, #10
 800af4a:	9305      	str	r3, [sp, #20]
 800af4c:	2309      	movs	r3, #9
 800af4e:	9304      	str	r3, [sp, #16]
 800af50:	2308      	movs	r3, #8
 800af52:	9303      	str	r3, [sp, #12]
 800af54:	230f      	movs	r3, #15
 800af56:	9302      	str	r3, [sp, #8]
 800af58:	230c      	movs	r3, #12
 800af5a:	9301      	str	r3, [sp, #4]
 800af5c:	230b      	movs	r3, #11
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	230a      	movs	r3, #10
 800af62:	2209      	movs	r2, #9
 800af64:	2108      	movs	r1, #8
 800af66:	200f      	movs	r0, #15
 800af68:	f000 ff47 	bl	800bdfa <VL53L1_init_histogram_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800af6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6e:	3302      	adds	r3, #2
 800af70:	9308      	str	r3, [sp, #32]
 800af72:	230c      	movs	r3, #12
 800af74:	9307      	str	r3, [sp, #28]
 800af76:	230b      	movs	r3, #11
 800af78:	9306      	str	r3, [sp, #24]
 800af7a:	230a      	movs	r3, #10
 800af7c:	9305      	str	r3, [sp, #20]
 800af7e:	2309      	movs	r3, #9
 800af80:	9304      	str	r3, [sp, #16]
 800af82:	2308      	movs	r3, #8
 800af84:	9303      	str	r3, [sp, #12]
 800af86:	230f      	movs	r3, #15
 800af88:	9302      	str	r3, [sp, #8]
 800af8a:	230c      	movs	r3, #12
 800af8c:	9301      	str	r3, [sp, #4]
 800af8e:	230b      	movs	r3, #11
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	230a      	movs	r3, #10
 800af94:	2209      	movs	r2, #9
 800af96:	2108      	movs	r1, #8
 800af98:	200f      	movs	r0, #15
 800af9a:	f000 ffbe 	bl	800bf1a <VL53L1_init_histogram_multizone_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800af9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	6a3b      	ldr	r3, [r7, #32]
 800afa4:	683a      	ldr	r2, [r7, #0]
 800afa6:	68b9      	ldr	r1, [r7, #8]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f97c 	bl	800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800afae:	6a3b      	ldr	r3, [r7, #32]
 800afb0:	2209      	movs	r2, #9
 800afb2:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800afb4:	6a3b      	ldr	r3, [r7, #32]
 800afb6:	2209      	movs	r2, #9
 800afb8:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	2200      	movs	r2, #0
 800afbe:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800afc0:	6a3b      	ldr	r3, [r7, #32]
 800afc2:	2221      	movs	r2, #33	; 0x21
 800afc4:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800afc6:	6a3b      	ldr	r3, [r7, #32]
 800afc8:	2200      	movs	r2, #0
 800afca:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x21;
 800afcc:	6a3b      	ldr	r3, [r7, #32]
 800afce:	2221      	movs	r2, #33	; 0x21
 800afd0:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800afd2:	6a3b      	ldr	r3, [r7, #32]
 800afd4:	2200      	movs	r2, #0
 800afd6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800afd8:	6a3b      	ldr	r3, [r7, #32]
 800afda:	2229      	movs	r2, #41	; 0x29
 800afdc:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800afde:	6a3b      	ldr	r3, [r7, #32]
 800afe0:	2200      	movs	r2, #0
 800afe2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 800afe4:	6a3b      	ldr	r3, [r7, #32]
 800afe6:	2229      	movs	r2, #41	; 0x29
 800afe8:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	2209      	movs	r2, #9
 800afee:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	22f5      	movs	r2, #245	; 0xf5
 800aff4:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800aff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff8:	2209      	movs	r2, #9
 800affa:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x09;
 800affc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affe:	2209      	movs	r2, #9
 800b000:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	2209      	movs	r2, #9
 800b006:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1 = 0x06;
 800b008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00a:	2206      	movs	r2, #6
 800b00c:	72da      	strb	r2, [r3, #11]

		pdynamic->system__sequence_config =
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	22bb      	movs	r2, #187	; 0xbb
 800b012:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800b014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b016:	2226      	movs	r2, #38	; 0x26
 800b018:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b01a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3718      	adds	r7, #24
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <VL53L1_preset_mode_histogram_xtalk_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b08c      	sub	sp, #48	; 0x30
 800b02a:	af06      	add	r7, sp, #24
 800b02c:	60f8      	str	r0, [r7, #12]
 800b02e:	60b9      	str	r1, [r7, #8]
 800b030:	607a      	str	r2, [r7, #4]
 800b032:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b034:	2300      	movs	r3, #0
 800b036:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_xtalk_mm1(
 800b038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03a:	9304      	str	r3, [sp, #16]
 800b03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03e:	9303      	str	r3, [sp, #12]
 800b040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b042:	9302      	str	r3, [sp, #8]
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	9301      	str	r3, [sp, #4]
 800b048:	6a3b      	ldr	r3, [r7, #32]
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	68b9      	ldr	r1, [r7, #8]
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f7ff ff53 	bl	800aefe <VL53L1_preset_mode_histogram_xtalk_mm1>
 800b058:	4603      	mov	r3, r0
 800b05a:	75fb      	strb	r3, [r7, #23]
			psystem,
			ptuning_parms,
			pzone_cfg);


		pdynamic->system__sequence_config =
 800b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05e:	22db      	movs	r2, #219	; 0xdb
 800b060:	745a      	strb	r2, [r3, #17]



	LOG_FUNCTION_END(status);

	return status;
 800b062:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b066:	4618      	mov	r0, r3
 800b068:	3718      	adds	r7, #24
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <VL53L1_preset_mode_histogram_multizone>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b08c      	sub	sp, #48	; 0x30
 800b072:	af06      	add	r7, sp, #24
 800b074:	60f8      	str	r0, [r7, #12]
 800b076:	60b9      	str	r1, [r7, #8]
 800b078:	607a      	str	r2, [r7, #4]
 800b07a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b07c:	2300      	movs	r3, #0
 800b07e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800b080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b082:	9304      	str	r3, [sp, #16]
 800b084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b086:	9303      	str	r3, [sp, #12]
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	9302      	str	r3, [sp, #8]
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	9301      	str	r3, [sp, #4]
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	68b9      	ldr	r1, [r7, #8]
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	f7ff fbb9 	bl	800a812 <VL53L1_preset_mode_histogram_medium_range>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b0a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d12c      	bne.n	800b106 <VL53L1_preset_mode_histogram_multizone+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800b0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ae:	9304      	str	r3, [sp, #16]
 800b0b0:	2307      	movs	r3, #7
 800b0b2:	9303      	str	r3, [sp, #12]
 800b0b4:	2307      	movs	r3, #7
 800b0b6:	9302      	str	r3, [sp, #8]
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	9301      	str	r3, [sp, #4]
 800b0bc:	2308      	movs	r3, #8
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	2304      	movs	r3, #4
 800b0c2:	2202      	movs	r2, #2
 800b0c4:	2108      	movs	r1, #8
 800b0c6:	2004      	movs	r0, #4
 800b0c8:	f00a f96c 	bl	80153a4 <VL53L1_init_zone_config_structure>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d2:	785b      	ldrb	r3, [r3, #1]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800b0dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d108      	bne.n	800b0f6 <VL53L1_preset_mode_histogram_multizone+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800b0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e6:	3302      	adds	r3, #2
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	6879      	ldr	r1, [r7, #4]
 800b0ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0ee:	f003 f873 	bl	800e1d8 <VL53L1_set_histogram_multizone_initial_bin_config>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	75fb      	strb	r3, [r7, #23]
				pzone_cfg,
				phistogram,
				&(pzone_cfg->multizone_hist_cfg));
		}

		VL53L1_copy_hist_cfg_to_static_cfg(
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	6a3b      	ldr	r3, [r7, #32]
 800b0fc:	683a      	ldr	r2, [r7, #0]
 800b0fe:	68b9      	ldr	r1, [r7, #8]
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 f8d0 	bl	800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b106:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3718      	adds	r7, #24
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <VL53L1_preset_mode_histogram_multizone_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b08c      	sub	sp, #48	; 0x30
 800b116:	af06      	add	r7, sp, #24
 800b118:	60f8      	str	r0, [r7, #12]
 800b11a:	60b9      	str	r1, [r7, #8]
 800b11c:	607a      	str	r2, [r7, #4]
 800b11e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b120:	2300      	movs	r3, #0
 800b122:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800b124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b126:	9304      	str	r3, [sp, #16]
 800b128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b12a:	9303      	str	r3, [sp, #12]
 800b12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12e:	9302      	str	r3, [sp, #8]
 800b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b132:	9301      	str	r3, [sp, #4]
 800b134:	6a3b      	ldr	r3, [r7, #32]
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	68b9      	ldr	r1, [r7, #8]
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	f7ff fc8e 	bl	800aa60 <VL53L1_preset_mode_histogram_short_range>
 800b144:	4603      	mov	r3, r0
 800b146:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b148:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d12c      	bne.n	800b1aa <VL53L1_preset_mode_histogram_multizone_short_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800b150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b152:	9304      	str	r3, [sp, #16]
 800b154:	2307      	movs	r3, #7
 800b156:	9303      	str	r3, [sp, #12]
 800b158:	2307      	movs	r3, #7
 800b15a:	9302      	str	r3, [sp, #8]
 800b15c:	2302      	movs	r3, #2
 800b15e:	9301      	str	r3, [sp, #4]
 800b160:	2308      	movs	r3, #8
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	2304      	movs	r3, #4
 800b166:	2202      	movs	r2, #2
 800b168:	2108      	movs	r1, #8
 800b16a:	2004      	movs	r0, #4
 800b16c:	f00a f91a 	bl	80153a4 <VL53L1_init_zone_config_structure>
 800b170:	4603      	mov	r3, r0
 800b172:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800b174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b176:	785b      	ldrb	r3, [r3, #1]
 800b178:	3301      	adds	r3, #1
 800b17a:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800b180:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d108      	bne.n	800b19a <VL53L1_preset_mode_histogram_multizone_short_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800b188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18a:	3302      	adds	r3, #2
 800b18c:	461a      	mov	r2, r3
 800b18e:	6879      	ldr	r1, [r7, #4]
 800b190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b192:	f003 f821 	bl	800e1d8 <VL53L1_set_histogram_multizone_initial_bin_config>
 800b196:	4603      	mov	r3, r0
 800b198:	75fb      	strb	r3, [r7, #23]
			);
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800b19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	6a3b      	ldr	r3, [r7, #32]
 800b1a0:	683a      	ldr	r2, [r7, #0]
 800b1a2:	68b9      	ldr	r1, [r7, #8]
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 f87e 	bl	800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b1aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3718      	adds	r7, #24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <VL53L1_preset_mode_histogram_multizone_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b08c      	sub	sp, #48	; 0x30
 800b1ba:	af06      	add	r7, sp, #24
 800b1bc:	60f8      	str	r0, [r7, #12]
 800b1be:	60b9      	str	r1, [r7, #8]
 800b1c0:	607a      	str	r2, [r7, #4]
 800b1c2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ca:	9304      	str	r3, [sp, #16]
 800b1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ce:	9303      	str	r3, [sp, #12]
 800b1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d2:	9302      	str	r3, [sp, #8]
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	9301      	str	r3, [sp, #4]
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	68b9      	ldr	r1, [r7, #8]
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f7ff f9ee 	bl	800a5c4 <VL53L1_preset_mode_histogram_long_range>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b1ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d12c      	bne.n	800b24e <VL53L1_preset_mode_histogram_multizone_long_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800b1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f6:	9304      	str	r3, [sp, #16]
 800b1f8:	2307      	movs	r3, #7
 800b1fa:	9303      	str	r3, [sp, #12]
 800b1fc:	2307      	movs	r3, #7
 800b1fe:	9302      	str	r3, [sp, #8]
 800b200:	2302      	movs	r3, #2
 800b202:	9301      	str	r3, [sp, #4]
 800b204:	2308      	movs	r3, #8
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	2304      	movs	r3, #4
 800b20a:	2202      	movs	r2, #2
 800b20c:	2108      	movs	r1, #8
 800b20e:	2004      	movs	r0, #4
 800b210:	f00a f8c8 	bl	80153a4 <VL53L1_init_zone_config_structure>
 800b214:	4603      	mov	r3, r0
 800b216:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800b218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21a:	785b      	ldrb	r3, [r3, #1]
 800b21c:	3301      	adds	r3, #1
 800b21e:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800b224:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d108      	bne.n	800b23e <VL53L1_preset_mode_histogram_multizone_long_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800b22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22e:	3302      	adds	r3, #2
 800b230:	461a      	mov	r2, r3
 800b232:	6879      	ldr	r1, [r7, #4]
 800b234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b236:	f002 ffcf 	bl	800e1d8 <VL53L1_set_histogram_multizone_initial_bin_config>
 800b23a:	4603      	mov	r3, r0
 800b23c:	75fb      	strb	r3, [r7, #23]
				&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800b23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	6a3b      	ldr	r3, [r7, #32]
 800b244:	683a      	ldr	r2, [r7, #0]
 800b246:	68b9      	ldr	r1, [r7, #8]
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 f82c 	bl	800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>
			pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b24e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3718      	adds	r7, #24
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b08a      	sub	sp, #40	; 0x28
 800b25e:	af04      	add	r7, sp, #16
 800b260:	60f8      	str	r0, [r7, #12]
 800b262:	60b9      	str	r1, [r7, #8]
 800b264:	607a      	str	r2, [r7, #4]
 800b266:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b268:	2300      	movs	r3, #0
 800b26a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26e:	9303      	str	r3, [sp, #12]
 800b270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b272:	9302      	str	r3, [sp, #8]
 800b274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b276:	9301      	str	r3, [sp, #4]
 800b278:	6a3b      	ldr	r3, [r7, #32]
 800b27a:	9300      	str	r3, [sp, #0]
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	68b9      	ldr	r1, [r7, #8]
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f7fe fb9e 	bl	80099c4 <VL53L1_preset_mode_standard_ranging>
 800b288:	4603      	mov	r3, r0
 800b28a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 800b28c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d102      	bne.n	800b29a <VL53L1_preset_mode_olt+0x40>

		psystem->system__stream_count_ctrl = 0x01;
 800b294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b296:	2201      	movs	r2, #1
 800b298:	705a      	strb	r2, [r3, #1]

	LOG_FUNCTION_END(status);

	return status;
 800b29a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3718      	adds	r7, #24
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	b085      	sub	sp, #20
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	60f8      	str	r0, [r7, #12]
 800b2ae:	60b9      	str	r1, [r7, #8]
 800b2b0:	607a      	str	r2, [r7, #4]
 800b2b2:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	79db      	ldrb	r3, [r3, #7]
 800b2e8:	b29b      	uxth	r3, r3
				<< 8)
 800b2ea:	021b      	lsls	r3, r3, #8
 800b2ec:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	7a1b      	ldrb	r3, [r3, #8]
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	4413      	add	r3, r2
 800b2f6:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	785b      	ldrb	r3, [r3, #1]
 800b330:	b29b      	uxth	r3, r3
				<< 8)
 800b332:	021b      	lsls	r3, r3, #8
 800b334:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	789b      	ldrb	r3, [r3, #2]
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	4413      	add	r3, r2
 800b33e:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	78db      	ldrb	r3, [r3, #3]
 800b348:	b29b      	uxth	r3, r3
				<< 8)
 800b34a:	021b      	lsls	r3, r3, #8
 800b34c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	791b      	ldrb	r3, [r3, #4]
 800b352:	b29b      	uxth	r3, r3
 800b354:	4413      	add	r3, r2
 800b356:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 800b384:	bf00      	nop
 800b386:	3714      	adds	r7, #20
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <VL53L1_copy_hist_bins_to_static_cfg>:

void VL53L1_copy_hist_bins_to_static_cfg(
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_timing_config_t    *ptiming)
{
 800b390:	b480      	push	{r7}
 800b392:	b085      	sub	sp, #20
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	79db      	ldrb	r3, [r3, #7]
 800b3d0:	b29b      	uxth	r3, r3
				<< 8)
 800b3d2:	021b      	lsls	r3, r3, #8
 800b3d4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	7a1b      	ldrb	r3, [r3, #8]
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	4413      	add	r3, r2
 800b3de:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	785b      	ldrb	r3, [r3, #1]
 800b410:	b29b      	uxth	r3, r3
				<< 8)
 800b412:	021b      	lsls	r3, r3, #8
 800b414:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	789b      	ldrb	r3, [r3, #2]
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	4413      	add	r3, r2
 800b41e:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	78db      	ldrb	r3, [r3, #3]
 800b428:	b29b      	uxth	r3, r3
				<< 8)
 800b42a:	021b      	lsls	r3, r3, #8
 800b42c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	791b      	ldrb	r3, [r3, #4]
 800b432:	b29b      	uxth	r3, r3
 800b434:	4413      	add	r3, r2
 800b436:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 800b44c:	bf00      	nop
 800b44e:	3714      	adds	r7, #20
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b08c      	sub	sp, #48	; 0x30
 800b45c:	af06      	add	r7, sp, #24
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
 800b464:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b466:	2300      	movs	r3, #0
 800b468:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800b46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46c:	9304      	str	r3, [sp, #16]
 800b46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b470:	9303      	str	r3, [sp, #12]
 800b472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b474:	9302      	str	r3, [sp, #8]
 800b476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b478:	9301      	str	r3, [sp, #4]
 800b47a:	6a3b      	ldr	r3, [r7, #32]
 800b47c:	9300      	str	r3, [sp, #0]
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	68b9      	ldr	r1, [r7, #8]
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f7fe fe64 	bl	800a152 <VL53L1_preset_mode_histogram_ranging>
 800b48a:	4603      	mov	r3, r0
 800b48c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b48e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d10a      	bne.n	800b4ac <VL53L1_preset_mode_histogram_ranging_ref+0x54>



		phistogram->histogram_config__spad_array_selection = 0x01;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2201      	movs	r2, #1
 800b49a:	701a      	strb	r2, [r3, #0]



		VL53L1_copy_hist_cfg_to_static_cfg(
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	6a3b      	ldr	r3, [r7, #32]
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	68b9      	ldr	r1, [r7, #8]
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7ff fefd 	bl	800b2a6 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b4ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3718      	adds	r7, #24
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	3318      	adds	r3, #24
 800b4c4:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2230      	movs	r2, #48	; 0x30
 800b4da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f44f 523f 	mov.w	r2, #12224	; 0x2fc0
 800b4e4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b4e6:	bf00      	nop
 800b4e8:	3714      	adds	r7, #20
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr

0800b4f2 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800b4f2:	b480      	push	{r7}
 800b4f4:	b085      	sub	sp, #20
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	70fb      	strb	r3, [r7, #3]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	3318      	adds	r3, #24
 800b502:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	332c      	adds	r3, #44	; 0x2c
 800b508:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	78fa      	ldrb	r2, [r7, #3]
 800b50e:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	2200      	movs	r2, #0
 800b514:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	2202      	movs	r2, #2
 800b51a:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	2200      	movs	r2, #0
 800b520:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	2200      	movs	r2, #0
 800b526:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	78fa      	ldrb	r2, [r7, #3]
 800b52c:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	2200      	movs	r2, #0
 800b532:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	2202      	movs	r2, #2
 800b538:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	2200      	movs	r2, #0
 800b53e:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	2200      	movs	r2, #0
 800b544:	735a      	strb	r2, [r3, #13]

}
 800b546:	bf00      	nop
 800b548:	3714      	adds	r7, #20
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr
	...

0800b554 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]


	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800b55c:	2300      	movs	r3, #0
 800b55e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	3318      	adds	r3, #24
 800b564:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	332c      	adds	r3, #44	; 0x2c
 800b56a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800b572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d115      	bne.n	800b5a6 <VL53L1_update_ll_driver_rd_state+0x52>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2203      	movs	r2, #3
 800b57e:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2200      	movs	r2, #0
 800b584:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2200      	movs	r2, #0
 800b58a:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2202      	movs	r2, #2
 800b596:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2200      	movs	r2, #0
 800b59c:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	735a      	strb	r2, [r3, #13]
 800b5a4:	e0be      	b.n	800b724 <VL53L1_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	7a1b      	ldrb	r3, [r3, #8]
 800b5aa:	2bff      	cmp	r3, #255	; 0xff
 800b5ac:	d103      	bne.n	800b5b6 <VL53L1_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2280      	movs	r2, #128	; 0x80
 800b5b2:	721a      	strb	r2, [r3, #8]
 800b5b4:	e005      	b.n	800b5c2 <VL53L1_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	7a1b      	ldrb	r3, [r3, #8]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	b2da      	uxtb	r2, r3
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	721a      	strb	r2, [r3, #8]


		status = VL53L1_update_internal_stream_counters(Dev,
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	7a19      	ldrb	r1, [r3, #8]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f103 0209 	add.w	r2, r3, #9
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	330a      	adds	r3, #10
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f002 fdc2 	bl	800e15a <VL53L1_update_internal_stream_counters>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	7adb      	ldrb	r3, [r3, #11]
 800b5de:	f083 0302 	eor.w	r3, r3, #2
 800b5e2:	b2da      	uxtb	r2, r3
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	79db      	ldrb	r3, [r3, #7]
 800b5ec:	3b03      	subs	r3, #3
 800b5ee:	2b05      	cmp	r3, #5
 800b5f0:	f200 8082 	bhi.w	800b6f8 <VL53L1_update_ll_driver_rd_state+0x1a4>
 800b5f4:	a201      	add	r2, pc, #4	; (adr r2, 800b5fc <VL53L1_update_ll_driver_rd_state+0xa8>)
 800b5f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5fa:	bf00      	nop
 800b5fc:	0800b615 	.word	0x0800b615
 800b600:	0800b6f9 	.word	0x0800b6f9
 800b604:	0800b6f9 	.word	0x0800b6f9
 800b608:	0800b667 	.word	0x0800b667
 800b60c:	0800b69d 	.word	0x0800b69d
 800b610:	0800b6c7 	.word	0x0800b6c7

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	f893 33a2 	ldrb.w	r3, [r3, #930]	; 0x3a2
 800b61a:	f003 0302 	and.w	r3, r3, #2
 800b61e:	2b00      	cmp	r3, #0
 800b620:	dd03      	ble.n	800b62a <VL53L1_update_ll_driver_rd_state+0xd6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2206      	movs	r2, #6
 800b626:	71da      	strb	r2, [r3, #7]
 800b628:	e00d      	b.n	800b646 <VL53L1_update_ll_driver_rd_state+0xf2>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800b634:	429a      	cmp	r2, r3
 800b636:	d303      	bcc.n	800b640 <VL53L1_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2208      	movs	r2, #8
 800b63c:	71da      	strb	r2, [r3, #7]
 800b63e:	e002      	b.n	800b646 <VL53L1_update_ll_driver_rd_state+0xf2>
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2207      	movs	r2, #7
 800b644:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2200      	movs	r2, #0
 800b64a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2200      	movs	r2, #0
 800b650:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2200      	movs	r2, #0
 800b656:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2200      	movs	r2, #0
 800b65c:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2200      	movs	r2, #0
 800b662:	735a      	strb	r2, [r3, #13]

			break;
 800b664:	e05e      	b.n	800b724 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2200      	movs	r2, #0
 800b66a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2200      	movs	r2, #0
 800b670:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2200      	movs	r2, #0
 800b676:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800b688:	429a      	cmp	r2, r3
 800b68a:	d303      	bcc.n	800b694 <VL53L1_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2208      	movs	r2, #8
 800b690:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800b692:	e047      	b.n	800b724 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2207      	movs	r2, #7
 800b698:	71da      	strb	r2, [r3, #7]
			break;
 800b69a:	e043      	b.n	800b724 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	7b5b      	ldrb	r3, [r3, #13]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	b2da      	uxtb	r2, r3
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d303      	bcc.n	800b6be <VL53L1_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2208      	movs	r2, #8
 800b6ba:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800b6bc:	e032      	b.n	800b724 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2207      	movs	r2, #7
 800b6c2:	71da      	strb	r2, [r3, #7]
			break;
 800b6c4:	e02e      	b.n	800b724 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	7b1b      	ldrb	r3, [r3, #12]
 800b6d0:	f083 0301 	eor.w	r3, r3, #1
 800b6d4:	b2da      	uxtb	r2, r3
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d303      	bcc.n	800b6f0 <VL53L1_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2208      	movs	r2, #8
 800b6ec:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800b6ee:	e019      	b.n	800b724 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2207      	movs	r2, #7
 800b6f4:	71da      	strb	r2, [r3, #7]
			break;
 800b6f6:	e015      	b.n	800b724 <VL53L1_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2203      	movs	r2, #3
 800b6fc:	71da      	strb	r2, [r3, #7]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2200      	movs	r2, #0
 800b702:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2200      	movs	r2, #0
 800b70e:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2202      	movs	r2, #2
 800b714:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	735a      	strb	r2, [r3, #13]
			break;
 800b722:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800b724:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3718      	adds	r7, #24
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800b730:	b480      	push	{r7}
 800b732:	b08d      	sub	sp, #52	; 0x34
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800b738:	2300      	movs	r3, #0
 800b73a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t  *pdev =
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	3318      	adds	r3, #24
 800b742:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800b74a:	3308      	adds	r3, #8
 800b74c:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800b74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b750:	332c      	adds	r3, #44	; 0x2c
 800b752:	623b      	str	r3, [r7, #32]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800b754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b756:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800b75a:	61fb      	str	r3, [r7, #28]
	VL53L1_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800b75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800b762:	61bb      	str	r3, [r7, #24]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800b764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b766:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800b76a:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800b76c:	2300      	movs	r3, #0
 800b76e:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800b770:	2300      	movs	r3, #0
 800b772:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800b774:	2300      	movs	r3, #0
 800b776:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 800b77a:	2300      	movs	r3, #0
 800b77c:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800b77e:	2300      	movs	r3, #0
 800b780:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800b782:	2300      	movs	r3, #0
 800b784:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800b78a:	f003 031f 	and.w	r3, r3, #31
 800b78e:	74fb      	strb	r3, [r7, #19]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	78db      	ldrb	r3, [r3, #3]
 800b794:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 800b796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b798:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800b79c:	f003 0302 	and.w	r3, r3, #2
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	bf14      	ite	ne
 800b7a4:	2301      	movne	r3, #1
 800b7a6:	2300      	moveq	r3, #0
 800b7a8:	b2db      	uxtb	r3, r3
	histogram_mode =
 800b7aa:	747b      	strb	r3, [r7, #17]
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800b7b0:	111b      	asrs	r3, r3, #4
 800b7b2:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800b7b4:	f003 0302 	and.w	r3, r3, #2
 800b7b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 800b7bc:	7c7b      	ldrb	r3, [r7, #17]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d008      	beq.n	800b7d4 <VL53L1_check_ll_driver_rd_state+0xa4>
		device_gph_id = (phist_data->result__interrupt_status &
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800b7c8:	111b      	asrs	r3, r3, #4
 800b7ca:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800b7cc:	f003 0302 	and.w	r3, r3, #2
 800b7d0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d6:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800b7da:	f003 0320 	and.w	r3, r3, #32
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d04e      	beq.n	800b880 <VL53L1_check_ll_driver_rd_state+0x150>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800b7e2:	6a3b      	ldr	r3, [r7, #32]
 800b7e4:	79db      	ldrb	r3, [r3, #7]
 800b7e6:	2b06      	cmp	r3, #6
 800b7e8:	d109      	bne.n	800b7fe <VL53L1_check_ll_driver_rd_state+0xce>
		VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800b7ea:	7c7b      	ldrb	r3, [r7, #17]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d14a      	bne.n	800b886 <VL53L1_check_ll_driver_rd_state+0x156>
			if (device_range_status !=
 800b7f0:	7cfb      	ldrb	r3, [r7, #19]
 800b7f2:	2b12      	cmp	r3, #18
 800b7f4:	d047      	beq.n	800b886 <VL53L1_check_ll_driver_rd_state+0x156>
			VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800b7f6:	23ef      	movs	r3, #239	; 0xef
 800b7f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b7fc:	e043      	b.n	800b886 <VL53L1_check_ll_driver_rd_state+0x156>
				VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800b7fe:	6a3b      	ldr	r3, [r7, #32]
 800b800:	7a1b      	ldrb	r3, [r3, #8]
 800b802:	7cba      	ldrb	r2, [r7, #18]
 800b804:	429a      	cmp	r2, r3
 800b806:	d002      	beq.n	800b80e <VL53L1_check_ll_driver_rd_state+0xde>
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800b808:	23ee      	movs	r3, #238	; 0xee
 800b80a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800b80e:	6a3b      	ldr	r3, [r7, #32]
 800b810:	7adb      	ldrb	r3, [r3, #11]
 800b812:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800b816:	429a      	cmp	r2, r3
 800b818:	d002      	beq.n	800b820 <VL53L1_check_ll_driver_rd_state+0xf0>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800b81a:	23ed      	movs	r3, #237	; 0xed
 800b81c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_stream_count;
 800b820:	6a3b      	ldr	r3, [r7, #32]
 800b822:	7b5b      	ldrb	r3, [r3, #13]
 800b824:	4619      	mov	r1, r3
		expected_stream_count =
 800b826:	697a      	ldr	r2, [r7, #20]
 800b828:	460b      	mov	r3, r1
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	440b      	add	r3, r1
 800b82e:	005b      	lsls	r3, r3, #1
 800b830:	4413      	add	r3, r2
 800b832:	3302      	adds	r3, #2
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id;
 800b838:	6a3b      	ldr	r3, [r7, #32]
 800b83a:	7b5b      	ldrb	r3, [r3, #13]
 800b83c:	4619      	mov	r1, r3
		expected_gph_id =
 800b83e:	697a      	ldr	r2, [r7, #20]
 800b840:	460b      	mov	r3, r1
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	440b      	add	r3, r1
 800b846:	005b      	lsls	r3, r3, #1
 800b848:	4413      	add	r3, r2
 800b84a:	3303      	adds	r3, #3
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800b850:	7c3a      	ldrb	r2, [r7, #16]
 800b852:	7cbb      	ldrb	r3, [r7, #18]
 800b854:	429a      	cmp	r2, r3
 800b856:	d00a      	beq.n	800b86e <VL53L1_check_ll_driver_rd_state+0x13e>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 800b858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d102      	bne.n	800b868 <VL53L1_check_ll_driver_rd_state+0x138>
 800b862:	7cbb      	ldrb	r3, [r7, #18]
 800b864:	2bff      	cmp	r3, #255	; 0xff
 800b866:	d002      	beq.n	800b86e <VL53L1_check_ll_driver_rd_state+0x13e>
				(device_stream_count == 255)))
				status =
 800b868:	23ec      	movs	r3, #236	; 0xec
 800b86a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800b86e:	7bfa      	ldrb	r2, [r7, #15]
 800b870:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b874:	429a      	cmp	r2, r3
 800b876:	d005      	beq.n	800b884 <VL53L1_check_ll_driver_rd_state+0x154>
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800b878:	23eb      	movs	r3, #235	; 0xeb
 800b87a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b87e:	e002      	b.n	800b886 <VL53L1_check_ll_driver_rd_state+0x156>
		goto ENDFUNC;
 800b880:	bf00      	nop
 800b882:	e000      	b.n	800b886 <VL53L1_check_ll_driver_rd_state+0x156>

	}



ENDFUNC:
 800b884:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800b886:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3734      	adds	r7, #52	; 0x34
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b088      	sub	sp, #32
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	3318      	adds	r3, #24
 800b8a6:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800b8ae:	3308      	adds	r3, #8
 800b8b0:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	332c      	adds	r3, #44	; 0x2c
 800b8b6:	613b      	str	r3, [r7, #16]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800b8be:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800b8c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d11b      	bne.n	800b906 <VL53L1_update_ll_driver_cfg_state+0x70>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	2203      	movs	r2, #3
 800b8d2:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	2202      	movs	r2, #2
 800b8ea:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800b900:	2300      	movs	r3, #0
 800b902:	773b      	strb	r3, [r7, #28]
 800b904:	e0b1      	b.n	800ba6a <VL53L1_update_ll_driver_cfg_state+0x1d4>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	791b      	ldrb	r3, [r3, #4]
 800b90a:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	799b      	ldrb	r3, [r3, #6]
 800b910:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	785b      	ldrb	r3, [r3, #1]
 800b916:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	785b      	ldrb	r3, [r3, #1]
 800b91c:	2bff      	cmp	r3, #255	; 0xff
 800b91e:	d103      	bne.n	800b928 <VL53L1_update_ll_driver_cfg_state+0x92>
			pstate->cfg_stream_count = 0x80;
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	2280      	movs	r2, #128	; 0x80
 800b924:	705a      	strb	r2, [r3, #1]
 800b926:	e005      	b.n	800b934 <VL53L1_update_ll_driver_cfg_state+0x9e>
		else
			pstate->cfg_stream_count++;
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	785b      	ldrb	r3, [r3, #1]
 800b92c:	3301      	adds	r3, #1
 800b92e:	b2da      	uxtb	r2, r3
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	705a      	strb	r2, [r3, #1]


		status = VL53L1_update_internal_stream_counters(
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	7859      	ldrb	r1, [r3, #1]
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	1c9a      	adds	r2, r3, #2
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	3303      	adds	r3, #3
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f002 fc0a 	bl	800e15a <VL53L1_update_internal_stream_counters>
 800b946:	4603      	mov	r3, r0
 800b948:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	791b      	ldrb	r3, [r3, #4]
 800b94e:	f083 0302 	eor.w	r3, r3, #2
 800b952:	b2da      	uxtb	r2, r3
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	2b05      	cmp	r3, #5
 800b95e:	d053      	beq.n	800ba08 <VL53L1_update_ll_driver_cfg_state+0x172>
 800b960:	2b05      	cmp	r3, #5
 800b962:	dc69      	bgt.n	800ba38 <VL53L1_update_ll_driver_cfg_state+0x1a2>
 800b964:	2b03      	cmp	r3, #3
 800b966:	d002      	beq.n	800b96e <VL53L1_update_ll_driver_cfg_state+0xd8>
 800b968:	2b04      	cmp	r3, #4
 800b96a:	d02d      	beq.n	800b9c8 <VL53L1_update_ll_driver_cfg_state+0x132>
 800b96c:	e064      	b.n	800ba38 <VL53L1_update_ll_driver_cfg_state+0x1a2>

		case VL53L1_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	2201      	movs	r2, #1
 800b972:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800b97e:	429a      	cmp	r2, r3
 800b980:	d909      	bls.n	800b996 <VL53L1_update_ll_driver_cfg_state+0x100>
				pstate->cfg_zone_id = 0;
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	2200      	movs	r2, #0
 800b986:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	795b      	ldrb	r3, [r3, #5]
 800b98c:	f083 0301 	eor.w	r3, r3, #1
 800b990:	b2da      	uxtb	r2, r3
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	2201      	movs	r2, #1
 800b99a:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d106      	bne.n	800b9b4 <VL53L1_update_ll_driver_cfg_state+0x11e>
				pstate->cfg_internal_stream_count = 1;
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	70da      	strb	r2, [r3, #3]
 800b9b2:	e005      	b.n	800b9c0 <VL53L1_update_ll_driver_cfg_state+0x12a>
			} else {
				pstate->cfg_internal_stream_count = 0;
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	2204      	movs	r2, #4
 800b9c4:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800b9c6:	e050      	b.n	800ba6a <VL53L1_update_ll_driver_cfg_state+0x1d4>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	799b      	ldrb	r3, [r3, #6]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	b2da      	uxtb	r2, r3
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d940      	bls.n	800ba64 <VL53L1_update_ll_driver_cfg_state+0x1ce>

				pstate->cfg_zone_id = 0;
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	795b      	ldrb	r3, [r3, #5]
 800b9ec:	f083 0301 	eor.w	r3, r3, #1
 800b9f0:	b2da      	uxtb	r2, r3
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d031      	beq.n	800ba64 <VL53L1_update_ll_driver_cfg_state+0x1ce>
					pstate->cfg_device_state =
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	2205      	movs	r2, #5
 800ba04:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800ba06:	e02d      	b.n	800ba64 <VL53L1_update_ll_driver_cfg_state+0x1ce>

		case VL53L1_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	799b      	ldrb	r3, [r3, #6]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	b2da      	uxtb	r2, r3
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d922      	bls.n	800ba68 <VL53L1_update_ll_driver_cfg_state+0x1d2>
				pstate->cfg_zone_id = 0;
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	2200      	movs	r2, #0
 800ba26:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	795b      	ldrb	r3, [r3, #5]
 800ba2c:	f083 0301 	eor.w	r3, r3, #1
 800ba30:	b2da      	uxtb	r2, r3
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	715a      	strb	r2, [r3, #5]
			}
			break;
 800ba36:	e017      	b.n	800ba68 <VL53L1_update_ll_driver_cfg_state+0x1d2>

		default:
			pstate->cfg_device_state =
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	2203      	movs	r2, #3
 800ba3c:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	2200      	movs	r2, #0
 800ba42:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	2200      	movs	r2, #0
 800ba48:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	2202      	movs	r2, #2
 800ba54:	711a      	strb	r2, [r3, #4]
					VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	719a      	strb	r2, [r3, #6]
			break;
 800ba62:	e002      	b.n	800ba6a <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800ba64:	bf00      	nop
 800ba66:	e000      	b.n	800ba6a <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800ba68:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d11d      	bne.n	800bab0 <VL53L1_update_ll_driver_cfg_state+0x21a>

		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800ba74:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800ba76:	7f3b      	ldrb	r3, [r7, #28]
 800ba78:	3b01      	subs	r3, #1
 800ba7a:	b2d8      	uxtb	r0, r3
 800ba7c:	68f9      	ldr	r1, [r7, #12]
 800ba7e:	4613      	mov	r3, r2
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	4413      	add	r3, r2
 800ba84:	005b      	lsls	r3, r3, #1
 800ba86:	440b      	add	r3, r1
 800ba88:	3302      	adds	r3, #2
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	701a      	strb	r2, [r3, #0]

		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	7b5b      	ldrb	r3, [r3, #13]
 800ba92:	4619      	mov	r1, r3
 800ba94:	7f7b      	ldrb	r3, [r7, #29]
 800ba96:	f083 0302 	eor.w	r3, r3, #2
 800ba9a:	b2d8      	uxtb	r0, r3
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	460b      	mov	r3, r1
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	440b      	add	r3, r1
 800baa4:	005b      	lsls	r3, r3, #1
 800baa6:	4413      	add	r3, r2
 800baa8:	3303      	adds	r3, #3
 800baaa:	4602      	mov	r2, r0
 800baac:	701a      	strb	r2, [r3, #0]
 800baae:	e013      	b.n	800bad8 <VL53L1_update_ll_driver_cfg_state+0x242>
			prev_cfg_gph_id ^ VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800bab0:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800bab2:	68f9      	ldr	r1, [r7, #12]
 800bab4:	4613      	mov	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4413      	add	r3, r2
 800baba:	005b      	lsls	r3, r3, #1
 800babc:	440b      	add	r3, r1
 800babe:	3302      	adds	r3, #2
 800bac0:	7f3a      	ldrb	r2, [r7, #28]
 800bac2:	701a      	strb	r2, [r3, #0]
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 800bac4:	7fba      	ldrb	r2, [r7, #30]
 800bac6:	68f9      	ldr	r1, [r7, #12]
 800bac8:	4613      	mov	r3, r2
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	4413      	add	r3, r2
 800bace:	005b      	lsls	r3, r3, #1
 800bad0:	440b      	add	r3, r1
 800bad2:	3303      	adds	r3, #3
 800bad4:	7f7a      	ldrb	r2, [r7, #29]
 800bad6:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800bad8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3720      	adds	r7, #32
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	7c1a      	ldrb	r2, [r3, #16]
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	3301      	adds	r3, #1
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	7c52      	ldrb	r2, [r2, #17]
 800bafe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	3302      	adds	r3, #2
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	7c92      	ldrb	r2, [r2, #18]
 800bb08:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	3303      	adds	r3, #3
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	7cd2      	ldrb	r2, [r2, #19]
 800bb12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	3304      	adds	r3, #4
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	7d12      	ldrb	r2, [r2, #20]
 800bb1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	3305      	adds	r3, #5
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	7d52      	ldrb	r2, [r2, #21]
 800bb26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	3306      	adds	r3, #6
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	7d92      	ldrb	r2, [r2, #22]
 800bb30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	3307      	adds	r3, #7
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	7dd2      	ldrb	r2, [r2, #23]
 800bb3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	3308      	adds	r3, #8
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	7e12      	ldrb	r2, [r2, #24]
 800bb44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	3309      	adds	r3, #9
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	7e52      	ldrb	r2, [r2, #25]
 800bb4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	330a      	adds	r3, #10
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	7e92      	ldrb	r2, [r2, #26]
 800bb58:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	330b      	adds	r3, #11
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	7ed2      	ldrb	r2, [r2, #27]
 800bb62:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	330c      	adds	r3, #12
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	7f12      	ldrb	r2, [r2, #28]
 800bb6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	330d      	adds	r3, #13
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	7f52      	ldrb	r2, [r2, #29]
 800bb76:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	330e      	adds	r3, #14
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	7f92      	ldrb	r2, [r2, #30]
 800bb80:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	330f      	adds	r3, #15
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	7fd2      	ldrb	r2, [r2, #31]
 800bb8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	3310      	adds	r3, #16
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	f892 2020 	ldrb.w	r2, [r2, #32]
 800bb96:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	3311      	adds	r3, #17
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800bba2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	3312      	adds	r3, #18
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800bbae:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	3313      	adds	r3, #19
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800bbba:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	3314      	adds	r3, #20
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800bbc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	3315      	adds	r3, #21
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800bbd2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	3316      	adds	r3, #22
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800bbde:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	3317      	adds	r3, #23
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800bbea:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	3318      	adds	r3, #24
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800bbf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	3319      	adds	r3, #25
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800bc02:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	331a      	adds	r3, #26
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800bc0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	331b      	adds	r3, #27
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800bc1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	331c      	adds	r3, #28
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800bc26:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	331d      	adds	r3, #29
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800bc32:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	331e      	adds	r3, #30
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800bc3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	331f      	adds	r3, #31
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800bc4a:	701a      	strb	r2, [r3, #0]
}
 800bc4c:	bf00      	nop
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <VL53L1_init_system_results>:


void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	22ff      	movs	r2, #255	; 0xff
 800bc64:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	22ff      	movs	r2, #255	; 0xff
 800bc6a:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	22ff      	movs	r2, #255	; 0xff
 800bc70:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	22ff      	movs	r2, #255	; 0xff
 800bc76:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc7e:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc86:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc8e:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc96:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc9e:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bca6:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcae:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcb6:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcbe:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcc6:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcce:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcd6:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcde:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bce6:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcee:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcf6:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcfe:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd06:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd0e:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	22ff      	movs	r2, #255	; 0xff
 800bd14:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800bd18:	bf00      	nop
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53L1_zone_results_t  *pdata)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b085      	sub	sp, #20
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	6039      	str	r1, [r7, #0]
 800bd2e:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 800bd30:	2300      	movs	r3, #0
 800bd32:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	2210      	movs	r2, #16
 800bd38:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	79fa      	ldrb	r2, [r7, #7]
 800bd3e:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 800bd40:	2300      	movs	r3, #0
 800bd42:	73fb      	strb	r3, [r7, #15]
 800bd44:	e017      	b.n	800bd76 <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53L1_p_002[z]);
 800bd46:	7bfa      	ldrb	r2, [r7, #15]
 800bd48:	4613      	mov	r3, r2
 800bd4a:	011b      	lsls	r3, r3, #4
 800bd4c:	4413      	add	r3, r2
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	683a      	ldr	r2, [r7, #0]
 800bd52:	4413      	add	r3, r2
 800bd54:	3304      	adds	r3, #4
 800bd56:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	2203      	movs	r2, #3
 800bd5c:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	2203      	movs	r2, #3
 800bd62:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	2204      	movs	r2, #4
 800bd68:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 800bd70:	7bfb      	ldrb	r3, [r7, #15]
 800bd72:	3301      	adds	r3, #1
 800bd74:	73fb      	strb	r3, [r7, #15]
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	7bfa      	ldrb	r2, [r7, #15]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d3e2      	bcc.n	800bd46 <V53L1_init_zone_results_structure+0x22>
	}
}
 800bd80:	bf00      	nop
 800bd82:	bf00      	nop
 800bd84:	3714      	adds	r7, #20
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53L1_DEV              Dev)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b087      	sub	sp, #28
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverResults_t  *pres =
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800bd9c:	3308      	adds	r3, #8
 800bd9e:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800bda0:	2300      	movs	r3, #0
 800bda2:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53L1_MAX_USER_ZONES;
 800bda4:	2310      	movs	r3, #16
 800bda6:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800bdae:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	75fb      	strb	r3, [r7, #23]
 800bdb4:	e016      	b.n	800bde4 <V53L1_init_zone_dss_configs+0x56>
		pdata->VL53L1_p_002[z].dss_mode =
 800bdb6:	7dfa      	ldrb	r2, [r7, #23]
 800bdb8:	68b9      	ldr	r1, [r7, #8]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	4413      	add	r3, r2
 800bdc0:	005b      	lsls	r3, r3, #1
 800bdc2:	440b      	add	r3, r1
 800bdc4:	3304      	adds	r3, #4
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	701a      	strb	r2, [r3, #0]
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53L1_p_002[z].dss_requested_effective_spad_count = 0;
 800bdca:	7dfa      	ldrb	r2, [r7, #23]
 800bdcc:	68b9      	ldr	r1, [r7, #8]
 800bdce:	4613      	mov	r3, r2
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	4413      	add	r3, r2
 800bdd4:	005b      	lsls	r3, r3, #1
 800bdd6:	440b      	add	r3, r1
 800bdd8:	3306      	adds	r3, #6
 800bdda:	2200      	movs	r2, #0
 800bddc:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800bdde:	7dfb      	ldrb	r3, [r7, #23]
 800bde0:	3301      	adds	r3, #1
 800bde2:	75fb      	strb	r3, [r7, #23]
 800bde4:	7dfa      	ldrb	r2, [r7, #23]
 800bde6:	7bfb      	ldrb	r3, [r7, #15]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d3e4      	bcc.n	800bdb6 <V53L1_init_zone_dss_configs+0x28>
	}
}
 800bdec:	bf00      	nop
 800bdee:	bf00      	nop
 800bdf0:	371c      	adds	r7, #28
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr

0800bdfa <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800bdfa:	b490      	push	{r4, r7}
 800bdfc:	b082      	sub	sp, #8
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	4604      	mov	r4, r0
 800be02:	4608      	mov	r0, r1
 800be04:	4611      	mov	r1, r2
 800be06:	461a      	mov	r2, r3
 800be08:	4623      	mov	r3, r4
 800be0a:	71fb      	strb	r3, [r7, #7]
 800be0c:	4603      	mov	r3, r0
 800be0e:	71bb      	strb	r3, [r7, #6]
 800be10:	460b      	mov	r3, r1
 800be12:	717b      	strb	r3, [r7, #5]
 800be14:	4613      	mov	r3, r2
 800be16:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800be18:	79bb      	ldrb	r3, [r7, #6]
 800be1a:	011b      	lsls	r3, r3, #4
 800be1c:	b2da      	uxtb	r2, r3
 800be1e:	79fb      	ldrb	r3, [r7, #7]
 800be20:	4413      	add	r3, r2
 800be22:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800be28:	793b      	ldrb	r3, [r7, #4]
 800be2a:	011b      	lsls	r3, r3, #4
 800be2c:	b2da      	uxtb	r2, r3
 800be2e:	797b      	ldrb	r3, [r7, #5]
 800be30:	4413      	add	r3, r2
 800be32:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be36:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800be38:	7d3b      	ldrb	r3, [r7, #20]
 800be3a:	011b      	lsls	r3, r3, #4
 800be3c:	b2da      	uxtb	r2, r3
 800be3e:	7c3b      	ldrb	r3, [r7, #16]
 800be40:	4413      	add	r3, r2
 800be42:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800be44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be46:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800be48:	7f3b      	ldrb	r3, [r7, #28]
 800be4a:	011b      	lsls	r3, r3, #4
 800be4c:	b2da      	uxtb	r2, r3
 800be4e:	7e3b      	ldrb	r3, [r7, #24]
 800be50:	4413      	add	r3, r2
 800be52:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800be54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be56:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800be58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800be5c:	011b      	lsls	r3, r3, #4
 800be5e:	b2da      	uxtb	r2, r3
 800be60:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be64:	4413      	add	r3, r2
 800be66:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800be68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6a:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800be6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800be70:	011b      	lsls	r3, r3, #4
 800be72:	b2da      	uxtb	r2, r3
 800be74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800be78:	4413      	add	r3, r2
 800be7a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800be7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7e:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800be80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be82:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800be84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be86:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800be88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8a:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800be8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8e:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800be90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be92:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800be94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be96:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800be98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9a:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800be9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9e:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800bea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea2:	f897 2020 	ldrb.w	r2, [r7, #32]
 800bea6:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800bea8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800beac:	011b      	lsls	r3, r3, #4
 800beae:	b2da      	uxtb	r2, r3
 800beb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800beb4:	4413      	add	r3, r2
 800beb6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800beb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beba:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800bebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800bec2:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800bec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec6:	2200      	movs	r2, #0
 800bec8:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800beca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800becc:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800bed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed4:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800bed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed8:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800beda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bedc:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800bede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee0:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800bee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee8:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800beea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beec:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800beee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef0:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800bef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef4:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800bef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef8:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800befa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf00:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800bf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf08:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800bf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	701a      	strb	r2, [r3, #0]

}
 800bf10:	bf00      	nop
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bc90      	pop	{r4, r7}
 800bf18:	4770      	bx	lr

0800bf1a <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800bf1a:	b490      	push	{r4, r7}
 800bf1c:	b082      	sub	sp, #8
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	4604      	mov	r4, r0
 800bf22:	4608      	mov	r0, r1
 800bf24:	4611      	mov	r1, r2
 800bf26:	461a      	mov	r2, r3
 800bf28:	4623      	mov	r3, r4
 800bf2a:	71fb      	strb	r3, [r7, #7]
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	71bb      	strb	r3, [r7, #6]
 800bf30:	460b      	mov	r3, r1
 800bf32:	717b      	strb	r3, [r7, #5]
 800bf34:	4613      	mov	r3, r2
 800bf36:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800bf38:	79bb      	ldrb	r3, [r7, #6]
 800bf3a:	011b      	lsls	r3, r3, #4
 800bf3c:	b2da      	uxtb	r2, r3
 800bf3e:	79fb      	ldrb	r3, [r7, #7]
 800bf40:	4413      	add	r3, r2
 800bf42:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800bf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf46:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800bf48:	793b      	ldrb	r3, [r7, #4]
 800bf4a:	011b      	lsls	r3, r3, #4
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	797b      	ldrb	r3, [r7, #5]
 800bf50:	4413      	add	r3, r2
 800bf52:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800bf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf56:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800bf58:	7d3b      	ldrb	r3, [r7, #20]
 800bf5a:	011b      	lsls	r3, r3, #4
 800bf5c:	b2da      	uxtb	r2, r3
 800bf5e:	7c3b      	ldrb	r3, [r7, #16]
 800bf60:	4413      	add	r3, r2
 800bf62:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800bf64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf66:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800bf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6a:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6e:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800bf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf72:	789a      	ldrb	r2, [r3, #2]
 800bf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf76:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800bf78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7a:	78da      	ldrb	r2, [r3, #3]
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7e:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800bf80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf82:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf86:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800bf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8a:	789a      	ldrb	r2, [r3, #2]
 800bf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8e:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800bf90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf92:	78da      	ldrb	r2, [r3, #3]
 800bf94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf96:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800bf98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9a:	791a      	ldrb	r2, [r3, #4]
 800bf9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9e:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800bfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa2:	f897 2020 	ldrb.w	r2, [r7, #32]
 800bfa6:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800bfa8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bfac:	011b      	lsls	r3, r3, #4
 800bfae:	b2da      	uxtb	r2, r3
 800bfb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bfb4:	4413      	add	r3, r2
 800bfb6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800bfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfba:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800bfc2:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800bfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800bfca:	7f3b      	ldrb	r3, [r7, #28]
 800bfcc:	011b      	lsls	r3, r3, #4
 800bfce:	b2da      	uxtb	r2, r3
 800bfd0:	7e3b      	ldrb	r3, [r7, #24]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800bfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd8:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800bfda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bfde:	011b      	lsls	r3, r3, #4
 800bfe0:	b2da      	uxtb	r2, r3
 800bfe2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bfe6:	4413      	add	r3, r2
 800bfe8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800bfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfec:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800bfee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bff2:	011b      	lsls	r3, r3, #4
 800bff4:	b2da      	uxtb	r2, r3
 800bff6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bffa:	4413      	add	r3, r2
 800bffc:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800bffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c000:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800c002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c004:	7bda      	ldrb	r2, [r3, #15]
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800c00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00c:	7c1a      	ldrb	r2, [r3, #16]
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800c012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c014:	7c5a      	ldrb	r2, [r3, #17]
 800c016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c018:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c020:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800c022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c028:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800c02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02c:	2200      	movs	r2, #0
 800c02e:	701a      	strb	r2, [r3, #0]
}
 800c030:	bf00      	nop
 800c032:	3708      	adds	r7, #8
 800c034:	46bd      	mov	sp, r7
 800c036:	bc90      	pop	{r4, r7}
 800c038:	4770      	bx	lr

0800c03a <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b087      	sub	sp, #28
 800c03e:	af00      	add	r7, sp, #0
 800c040:	60f8      	str	r0, [r7, #12]
 800c042:	460b      	mov	r3, r1
 800c044:	607a      	str	r2, [r7, #4]
 800c046:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800c048:	2300      	movs	r3, #0
 800c04a:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_XTALK_HISTO_BINS;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	220c      	movs	r2, #12
 800c062:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800c064:	897b      	ldrh	r3, [r7, #10]
 800c066:	b2da      	uxtb	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_019                = 0;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2200      	movs	r2, #0
 800c096:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800c09a:	2300      	movs	r3, #0
 800c09c:	82fb      	strh	r3, [r7, #22]
 800c09e:	e015      	b.n	800c0cc <VL53L1_init_xtalk_bin_data_struct+0x92>
		if (i < VL53L1_p_024)
 800c0a0:	8afa      	ldrh	r2, [r7, #22]
 800c0a2:	897b      	ldrh	r3, [r7, #10]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d207      	bcs.n	800c0b8 <VL53L1_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800c0a8:	8afb      	ldrh	r3, [r7, #22]
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	3302      	adds	r3, #2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	4413      	add	r3, r2
 800c0b2:	68fa      	ldr	r2, [r7, #12]
 800c0b4:	605a      	str	r2, [r3, #4]
 800c0b6:	e006      	b.n	800c0c6 <VL53L1_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800c0b8:	8afb      	ldrh	r3, [r7, #22]
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	3302      	adds	r3, #2
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	4413      	add	r3, r2
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800c0c6:	8afb      	ldrh	r3, [r7, #22]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	82fb      	strh	r3, [r7, #22]
 800c0cc:	8afb      	ldrh	r3, [r7, #22]
 800c0ce:	2b0b      	cmp	r3, #11
 800c0d0:	d9e6      	bls.n	800c0a0 <VL53L1_init_xtalk_bin_data_struct+0x66>
	}
}
 800c0d2:	bf00      	nop
 800c0d4:	bf00      	nop
 800c0d6:	371c      	adds	r7, #28
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b085      	sub	sp, #20
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	603a      	str	r2, [r7, #0]
 800c0ea:	80fb      	strh	r3, [r7, #6]
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53L1_p_002 = 0;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800c0f8:	88fb      	ldrh	r3, [r7, #6]
 800c0fa:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	81fb      	strh	r3, [r7, #14]
 800c100:	e00e      	b.n	800c120 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800c102:	88ba      	ldrh	r2, [r7, #4]
 800c104:	89fb      	ldrh	r3, [r7, #14]
 800c106:	1ad3      	subs	r3, r2, r3
 800c108:	3b01      	subs	r3, #1
 800c10a:	683a      	ldr	r2, [r7, #0]
 800c10c:	4413      	add	r3, r2
 800c10e:	89ba      	ldrh	r2, [r7, #12]
 800c110:	b2d2      	uxtb	r2, r2
 800c112:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800c114:	89bb      	ldrh	r3, [r7, #12]
 800c116:	0a1b      	lsrs	r3, r3, #8
 800c118:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800c11a:	89fb      	ldrh	r3, [r7, #14]
 800c11c:	3301      	adds	r3, #1
 800c11e:	81fb      	strh	r3, [r7, #14]
 800c120:	89fa      	ldrh	r2, [r7, #14]
 800c122:	88bb      	ldrh	r3, [r7, #4]
 800c124:	429a      	cmp	r2, r3
 800c126:	d3ec      	bcc.n	800c102 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800c128:	bf00      	nop
 800c12a:	bf00      	nop
 800c12c:	3714      	adds	r7, #20
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr

0800c136 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c136:	b480      	push	{r7}
 800c138:	b085      	sub	sp, #20
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	4603      	mov	r3, r0
 800c13e:	6039      	str	r1, [r7, #0]
 800c140:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800c142:	2300      	movs	r3, #0
 800c144:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800c146:	e00a      	b.n	800c15e <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800c148:	89fb      	ldrh	r3, [r7, #14]
 800c14a:	021b      	lsls	r3, r3, #8
 800c14c:	b21a      	sxth	r2, r3
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	1c59      	adds	r1, r3, #1
 800c152:	6039      	str	r1, [r7, #0]
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	b21b      	sxth	r3, r3
 800c158:	4313      	orrs	r3, r2
 800c15a:	b21b      	sxth	r3, r3
 800c15c:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800c15e:	88fb      	ldrh	r3, [r7, #6]
 800c160:	1e5a      	subs	r2, r3, #1
 800c162:	80fa      	strh	r2, [r7, #6]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1ef      	bne.n	800c148 <VL53L1_i2c_decode_uint16_t+0x12>

	return value;
 800c168:	89fb      	ldrh	r3, [r7, #14]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3714      	adds	r7, #20
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr

0800c176 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c176:	b480      	push	{r7}
 800c178:	b085      	sub	sp, #20
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	4603      	mov	r3, r0
 800c17e:	603a      	str	r2, [r7, #0]
 800c180:	80fb      	strh	r3, [r7, #6]
 800c182:	460b      	mov	r3, r1
 800c184:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800c186:	2300      	movs	r3, #0
 800c188:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53L1_p_002 = 0;
 800c18a:	2300      	movs	r3, #0
 800c18c:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800c18e:	88fb      	ldrh	r3, [r7, #6]
 800c190:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800c192:	2300      	movs	r3, #0
 800c194:	81fb      	strh	r3, [r7, #14]
 800c196:	e00f      	b.n	800c1b8 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800c198:	88ba      	ldrh	r2, [r7, #4]
 800c19a:	89fb      	ldrh	r3, [r7, #14]
 800c19c:	1ad3      	subs	r3, r2, r3
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	683a      	ldr	r2, [r7, #0]
 800c1a2:	4413      	add	r3, r2
 800c1a4:	89ba      	ldrh	r2, [r7, #12]
 800c1a6:	b2d2      	uxtb	r2, r2
 800c1a8:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800c1aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c1ae:	121b      	asrs	r3, r3, #8
 800c1b0:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800c1b2:	89fb      	ldrh	r3, [r7, #14]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	81fb      	strh	r3, [r7, #14]
 800c1b8:	89fa      	ldrh	r2, [r7, #14]
 800c1ba:	88bb      	ldrh	r3, [r7, #4]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d3eb      	bcc.n	800c198 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800c1c0:	bf00      	nop
 800c1c2:	bf00      	nop
 800c1c4:	3714      	adds	r7, #20
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	b085      	sub	sp, #20
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	6039      	str	r1, [r7, #0]
 800c1d8:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	b25b      	sxtb	r3, r3
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	da0e      	bge.n	800c206 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800c1e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1ec:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800c1ee:	e00a      	b.n	800c206 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800c1f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c1f4:	021b      	lsls	r3, r3, #8
 800c1f6:	b21a      	sxth	r2, r3
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	1c59      	adds	r1, r3, #1
 800c1fc:	6039      	str	r1, [r7, #0]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	b21b      	sxth	r3, r3
 800c202:	4313      	orrs	r3, r2
 800c204:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800c206:	88fb      	ldrh	r3, [r7, #6]
 800c208:	1e5a      	subs	r2, r3, #1
 800c20a:	80fa      	strh	r2, [r7, #6]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1ef      	bne.n	800c1f0 <VL53L1_i2c_decode_int16_t+0x22>

	return value;
 800c210:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3714      	adds	r7, #20
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c220:	b480      	push	{r7}
 800c222:	b087      	sub	sp, #28
 800c224:	af00      	add	r7, sp, #0
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	460b      	mov	r3, r1
 800c22a:	607a      	str	r2, [r7, #4]
 800c22c:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800c22e:	2300      	movs	r3, #0
 800c230:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53L1_p_002 = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	613b      	str	r3, [r7, #16]

	VL53L1_p_002 =  ip_value;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800c23a:	2300      	movs	r3, #0
 800c23c:	82fb      	strh	r3, [r7, #22]
 800c23e:	e00e      	b.n	800c25e <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800c240:	897a      	ldrh	r2, [r7, #10]
 800c242:	8afb      	ldrh	r3, [r7, #22]
 800c244:	1ad3      	subs	r3, r2, r3
 800c246:	3b01      	subs	r3, #1
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	4413      	add	r3, r2
 800c24c:	693a      	ldr	r2, [r7, #16]
 800c24e:	b2d2      	uxtb	r2, r2
 800c250:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	0a1b      	lsrs	r3, r3, #8
 800c256:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800c258:	8afb      	ldrh	r3, [r7, #22]
 800c25a:	3301      	adds	r3, #1
 800c25c:	82fb      	strh	r3, [r7, #22]
 800c25e:	8afa      	ldrh	r2, [r7, #22]
 800c260:	897b      	ldrh	r3, [r7, #10]
 800c262:	429a      	cmp	r2, r3
 800c264:	d3ec      	bcc.n	800c240 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800c266:	bf00      	nop
 800c268:	bf00      	nop
 800c26a:	371c      	adds	r7, #28
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c274:	b480      	push	{r7}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
 800c27a:	4603      	mov	r3, r0
 800c27c:	6039      	str	r1, [r7, #0]
 800c27e:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800c280:	2300      	movs	r3, #0
 800c282:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800c284:	e007      	b.n	800c296 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	021a      	lsls	r2, r3, #8
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	1c59      	adds	r1, r3, #1
 800c28e:	6039      	str	r1, [r7, #0]
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	4313      	orrs	r3, r2
 800c294:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800c296:	88fb      	ldrh	r3, [r7, #6]
 800c298:	1e5a      	subs	r2, r3, #1
 800c29a:	80fa      	strh	r2, [r7, #6]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1f2      	bne.n	800c286 <VL53L1_i2c_decode_uint32_t+0x12>

	return value;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3714      	adds	r7, #20
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr

0800c2ae <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c2ae:	b480      	push	{r7}
 800c2b0:	b085      	sub	sp, #20
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	6039      	str	r1, [r7, #0]
 800c2b8:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	b25b      	sxtb	r3, r3
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	da0b      	bge.n	800c2e0 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800c2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2cc:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800c2ce:	e007      	b.n	800c2e0 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	021a      	lsls	r2, r3, #8
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	1c59      	adds	r1, r3, #1
 800c2d8:	6039      	str	r1, [r7, #0]
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800c2e0:	88fb      	ldrh	r3, [r7, #6]
 800c2e2:	1e5a      	subs	r2, r3, #1
 800c2e4:	80fa      	strh	r2, [r7, #6]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1f2      	bne.n	800c2d0 <VL53L1_i2c_decode_int32_t+0x22>

	return value;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3714      	adds	r7, #20
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <VL53L1_start_test>:


VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	460b      	mov	r3, r1
 800c302:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c304:	2300      	movs	r3, #0
 800c306:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) {
 800c308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d107      	bne.n	800c320 <VL53L1_start_test+0x28>
		status = VL53L1_WrByte(
 800c310:	78fb      	ldrb	r3, [r7, #3]
 800c312:	461a      	mov	r2, r3
 800c314:	2127      	movs	r1, #39	; 0x27
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f009 f9ce 	bl	80156b8 <VL53L1_WrByte>
 800c31c:	4603      	mov	r3, r0
 800c31e:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800c320:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3710      	adds	r7, #16
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	460b      	mov	r3, r1
 800c336:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800c338:	2300      	movs	r3, #0
 800c33a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	3318      	adds	r3, #24
 800c340:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	78fa      	ldrb	r2, [r7, #3]
 800c346:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6

	status = VL53L1_WrByte(
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
 800c350:	461a      	mov	r2, r3
 800c352:	2185      	movs	r1, #133	; 0x85
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f009 f9af 	bl	80156b8 <VL53L1_WrByte>
 800c35a:	4603      	mov	r3, r0
 800c35c:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800c35e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c362:	4618      	mov	r0, r3
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b084      	sub	sp, #16
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c372:	2300      	movs	r3, #0
 800c374:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800c376:	2101      	movs	r1, #1
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f7ff ffd7 	bl	800c32c <VL53L1_set_firmware_enable_register>
 800c37e:	4603      	mov	r3, r0
 800c380:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c382:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b084      	sub	sp, #16
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c396:	2300      	movs	r3, #0
 800c398:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 800c39a:	2100      	movs	r1, #0
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7ff ffc5 	bl	800c32c <VL53L1_set_firmware_enable_register>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c3a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}

0800c3b2 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b084      	sub	sp, #16
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	3318      	adds	r3, #24
 800c3c6:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	78fa      	ldrb	r2, [r7, #3]
 800c3cc:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

	status = VL53L1_WrByte(
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	2183      	movs	r1, #131	; 0x83
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f009 f96c 	bl	80156b8 <VL53L1_WrByte>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800c3e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3710      	adds	r7, #16
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800c3fc:	2101      	movs	r1, #1
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7ff ffd7 	bl	800c3b2 <VL53L1_set_powerforce_register>
 800c404:	4603      	mov	r3, r0
 800c406:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c408:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c41c:	2300      	movs	r3, #0
 800c41e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 800c420:	2100      	movs	r1, #0
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7ff ffc5 	bl	800c3b2 <VL53L1_set_powerforce_register>
 800c428:	4603      	mov	r3, r0
 800c42a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c42c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c430:	4618      	mov	r0, r3
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c440:	2300      	movs	r3, #0
 800c442:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	3318      	adds	r3, #24
 800c448:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	2201      	movs	r2, #1
 800c44e:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7

	status = VL53L1_WrByte(
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 800c458:	461a      	mov	r2, r3
 800c45a:	2186      	movs	r1, #134	; 0x86
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f009 f92b 	bl	80156b8 <VL53L1_WrByte>
 800c462:	4603      	mov	r3, r0
 800c464:	73fb      	strb	r3, [r7, #15]
				VL53L1_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800c466:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b086      	sub	sp, #24
 800c476:	af00      	add	r7, sp, #0
 800c478:	4603      	mov	r3, r0
 800c47a:	460a      	mov	r2, r1
 800c47c:	80fb      	strh	r3, [r7, #6]
 800c47e:	4613      	mov	r3, r2
 800c480:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800c482:	2300      	movs	r3, #0
 800c484:	617b      	str	r3, [r7, #20]
	uint8_t   VL53L1_p_031   = 0;
 800c486:	2300      	movs	r3, #0
 800c488:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800c48a:	2300      	movs	r3, #0
 800c48c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800c48e:	88fb      	ldrh	r3, [r7, #6]
 800c490:	4618      	mov	r0, r3
 800c492:	f002 ffeb 	bl	800f46c <VL53L1_calc_pll_period_us>
 800c496:	6178      	str	r0, [r7, #20]



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 800c498:	797b      	ldrb	r3, [r7, #5]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f003 fbd6 	bl	800fc4c <VL53L1_decode_vcsel_period>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800c4a4:	697a      	ldr	r2, [r7, #20]
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	00db      	lsls	r3, r3, #3
 800c4aa:	4413      	add	r3, r2
 800c4ac:	021b      	lsls	r3, r3, #8
 800c4ae:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	099b      	lsrs	r3, r3, #6
 800c4b4:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 800c4b6:	7cfa      	ldrb	r2, [r7, #19]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	fb02 f303 	mul.w	r3, r2, r3
 800c4be:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	099b      	lsrs	r3, r3, #6
 800c4c4:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3718      	adds	r7, #24
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b089      	sub	sp, #36	; 0x24
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	4608      	mov	r0, r1
 800c4da:	4611      	mov	r1, r2
 800c4dc:	461a      	mov	r2, r3
 800c4de:	4603      	mov	r3, r0
 800c4e0:	817b      	strh	r3, [r7, #10]
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	813b      	strh	r3, [r7, #8]
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	011b      	lsls	r3, r3, #4
 800c502:	4a23      	ldr	r2, [pc, #140]	; (800c590 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800c504:	fb82 1203 	smull	r1, r2, r2, r3
 800c508:	1192      	asrs	r2, r2, #6
 800c50a:	17db      	asrs	r3, r3, #31
 800c50c:	1ad3      	subs	r3, r2, r3
 800c50e:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800c510:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c514:	2b00      	cmp	r3, #0
 800c516:	da03      	bge.n	800c520 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800c518:	897b      	ldrh	r3, [r7, #10]
 800c51a:	425b      	negs	r3, r3
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800c520:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c524:	2b00      	cmp	r3, #0
 800c526:	da03      	bge.n	800c530 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800c528:	893b      	ldrh	r3, [r7, #8]
 800c52a:	425b      	negs	r3, r3
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800c530:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800c534:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c538:	4413      	add	r3, r2
 800c53a:	015b      	lsls	r3, r3, #5
 800c53c:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	4a13      	ldr	r2, [pc, #76]	; (800c590 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800c542:	fb82 1203 	smull	r1, r2, r2, r3
 800c546:	1192      	asrs	r2, r2, #6
 800c548:	17db      	asrs	r3, r3, #31
 800c54a:	1ad3      	subs	r3, r2, r3
 800c54c:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800c54e:	697a      	ldr	r2, [r7, #20]
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	4413      	add	r3, r2
 800c554:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800c556:	79fa      	ldrb	r2, [r7, #7]
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	fb02 f303 	mul.w	r3, r2, r3
 800c55e:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	3310      	adds	r3, #16
 800c564:	2b00      	cmp	r3, #0
 800c566:	da00      	bge.n	800c56a <VL53L1_calc_range_ignore_threshold+0x9a>
 800c568:	331f      	adds	r3, #31
 800c56a:	115b      	asrs	r3, r3, #5
 800c56c:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c574:	db03      	blt.n	800c57e <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800c576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c57a:	83fb      	strh	r3, [r7, #30]
 800c57c:	e001      	b.n	800c582 <VL53L1_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800c582:	8bfb      	ldrh	r3, [r7, #30]
}
 800c584:	4618      	mov	r0, r3
 800c586:	3724      	adds	r7, #36	; 0x24
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr
 800c590:	10624dd3 	.word	0x10624dd3

0800c594 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c594:	b480      	push	{r7}
 800c596:	b085      	sub	sp, #20
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d102      	bne.n	800c5ae <VL53L1_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	60fb      	str	r3, [r7, #12]
 800c5ac:	e008      	b.n	800c5c0 <VL53L1_calc_timeout_mclks+0x2c>
	else
		timeout_mclks =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	031a      	lsls	r2, r3, #12
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	085b      	lsrs	r3, r3, #1
 800c5b6:	441a      	add	r2, r3
		timeout_mclks =
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5be:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3714      	adds	r7, #20
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr

0800c5ce <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b084      	sub	sp, #16
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
 800c5d6:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f7ff ffd6 	bl	800c594 <VL53L1_calc_timeout_mclks>
 800c5e8:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800c5ea:	68f8      	ldr	r0, [r7, #12]
 800c5ec:	f000 f887 	bl	800c6fe <VL53L1_encode_timeout>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800c5f4:	897b      	ldrh	r3, [r7, #10]
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3710      	adds	r7, #16
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800c5fe:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c602:	b087      	sub	sp, #28
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800c60a:	2100      	movs	r1, #0
 800c60c:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800c60e:	f04f 0000 	mov.w	r0, #0
 800c612:	f04f 0100 	mov.w	r1, #0
 800c616:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800c61a:	6879      	ldr	r1, [r7, #4]
 800c61c:	2000      	movs	r0, #0
 800c61e:	4688      	mov	r8, r1
 800c620:	4681      	mov	r9, r0
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	2000      	movs	r0, #0
 800c626:	460c      	mov	r4, r1
 800c628:	4605      	mov	r5, r0
 800c62a:	fb04 f009 	mul.w	r0, r4, r9
 800c62e:	fb08 f105 	mul.w	r1, r8, r5
 800c632:	4401      	add	r1, r0
 800c634:	fba8 2304 	umull	r2, r3, r8, r4
 800c638:	4419      	add	r1, r3
 800c63a:	460b      	mov	r3, r1
 800c63c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800c640:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800c644:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c648:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800c64c:	f143 0b00 	adc.w	fp, r3, #0
 800c650:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800c654:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c658:	f04f 0200 	mov.w	r2, #0
 800c65c:	f04f 0300 	mov.w	r3, #0
 800c660:	0b02      	lsrs	r2, r0, #12
 800c662:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c666:	0b0b      	lsrs	r3, r1, #12
 800c668:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800c670:	697b      	ldr	r3, [r7, #20]
}
 800c672:	4618      	mov	r0, r3
 800c674:	371c      	adds	r7, #28
 800c676:	46bd      	mov	sp, r7
 800c678:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c67c:	4770      	bx	lr
	...

0800c680 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	460b      	mov	r3, r1
 800c68a:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800c690:	2300      	movs	r3, #0
 800c692:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800c694:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800c698:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800c69a:	4413      	add	r3, r2
 800c69c:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	da02      	bge.n	800c6aa <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	60fb      	str	r3, [r7, #12]
 800c6a8:	e005      	b.n	800c6b6 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c6b0:	db01      	blt.n	800c6b6 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800c6b2:	4b05      	ldr	r3, [pc, #20]	; (800c6c8 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 800c6b4:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800c6ba:	68bb      	ldr	r3, [r7, #8]

}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3714      	adds	r7, #20
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr
 800c6c8:	0003ffff 	.word	0x0003ffff

0800c6cc <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	6039      	str	r1, [r7, #0]
 800c6d6:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800c6e0:	88fb      	ldrh	r3, [r7, #6]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f000 f837 	bl	800c756 <VL53L1_decode_timeout>
 800c6e8:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800c6ea:	6839      	ldr	r1, [r7, #0]
 800c6ec:	68f8      	ldr	r0, [r7, #12]
 800c6ee:	f7ff ff86 	bl	800c5fe <VL53L1_calc_timeout_us>
 800c6f2:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800c6f4:	68bb      	ldr	r3, [r7, #8]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800c6fe:	b480      	push	{r7}
 800c700:	b087      	sub	sp, #28
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800c706:	2300      	movs	r3, #0
 800c708:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800c70a:	2300      	movs	r3, #0
 800c70c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c70e:	2300      	movs	r3, #0
 800c710:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d017      	beq.n	800c748 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	3b01      	subs	r3, #1
 800c71c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c71e:	e005      	b.n	800c72c <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	085b      	lsrs	r3, r3, #1
 800c724:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800c726:	89fb      	ldrh	r3, [r7, #14]
 800c728:	3301      	adds	r3, #1
 800c72a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1f4      	bne.n	800c720 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800c736:	89fb      	ldrh	r3, [r7, #14]
 800c738:	021b      	lsls	r3, r3, #8
 800c73a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	b29b      	uxth	r3, r3
 800c740:	b2db      	uxtb	r3, r3
 800c742:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800c744:	4413      	add	r3, r2
 800c746:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800c748:	8afb      	ldrh	r3, [r7, #22]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	371c      	adds	r7, #28
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr

0800c756 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800c756:	b480      	push	{r7}
 800c758:	b085      	sub	sp, #20
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	4603      	mov	r3, r0
 800c75e:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800c760:	2300      	movs	r3, #0
 800c762:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c764:	88fb      	ldrh	r3, [r7, #6]
 800c766:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c768:	88fa      	ldrh	r2, [r7, #6]
 800c76a:	0a12      	lsrs	r2, r2, #8
 800c76c:	b292      	uxth	r2, r2
 800c76e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c770:	3301      	adds	r3, #1
 800c772:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800c774:	68fb      	ldr	r3, [r7, #12]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3714      	adds	r7, #20
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr

0800c782 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b088      	sub	sp, #32
 800c786:	af00      	add	r7, sp, #0
 800c788:	60f8      	str	r0, [r7, #12]
 800c78a:	60b9      	str	r1, [r7, #8]
 800c78c:	607a      	str	r2, [r7, #4]
 800c78e:	807b      	strh	r3, [r7, #2]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c790:	2300      	movs	r3, #0
 800c792:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800c794:	2300      	movs	r3, #0
 800c796:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800c798:	2300      	movs	r3, #0
 800c79a:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800c79c:	2300      	movs	r3, #0
 800c79e:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800c7a0:	887b      	ldrh	r3, [r7, #2]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d102      	bne.n	800c7ac <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800c7a6:	23f1      	movs	r3, #241	; 0xf1
 800c7a8:	77fb      	strb	r3, [r7, #31]
 800c7aa:	e05d      	b.n	800c868 <VL53L1_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 800c7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ae:	799a      	ldrb	r2, [r3, #6]
 800c7b0:	887b      	ldrh	r3, [r7, #2]
 800c7b2:	4611      	mov	r1, r2
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7ff fe5c 	bl	800c472 <VL53L1_calc_macro_period_us>
 800c7ba:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800c7bc:	6979      	ldr	r1, [r7, #20]
 800c7be:	68f8      	ldr	r0, [r7, #12]
 800c7c0:	f7ff fee8 	bl	800c594 <VL53L1_calc_timeout_mclks>
 800c7c4:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	2bff      	cmp	r3, #255	; 0xff
 800c7ca:	d901      	bls.n	800c7d0 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800c7cc:	23ff      	movs	r3, #255	; 0xff
 800c7ce:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800c7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d6:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800c7d8:	6979      	ldr	r1, [r7, #20]
 800c7da:	68b8      	ldr	r0, [r7, #8]
 800c7dc:	f7ff fef7 	bl	800c5ce <VL53L1_calc_encoded_timeout>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c7e4:	8a7b      	ldrh	r3, [r7, #18]
 800c7e6:	0a1b      	lsrs	r3, r3, #8
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800c7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ee:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c7f0:	8a7b      	ldrh	r3, [r7, #18]
 800c7f2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800c7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f6:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800c7f8:	6979      	ldr	r1, [r7, #20]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f7ff fee7 	bl	800c5ce <VL53L1_calc_encoded_timeout>
 800c800:	4603      	mov	r3, r0
 800c802:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c804:	8a7b      	ldrh	r3, [r7, #18]
 800c806:	0a1b      	lsrs	r3, r3, #8
 800c808:	b29b      	uxth	r3, r3
 800c80a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800c80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c810:	8a7b      	ldrh	r3, [r7, #18]
 800c812:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c816:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53L1_calc_macro_period_us(
 800c818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81a:	7a5a      	ldrb	r2, [r3, #9]
 800c81c:	887b      	ldrh	r3, [r7, #2]
 800c81e:	4611      	mov	r1, r2
 800c820:	4618      	mov	r0, r3
 800c822:	f7ff fe26 	bl	800c472 <VL53L1_calc_macro_period_us>
 800c826:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800c828:	6979      	ldr	r1, [r7, #20]
 800c82a:	68b8      	ldr	r0, [r7, #8]
 800c82c:	f7ff fecf 	bl	800c5ce <VL53L1_calc_encoded_timeout>
 800c830:	4603      	mov	r3, r0
 800c832:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c834:	8a7b      	ldrh	r3, [r7, #18]
 800c836:	0a1b      	lsrs	r3, r3, #8
 800c838:	b29b      	uxth	r3, r3
 800c83a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800c83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c840:	8a7b      	ldrh	r3, [r7, #18]
 800c842:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800c844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c846:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53L1_calc_encoded_timeout(
 800c848:	6979      	ldr	r1, [r7, #20]
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f7ff febf 	bl	800c5ce <VL53L1_calc_encoded_timeout>
 800c850:	4603      	mov	r3, r0
 800c852:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c854:	8a7b      	ldrh	r3, [r7, #18]
 800c856:	0a1b      	lsrs	r3, r3, #8
 800c858:	b29b      	uxth	r3, r3
 800c85a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800c85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c860:	8a7b      	ldrh	r3, [r7, #18]
 800c862:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800c864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c866:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800c868:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3720      	adds	r7, #32
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 800c874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c878:	b09e      	sub	sp, #120	; 0x78
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6578      	str	r0, [r7, #84]	; 0x54
 800c87e:	6539      	str	r1, [r7, #80]	; 0x50


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c880:	2300      	movs	r3, #0
 800c882:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 800c886:	f04f 0200 	mov.w	r2, #0
 800c88a:	f04f 0300 	mov.w	r3, #0
 800c88e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800c892:	f04f 0200 	mov.w	r2, #0
 800c896:	f04f 0300 	mov.w	r3, #0
 800c89a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 800c89e:	f04f 0200 	mov.w	r2, #0
 800c8a2:	f04f 0300 	mov.w	r3, #0
 800c8a6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800c8aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8ac:	885b      	ldrh	r3, [r3, #2]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d103      	bne.n	800c8ba <VL53L1_hist_copy_and_scale_ambient_info+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800c8b2:	23f1      	movs	r3, #241	; 0xf1
 800c8b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800c8b8:	e0d6      	b.n	800ca68 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800c8ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8bc:	785b      	ldrb	r3, [r3, #1]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f000 80d2 	beq.w	800ca68 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800c8c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8c6:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	f040 80cd 	bne.w	800ca68 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800c8ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	643b      	str	r3, [r7, #64]	; 0x40
 800c8d8:	647a      	str	r2, [r7, #68]	; 0x44
 800c8da:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c8de:	460b      	mov	r3, r1
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	623b      	str	r3, [r7, #32]
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	f143 0300 	adc.w	r3, r3, #0
 800c8ea:	627b      	str	r3, [r7, #36]	; 0x24
 800c8ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c8f0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800c8f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8f6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800c900:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800c902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c904:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c908:	4602      	mov	r2, r0
 800c90a:	fb02 f203 	mul.w	r2, r2, r3
 800c90e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c910:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800c914:	fb01 f303 	mul.w	r3, r1, r3
 800c918:	441a      	add	r2, r3
 800c91a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c91c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c91e:	fba3 4501 	umull	r4, r5, r3, r1
 800c922:	1953      	adds	r3, r2, r5
 800c924:	461d      	mov	r5, r3
 800c926:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 800c92a:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800c92e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	2200      	movs	r2, #0
 800c934:	63bb      	str	r3, [r7, #56]	; 0x38
 800c936:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c938:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c93c:	460b      	mov	r3, r1
 800c93e:	3301      	adds	r3, #1
 800c940:	61bb      	str	r3, [r7, #24]
 800c942:	4613      	mov	r3, r2
 800c944:	f143 0300 	adc.w	r3, r3, #0
 800c948:	61fb      	str	r3, [r7, #28]
 800c94a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c94e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800c952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c954:	885b      	ldrh	r3, [r3, #2]
 800c956:	b29b      	uxth	r3, r3
 800c958:	2200      	movs	r2, #0
 800c95a:	633b      	str	r3, [r7, #48]	; 0x30
 800c95c:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 800c95e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c960:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c964:	4622      	mov	r2, r4
 800c966:	fb02 f203 	mul.w	r2, r2, r3
 800c96a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c96c:	4629      	mov	r1, r5
 800c96e:	fb01 f303 	mul.w	r3, r1, r3
 800c972:	441a      	add	r2, r3
 800c974:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c976:	4621      	mov	r1, r4
 800c978:	fba3 ab01 	umull	sl, fp, r3, r1
 800c97c:	eb02 030b 	add.w	r3, r2, fp
 800c980:	469b      	mov	fp, r3
 800c982:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800c986:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800c98a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	17da      	asrs	r2, r3, #31
 800c990:	62bb      	str	r3, [r7, #40]	; 0x28
 800c992:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 800c994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c996:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800c99a:	4622      	mov	r2, r4
 800c99c:	fb02 f203 	mul.w	r2, r2, r3
 800c9a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9a2:	4629      	mov	r1, r5
 800c9a4:	fb01 f303 	mul.w	r3, r1, r3
 800c9a8:	4413      	add	r3, r2
 800c9aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	fba2 8901 	umull	r8, r9, r2, r1
 800c9b2:	444b      	add	r3, r9
 800c9b4:	4699      	mov	r9, r3
 800c9b6:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 800c9ba:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 800c9be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800c9c2:	0fd9      	lsrs	r1, r3, #31
 800c9c4:	2000      	movs	r0, #0
 800c9c6:	6139      	str	r1, [r7, #16]
 800c9c8:	6178      	str	r0, [r7, #20]
 800c9ca:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c9ce:	4621      	mov	r1, r4
 800c9d0:	1889      	adds	r1, r1, r2
 800c9d2:	60b9      	str	r1, [r7, #8]
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	eb43 0101 	adc.w	r1, r3, r1
 800c9da:	60f9      	str	r1, [r7, #12]
 800c9dc:	f04f 0200 	mov.w	r2, #0
 800c9e0:	f04f 0300 	mov.w	r3, #0
 800c9e4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c9e8:	4621      	mov	r1, r4
 800c9ea:	084a      	lsrs	r2, r1, #1
 800c9ec:	4629      	mov	r1, r5
 800c9ee:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800c9f2:	4629      	mov	r1, r5
 800c9f4:	104b      	asrs	r3, r1, #1
 800c9f6:	4610      	mov	r0, r2
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c9fe:	1814      	adds	r4, r2, r0
 800ca00:	603c      	str	r4, [r7, #0]
 800ca02:	414b      	adcs	r3, r1
 800ca04:	607b      	str	r3, [r7, #4]
 800ca06:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ca0a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 800ca0e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800ca12:	4313      	orrs	r3, r2
 800ca14:	d009      	beq.n	800ca2a <VL53L1_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800ca16:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800ca1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ca1e:	f7f4 f89b 	bl	8000b58 <__aeabi_ldivmod>
 800ca22:	4602      	mov	r2, r0
 800ca24:	460b      	mov	r3, r1
 800ca26:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800ca2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ca2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca2e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53L1_p_004 =
					podata->ambient_events_sum;
 800ca32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca34:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53L1_p_004 =
 800ca38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca3a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 +=
 800ca3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800ca44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca46:	7852      	ldrb	r2, [r2, #1]
 800ca48:	0852      	lsrs	r2, r2, #1
 800ca4a:	b2d2      	uxtb	r2, r2
			podata->VL53L1_p_004 +=
 800ca4c:	441a      	add	r2, r3
 800ca4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 /=
 800ca54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800ca5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca5c:	7852      	ldrb	r2, [r2, #1]
			podata->VL53L1_p_004 /=
 800ca5e:	fb93 f2f2 	sdiv	r2, r3, r2
 800ca62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800ca68:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3778      	adds	r7, #120	; 0x78
 800ca70:	46bd      	mov	sp, r7
 800ca72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ca76 <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800ca76:	b480      	push	{r7}
 800ca78:	b087      	sub	sp, #28
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
 800ca7e:	6039      	str	r1, [r7, #0]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	3318      	adds	r3, #24
 800ca84:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800ca86:	2300      	movs	r3, #0
 800ca88:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	amb_thresh_low  = 1024 *
 800ca98:	029b      	lsls	r3, r3, #10
 800ca9a:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	amb_thresh_high = 1024 *
 800caa2:	029b      	lsls	r3, r3, #10
 800caa4:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800caac:	f003 0301 	and.w	r3, r3, #1
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f040 8095 	bne.w	800cbe0 <VL53L1_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		pdata->bin_seq[5] =
 800cabc:	091b      	lsrs	r3, r3, #4
 800cabe:	b2da      	uxtb	r2, r3
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800caca:	f003 030f 	and.w	r3, r3, #15
 800cace:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
		pdata->bin_seq[3] =
 800cada:	091b      	lsrs	r3, r3, #4
 800cadc:	b2da      	uxtb	r2, r3
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800cae8:	f003 030f 	and.w	r3, r3, #15
 800caec:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
		pdata->bin_seq[1] =
 800caf8:	091b      	lsrs	r3, r3, #4
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800cb06:	f003 030f 	and.w	r3, r3, #15
 800cb0a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cb16:	68ba      	ldr	r2, [r7, #8]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	da2c      	bge.n	800cb76 <VL53L1_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			pdata->bin_seq[5] =
 800cb22:	091b      	lsrs	r3, r3, #4
 800cb24:	b2da      	uxtb	r2, r3
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			& 0x0F;
 800cb30:	f003 030f 	and.w	r3, r3, #15
 800cb34:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			pdata->bin_seq[3] =
 800cb40:	091b      	lsrs	r3, r3, #4
 800cb42:	b2da      	uxtb	r2, r3
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			& 0x0F;
 800cb4e:	f003 030f 	and.w	r3, r3, #15
 800cb52:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			pdata->bin_seq[1] =
 800cb5e:	091b      	lsrs	r3, r3, #4
 800cb60:	b2da      	uxtb	r2, r3
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			& 0x0F;
 800cb6c:	f003 030f 	and.w	r3, r3, #15
 800cb70:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cb7c:	68fa      	ldr	r2, [r7, #12]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	f340 80c2 	ble.w	800cd08 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[5] =
 800cb8a:	091b      	lsrs	r3, r3, #4
 800cb8c:	b2da      	uxtb	r2, r3
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 800cb98:	f003 030f 	and.w	r3, r3, #15
 800cb9c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			pdata->bin_seq[3] =
 800cba8:	091b      	lsrs	r3, r3, #4
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			& 0x0F;
 800cbb6:	f003 030f 	and.w	r3, r3, #15
 800cbba:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			pdata->bin_seq[1] =
 800cbc6:	091b      	lsrs	r3, r3, #4
 800cbc8:	b2da      	uxtb	r2, r3
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 800cbd4:	f003 030f 	and.w	r3, r3, #15
 800cbd8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	731a      	strb	r2, [r3, #12]
 800cbde:	e093      	b.n	800cd08 <VL53L1_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
			& 0x0F;
 800cbe6:	f003 030f 	and.w	r3, r3, #15
 800cbea:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
			& 0x0F;
 800cbf6:	f003 030f 	and.w	r3, r3, #15
 800cbfa:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		pdata->bin_seq[3] =
 800cc06:	091b      	lsrs	r3, r3, #4
 800cc08:	b2da      	uxtb	r2, r3
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800cc14:	f003 030f 	and.w	r3, r3, #15
 800cc18:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
		pdata->bin_seq[1] =
 800cc24:	091b      	lsrs	r3, r3, #4
 800cc26:	b2da      	uxtb	r2, r3
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
			& 0x0F;
 800cc32:	f003 030f 	and.w	r3, r3, #15
 800cc36:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cc42:	68ba      	ldr	r2, [r7, #8]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	da2c      	bge.n	800cca2 <VL53L1_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			pdata->bin_seq[5] =
 800cc4e:	091b      	lsrs	r3, r3, #4
 800cc50:	b2da      	uxtb	r2, r3
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			& 0x0F;
 800cc5c:	f003 030f 	and.w	r3, r3, #15
 800cc60:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			pdata->bin_seq[3] =
 800cc6c:	091b      	lsrs	r3, r3, #4
 800cc6e:	b2da      	uxtb	r2, r3
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			& 0x0F;
 800cc7a:	f003 030f 	and.w	r3, r3, #15
 800cc7e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			pdata->bin_seq[1] =
 800cc8a:	091b      	lsrs	r3, r3, #4
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			& 0x0F;
 800cc98:	f003 030f 	and.w	r3, r3, #15
 800cc9c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cca8:	68fa      	ldr	r2, [r7, #12]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	dd2c      	ble.n	800cd08 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[5] =
 800ccb4:	091b      	lsrs	r3, r3, #4
 800ccb6:	b2da      	uxtb	r2, r3
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 800ccc2:	f003 030f 	and.w	r3, r3, #15
 800ccc6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[3] =
 800ccd2:	091b      	lsrs	r3, r3, #4
 800ccd4:	b2da      	uxtb	r2, r3
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 800cce0:	f003 030f 	and.w	r3, r3, #15
 800cce4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[1] =
 800ccf0:	091b      	lsrs	r3, r3, #4
 800ccf2:	b2da      	uxtb	r2, r3
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 800ccfe:	f003 030f 	and.w	r3, r3, #15
 800cd02:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800cd08:	2300      	movs	r3, #0
 800cd0a:	75fb      	strb	r3, [r7, #23]
 800cd0c:	e007      	b.n	800cd1e <VL53L1_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800cd0e:	7dfb      	ldrb	r3, [r7, #23]
 800cd10:	683a      	ldr	r2, [r7, #0]
 800cd12:	4413      	add	r3, r2
 800cd14:	2201      	movs	r2, #1
 800cd16:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800cd18:	7dfb      	ldrb	r3, [r7, #23]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	75fb      	strb	r3, [r7, #23]
 800cd1e:	7dfb      	ldrb	r3, [r7, #23]
 800cd20:	2b05      	cmp	r3, #5
 800cd22:	d9f4      	bls.n	800cd0e <VL53L1_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800cd24:	bf00      	nop
 800cd26:	bf00      	nop
 800cd28:	371c      	adds	r7, #28
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr

0800cd32 <VL53L1_hist_phase_consistency_check>:
VL53L1_Error  VL53L1_hist_phase_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_results_t      *prange_curr)
{
 800cd32:	b590      	push	{r4, r7, lr}
 800cd34:	b093      	sub	sp, #76	; 0x4c
 800cd36:	af04      	add	r7, sp, #16
 800cd38:	60f8      	str	r0, [r7, #12]
 800cd3a:	60b9      	str	r1, [r7, #8]
 800cd3c:	607a      	str	r2, [r7, #4]
 800cd3e:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cd40:	2300      	movs	r3, #0
 800cd42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	3318      	adds	r3, #24
 800cd4a:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800cd52:	2300      	movs	r3, #0
 800cd54:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800cd60:	2300      	movs	r3, #0
 800cd62:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800cd64:	2300      	movs	r3, #0
 800cd66:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53L1_DeviceError  range_status = 0;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800cd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6e:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 800cd72:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800cd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd78:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800cd7c:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800cd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd80:	f8b3 327e 	ldrh.w	r3, [r3, #638]	; 0x27e
 800cd84:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800cd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd88:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 800cd8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800cd90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cd94:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 800cd96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cd98:	021b      	lsls	r3, r3, #8
 800cd9a:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	785b      	ldrb	r3, [r3, #1]
 800cda0:	2b07      	cmp	r3, #7
 800cda2:	d006      	beq.n	800cdb2 <VL53L1_hist_phase_consistency_check+0x80>
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	785b      	ldrb	r3, [r3, #1]
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 800cda8:	2b08      	cmp	r3, #8
 800cdaa:	d002      	beq.n	800cdb2 <VL53L1_hist_phase_consistency_check+0x80>
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800cdac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cdb0:	e0ec      	b.n	800cf8c <VL53L1_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800cdb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d102      	bne.n	800cdbe <VL53L1_hist_phase_consistency_check+0x8c>
		return status;
 800cdb8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cdbc:	e0e6      	b.n	800cf8c <VL53L1_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800cdc4:	e0d9      	b.n	800cf7a <VL53L1_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800cdc6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800cdca:	683a      	ldr	r2, [r7, #0]
 800cdcc:	214c      	movs	r1, #76	; 0x4c
 800cdce:	fb01 f303 	mul.w	r3, r1, r3
 800cdd2:	4413      	add	r3, r2
 800cdd4:	335e      	adds	r3, #94	; 0x5e
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	2b09      	cmp	r3, #9
 800cdda:	d00b      	beq.n	800cdf4 <VL53L1_hist_phase_consistency_check+0xc2>
			VL53L1_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53L1_p_002[lc].range_status ==
 800cddc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800cde0:	683a      	ldr	r2, [r7, #0]
 800cde2:	214c      	movs	r1, #76	; 0x4c
 800cde4:	fb01 f303 	mul.w	r3, r1, r3
 800cde8:	4413      	add	r3, r2
 800cdea:	335e      	adds	r3, #94	; 0x5e
 800cdec:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800cdee:	2b13      	cmp	r3, #19
 800cdf0:	f040 80bd 	bne.w	800cf6e <VL53L1_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	795b      	ldrb	r3, [r3, #5]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10a      	bne.n	800ce12 <VL53L1_hist_phase_consistency_check+0xe0>
			prange_curr->VL53L1_p_002[lc].range_status =
 800cdfc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ce00:	683a      	ldr	r2, [r7, #0]
 800ce02:	214c      	movs	r1, #76	; 0x4c
 800ce04:	fb01 f303 	mul.w	r3, r1, r3
 800ce08:	4413      	add	r3, r2
 800ce0a:	335e      	adds	r3, #94	; 0x5e
 800ce0c:	2217      	movs	r2, #23
 800ce0e:	701a      	strb	r2, [r3, #0]
 800ce10:	e009      	b.n	800ce26 <VL53L1_hist_phase_consistency_check+0xf4>
			VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53L1_p_002[lc].range_status =
 800ce12:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ce16:	683a      	ldr	r2, [r7, #0]
 800ce18:	214c      	movs	r1, #76	; 0x4c
 800ce1a:	fb01 f303 	mul.w	r3, r1, r3
 800ce1e:	4413      	add	r3, r2
 800ce20:	335e      	adds	r3, #94	; 0x5e
 800ce22:	2207      	movs	r2, #7
 800ce24:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800ce26:	2300      	movs	r3, #0
 800ce28:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800ce2c:	e097      	b.n	800cf5e <VL53L1_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800ce2e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ce32:	683a      	ldr	r2, [r7, #0]
 800ce34:	214c      	movs	r1, #76	; 0x4c
 800ce36:	fb01 f303 	mul.w	r3, r1, r3
 800ce3a:	4413      	add	r3, r2
 800ce3c:	3354      	adds	r3, #84	; 0x54
 800ce3e:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 800ce40:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	4613      	mov	r3, r2
 800ce48:	005b      	lsls	r3, r3, #1
 800ce4a:	4413      	add	r3, r2
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	4403      	add	r3, r0
 800ce50:	3310      	adds	r3, #16
 800ce52:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800ce54:	4299      	cmp	r1, r3
 800ce56:	d915      	bls.n	800ce84 <VL53L1_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014 -
 800ce58:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ce5c:	683a      	ldr	r2, [r7, #0]
 800ce5e:	214c      	movs	r1, #76	; 0x4c
 800ce60:	fb01 f303 	mul.w	r3, r1, r3
 800ce64:	4413      	add	r3, r2
 800ce66:	3354      	adds	r3, #84	; 0x54
 800ce68:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014;
 800ce6a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	4613      	mov	r3, r2
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	4413      	add	r3, r2
 800ce76:	009b      	lsls	r3, r3, #2
 800ce78:	4403      	add	r3, r0
 800ce7a:	3310      	adds	r3, #16
 800ce7c:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800ce7e:	1acb      	subs	r3, r1, r3
 800ce80:	867b      	strh	r3, [r7, #50]	; 0x32
 800ce82:	e014      	b.n	800ceae <VL53L1_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53L1_p_002[p].VL53L1_p_014 -
 800ce84:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800ce88:	6879      	ldr	r1, [r7, #4]
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	005b      	lsls	r3, r3, #1
 800ce8e:	4413      	add	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	440b      	add	r3, r1
 800ce94:	3310      	adds	r3, #16
 800ce96:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014;
 800ce98:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ce9c:	6839      	ldr	r1, [r7, #0]
 800ce9e:	204c      	movs	r0, #76	; 0x4c
 800cea0:	fb00 f303 	mul.w	r3, r0, r3
 800cea4:	440b      	add	r3, r1
 800cea6:	3354      	adds	r3, #84	; 0x54
 800cea8:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800ceaa:	1ad3      	subs	r3, r2, r3
 800ceac:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800ceae:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ceb0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d24e      	bcs.n	800cf54 <VL53L1_hist_phase_consistency_check+0x222>





				if (status == VL53L1_ERROR_NONE)
 800ceb6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d125      	bne.n	800cf0a <VL53L1_hist_phase_consistency_check+0x1d8>
					status =
					VL53L1_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53L1_p_002[p]),
 800cebe:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53L1_hist_events_consistency_check(
 800cec2:	4613      	mov	r3, r2
 800cec4:	005b      	lsls	r3, r3, #1
 800cec6:	4413      	add	r3, r2
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	3308      	adds	r3, #8
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53L1_p_002[lc]),
 800ced0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_events_consistency_check(
 800ced4:	224c      	movs	r2, #76	; 0x4c
 800ced6:	fb02 f303 	mul.w	r3, r2, r3
 800ceda:	3310      	adds	r3, #16
 800cedc:	683a      	ldr	r2, [r7, #0]
 800cede:	4413      	add	r3, r2
 800cee0:	3304      	adds	r3, #4
 800cee2:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800cee4:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800cee8:	f107 0217 	add.w	r2, r7, #23
 800ceec:	9203      	str	r2, [sp, #12]
 800ceee:	f107 021c 	add.w	r2, r7, #28
 800cef2:	9202      	str	r2, [sp, #8]
 800cef4:	f107 0218 	add.w	r2, r7, #24
 800cef8:	9201      	str	r2, [sp, #4]
 800cefa:	9300      	str	r3, [sp, #0]
 800cefc:	4623      	mov	r3, r4
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	f000 f848 	bl	800cf94 <VL53L1_hist_events_consistency_check>
 800cf04:	4603      	mov	r3, r0
 800cf06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53L1_ERROR_NONE &&
 800cf0a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d115      	bne.n	800cf3e <VL53L1_hist_phase_consistency_check+0x20c>
					range_status ==
 800cf12:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53L1_ERROR_NONE &&
 800cf14:	2b09      	cmp	r3, #9
 800cf16:	d112      	bne.n	800cf3e <VL53L1_hist_phase_consistency_check+0x20c>
					VL53L1_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53L1_hist_merged_pulse_check(
 800cf18:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53L1_p_002[lc]),
 800cf1c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_merged_pulse_check(
 800cf20:	224c      	movs	r2, #76	; 0x4c
 800cf22:	fb02 f303 	mul.w	r3, r2, r3
 800cf26:	3310      	adds	r3, #16
 800cf28:	683a      	ldr	r2, [r7, #0]
 800cf2a:	4413      	add	r3, r2
 800cf2c:	3304      	adds	r3, #4
 800cf2e:	f107 0217 	add.w	r2, r7, #23
 800cf32:	4619      	mov	r1, r3
 800cf34:	f000 fb44 	bl	800d5c0 <VL53L1_hist_merged_pulse_check>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53L1_p_002[lc].range_status =
 800cf3e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800cf42:	7df8      	ldrb	r0, [r7, #23]
 800cf44:	683a      	ldr	r2, [r7, #0]
 800cf46:	214c      	movs	r1, #76	; 0x4c
 800cf48:	fb01 f303 	mul.w	r3, r1, r3
 800cf4c:	4413      	add	r3, r2
 800cf4e:	335e      	adds	r3, #94	; 0x5e
 800cf50:	4602      	mov	r2, r0
 800cf52:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800cf54:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800cf58:	3301      	adds	r3, #1
 800cf5a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	795b      	ldrb	r3, [r3, #5]
 800cf62:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800cf66:	429a      	cmp	r2, r3
 800cf68:	f4ff af61 	bcc.w	800ce2e <VL53L1_hist_phase_consistency_check+0xfc>
 800cf6c:	e000      	b.n	800cf70 <VL53L1_hist_phase_consistency_check+0x23e>
			continue;
 800cf6e:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800cf70:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800cf74:	3301      	adds	r3, #1
 800cf76:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	7c9b      	ldrb	r3, [r3, #18]
 800cf7e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800cf82:	429a      	cmp	r2, r3
 800cf84:	f4ff af1f 	bcc.w	800cdc6 <VL53L1_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800cf88:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	373c      	adds	r7, #60	; 0x3c
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd90      	pop	{r4, r7, pc}

0800cf94 <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 800cf94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf98:	b0d4      	sub	sp, #336	; 0x150
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800cfa0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800cfaa:	460b      	mov	r3, r1
 800cfac:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800cfb6:	f04f 0200 	mov.w	r2, #0
 800cfba:	f04f 0300 	mov.w	r3, #0
 800cfbe:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800cfc2:	f04f 0200 	mov.w	r2, #0
 800cfc6:	f04f 0300 	mov.w	r3, #0
 800cfca:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800cfce:	f04f 0200 	mov.w	r2, #0
 800cfd2:	f04f 0300 	mov.w	r3, #0
 800cfd6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800cfda:	f04f 0200 	mov.w	r2, #0
 800cfde:	f04f 0300 	mov.w	r3, #0
 800cfe2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800cfe6:	f04f 0200 	mov.w	r2, #0
 800cfea:	f04f 0300 	mov.w	r3, #0
 800cfee:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800cff2:	f04f 0200 	mov.w	r2, #0
 800cff6:	f04f 0300 	mov.w	r3, #0
 800cffa:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800cffe:	f04f 0200 	mov.w	r2, #0
 800d002:	f04f 0300 	mov.w	r3, #0
 800d006:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800d00a:	f04f 0200 	mov.w	r2, #0
 800d00e:	f04f 0300 	mov.w	r3, #0
 800d012:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800d016:	2300      	movs	r3, #0
 800d018:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800d01c:	2300      	movs	r3, #0
 800d01e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800d022:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800d026:	2b00      	cmp	r3, #0
 800d028:	d106      	bne.n	800d038 <VL53L1_hist_events_consistency_check+0xa4>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800d02a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800d02e:	2209      	movs	r2, #9
 800d030:	701a      	strb	r2, [r3, #0]
		return status;
 800d032:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800d036:	e2bd      	b.n	800d5b4 <VL53L1_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800d038:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d03c:	689b      	ldr	r3, [r3, #8]
 800d03e:	2200      	movs	r2, #0
 800d040:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d044:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800d048:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d04c:	460b      	mov	r3, r1
 800d04e:	3301      	adds	r3, #1
 800d050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d054:	4613      	mov	r3, r2
 800d056:	f143 0300 	adc.w	r3, r3, #0
 800d05a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d05e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800d062:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800d066:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d06a:	885b      	ldrh	r3, [r3, #2]
 800d06c:	b29b      	uxth	r3, r3
 800d06e:	2200      	movs	r2, #0
 800d070:	469a      	mov	sl, r3
 800d072:	4693      	mov	fp, r2
 800d074:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800d078:	fb0a f203 	mul.w	r2, sl, r3
 800d07c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d080:	fb0b f303 	mul.w	r3, fp, r3
 800d084:	441a      	add	r2, r3
 800d086:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d08a:	fba3 450a 	umull	r4, r5, r3, sl
 800d08e:	1953      	adds	r3, r2, r5
 800d090:	461d      	mov	r5, r3
 800d092:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800d096:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800d09a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d09e:	699b      	ldr	r3, [r3, #24]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d0a6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d0aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	f143 0300 	adc.w	r3, r3, #0
 800d0bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d0c0:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800d0c4:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 800d0c8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d0cc:	8adb      	ldrh	r3, [r3, #22]
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d0d6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d0da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d0de:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800d0e2:	4622      	mov	r2, r4
 800d0e4:	fb02 f203 	mul.w	r2, r2, r3
 800d0e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d0ec:	4629      	mov	r1, r5
 800d0ee:	fb01 f303 	mul.w	r3, r1, r3
 800d0f2:	441a      	add	r2, r3
 800d0f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d0f8:	4621      	mov	r1, r4
 800d0fa:	fba3 8901 	umull	r8, r9, r3, r1
 800d0fe:	eb02 0309 	add.w	r3, r2, r9
 800d102:	4699      	mov	r9, r3
 800d104:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800d108:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800d10c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d110:	f04f 0000 	mov.w	r0, #0
 800d114:	f04f 0100 	mov.w	r1, #0
 800d118:	0319      	lsls	r1, r3, #12
 800d11a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800d11e:	0310      	lsls	r0, r2, #12
 800d120:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	events_scaler += (tmpc/2);
 800d124:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800d128:	0fd9      	lsrs	r1, r3, #31
 800d12a:	2000      	movs	r0, #0
 800d12c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800d130:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800d134:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800d138:	4621      	mov	r1, r4
 800d13a:	1889      	adds	r1, r1, r2
 800d13c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800d140:	4629      	mov	r1, r5
 800d142:	eb43 0101 	adc.w	r1, r3, r1
 800d146:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800d14a:	f04f 0200 	mov.w	r2, #0
 800d14e:	f04f 0300 	mov.w	r3, #0
 800d152:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800d156:	4621      	mov	r1, r4
 800d158:	084a      	lsrs	r2, r1, #1
 800d15a:	4629      	mov	r1, r5
 800d15c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800d160:	4629      	mov	r1, r5
 800d162:	104b      	asrs	r3, r1, #1
 800d164:	4610      	mov	r0, r2
 800d166:	4619      	mov	r1, r3
 800d168:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d16c:	1814      	adds	r4, r2, r0
 800d16e:	67bc      	str	r4, [r7, #120]	; 0x78
 800d170:	414b      	adcs	r3, r1
 800d172:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d174:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800d178:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	if (tmpc != 0)
 800d17c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800d180:	4313      	orrs	r3, r2
 800d182:	d009      	beq.n	800d198 <VL53L1_hist_events_consistency_check+0x204>
		events_scaler = do_division_s(events_scaler, tmpc);
 800d184:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800d188:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800d18c:	f7f3 fce4 	bl	8000b58 <__aeabi_ldivmod>
 800d190:	4602      	mov	r2, r0
 800d192:	460b      	mov	r3, r1
 800d194:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148

	events_scaler_sq  = events_scaler * events_scaler;
 800d198:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800d19c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d1a0:	fb03 f102 	mul.w	r1, r3, r2
 800d1a4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800d1a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d1ac:	fb02 f303 	mul.w	r3, r2, r3
 800d1b0:	18ca      	adds	r2, r1, r3
 800d1b2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d1b6:	fba3 1303 	umull	r1, r3, r3, r3
 800d1ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d1be:	460b      	mov	r3, r1
 800d1c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d1c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d1c8:	18d3      	adds	r3, r2, r3
 800d1ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d1ce:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800d1d2:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800d1d6:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800d1da:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d1de:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800d1e2:	6739      	str	r1, [r7, #112]	; 0x70
 800d1e4:	f143 0300 	adc.w	r3, r3, #0
 800d1e8:	677b      	str	r3, [r7, #116]	; 0x74
 800d1ea:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800d1ee:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800d1f2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	da08      	bge.n	800d20c <VL53L1_hist_events_consistency_check+0x278>
 800d1fa:	f640 71ff 	movw	r1, #4095	; 0xfff
 800d1fe:	1851      	adds	r1, r2, r1
 800d200:	66b9      	str	r1, [r7, #104]	; 0x68
 800d202:	f143 0300 	adc.w	r3, r3, #0
 800d206:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d208:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d20c:	f04f 0000 	mov.w	r0, #0
 800d210:	f04f 0100 	mov.w	r1, #0
 800d214:	0b10      	lsrs	r0, r2, #12
 800d216:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800d21a:	1319      	asrs	r1, r3, #12
 800d21c:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53L1_p_021;
 800d220:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d226:	2200      	movs	r2, #0
 800d228:	663b      	str	r3, [r7, #96]	; 0x60
 800d22a:	667a      	str	r2, [r7, #100]	; 0x64
 800d22c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800d230:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 800d234:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23a:	2200      	movs	r2, #0
 800d23c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d240:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800d244:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800d248:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800d24c:	4621      	mov	r1, r4
 800d24e:	1a51      	subs	r1, r2, r1
 800d250:	65b9      	str	r1, [r7, #88]	; 0x58
 800d252:	4629      	mov	r1, r5
 800d254:	eb63 0301 	sbc.w	r3, r3, r1
 800d258:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d25a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800d25e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800d262:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800d266:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d26a:	fb03 f102 	mul.w	r1, r3, r2
 800d26e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800d272:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d276:	fb02 f303 	mul.w	r3, r2, r3
 800d27a:	4419      	add	r1, r3
 800d27c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800d280:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d284:	fba2 2303 	umull	r2, r3, r2, r3
 800d288:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d28c:	4613      	mov	r3, r2
 800d28e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d296:	18cb      	adds	r3, r1, r3
 800d298:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d29c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800d2a0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800d2a4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800d2a8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800d2ac:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800d2b0:	6539      	str	r1, [r7, #80]	; 0x50
 800d2b2:	f143 0300 	adc.w	r3, r3, #0
 800d2b6:	657b      	str	r3, [r7, #84]	; 0x54
 800d2b8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800d2bc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800d2c0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	da08      	bge.n	800d2da <VL53L1_hist_events_consistency_check+0x346>
 800d2c8:	f640 71ff 	movw	r1, #4095	; 0xfff
 800d2cc:	1851      	adds	r1, r2, r1
 800d2ce:	64b9      	str	r1, [r7, #72]	; 0x48
 800d2d0:	f143 0300 	adc.w	r3, r3, #0
 800d2d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d2d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d2da:	f04f 0000 	mov.w	r0, #0
 800d2de:	f04f 0100 	mov.w	r1, #0
 800d2e2:	0b10      	lsrs	r0, r2, #12
 800d2e4:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800d2e8:	1319      	asrs	r1, r3, #12
 800d2ea:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800d2ee:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d2f2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 800d2f6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d2fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d302:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d306:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d30a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800d30e:	4622      	mov	r2, r4
 800d310:	fb02 f203 	mul.w	r2, r2, r3
 800d314:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d318:	4629      	mov	r1, r5
 800d31a:	fb01 f303 	mul.w	r3, r1, r3
 800d31e:	441a      	add	r2, r3
 800d320:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d324:	4621      	mov	r1, r4
 800d326:	fba3 1301 	umull	r1, r3, r3, r1
 800d32a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d32e:	460b      	mov	r3, r1
 800d330:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d338:	18d3      	adds	r3, r2, r3
 800d33a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d33e:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800d342:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800d346:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800d34a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d34e:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800d352:	6439      	str	r1, [r7, #64]	; 0x40
 800d354:	f143 0300 	adc.w	r3, r3, #0
 800d358:	647b      	str	r3, [r7, #68]	; 0x44
 800d35a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d35e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800d362:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d366:	2b00      	cmp	r3, #0
 800d368:	da08      	bge.n	800d37c <VL53L1_hist_events_consistency_check+0x3e8>
 800d36a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800d36e:	1851      	adds	r1, r2, r1
 800d370:	63b9      	str	r1, [r7, #56]	; 0x38
 800d372:	f143 0300 	adc.w	r3, r3, #0
 800d376:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d378:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d37c:	f04f 0000 	mov.w	r0, #0
 800d380:	f04f 0100 	mov.w	r1, #0
 800d384:	0b10      	lsrs	r0, r2, #12
 800d386:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800d38a:	1319      	asrs	r1, r3, #12
 800d38c:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800d390:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d394:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 800d398:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d3a4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3ac:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800d3b0:	4622      	mov	r2, r4
 800d3b2:	fb02 f203 	mul.w	r2, r2, r3
 800d3b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d3ba:	4629      	mov	r1, r5
 800d3bc:	fb01 f303 	mul.w	r3, r1, r3
 800d3c0:	441a      	add	r2, r3
 800d3c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d3c6:	4621      	mov	r1, r4
 800d3c8:	fba3 1301 	umull	r1, r3, r3, r1
 800d3cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d3d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d3da:	18d3      	adds	r3, r2, r3
 800d3dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d3e0:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800d3e4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800d3e8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800d3ec:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d3f0:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800d3f4:	6339      	str	r1, [r7, #48]	; 0x30
 800d3f6:	f143 0300 	adc.w	r3, r3, #0
 800d3fa:	637b      	str	r3, [r7, #52]	; 0x34
 800d3fc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d400:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800d404:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d408:	4610      	mov	r0, r2
 800d40a:	4619      	mov	r1, r3
 800d40c:	2900      	cmp	r1, #0
 800d40e:	da08      	bge.n	800d422 <VL53L1_hist_events_consistency_check+0x48e>
 800d410:	f640 73ff 	movw	r3, #4095	; 0xfff
 800d414:	18c3      	adds	r3, r0, r3
 800d416:	62bb      	str	r3, [r7, #40]	; 0x28
 800d418:	f141 0300 	adc.w	r3, r1, #0
 800d41c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d41e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d422:	f04f 0200 	mov.w	r2, #0
 800d426:	f04f 0300 	mov.w	r3, #0
 800d42a:	0b02      	lsrs	r2, r0, #12
 800d42c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800d430:	130b      	asrs	r3, r1, #12
 800d432:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800d436:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d43a:	1c91      	adds	r1, r2, #2
 800d43c:	6239      	str	r1, [r7, #32]
 800d43e:	f143 0300 	adc.w	r3, r3, #0
 800d442:	627b      	str	r3, [r7, #36]	; 0x24
 800d444:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d448:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800d44c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d450:	2b00      	cmp	r3, #0
 800d452:	da06      	bge.n	800d462 <VL53L1_hist_events_consistency_check+0x4ce>
 800d454:	1cd1      	adds	r1, r2, #3
 800d456:	61b9      	str	r1, [r7, #24]
 800d458:	f143 0300 	adc.w	r3, r3, #0
 800d45c:	61fb      	str	r3, [r7, #28]
 800d45e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d462:	f04f 0000 	mov.w	r0, #0
 800d466:	f04f 0100 	mov.w	r1, #0
 800d46a:	0890      	lsrs	r0, r2, #2
 800d46c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800d470:	1099      	asrs	r1, r3, #2
 800d472:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53L1_p_020;
 800d476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d47a:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800d47c:	2200      	movs	r2, #0
 800d47e:	613b      	str	r3, [r7, #16]
 800d480:	617a      	str	r2, [r7, #20]
 800d482:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d486:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800d48a:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800d48e:	1c91      	adds	r1, r2, #2
 800d490:	60b9      	str	r1, [r7, #8]
 800d492:	f143 0300 	adc.w	r3, r3, #0
 800d496:	60fb      	str	r3, [r7, #12]
 800d498:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d49c:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800d4a0:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	da06      	bge.n	800d4b6 <VL53L1_hist_events_consistency_check+0x522>
 800d4a8:	1cd1      	adds	r1, r2, #3
 800d4aa:	6039      	str	r1, [r7, #0]
 800d4ac:	f143 0300 	adc.w	r3, r3, #0
 800d4b0:	607b      	str	r3, [r7, #4]
 800d4b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4b6:	f04f 0000 	mov.w	r0, #0
 800d4ba:	f04f 0100 	mov.w	r1, #0
 800d4be:	0890      	lsrs	r0, r2, #2
 800d4c0:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800d4c4:	1099      	asrs	r1, r3, #2
 800d4c6:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53L1_p_021 +
 800d4ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4ce:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800d4d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53L1_p_021 +
 800d4d4:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800d4d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800d4da:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800d4dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800d4e0:	4413      	add	r3, r2
 800d4e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 800d4e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d4ea:	011b      	lsls	r3, r3, #4
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f002 f8c6 	bl	800f67e <VL53L1_isqrt>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	461a      	mov	r2, r3
	*pevents_tolerance =
 800d4f6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d4fa:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800d4fc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800d506:	fb03 f202 	mul.w	r2, r3, r2
 800d50a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d50e:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800d510:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f103 0220 	add.w	r2, r3, #32
 800d51a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d51e:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800d520:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	da00      	bge.n	800d52c <VL53L1_hist_events_consistency_check+0x598>
 800d52a:	333f      	adds	r3, #63	; 0x3f
 800d52c:	119b      	asrs	r3, r3, #6
 800d52e:	461a      	mov	r2, r3
 800d530:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d534:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53L1_p_021;
 800d536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 800d540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	461a      	mov	r2, r3
 800d548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d54c:	1a9b      	subs	r3, r3, r2
 800d54e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800d552:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d556:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d55a:	429a      	cmp	r2, r3
 800d55c:	da08      	bge.n	800d570 <VL53L1_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800d55e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800d562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d566:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800d568:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800d56c:	601a      	str	r2, [r3, #0]
 800d56e:	e007      	b.n	800d580 <VL53L1_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800d570:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d574:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d578:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800d57a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800d57e:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800d580:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	dd0b      	ble.n	800d5a8 <VL53L1_hist_events_consistency_check+0x614>
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
 800d590:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d594:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800d596:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d204      	bcs.n	800d5a8 <VL53L1_hist_events_consistency_check+0x614>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 800d59e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800d5a2:	2214      	movs	r2, #20
 800d5a4:	701a      	strb	r2, [r3, #0]
 800d5a6:	e003      	b.n	800d5b0 <VL53L1_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800d5a8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800d5ac:	2209      	movs	r2, #9
 800d5ae:	701a      	strb	r2, [r3, #0]





	return status;
 800d5b0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d5c0 <VL53L1_hist_merged_pulse_check>:

VL53L1_Error  VL53L1_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53L1_range_data_t         *pdata,
	VL53L1_DeviceError          *prange_status)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b087      	sub	sp, #28
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	607a      	str	r2, [r7, #4]
 800d5cc:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	dd0b      	ble.n	800d5fe <VL53L1_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	1ad3      	subs	r3, r2, r3
 800d5f8:	b29b      	uxth	r3, r3
		delta_mm =
 800d5fa:	82fb      	strh	r3, [r7, #22]
 800d5fc:	e00a      	b.n	800d614 <VL53L1_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800d604:	b29a      	uxth	r2, r3
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	1ad3      	subs	r3, r2, r3
 800d610:	b29b      	uxth	r3, r3
		delta_mm =
 800d612:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800d614:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	dd09      	ble.n	800d630 <VL53L1_hist_merged_pulse_check+0x70>
 800d61c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d620:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d624:	429a      	cmp	r2, r3
 800d626:	dd03      	ble.n	800d630 <VL53L1_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2216      	movs	r2, #22
 800d62c:	701a      	strb	r2, [r3, #0]
 800d62e:	e002      	b.n	800d636 <VL53L1_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2209      	movs	r2, #9
 800d634:	701a      	strb	r2, [r3, #0]

	return status;
 800d636:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	371c      	adds	r7, #28
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr

0800d646 <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 800d646:	b580      	push	{r7, lr}
 800d648:	b08e      	sub	sp, #56	; 0x38
 800d64a:	af04      	add	r7, sp, #16
 800d64c:	60f8      	str	r0, [r7, #12]
 800d64e:	60b9      	str	r1, [r7, #8]
 800d650:	607a      	str	r2, [r7, #4]
 800d652:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d654:	2300      	movs	r3, #0
 800d656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev =
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	3318      	adds	r3, #24
 800d65e:	623b      	str	r3, [r7, #32]
		VL53L1DevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800d660:	2300      	movs	r3, #0
 800d662:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800d664:	2300      	movs	r3, #0
 800d666:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800d668:	6a3b      	ldr	r3, [r7, #32]
 800d66a:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 800d66e:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800d670:	6a3b      	ldr	r3, [r7, #32]
 800d672:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800d676:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800d67e:	2b09      	cmp	r3, #9
 800d680:	d009      	beq.n	800d696 <VL53L1_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800d688:	2b13      	cmp	r3, #19
 800d68a:	d004      	beq.n	800d696 <VL53L1_hist_xmonitor_consistency_check+0x50>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800d692:	2b14      	cmp	r3, #20
 800d694:	d129      	bne.n	800d6ea <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d69c:	2b09      	cmp	r3, #9
 800d69e:	d009      	beq.n	800d6b4 <VL53L1_hist_xmonitor_consistency_check+0x6e>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800d6a6:	2b13      	cmp	r3, #19
 800d6a8:	d004      	beq.n	800d6b4 <VL53L1_hist_xmonitor_consistency_check+0x6e>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800d6b0:	2b14      	cmp	r3, #20
 800d6b2:	d11a      	bne.n	800d6ea <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	2209      	movs	r2, #9
 800d6b8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	334a      	adds	r3, #74	; 0x4a
				VL53L1_hist_events_consistency_check(
 800d6c6:	8bb9      	ldrh	r1, [r7, #28]
 800d6c8:	7ff8      	ldrb	r0, [r7, #31]
 800d6ca:	9303      	str	r3, [sp, #12]
 800d6cc:	f107 0318 	add.w	r3, r7, #24
 800d6d0:	9302      	str	r3, [sp, #8]
 800d6d2:	f107 0314 	add.w	r3, r7, #20
 800d6d6:	9301      	str	r3, [sp, #4]
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	9300      	str	r3, [sp, #0]
 800d6dc:	4613      	mov	r3, r2
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	f7ff fc58 	bl	800cf94 <VL53L1_hist_events_consistency_check>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800d6ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3728      	adds	r7, #40	; 0x28
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b088      	sub	sp, #32
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	60f8      	str	r0, [r7, #12]
 800d6fe:	60b9      	str	r1, [r7, #8]
 800d700:	607a      	str	r2, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d702:	2300      	movs	r3, #0
 800d704:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800d706:	2300      	movs	r3, #0
 800d708:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800d70a:	2300      	movs	r3, #0
 800d70c:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800d70e:	2300      	movs	r3, #0
 800d710:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2200      	movs	r2, #0
 800d716:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53L1_p_019 != 0) {
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d019      	beq.n	800d756 <VL53L1_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53L1_calc_pll_period_mm(
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d728:	4618      	mov	r0, r3
 800d72a:	f002 f90f 	bl	800f94c <VL53L1_calc_pll_period_mm>
 800d72e:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53L1_p_019);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800d736:	021b      	lsls	r3, r3, #8
 800d738:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	69ba      	ldr	r2, [r7, #24]
 800d73e:	fb02 f303 	mul.w	r3, r2, r3
 800d742:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d74a:	0bdb      	lsrs	r3, r3, #15
 800d74c:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	b21a      	sxth	r2, r3
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d756:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3720      	adds	r7, #32
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}

0800d762 <VL53L1_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53L1_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800d762:	b590      	push	{r4, r7, lr}
 800d764:	b08d      	sub	sp, #52	; 0x34
 800d766:	af04      	add	r7, sp, #16
 800d768:	4604      	mov	r4, r0
 800d76a:	4608      	mov	r0, r1
 800d76c:	4611      	mov	r1, r2
 800d76e:	461a      	mov	r2, r3
 800d770:	4623      	mov	r3, r4
 800d772:	80fb      	strh	r3, [r7, #6]
 800d774:	4603      	mov	r3, r0
 800d776:	80bb      	strh	r3, [r7, #4]
 800d778:	460b      	mov	r3, r1
 800d77a:	70fb      	strb	r3, [r7, #3]
 800d77c:	4613      	mov	r3, r2
 800d77e:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800d780:	2300      	movs	r3, #0
 800d782:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800d784:	2300      	movs	r3, #0
 800d786:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800d788:	2300      	movs	r3, #0
 800d78a:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800d78c:	2300      	movs	r3, #0
 800d78e:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800d790:	2300      	movs	r3, #0
 800d792:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800d794:	2300      	movs	r3, #0
 800d796:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800d798:	2300      	movs	r3, #0
 800d79a:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800d79c:	2300      	movs	r3, #0
 800d79e:	613b      	str	r3, [r7, #16]



	VL53L1_calc_mm_effective_spads(
 800d7a0:	78b9      	ldrb	r1, [r7, #2]
 800d7a2:	78f8      	ldrb	r0, [r7, #3]
 800d7a4:	f107 030c 	add.w	r3, r7, #12
 800d7a8:	9303      	str	r3, [sp, #12]
 800d7aa:	f107 030e 	add.w	r3, r7, #14
 800d7ae:	9302      	str	r3, [sp, #8]
 800d7b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d7b4:	9301      	str	r3, [sp, #4]
 800d7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7b8:	9300      	str	r3, [sp, #0]
 800d7ba:	23ff      	movs	r3, #255	; 0xff
 800d7bc:	22c7      	movs	r2, #199	; 0xc7
 800d7be:	f000 fa03 	bl	800dbc8 <VL53L1_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800d7c2:	89fb      	ldrh	r3, [r7, #14]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d050      	beq.n	800d86a <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800d7c8:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d04d      	beq.n	800d86a <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;



	VL53L1_calc_mm_effective_spads(
 800d7ce:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800d7d2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800d7d6:	78b9      	ldrb	r1, [r7, #2]
 800d7d8:	78f8      	ldrb	r0, [r7, #3]
 800d7da:	f107 0308 	add.w	r3, r7, #8
 800d7de:	9303      	str	r3, [sp, #12]
 800d7e0:	f107 030a 	add.w	r3, r7, #10
 800d7e4:	9302      	str	r3, [sp, #8]
 800d7e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d7ea:	9301      	str	r3, [sp, #4]
 800d7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ee:	9300      	str	r3, [sp, #0]
 800d7f0:	4623      	mov	r3, r4
 800d7f2:	f000 f9e9 	bl	800dbc8 <VL53L1_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800d7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f8:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800d7fa:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800d7fc:	897b      	ldrh	r3, [r7, #10]
 800d7fe:	461a      	mov	r2, r3
 800d800:	69bb      	ldr	r3, [r7, #24]
 800d802:	fb02 f303 	mul.w	r3, r2, r3
 800d806:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800d808:	89fb      	ldrh	r3, [r7, #14]
 800d80a:	461a      	mov	r2, r3
 800d80c:	69bb      	ldr	r3, [r7, #24]
 800d80e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d812:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800d814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d816:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800d818:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800d81a:	893b      	ldrh	r3, [r7, #8]
 800d81c:	461a      	mov	r2, r3
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	fb02 f303 	mul.w	r3, r2, r3
 800d824:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800d826:	89bb      	ldrh	r3, [r7, #12]
 800d828:	461a      	mov	r2, r3
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d830:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800d832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d836:	69ba      	ldr	r2, [r7, #24]
 800d838:	fb02 f303 	mul.w	r3, r2, r3
 800d83c:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800d83e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d842:	697a      	ldr	r2, [r7, #20]
 800d844:	fb02 f303 	mul.w	r3, r2, r3
 800d848:	69fa      	ldr	r2, [r7, #28]
 800d84a:	4413      	add	r3, r2
 800d84c:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800d84e:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800d850:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800d852:	4413      	add	r3, r2
 800d854:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d008      	beq.n	800d86e <VL53L1_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	009a      	lsls	r2, r3, #2
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	fb92 f3f3 	sdiv	r3, r2, r3
 800d866:	61fb      	str	r3, [r7, #28]
 800d868:	e002      	b.n	800d870 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800d86a:	bf00      	nop
 800d86c:	e000      	b.n	800d870 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800d86e:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	b21a      	sxth	r2, r3
 800d874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d876:	801a      	strh	r2, [r3, #0]

}
 800d878:	bf00      	nop
 800d87a:	3724      	adds	r7, #36	; 0x24
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd90      	pop	{r4, r7, pc}

0800d880 <VL53L1_spad_number_to_byte_bit_index>:
void VL53L1_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800d880:	b480      	push	{r7}
 800d882:	b085      	sub	sp, #20
 800d884:	af00      	add	r7, sp, #0
 800d886:	60b9      	str	r1, [r7, #8]
 800d888:	607a      	str	r2, [r7, #4]
 800d88a:	603b      	str	r3, [r7, #0]
 800d88c:	4603      	mov	r3, r0
 800d88e:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800d890:	7bfb      	ldrb	r3, [r7, #15]
 800d892:	08db      	lsrs	r3, r3, #3
 800d894:	b2da      	uxtb	r2, r3
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800d89a:	7bfb      	ldrb	r3, [r7, #15]
 800d89c:	f003 0307 	and.w	r3, r3, #7
 800d8a0:	b2da      	uxtb	r2, r3
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	4093      	lsls	r3, r2
 800d8b0:	b2da      	uxtb	r2, r3
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	701a      	strb	r2, [r3, #0]

}
 800d8b6:	bf00      	nop
 800d8b8:	3714      	adds	r7, #20
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr

0800d8c2 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800d8c2:	b480      	push	{r7}
 800d8c4:	b083      	sub	sp, #12
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	603a      	str	r2, [r7, #0]
 800d8cc:	71fb      	strb	r3, [r7, #7]
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800d8d2:	79fb      	ldrb	r3, [r7, #7]
 800d8d4:	2b07      	cmp	r3, #7
 800d8d6:	d90a      	bls.n	800d8ee <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800d8d8:	79bb      	ldrb	r3, [r7, #6]
 800d8da:	00db      	lsls	r3, r3, #3
 800d8dc:	b2da      	uxtb	r2, r3
 800d8de:	79fb      	ldrb	r3, [r7, #7]
 800d8e0:	1ad3      	subs	r3, r2, r3
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	3b71      	subs	r3, #113	; 0x71
 800d8e6:	b2da      	uxtb	r2, r3
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800d8ec:	e00a      	b.n	800d904 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800d8ee:	79bb      	ldrb	r3, [r7, #6]
 800d8f0:	f1c3 030f 	rsb	r3, r3, #15
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	00db      	lsls	r3, r3, #3
 800d8f8:	b2da      	uxtb	r2, r3
 800d8fa:	79fb      	ldrb	r3, [r7, #7]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	b2da      	uxtb	r2, r3
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	701a      	strb	r2, [r3, #0]
}
 800d904:	bf00      	nop
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800d910:	b480      	push	{r7}
 800d912:	b085      	sub	sp, #20
 800d914:	af00      	add	r7, sp, #0
 800d916:	4603      	mov	r3, r0
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	607a      	str	r2, [r7, #4]
 800d91c:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800d91e:	7bfb      	ldrb	r3, [r7, #15]
 800d920:	091b      	lsrs	r3, r3, #4
 800d922:	b2da      	uxtb	r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800d928:	7bfb      	ldrb	r3, [r7, #15]
 800d92a:	f003 030f 	and.w	r3, r3, #15
 800d92e:	b2da      	uxtb	r2, r3
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	701a      	strb	r2, [r3, #0]

}
 800d934:	bf00      	nop
 800d936:	3714      	adds	r7, #20
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr

0800d940 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	4603      	mov	r3, r0
 800d948:	603a      	str	r2, [r7, #0]
 800d94a:	71fb      	strb	r3, [r7, #7]
 800d94c:	460b      	mov	r3, r1
 800d94e:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800d950:	79bb      	ldrb	r3, [r7, #6]
 800d952:	011b      	lsls	r3, r3, #4
 800d954:	b2da      	uxtb	r2, r3
 800d956:	79fb      	ldrb	r3, [r7, #7]
 800d958:	4413      	add	r3, r2
 800d95a:	b2da      	uxtb	r2, r3
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	701a      	strb	r2, [r3, #0]

}
 800d960:	bf00      	nop
 800d962:	370c      	adds	r7, #12
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr

0800d96c <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b086      	sub	sp, #24
 800d970:	af00      	add	r7, sp, #0
 800d972:	60ba      	str	r2, [r7, #8]
 800d974:	607b      	str	r3, [r7, #4]
 800d976:	4603      	mov	r3, r0
 800d978:	73fb      	strb	r3, [r7, #15]
 800d97a:	460b      	mov	r3, r1
 800d97c:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800d97e:	2300      	movs	r3, #0
 800d980:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800d982:	2300      	movs	r3, #0
 800d984:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800d98a:	2300      	movs	r3, #0
 800d98c:	753b      	strb	r3, [r7, #20]



	VL53L1_decode_row_col(
 800d98e:	f107 0217 	add.w	r2, r7, #23
 800d992:	f107 0116 	add.w	r1, r7, #22
 800d996:	7bfb      	ldrb	r3, [r7, #15]
 800d998:	4618      	mov	r0, r3
 800d99a:	f002 fa51 	bl	800fe40 <VL53L1_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53L1_decode_zone_size(
 800d99e:	f107 0214 	add.w	r2, r7, #20
 800d9a2:	f107 0115 	add.w	r1, r7, #21
 800d9a6:	7bbb      	ldrb	r3, [r7, #14]
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7ff ffb1 	bl	800d910 <VL53L1_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800d9ae:	7dfb      	ldrb	r3, [r7, #23]
 800d9b0:	b29a      	uxth	r2, r3
 800d9b2:	7d7b      	ldrb	r3, [r7, #21]
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	0fd9      	lsrs	r1, r3, #31
 800d9b8:	440b      	add	r3, r1
 800d9ba:	105b      	asrs	r3, r3, #1
 800d9bc:	425b      	negs	r3, r3
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	4413      	add	r3, r2
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	b21a      	sxth	r2, r3
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	da02      	bge.n	800d9da <VL53L1_decode_zone_limits+0x6e>
		*px_ll = 0;
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9e0:	b29a      	uxth	r2, r3
 800d9e2:	7d7b      	ldrb	r3, [r7, #21]
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	4413      	add	r3, r2
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	b21a      	sxth	r2, r3
 800d9ec:	6a3b      	ldr	r3, [r7, #32]
 800d9ee:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
 800d9f0:	6a3b      	ldr	r3, [r7, #32]
 800d9f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9f6:	2b0f      	cmp	r3, #15
 800d9f8:	dd02      	ble.n	800da00 <VL53L1_decode_zone_limits+0x94>
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;
 800d9fa:	6a3b      	ldr	r3, [r7, #32]
 800d9fc:	220f      	movs	r2, #15
 800d9fe:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800da00:	7dbb      	ldrb	r3, [r7, #22]
 800da02:	b29a      	uxth	r2, r3
 800da04:	7d3b      	ldrb	r3, [r7, #20]
 800da06:	3301      	adds	r3, #1
 800da08:	0fd9      	lsrs	r1, r3, #31
 800da0a:	440b      	add	r3, r1
 800da0c:	105b      	asrs	r3, r3, #1
 800da0e:	425b      	negs	r3, r3
 800da10:	b29b      	uxth	r3, r3
 800da12:	4413      	add	r3, r2
 800da14:	b29b      	uxth	r3, r3
 800da16:	b21a      	sxth	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da22:	2b00      	cmp	r3, #0
 800da24:	da02      	bge.n	800da2c <VL53L1_decode_zone_limits+0xc0>
		*py_ll = 0;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2200      	movs	r2, #0
 800da2a:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da32:	b29a      	uxth	r2, r3
 800da34:	7d3b      	ldrb	r3, [r7, #20]
 800da36:	b29b      	uxth	r3, r3
 800da38:	4413      	add	r3, r2
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	b21a      	sxth	r2, r3
 800da3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da40:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
 800da42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da48:	2b0f      	cmp	r3, #15
 800da4a:	dd02      	ble.n	800da52 <VL53L1_decode_zone_limits+0xe6>
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	220f      	movs	r2, #15
 800da50:	801a      	strh	r2, [r3, #0]
}
 800da52:	bf00      	nop
 800da54:	3718      	adds	r7, #24
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <VL53L1_is_aperture_location>:


uint8_t VL53L1_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800da5a:	b480      	push	{r7}
 800da5c:	b085      	sub	sp, #20
 800da5e:	af00      	add	r7, sp, #0
 800da60:	4603      	mov	r3, r0
 800da62:	460a      	mov	r2, r1
 800da64:	71fb      	strb	r3, [r7, #7]
 800da66:	4613      	mov	r3, r2
 800da68:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800da6a:	2300      	movs	r3, #0
 800da6c:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800da6e:	79fb      	ldrb	r3, [r7, #7]
 800da70:	f003 0303 	and.w	r3, r3, #3
 800da74:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800da76:	79bb      	ldrb	r3, [r7, #6]
 800da78:	f003 0303 	and.w	r3, r3, #3
 800da7c:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800da7e:	7bbb      	ldrb	r3, [r7, #14]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d104      	bne.n	800da8e <VL53L1_is_aperture_location+0x34>
 800da84:	7b7b      	ldrb	r3, [r7, #13]
 800da86:	2b02      	cmp	r3, #2
 800da88:	d101      	bne.n	800da8e <VL53L1_is_aperture_location+0x34>
		is_aperture = 1;
 800da8a:	2301      	movs	r3, #1
 800da8c:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800da8e:	7bbb      	ldrb	r3, [r7, #14]
 800da90:	2b02      	cmp	r3, #2
 800da92:	d104      	bne.n	800da9e <VL53L1_is_aperture_location+0x44>
 800da94:	7b7b      	ldrb	r3, [r7, #13]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d101      	bne.n	800da9e <VL53L1_is_aperture_location+0x44>
		is_aperture = 1;
 800da9a:	2301      	movs	r3, #1
 800da9c:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800da9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3714      	adds	r7, #20
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800daac:	b590      	push	{r4, r7, lr}
 800daae:	b08b      	sub	sp, #44	; 0x2c
 800dab0:	af02      	add	r7, sp, #8
 800dab2:	603a      	str	r2, [r7, #0]
 800dab4:	461a      	mov	r2, r3
 800dab6:	4603      	mov	r3, r0
 800dab8:	71fb      	strb	r3, [r7, #7]
 800daba:	460b      	mov	r3, r1
 800dabc:	71bb      	strb	r3, [r7, #6]
 800dabe:	4613      	mov	r3, r2
 800dac0:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800dac2:	2300      	movs	r3, #0
 800dac4:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800dac6:	2300      	movs	r3, #0
 800dac8:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800daca:	2300      	movs	r3, #0
 800dacc:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800dace:	2300      	movs	r3, #0
 800dad0:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800dad2:	2300      	movs	r3, #0
 800dad4:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800dad6:	2300      	movs	r3, #0
 800dad8:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800dada:	2300      	movs	r3, #0
 800dadc:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800dade:	2300      	movs	r3, #0
 800dae0:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800dae2:	2300      	movs	r3, #0
 800dae4:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800dae6:	2300      	movs	r3, #0
 800dae8:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800daea:	2300      	movs	r3, #0
 800daec:	76fb      	strb	r3, [r7, #27]



	VL53L1_decode_zone_limits(
 800daee:	f107 0416 	add.w	r4, r7, #22
 800daf2:	f107 0218 	add.w	r2, r7, #24
 800daf6:	79b9      	ldrb	r1, [r7, #6]
 800daf8:	79f8      	ldrb	r0, [r7, #7]
 800dafa:	f107 0312 	add.w	r3, r7, #18
 800dafe:	9301      	str	r3, [sp, #4]
 800db00:	f107 0314 	add.w	r3, r7, #20
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	4623      	mov	r3, r4
 800db08:	f7ff ff30 	bl	800d96c <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800db0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db0e:	2200      	movs	r2, #0
 800db10:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800db12:	8afb      	ldrh	r3, [r7, #22]
 800db14:	83bb      	strh	r3, [r7, #28]
 800db16:	e04c      	b.n	800dbb2 <VL53L1_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800db18:	8b3b      	ldrh	r3, [r7, #24]
 800db1a:	83fb      	strh	r3, [r7, #30]
 800db1c:	e03d      	b.n	800db9a <VL53L1_calc_max_effective_spads+0xee>



			VL53L1_encode_row_col(
 800db1e:	8bbb      	ldrh	r3, [r7, #28]
 800db20:	b2db      	uxtb	r3, r3
 800db22:	8bfa      	ldrh	r2, [r7, #30]
 800db24:	b2d1      	uxtb	r1, r2
 800db26:	f107 0211 	add.w	r2, r7, #17
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7ff fec9 	bl	800d8c2 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800db30:	7c78      	ldrb	r0, [r7, #17]
 800db32:	f107 030e 	add.w	r3, r7, #14
 800db36:	f107 020f 	add.w	r2, r7, #15
 800db3a:	f107 0110 	add.w	r1, r7, #16
 800db3e:	f7ff fe9f 	bl	800d880 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800db42:	7c3b      	ldrb	r3, [r7, #16]
 800db44:	461a      	mov	r2, r3
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	4413      	add	r3, r2
 800db4a:	781a      	ldrb	r2, [r3, #0]
 800db4c:	7bbb      	ldrb	r3, [r7, #14]
 800db4e:	4013      	ands	r3, r2
 800db50:	b2db      	uxtb	r3, r3
 800db52:	2b00      	cmp	r3, #0
 800db54:	d01b      	beq.n	800db8e <VL53L1_calc_max_effective_spads+0xe2>


				is_aperture = VL53L1_is_aperture_location(
 800db56:	8bbb      	ldrh	r3, [r7, #28]
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	8bfa      	ldrh	r2, [r7, #30]
 800db5c:	b2d2      	uxtb	r2, r2
 800db5e:	4611      	mov	r1, r2
 800db60:	4618      	mov	r0, r3
 800db62:	f7ff ff7a 	bl	800da5a <VL53L1_is_aperture_location>
 800db66:	4603      	mov	r3, r0
 800db68:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800db6a:	7efb      	ldrb	r3, [r7, #27]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d007      	beq.n	800db80 <VL53L1_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800db70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db72:	881a      	ldrh	r2, [r3, #0]
 800db74:	88bb      	ldrh	r3, [r7, #4]
 800db76:	4413      	add	r3, r2
 800db78:	b29a      	uxth	r2, r3
 800db7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7c:	801a      	strh	r2, [r3, #0]
 800db7e:	e006      	b.n	800db8e <VL53L1_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800db80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db82:	881b      	ldrh	r3, [r3, #0]
 800db84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800db88:	b29a      	uxth	r2, r3
 800db8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8c:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800db8e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800db92:	b29b      	uxth	r3, r3
 800db94:	3301      	adds	r3, #1
 800db96:	b29b      	uxth	r3, r3
 800db98:	83fb      	strh	r3, [r7, #30]
 800db9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800db9e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800dba2:	429a      	cmp	r2, r3
 800dba4:	ddbb      	ble.n	800db1e <VL53L1_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800dba6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	3301      	adds	r3, #1
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	83bb      	strh	r3, [r7, #28]
 800dbb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dbb6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	ddac      	ble.n	800db18 <VL53L1_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800dbbe:	bf00      	nop
 800dbc0:	bf00      	nop
 800dbc2:	3724      	adds	r7, #36	; 0x24
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd90      	pop	{r4, r7, pc}

0800dbc8 <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800dbc8:	b590      	push	{r4, r7, lr}
 800dbca:	b08d      	sub	sp, #52	; 0x34
 800dbcc:	af02      	add	r7, sp, #8
 800dbce:	4604      	mov	r4, r0
 800dbd0:	4608      	mov	r0, r1
 800dbd2:	4611      	mov	r1, r2
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	4623      	mov	r3, r4
 800dbd8:	71fb      	strb	r3, [r7, #7]
 800dbda:	4603      	mov	r3, r0
 800dbdc:	71bb      	strb	r3, [r7, #6]
 800dbde:	460b      	mov	r3, r1
 800dbe0:	717b      	strb	r3, [r7, #5]
 800dbe2:	4613      	mov	r3, r2
 800dbe4:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800dbea:	2300      	movs	r3, #0
 800dbec:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800dc02:	2300      	movs	r3, #0
 800dc04:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800dc06:	2300      	movs	r3, #0
 800dc08:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800dc12:	2300      	movs	r3, #0
 800dc14:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800dc16:	2300      	movs	r3, #0
 800dc18:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800dc24:	2300      	movs	r3, #0
 800dc26:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53L1_decode_zone_limits(
 800dc28:	f107 041c 	add.w	r4, r7, #28
 800dc2c:	f107 021e 	add.w	r2, r7, #30
 800dc30:	79b9      	ldrb	r1, [r7, #6]
 800dc32:	79f8      	ldrb	r0, [r7, #7]
 800dc34:	f107 0318 	add.w	r3, r7, #24
 800dc38:	9301      	str	r3, [sp, #4]
 800dc3a:	f107 031a 	add.w	r3, r7, #26
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	4623      	mov	r3, r4
 800dc42:	f7ff fe93 	bl	800d96c <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 800dc46:	f107 0414 	add.w	r4, r7, #20
 800dc4a:	f107 0216 	add.w	r2, r7, #22
 800dc4e:	7939      	ldrb	r1, [r7, #4]
 800dc50:	7978      	ldrb	r0, [r7, #5]
 800dc52:	f107 0310 	add.w	r3, r7, #16
 800dc56:	9301      	str	r3, [sp, #4]
 800dc58:	f107 0312 	add.w	r3, r7, #18
 800dc5c:	9300      	str	r3, [sp, #0]
 800dc5e:	4623      	mov	r3, r4
 800dc60:	f7ff fe84 	bl	800d96c <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800dc64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc66:	2200      	movs	r2, #0
 800dc68:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800dc6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800dc70:	8abb      	ldrh	r3, [r7, #20]
 800dc72:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dc74:	e06c      	b.n	800dd50 <VL53L1_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800dc76:	8afb      	ldrh	r3, [r7, #22]
 800dc78:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dc7a:	e05d      	b.n	800dd38 <VL53L1_calc_mm_effective_spads+0x170>



			VL53L1_encode_row_col(
 800dc7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dc82:	b2d1      	uxtb	r1, r2
 800dc84:	f107 020f 	add.w	r2, r7, #15
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7ff fe1a 	bl	800d8c2 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800dc8e:	7bf8      	ldrb	r0, [r7, #15]
 800dc90:	f107 030c 	add.w	r3, r7, #12
 800dc94:	f107 020d 	add.w	r2, r7, #13
 800dc98:	f107 010e 	add.w	r1, r7, #14
 800dc9c:	f7ff fdf0 	bl	800d880 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800dca0:	7bbb      	ldrb	r3, [r7, #14]
 800dca2:	461a      	mov	r2, r3
 800dca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca6:	4413      	add	r3, r2
 800dca8:	781a      	ldrb	r2, [r3, #0]
 800dcaa:	7b3b      	ldrb	r3, [r7, #12]
 800dcac:	4013      	ands	r3, r2
 800dcae:	b2db      	uxtb	r3, r3
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d03b      	beq.n	800dd2c <VL53L1_calc_mm_effective_spads+0x164>


				is_aperture = VL53L1_is_aperture_location(
 800dcb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dcba:	b2d2      	uxtb	r2, r2
 800dcbc:	4611      	mov	r1, r2
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7ff fecb 	bl	800da5a <VL53L1_is_aperture_location>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800dcca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d002      	beq.n	800dcd8 <VL53L1_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800dcd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dcd4:	847b      	strh	r3, [r7, #34]	; 0x22
 800dcd6:	e002      	b.n	800dcde <VL53L1_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800dcd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dcdc:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800dcde:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dce2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800dce6:	429a      	cmp	r2, r3
 800dce8:	db19      	blt.n	800dd1e <VL53L1_calc_mm_effective_spads+0x156>
 800dcea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800dcee:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	dc13      	bgt.n	800dd1e <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800dcf6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800dcfa:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	db0d      	blt.n	800dd1e <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800dd02:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800dd06:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	dc07      	bgt.n	800dd1e <VL53L1_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800dd0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd10:	881a      	ldrh	r2, [r3, #0]
 800dd12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd14:	4413      	add	r3, r2
 800dd16:	b29a      	uxth	r2, r3
 800dd18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd1a:	801a      	strh	r2, [r3, #0]
 800dd1c:	e006      	b.n	800dd2c <VL53L1_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800dd1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd20:	881a      	ldrh	r2, [r3, #0]
 800dd22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd24:	4413      	add	r3, r2
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd2a:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800dd2c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800dd30:	b29b      	uxth	r3, r3
 800dd32:	3301      	adds	r3, #1
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dd38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dd3c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800dd40:	429a      	cmp	r2, r3
 800dd42:	dd9b      	ble.n	800dc7c <VL53L1_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800dd44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dd50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800dd54:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	dd8c      	ble.n	800dc76 <VL53L1_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800dd5c:	bf00      	nop
 800dd5e:	bf00      	nop
 800dd60:	372c      	adds	r7, #44	; 0x2c
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd90      	pop	{r4, r7, pc}

0800dd66 <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 800dd66:	b580      	push	{r7, lr}
 800dd68:	b086      	sub	sp, #24
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	60f8      	str	r0, [r7, #12]
 800dd6e:	60b9      	str	r1, [r7, #8]
 800dd70:	607a      	str	r2, [r7, #4]
 800dd72:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800dd74:	2300      	movs	r3, #0
 800dd76:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f7fd ff6d 	bl	800bc58 <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	7c9a      	ldrb	r2, [r3, #18]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	3314      	adds	r3, #20
 800dda8:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800ddaa:	2300      	movs	r3, #0
 800ddac:	75fb      	strb	r3, [r7, #23]
 800ddae:	e06b      	b.n	800de88 <VL53L1_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800ddb0:	7dfb      	ldrb	r3, [r7, #23]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d002      	beq.n	800ddbc <VL53L1_hist_copy_results_to_sys_and_core+0x56>
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d034      	beq.n	800de24 <VL53L1_hist_copy_results_to_sys_and_core+0xbe>
 800ddba:	e05f      	b.n	800de7c <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53L1_p_006;
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800ddf4:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	8a9a      	ldrh	r2, [r3, #20]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53L1_p_021;
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53L1_p_013;
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53L1_p_020;
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	601a      	str	r2, [r3, #0]

			break;
 800de22:	e02b      	b.n	800de7c <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53L1_p_006;
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800de54:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53L1_p_021;
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53L1_p_013;
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53L1_p_020;
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	611a      	str	r2, [r3, #16]
			break;
 800de7a:	bf00      	nop
		}

		pdata++;
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	334c      	adds	r3, #76	; 0x4c
 800de80:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800de82:	7dfb      	ldrb	r3, [r7, #23]
 800de84:	3301      	adds	r3, #1
 800de86:	75fb      	strb	r3, [r7, #23]
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	7c9b      	ldrb	r3, [r3, #18]
 800de8c:	7dfa      	ldrb	r2, [r7, #23]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d38e      	bcc.n	800ddb0 <VL53L1_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800de92:	bf00      	nop
 800de94:	bf00      	nop
 800de96:	3718      	adds	r7, #24
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <VL53L1_save_cfg_data>:
}


VL53L1_Error VL53L1_save_cfg_data(
	VL53L1_DEV  Dev)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b089      	sub	sp, #36	; 0x24
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800dea4:	2300      	movs	r3, #0
 800dea6:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	3318      	adds	r3, #24
 800deac:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800deb4:	3308      	adds	r3, #8
 800deb6:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800debe:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 800dec0:	69bb      	ldr	r3, [r7, #24]
 800dec2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800dec6:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800dec8:	4613      	mov	r3, r2
 800deca:	009b      	lsls	r3, r3, #2
 800decc:	4413      	add	r3, r2
 800dece:	005b      	lsls	r3, r3, #1
 800ded0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800ded4:	697a      	ldr	r2, [r7, #20]
 800ded6:	4413      	add	r3, r2
 800ded8:	3302      	adds	r3, #2
 800deda:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800df00:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800df04:	4618      	mov	r0, r3
 800df06:	3724      	adds	r7, #36	; 0x24
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 800df10:	b480      	push	{r7}
 800df12:	b08b      	sub	sp, #44	; 0x2c
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800df1a:	2300      	movs	r3, #0
 800df1c:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	3318      	adds	r3, #24
 800df22:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800df2a:	3308      	adds	r3, #8
 800df2c:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800df34:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800df36:	69bb      	ldr	r3, [r7, #24]
 800df38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800df3c:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800df3e:	69bb      	ldr	r3, [r7, #24]
 800df40:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 800df44:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800df46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df4a:	623b      	str	r3, [r7, #32]
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 800df4c:	7bfa      	ldrb	r2, [r7, #15]
 800df4e:	6939      	ldr	r1, [r7, #16]
 800df50:	4613      	mov	r3, r2
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	4413      	add	r3, r2
 800df56:	005b      	lsls	r3, r3, #1
 800df58:	440b      	add	r3, r1
 800df5a:	3306      	adds	r3, #6
 800df5c:	2200      	movs	r2, #0
 800df5e:	801a      	strh	r2, [r3, #0]

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800df66:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800df68:	2301      	movs	r3, #1
 800df6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df6e:	e01a      	b.n	800dfa6 <VL53L1_dynamic_zone_update+0x96>

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 800df70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df74:	683a      	ldr	r2, [r7, #0]
 800df76:	214c      	movs	r1, #76	; 0x4c
 800df78:	fb01 f303 	mul.w	r3, r1, r3
 800df7c:	4413      	add	r3, r2
 800df7e:	334a      	adds	r3, #74	; 0x4a
 800df80:	881b      	ldrh	r3, [r3, #0]
 800df82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df84:	429a      	cmp	r2, r3
 800df86:	d209      	bcs.n	800df9c <VL53L1_dynamic_zone_update+0x8c>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;
 800df88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800df8c:	683a      	ldr	r2, [r7, #0]
 800df8e:	214c      	movs	r1, #76	; 0x4c
 800df90:	fb01 f303 	mul.w	r3, r1, r3
 800df94:	4413      	add	r3, r2
 800df96:	334a      	adds	r3, #74	; 0x4a
 800df98:	881b      	ldrh	r3, [r3, #0]
 800df9a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800df9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	7c9b      	ldrb	r3, [r3, #18]
 800dfaa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d3de      	bcc.n	800df70 <VL53L1_dynamic_zone_update+0x60>

	}

	if (max_total_rate_per_spads == 0) {
 800dfb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d103      	bne.n	800dfc0 <VL53L1_dynamic_zone_update+0xb0>

		temp = 0xFFFF;
 800dfb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dfbc:	623b      	str	r3, [r7, #32]
 800dfbe:	e00e      	b.n	800dfde <VL53L1_dynamic_zone_update+0xce>
	} else {

		temp = target_rate << 14;
 800dfc0:	89bb      	ldrh	r3, [r7, #12]
 800dfc2:	039b      	lsls	r3, r3, #14
 800dfc4:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800dfc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfc8:	6a3a      	ldr	r2, [r7, #32]
 800dfca:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfce:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800dfd0:	6a3b      	ldr	r3, [r7, #32]
 800dfd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfd6:	d302      	bcc.n	800dfde <VL53L1_dynamic_zone_update+0xce>
			temp = 0xFFFF;
 800dfd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dfdc:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800dfde:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800dfe0:	6a3b      	ldr	r3, [r7, #32]
 800dfe2:	b298      	uxth	r0, r3
	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800dfe4:	6939      	ldr	r1, [r7, #16]
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	009b      	lsls	r3, r3, #2
 800dfea:	4413      	add	r3, r2
 800dfec:	005b      	lsls	r3, r3, #1
 800dfee:	440b      	add	r3, r1
 800dff0:	3306      	adds	r3, #6
 800dff2:	4602      	mov	r2, r0
 800dff4:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800dff6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	372c      	adds	r7, #44	; 0x2c
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr

0800e006 <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b08a      	sub	sp, #40	; 0x28
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e00e:	2300      	movs	r3, #0
 800e010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	3318      	adds	r3, #24
 800e018:	623b      	str	r3, [r7, #32]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800e01a:	6a3b      	ldr	r3, [r7, #32]
 800e01c:	332c      	adds	r3, #44	; 0x2c
 800e01e:	61fb      	str	r3, [r7, #28]
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800e020:	6a3b      	ldr	r3, [r7, #32]
 800e022:	33c2      	adds	r3, #194	; 0xc2
 800e024:	61bb      	str	r3, [r7, #24]
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800e026:	6a3b      	ldr	r3, [r7, #32]
 800e028:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800e02c:	617b      	str	r3, [r7, #20]
	VL53L1_histogram_config_t *pmulti_hist =
 800e02e:	69bb      	ldr	r3, [r7, #24]
 800e030:	3302      	adds	r3, #2
 800e032:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	785b      	ldrb	r3, [r3, #1]
 800e038:	f003 0301 	and.w	r3, r3, #1
 800e03c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800e03e:	6a3b      	ldr	r3, [r7, #32]
 800e040:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e044:	461a      	mov	r2, r3
 800e046:	69bb      	ldr	r3, [r7, #24]
 800e048:	4413      	add	r3, r2
 800e04a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d11e      	bne.n	800e090 <VL53L1_multizone_hist_bins_update+0x8a>
		VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800e052:	7bfb      	ldrb	r3, [r7, #15]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d10b      	bne.n	800e070 <VL53L1_multizone_hist_bins_update+0x6a>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800e070:	7bfb      	ldrb	r3, [r7, #15]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d05d      	beq.n	800e132 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	719a      	strb	r2, [r3, #6]
 800e08e:	e050      	b.n	800e132 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800e090:	6a3b      	ldr	r3, [r7, #32]
 800e092:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e096:	461a      	mov	r2, r3
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	4413      	add	r3, r2
 800e09c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e0a0:	2b02      	cmp	r3, #2
 800e0a2:	d11e      	bne.n	800e0e2 <VL53L1_multizone_hist_bins_update+0xdc>
		VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800e0a4:	7bfb      	ldrb	r3, [r7, #15]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d10b      	bne.n	800e0c2 <VL53L1_multizone_hist_bins_update+0xbc>
			trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800e0c2:	7bfb      	ldrb	r3, [r7, #15]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d034      	beq.n	800e132 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	719a      	strb	r2, [r3, #6]
 800e0e0:	e027      	b.n	800e132 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800e0e2:	6a3b      	ldr	r3, [r7, #32]
 800e0e4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	69bb      	ldr	r3, [r7, #24]
 800e0ec:	4413      	add	r3, r2
 800e0ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e0f2:	2b03      	cmp	r3, #3
 800e0f4:	d11d      	bne.n	800e132 <VL53L1_multizone_hist_bins_update+0x12c>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d10b      	bne.n	800e114 <VL53L1_multizone_hist_bins_update+0x10e>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800e114:	7bfb      	ldrb	r3, [r7, #15]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00b      	beq.n	800e132 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53L1_ERROR_NONE) {
 800e132:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e136:	2b00      	cmp	r3, #0
 800e138:	d109      	bne.n	800e14e <VL53L1_multizone_hist_bins_update+0x148>
		VL53L1_copy_hist_bins_to_static_cfg(
 800e13a:	6a3b      	ldr	r3, [r7, #32]
 800e13c:	f203 3142 	addw	r1, r3, #834	; 0x342
 800e140:	6a3b      	ldr	r3, [r7, #32]
 800e142:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800e146:	461a      	mov	r2, r3
 800e148:	6978      	ldr	r0, [r7, #20]
 800e14a:	f7fd f921 	bl	800b390 <VL53L1_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800e14e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e152:	4618      	mov	r0, r3
 800e154:	3728      	adds	r7, #40	; 0x28
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}

0800e15a <VL53L1_update_internal_stream_counters>:
VL53L1_Error VL53L1_update_internal_stream_counters(
	VL53L1_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800e15a:	b480      	push	{r7}
 800e15c:	b089      	sub	sp, #36	; 0x24
 800e15e:	af00      	add	r7, sp, #0
 800e160:	60f8      	str	r0, [r7, #12]
 800e162:	607a      	str	r2, [r7, #4]
 800e164:	603b      	str	r3, [r7, #0]
 800e166:	460b      	mov	r3, r1
 800e168:	72fb      	strb	r3, [r7, #11]

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e16a:	2300      	movs	r3, #0
 800e16c:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53L1_LLDriverData_t  *pdev =
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	3318      	adds	r3, #24
 800e172:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800e174:	69bb      	ldr	r3, [r7, #24]
 800e176:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800e17a:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800e17c:	7dfb      	ldrb	r3, [r7, #23]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d103      	bne.n	800e18a <VL53L1_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	7afa      	ldrb	r2, [r7, #11]
 800e186:	701a      	strb	r2, [r3, #0]
 800e188:	e01e      	b.n	800e1c8 <VL53L1_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	461a      	mov	r2, r3
 800e190:	7dfb      	ldrb	r3, [r7, #23]
 800e192:	3b01      	subs	r3, #1
 800e194:	429a      	cmp	r2, r3
 800e196:	d111      	bne.n	800e1bc <VL53L1_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	781b      	ldrb	r3, [r3, #0]
 800e19c:	2bff      	cmp	r3, #255	; 0xff
 800e19e:	d103      	bne.n	800e1a8 <VL53L1_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2280      	movs	r2, #128	; 0x80
 800e1a4:	701a      	strb	r2, [r3, #0]
 800e1a6:	e005      	b.n	800e1b4 <VL53L1_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	3301      	adds	r3, #1
 800e1ae:	b2da      	uxtb	r2, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	701a      	strb	r2, [r3, #0]
 800e1ba:	e005      	b.n	800e1c8 <VL53L1_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	b2da      	uxtb	r2, r3
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800e1c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3724      	adds	r7, #36	; 0x24
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <VL53L1_set_histogram_multizone_initial_bin_config>:

VL53L1_Error VL53L1_set_histogram_multizone_initial_bin_config(
	VL53L1_zone_config_t		*pzone_cfg,
	VL53L1_histogram_config_t	*phist_cfg,
	VL53L1_histogram_config_t	*pmulti_hist)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b087      	sub	sp, #28
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	607a      	str	r2, [r7, #4]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	d118      	bne.n	800e224 <VL53L1_set_histogram_multizone_initial_bin_config+0x4c>
			VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	719a      	strb	r2, [r3, #6]
 800e222:	e03a      	b.n	800e29a <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e22a:	2b02      	cmp	r3, #2
 800e22c:	d118      	bne.n	800e260 <VL53L1_set_histogram_multizone_initial_bin_config+0x88>
			VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	719a      	strb	r2, [r3, #6]
 800e25e:	e01c      	b.n	800e29a <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e266:	2b03      	cmp	r3, #3
 800e268:	d117      	bne.n	800e29a <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	70da      	strb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	719a      	strb	r2, [r3, #6]
	}

	LOG_FUNCTION_END(status);
	return status;
 800e29a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	371c      	adds	r7, #28
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr

0800e2aa <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b08a      	sub	sp, #40	; 0x28
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	60f8      	str	r0, [r7, #12]
 800e2b2:	607a      	str	r2, [r7, #4]
 800e2b4:	461a      	mov	r2, r3
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	72fb      	strb	r3, [r7, #11]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	813b      	strh	r3, [r7, #8]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	3318      	adds	r3, #24
 800e2c8:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53L1_calc_macro_period_us(
 800e2d2:	7afa      	ldrb	r2, [r7, #11]
 800e2d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e2d6:	4611      	mov	r1, r2
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7fe f8ca 	bl	800c472 <VL53L1_calc_macro_period_us>
 800e2de:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800e2e0:	6a3b      	ldr	r3, [r7, #32]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d101      	bne.n	800e2ea <VL53L1_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	623b      	str	r3, [r7, #32]



	timeout_mclks = phasecal_timeout_us << 12;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	031b      	lsls	r3, r3, #12
 800e2ee:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800e2f0:	6a3b      	ldr	r3, [r7, #32]
 800e2f2:	085b      	lsrs	r3, r3, #1
 800e2f4:	69ba      	ldr	r2, [r7, #24]
 800e2f6:	4413      	add	r3, r2
 800e2f8:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800e2fa:	69ba      	ldr	r2, [r7, #24]
 800e2fc:	6a3b      	ldr	r3, [r7, #32]
 800e2fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800e302:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800e304:	69bb      	ldr	r3, [r7, #24]
 800e306:	2bff      	cmp	r3, #255	; 0xff
 800e308:	d904      	bls.n	800e314 <VL53L1_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800e30a:	69fb      	ldr	r3, [r7, #28]
 800e30c:	22ff      	movs	r2, #255	; 0xff
 800e30e:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800e312:	e004      	b.n	800e31e <VL53L1_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800e314:	69bb      	ldr	r3, [r7, #24]
 800e316:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800e31e:	69fb      	ldr	r3, [r7, #28]
 800e320:	7afa      	ldrb	r2, [r7, #11]
 800e322:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e



	if (status == VL53L1_ERROR_NONE)
 800e326:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d10a      	bne.n	800e344 <VL53L1_set_ref_spad_char_config+0x9a>
		status =
			VL53L1_WrByte(
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 800e334:	461a      	mov	r2, r3
 800e336:	214b      	movs	r1, #75	; 0x4b
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	f007 f9bd 	bl	80156b8 <VL53L1_WrByte>
 800e33e:	4603      	mov	r3, r0
 800e340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 800e344:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d10a      	bne.n	800e362 <VL53L1_set_ref_spad_char_config+0xb8>
		status =
			VL53L1_WrByte(
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800e352:	461a      	mov	r2, r3
 800e354:	2160      	movs	r1, #96	; 0x60
 800e356:	68f8      	ldr	r0, [r7, #12]
 800e358:	f007 f9ae 	bl	80156b8 <VL53L1_WrByte>
 800e35c:	4603      	mov	r3, r0
 800e35e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800e362:	69fb      	ldr	r3, [r7, #28]
 800e364:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800e368:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800e36a:	69fb      	ldr	r3, [r7, #28]
 800e36c:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800e370:	757b      	strb	r3, [r7, #21]

	if (status == VL53L1_ERROR_NONE)
 800e372:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e376:	2b00      	cmp	r3, #0
 800e378:	d109      	bne.n	800e38e <VL53L1_set_ref_spad_char_config+0xe4>
		status =
			VL53L1_WriteMulti(
 800e37a:	f107 0214 	add.w	r2, r7, #20
 800e37e:	2302      	movs	r3, #2
 800e380:	2178      	movs	r1, #120	; 0x78
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f007 f92c 	bl	80155e0 <VL53L1_WriteMulti>
 800e388:	4603      	mov	r3, r0
 800e38a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800e38e:	69fb      	ldr	r3, [r7, #28]
 800e390:	893a      	ldrh	r2, [r7, #8]
 800e392:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53L1_ERROR_NONE)
 800e396:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d108      	bne.n	800e3b0 <VL53L1_set_ref_spad_char_config+0x106>
		status =
			VL53L1_WrWord(
 800e39e:	893b      	ldrh	r3, [r7, #8]
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	211c      	movs	r1, #28
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f007 f9b1 	bl	801570c <VL53L1_WrWord>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53L1_ERROR_NONE)
 800e3b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d108      	bne.n	800e3ca <VL53L1_set_ref_spad_char_config+0x120>
		status =
			VL53L1_WrWord(
 800e3b8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	2164      	movs	r1, #100	; 0x64
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f007 f9a4 	bl	801570c <VL53L1_WrWord>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53L1_ERROR_NONE)
 800e3ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d108      	bne.n	800e3e4 <VL53L1_set_ref_spad_char_config+0x13a>
		status =
			VL53L1_WrWord(
 800e3d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	2166      	movs	r1, #102	; 0x66
 800e3d8:	68f8      	ldr	r0, [r7, #12]
 800e3da:	f007 f997 	bl	801570c <VL53L1_WrWord>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800e3e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3728      	adds	r7, #40	; 0x28
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}

0800e3f0 <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 800e3f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e3f4:	b0a2      	sub	sp, #136	; 0x88
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e402:	3318      	adds	r3, #24
 800e404:	673b      	str	r3, [r7, #112]	; 0x70
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800e406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e408:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800e40c:	3308      	adds	r3, #8
 800e40e:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53L1_smudge_corrector_config_t *pconfig =
 800e410:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e412:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800e416:	3318      	adds	r3, #24
 800e418:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800e41a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e41c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800e420:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
 800e422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e424:	663b      	str	r3, [r7, #96]	; 0x60
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);
 800e426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e428:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e42c:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800e42e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e430:	69db      	ldr	r3, [r3, #28]
 800e432:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
 800e436:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d103      	bne.n	800e446 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x56>
		peak_duration_us = 1000;
 800e43e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e442:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	temp64a = pxmonitor->VL53L1_p_021 +
 800e446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53L1_p_020;
 800e44a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53L1_p_021 +
 800e44e:	4413      	add	r3, r2
 800e450:	2200      	movs	r2, #0
 800e452:	461c      	mov	r4, r3
 800e454:	4615      	mov	r5, r2
 800e456:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800e45a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800e45e:	4622      	mov	r2, r4
 800e460:	462b      	mov	r3, r5
 800e462:	f04f 0000 	mov.w	r0, #0
 800e466:	f04f 0100 	mov.w	r1, #0
 800e46a:	0159      	lsls	r1, r3, #5
 800e46c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e470:	0150      	lsls	r0, r2, #5
 800e472:	4602      	mov	r2, r0
 800e474:	460b      	mov	r3, r1
 800e476:	ebb2 0804 	subs.w	r8, r2, r4
 800e47a:	eb63 0905 	sbc.w	r9, r3, r5
 800e47e:	f04f 0200 	mov.w	r2, #0
 800e482:	f04f 0300 	mov.w	r3, #0
 800e486:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800e48a:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800e48e:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800e492:	4690      	mov	r8, r2
 800e494:	4699      	mov	r9, r3
 800e496:	eb18 0304 	adds.w	r3, r8, r4
 800e49a:	633b      	str	r3, [r7, #48]	; 0x30
 800e49c:	eb49 0305 	adc.w	r3, r9, r5
 800e4a0:	637b      	str	r3, [r7, #52]	; 0x34
 800e4a2:	f04f 0200 	mov.w	r2, #0
 800e4a6:	f04f 0300 	mov.w	r3, #0
 800e4aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e4ae:	4629      	mov	r1, r5
 800e4b0:	00cb      	lsls	r3, r1, #3
 800e4b2:	4621      	mov	r1, r4
 800e4b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e4b8:	4621      	mov	r1, r4
 800e4ba:	00ca      	lsls	r2, r1, #3
 800e4bc:	4610      	mov	r0, r2
 800e4be:	4619      	mov	r1, r3
 800e4c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	643b      	str	r3, [r7, #64]	; 0x40
 800e4c8:	647a      	str	r2, [r7, #68]	; 0x44
 800e4ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e4ce:	f7f2 fb93 	bl	8000bf8 <__aeabi_uldivmod>
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800e4da:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800e4de:	4622      	mov	r2, r4
 800e4e0:	462b      	mov	r3, r5
 800e4e2:	f04f 0000 	mov.w	r0, #0
 800e4e6:	f04f 0100 	mov.w	r1, #0
 800e4ea:	0159      	lsls	r1, r3, #5
 800e4ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e4f0:	0150      	lsls	r0, r2, #5
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	ebb2 0a04 	subs.w	sl, r2, r4
 800e4fa:	eb63 0b05 	sbc.w	fp, r3, r5
 800e4fe:	f04f 0200 	mov.w	r2, #0
 800e502:	f04f 0300 	mov.w	r3, #0
 800e506:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e50a:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800e50e:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800e512:	4692      	mov	sl, r2
 800e514:	469b      	mov	fp, r3
 800e516:	eb1a 0304 	adds.w	r3, sl, r4
 800e51a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e51c:	eb4b 0305 	adc.w	r3, fp, r5
 800e520:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e522:	f04f 0200 	mov.w	r2, #0
 800e526:	f04f 0300 	mov.w	r3, #0
 800e52a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800e52e:	4629      	mov	r1, r5
 800e530:	00cb      	lsls	r3, r1, #3
 800e532:	4621      	mov	r1, r4
 800e534:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e538:	4621      	mov	r1, r4
 800e53a:	00ca      	lsls	r2, r1, #3
 800e53c:	4610      	mov	r0, r2
 800e53e:	4619      	mov	r1, r3
 800e540:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e544:	2200      	movs	r2, #0
 800e546:	63bb      	str	r3, [r7, #56]	; 0x38
 800e548:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e54a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e54e:	f7f2 fb53 	bl	8000bf8 <__aeabi_uldivmod>
 800e552:	4602      	mov	r2, r0
 800e554:	460b      	mov	r3, r1
 800e556:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 800e55a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e560:	8ad2      	ldrh	r2, [r2, #22]
 800e562:	fb02 f303 	mul.w	r3, r2, r3
 800e566:	2200      	movs	r2, #0
 800e568:	623b      	str	r3, [r7, #32]
 800e56a:	627a      	str	r2, [r7, #36]	; 0x24
 800e56c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e570:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 800e574:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800e578:	4313      	orrs	r3, r2
 800e57a:	d105      	bne.n	800e588 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800e57c:	f04f 0201 	mov.w	r2, #1
 800e580:	f04f 0300 	mov.w	r3, #0
 800e584:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 800e588:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e58c:	4602      	mov	r2, r0
 800e58e:	460b      	mov	r3, r1
 800e590:	f04f 0400 	mov.w	r4, #0
 800e594:	f04f 0500 	mov.w	r5, #0
 800e598:	015d      	lsls	r5, r3, #5
 800e59a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800e59e:	0154      	lsls	r4, r2, #5
 800e5a0:	4622      	mov	r2, r4
 800e5a2:	462b      	mov	r3, r5
 800e5a4:	1a14      	subs	r4, r2, r0
 800e5a6:	61bc      	str	r4, [r7, #24]
 800e5a8:	eb63 0301 	sbc.w	r3, r3, r1
 800e5ac:	61fb      	str	r3, [r7, #28]
 800e5ae:	f04f 0200 	mov.w	r2, #0
 800e5b2:	f04f 0300 	mov.w	r3, #0
 800e5b6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800e5ba:	464c      	mov	r4, r9
 800e5bc:	00a3      	lsls	r3, r4, #2
 800e5be:	4644      	mov	r4, r8
 800e5c0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e5c4:	4644      	mov	r4, r8
 800e5c6:	00a2      	lsls	r2, r4, #2
 800e5c8:	4614      	mov	r4, r2
 800e5ca:	461d      	mov	r5, r3
 800e5cc:	4623      	mov	r3, r4
 800e5ce:	181b      	adds	r3, r3, r0
 800e5d0:	613b      	str	r3, [r7, #16]
 800e5d2:	462b      	mov	r3, r5
 800e5d4:	eb41 0303 	adc.w	r3, r1, r3
 800e5d8:	617b      	str	r3, [r7, #20]
 800e5da:	f04f 0200 	mov.w	r2, #0
 800e5de:	f04f 0300 	mov.w	r3, #0
 800e5e2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e5e6:	4629      	mov	r1, r5
 800e5e8:	02cb      	lsls	r3, r1, #11
 800e5ea:	4621      	mov	r1, r4
 800e5ec:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800e5f0:	4621      	mov	r1, r4
 800e5f2:	02ca      	lsls	r2, r1, #11
 800e5f4:	461c      	mov	r4, r3
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800e5fc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800e600:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e604:	f7f2 faf8 	bl	8000bf8 <__aeabi_uldivmod>
 800e608:	4602      	mov	r2, r0
 800e60a:	460b      	mov	r3, r1
 800e60c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 800e610:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e614:	4602      	mov	r2, r0
 800e616:	460b      	mov	r3, r1
 800e618:	f04f 0400 	mov.w	r4, #0
 800e61c:	f04f 0500 	mov.w	r5, #0
 800e620:	015d      	lsls	r5, r3, #5
 800e622:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800e626:	0154      	lsls	r4, r2, #5
 800e628:	4622      	mov	r2, r4
 800e62a:	462b      	mov	r3, r5
 800e62c:	1a14      	subs	r4, r2, r0
 800e62e:	60bc      	str	r4, [r7, #8]
 800e630:	eb63 0301 	sbc.w	r3, r3, r1
 800e634:	60fb      	str	r3, [r7, #12]
 800e636:	f04f 0200 	mov.w	r2, #0
 800e63a:	f04f 0300 	mov.w	r3, #0
 800e63e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800e642:	464c      	mov	r4, r9
 800e644:	00a3      	lsls	r3, r4, #2
 800e646:	4644      	mov	r4, r8
 800e648:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e64c:	4644      	mov	r4, r8
 800e64e:	00a2      	lsls	r2, r4, #2
 800e650:	4614      	mov	r4, r2
 800e652:	461d      	mov	r5, r3
 800e654:	4623      	mov	r3, r4
 800e656:	181b      	adds	r3, r3, r0
 800e658:	603b      	str	r3, [r7, #0]
 800e65a:	462b      	mov	r3, r5
 800e65c:	eb41 0303 	adc.w	r3, r1, r3
 800e660:	607b      	str	r3, [r7, #4]
 800e662:	f04f 0200 	mov.w	r2, #0
 800e666:	f04f 0300 	mov.w	r3, #0
 800e66a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e66e:	4629      	mov	r1, r5
 800e670:	02cb      	lsls	r3, r1, #11
 800e672:	4621      	mov	r1, r4
 800e674:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800e678:	4621      	mov	r1, r4
 800e67a:	02ca      	lsls	r2, r1, #11
 800e67c:	461c      	mov	r4, r3
 800e67e:	4613      	mov	r3, r2
 800e680:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800e684:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800e688:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e68c:	f7f2 fab4 	bl	8000bf8 <__aeabi_uldivmod>
 800e690:	4602      	mov	r2, r0
 800e692:	460b      	mov	r3, r1
 800e694:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 800e698:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e69a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e69c:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800e69e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6a0:	685b      	ldr	r3, [r3, #4]
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	d802      	bhi.n	800e6ac <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800e6a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6a8:	2202      	movs	r2, #2
 800e6aa:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800e6ac:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3788      	adds	r7, #136	; 0x88
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800e6bc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53L1_smudge_corrector_config_t	*pconfig,
	VL53L1_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b096      	sub	sp, #88	; 0x58
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	607a      	str	r2, [r7, #4]
 800e6c8:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	3318      	adds	r3, #24
 800e6d4:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t histo_merge_nb;
	uint8_t i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800e6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6d8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800e6dc:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800e6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6e0:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800e6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800e6e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6e8:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	d108      	bne.n	800e702 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e6f6:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d101      	bne.n	800e702 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
 800e6fe:	2301      	movs	r3, #1
 800e700:	e000      	b.n	800e704 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x48>
 800e702:	2300      	movs	r3, #0
 800e704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		 VL53L1_PRESETMODE_RANGING);


	if (add_smudge == 1) {
 800e708:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d107      	bne.n	800e720 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x64>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	889b      	ldrh	r3, [r3, #4]
 800e714:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	609a      	str	r2, [r3, #8]
 800e71e:	e002      	b.n	800e726 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x6a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	68ba      	ldr	r2, [r7, #8]
 800e724:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800e726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e728:	689b      	ldr	r3, [r3, #8]
 800e72a:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800e72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e72e:	899b      	ldrh	r3, [r3, #12]
 800e730:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800e734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e736:	89db      	ldrh	r3, [r3, #14]
 800e738:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e742:	2b00      	cmp	r3, #0
 800e744:	d004      	beq.n	800e750 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x94>
		(pconfig->scaler_calc_method == 1)) &&
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d125      	bne.n	800e79c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800e750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e752:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800e754:	2b00      	cmp	r3, #0
 800e756:	d021      	beq.n	800e79c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800e758:	f107 0313 	add.w	r3, r7, #19
 800e75c:	4619      	mov	r1, r3
 800e75e:	68f8      	ldr	r0, [r7, #12]
 800e760:	f000 fe44 	bl	800f3ec <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800e764:	7cfb      	ldrb	r3, [r7, #19]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d101      	bne.n	800e76e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			histo_merge_nb = 1;
 800e76a:	2301      	movs	r3, #1
 800e76c:	74fb      	strb	r3, [r7, #19]
		if (!merge_enabled)
 800e76e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e772:	2b00      	cmp	r3, #0
 800e774:	d103      	bne.n	800e77e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
			orig_xtalk_offset =
 800e776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	653b      	str	r3, [r7, #80]	; 0x50
 800e77c:	e006      	b.n	800e78c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800e77e:	7cfb      	ldrb	r3, [r7, #19]
 800e780:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800e782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e784:	3202      	adds	r2, #2
 800e786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e78a:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800e78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78e:	889b      	ldrh	r3, [r3, #4]
 800e790:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800e794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e796:	88db      	ldrh	r3, [r3, #6]
 800e798:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d10a      	bne.n	800e7bc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 800e7a6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d106      	bne.n	800e7bc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x01;
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	795b      	ldrb	r3, [r3, #5]
 800e7b2:	f043 0301 	orr.w	r3, r3, #1
 800e7b6:	b2da      	uxtb	r2, r3
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d10a      	bne.n	800e7dc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
 800e7c6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d106      	bne.n	800e7dc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
		pout->gradient_zero_flag |= 0x02;
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	795b      	ldrb	r3, [r3, #5]
 800e7d2:	f043 0302 	orr.w	r3, r3, #2
 800e7d6:	b2da      	uxtb	r2, r3
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800e7dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d101      	bne.n	800e7e6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x12a>
		orig_xtalk_offset = 1;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	d108      	bne.n	800e802 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x146>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e7fc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800e800:	e019      	b.n	800e836 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x17a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800e802:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e806:	019b      	lsls	r3, r3, #6
 800e808:	461a      	mov	r2, r3
 800e80a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e80c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e810:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800e81a:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800e81c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800e820:	019b      	lsls	r3, r3, #6
 800e822:	461a      	mov	r2, r3
 800e824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e826:	fbb2 f3f3 	udiv	r3, r2, r3
 800e82a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e834:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d12a      	bne.n	800e896 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1da>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	689b      	ldr	r3, [r3, #8]
 800e844:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800e848:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800e84c:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800e84e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e850:	119b      	asrs	r3, r3, #6
 800e852:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800e854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e85a:	db02      	blt.n	800e862 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1a6>
			itemp32 = 0xFFFF;
 800e85c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e860:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800e862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e864:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800e872:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800e876:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800e878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e87a:	119b      	asrs	r3, r3, #6
 800e87c:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800e87e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e884:	db02      	blt.n	800e88c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1d0>
			itemp32 = 0xFFFF;
 800e886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e88a:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800e88c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e88e:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	81da      	strh	r2, [r3, #14]
 800e894:	e042      	b.n	800e91c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>
	} else if (pconfig->scaler_calc_method == 1) {
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d13d      	bne.n	800e91c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800e8a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e8a6:	1ad3      	subs	r3, r2, r3
 800e8a8:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800e8aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	da00      	bge.n	800e8b2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
 800e8b0:	330f      	adds	r3, #15
 800e8b2:	111b      	asrs	r3, r3, #4
 800e8b4:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800e8b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800e8bc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e8c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e8c2:	4413      	add	r3, r2
 800e8c4:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800e8c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8cc:	db02      	blt.n	800e8d4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x218>
			itemp32 = 0xFFFF;
 800e8ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e8d2:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800e8d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8d6:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800e8e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e8e2:	1ad3      	subs	r3, r2, r3
 800e8e4:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800e8e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8e8:	4a51      	ldr	r2, [pc, #324]	; (800ea30 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x374>)
 800e8ea:	fb82 1203 	smull	r1, r2, r2, r3
 800e8ee:	1152      	asrs	r2, r2, #5
 800e8f0:	17db      	asrs	r3, r3, #31
 800e8f2:	1ad3      	subs	r3, r2, r3
 800e8f4:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800e8f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800e8fc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800e900:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e902:	4413      	add	r3, r2
 800e904:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800e906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e90c:	db02      	blt.n	800e914 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x258>
			itemp32 = 0xFFFF;
 800e90e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e912:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800e914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e916:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	81da      	strh	r2, [r3, #14]
	}


	if (pconfig->smudge_corr_apply_enabled == 1 &&
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	785b      	ldrb	r3, [r3, #1]
 800e920:	2b01      	cmp	r3, #1
 800e922:	d177      	bne.n	800ea14 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
 800e924:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d073      	beq.n	800ea14 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
			(soft_update != 1)) {
		pout->new_xtalk_applied_flag = 1;
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	2201      	movs	r2, #1
 800e930:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	689b      	ldr	r3, [r3, #8]
 800e936:	627b      	str	r3, [r7, #36]	; 0x24

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800e938:	f107 0313 	add.w	r3, r7, #19
 800e93c:	4619      	mov	r1, r3
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f000 fd54 	bl	800f3ec <VL53L1_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800e944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e946:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800e94a:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800e94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94e:	3308      	adds	r3, #8
 800e950:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 800e952:	7cfb      	ldrb	r3, [r7, #19]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d041      	beq.n	800e9dc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800e958:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d03d      	beq.n	800e9dc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800e960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e962:	2b00      	cmp	r3, #0
 800e964:	d03a      	beq.n	800e9dc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			cXtalk =
 800e966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	61fb      	str	r3, [r7, #28]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e972:	fb03 f202 	mul.w	r2, r3, r2
 800e976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e978:	fbb2 f3f3 	udiv	r3, r2, r3
 800e97c:	61bb      	str	r3, [r7, #24]
			if ((max ==  0)||
 800e97e:	6a3b      	ldr	r3, [r7, #32]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d004      	beq.n	800e98e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800e988:	69ba      	ldr	r2, [r7, #24]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d303      	bcc.n	800e996 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2da>
				pout->new_xtalk_applied_flag = 0;
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	2200      	movs	r2, #0
 800e992:	719a      	strb	r2, [r3, #6]
 800e994:	e022      	b.n	800e9dc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			else {
				incXtalk = nXtalk / max;
 800e996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e998:	6a3b      	ldr	r3, [r7, #32]
 800e99a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e99e:	617b      	str	r3, [r7, #20]
				cval = 0;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800e9aa:	e00e      	b.n	800e9ca <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
					cval += incXtalk;
 800e9ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	4413      	add	r3, r2
 800e9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800e9b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9b8:	601a      	str	r2, [r3, #0]
					pcpo++;
 800e9ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9bc:	3304      	adds	r3, #4
 800e9be:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800e9c0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800e9ca:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800e9ce:	6a3b      	ldr	r3, [r7, #32]
 800e9d0:	3b01      	subs	r3, #1
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d3ea      	bcc.n	800e9ac <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2f0>
				}
				*pcpo = nXtalk;
 800e9d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9da:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	799b      	ldrb	r3, [r3, #6]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d017      	beq.n	800ea14 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800e9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ea:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800e9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f4:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800e9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fe:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	789b      	ldrb	r3, [r3, #2]
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d105      	bne.n	800ea14 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

			pconfig->smudge_corr_apply_enabled = 0;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2200      	movs	r2, #0
 800ea12:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800ea14:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d002      	beq.n	800ea22 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x366>
		pout->smudge_corr_valid = 1;
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	2201      	movs	r2, #1
 800ea20:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800ea22:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3758      	adds	r7, #88	; 0x58
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	66666667 	.word	0x66666667

0800ea34 <VL53L1_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53L1_Error VL53L1_dynamic_xtalk_correction_corrector(
	VL53L1_DEV                          Dev
	)
{
 800ea34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ea38:	b0a2      	sub	sp, #136	; 0x88
 800ea3a:	af02      	add	r7, sp, #8
 800ea3c:	6278      	str	r0, [r7, #36]	; 0x24



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ea44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea46:	3318      	adds	r3, #24
 800ea48:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800ea4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800ea50:	3308      	adds	r3, #8
 800ea52:	667b      	str	r3, [r7, #100]	; 0x64
	VL53L1_smudge_corrector_config_t *pconfig =
 800ea54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea56:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ea5a:	3318      	adds	r3, #24
 800ea5c:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800ea5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea60:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800ea64:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53L1_smudge_corrector_data_t *pout =
 800ea66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea68:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ea6c:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53L1_range_results_t  *pR = &(pres->range_results);
 800ea6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea70:	657b      	str	r3, [r7, #84]	; 0x54
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800ea72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea74:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800ea78:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 800ea80:	2300      	movs	r3, #0
 800ea82:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 800ea86:	2300      	movs	r3, #0
 800ea88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 800ea92:	2300      	movs	r3, #0
 800ea94:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 800ea96:	f04f 0200 	mov.w	r2, #0
 800ea9a:	f04f 0300 	mov.w	r3, #0
 800ea9e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 800eaac:	2300      	movs	r3, #0
 800eaae:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 800eab0:	2300      	movs	r3, #0
 800eab2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 800eab4:	2300      	movs	r3, #0
 800eab6:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 800eab8:	2300      	movs	r3, #0
 800eaba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 800eabe:	2300      	movs	r3, #0
 800eac0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t merge_enabled;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800eac4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eac6:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d108      	bne.n	800eae0 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800eace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ead4:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800ead8:	2b01      	cmp	r3, #1
 800eada:	d101      	bne.n	800eae0 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
 800eadc:	2301      	movs	r3, #1
 800eade:	e000      	b.n	800eae2 <VL53L1_dynamic_xtalk_correction_corrector+0xae>
 800eae0:	2300      	movs	r3, #0
 800eae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 VL53L1_PRESETMODE_RANGING);

	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800eae6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800eaea:	4619      	mov	r1, r3
 800eaec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eaee:	f000 fc7d 	bl	800f3ec <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 800eaf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d003      	beq.n	800eb02 <VL53L1_dynamic_xtalk_correction_corrector+0xce>
 800eafa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d102      	bne.n	800eb08 <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
		histo_merge_nb = 1;
 800eb02:	2301      	movs	r3, #1
 800eb04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800eb08:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800eb0a:	f000 fb15 	bl	800f138 <VL53L1_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800eb0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d00a      	beq.n	800eb2c <VL53L1_dynamic_xtalk_correction_corrector+0xf8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 800eb16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eb1e:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800eb22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb24:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d901      	bls.n	800eb30 <VL53L1_dynamic_xtalk_correction_corrector+0xfc>
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	e000      	b.n	800eb32 <VL53L1_dynamic_xtalk_correction_corrector+0xfe>
 800eb30:	2300      	movs	r3, #0
 800eb32:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete = ((!merge_enabled) ||
 800eb36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d006      	beq.n	800eb4c <VL53L1_dynamic_xtalk_correction_corrector+0x118>
	(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800eb3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb40:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 800eb44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
	merging_complete = ((!merge_enabled) ||
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d101      	bne.n	800eb50 <VL53L1_dynamic_xtalk_correction_corrector+0x11c>
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	e000      	b.n	800eb52 <VL53L1_dynamic_xtalk_correction_corrector+0x11e>
 800eb50:	2300      	movs	r3, #0
 800eb52:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800eb56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb58:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d10e      	bne.n	800eb7c <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pconfig->smudge_corr_enabled == 1) &&
 800eb5e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d00a      	beq.n	800eb7c <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pR->xmonitor.range_status
 800eb66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb68:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800eb6c:	2b09      	cmp	r3, #9
 800eb6e:	d105      	bne.n	800eb7c <VL53L1_dynamic_xtalk_correction_corrector+0x148>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800eb70:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d001      	beq.n	800eb7c <VL53L1_dynamic_xtalk_correction_corrector+0x148>
 800eb78:	2301      	movs	r3, #1
 800eb7a:	e000      	b.n	800eb7e <VL53L1_dynamic_xtalk_correction_corrector+0x14a>
 800eb7c:	2300      	movs	r3, #0
	run_smudge_detection =
 800eb7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800eb82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb84:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800eb88:	2b09      	cmp	r3, #9
 800eb8a:	f000 80a6 	beq.w	800ecda <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800eb8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb90:	781b      	ldrb	r3, [r3, #0]
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	f040 80a1 	bne.w	800ecda <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>

		run_nodetect = 2;
 800eb98:	2302      	movs	r3, #2
 800eb9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800eb9e:	2300      	movs	r3, #0
 800eba0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800eba4:	e02d      	b.n	800ec02 <VL53L1_dynamic_xtalk_correction_corrector+0x1ce>
			if (pR->VL53L1_p_002[i].range_status ==
 800eba6:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800ebaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ebac:	234c      	movs	r3, #76	; 0x4c
 800ebae:	fb01 f303 	mul.w	r3, r1, r3
 800ebb2:	4413      	add	r3, r2
 800ebb4:	335e      	adds	r3, #94	; 0x5e
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	2b09      	cmp	r3, #9
 800ebba:	d11d      	bne.n	800ebf8 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				VL53L1_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53L1_p_002[i].median_range_mm
 800ebbc:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800ebc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ebc2:	234c      	movs	r3, #76	; 0x4c
 800ebc4:	fb01 f303 	mul.w	r3, r1, r3
 800ebc8:	4413      	add	r3, r2
 800ebca:	335a      	adds	r3, #90	; 0x5a
 800ebcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ebd0:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800ebd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ebd4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53L1_p_002[i].median_range_mm
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	dc03      	bgt.n	800ebe2 <VL53L1_dynamic_xtalk_correction_corrector+0x1ae>
					run_nodetect = 0;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800ebe0:	e00a      	b.n	800ebf8 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				} else {
					if (run_nodetect == 2) {
 800ebe2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ebe6:	2b02      	cmp	r3, #2
 800ebe8:	d106      	bne.n	800ebf8 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
						run_nodetect = 1;
 800ebea:	2301      	movs	r3, #1
 800ebec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 800ebf0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ebf4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800ebf8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ec02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec04:	7c9a      	ldrb	r2, [r3, #18]
 800ec06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d3cb      	bcc.n	800eba6 <VL53L1_dynamic_xtalk_correction_corrector+0x172>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800ec0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ec12:	2b02      	cmp	r3, #2
 800ec14:	d102      	bne.n	800ec1c <VL53L1_dynamic_xtalk_correction_corrector+0x1e8>

			run_nodetect = 0;
 800ec16:	2300      	movs	r3, #0
 800ec18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53L1_p_002[nodetect_index].ambient_count_rate_mcps;
 800ec1c:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 800ec20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ec22:	234c      	movs	r3, #76	; 0x4c
 800ec24:	fb01 f303 	mul.w	r3, r1, r3
 800ec28:	4413      	add	r3, r2
 800ec2a:	3348      	adds	r3, #72	; 0x48
 800ec2c:	881b      	ldrh	r3, [r3, #0]
 800ec2e:	863b      	strh	r3, [r7, #48]	; 0x30

		if (run_nodetect == 1) {
 800ec30:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	d150      	bne.n	800ecda <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>




			utemp64 = 1000 * ((uint64_t)amr);
 800ec38:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	469a      	mov	sl, r3
 800ec3e:	4693      	mov	fp, r2
 800ec40:	4652      	mov	r2, sl
 800ec42:	465b      	mov	r3, fp
 800ec44:	f04f 0000 	mov.w	r0, #0
 800ec48:	f04f 0100 	mov.w	r1, #0
 800ec4c:	0159      	lsls	r1, r3, #5
 800ec4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ec52:	0150      	lsls	r0, r2, #5
 800ec54:	4602      	mov	r2, r0
 800ec56:	460b      	mov	r3, r1
 800ec58:	ebb2 040a 	subs.w	r4, r2, sl
 800ec5c:	eb63 050b 	sbc.w	r5, r3, fp
 800ec60:	f04f 0200 	mov.w	r2, #0
 800ec64:	f04f 0300 	mov.w	r3, #0
 800ec68:	00ab      	lsls	r3, r5, #2
 800ec6a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800ec6e:	00a2      	lsls	r2, r4, #2
 800ec70:	4614      	mov	r4, r2
 800ec72:	461d      	mov	r5, r3
 800ec74:	eb14 080a 	adds.w	r8, r4, sl
 800ec78:	eb45 090b 	adc.w	r9, r5, fp
 800ec7c:	f04f 0200 	mov.w	r2, #0
 800ec80:	f04f 0300 	mov.w	r3, #0
 800ec84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ec88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ec8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ec90:	4690      	mov	r8, r2
 800ec92:	4699      	mov	r9, r3
 800ec94:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 800ec98:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ec9c:	f04f 0200 	mov.w	r2, #0
 800eca0:	f04f 0300 	mov.w	r3, #0
 800eca4:	024b      	lsls	r3, r1, #9
 800eca6:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800ecaa:	0242      	lsls	r2, r0, #9
 800ecac:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800ecb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ecb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	61bb      	str	r3, [r7, #24]
 800ecb8:	61fa      	str	r2, [r7, #28]
 800ecba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ecbe:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800ecc2:	4621      	mov	r1, r4
 800ecc4:	428a      	cmp	r2, r1
 800ecc6:	4629      	mov	r1, r5
 800ecc8:	418b      	sbcs	r3, r1
 800ecca:	d203      	bcs.n	800ecd4 <VL53L1_dynamic_xtalk_correction_corrector+0x2a0>
				run_nodetect = 1;
 800eccc:	2301      	movs	r3, #1
 800ecce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800ecd2:	e002      	b.n	800ecda <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
			else
				run_nodetect = 0;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 800ecda:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	f000 810b 	beq.w	800eefa <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>

		pint->nodetect_counter = 0;
 800ece4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ece6:	2200      	movs	r2, #0
 800ece8:	611a      	str	r2, [r3, #16]


		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 800ecea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ecec:	f7ff fb80 	bl	800e3f0 <VL53L1_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800ecf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecf2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800ecf6:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53L1_p_012;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800ecf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800ecfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed00:	009b      	lsls	r3, r3, #2
 800ed02:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800ed04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed06:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800ed0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed10:	1ad2      	subs	r2, r2, r3
 800ed12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed14:	4413      	add	r3, r2
 800ed16:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800ed18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	da02      	bge.n	800ed24 <VL53L1_dynamic_xtalk_correction_corrector+0x2f0>
			itemp32 = itemp32 * (-1);
 800ed1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed20:	425b      	negs	r3, r3
 800ed22:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800ed24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed26:	699b      	ldr	r3, [r3, #24]
 800ed28:	461a      	mov	r2, r3
 800ed2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	dd0c      	ble.n	800ed4a <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800ed30:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 800ed32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800ed34:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800ed36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	da03      	bge.n	800ed44 <VL53L1_dynamic_xtalk_correction_corrector+0x310>
				pout->single_xtalk_delta_flag = 1;
 800ed3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed3e:	2201      	movs	r2, #1
 800ed40:	709a      	strb	r2, [r3, #2]
 800ed42:	e002      	b.n	800ed4a <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800ed44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed46:	2202      	movs	r2, #2
 800ed48:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800ed4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	1c5a      	adds	r2, r3, #1
 800ed50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed52:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800ed54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed56:	681a      	ldr	r2, [r3, #0]
 800ed58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed5a:	695b      	ldr	r3, [r3, #20]
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d906      	bls.n	800ed6e <VL53L1_dynamic_xtalk_correction_corrector+0x33a>
			pout->sample_limit_exceeded_flag = 1;
 800ed60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed62:	2201      	movs	r2, #1
 800ed64:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800ed66:	2302      	movs	r3, #2
 800ed68:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800ed6c:	e014      	b.n	800ed98 <VL53L1_dynamic_xtalk_correction_corrector+0x364>
		} else {
			pint->accumulator = pint->accumulator +
 800ed6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ed74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ed76:	2000      	movs	r0, #0
 800ed78:	6139      	str	r1, [r7, #16]
 800ed7a:	6178      	str	r0, [r7, #20]
 800ed7c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800ed80:	4621      	mov	r1, r4
 800ed82:	1851      	adds	r1, r2, r1
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	4629      	mov	r1, r5
 800ed88:	eb43 0101 	adc.w	r1, r3, r1
 800ed8c:	60f9      	str	r1, [r7, #12]
 800ed8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ed94:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800ed98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed9a:	681a      	ldr	r2, [r3, #0]
 800ed9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d202      	bcs.n	800edaa <VL53L1_dynamic_xtalk_correction_corrector+0x376>
			continue_processing = CONT_NEXT_LOOP;
 800eda4:	2301      	movs	r3, #1
 800eda6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800edaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800edb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2200      	movs	r2, #0
 800edb6:	603b      	str	r3, [r7, #0]
 800edb8:	607a      	str	r2, [r7, #4]
 800edba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edbe:	f7f1 ff1b 	bl	8000bf8 <__aeabi_uldivmod>
 800edc2:	4602      	mov	r2, r0
 800edc4:	460b      	mov	r3, r1
		xtalk_offset_out =
 800edc6:	4613      	mov	r3, r2
 800edc8:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800edca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800edcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edce:	1ad2      	subs	r2, r2, r3
 800edd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edd2:	4413      	add	r3, r2
 800edd4:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800edd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edd8:	2b00      	cmp	r3, #0
 800edda:	da02      	bge.n	800ede2 <VL53L1_dynamic_xtalk_correction_corrector+0x3ae>
			itemp32 = itemp32 * (-1);
 800eddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edde:	425b      	negs	r3, r3
 800ede0:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 800ede2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d112      	bne.n	800ee10 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800edea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800edec:	69db      	ldr	r3, [r3, #28]
 800edee:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800edf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edf2:	4293      	cmp	r3, r2
 800edf4:	db0c      	blt.n	800ee10 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800edf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 800edf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800edfa:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800edfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800edfe:	429a      	cmp	r2, r3
 800ee00:	da03      	bge.n	800ee0a <VL53L1_dynamic_xtalk_correction_corrector+0x3d6>
				pout->averaged_xtalk_delta_flag = 1;
 800ee02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee04:	2201      	movs	r2, #1
 800ee06:	70da      	strb	r2, [r3, #3]
 800ee08:	e002      	b.n	800ee10 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800ee0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee0c:	2202      	movs	r2, #2
 800ee0e:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800ee10:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d108      	bne.n	800ee2a <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800ee18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee1a:	69db      	ldr	r3, [r3, #28]
 800ee1c:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800ee1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee20:	4293      	cmp	r3, r2
 800ee22:	da02      	bge.n	800ee2a <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			)

			continue_processing = CONT_RESET;
 800ee24:	2302      	movs	r3, #2
 800ee26:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 800ee2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800ee30:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d112      	bne.n	800ee5e <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800ee38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee3a:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d00e      	beq.n	800ee5e <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800ee40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee42:	6a1b      	ldr	r3, [r3, #32]
 800ee44:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ee48:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800ee4c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d905      	bls.n	800ee5e <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
				pout->smudge_corr_clipped = 1;
 800ee52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee54:	2201      	movs	r2, #1
 800ee56:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800ee58:	2302      	movs	r3, #2
 800ee5a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800ee5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee60:	7c1b      	ldrb	r3, [r3, #16]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d007      	beq.n	800ee76 <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800ee66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee68:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800ee6a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d902      	bls.n	800ee76 <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			xtalk_offset_out =
 800ee70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800ee76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee78:	7c1b      	ldrb	r3, [r3, #16]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d107      	bne.n	800ee8e <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800ee7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee80:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800ee82:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d202      	bcs.n	800ee8e <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			xtalk_offset_out =
 800ee88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800ee8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee90:	089b      	lsrs	r3, r3, #2
 800ee92:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800ee94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ee9a:	d301      	bcc.n	800eea0 <VL53L1_dynamic_xtalk_correction_corrector+0x46c>
			xtalk_offset_out = 0x3FFFF;
 800ee9c:	4b3e      	ldr	r3, [pc, #248]	; (800ef98 <VL53L1_dynamic_xtalk_correction_corrector+0x564>)
 800ee9e:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 800eea0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d10d      	bne.n	800eec4 <VL53L1_dynamic_xtalk_correction_corrector+0x490>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800eea8:	2300      	movs	r3, #0
 800eeaa:	9301      	str	r3, [sp, #4]
 800eeac:	2301      	movs	r3, #1
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eeb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eeb4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800eeb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eeb8:	f7ff fc00 	bl	800e6bc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800eebc:	2302      	movs	r3, #2
 800eebe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800eec2:	e009      	b.n	800eed8 <VL53L1_dynamic_xtalk_correction_corrector+0x4a4>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800eec4:	2301      	movs	r3, #1
 800eec6:	9301      	str	r3, [sp, #4]
 800eec8:	2301      	movs	r3, #1
 800eeca:	9300      	str	r3, [sp, #0]
 800eecc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eece:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eed0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800eed2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eed4:	f7ff fbf2 	bl	800e6bc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800eed8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800eedc:	2b02      	cmp	r3, #2
 800eede:	d10c      	bne.n	800eefa <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>
			pint->accumulator = 0;
 800eee0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800eee2:	f04f 0200 	mov.w	r2, #0
 800eee6:	f04f 0300 	mov.w	r3, #0
 800eeea:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800eeee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eef0:	2200      	movs	r2, #0
 800eef2:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800eef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eef6:	2200      	movs	r2, #0
 800eef8:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800eefa:	2300      	movs	r3, #0
 800eefc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 800ef00:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d140      	bne.n	800ef8a <VL53L1_dynamic_xtalk_correction_corrector+0x556>

		pint->nodetect_counter += 1;
 800ef08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef0a:	691b      	ldr	r3, [r3, #16]
 800ef0c:	1c5a      	adds	r2, r3, #1
 800ef0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef10:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800ef12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef14:	691a      	ldr	r2, [r3, #16]
 800ef16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d202      	bcs.n	800ef24 <VL53L1_dynamic_xtalk_correction_corrector+0x4f0>
			continue_processing = CONT_NEXT_LOOP;
 800ef1e:	2301      	movs	r3, #1
 800ef20:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800ef24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef28:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 800ef2a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d110      	bne.n	800ef54 <VL53L1_dynamic_xtalk_correction_corrector+0x520>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800ef32:	2300      	movs	r3, #0
 800ef34:	9301      	str	r3, [sp, #4]
 800ef36:	2300      	movs	r3, #0
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef3e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ef40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef42:	f7ff fbbb 	bl	800e6bc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800ef46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef48:	2202      	movs	r2, #2
 800ef4a:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800ef4c:	2302      	movs	r3, #2
 800ef4e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800ef52:	e009      	b.n	800ef68 <VL53L1_dynamic_xtalk_correction_corrector+0x534>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800ef54:	2301      	movs	r3, #1
 800ef56:	9301      	str	r3, [sp, #4]
 800ef58:	2300      	movs	r3, #0
 800ef5a:	9300      	str	r3, [sp, #0]
 800ef5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef60:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ef62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef64:	f7ff fbaa 	bl	800e6bc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800ef68:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ef6c:	2b02      	cmp	r3, #2
 800ef6e:	d10c      	bne.n	800ef8a <VL53L1_dynamic_xtalk_correction_corrector+0x556>
			pint->accumulator = 0;
 800ef70:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ef72:	f04f 0200 	mov.w	r2, #0
 800ef76:	f04f 0300 	mov.w	r3, #0
 800ef7a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800ef7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef80:	2200      	movs	r2, #0
 800ef82:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800ef84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef86:	2200      	movs	r2, #0
 800ef88:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800ef8a:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3780      	adds	r7, #128	; 0x80
 800ef92:	46bd      	mov	sp, r7
 800ef94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef98:	0003ffff 	.word	0x0003ffff

0800ef9c <VL53L1_dynamic_xtalk_correction_data_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_data_init(
	VL53L1_DEV                          Dev
	)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b086      	sub	sp, #24
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800efa4:	2300      	movs	r3, #0
 800efa6:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	3318      	adds	r3, #24
 800efac:	613b      	str	r3, [r7, #16]
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800efb4:	3308      	adds	r3, #8
 800efb6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efbe:	2201      	movs	r2, #1
 800efc0:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efca:	2201      	movs	r2, #1
 800efcc:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efd6:	2200      	movs	r2, #0
 800efd8:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efe6:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eff0:	461a      	mov	r2, r3
 800eff2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800eff6:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f000:	461a      	mov	r2, r3
 800f002:	2300      	movs	r3, #0
 800f004:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f00e:	2200      	movs	r2, #0
 800f010:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f01a:	461a      	mov	r2, r3
 800f01c:	23c8      	movs	r3, #200	; 0xc8
 800f01e:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f028:	461a      	mov	r2, r3
 800f02a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f02e:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f038:	461a      	mov	r2, r3
 800f03a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f03e:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
		VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f048:	461a      	mov	r2, r3
 800f04a:	4b3a      	ldr	r3, [pc, #232]	; (800f134 <VL53L1_dynamic_xtalk_correction_data_init+0x198>)
 800f04c:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f056:	461a      	mov	r2, r3
 800f058:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800f05c:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f066:	2200      	movs	r2, #0
 800f068:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f072:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f076:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f080:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f084:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f08e:	2200      	movs	r2, #0
 800f090:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f09a:	461a      	mov	r2, r3
 800f09c:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 800f0a0:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	230a      	movs	r3, #10
 800f0ae:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f0be:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0c8:	f44f 7261 	mov.w	r2, #900	; 0x384
 800f0cc:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f0dc:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
		VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
	pdev->smudge_corrector_internals.required_samples = 0;
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0f4:	461a      	mov	r2, r3
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
	pdev->smudge_corrector_internals.accumulator = 0;
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800f102:	3310      	adds	r3, #16
 800f104:	4619      	mov	r1, r3
 800f106:	f04f 0200 	mov.w	r2, #0
 800f10a:	f04f 0300 	mov.w	r3, #0
 800f10e:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f118:	461a      	mov	r2, r3
 800f11a:	2300      	movs	r3, #0
 800f11c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800f120:	68f8      	ldr	r0, [r7, #12]
 800f122:	f000 f809 	bl	800f138 <VL53L1_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800f126:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3718      	adds	r7, #24
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	000ff800 	.word	0x000ff800

0800f138 <VL53L1_dynamic_xtalk_correction_output_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_output_init(
	VL53L1_LLDriverResults_t *pres
	)
{
 800f138:	b480      	push	{r7}
 800f13a:	b085      	sub	sp, #20
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f140:	2300      	movs	r3, #0
 800f142:	73fb      	strb	r3, [r7, #15]
	VL53L1_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f14a:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	2200      	movs	r2, #0
 800f150:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	2200      	movs	r2, #0
 800f156:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	2200      	movs	r2, #0
 800f15c:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	2200      	movs	r2, #0
 800f162:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	2200      	movs	r2, #0
 800f168:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	2200      	movs	r2, #0
 800f16e:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	2200      	movs	r2, #0
 800f174:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	2200      	movs	r2, #0
 800f17a:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	2200      	movs	r2, #0
 800f180:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	2200      	movs	r2, #0
 800f186:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800f188:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3714      	adds	r7, #20
 800f190:	46bd      	mov	sp, r7
 800f192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f196:	4770      	bx	lr

0800f198 <VL53L1_xtalk_cal_data_init>:


VL53L1_Error VL53L1_xtalk_cal_data_init(
	VL53L1_DEV                          Dev
	)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b084      	sub	sp, #16
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	3318      	adds	r3, #24
 800f1a8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800f1d6:	3308      	adds	r3, #8
 800f1d8:	2218      	movs	r2, #24
 800f1da:	2100      	movs	r1, #0
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f00b fc33 	bl	801aa48 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800f1e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3710      	adds	r7, #16
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}

0800f1ee <VL53L1_low_power_auto_data_init>:


VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800f1ee:	b480      	push	{r7}
 800f1f0:	b085      	sub	sp, #20
 800f1f2:	af00      	add	r7, sp, #0
 800f1f4:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	3318      	adds	r3, #24
 800f1fe:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f206:	2203      	movs	r2, #3
 800f208:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f212:	2200      	movs	r2, #0
 800f214:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f21e:	2200      	movs	r2, #0
 800f220:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f22a:	2200      	movs	r2, #0
 800f22c:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f236:	2200      	movs	r2, #0
 800f238:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f242:	2200      	movs	r2, #0
 800f244:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f24e:	2200      	movs	r2, #0
 800f250:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f25a:	461a      	mov	r2, r3
 800f25c:	2300      	movs	r3, #0
 800f25e:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f268:	2200      	movs	r2, #0
 800f26a:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

	LOG_FUNCTION_END(status);

	return status;
 800f26e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f272:	4618      	mov	r0, r3
 800f274:	3714      	adds	r7, #20
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr

0800f27e <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800f27e:	b480      	push	{r7}
 800f280:	b085      	sub	sp, #20
 800f282:	af00      	add	r7, sp, #0
 800f284:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f286:	2300      	movs	r3, #0
 800f288:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	3318      	adds	r3, #24
 800f28e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f296:	22ff      	movs	r2, #255	; 0xff
 800f298:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2bc:	2200      	movs	r2, #0
 800f2be:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2c8:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d007      	beq.n	800f2e0 <VL53L1_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2d6:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
		pdev->stat_nvm.vhv_config__init =
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2e6:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d007      	beq.n	800f2fe <VL53L1_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2f4:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	2200      	movs	r2, #0
 800f302:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b

	LOG_FUNCTION_END(status);

	return status;
 800f306:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3714      	adds	r7, #20
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr

0800f316 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800f316:	b480      	push	{r7}
 800f318:	b087      	sub	sp, #28
 800f31a:	af00      	add	r7, sp, #0
 800f31c:	60f8      	str	r0, [r7, #12]
 800f31e:	60b9      	str	r1, [r7, #8]
 800f320:	607a      	str	r2, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f322:	2300      	movs	r3, #0
 800f324:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2201      	movs	r2, #1
 800f32a:	705a      	strb	r2, [r3, #1]


	plpadata->low_power_auto_range_count = 0;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2200      	movs	r2, #0
 800f330:	709a      	strb	r2, [r3, #2]


	pdynamic->system__sequence_config =
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	229b      	movs	r2, #155	; 0x9b
 800f336:	745a      	strb	r2, [r3, #17]

			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800f338:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	371c      	adds	r7, #28
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800f348:	b480      	push	{r7}
 800f34a:	b085      	sub	sp, #20
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	3318      	adds	r3, #24
 800f354:	60fb      	str	r3, [r7, #12]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f356:	2300      	movs	r3, #0
 800f358:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.saved_vhv_init =
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f366:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
	pdev->low_power_auto_data.saved_vhv_timeout =
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f376:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 800f380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f384:	b2da      	uxtb	r2, r3
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800f392:	f003 0303 	and.w	r3, r3, #3
 800f396:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f39e:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800f3a2:	009b      	lsls	r3, r3, #2
 800f3a4:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800f3a6:	4413      	add	r3, r2
 800f3a8:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3be:	f893 23a2 	ldrb.w	r2, [r3, #930]	; 0x3a2
	pdev->low_power_auto_data.first_run_phasecal_result =
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3c8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3d2:	f893 243e 	ldrb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365

	LOG_FUNCTION_END(status);

	return status;
 800f3dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3714      	adds	r7, #20
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr

0800f3ec <VL53L1_compute_histo_merge_nb>:



VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	b087      	sub	sp, #28
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	3318      	adds	r3, #24
 800f3fa:	613b      	str	r3, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800f400:	2300      	movs	r3, #0
 800f402:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f40a:	2b07      	cmp	r3, #7
 800f40c:	bf0c      	ite	eq
 800f40e:	2301      	moveq	r3, #1
 800f410:	2300      	movne	r3, #0
 800f412:	b2db      	uxtb	r3, r3
 800f414:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800f416:	2300      	movs	r3, #0
 800f418:	75fb      	strb	r3, [r7, #23]
 800f41a:	e019      	b.n	800f450 <VL53L1_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800f41c:	7df9      	ldrb	r1, [r7, #23]
 800f41e:	7bbb      	ldrb	r3, [r7, #14]
 800f420:	6938      	ldr	r0, [r7, #16]
 800f422:	461a      	mov	r2, r3
 800f424:	0052      	lsls	r2, r2, #1
 800f426:	441a      	add	r2, r3
 800f428:	0153      	lsls	r3, r2, #5
 800f42a:	461a      	mov	r2, r3
 800f42c:	460b      	mov	r3, r1
 800f42e:	005b      	lsls	r3, r3, #1
 800f430:	440b      	add	r3, r1
 800f432:	019b      	lsls	r3, r3, #6
 800f434:	4413      	add	r3, r2
 800f436:	4403      	add	r3, r0
 800f438:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 800f43c:	3314      	adds	r3, #20
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	2b00      	cmp	r3, #0
 800f442:	dd02      	ble.n	800f44a <VL53L1_compute_histo_merge_nb+0x5e>
			sum++;
 800f444:	7dbb      	ldrb	r3, [r7, #22]
 800f446:	3301      	adds	r3, #1
 800f448:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800f44a:	7dfb      	ldrb	r3, [r7, #23]
 800f44c:	3301      	adds	r3, #1
 800f44e:	75fb      	strb	r3, [r7, #23]
 800f450:	7dfb      	ldrb	r3, [r7, #23]
 800f452:	2b05      	cmp	r3, #5
 800f454:	d9e2      	bls.n	800f41c <VL53L1_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	7dba      	ldrb	r2, [r7, #22]
 800f45a:	701a      	strb	r2, [r3, #0]

	return status;
 800f45c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f460:	4618      	mov	r0, r3
 800f462:	371c      	adds	r7, #28
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr

0800f46c <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b085      	sub	sp, #20
 800f470:	af00      	add	r7, sp, #0
 800f472:	4603      	mov	r3, r0
 800f474:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800f476:	2300      	movs	r3, #0
 800f478:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800f47a:	88fb      	ldrh	r3, [r7, #6]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d005      	beq.n	800f48c <VL53L1_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800f480:	88fb      	ldrh	r3, [r7, #6]
 800f482:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f486:	fb92 f3f3 	sdiv	r3, r2, r3
 800f48a:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800f48c:	68fb      	ldr	r3, [r7, #12]
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3714      	adds	r7, #20
 800f492:	46bd      	mov	sp, r7
 800f494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f498:	4770      	bx	lr

0800f49a <VL53L1_duration_maths>:
uint32_t  VL53L1_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800f49a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f49e:	b089      	sub	sp, #36	; 0x24
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	607a      	str	r2, [r7, #4]
 800f4a8:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800f4aa:	f04f 0200 	mov.w	r2, #0
 800f4ae:	f04f 0300 	mov.w	r3, #0
 800f4b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	68fa      	ldr	r2, [r7, #12]
 800f4be:	fb02 f303 	mul.w	r3, r2, r3
 800f4c2:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	0b1b      	lsrs	r3, r3, #12
 800f4c8:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	469a      	mov	sl, r3
 800f4d0:	4693      	mov	fp, r2
 800f4d2:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	68ba      	ldr	r2, [r7, #8]
 800f4da:	fb02 f303 	mul.w	r3, r2, r3
 800f4de:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	091b      	lsrs	r3, r3, #4
 800f4e4:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	4698      	mov	r8, r3
 800f4ec:	4691      	mov	r9, r2
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	fb08 f203 	mul.w	r2, r8, r3
 800f4f4:	69bb      	ldr	r3, [r7, #24]
 800f4f6:	fb09 f303 	mul.w	r3, r9, r3
 800f4fa:	4413      	add	r3, r2
 800f4fc:	69ba      	ldr	r2, [r7, #24]
 800f4fe:	fba2 4508 	umull	r4, r5, r2, r8
 800f502:	442b      	add	r3, r5
 800f504:	461d      	mov	r5, r3
 800f506:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800f50a:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800f50e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f512:	f04f 0200 	mov.w	r2, #0
 800f516:	f04f 0300 	mov.w	r3, #0
 800f51a:	0b02      	lsrs	r2, r0, #12
 800f51c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800f520:	0b0b      	lsrs	r3, r1, #12
 800f522:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800f526:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f52a:	2b01      	cmp	r3, #1
 800f52c:	d305      	bcc.n	800f53a <VL53L1_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800f52e:	f04f 32ff 	mov.w	r2, #4294967295
 800f532:	f04f 0300 	mov.w	r3, #0
 800f536:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800f53a:	69bb      	ldr	r3, [r7, #24]
 800f53c:	617b      	str	r3, [r7, #20]

	return duration_us;
 800f53e:	697b      	ldr	r3, [r7, #20]
}
 800f540:	4618      	mov	r0, r3
 800f542:	3724      	adds	r7, #36	; 0x24
 800f544:	46bd      	mov	sp, r7
 800f546:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f54a:	4770      	bx	lr

0800f54c <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800f54c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f550:	b096      	sub	sp, #88	; 0x58
 800f552:	af00      	add	r7, sp, #0
 800f554:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f556:	460b      	mov	r3, r1
 800f558:	627a      	str	r2, [r7, #36]	; 0x24
 800f55a:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 800f55c:	f04f 0200 	mov.w	r2, #0
 800f560:	f04f 0300 	mov.w	r3, #0
 800f564:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 800f568:	f04f 0200 	mov.w	r2, #0
 800f56c:	f04f 0300 	mov.w	r3, #0
 800f570:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 800f574:	2300      	movs	r3, #0
 800f576:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53L1_p_013
 800f578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f57a:	17da      	asrs	r2, r3, #31
 800f57c:	469a      	mov	sl, r3
 800f57e:	4693      	mov	fp, r2
 800f580:	4652      	mov	r2, sl
 800f582:	465b      	mov	r3, fp
 800f584:	f04f 0000 	mov.w	r0, #0
 800f588:	f04f 0100 	mov.w	r1, #0
 800f58c:	0159      	lsls	r1, r3, #5
 800f58e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f592:	0150      	lsls	r0, r2, #5
 800f594:	4602      	mov	r2, r0
 800f596:	460b      	mov	r3, r1
 800f598:	ebb2 040a 	subs.w	r4, r2, sl
 800f59c:	eb63 050b 	sbc.w	r5, r3, fp
 800f5a0:	f04f 0200 	mov.w	r2, #0
 800f5a4:	f04f 0300 	mov.w	r3, #0
 800f5a8:	00ab      	lsls	r3, r5, #2
 800f5aa:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800f5ae:	00a2      	lsls	r2, r4, #2
 800f5b0:	4614      	mov	r4, r2
 800f5b2:	461d      	mov	r5, r3
 800f5b4:	eb14 080a 	adds.w	r8, r4, sl
 800f5b8:	eb45 090b 	adc.w	r9, r5, fp
 800f5bc:	f04f 0200 	mov.w	r2, #0
 800f5c0:	f04f 0300 	mov.w	r3, #0
 800f5c4:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800f5c8:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800f5cc:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800f5d0:	4690      	mov	r8, r2
 800f5d2:	4699      	mov	r9, r3
 800f5d4:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800f5d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d00d      	beq.n	800f5fa <VL53L1_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800f5de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	61bb      	str	r3, [r7, #24]
 800f5e4:	61fa      	str	r2, [r7, #28]
 800f5e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f5ea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f5ee:	f7f1 fb03 	bl	8000bf8 <__aeabi_uldivmod>
 800f5f2:	4602      	mov	r2, r0
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800f5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d02a      	beq.n	800f656 <VL53L1_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800f600:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f604:	f04f 0200 	mov.w	r2, #0
 800f608:	f04f 0300 	mov.w	r3, #0
 800f60c:	02cb      	lsls	r3, r1, #11
 800f60e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800f612:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800f614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f616:	0849      	lsrs	r1, r1, #1
 800f618:	2000      	movs	r0, #0
 800f61a:	6139      	str	r1, [r7, #16]
 800f61c:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800f61e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800f622:	4621      	mov	r1, r4
 800f624:	1851      	adds	r1, r2, r1
 800f626:	6039      	str	r1, [r7, #0]
 800f628:	4629      	mov	r1, r5
 800f62a:	eb43 0101 	adc.w	r1, r3, r1
 800f62e:	6079      	str	r1, [r7, #4]
 800f630:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f634:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800f638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63a:	2200      	movs	r2, #0
 800f63c:	60bb      	str	r3, [r7, #8]
 800f63e:	60fa      	str	r2, [r7, #12]
 800f640:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f644:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f648:	f7f1 fad6 	bl	8000bf8 <__aeabi_uldivmod>
 800f64c:	4602      	mov	r2, r0
 800f64e:	460b      	mov	r3, r1
 800f650:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800f654:	e00b      	b.n	800f66e <VL53L1_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800f656:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f65a:	f04f 0200 	mov.w	r2, #0
 800f65e:	f04f 0300 	mov.w	r3, #0
 800f662:	02cb      	lsls	r3, r1, #11
 800f664:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800f668:	02c2      	lsls	r2, r0, #11
 800f66a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800f66e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f670:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 800f672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f674:	4618      	mov	r0, r3
 800f676:	3758      	adds	r7, #88	; 0x58
 800f678:	46bd      	mov	sp, r7
 800f67a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f67e <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 800f67e:	b480      	push	{r7}
 800f680:	b085      	sub	sp, #20
 800f682:	af00      	add	r7, sp, #0
 800f684:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800f686:	2300      	movs	r3, #0
 800f688:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800f68a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f68e:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800f690:	e002      	b.n	800f698 <VL53L1_isqrt+0x1a>
		bit >>= 2;
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	089b      	lsrs	r3, r3, #2
 800f696:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800f698:	68ba      	ldr	r2, [r7, #8]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d8f8      	bhi.n	800f692 <VL53L1_isqrt+0x14>

	while (bit != 0) {
 800f6a0:	e017      	b.n	800f6d2 <VL53L1_isqrt+0x54>
		if (num >= res + bit)  {
 800f6a2:	68fa      	ldr	r2, [r7, #12]
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	4413      	add	r3, r2
 800f6a8:	687a      	ldr	r2, [r7, #4]
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d30b      	bcc.n	800f6c6 <VL53L1_isqrt+0x48>
			num -= res + bit;
 800f6ae:	68fa      	ldr	r2, [r7, #12]
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	687a      	ldr	r2, [r7, #4]
 800f6b6:	1ad3      	subs	r3, r2, r3
 800f6b8:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	085b      	lsrs	r3, r3, #1
 800f6be:	68ba      	ldr	r2, [r7, #8]
 800f6c0:	4413      	add	r3, r2
 800f6c2:	60fb      	str	r3, [r7, #12]
 800f6c4:	e002      	b.n	800f6cc <VL53L1_isqrt+0x4e>
		} else {
			res >>= 1;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	085b      	lsrs	r3, r3, #1
 800f6ca:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	089b      	lsrs	r3, r3, #2
 800f6d0:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d1e4      	bne.n	800f6a2 <VL53L1_isqrt+0x24>
	}

	return res;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3714      	adds	r7, #20
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr

0800f6e6 <VL53L1_hist_calc_zero_distance_phase>:


void  VL53L1_hist_calc_zero_distance_phase(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b084      	sub	sp, #16
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53L1_p_017         = 0;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f000 faa5 	bl	800fc4c <VL53L1_decode_vcsel_period>
 800f702:	4603      	mov	r3, r0
	period = 2048 *
 800f704:	02db      	lsls	r3, r3, #11
 800f706:	60bb      	str	r3, [r7, #8]

	VL53L1_p_017  = period;
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800f712:	461a      	mov	r2, r3
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	4413      	add	r3, r2
 800f718:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f720:	02db      	lsls	r3, r3, #11
 800f722:	68fa      	ldr	r2, [r7, #12]
 800f724:	4413      	add	r3, r2
 800f726:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f72e:	02db      	lsls	r3, r3, #11
 800f730:	68fa      	ldr	r2, [r7, #12]
 800f732:	1ad3      	subs	r3, r2, r3
 800f734:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d009      	beq.n	800f750 <VL53L1_hist_calc_zero_distance_phase+0x6a>
		VL53L1_p_017  = VL53L1_p_017 % period;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	68ba      	ldr	r2, [r7, #8]
 800f740:	fbb3 f2f2 	udiv	r2, r3, r2
 800f744:	68b9      	ldr	r1, [r7, #8]
 800f746:	fb01 f202 	mul.w	r2, r1, r2
 800f74a:	1a9b      	subs	r3, r3, r2
 800f74c:	60fb      	str	r3, [r7, #12]
 800f74e:	e001      	b.n	800f754 <VL53L1_hist_calc_zero_distance_phase+0x6e>
	else
		VL53L1_p_017 = 0;
 800f750:	2300      	movs	r3, #0
 800f752:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	b29a      	uxth	r2, r3
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800f75e:	bf00      	nop
 800f760:	3710      	adds	r7, #16
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}

0800f766 <VL53L1_hist_estimate_ambient_from_thresholded_bins>:


void  VL53L1_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800f766:	b580      	push	{r7, lr}
 800f768:	b084      	sub	sp, #16
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
 800f76e:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800f770:	2300      	movs	r3, #0
 800f772:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53L1_p_032 = 0;
 800f774:	2300      	movs	r3, #0
 800f776:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53L1_hist_find_min_max_bin_values(pdata);
 800f778:	6838      	ldr	r0, [r7, #0]
 800f77a:	f000 fb90 	bl	800fe9e <VL53L1_hist_find_min_max_bin_values>



	VL53L1_p_032  =
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f784:	4618      	mov	r0, r3
 800f786:	f7ff ff7a 	bl	800f67e <VL53L1_isqrt>
 800f78a:	4603      	mov	r3, r0
	VL53L1_p_032  =
 800f78c:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 *= ambient_threshold_sigma;
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	687a      	ldr	r2, [r7, #4]
 800f792:	fb02 f303 	mul.w	r3, r2, r3
 800f796:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += 0x07;
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	3307      	adds	r3, #7
 800f79c:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032  = VL53L1_p_032 >> 4;
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	111b      	asrs	r3, r3, #4
 800f7a2:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += pdata->min_bin_value;
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f7aa:	68ba      	ldr	r2, [r7, #8]
 800f7ac:	4413      	add	r3, r2
 800f7ae:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	73fb      	strb	r3, [r7, #15]
 800f7c4:	e01e      	b.n	800f804 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 800f7c6:	7bfa      	ldrb	r2, [r7, #15]
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	3206      	adds	r2, #6
 800f7cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7d0:	68ba      	ldr	r2, [r7, #8]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	dd13      	ble.n	800f7fe <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f7dc:	7bf9      	ldrb	r1, [r7, #15]
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	3106      	adds	r1, #6
 800f7e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f7e6:	441a      	add	r2, r3
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	b2da      	uxtb	r2, r3
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800f7fe:	7bfb      	ldrb	r3, [r7, #15]
 800f800:	3301      	adds	r3, #1
 800f802:	73fb      	strb	r3, [r7, #15]
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	7a9b      	ldrb	r3, [r3, #10]
 800f808:	7bfa      	ldrb	r2, [r7, #15]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d3db      	bcc.n	800f7c6 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800f814:	2b00      	cmp	r3, #0
 800f816:	d01c      	beq.n	800f852 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53L1_p_004 =
			pdata->ambient_events_sum;
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53L1_p_004 =
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800f82a:	683a      	ldr	r2, [r7, #0]
 800f82c:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800f830:	0852      	lsrs	r2, r2, #1
 800f832:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800f834:	441a      	add	r2, r3
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800f842:	683a      	ldr	r2, [r7, #0]
 800f844:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53L1_p_004 /=
 800f848:	fb93 f2f2 	sdiv	r2, r3, r2
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800f852:	bf00      	nop
 800f854:	3710      	adds	r7, #16
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}

0800f85a <VL53L1_hist_remove_ambient_bins>:


void  VL53L1_hist_remove_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800f85a:	b480      	push	{r7}
 800f85c:	b085      	sub	sp, #20
 800f85e:	af00      	add	r7, sp, #0
 800f860:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800f862:	2300      	movs	r3, #0
 800f864:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800f866:	2300      	movs	r3, #0
 800f868:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800f86a:	2300      	movs	r3, #0
 800f86c:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	7b1b      	ldrb	r3, [r3, #12]
 800f872:	f003 0307 	and.w	r3, r3, #7
 800f876:	2b07      	cmp	r3, #7
 800f878:	d13a      	bne.n	800f8f0 <VL53L1_hist_remove_ambient_bins+0x96>

		i = 0;
 800f87a:	2300      	movs	r3, #0
 800f87c:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800f87e:	2300      	movs	r3, #0
 800f880:	73bb      	strb	r3, [r7, #14]
 800f882:	e01f      	b.n	800f8c4 <VL53L1_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800f884:	7bbb      	ldrb	r3, [r7, #14]
 800f886:	687a      	ldr	r2, [r7, #4]
 800f888:	4413      	add	r3, r2
 800f88a:	7b1b      	ldrb	r3, [r3, #12]
 800f88c:	f003 0307 	and.w	r3, r3, #7
 800f890:	2b07      	cmp	r3, #7
 800f892:	d014      	beq.n	800f8be <VL53L1_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800f894:	7bba      	ldrb	r2, [r7, #14]
 800f896:	7b7b      	ldrb	r3, [r7, #13]
 800f898:	6879      	ldr	r1, [r7, #4]
 800f89a:	440a      	add	r2, r1
 800f89c:	7b11      	ldrb	r1, [r2, #12]
 800f89e:	687a      	ldr	r2, [r7, #4]
 800f8a0:	4413      	add	r3, r2
 800f8a2:	460a      	mov	r2, r1
 800f8a4:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800f8a6:	7bba      	ldrb	r2, [r7, #14]
 800f8a8:	7b7b      	ldrb	r3, [r7, #13]
 800f8aa:	6879      	ldr	r1, [r7, #4]
 800f8ac:	440a      	add	r2, r1
 800f8ae:	7c91      	ldrb	r1, [r2, #18]
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	4413      	add	r3, r2
 800f8b4:	460a      	mov	r2, r1
 800f8b6:	749a      	strb	r2, [r3, #18]
				i++;
 800f8b8:	7b7b      	ldrb	r3, [r7, #13]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800f8be:	7bbb      	ldrb	r3, [r7, #14]
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	73bb      	strb	r3, [r7, #14]
 800f8c4:	7bbb      	ldrb	r3, [r7, #14]
 800f8c6:	2b05      	cmp	r3, #5
 800f8c8:	d9dc      	bls.n	800f884 <VL53L1_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800f8ca:	7b7b      	ldrb	r3, [r7, #13]
 800f8cc:	73bb      	strb	r3, [r7, #14]
 800f8ce:	e00c      	b.n	800f8ea <VL53L1_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 800f8d0:	7bbb      	ldrb	r3, [r7, #14]
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	4413      	add	r3, r2
 800f8d6:	2210      	movs	r2, #16
 800f8d8:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800f8da:	7bbb      	ldrb	r3, [r7, #14]
 800f8dc:	687a      	ldr	r2, [r7, #4]
 800f8de:	4413      	add	r3, r2
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800f8e4:	7bbb      	ldrb	r3, [r7, #14]
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	73bb      	strb	r3, [r7, #14]
 800f8ea:	7bbb      	ldrb	r3, [r7, #14]
 800f8ec:	2b05      	cmp	r3, #5
 800f8ee:	d9ef      	bls.n	800f8d0 <VL53L1_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	7adb      	ldrb	r3, [r3, #11]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d023      	beq.n	800f940 <VL53L1_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	7adb      	ldrb	r3, [r3, #11]
 800f8fc:	73fb      	strb	r3, [r7, #15]
 800f8fe:	e00f      	b.n	800f920 <VL53L1_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53L1_p_023; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800f900:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800f902:	7bfb      	ldrb	r3, [r7, #15]
 800f904:	687a      	ldr	r2, [r7, #4]
 800f906:	7ad2      	ldrb	r2, [r2, #11]
 800f908:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	3106      	adds	r1, #6
 800f90e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	3206      	adds	r2, #6
 800f916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53L1_p_023; bin++) {
 800f91a:	7bfb      	ldrb	r3, [r7, #15]
 800f91c:	3301      	adds	r3, #1
 800f91e:	73fb      	strb	r3, [r7, #15]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800f924:	7bfa      	ldrb	r2, [r7, #15]
 800f926:	429a      	cmp	r2, r3
 800f928:	d3ea      	bcc.n	800f900 <VL53L1_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53L1_p_024 =
				pdata->VL53L1_p_024 -
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53L1_p_024 -
 800f932:	1ad3      	subs	r3, r2, r3
 800f934:	b2da      	uxtb	r2, r3
		pdata->VL53L1_p_024 =
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2200      	movs	r2, #0
 800f93e:	72da      	strb	r2, [r3, #11]
	}
}
 800f940:	bf00      	nop
 800f942:	3714      	adds	r7, #20
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr

0800f94c <VL53L1_calc_pll_period_mm>:


uint32_t VL53L1_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0
 800f952:	4603      	mov	r3, r0
 800f954:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800f956:	2300      	movs	r3, #0
 800f958:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800f95a:	2300      	movs	r3, #0
 800f95c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800f95e:	88fb      	ldrh	r3, [r7, #6]
 800f960:	4618      	mov	r0, r3
 800f962:	f7ff fd83 	bl	800f46c <VL53L1_calc_pll_period_us>
 800f966:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800f96c:	f249 2257 	movw	r2, #37463	; 0x9257
 800f970:	fb02 f303 	mul.w	r3, r2, r3
 800f974:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f97c:	0c1b      	lsrs	r3, r3, #16
 800f97e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800f980:	68bb      	ldr	r3, [r7, #8]
}
 800f982:	4618      	mov	r0, r3
 800f984:	3710      	adds	r7, #16
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}

0800f98a <VL53L1_rate_maths>:


uint16_t VL53L1_rate_maths(
	int32_t   VL53L1_p_008,
	uint32_t  time_us)
{
 800f98a:	b480      	push	{r7}
 800f98c:	b087      	sub	sp, #28
 800f98e:	af00      	add	r7, sp, #0
 800f990:	6078      	str	r0, [r7, #4]
 800f992:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800f994:	2300      	movs	r3, #0
 800f996:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800f998:	2307      	movs	r3, #7
 800f99a:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800f99c:	2300      	movs	r3, #0
 800f99e:	81fb      	strh	r3, [r7, #14]



	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f9a6:	db03      	blt.n	800f9b0 <VL53L1_rate_maths+0x26>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 800f9a8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f9ac:	617b      	str	r3, [r7, #20]
 800f9ae:	e004      	b.n	800f9ba <VL53L1_rate_maths+0x30>
	else if (VL53L1_p_008 > 0)
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	dd01      	ble.n	800f9ba <VL53L1_rate_maths+0x30>
		tmp_int = (uint32_t)VL53L1_p_008;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	617b      	str	r3, [r7, #20]




	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f9c0:	dd02      	ble.n	800f9c8 <VL53L1_rate_maths+0x3e>
		frac_bits = 3;
 800f9c2:	2303      	movs	r3, #3
 800f9c4:	613b      	str	r3, [r7, #16]
 800f9c6:	e001      	b.n	800f9cc <VL53L1_rate_maths+0x42>
	else
		frac_bits = 7;
 800f9c8:	2307      	movs	r3, #7
 800f9ca:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d009      	beq.n	800f9e6 <VL53L1_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800f9d2:	697a      	ldr	r2, [r7, #20]
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	409a      	lsls	r2, r3
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	085b      	lsrs	r3, r3, #1
 800f9dc:	441a      	add	r2, r3
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9e4:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f9ec:	dd02      	ble.n	800f9f4 <VL53L1_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	011b      	lsls	r3, r3, #4
 800f9f2:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9fa:	d302      	bcc.n	800fa02 <VL53L1_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800f9fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa00:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800fa06:	89fb      	ldrh	r3, [r7, #14]
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	371c      	adds	r7, #28
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr

0800fa14 <VL53L1_rate_per_spad_maths>:
uint16_t VL53L1_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800fa14:	b480      	push	{r7}
 800fa16:	b087      	sub	sp, #28
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	60f8      	str	r0, [r7, #12]
 800fa1c:	60b9      	str	r1, [r7, #8]
 800fa1e:	603b      	str	r3, [r7, #0]
 800fa20:	4613      	mov	r3, r2
 800fa22:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800fa24:	2300      	movs	r3, #0
 800fa26:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800fa2c:	88fb      	ldrh	r3, [r7, #6]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d010      	beq.n	800fa54 <VL53L1_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	021a      	lsls	r2, r3, #8
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	fa02 f303 	lsl.w	r3, r2, r3
 800fa3c:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800fa3e:	88fb      	ldrh	r3, [r7, #6]
 800fa40:	085b      	lsrs	r3, r3, #1
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800fa4a:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800fa4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa50:	617b      	str	r3, [r7, #20]
 800fa52:	e004      	b.n	800fa5e <VL53L1_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800fa54:	68ba      	ldr	r2, [r7, #8]
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	fa02 f303 	lsl.w	r3, r2, r3
 800fa5c:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800fa5e:	697a      	ldr	r2, [r7, #20]
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d901      	bls.n	800fa6a <VL53L1_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800fa6e:	8a7b      	ldrh	r3, [r7, #18]
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	371c      	adds	r7, #28
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr

0800fa7c <VL53L1_range_maths>:
	uint16_t  VL53L1_p_017,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800fa7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa80:	b093      	sub	sp, #76	; 0x4c
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	461e      	mov	r6, r3
 800fa86:	4603      	mov	r3, r0
 800fa88:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fa8a:	460b      	mov	r3, r1
 800fa8c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fa8e:	4613      	mov	r3, r2
 800fa90:	857b      	strh	r3, [r7, #42]	; 0x2a
 800fa92:	4633      	mov	r3, r6
 800fa94:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 800fa98:	2300      	movs	r3, #0
 800fa9a:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 800fa9c:	f04f 0200 	mov.w	r2, #0
 800faa0:	f04f 0300 	mov.w	r3, #0
 800faa4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 800faa8:	2300      	movs	r3, #0
 800faaa:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 800faac:	2300      	movs	r3, #0
 800faae:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800fab0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7ff fcda 	bl	800f46c <VL53L1_calc_pll_period_us>
 800fab8:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 800faba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fabc:	2200      	movs	r2, #0
 800fabe:	623b      	str	r3, [r7, #32]
 800fac0:	627a      	str	r2, [r7, #36]	; 0x24
 800fac2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fac4:	2200      	movs	r2, #0
 800fac6:	61bb      	str	r3, [r7, #24]
 800fac8:	61fa      	str	r2, [r7, #28]
 800faca:	6a3b      	ldr	r3, [r7, #32]
 800facc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800fad0:	4602      	mov	r2, r0
 800fad2:	1a9b      	subs	r3, r3, r2
 800fad4:	613b      	str	r3, [r7, #16]
 800fad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad8:	460a      	mov	r2, r1
 800fada:	eb63 0302 	sbc.w	r3, r3, r2
 800fade:	617b      	str	r3, [r7, #20]
 800fae0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fae4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800fae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faea:	2200      	movs	r2, #0
 800faec:	469a      	mov	sl, r3
 800faee:	4693      	mov	fp, r2
 800faf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faf2:	fb0a f203 	mul.w	r2, sl, r3
 800faf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf8:	fb0b f303 	mul.w	r3, fp, r3
 800fafc:	4413      	add	r3, r2
 800fafe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb00:	fba2 890a 	umull	r8, r9, r2, sl
 800fb04:	444b      	add	r3, r9
 800fb06:	4699      	mov	r9, r3
 800fb08:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800fb0c:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800fb10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	da08      	bge.n	800fb2a <VL53L1_range_maths+0xae>
 800fb18:	f240 11ff 	movw	r1, #511	; 0x1ff
 800fb1c:	1851      	adds	r1, r2, r1
 800fb1e:	60b9      	str	r1, [r7, #8]
 800fb20:	f143 0300 	adc.w	r3, r3, #0
 800fb24:	60fb      	str	r3, [r7, #12]
 800fb26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fb2a:	f04f 0000 	mov.w	r0, #0
 800fb2e:	f04f 0100 	mov.w	r1, #0
 800fb32:	0a50      	lsrs	r0, r2, #9
 800fb34:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800fb38:	1259      	asrs	r1, r3, #9
 800fb3a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800fb3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb40:	f249 2257 	movw	r2, #37463	; 0x9257
 800fb44:	fb03 f202 	mul.w	r2, r3, r2
 800fb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb4a:	2100      	movs	r1, #0
 800fb4c:	fb01 f303 	mul.w	r3, r1, r3
 800fb50:	4413      	add	r3, r2
 800fb52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb54:	f249 2157 	movw	r1, #37463	; 0x9257
 800fb58:	fba2 4501 	umull	r4, r5, r2, r1
 800fb5c:	442b      	add	r3, r5
 800fb5e:	461d      	mov	r5, r3
 800fb60:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800fb64:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800fb68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	da07      	bge.n	800fb80 <VL53L1_range_maths+0x104>
 800fb70:	4934      	ldr	r1, [pc, #208]	; (800fc44 <VL53L1_range_maths+0x1c8>)
 800fb72:	1851      	adds	r1, r2, r1
 800fb74:	6039      	str	r1, [r7, #0]
 800fb76:	f143 0300 	adc.w	r3, r3, #0
 800fb7a:	607b      	str	r3, [r7, #4]
 800fb7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb80:	f04f 0000 	mov.w	r0, #0
 800fb84:	f04f 0100 	mov.w	r1, #0
 800fb88:	0d90      	lsrs	r0, r2, #22
 800fb8a:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800fb8e:	1599      	asrs	r1, r3, #22
 800fb90:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800fb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb96:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fb98:	4413      	add	r3, r2
 800fb9a:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 800fb9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb9e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fba0:	fb02 f303 	mul.w	r3, r2, r3
 800fba4:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 800fba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fbac:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 800fbae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	da01      	bge.n	800fbb8 <VL53L1_range_maths+0x13c>
 800fbb4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800fbb8:	12db      	asrs	r3, r3, #11
 800fbba:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 800fbbc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d130      	bne.n	800fc26 <VL53L1_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800fbc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fbc6:	4613      	mov	r3, r2
 800fbc8:	009b      	lsls	r3, r3, #2
 800fbca:	4413      	add	r3, r2
 800fbcc:	005b      	lsls	r3, r3, #1
 800fbce:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800fbd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	da00      	bge.n	800fbd8 <VL53L1_range_maths+0x15c>
 800fbd6:	3303      	adds	r3, #3
 800fbd8:	109b      	asrs	r3, r3, #2
 800fbda:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 800fbdc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fbde:	4b1a      	ldr	r3, [pc, #104]	; (800fc48 <VL53L1_range_maths+0x1cc>)
 800fbe0:	fb83 2301 	smull	r2, r3, r3, r1
 800fbe4:	109a      	asrs	r2, r3, #2
 800fbe6:	17cb      	asrs	r3, r1, #31
 800fbe8:	1ad2      	subs	r2, r2, r3
 800fbea:	4613      	mov	r3, r2
 800fbec:	009b      	lsls	r3, r3, #2
 800fbee:	4413      	add	r3, r2
 800fbf0:	005b      	lsls	r3, r3, #1
 800fbf2:	1aca      	subs	r2, r1, r3
 800fbf4:	2a04      	cmp	r2, #4
 800fbf6:	dc09      	bgt.n	800fc0c <VL53L1_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800fbf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbfa:	4a13      	ldr	r2, [pc, #76]	; (800fc48 <VL53L1_range_maths+0x1cc>)
 800fbfc:	fb82 1203 	smull	r1, r2, r2, r3
 800fc00:	1092      	asrs	r2, r2, #2
 800fc02:	17db      	asrs	r3, r3, #31
 800fc04:	1ad3      	subs	r3, r2, r3
 800fc06:	b21b      	sxth	r3, r3
 800fc08:	647b      	str	r3, [r7, #68]	; 0x44
 800fc0a:	e015      	b.n	800fc38 <VL53L1_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800fc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc0e:	4a0e      	ldr	r2, [pc, #56]	; (800fc48 <VL53L1_range_maths+0x1cc>)
 800fc10:	fb82 1203 	smull	r1, r2, r2, r3
 800fc14:	1092      	asrs	r2, r2, #2
 800fc16:	17db      	asrs	r3, r3, #31
 800fc18:	1ad3      	subs	r3, r2, r3
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	3301      	adds	r3, #1
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	b21b      	sxth	r3, r3
 800fc22:	647b      	str	r3, [r7, #68]	; 0x44
 800fc24:	e008      	b.n	800fc38 <VL53L1_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800fc26:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	d104      	bne.n	800fc38 <VL53L1_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800fc2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc30:	0fda      	lsrs	r2, r3, #31
 800fc32:	4413      	add	r3, r2
 800fc34:	105b      	asrs	r3, r3, #1
 800fc36:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 800fc38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	374c      	adds	r7, #76	; 0x4c
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc44:	003fffff 	.word	0x003fffff
 800fc48:	66666667 	.word	0x66666667

0800fc4c <VL53L1_decode_vcsel_period>:


uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b085      	sub	sp, #20
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	4603      	mov	r3, r0
 800fc54:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53L1_p_031 = 0;
 800fc56:	2300      	movs	r3, #0
 800fc58:	73fb      	strb	r3, [r7, #15]

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 800fc5a:	79fb      	ldrb	r3, [r7, #7]
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	b2db      	uxtb	r3, r3
 800fc60:	005b      	lsls	r3, r3, #1
 800fc62:	73fb      	strb	r3, [r7, #15]

	return VL53L1_p_031;
 800fc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3714      	adds	r7, #20
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc70:	4770      	bx	lr

0800fc72 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53L1_xtalk_histogram_shape_t *pxtalk,
		VL53L1_histogram_bin_data_t    *phist)
{
 800fc72:	b480      	push	{r7}
 800fc74:	b083      	sub	sp, #12
 800fc76:	af00      	add	r7, sp, #0
 800fc78:	6078      	str	r0, [r7, #4]
 800fc7a:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53L1_p_019 =
			pxtalk->VL53L1_p_019;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53L1_p_019 =
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53L1_p_022 =
			pxtalk->VL53L1_p_022;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53L1_p_022 =
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	781a      	ldrb	r2, [r3, #0]
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	709a      	strb	r2, [r3, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	7a5a      	ldrb	r2, [r3, #9]
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	685a      	ldr	r2, [r3, #4]
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	605a      	str	r2, [r3, #4]
}
 800fce2:	bf00      	nop
 800fce4:	370c      	adds	r7, #12
 800fce6:	46bd      	mov	sp, r7
 800fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcec:	4770      	bx	lr

0800fcee <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 800fcee:	b480      	push	{r7}
 800fcf0:	b087      	sub	sp, #28
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	60f8      	str	r0, [r7, #12]
 800fcf6:	460b      	mov	r3, r1
 800fcf8:	607a      	str	r2, [r7, #4]
 800fcfa:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2203      	movs	r2, #3
 800fd04:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2203      	movs	r2, #3
 800fd0a:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2200      	movs	r2, #0
 800fd10:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2200      	movs	r2, #0
 800fd16:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2218      	movs	r2, #24
 800fd22:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800fd24:	897b      	ldrh	r3, [r7, #10]
 800fd26:	b2da      	uxtb	r2, r3
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2200      	movs	r2, #0
 800fd36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2200      	movs	r2, #0
 800fd46:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2200      	movs	r2, #0
 800fd56:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2200      	movs	r2, #0
 800fd66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2200      	movs	r2, #0
 800fd76:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53L1_p_009                       = 0;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53L1_p_019                = 0;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2200      	movs	r2, #0
 800fd86:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2200      	movs	r2, #0
 800fd96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2200      	movs	r2, #0
 800fda6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2200      	movs	r2, #0
 800fdae:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53L1_p_004             = 0;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	82fb      	strh	r3, [r7, #22]
 800fdc6:	e009      	b.n	800fddc <VL53L1_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800fdc8:	8afb      	ldrh	r3, [r7, #22]
 800fdca:	8afa      	ldrh	r2, [r7, #22]
 800fdcc:	b2d1      	uxtb	r1, r2
 800fdce:	687a      	ldr	r2, [r7, #4]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	460a      	mov	r2, r1
 800fdd4:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800fdd6:	8afb      	ldrh	r3, [r7, #22]
 800fdd8:	3301      	adds	r3, #1
 800fdda:	82fb      	strh	r3, [r7, #22]
 800fddc:	8afb      	ldrh	r3, [r7, #22]
 800fdde:	2b05      	cmp	r3, #5
 800fde0:	d9f2      	bls.n	800fdc8 <VL53L1_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800fde2:	2300      	movs	r3, #0
 800fde4:	82fb      	strh	r3, [r7, #22]
 800fde6:	e007      	b.n	800fdf8 <VL53L1_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800fde8:	8afb      	ldrh	r3, [r7, #22]
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	4413      	add	r3, r2
 800fdee:	2201      	movs	r2, #1
 800fdf0:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800fdf2:	8afb      	ldrh	r3, [r7, #22]
 800fdf4:	3301      	adds	r3, #1
 800fdf6:	82fb      	strh	r3, [r7, #22]
 800fdf8:	8afb      	ldrh	r3, [r7, #22]
 800fdfa:	2b05      	cmp	r3, #5
 800fdfc:	d9f4      	bls.n	800fde8 <VL53L1_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800fdfe:	2300      	movs	r3, #0
 800fe00:	82fb      	strh	r3, [r7, #22]
 800fe02:	e013      	b.n	800fe2c <VL53L1_init_histogram_bin_data_struct+0x13e>
		if (i < VL53L1_p_024)
 800fe04:	8afa      	ldrh	r2, [r7, #22]
 800fe06:	897b      	ldrh	r3, [r7, #10]
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d206      	bcs.n	800fe1a <VL53L1_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800fe0c:	8afa      	ldrh	r2, [r7, #22]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	3206      	adds	r2, #6
 800fe12:	68f9      	ldr	r1, [r7, #12]
 800fe14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800fe18:	e005      	b.n	800fe26 <VL53L1_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800fe1a:	8afa      	ldrh	r2, [r7, #22]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	3206      	adds	r2, #6
 800fe20:	2100      	movs	r1, #0
 800fe22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800fe26:	8afb      	ldrh	r3, [r7, #22]
 800fe28:	3301      	adds	r3, #1
 800fe2a:	82fb      	strh	r3, [r7, #22]
 800fe2c:	8afb      	ldrh	r3, [r7, #22]
 800fe2e:	2b17      	cmp	r3, #23
 800fe30:	d9e8      	bls.n	800fe04 <VL53L1_init_histogram_bin_data_struct+0x116>


}
 800fe32:	bf00      	nop
 800fe34:	bf00      	nop
 800fe36:	371c      	adds	r7, #28
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr

0800fe40 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800fe40:	b480      	push	{r7}
 800fe42:	b085      	sub	sp, #20
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	4603      	mov	r3, r0
 800fe48:	60b9      	str	r1, [r7, #8]
 800fe4a:	607a      	str	r2, [r7, #4]
 800fe4c:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800fe4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	da10      	bge.n	800fe78 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800fe56:	7bfb      	ldrb	r3, [r7, #15]
 800fe58:	43db      	mvns	r3, r3
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	f003 0307 	and.w	r3, r3, #7
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	3308      	adds	r3, #8
 800fe64:	b2da      	uxtb	r2, r3
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800fe6a:	7bfb      	ldrb	r3, [r7, #15]
 800fe6c:	3b80      	subs	r3, #128	; 0x80
 800fe6e:	10db      	asrs	r3, r3, #3
 800fe70:	b2da      	uxtb	r2, r3
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800fe76:	e00c      	b.n	800fe92 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800fe78:	7bfb      	ldrb	r3, [r7, #15]
 800fe7a:	f003 0307 	and.w	r3, r3, #7
 800fe7e:	b2da      	uxtb	r2, r3
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800fe84:	7bfb      	ldrb	r3, [r7, #15]
 800fe86:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800fe8a:	10db      	asrs	r3, r3, #3
 800fe8c:	b2da      	uxtb	r2, r3
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	701a      	strb	r2, [r3, #0]
}
 800fe92:	bf00      	nop
 800fe94:	3714      	adds	r7, #20
 800fe96:	46bd      	mov	sp, r7
 800fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9c:	4770      	bx	lr

0800fe9e <VL53L1_hist_find_min_max_bin_values>:


void  VL53L1_hist_find_min_max_bin_values(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800fe9e:	b480      	push	{r7}
 800fea0:	b085      	sub	sp, #20
 800fea2:	af00      	add	r7, sp, #0
 800fea4:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800fea6:	2300      	movs	r3, #0
 800fea8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800feaa:	2300      	movs	r3, #0
 800feac:	73fb      	strb	r3, [r7, #15]
 800feae:	e02c      	b.n	800ff0a <VL53L1_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800feb0:	7bfb      	ldrb	r3, [r7, #15]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d009      	beq.n	800feca <VL53L1_hist_find_min_max_bin_values+0x2c>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800febc:	7bf9      	ldrb	r1, [r7, #15]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	3106      	adds	r1, #6
 800fec2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fec6:	429a      	cmp	r2, r3
 800fec8:	db07      	blt.n	800feda <VL53L1_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800feca:	7bfa      	ldrb	r2, [r7, #15]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	3206      	adds	r2, #6
 800fed0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800feda:	7bfb      	ldrb	r3, [r7, #15]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d009      	beq.n	800fef4 <VL53L1_hist_find_min_max_bin_values+0x56>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800fee6:	7bf9      	ldrb	r1, [r7, #15]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	3106      	adds	r1, #6
 800feec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	dc07      	bgt.n	800ff04 <VL53L1_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800fef4:	7bfa      	ldrb	r2, [r7, #15]
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	3206      	adds	r2, #6
 800fefa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800ff04:	7bfb      	ldrb	r3, [r7, #15]
 800ff06:	3301      	adds	r3, #1
 800ff08:	73fb      	strb	r3, [r7, #15]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	7a9b      	ldrb	r3, [r3, #10]
 800ff0e:	7bfa      	ldrb	r2, [r7, #15]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d3cd      	bcc.n	800feb0 <VL53L1_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800ff14:	bf00      	nop
 800ff16:	bf00      	nop
 800ff18:	3714      	adds	r7, #20
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr

0800ff22 <VL53L1_hist_estimate_ambient_from_ambient_bins>:


void  VL53L1_hist_estimate_ambient_from_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800ff22:	b480      	push	{r7}
 800ff24:	b085      	sub	sp, #20
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	7adb      	ldrb	r3, [r3, #11]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d03a      	beq.n	800ffac <VL53L1_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2200      	movs	r2, #0
 800ff44:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800ff48:	2300      	movs	r3, #0
 800ff4a:	73fb      	strb	r3, [r7, #15]
 800ff4c:	e00e      	b.n	800ff6c <VL53L1_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ff54:	7bf9      	ldrb	r1, [r7, #15]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	3106      	adds	r1, #6
 800ff5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ff5e:	441a      	add	r2, r3
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800ff66:	7bfb      	ldrb	r3, [r7, #15]
 800ff68:	3301      	adds	r3, #1
 800ff6a:	73fb      	strb	r3, [r7, #15]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	7adb      	ldrb	r3, [r3, #11]
 800ff70:	7bfa      	ldrb	r2, [r7, #15]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d3eb      	bcc.n	800ff4e <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	7ad2      	ldrb	r2, [r2, #11]
 800ff8c:	0852      	lsrs	r2, r2, #1
 800ff8e:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800ff90:	441a      	add	r2, r3
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800ff9e:	687a      	ldr	r2, [r7, #4]
 800ffa0:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53L1_p_004 /=
 800ffa2:	fb93 f2f2 	sdiv	r2, r3, r2
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800ffac:	bf00      	nop
 800ffae:	3714      	adds	r7, #20
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb6:	4770      	bx	lr

0800ffb8 <VL53L1_f_001>:
	VL53L1_dmax_calibration_data_t	     *pcal,
	VL53L1_hist_gen3_dmax_config_t	     *pcfg,
	VL53L1_histogram_bin_data_t          *pbins,
	VL53L1_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800ffb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ffbc:	b0ca      	sub	sp, #296	; 0x128
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800ffc4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800ffc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ffcc:	4603      	mov	r3, r0
 800ffce:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 800ffea:	f04f 0200 	mov.w	r2, #0
 800ffee:	f04f 0300 	mov.w	r3, #0
 800fff2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 800fff6:	2300      	movs	r3, #0
 800fff8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_006     = 0x0000;
 800fffc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010000:	2300      	movs	r3, #0
 8010002:	8353      	strh	r3, [r2, #26]
	pdata->VL53L1_p_033 = 0x0000;
 8010004:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010008:	2300      	movs	r3, #0
 801000a:	6153      	str	r3, [r2, #20]
	pdata->VL53L1_p_001          = 0x0000;
 801000c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010010:	2300      	movs	r3, #0
 8010012:	8313      	strh	r3, [r2, #24]
	pdata->VL53L1_p_012    = 0x0000;
 8010014:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010018:	2300      	movs	r3, #0
 801001a:	6113      	str	r3, [r2, #16]
	pdata->VL53L1_p_004     = 0x0000;
 801001c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010020:	2300      	movs	r3, #0
 8010022:	61d3      	str	r3, [r2, #28]
	pdata->VL53L1_p_034 = 0x0000;
 8010024:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010028:	2300      	movs	r3, #0
 801002a:	6213      	str	r3, [r2, #32]
	pdata->VL53L1_p_035             = 0;
 801002c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010030:	2300      	movs	r3, #0
 8010032:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53L1_p_007            = 0;
 8010034:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010038:	2300      	movs	r3, #0
 801003a:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 801003c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8010040:	2300      	movs	r3, #0
 8010042:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53L1_p_019        != 0) &&
 8010044:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010048:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 801004c:	2b00      	cmp	r3, #0
 801004e:	f000 80e1 	beq.w	8010214 <VL53L1_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 8010052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53L1_p_019        != 0) &&
 801005a:	2b00      	cmp	r3, #0
 801005c:	f000 80da 	beq.w	8010214 <VL53L1_f_001+0x25c>



		pll_period_us   =
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 8010060:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010064:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8010068:	4618      	mov	r0, r3
 801006a:	f7ff f9ff 	bl	800f46c <VL53L1_calc_pll_period_us>
 801006e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 8010072:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801007a:	3301      	adds	r3, #1
 801007c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53L1_p_036  =
			VL53L1_duration_maths(
 8010080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010088:	2110      	movs	r1, #16
 801008a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 801008e:	f7ff fa04 	bl	800f49a <VL53L1_duration_maths>
 8010092:	4602      	mov	r2, r0
		pdata->VL53L1_p_036  =
 8010094:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010098:	601a      	str	r2, [r3, #0]
				VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53L1_p_001 =
			VL53L1_rate_maths(
 801009a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801009e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80100a2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	4619      	mov	r1, r3
 80100aa:	4610      	mov	r0, r2
 80100ac:	f7ff fc6d 	bl	800f98a <VL53L1_rate_maths>
 80100b0:	4603      	mov	r3, r0
		pdata->VL53L1_p_001 =
 80100b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80100b6:	8313      	strh	r3, [r2, #24]
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_033   =
			VL53L1_events_per_spad_maths(
 80100b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80100bc:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 80100c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80100c4:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 80100c8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	461a      	mov	r2, r3
 80100d0:	f7ff fa3c 	bl	800f54c <VL53L1_events_per_spad_maths>
 80100d4:	4602      	mov	r2, r0
		pdata->VL53L1_p_033   =
 80100d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80100da:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 80100dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80100e0:	8adb      	ldrh	r3, [r3, #22]
 80100e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80100e6:	8193      	strh	r3, [r2, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 80100e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80100ec:	8adb      	ldrh	r3, [r3, #22]
 80100ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80100f2:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53L1_p_033 > 0) {
 80100f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80100f8:	695b      	ldr	r3, [r3, #20]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	f000 808a 	beq.w	8010214 <VL53L1_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 8010100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010104:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 8010106:	b29b      	uxth	r3, r3
 8010108:	2200      	movs	r2, #0
 801010a:	461c      	mov	r4, r3
 801010c:	4615      	mov	r5, r2
 801010e:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 8010112:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8010116:	4622      	mov	r2, r4
 8010118:	462b      	mov	r3, r5
 801011a:	f04f 0000 	mov.w	r0, #0
 801011e:	f04f 0100 	mov.w	r1, #0
 8010122:	0159      	lsls	r1, r3, #5
 8010124:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010128:	0150      	lsls	r0, r2, #5
 801012a:	4602      	mov	r2, r0
 801012c:	460b      	mov	r3, r1
 801012e:	ebb2 0804 	subs.w	r8, r2, r4
 8010132:	eb63 0905 	sbc.w	r9, r3, r5
 8010136:	f04f 0200 	mov.w	r2, #0
 801013a:	f04f 0300 	mov.w	r3, #0
 801013e:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8010142:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8010146:	ea4f 0288 	mov.w	r2, r8, lsl #2
 801014a:	4690      	mov	r8, r2
 801014c:	4699      	mov	r9, r3
 801014e:	eb18 0a04 	adds.w	sl, r8, r4
 8010152:	eb49 0b05 	adc.w	fp, r9, r5
 8010156:	f04f 0200 	mov.w	r2, #0
 801015a:	f04f 0300 	mov.w	r3, #0
 801015e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010162:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010166:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801016a:	4692      	mov	sl, r2
 801016c:	469b      	mov	fp, r3
 801016e:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 8010172:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010176:	f04f 0000 	mov.w	r0, #0
 801017a:	f04f 0100 	mov.w	r1, #0
 801017e:	0319      	lsls	r1, r3, #12
 8010180:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8010184:	0310      	lsls	r0, r2, #12
 8010186:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53L1_p_033/2;
 801018a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801018e:	695b      	ldr	r3, [r3, #20]
 8010190:	085b      	lsrs	r3, r3, #1
 8010192:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64  += (uint64_t)tmp32;
 8010196:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801019a:	2200      	movs	r2, #0
 801019c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80101a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80101a4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80101a8:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80101ac:	4621      	mov	r1, r4
 80101ae:	1851      	adds	r1, r2, r1
 80101b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80101b2:	4629      	mov	r1, r5
 80101b4:	eb43 0101 	adc.w	r1, r3, r1
 80101b8:	65f9      	str	r1, [r7, #92]	; 0x5c
 80101ba:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80101be:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 80101c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80101c6:	695b      	ldr	r3, [r3, #20]
 80101c8:	2200      	movs	r2, #0
 80101ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80101ce:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80101d2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80101d6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80101da:	f7f0 fd0d 	bl	8000bf8 <__aeabi_uldivmod>
 80101de:	4602      	mov	r2, r0
 80101e0:	460b      	mov	r3, r1
 80101e2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53L1_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 80101e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80101ea:	8adb      	ldrh	r3, [r3, #22]
 80101ec:	b29b      	uxth	r3, r3
 80101ee:	2200      	movs	r2, #0
 80101f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80101f4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80101f8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80101fc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8010200:	4621      	mov	r1, r4
 8010202:	428a      	cmp	r2, r1
 8010204:	4629      	mov	r1, r5
 8010206:	418b      	sbcs	r3, r1
 8010208:	d204      	bcs.n	8010214 <VL53L1_f_001+0x25c>
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 801020a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 801020e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010212:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 8010214:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010218:	881b      	ldrh	r3, [r3, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	f000 82e9 	beq.w	80107f2 <VL53L1_f_001+0x83a>
		(pbins->VL53L1_p_019        != 0) &&
 8010220:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010224:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 8010228:	2b00      	cmp	r3, #0
 801022a:	f000 82e2 	beq.w	80107f2 <VL53L1_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 801022e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010232:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53L1_p_019        != 0) &&
 8010234:	2b00      	cmp	r3, #0
 8010236:	f000 82dc 	beq.w	80107f2 <VL53L1_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 801023a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801023e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 8010242:	2b00      	cmp	r3, #0
 8010244:	f000 82d5 	beq.w	80107f2 <VL53L1_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 8010248:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801024c:	885b      	ldrh	r3, [r3, #2]
 801024e:	b29b      	uxth	r3, r3
 8010250:	2200      	movs	r2, #0
 8010252:	653b      	str	r3, [r7, #80]	; 0x50
 8010254:	657a      	str	r2, [r7, #84]	; 0x54
 8010256:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 801025a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 801025e:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8010262:	4622      	mov	r2, r4
 8010264:	462b      	mov	r3, r5
 8010266:	f04f 0000 	mov.w	r0, #0
 801026a:	f04f 0100 	mov.w	r1, #0
 801026e:	0159      	lsls	r1, r3, #5
 8010270:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010274:	0150      	lsls	r0, r2, #5
 8010276:	4602      	mov	r2, r0
 8010278:	460b      	mov	r3, r1
 801027a:	1b11      	subs	r1, r2, r4
 801027c:	64b9      	str	r1, [r7, #72]	; 0x48
 801027e:	eb63 0305 	sbc.w	r3, r3, r5
 8010282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010284:	f04f 0200 	mov.w	r2, #0
 8010288:	f04f 0300 	mov.w	r3, #0
 801028c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8010290:	4649      	mov	r1, r9
 8010292:	008b      	lsls	r3, r1, #2
 8010294:	4641      	mov	r1, r8
 8010296:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801029a:	4641      	mov	r1, r8
 801029c:	008a      	lsls	r2, r1, #2
 801029e:	4611      	mov	r1, r2
 80102a0:	461a      	mov	r2, r3
 80102a2:	460b      	mov	r3, r1
 80102a4:	191b      	adds	r3, r3, r4
 80102a6:	643b      	str	r3, [r7, #64]	; 0x40
 80102a8:	4613      	mov	r3, r2
 80102aa:	eb45 0303 	adc.w	r3, r5, r3
 80102ae:	647b      	str	r3, [r7, #68]	; 0x44
 80102b0:	f04f 0200 	mov.w	r2, #0
 80102b4:	f04f 0300 	mov.w	r3, #0
 80102b8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80102bc:	4629      	mov	r1, r5
 80102be:	02cb      	lsls	r3, r1, #11
 80102c0:	4621      	mov	r1, r4
 80102c2:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 80102c6:	4621      	mov	r1, r4
 80102c8:	02ca      	lsls	r2, r1, #11
 80102ca:	461c      	mov	r4, r3
 80102cc:	4613      	mov	r3, r2
 80102ce:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 80102d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80102d6:	881b      	ldrh	r3, [r3, #0]
 80102d8:	085b      	lsrs	r3, r3, #1
 80102da:	b29b      	uxth	r3, r3
 80102dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 80102e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80102e4:	2200      	movs	r2, #0
 80102e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80102ea:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80102ee:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80102f2:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 80102f6:	4621      	mov	r1, r4
 80102f8:	1851      	adds	r1, r2, r1
 80102fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80102fc:	4629      	mov	r1, r5
 80102fe:	eb43 0101 	adc.w	r1, r3, r1
 8010302:	63f9      	str	r1, [r7, #60]	; 0x3c
 8010304:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8010308:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 801030c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010310:	881b      	ldrh	r3, [r3, #0]
 8010312:	b29b      	uxth	r3, r3
 8010314:	2200      	movs	r2, #0
 8010316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801031a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801031e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8010322:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8010326:	f7f0 fc67 	bl	8000bf8 <__aeabi_uldivmod>
 801032a:	4602      	mov	r2, r0
 801032c:	460b      	mov	r3, r1
 801032e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53L1_p_012   = (uint32_t)tmp64;
 8010332:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010336:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801033a:	611a      	str	r2, [r3, #16]
		pdata->VL53L1_p_012 <<= 4;
 801033c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010340:	691b      	ldr	r3, [r3, #16]
 8010342:	011a      	lsls	r2, r3, #4
 8010344:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010348:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 801034a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2200      	movs	r2, #0
 8010352:	633b      	str	r3, [r7, #48]	; 0x30
 8010354:	637a      	str	r2, [r7, #52]	; 0x34
 8010356:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 801035a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 801035e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010362:	695b      	ldr	r3, [r3, #20]
 8010364:	2200      	movs	r2, #0
 8010366:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801036a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801036e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010372:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8010376:	4622      	mov	r2, r4
 8010378:	fb02 f203 	mul.w	r2, r2, r3
 801037c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010380:	4629      	mov	r1, r5
 8010382:	fb01 f303 	mul.w	r3, r1, r3
 8010386:	441a      	add	r2, r3
 8010388:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801038c:	4621      	mov	r1, r4
 801038e:	fba3 1301 	umull	r1, r3, r3, r1
 8010392:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010396:	460b      	mov	r3, r1
 8010398:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801039c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80103a0:	18d3      	adds	r3, r2, r3
 80103a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80103a6:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80103aa:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80103ae:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 80103b2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80103b6:	8b5b      	ldrh	r3, [r3, #26]
 80103b8:	b29b      	uxth	r3, r3
 80103ba:	2200      	movs	r2, #0
 80103bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80103c0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80103c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80103c8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80103cc:	4622      	mov	r2, r4
 80103ce:	fb02 f203 	mul.w	r2, r2, r3
 80103d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80103d6:	4629      	mov	r1, r5
 80103d8:	fb01 f303 	mul.w	r3, r1, r3
 80103dc:	441a      	add	r2, r3
 80103de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80103e2:	4621      	mov	r1, r4
 80103e4:	fba3 1301 	umull	r1, r3, r3, r1
 80103e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80103ec:	460b      	mov	r3, r1
 80103ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80103f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103f6:	18d3      	adds	r3, r2, r3
 80103f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80103fc:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8010400:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8010404:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 8010408:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801040c:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 8010410:	62b9      	str	r1, [r7, #40]	; 0x28
 8010412:	f143 0300 	adc.w	r3, r3, #0
 8010416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010418:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801041c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 8010420:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010424:	f04f 0000 	mov.w	r0, #0
 8010428:	f04f 0100 	mov.w	r1, #0
 801042c:	0cd0      	lsrs	r0, r2, #19
 801042e:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8010432:	0cd9      	lsrs	r1, r3, #19
 8010434:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 8010438:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801043c:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8010440:	6239      	str	r1, [r7, #32]
 8010442:	f143 0300 	adc.w	r3, r3, #0
 8010446:	627b      	str	r3, [r7, #36]	; 0x24
 8010448:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801044c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 8010450:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8010454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010458:	f04f 0300 	mov.w	r3, #0
 801045c:	f7f0 fbcc 	bl	8000bf8 <__aeabi_uldivmod>
 8010460:	4602      	mov	r2, r0
 8010462:	460b      	mov	r3, r1
 8010464:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 8010468:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801046c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8010470:	f173 0300 	sbcs.w	r3, r3, #0
 8010474:	d305      	bcc.n	8010482 <VL53L1_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 8010476:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801047a:	f04f 0300 	mov.w	r3, #0
 801047e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 8010482:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010486:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801048a:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 801048c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2200      	movs	r2, #0
 8010494:	61bb      	str	r3, [r7, #24]
 8010496:	61fa      	str	r2, [r7, #28]
 8010498:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801049c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_012;
 80104a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80104a4:	691b      	ldr	r3, [r3, #16]
 80104a6:	2200      	movs	r2, #0
 80104a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80104ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80104b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80104b4:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80104b8:	4622      	mov	r2, r4
 80104ba:	fb02 f203 	mul.w	r2, r2, r3
 80104be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80104c2:	4629      	mov	r1, r5
 80104c4:	fb01 f303 	mul.w	r3, r1, r3
 80104c8:	441a      	add	r2, r3
 80104ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80104ce:	4621      	mov	r1, r4
 80104d0:	fba3 1301 	umull	r1, r3, r3, r1
 80104d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80104d8:	460b      	mov	r3, r1
 80104da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80104de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80104e2:	18d3      	adds	r3, r2, r3
 80104e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80104e8:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80104ec:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80104f0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 80104f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80104f8:	8b5b      	ldrh	r3, [r3, #26]
 80104fa:	b29b      	uxth	r3, r3
 80104fc:	2200      	movs	r2, #0
 80104fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010502:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8010506:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801050a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801050e:	4622      	mov	r2, r4
 8010510:	fb02 f203 	mul.w	r2, r2, r3
 8010514:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010518:	4629      	mov	r1, r5
 801051a:	fb01 f303 	mul.w	r3, r1, r3
 801051e:	441a      	add	r2, r3
 8010520:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010524:	4621      	mov	r1, r4
 8010526:	fba3 1301 	umull	r1, r3, r3, r1
 801052a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801052e:	460b      	mov	r3, r1
 8010530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010534:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010538:	18d3      	adds	r3, r2, r3
 801053a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801053e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8010542:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8010546:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 801054a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801054e:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 8010552:	6139      	str	r1, [r7, #16]
 8010554:	f143 0300 	adc.w	r3, r3, #0
 8010558:	617b      	str	r3, [r7, #20]
 801055a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801055e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 8010562:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010566:	f04f 0000 	mov.w	r0, #0
 801056a:	f04f 0100 	mov.w	r1, #0
 801056e:	0cd0      	lsrs	r0, r2, #19
 8010570:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8010574:	0cd9      	lsrs	r1, r3, #19
 8010576:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 801057a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 801057e:	2200      	movs	r2, #0
 8010580:	67bb      	str	r3, [r7, #120]	; 0x78
 8010582:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 8010584:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010588:	891b      	ldrh	r3, [r3, #8]
 801058a:	b29b      	uxth	r3, r3
 801058c:	2200      	movs	r2, #0
 801058e:	673b      	str	r3, [r7, #112]	; 0x70
 8010590:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 8010592:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8010596:	462b      	mov	r3, r5
 8010598:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801059c:	4642      	mov	r2, r8
 801059e:	fb02 f203 	mul.w	r2, r2, r3
 80105a2:	464b      	mov	r3, r9
 80105a4:	4621      	mov	r1, r4
 80105a6:	fb01 f303 	mul.w	r3, r1, r3
 80105aa:	4413      	add	r3, r2
 80105ac:	4622      	mov	r2, r4
 80105ae:	4641      	mov	r1, r8
 80105b0:	fba2 1201 	umull	r1, r2, r2, r1
 80105b4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80105b8:	460a      	mov	r2, r1
 80105ba:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80105be:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80105c2:	4413      	add	r3, r2
 80105c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80105c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80105cc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80105d0:	4622      	mov	r2, r4
 80105d2:	fb02 f203 	mul.w	r2, r2, r3
 80105d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80105da:	4629      	mov	r1, r5
 80105dc:	fb01 f303 	mul.w	r3, r1, r3
 80105e0:	4413      	add	r3, r2
 80105e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80105e6:	4621      	mov	r1, r4
 80105e8:	fba2 1201 	umull	r1, r2, r2, r1
 80105ec:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80105f0:	460a      	mov	r2, r1
 80105f2:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80105f6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80105fa:	4413      	add	r3, r2
 80105fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010600:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8010604:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8010608:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 801060c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010610:	88db      	ldrh	r3, [r3, #6]
 8010612:	b29b      	uxth	r3, r3
 8010614:	2200      	movs	r2, #0
 8010616:	66bb      	str	r3, [r7, #104]	; 0x68
 8010618:	66fa      	str	r2, [r7, #108]	; 0x6c
 801061a:	f04f 0200 	mov.w	r2, #0
 801061e:	f04f 0300 	mov.w	r3, #0
 8010622:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8010626:	4629      	mov	r1, r5
 8010628:	01cb      	lsls	r3, r1, #7
 801062a:	4621      	mov	r1, r4
 801062c:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8010630:	4621      	mov	r1, r4
 8010632:	01ca      	lsls	r2, r1, #7
 8010634:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8010638:	1884      	adds	r4, r0, r2
 801063a:	60bc      	str	r4, [r7, #8]
 801063c:	eb41 0303 	adc.w	r3, r1, r3
 8010640:	60fb      	str	r3, [r7, #12]
 8010642:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010646:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64,
 801064a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801064e:	88db      	ldrh	r3, [r3, #6]
 8010650:	b29b      	uxth	r3, r3
 8010652:	2200      	movs	r2, #0
 8010654:	663b      	str	r3, [r7, #96]	; 0x60
 8010656:	667a      	str	r2, [r7, #100]	; 0x64
 8010658:	f04f 0200 	mov.w	r2, #0
 801065c:	f04f 0300 	mov.w	r3, #0
 8010660:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8010664:	4629      	mov	r1, r5
 8010666:	020b      	lsls	r3, r1, #8
 8010668:	4621      	mov	r1, r4
 801066a:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 801066e:	4621      	mov	r1, r4
 8010670:	020a      	lsls	r2, r1, #8
 8010672:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8010676:	f7f0 fabf 	bl	8000bf8 <__aeabi_uldivmod>
 801067a:	4602      	mov	r2, r0
 801067c:	460b      	mov	r3, r1
 801067e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 8010682:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010686:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 801068a:	6039      	str	r1, [r7, #0]
 801068c:	f143 0300 	adc.w	r3, r3, #0
 8010690:	607b      	str	r3, [r7, #4]
 8010692:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010696:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64, 1000);
 801069a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 801069e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80106a2:	f04f 0300 	mov.w	r3, #0
 80106a6:	f7f0 faa7 	bl	8000bf8 <__aeabi_uldivmod>
 80106aa:	4602      	mov	r2, r0
 80106ac:	460b      	mov	r3, r1
 80106ae:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 80106b2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80106b6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80106ba:	f173 0300 	sbcs.w	r3, r3, #0
 80106be:	d305      	bcc.n	80106cc <VL53L1_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 80106c0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80106c4:	f04f 0300 	mov.w	r3, #0
 80106c8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 80106cc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80106d0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80106d4:	621a      	str	r2, [r3, #32]



		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 80106d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80106da:	69db      	ldr	r3, [r3, #28]
 80106dc:	021b      	lsls	r3, r3, #8
 80106de:	4618      	mov	r0, r3
 80106e0:	f7fe ffcd 	bl	800f67e <VL53L1_isqrt>
 80106e4:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 80106e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80106ec:	785b      	ldrb	r3, [r3, #1]
 80106ee:	461a      	mov	r2, r3
 80106f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80106f4:	fb02 f303 	mul.w	r3, r2, r3
 80106f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53L1_p_004 <
 80106fc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010700:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 8010702:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8010706:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53L1_p_004 <
 8010708:	4293      	cmp	r3, r2
 801070a:	d218      	bcs.n	801073e <VL53L1_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 801070c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010710:	685b      	ldr	r3, [r3, #4]
 8010712:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53L1_p_004;
 8010714:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010718:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 801071a:	1ad3      	subs	r3, r2, r3
 801071c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 8010720:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010724:	021b      	lsls	r3, r3, #8
 8010726:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 801072a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801072e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010732:	429a      	cmp	r2, r3
 8010734:	d203      	bcs.n	801073e <VL53L1_f_001+0x786>
				tmp32 = amb_thres_delta;
 8010736:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801073a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53L1_p_007 =
			(int16_t)VL53L1_f_002(
 801073e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010742:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53L1_p_034,
				(uint32_t)pcal->ref__distance_mm,
 8010744:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010748:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 801074a:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 801074c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010750:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 8010752:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8010756:	f000 f854 	bl	8010802 <VL53L1_f_002>
 801075a:	4603      	mov	r3, r0
 801075c:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_007 =
 801075e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010762:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 8010764:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010768:	6a1b      	ldr	r3, [r3, #32]
 801076a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 801076e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010772:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8010776:	461a      	mov	r2, r3
 8010778:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801077c:	fb02 f303 	mul.w	r3, r2, r3
 8010780:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 8010784:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8010788:	3308      	adds	r3, #8
 801078a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 801078e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8010792:	091b      	lsrs	r3, r3, #4
 8010794:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53L1_p_035 =
			(int16_t)VL53L1_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 8010798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801079c:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53L1_f_002(
 801079e:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 80107a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80107a4:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 80107a6:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 80107a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80107ac:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 80107ae:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80107b2:	f000 f826 	bl	8010802 <VL53L1_f_002>
 80107b6:	4603      	mov	r3, r0
 80107b8:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_035 =
 80107ba:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80107be:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 80107c0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80107c4:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80107c8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80107cc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80107d0:	429a      	cmp	r2, r3
 80107d2:	da07      	bge.n	80107e4 <VL53L1_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 80107d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80107d8:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80107dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80107e0:	801a      	strh	r2, [r3, #0]
 80107e2:	e006      	b.n	80107f2 <VL53L1_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53L1_p_007;
 80107e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80107e8:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 80107ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80107f0:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 80107f2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 80107f6:	4618      	mov	r0, r3
 80107f8:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80107fc:	46bd      	mov	sp, r7
 80107fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010802 <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 8010802:	b580      	push	{r7, lr}
 8010804:	b086      	sub	sp, #24
 8010806:	af00      	add	r7, sp, #0
 8010808:	60f8      	str	r0, [r7, #12]
 801080a:	60b9      	str	r1, [r7, #8]
 801080c:	607a      	str	r2, [r7, #4]
 801080e:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 8010810:	2300      	movs	r3, #0
 8010812:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 8010814:	2300      	movs	r3, #0
 8010816:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	009b      	lsls	r3, r3, #2
 801081c:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	fb03 f303 	mul.w	r3, r3, r3
 8010824:	693a      	ldr	r2, [r7, #16]
 8010826:	4413      	add	r3, r2
 8010828:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 801082a:	6938      	ldr	r0, [r7, #16]
 801082c:	f7fe ff27 	bl	800f67e <VL53L1_isqrt>
 8010830:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 8010832:	693a      	ldr	r2, [r7, #16]
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	4413      	add	r3, r2
 8010838:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	011b      	lsls	r3, r3, #4
 801083e:	4618      	mov	r0, r3
 8010840:	f7fe ff1d 	bl	800f67e <VL53L1_isqrt>
 8010844:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	687a      	ldr	r2, [r7, #4]
 801084a:	fb02 f303 	mul.w	r3, r2, r3
 801084e:	617b      	str	r3, [r7, #20]

	if (tmp32 > 0) {
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d009      	beq.n	801086a <VL53L1_f_002+0x68>
		range_mm += (tmp32);
 8010856:	697a      	ldr	r2, [r7, #20]
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	4413      	add	r3, r2
 801085c:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 801085e:	693b      	ldr	r3, [r7, #16]
 8010860:	005b      	lsls	r3, r3, #1
 8010862:	697a      	ldr	r2, [r7, #20]
 8010864:	fbb2 f3f3 	udiv	r3, r2, r3
 8010868:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 801086a:	697b      	ldr	r3, [r7, #20]

}
 801086c:	4618      	mov	r0, r3
 801086e:	3718      	adds	r7, #24
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}

08010874 <VL53L1_f_016>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53L1_f_016(
	VL53L1_hist_gen3_algo_private_data_t   *palgo)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b084      	sub	sp, #16
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 801087c:	2300      	movs	r3, #0
 801087e:	73fb      	strb	r3, [r7, #15]

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2218      	movs	r2, #24
 8010884:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022                = 0;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2200      	movs	r2, #0
 801088a:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024           = 0;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2200      	movs	r2, #0
 8010890:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_045         = 0;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2200      	movs	r2, #0
 8010896:	711a      	strb	r2, [r3, #4]
	palgo->VL53L1_p_004   = 0;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2200      	movs	r2, #0
 801089c:	609a      	str	r2, [r3, #8]
	palgo->VL53L1_p_032 = 0;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2200      	movs	r2, #0
 80108a2:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	781b      	ldrb	r3, [r3, #0]
 80108a8:	73fb      	strb	r3, [r7, #15]
 80108aa:	e01f      	b.n	80108ec <VL53L1_f_016+0x78>
		palgo->VL53L1_p_043[lb]      = 0;
 80108ac:	7bfb      	ldrb	r3, [r7, #15]
 80108ae:	687a      	ldr	r2, [r7, #4]
 80108b0:	4413      	add	r3, r2
 80108b2:	2200      	movs	r2, #0
 80108b4:	741a      	strb	r2, [r3, #16]
		palgo->VL53L1_p_046[lb] = 0;
 80108b6:	7bfb      	ldrb	r3, [r7, #15]
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	4413      	add	r3, r2
 80108bc:	2200      	movs	r2, #0
 80108be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53L1_p_047[lb]     = 0;
 80108c2:	7bfb      	ldrb	r3, [r7, #15]
 80108c4:	687a      	ldr	r2, [r7, #4]
 80108c6:	4413      	add	r3, r2
 80108c8:	2200      	movs	r2, #0
 80108ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53L1_p_048[lb]      = 0;
 80108ce:	7bfa      	ldrb	r2, [r7, #15]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	322e      	adds	r2, #46	; 0x2e
 80108d4:	2100      	movs	r1, #0
 80108d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53L1_p_008[lb]     = 0;
 80108da:	7bfa      	ldrb	r2, [r7, #15]
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	3246      	adds	r2, #70	; 0x46
 80108e0:	2100      	movs	r1, #0
 80108e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 80108e6:	7bfb      	ldrb	r3, [r7, #15]
 80108e8:	3301      	adds	r3, #1
 80108ea:	73fb      	strb	r3, [r7, #15]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	785b      	ldrb	r3, [r3, #1]
 80108f0:	7bfa      	ldrb	r2, [r7, #15]
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d3da      	bcc.n	80108ac <VL53L1_f_016+0x38>
	}

	palgo->VL53L1_p_049 = 0;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2200      	movs	r2, #0
 80108fa:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53L1_p_050               = VL53L1_D_001;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2208      	movs	r2, #8
 8010902:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53L1_p_051             = 0;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2200      	movs	r2, #0
 801090a:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53L1_init_histogram_bin_data_struct(
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010914:	461a      	mov	r2, r3
 8010916:	2118      	movs	r1, #24
 8010918:	2000      	movs	r0, #0
 801091a:	f7ff f9e8 	bl	800fcee <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8010924:	461a      	mov	r2, r3
 8010926:	2118      	movs	r1, #24
 8010928:	2000      	movs	r0, #0
 801092a:	f7ff f9e0 	bl	800fcee <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8010934:	461a      	mov	r2, r3
 8010936:	2118      	movs	r1, #24
 8010938:	2000      	movs	r0, #0
 801093a:	f7ff f9d8 	bl	800fcee <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8010944:	461a      	mov	r2, r3
 8010946:	2118      	movs	r1, #24
 8010948:	2000      	movs	r0, #0
 801094a:	f7ff f9d0 	bl	800fcee <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8010954:	461a      	mov	r2, r3
 8010956:	2118      	movs	r1, #24
 8010958:	2000      	movs	r0, #0
 801095a:	f7ff f9c8 	bl	800fcee <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 801095e:	bf00      	nop
 8010960:	3710      	adds	r7, #16
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}

08010966 <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010966:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801096a:	b090      	sub	sp, #64	; 0x40
 801096c:	af00      	add	r7, sp, #0
 801096e:	61b9      	str	r1, [r7, #24]
 8010970:	617a      	str	r2, [r7, #20]
 8010972:	461a      	mov	r2, r3
 8010974:	4603      	mov	r3, r0
 8010976:	83fb      	strh	r3, [r7, #30]
 8010978:	4613      	mov	r3, r2
 801097a:	777b      	strb	r3, [r7, #29]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801097c:	2300      	movs	r3, #0
 801097e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 8010982:	2300      	movs	r3, #0
 8010984:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53L1_p_001            = 0;
 8010988:	2300      	movs	r3, #0
 801098a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 801098e:	f04f 0200 	mov.w	r2, #0
 8010992:	f04f 0300 	mov.w	r3, #0
 8010996:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 801099a:	2300      	movs	r3, #0
 801099c:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53L1_p_008       = 0;
 801099e:	2300      	movs	r3, #0
 80109a0:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 80109a2:	2300      	movs	r3, #0
 80109a4:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 80109a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109a8:	7a5a      	ldrb	r2, [r3, #9]
 80109aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109ac:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 80109ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109b0:	7a1a      	ldrb	r2, [r3, #8]
 80109b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109b4:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 80109b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109b8:	7a9a      	ldrb	r2, [r3, #10]
 80109ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109bc:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 80109be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109c0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80109c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109c6:	609a      	str	r2, [r3, #8]



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 80109c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80109ce:	4618      	mov	r0, r3
 80109d0:	f7ff f93c 	bl	800fc4c <VL53L1_decode_vcsel_period>
 80109d4:	4603      	mov	r3, r0
 80109d6:	461a      	mov	r2, r3
	palgo->VL53L1_p_031 =
 80109d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109da:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
 80109dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80109e2:	17da      	asrs	r2, r3, #31
 80109e4:	60bb      	str	r3, [r7, #8]
 80109e6:	60fa      	str	r2, [r7, #12]
 80109e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80109ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 80109f0:	8bfb      	ldrh	r3, [r7, #30]
 80109f2:	2200      	movs	r2, #0
 80109f4:	4698      	mov	r8, r3
 80109f6:	4691      	mov	r9, r2
 80109f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109fa:	fb08 f203 	mul.w	r2, r8, r3
 80109fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a00:	fb09 f303 	mul.w	r3, r9, r3
 8010a04:	4413      	add	r3, r2
 8010a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a08:	fba2 4508 	umull	r4, r5, r2, r8
 8010a0c:	442b      	add	r3, r5
 8010a0e:	461d      	mov	r5, r3
 8010a10:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8010a14:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 8010a18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010a1c:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 8010a20:	f143 0b00 	adc.w	fp, r3, #0
 8010a24:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 8010a28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	da08      	bge.n	8010a42 <VL53L1_f_018+0xdc>
 8010a30:	f640 71ff 	movw	r1, #4095	; 0xfff
 8010a34:	1851      	adds	r1, r2, r1
 8010a36:	6039      	str	r1, [r7, #0]
 8010a38:	f143 0300 	adc.w	r3, r3, #0
 8010a3c:	607b      	str	r3, [r7, #4]
 8010a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a42:	f04f 0000 	mov.w	r0, #0
 8010a46:	f04f 0100 	mov.w	r1, #0
 8010a4a:	0b10      	lsrs	r0, r2, #12
 8010a4c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8010a50:	1319      	asrs	r1, r3, #12
 8010a52:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 8010a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a58:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010a60:	e062      	b.n	8010b28 <VL53L1_f_018+0x1c2>

		VL53L1_p_001 = lb >> 2;
 8010a62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010a66:	089b      	lsrs	r3, r3, #2
 8010a68:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 8010a6c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010a70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010a72:	4413      	add	r3, r2
 8010a74:	7c9b      	ldrb	r3, [r3, #18]
 8010a76:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 8010a78:	6a3b      	ldr	r3, [r7, #32]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	dd4f      	ble.n	8010b1e <VL53L1_f_018+0x1b8>

			if (lb < pxtalk->VL53L1_p_024 &&
 8010a7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a80:	7a9b      	ldrb	r3, [r3, #10]
 8010a82:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d20f      	bcs.n	8010aaa <VL53L1_f_018+0x144>
 8010a8a:	7f7b      	ldrb	r3, [r7, #29]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d00c      	beq.n	8010aaa <VL53L1_f_018+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53L1_p_008 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 8010a90:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a96:	3206      	adds	r2, #6
 8010a98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53L1_p_008 = samples * (amb_events +
 8010a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9e:	441a      	add	r2, r3
 8010aa0:	6a3b      	ldr	r3, [r7, #32]
 8010aa2:	fb02 f303 	mul.w	r3, r2, r3
 8010aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8010aa8:	e004      	b.n	8010ab4 <VL53L1_f_018+0x14e>
			else
				VL53L1_p_008 = samples *  amb_events;
 8010aaa:	6a3b      	ldr	r3, [r7, #32]
 8010aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010aae:	fb02 f303 	mul.w	r3, r2, r3
 8010ab2:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 8010ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f7fe fde1 	bl	800f67e <VL53L1_isqrt>
 8010abc:	4603      	mov	r3, r0
 8010abe:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008 += (samples/2);
 8010ac0:	6a3b      	ldr	r3, [r7, #32]
 8010ac2:	0fda      	lsrs	r2, r3, #31
 8010ac4:	4413      	add	r3, r2
 8010ac6:	105b      	asrs	r3, r3, #1
 8010ac8:	461a      	mov	r2, r3
 8010aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010acc:	4413      	add	r3, r2
 8010ace:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= samples;
 8010ad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ad2:	6a3b      	ldr	r3, [r7, #32]
 8010ad4:	fb92 f3f3 	sdiv	r3, r2, r3
 8010ad8:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 *= ambient_threshold_sigma;
 8010ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010adc:	69ba      	ldr	r2, [r7, #24]
 8010ade:	fb02 f303 	mul.w	r3, r2, r3
 8010ae2:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += 8;
 8010ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae6:	3308      	adds	r3, #8
 8010ae8:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= 16;
 8010aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	da00      	bge.n	8010af2 <VL53L1_f_018+0x18c>
 8010af0:	330f      	adds	r3, #15
 8010af2:	111b      	asrs	r3, r3, #4
 8010af4:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += amb_events;
 8010af6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afa:	4413      	add	r3, r2
 8010afc:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53L1_p_008 < min_ambient_threshold_events)
 8010afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	da01      	bge.n	8010b0a <VL53L1_f_018+0x1a4>
				VL53L1_p_008 = min_ambient_threshold_events;
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 8010b0a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010b0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b10:	3216      	adds	r2, #22
 8010b12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 8010b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b1c:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 8010b1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010b22:	3301      	adds	r3, #1
 8010b24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010b28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b2a:	7a9b      	ldrb	r3, [r3, #10]
 8010b2c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010b30:	429a      	cmp	r2, r3
 8010b32:	d396      	bcc.n	8010a62 <VL53L1_f_018+0xfc>

	}



	palgo->VL53L1_p_045 = 0;
 8010b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b36:	2200      	movs	r2, #0
 8010b38:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 8010b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b3c:	7a1b      	ldrb	r3, [r3, #8]
 8010b3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010b42:	e033      	b.n	8010bac <VL53L1_f_018+0x246>

		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 8010b44:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010b48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b4a:	3206      	adds	r2, #6
 8010b4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010b50:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8010b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b56:	3116      	adds	r1, #22
 8010b58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	dd13      	ble.n	8010b88 <VL53L1_f_018+0x222>
			palgo->VL53L1_p_043[lb]      = 1;
 8010b60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010b64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b66:	4413      	add	r3, r2
 8010b68:	2201      	movs	r2, #1
 8010b6a:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 1;
 8010b6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010b70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b72:	4413      	add	r3, r2
 8010b74:	2201      	movs	r2, #1
 8010b76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53L1_p_045++;
 8010b7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b7c:	791b      	ldrb	r3, [r3, #4]
 8010b7e:	3301      	adds	r3, #1
 8010b80:	b2da      	uxtb	r2, r3
 8010b82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b84:	711a      	strb	r2, [r3, #4]
 8010b86:	e00c      	b.n	8010ba2 <VL53L1_f_018+0x23c>
		} else {
			palgo->VL53L1_p_043[lb]      = 0;
 8010b88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010b8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b8e:	4413      	add	r3, r2
 8010b90:	2200      	movs	r2, #0
 8010b92:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 0;
 8010b94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010b98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b9a:	4413      	add	r3, r2
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 8010ba2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010bac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bae:	7a9b      	ldrb	r3, [r3, #10]
 8010bb0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	d3c5      	bcc.n	8010b44 <VL53L1_f_018+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010bb8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3740      	adds	r7, #64	; 0x40
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010bc6 <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010bc6:	b480      	push	{r7}
 8010bc8:	b085      	sub	sp, #20
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2200      	movs	r2, #0
 8010be2:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 8010be6:	2300      	movs	r3, #0
 8010be8:	73fb      	strb	r3, [r7, #15]
 8010bea:	e02d      	b.n	8010c48 <VL53L1_f_019+0x82>

		j = (i + 1) % palgo->VL53L1_p_031;
 8010bec:	7bfb      	ldrb	r3, [r7, #15]
 8010bee:	3301      	adds	r3, #1
 8010bf0:	687a      	ldr	r2, [r7, #4]
 8010bf2:	78d2      	ldrb	r2, [r2, #3]
 8010bf4:	fb93 f1f2 	sdiv	r1, r3, r2
 8010bf8:	fb01 f202 	mul.w	r2, r1, r2
 8010bfc:	1a9b      	subs	r3, r3, r2
 8010bfe:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	789b      	ldrb	r3, [r3, #2]
 8010c04:	7bfa      	ldrb	r2, [r7, #15]
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d21b      	bcs.n	8010c42 <VL53L1_f_019+0x7c>
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	789b      	ldrb	r3, [r3, #2]
 8010c0e:	7b3a      	ldrb	r2, [r7, #12]
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d216      	bcs.n	8010c42 <VL53L1_f_019+0x7c>
			if (palgo->VL53L1_p_046[i] == 0 &&
 8010c14:	7bfb      	ldrb	r3, [r7, #15]
 8010c16:	687a      	ldr	r2, [r7, #4]
 8010c18:	4413      	add	r3, r2
 8010c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d10f      	bne.n	8010c42 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 8010c22:	7b3b      	ldrb	r3, [r7, #12]
 8010c24:	687a      	ldr	r2, [r7, #4]
 8010c26:	4413      	add	r3, r2
 8010c28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 8010c2c:	2b01      	cmp	r3, #1
 8010c2e:	d108      	bne.n	8010c42 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 8010c30:	7bbb      	ldrb	r3, [r7, #14]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d105      	bne.n	8010c42 <VL53L1_f_019+0x7c>
				found == 0) {
				palgo->VL53L1_p_049 = i;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	7bfa      	ldrb	r2, [r7, #15]
 8010c3a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 8010c3e:	2301      	movs	r3, #1
 8010c40:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 8010c42:	7bfb      	ldrb	r3, [r7, #15]
 8010c44:	3301      	adds	r3, #1
 8010c46:	73fb      	strb	r3, [r7, #15]
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	78db      	ldrb	r3, [r3, #3]
 8010c4c:	7bfa      	ldrb	r2, [r7, #15]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d3cc      	bcc.n	8010bec <VL53L1_f_019+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010c52:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3714      	adds	r7, #20
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c60:	4770      	bx	lr

08010c62 <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010c62:	b480      	push	{r7}
 8010c64:	b085      	sub	sp, #20
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 8010c72:	2300      	movs	r3, #0
 8010c74:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 8010c76:	2300      	movs	r3, #0
 8010c78:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8010c80:	73fb      	strb	r3, [r7, #15]
 8010c82:	e05a      	b.n	8010d3a <VL53L1_f_020+0xd8>
		palgo->VL53L1_p_031);
		lb++) {



		i =  lb      % palgo->VL53L1_p_031;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	78da      	ldrb	r2, [r3, #3]
 8010c88:	7bfb      	ldrb	r3, [r7, #15]
 8010c8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c8e:	fb01 f202 	mul.w	r2, r1, r2
 8010c92:	1a9b      	subs	r3, r3, r2
 8010c94:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53L1_p_031;
 8010c96:	7bfb      	ldrb	r3, [r7, #15]
 8010c98:	3301      	adds	r3, #1
 8010c9a:	687a      	ldr	r2, [r7, #4]
 8010c9c:	78d2      	ldrb	r2, [r2, #3]
 8010c9e:	fb93 f1f2 	sdiv	r1, r3, r2
 8010ca2:	fb01 f202 	mul.w	r2, r1, r2
 8010ca6:	1a9b      	subs	r3, r3, r2
 8010ca8:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	789b      	ldrb	r3, [r3, #2]
 8010cae:	7b7a      	ldrb	r2, [r7, #13]
 8010cb0:	429a      	cmp	r2, r3
 8010cb2:	d23f      	bcs.n	8010d34 <VL53L1_f_020+0xd2>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	789b      	ldrb	r3, [r3, #2]
 8010cb8:	7b3a      	ldrb	r2, [r7, #12]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d23a      	bcs.n	8010d34 <VL53L1_f_020+0xd2>

			if (palgo->VL53L1_p_046[i] == 0 &&
 8010cbe:	7b7b      	ldrb	r3, [r7, #13]
 8010cc0:	687a      	ldr	r2, [r7, #4]
 8010cc2:	4413      	add	r3, r2
 8010cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d10e      	bne.n	8010cea <VL53L1_f_020+0x88>
				palgo->VL53L1_p_046[j] == 1)
 8010ccc:	7b3b      	ldrb	r3, [r7, #12]
 8010cce:	687a      	ldr	r2, [r7, #4]
 8010cd0:	4413      	add	r3, r2
 8010cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 8010cd6:	2b01      	cmp	r3, #1
 8010cd8:	d107      	bne.n	8010cea <VL53L1_f_020+0x88>
				palgo->VL53L1_p_051++;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	b2da      	uxtb	r2, r3
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d905      	bls.n	8010d06 <VL53L1_f_020+0xa4>
				palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_046[i] > 0)
 8010d06:	7b7b      	ldrb	r3, [r7, #13]
 8010d08:	687a      	ldr	r2, [r7, #4]
 8010d0a:	4413      	add	r3, r2
 8010d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d009      	beq.n	8010d28 <VL53L1_f_020+0xc6>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 8010d14:	7b7b      	ldrb	r3, [r7, #13]
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 8010d1c:	687a      	ldr	r2, [r7, #4]
 8010d1e:	4413      	add	r3, r2
 8010d20:	460a      	mov	r2, r1
 8010d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010d26:	e005      	b.n	8010d34 <VL53L1_f_020+0xd2>
			else
				palgo->VL53L1_p_047[i] = 0;
 8010d28:	7b7b      	ldrb	r3, [r7, #13]
 8010d2a:	687a      	ldr	r2, [r7, #4]
 8010d2c:	4413      	add	r3, r2
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 8010d34:	7bfb      	ldrb	r3, [r7, #15]
 8010d36:	3301      	adds	r3, #1
 8010d38:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53L1_p_049 +
 8010d3a:	7bfa      	ldrb	r2, [r7, #15]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8010d42:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 8010d48:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	db9a      	blt.n	8010c84 <VL53L1_f_020+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 8010d4e:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 8010d52:	4618      	mov	r0, r3
 8010d54:	3714      	adds	r7, #20
 8010d56:	46bd      	mov	sp, r7
 8010d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5c:	4770      	bx	lr

08010d5e <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010d5e:	b480      	push	{r7}
 8010d60:	b087      	sub	sp, #28
 8010d62:	af00      	add	r7, sp, #0
 8010d64:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010d66:	2300      	movs	r3, #0
 8010d68:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 8010d6e:	2300      	movs	r3, #0
 8010d70:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 8010d72:	2300      	movs	r3, #0
 8010d74:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 8010d76:	2300      	movs	r3, #0
 8010d78:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	78db      	ldrb	r3, [r3, #3]
 8010d82:	3b01      	subs	r3, #1
 8010d84:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 8010d86:	7cbb      	ldrb	r3, [r7, #18]
 8010d88:	085b      	lsrs	r3, r3, #1
 8010d8a:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53L1_p_049;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8010d92:	75fb      	strb	r3, [r7, #23]
 8010d94:	e0a2      	b.n	8010edc <VL53L1_f_021+0x17e>
		palgo->VL53L1_p_031);
		blb++) {



		i =  blb      % palgo->VL53L1_p_031;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	78da      	ldrb	r2, [r3, #3]
 8010d9a:	7dfb      	ldrb	r3, [r7, #23]
 8010d9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010da0:	fb01 f202 	mul.w	r2, r1, r2
 8010da4:	1a9b      	subs	r3, r3, r2
 8010da6:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53L1_p_031;
 8010da8:	7dfb      	ldrb	r3, [r7, #23]
 8010daa:	3301      	adds	r3, #1
 8010dac:	687a      	ldr	r2, [r7, #4]
 8010dae:	78d2      	ldrb	r2, [r2, #3]
 8010db0:	fb93 f1f2 	sdiv	r1, r3, r2
 8010db4:	fb01 f202 	mul.w	r2, r1, r2
 8010db8:	1a9b      	subs	r3, r3, r2
 8010dba:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53L1_p_024 &&
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	789b      	ldrb	r3, [r3, #2]
 8010dc0:	7d7a      	ldrb	r2, [r7, #21]
 8010dc2:	429a      	cmp	r2, r3
 8010dc4:	f080 8087 	bcs.w	8010ed6 <VL53L1_f_021+0x178>
				j < palgo->VL53L1_p_024) {
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53L1_p_024 &&
 8010dcc:	7d3a      	ldrb	r2, [r7, #20]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	f080 8081 	bcs.w	8010ed6 <VL53L1_f_021+0x178>



			if (palgo->VL53L1_p_047[i] == 0 &&
 8010dd4:	7d7b      	ldrb	r3, [r7, #21]
 8010dd6:	687a      	ldr	r2, [r7, #4]
 8010dd8:	4413      	add	r3, r2
 8010dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d12f      	bne.n	8010e42 <VL53L1_f_021+0xe4>
					palgo->VL53L1_p_047[j] > 0) {
 8010de2:	7d3b      	ldrb	r3, [r7, #20]
 8010de4:	687a      	ldr	r2, [r7, #4]
 8010de6:	4413      	add	r3, r2
 8010de8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d028      	beq.n	8010e42 <VL53L1_f_021+0xe4>

				pulse_no = palgo->VL53L1_p_047[j] - 1;
 8010df0:	7d3b      	ldrb	r3, [r7, #20]
 8010df2:	687a      	ldr	r2, [r7, #4]
 8010df4:	4413      	add	r3, r2
 8010df6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dfa:	3b01      	subs	r3, #1
 8010dfc:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8010e04:	7cfa      	ldrb	r2, [r7, #19]
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d21b      	bcs.n	8010e42 <VL53L1_f_021+0xe4>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8010e0a:	7cfa      	ldrb	r2, [r7, #19]
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	00db      	lsls	r3, r3, #3
 8010e10:	4413      	add	r3, r2
 8010e12:	009b      	lsls	r3, r3, #2
 8010e14:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010e18:	687a      	ldr	r2, [r7, #4]
 8010e1a:	4413      	add	r3, r2
 8010e1c:	3304      	adds	r3, #4
 8010e1e:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_015 = blb;
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	7dfa      	ldrb	r2, [r7, #23]
 8010e24:	701a      	strb	r2, [r3, #0]
					pdata->VL53L1_p_022    = blb + 1;
 8010e26:	7dfb      	ldrb	r3, [r7, #23]
 8010e28:	3301      	adds	r3, #1
 8010e2a:	b2da      	uxtb	r2, r3
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	705a      	strb	r2, [r3, #1]
					pdata->VL53L1_p_025   = 0xFF;
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	22ff      	movs	r2, #255	; 0xff
 8010e34:	709a      	strb	r2, [r3, #2]
					pdata->VL53L1_p_026     = 0;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016   = 0;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	2200      	movs	r2, #0
 8010e40:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53L1_p_047[i] > 0
 8010e42:	7d7b      	ldrb	r3, [r7, #21]
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	4413      	add	r3, r2
 8010e48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d042      	beq.n	8010ed6 <VL53L1_f_021+0x178>
				&& palgo->VL53L1_p_047[j] == 0) {
 8010e50:	7d3b      	ldrb	r3, [r7, #20]
 8010e52:	687a      	ldr	r2, [r7, #4]
 8010e54:	4413      	add	r3, r2
 8010e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d13b      	bne.n	8010ed6 <VL53L1_f_021+0x178>

				pulse_no = palgo->VL53L1_p_047[i] - 1;
 8010e5e:	7d7b      	ldrb	r3, [r7, #21]
 8010e60:	687a      	ldr	r2, [r7, #4]
 8010e62:	4413      	add	r3, r2
 8010e64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e68:	3b01      	subs	r3, #1
 8010e6a:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8010e72:	7cfa      	ldrb	r2, [r7, #19]
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d22e      	bcs.n	8010ed6 <VL53L1_f_021+0x178>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8010e78:	7cfa      	ldrb	r2, [r7, #19]
 8010e7a:	4613      	mov	r3, r2
 8010e7c:	00db      	lsls	r3, r3, #3
 8010e7e:	4413      	add	r3, r2
 8010e80:	009b      	lsls	r3, r3, #2
 8010e82:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010e86:	687a      	ldr	r2, [r7, #4]
 8010e88:	4413      	add	r3, r2
 8010e8a:	3304      	adds	r3, #4
 8010e8c:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_026    = blb;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	7dfa      	ldrb	r2, [r7, #23]
 8010e92:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016  = blb + 1;
 8010e94:	7dfb      	ldrb	r3, [r7, #23]
 8010e96:	3301      	adds	r3, #1
 8010e98:	b2da      	uxtb	r2, r3
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	711a      	strb	r2, [r3, #4]

					pdata->VL53L1_p_027 =
						(pdata->VL53L1_p_026 + 1) -
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53L1_p_022;
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53L1_p_026 + 1) -
 8010ea6:	1ad3      	subs	r3, r2, r3
 8010ea8:	b2db      	uxtb	r3, r3
 8010eaa:	3301      	adds	r3, #1
 8010eac:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_027 =
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	715a      	strb	r2, [r3, #5]
					pdata->VL53L1_p_055 =
						(pdata->VL53L1_p_016 + 1) -
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53L1_p_015;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53L1_p_016 + 1) -
 8010eba:	1ad3      	subs	r3, r2, r3
 8010ebc:	b2db      	uxtb	r3, r3
 8010ebe:	3301      	adds	r3, #1
 8010ec0:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_055 =
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53L1_p_055 >
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	799b      	ldrb	r3, [r3, #6]
 8010eca:	7cba      	ldrb	r2, [r7, #18]
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	d202      	bcs.n	8010ed6 <VL53L1_f_021+0x178>
						max_filter_half_width)
						pdata->VL53L1_p_055 =
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	7cba      	ldrb	r2, [r7, #18]
 8010ed4:	719a      	strb	r2, [r3, #6]
		blb++) {
 8010ed6:	7dfb      	ldrb	r3, [r7, #23]
 8010ed8:	3301      	adds	r3, #1
 8010eda:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53L1_p_049 +
 8010edc:	7dfa      	ldrb	r2, [r7, #23]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8010ee4:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53L1_p_049 +
 8010eea:	440b      	add	r3, r1
	for (blb = palgo->VL53L1_p_049;
 8010eec:	429a      	cmp	r2, r3
 8010eee:	f6ff af52 	blt.w	8010d96 <VL53L1_f_021+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010ef2:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	371c      	adds	r7, #28
 8010efa:	46bd      	mov	sp, r7
 8010efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f00:	4770      	bx	lr

08010f02 <VL53L1_f_028>:


VL53L1_Error VL53L1_f_028(
	VL53L1_HistTargetOrder                target_order,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010f02:	b580      	push	{r7, lr}
 8010f04:	b090      	sub	sp, #64	; 0x40
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	4603      	mov	r3, r0
 8010f0a:	6039      	str	r1, [r7, #0]
 8010f0c:	71fb      	strb	r3, [r7, #7]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53L1_hist_pulse_data_t  tmp;
	VL53L1_hist_pulse_data_t *ptmp = &tmp;
 8010f14:	f107 030c 	add.w	r3, r7, #12
 8010f18:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_hist_pulse_data_t *p0;
	VL53L1_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 8010f20:	2301      	movs	r3, #1
 8010f22:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010f2c:	2b01      	cmp	r3, #1
 8010f2e:	d965      	bls.n	8010ffc <VL53L1_f_028+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 8010f30:	e05f      	b.n	8010ff2 <VL53L1_f_028+0xf0>

		swapped = 0;
 8010f32:	2300      	movs	r3, #0
 8010f34:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 8010f38:	2301      	movs	r3, #1
 8010f3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010f3e:	e051      	b.n	8010fe4 <VL53L1_f_028+0xe2>

			p0 = &(palgo->VL53L1_p_002[i-1]);
 8010f40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f44:	1e5a      	subs	r2, r3, #1
 8010f46:	4613      	mov	r3, r2
 8010f48:	00db      	lsls	r3, r3, #3
 8010f4a:	4413      	add	r3, r2
 8010f4c:	009b      	lsls	r3, r3, #2
 8010f4e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010f52:	683a      	ldr	r2, [r7, #0]
 8010f54:	4413      	add	r3, r2
 8010f56:	3304      	adds	r3, #4
 8010f58:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53L1_p_002[i]);
 8010f5a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010f5e:	4613      	mov	r3, r2
 8010f60:	00db      	lsls	r3, r3, #3
 8010f62:	4413      	add	r3, r2
 8010f64:	009b      	lsls	r3, r3, #2
 8010f66:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010f6a:	683a      	ldr	r2, [r7, #0]
 8010f6c:	4413      	add	r3, r2
 8010f6e:	3304      	adds	r3, #4
 8010f70:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 8010f72:	79fb      	ldrb	r3, [r7, #7]
 8010f74:	2b02      	cmp	r3, #2
 8010f76:	d118      	bne.n	8010faa <VL53L1_f_028+0xa8>
			== VL53L1_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53L1_p_013 <
 8010f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f7a:	691a      	ldr	r2, [r3, #16]
						p1->VL53L1_p_013) {
 8010f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f7e:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53L1_p_013 <
 8010f80:	429a      	cmp	r2, r3
 8010f82:	da2a      	bge.n	8010fda <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 8010f84:	2224      	movs	r2, #36	; 0x24
 8010f86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010f88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f8a:	f009 fd4f 	bl	801aa2c <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 8010f8e:	2224      	movs	r2, #36	; 0x24
 8010f90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010f92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f94:	f009 fd4a 	bl	801aa2c <memcpy>
					p0, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 8010f98:	2224      	movs	r2, #36	; 0x24
 8010f9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010f9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010f9e:	f009 fd45 	bl	801aa2c <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8010fa8:	e017      	b.n	8010fda <VL53L1_f_028+0xd8>
				}

			} else {

				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 8010faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fac:	699a      	ldr	r2, [r3, #24]
 8010fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb0:	699b      	ldr	r3, [r3, #24]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d911      	bls.n	8010fda <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 8010fb6:	2224      	movs	r2, #36	; 0x24
 8010fb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010fba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010fbc:	f009 fd36 	bl	801aa2c <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 8010fc0:	2224      	movs	r2, #36	; 0x24
 8010fc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010fc6:	f009 fd31 	bl	801aa2c <memcpy>
					p0,   sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 8010fca:	2224      	movs	r2, #36	; 0x24
 8010fcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010fce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010fd0:	f009 fd2c 	bl	801aa2c <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 8010fda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010fde:	3301      	adds	r3, #1
 8010fe0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010fea:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d3a6      	bcc.n	8010f40 <VL53L1_f_028+0x3e>
	while (swapped > 0) {
 8010ff2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d19b      	bne.n	8010f32 <VL53L1_f_028+0x30>

			}
		}
	}

ENDFUNC:
 8010ffa:	e000      	b.n	8010ffe <VL53L1_f_028+0xfc>
		goto ENDFUNC;
 8010ffc:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 8010ffe:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 8011002:	4618      	mov	r0, r3
 8011004:	3740      	adds	r7, #64	; 0x40
 8011006:	46bd      	mov	sp, r7
 8011008:	bd80      	pop	{r7, pc}

0801100a <VL53L1_f_022>:

VL53L1_Error VL53L1_f_022(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 801100a:	b480      	push	{r7}
 801100c:	b087      	sub	sp, #28
 801100e:	af00      	add	r7, sp, #0
 8011010:	4603      	mov	r3, r0
 8011012:	60b9      	str	r1, [r7, #8]
 8011014:	607a      	str	r2, [r7, #4]
 8011016:	73fb      	strb	r3, [r7, #15]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8011018:	2300      	movs	r3, #0
 801101a:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 801101c:	2300      	movs	r3, #0
 801101e:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8011020:	2300      	movs	r3, #0
 8011022:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8011024:	7bfa      	ldrb	r2, [r7, #15]
 8011026:	4613      	mov	r3, r2
 8011028:	00db      	lsls	r3, r3, #3
 801102a:	4413      	add	r3, r2
 801102c:	009b      	lsls	r3, r3, #2
 801102e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011032:	687a      	ldr	r2, [r7, #4]
 8011034:	4413      	add	r3, r2
 8011036:	3304      	adds	r3, #4
 8011038:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	2200      	movs	r2, #0
 801103e:	60da      	str	r2, [r3, #12]
	pdata->VL53L1_p_020 = 0;
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	2200      	movs	r2, #0
 8011044:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	75fb      	strb	r3, [r7, #23]
 801104c:	e01c      	b.n	8011088 <VL53L1_f_022+0x7e>
		i =  lb % palgo->VL53L1_p_031;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	78da      	ldrb	r2, [r3, #3]
 8011052:	7dfb      	ldrb	r3, [r7, #23]
 8011054:	fbb3 f1f2 	udiv	r1, r3, r2
 8011058:	fb01 f202 	mul.w	r2, r1, r2
 801105c:	1a9b      	subs	r3, r3, r2
 801105e:	757b      	strb	r3, [r7, #21]
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	68da      	ldr	r2, [r3, #12]
 8011064:	7d79      	ldrb	r1, [r7, #21]
 8011066:	68bb      	ldr	r3, [r7, #8]
 8011068:	3106      	adds	r1, #6
 801106a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801106e:	441a      	add	r2, r3
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	60da      	str	r2, [r3, #12]
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 8011074:	693b      	ldr	r3, [r7, #16]
 8011076:	689a      	ldr	r2, [r3, #8]
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	689b      	ldr	r3, [r3, #8]
 801107c:	441a      	add	r2, r3
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8011082:	7dfb      	ldrb	r3, [r7, #23]
 8011084:	3301      	adds	r3, #1
 8011086:	75fb      	strb	r3, [r7, #23]
 8011088:	693b      	ldr	r3, [r7, #16]
 801108a:	791b      	ldrb	r3, [r3, #4]
 801108c:	7dfa      	ldrb	r2, [r7, #23]
 801108e:	429a      	cmp	r2, r3
 8011090:	d9dd      	bls.n	801104e <VL53L1_f_022+0x44>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	68da      	ldr	r2, [r3, #12]
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	689b      	ldr	r3, [r3, #8]
 801109a:	1ad2      	subs	r2, r2, r3
	pdata->VL53L1_p_013 =
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 80110a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	371c      	adds	r7, #28
 80110a8:	46bd      	mov	sp, r7
 80110aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ae:	4770      	bx	lr

080110b0 <VL53L1_f_027>:
VL53L1_Error VL53L1_f_027(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 80110b0:	b590      	push	{r4, r7, lr}
 80110b2:	b08d      	sub	sp, #52	; 0x34
 80110b4:	af02      	add	r7, sp, #8
 80110b6:	60ba      	str	r2, [r7, #8]
 80110b8:	607b      	str	r3, [r7, #4]
 80110ba:	4603      	mov	r3, r0
 80110bc:	73fb      	strb	r3, [r7, #15]
 80110be:	460b      	mov	r3, r1
 80110c0:	73bb      	strb	r3, [r7, #14]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80110c2:	2300      	movs	r3, #0
 80110c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 80110c8:	2300      	movs	r3, #0
 80110ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53L1_p_015 = 0;
 80110ce:	2300      	movs	r3, #0
 80110d0:	843b      	strh	r3, [r7, #32]
	int16_t   VL53L1_p_016   = 0;
 80110d2:	2300      	movs	r3, #0
 80110d4:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 80110d6:	2300      	movs	r3, #0
 80110d8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 80110da:	2300      	movs	r3, #0
 80110dc:	61bb      	str	r3, [r7, #24]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80110de:	7bfa      	ldrb	r2, [r7, #15]
 80110e0:	4613      	mov	r3, r2
 80110e2:	00db      	lsls	r3, r3, #3
 80110e4:	4413      	add	r3, r2
 80110e6:	009b      	lsls	r3, r3, #2
 80110e8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80110ec:	687a      	ldr	r2, [r7, #4]
 80110ee:	4413      	add	r3, r2
 80110f0:	3304      	adds	r3, #4
 80110f2:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53L1_p_025 == 0xFF)
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	789b      	ldrb	r3, [r3, #2]
 80110f8:	2bff      	cmp	r3, #255	; 0xff
 80110fa:	d102      	bne.n	8011102 <VL53L1_f_027+0x52>
		pdata->VL53L1_p_025 = 1;
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	2201      	movs	r2, #1
 8011100:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	789b      	ldrb	r3, [r3, #2]
 8011106:	687a      	ldr	r2, [r7, #4]
 8011108:	78d2      	ldrb	r2, [r2, #3]
 801110a:	fbb3 f1f2 	udiv	r1, r3, r2
 801110e:	fb01 f202 	mul.w	r2, r1, r2
 8011112:	1a9b      	subs	r3, r3, r2
 8011114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53L1_p_015  = (int16_t)i;
 8011118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801111c:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	b29a      	uxth	r2, r3
 8011124:	8c3b      	ldrh	r3, [r7, #32]
 8011126:	4413      	add	r3, r2
 8011128:	b29b      	uxth	r3, r3
 801112a:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 801112c:	8c3a      	ldrh	r2, [r7, #32]
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	789b      	ldrb	r3, [r3, #2]
 8011132:	b29b      	uxth	r3, r3
 8011134:	1ad3      	subs	r3, r2, r3
 8011136:	b29b      	uxth	r3, r3
 8011138:	843b      	strh	r3, [r7, #32]

	VL53L1_p_016    = (int16_t)i;
 801113a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801113e:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 8011140:	697b      	ldr	r3, [r7, #20]
 8011142:	791b      	ldrb	r3, [r3, #4]
 8011144:	b29a      	uxth	r2, r3
 8011146:	8bfb      	ldrh	r3, [r7, #30]
 8011148:	4413      	add	r3, r2
 801114a:	b29b      	uxth	r3, r3
 801114c:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 801114e:	8bfa      	ldrh	r2, [r7, #30]
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	789b      	ldrb	r3, [r3, #2]
 8011154:	b29b      	uxth	r3, r3
 8011156:	1ad3      	subs	r3, r2, r3
 8011158:	b29b      	uxth	r3, r3
 801115a:	83fb      	strh	r3, [r7, #30]


	window_width = VL53L1_p_016 - VL53L1_p_015;
 801115c:	8bfa      	ldrh	r2, [r7, #30]
 801115e:	8c3b      	ldrh	r3, [r7, #32]
 8011160:	1ad3      	subs	r3, r2, r3
 8011162:	b29b      	uxth	r3, r3
 8011164:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 8011166:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801116a:	2b03      	cmp	r3, #3
 801116c:	dd01      	ble.n	8011172 <VL53L1_f_027+0xc2>
		window_width = 3;
 801116e:	2303      	movs	r3, #3
 8011170:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53L1_f_030(
			VL53L1_p_015,
			VL53L1_p_015 + window_width,
 8011172:	8c3a      	ldrh	r2, [r7, #32]
 8011174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011176:	4413      	add	r3, r2
 8011178:	b29b      	uxth	r3, r3
		VL53L1_f_030(
 801117a:	b219      	sxth	r1, r3
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	78da      	ldrb	r2, [r3, #3]
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	3314      	adds	r3, #20
 8011184:	7bbc      	ldrb	r4, [r7, #14]
 8011186:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 801118a:	9301      	str	r3, [sp, #4]
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	9300      	str	r3, [sp, #0]
 8011190:	4623      	mov	r3, r4
 8011192:	f000 f846 	bl	8011222 <VL53L1_f_030>
 8011196:	4603      	mov	r3, r0
 8011198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53L1_p_028));


	if (status == VL53L1_ERROR_NONE)
 801119c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d114      	bne.n	80111ce <VL53L1_f_027+0x11e>
		status =
			VL53L1_f_030(
				VL53L1_p_016 - window_width,
 80111a4:	8bfa      	ldrh	r2, [r7, #30]
 80111a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80111a8:	1ad3      	subs	r3, r2, r3
 80111aa:	b29b      	uxth	r3, r3
			VL53L1_f_030(
 80111ac:	b218      	sxth	r0, r3
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	78da      	ldrb	r2, [r3, #3]
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	331c      	adds	r3, #28
 80111b6:	7bbc      	ldrb	r4, [r7, #14]
 80111b8:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80111bc:	9301      	str	r3, [sp, #4]
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	9300      	str	r3, [sp, #0]
 80111c2:	4623      	mov	r3, r4
 80111c4:	f000 f82d 	bl	8011222 <VL53L1_f_030>
 80111c8:	4603      	mov	r3, r0
 80111ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53L1_p_029));


	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	695a      	ldr	r2, [r3, #20]
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	69db      	ldr	r3, [r3, #28]
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d909      	bls.n	80111ee <VL53L1_f_027+0x13e>
		tmp_phase        = pdata->VL53L1_p_028;
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	695b      	ldr	r3, [r3, #20]
 80111de:	61bb      	str	r3, [r7, #24]
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	69da      	ldr	r2, [r3, #28]
 80111e4:	697b      	ldr	r3, [r7, #20]
 80111e6:	615a      	str	r2, [r3, #20]
		pdata->VL53L1_p_029 = tmp_phase;
 80111e8:	697b      	ldr	r3, [r7, #20]
 80111ea:	69ba      	ldr	r2, [r7, #24]
 80111ec:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 80111ee:	697b      	ldr	r3, [r7, #20]
 80111f0:	699a      	ldr	r2, [r3, #24]
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	695b      	ldr	r3, [r3, #20]
 80111f6:	429a      	cmp	r2, r3
 80111f8:	d203      	bcs.n	8011202 <VL53L1_f_027+0x152>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	699a      	ldr	r2, [r3, #24]
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	615a      	str	r2, [r3, #20]


	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	699a      	ldr	r2, [r3, #24]
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	69db      	ldr	r3, [r3, #28]
 801120a:	429a      	cmp	r2, r3
 801120c:	d903      	bls.n	8011216 <VL53L1_f_027+0x166>
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	699a      	ldr	r2, [r3, #24]
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 8011216:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801121a:	4618      	mov	r0, r3
 801121c:	372c      	adds	r7, #44	; 0x2c
 801121e:	46bd      	mov	sp, r7
 8011220:	bd90      	pop	{r4, r7, pc}

08011222 <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 8011222:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011226:	b09d      	sub	sp, #116	; 0x74
 8011228:	af00      	add	r7, sp, #0
 801122a:	461c      	mov	r4, r3
 801122c:	4603      	mov	r3, r0
 801122e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8011232:	460b      	mov	r3, r1
 8011234:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011238:	4613      	mov	r3, r2
 801123a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801123e:	4623      	mov	r3, r4
 8011240:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8011244:	2300      	movs	r3, #0
 8011246:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 801124a:	2300      	movs	r3, #0
 801124c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 8011250:	2300      	movs	r3, #0
 8011252:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53L1_p_008        = 0;
 8011256:	f04f 0200 	mov.w	r2, #0
 801125a:	f04f 0300 	mov.w	r3, #0
 801125e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 8011262:	f04f 0200 	mov.w	r2, #0
 8011266:	f04f 0300 	mov.w	r3, #0
 801126a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 801126e:	f04f 0200 	mov.w	r2, #0
 8011272:	f04f 0300 	mov.w	r3, #0
 8011276:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 801127a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801127e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011282:	6013      	str	r3, [r2, #0]

	if (VL53L1_p_031 != 0)
 8011284:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011288:	2b00      	cmp	r3, #0
 801128a:	f000 809c 	beq.w	80113c6 <VL53L1_f_030+0x1a4>
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 801128e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011292:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8011296:	e08f      	b.n	80113b8 <VL53L1_f_030+0x196>

		if (lb < 0)
 8011298:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801129c:	2b00      	cmp	r3, #0
 801129e:	da09      	bge.n	80112b4 <VL53L1_f_030+0x92>
			i = lb + (int16_t)VL53L1_p_031;
 80112a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80112a4:	b29a      	uxth	r2, r3
 80112a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80112aa:	4413      	add	r3, r2
 80112ac:	b29b      	uxth	r3, r3
 80112ae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80112b2:	e00a      	b.n	80112ca <VL53L1_f_030+0xa8>
		else
			i = lb % (int16_t)VL53L1_p_031;
 80112b4:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 80112b8:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80112bc:	fb91 f3f2 	sdiv	r3, r1, r2
 80112c0:	fb02 f303 	mul.w	r3, r2, r3
 80112c4:	1acb      	subs	r3, r1, r3
 80112c6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 80112ca:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	db6b      	blt.n	80113aa <VL53L1_f_030+0x188>
 80112d2:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80112d6:	2b17      	cmp	r3, #23
 80112d8:	dc67      	bgt.n	80113aa <VL53L1_f_030+0x188>
			VL53L1_p_008 =
				(int64_t)pbins->bin_data[i] -
 80112da:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80112de:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80112e2:	3306      	adds	r3, #6
 80112e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112e8:	17da      	asrs	r2, r3, #31
 80112ea:	633b      	str	r3, [r7, #48]	; 0x30
 80112ec:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53L1_p_004;
 80112ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80112f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80112f6:	17da      	asrs	r2, r3, #31
 80112f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80112fa:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53L1_p_008 =
 80112fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011302:	4602      	mov	r2, r0
 8011304:	1a9b      	subs	r3, r3, r2
 8011306:	623b      	str	r3, [r7, #32]
 8011308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801130a:	460a      	mov	r2, r1
 801130c:	eb63 0302 	sbc.w	r3, r3, r2
 8011310:	627b      	str	r3, [r7, #36]	; 0x24
 8011312:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8011316:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53L1_p_008 < 0)
 801131a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801131e:	2b00      	cmp	r3, #0
 8011320:	d009      	beq.n	8011336 <VL53L1_f_030+0x114>
 8011322:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8011326:	2b00      	cmp	r3, #0
 8011328:	da05      	bge.n	8011336 <VL53L1_f_030+0x114>
				VL53L1_p_008 = 0;
 801132a:	f04f 0200 	mov.w	r2, #0
 801132e:	f04f 0300 	mov.w	r3, #0
 8011332:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53L1_p_008;
 8011336:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801133a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801133e:	1884      	adds	r4, r0, r2
 8011340:	61bc      	str	r4, [r7, #24]
 8011342:	eb41 0303 	adc.w	r3, r1, r3
 8011346:	61fb      	str	r3, [r7, #28]
 8011348:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801134c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 8011350:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8011354:	17da      	asrs	r2, r3, #31
 8011356:	63bb      	str	r3, [r7, #56]	; 0x38
 8011358:	63fa      	str	r2, [r7, #60]	; 0x3c
 801135a:	f04f 0200 	mov.w	r2, #0
 801135e:	f04f 0300 	mov.w	r3, #0
 8011362:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011364:	02cb      	lsls	r3, r1, #11
 8011366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011368:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 801136c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801136e:	02ca      	lsls	r2, r1, #11
 8011370:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 8011374:	f143 0600 	adc.w	r6, r3, #0
 8011378:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801137a:	fb06 f203 	mul.w	r2, r6, r3
 801137e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011380:	fb05 f303 	mul.w	r3, r5, r3
 8011384:	441a      	add	r2, r3
 8011386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011388:	fba3 ab05 	umull	sl, fp, r3, r5
 801138c:	eb02 030b 	add.w	r3, r2, fp
 8011390:	469b      	mov	fp, r3
			weighted_sum +=
 8011392:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011396:	eb12 010a 	adds.w	r1, r2, sl
 801139a:	6139      	str	r1, [r7, #16]
 801139c:	eb43 030b 	adc.w	r3, r3, fp
 80113a0:	617b      	str	r3, [r7, #20]
 80113a2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80113a6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 80113aa:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	3301      	adds	r3, #1
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80113b8:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 80113bc:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80113c0:	429a      	cmp	r2, r3
 80113c2:	f77f af69 	ble.w	8011298 <VL53L1_f_030+0x76>
			VL53L1_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 80113c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80113ca:	2a01      	cmp	r2, #1
 80113cc:	f173 0300 	sbcs.w	r3, r3, #0
 80113d0:	db3b      	blt.n	801144a <VL53L1_f_030+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 80113d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80113d6:	0fd9      	lsrs	r1, r3, #31
 80113d8:	2000      	movs	r0, #0
 80113da:	60b9      	str	r1, [r7, #8]
 80113dc:	60f8      	str	r0, [r7, #12]
 80113de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80113e2:	4621      	mov	r1, r4
 80113e4:	eb11 0802 	adds.w	r8, r1, r2
 80113e8:	4629      	mov	r1, r5
 80113ea:	eb41 0903 	adc.w	r9, r1, r3
 80113ee:	f04f 0200 	mov.w	r2, #0
 80113f2:	f04f 0300 	mov.w	r3, #0
 80113f6:	ea4f 0258 	mov.w	r2, r8, lsr #1
 80113fa:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 80113fe:	ea4f 0369 	mov.w	r3, r9, asr #1
 8011402:	4610      	mov	r0, r2
 8011404:	4619      	mov	r1, r3
 8011406:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801140a:	1814      	adds	r4, r2, r0
 801140c:	603c      	str	r4, [r7, #0]
 801140e:	414b      	adcs	r3, r1
 8011410:	607b      	str	r3, [r7, #4]
 8011412:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011416:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 801141a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801141e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8011422:	f7ef fb99 	bl	8000b58 <__aeabi_ldivmod>
 8011426:	4602      	mov	r2, r0
 8011428:	460b      	mov	r3, r1
 801142a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 801142e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011432:	2b00      	cmp	r3, #0
 8011434:	da05      	bge.n	8011442 <VL53L1_f_030+0x220>
			weighted_sum = 0;
 8011436:	f04f 0200 	mov.w	r2, #0
 801143a:	f04f 0300 	mov.w	r3, #0
 801143e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 8011442:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011444:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011448:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 801144a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 801144e:	4618      	mov	r0, r3
 8011450:	3774      	adds	r7, #116	; 0x74
 8011452:	46bd      	mov	sp, r7
 8011454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011458 <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b086      	sub	sp, #24
 801145c:	af00      	add	r7, sp, #0
 801145e:	60b9      	str	r1, [r7, #8]
 8011460:	607a      	str	r2, [r7, #4]
 8011462:	603b      	str	r3, [r7, #0]
 8011464:	4603      	mov	r3, r0
 8011466:	73fb      	strb	r3, [r7, #15]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8011468:	2300      	movs	r3, #0
 801146a:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 801146c:	2300      	movs	r3, #0
 801146e:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8011470:	2300      	movs	r3, #0
 8011472:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8011474:	7bfa      	ldrb	r2, [r7, #15]
 8011476:	4613      	mov	r3, r2
 8011478:	00db      	lsls	r3, r3, #3
 801147a:	4413      	add	r3, r2
 801147c:	009b      	lsls	r3, r3, #2
 801147e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011482:	687a      	ldr	r2, [r7, #4]
 8011484:	4413      	add	r3, r2
 8011486:	3304      	adds	r3, #4
 8011488:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 801148a:	22ac      	movs	r2, #172	; 0xac
 801148c:	68b9      	ldr	r1, [r7, #8]
 801148e:	6a38      	ldr	r0, [r7, #32]
 8011490:	f009 facc 	bl	801aa2c <memcpy>



	for (lb = palgo->VL53L1_p_049;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801149a:	75fb      	strb	r3, [r7, #23]
 801149c:	e020      	b.n	80114e0 <VL53L1_f_023+0x88>
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 801149e:	693b      	ldr	r3, [r7, #16]
 80114a0:	781b      	ldrb	r3, [r3, #0]
 80114a2:	7dfa      	ldrb	r2, [r7, #23]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d304      	bcc.n	80114b2 <VL53L1_f_023+0x5a>
 80114a8:	693b      	ldr	r3, [r7, #16]
 80114aa:	791b      	ldrb	r3, [r3, #4]
 80114ac:	7dfa      	ldrb	r2, [r7, #23]
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d913      	bls.n	80114da <VL53L1_f_023+0x82>
			i =  lb % palgo->VL53L1_p_031;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	78da      	ldrb	r2, [r3, #3]
 80114b6:	7dfb      	ldrb	r3, [r7, #23]
 80114b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80114bc:	fb01 f202 	mul.w	r2, r1, r2
 80114c0:	1a9b      	subs	r3, r3, r2
 80114c2:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53L1_p_024)
 80114c4:	6a3b      	ldr	r3, [r7, #32]
 80114c6:	7a9b      	ldrb	r3, [r3, #10]
 80114c8:	7d7a      	ldrb	r2, [r7, #21]
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d205      	bcs.n	80114da <VL53L1_f_023+0x82>
				ppulse->bin_data[i] = pad_value;
 80114ce:	7d7a      	ldrb	r2, [r7, #21]
 80114d0:	6a3b      	ldr	r3, [r7, #32]
 80114d2:	3206      	adds	r2, #6
 80114d4:	6839      	ldr	r1, [r7, #0]
 80114d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 80114da:	7dfb      	ldrb	r3, [r7, #23]
 80114dc:	3301      	adds	r3, #1
 80114de:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53L1_p_049 +
 80114e0:	7dfa      	ldrb	r2, [r7, #23]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80114e8:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 80114ee:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 80114f0:	429a      	cmp	r2, r3
 80114f2:	dbd4      	blt.n	801149e <VL53L1_f_023+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 80114f4:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3718      	adds	r7, #24
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd80      	pop	{r7, pc}

08011500 <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 8011500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011504:	b096      	sub	sp, #88	; 0x58
 8011506:	af08      	add	r7, sp, #32
 8011508:	4604      	mov	r4, r0
 801150a:	4608      	mov	r0, r1
 801150c:	4611      	mov	r1, r2
 801150e:	461a      	mov	r2, r3
 8011510:	4623      	mov	r3, r4
 8011512:	73fb      	strb	r3, [r7, #15]
 8011514:	4603      	mov	r3, r0
 8011516:	73bb      	strb	r3, [r7, #14]
 8011518:	460b      	mov	r3, r1
 801151a:	737b      	strb	r3, [r7, #13]
 801151c:	4613      	mov	r3, r2
 801151e:	733b      	strb	r3, [r7, #12]


	VL53L1_Error status      = VL53L1_ERROR_NONE;
 8011520:	2300      	movs	r3, #0
 8011522:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_Error func_status = VL53L1_ERROR_NONE;
 8011526:	2300      	movs	r3, #0
 8011528:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 801152c:	2300      	movs	r3, #0
 801152e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53L1_p_003    = 0;
 8011532:	2300      	movs	r3, #0
 8011534:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53L1_p_018    = 0;
 8011536:	2300      	movs	r3, #0
 8011538:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53L1_p_001    = 0;
 801153a:	2300      	movs	r3, #0
 801153c:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 801153e:	2300      	movs	r3, #0
 8011540:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 8011542:	2300      	movs	r3, #0
 8011544:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 8011546:	2300      	movs	r3, #0
 8011548:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 801154a:	2300      	movs	r3, #0
 801154c:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 801154e:	2300      	movs	r3, #0
 8011550:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_031 == 0) {
 8011552:	7b7b      	ldrb	r3, [r7, #13]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d106      	bne.n	8011566 <VL53L1_f_026+0x66>
		*psigma_est = 0xFFFF;
 8011558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801155a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801155e:	801a      	strh	r2, [r3, #0]
		return VL53L1_ERROR_DIVISION_BY_ZERO;
 8011560:	f06f 030e 	mvn.w	r3, #14
 8011564:	e06f      	b.n	8011646 <VL53L1_f_026+0x146>
	}
	i = bin % VL53L1_p_031;
 8011566:	7bfb      	ldrb	r3, [r7, #15]
 8011568:	7b7a      	ldrb	r2, [r7, #13]
 801156a:	fbb3 f1f2 	udiv	r1, r3, r2
 801156e:	fb01 f202 	mul.w	r2, r1, r2
 8011572:	1a9b      	subs	r3, r3, r2
 8011574:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53L1_f_013(
 8011578:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801157c:	7b39      	ldrb	r1, [r7, #12]
 801157e:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8011582:	f107 0320 	add.w	r3, r7, #32
 8011586:	9301      	str	r3, [sp, #4]
 8011588:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801158c:	9300      	str	r3, [sp, #0]
 801158e:	4613      	mov	r3, r2
 8011590:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011592:	f000 fddb 	bl	801214c <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 8011596:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801159a:	7b39      	ldrb	r1, [r7, #12]
 801159c:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 80115a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80115a4:	9301      	str	r3, [sp, #4]
 80115a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80115aa:	9300      	str	r3, [sp, #0]
 80115ac:	4613      	mov	r3, r2
 80115ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80115b0:	f000 fdcc 	bl	801214c <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 80115b4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d00e      	beq.n	80115da <VL53L1_f_026+0xda>
		VL53L1_f_013(
 80115bc:	f107 021c 	add.w	r2, r7, #28
 80115c0:	7b39      	ldrb	r1, [r7, #12]
 80115c2:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 80115c6:	f107 0314 	add.w	r3, r7, #20
 80115ca:	9301      	str	r3, [sp, #4]
 80115cc:	f107 0318 	add.w	r3, r7, #24
 80115d0:	9300      	str	r3, [sp, #0]
 80115d2:	4613      	mov	r3, r2
 80115d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80115d6:	f000 fdb9 	bl	801214c <VL53L1_f_013>




	func_status =
		VL53L1_f_014(
 80115da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115dc:	469c      	mov	ip, r3
 80115de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115e0:	469e      	mov	lr, r3
 80115e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e4:	4698      	mov	r8, r3
 80115e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e8:	4619      	mov	r1, r3
 80115ea:	6a3b      	ldr	r3, [r7, #32]
 80115ec:	461c      	mov	r4, r3
 80115ee:	69bb      	ldr	r3, [r7, #24]
 80115f0:	461d      	mov	r5, r3
 80115f2:	69fb      	ldr	r3, [r7, #28]
 80115f4:	461e      	mov	r6, r3
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53L1_p_004,
 80115fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53L1_f_014(
 8011600:	607b      	str	r3, [r7, #4]
 8011602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011604:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8011608:	7bb8      	ldrb	r0, [r7, #14]
 801160a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801160c:	9207      	str	r2, [sp, #28]
 801160e:	9306      	str	r3, [sp, #24]
 8011610:	687a      	ldr	r2, [r7, #4]
 8011612:	9205      	str	r2, [sp, #20]
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	9304      	str	r3, [sp, #16]
 8011618:	9603      	str	r6, [sp, #12]
 801161a:	9502      	str	r5, [sp, #8]
 801161c:	9401      	str	r4, [sp, #4]
 801161e:	9100      	str	r1, [sp, #0]
 8011620:	4643      	mov	r3, r8
 8011622:	4672      	mov	r2, lr
 8011624:	4661      	mov	r1, ip
 8011626:	f002 ff30 	bl	801448a <VL53L1_f_014>
 801162a:	4603      	mov	r3, r0
 801162c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 8011630:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8011634:	f113 0f0f 	cmn.w	r3, #15
 8011638:	d103      	bne.n	8011642 <VL53L1_f_026+0x142>
		*psigma_est = 0xFFFF;
 801163a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801163c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011640:	801a      	strh	r2, [r3, #0]


	return status;
 8011642:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8011646:	4618      	mov	r0, r3
 8011648:	3738      	adds	r7, #56	; 0x38
 801164a:	46bd      	mov	sp, r7
 801164c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011650 <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 8011650:	b490      	push	{r4, r7}
 8011652:	b084      	sub	sp, #16
 8011654:	af00      	add	r7, sp, #0
 8011656:	4604      	mov	r4, r0
 8011658:	4608      	mov	r0, r1
 801165a:	4611      	mov	r1, r2
 801165c:	461a      	mov	r2, r3
 801165e:	4623      	mov	r3, r4
 8011660:	71fb      	strb	r3, [r7, #7]
 8011662:	4603      	mov	r3, r0
 8011664:	71bb      	strb	r3, [r7, #6]
 8011666:	460b      	mov	r3, r1
 8011668:	717b      	strb	r3, [r7, #5]
 801166a:	4613      	mov	r3, r2
 801166c:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 801166e:	2300      	movs	r3, #0
 8011670:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 8011672:	2300      	movs	r3, #0
 8011674:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 8011676:	6a3b      	ldr	r3, [r7, #32]
 8011678:	79fa      	ldrb	r2, [r7, #7]
 801167a:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 801167c:	6a3b      	ldr	r3, [r7, #32]
 801167e:	2200      	movs	r2, #0
 8011680:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 8011682:	69fb      	ldr	r3, [r7, #28]
 8011684:	781a      	ldrb	r2, [r3, #0]
 8011686:	6a3b      	ldr	r3, [r7, #32]
 8011688:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 801168a:	69fb      	ldr	r3, [r7, #28]
 801168c:	785a      	ldrb	r2, [r3, #1]
 801168e:	6a3b      	ldr	r3, [r7, #32]
 8011690:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 8011692:	69fb      	ldr	r3, [r7, #28]
 8011694:	789a      	ldrb	r2, [r3, #2]
 8011696:	6a3b      	ldr	r3, [r7, #32]
 8011698:	729a      	strb	r2, [r3, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 801169a:	69fb      	ldr	r3, [r7, #28]
 801169c:	78da      	ldrb	r2, [r3, #3]
 801169e:	6a3b      	ldr	r3, [r7, #32]
 80116a0:	72da      	strb	r2, [r3, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 80116a2:	69fb      	ldr	r3, [r7, #28]
 80116a4:	791a      	ldrb	r2, [r3, #4]
 80116a6:	6a3b      	ldr	r3, [r7, #32]
 80116a8:	731a      	strb	r2, [r3, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 80116aa:	69fb      	ldr	r3, [r7, #28]
 80116ac:	795a      	ldrb	r2, [r3, #5]
 80116ae:	6a3b      	ldr	r3, [r7, #32]
 80116b0:	735a      	strb	r2, [r3, #13]



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 80116b2:	69fb      	ldr	r3, [r7, #28]
 80116b4:	791a      	ldrb	r2, [r3, #4]
 80116b6:	69fb      	ldr	r3, [r7, #28]
 80116b8:	781b      	ldrb	r3, [r3, #0]
 80116ba:	1ad3      	subs	r3, r2, r3
 80116bc:	b2db      	uxtb	r3, r3
 80116be:	3301      	adds	r3, #1
 80116c0:	b2da      	uxtb	r2, r3
	pdata->VL53L1_p_030  =
 80116c2:	6a3b      	ldr	r3, [r7, #32]
 80116c4:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 80116c6:	69bb      	ldr	r3, [r7, #24]
 80116c8:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 80116cc:	6a3b      	ldr	r3, [r7, #32]
 80116ce:	829a      	strh	r2, [r3, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 80116d0:	69fb      	ldr	r3, [r7, #28]
 80116d2:	8c1a      	ldrh	r2, [r3, #32]
 80116d4:	6a3b      	ldr	r3, [r7, #32]
 80116d6:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 80116d8:	69fb      	ldr	r3, [r7, #28]
 80116da:	695b      	ldr	r3, [r3, #20]
 80116dc:	b29a      	uxth	r2, r3
 80116de:	6a3b      	ldr	r3, [r7, #32]
 80116e0:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 80116e2:	69fb      	ldr	r3, [r7, #28]
 80116e4:	699b      	ldr	r3, [r3, #24]
 80116e6:	b29a      	uxth	r2, r3
 80116e8:	6a3b      	ldr	r3, [r7, #32]
 80116ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 80116ee:	69fb      	ldr	r3, [r7, #28]
 80116f0:	69db      	ldr	r3, [r3, #28]
 80116f2:	b29a      	uxth	r2, r3
 80116f4:	6a3b      	ldr	r3, [r7, #32]
 80116f6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 80116fa:	69fb      	ldr	r3, [r7, #28]
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	461a      	mov	r2, r3
 8011700:	6a3b      	ldr	r3, [r7, #32]
 8011702:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	691a      	ldr	r2, [r3, #16]
 8011708:	6a3b      	ldr	r3, [r7, #32]
 801170a:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	689b      	ldr	r3, [r3, #8]
 8011710:	461a      	mov	r2, r3
 8011712:	6a3b      	ldr	r3, [r7, #32]
 8011714:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 8011716:	69bb      	ldr	r3, [r7, #24]
 8011718:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801171c:	6a3b      	ldr	r3, [r7, #32]
 801171e:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8011720:	6a3b      	ldr	r3, [r7, #32]
 8011722:	2213      	movs	r2, #19
 8011724:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 8011728:	887b      	ldrh	r3, [r7, #2]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d00a      	beq.n	8011744 <VL53L1_f_029+0xf4>
		(uint32_t)ppulse->VL53L1_p_005 > ((uint32_t)sigma_thres << 5))
 801172e:	69fb      	ldr	r3, [r7, #28]
 8011730:	8c1b      	ldrh	r3, [r3, #32]
 8011732:	461a      	mov	r2, r3
 8011734:	887b      	ldrh	r3, [r7, #2]
 8011736:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 8011738:	429a      	cmp	r2, r3
 801173a:	d903      	bls.n	8011744 <VL53L1_f_029+0xf4>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 801173c:	6a3b      	ldr	r3, [r7, #32]
 801173e:	2206      	movs	r2, #6
 8011740:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 8011744:	79bb      	ldrb	r3, [r7, #6]
 8011746:	b29b      	uxth	r3, r3
 8011748:	021b      	lsls	r3, r3, #8
 801174a:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 801174c:	6a3b      	ldr	r3, [r7, #32]
 801174e:	8a9b      	ldrh	r3, [r3, #20]
 8011750:	89fa      	ldrh	r2, [r7, #14]
 8011752:	429a      	cmp	r2, r3
 8011754:	d205      	bcs.n	8011762 <VL53L1_f_029+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 8011756:	6a3b      	ldr	r3, [r7, #32]
 8011758:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 801175a:	89fb      	ldrh	r3, [r7, #14]
 801175c:	1ad3      	subs	r3, r2, r3
 801175e:	81fb      	strh	r3, [r7, #14]
 8011760:	e001      	b.n	8011766 <VL53L1_f_029+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 8011762:	2300      	movs	r3, #0
 8011764:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 8011766:	797b      	ldrb	r3, [r7, #5]
 8011768:	b29b      	uxth	r3, r3
 801176a:	021b      	lsls	r3, r3, #8
 801176c:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 801176e:	69bb      	ldr	r3, [r7, #24]
 8011770:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8011774:	89bb      	ldrh	r3, [r7, #12]
 8011776:	4413      	add	r3, r2
 8011778:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 801177a:	6a3b      	ldr	r3, [r7, #32]
 801177c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8011780:	89fa      	ldrh	r2, [r7, #14]
 8011782:	429a      	cmp	r2, r3
 8011784:	d805      	bhi.n	8011792 <VL53L1_f_029+0x142>
		pdata->VL53L1_p_014 > upper_phase_limit)
 8011786:	6a3b      	ldr	r3, [r7, #32]
 8011788:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 801178c:	89ba      	ldrh	r2, [r7, #12]
 801178e:	429a      	cmp	r2, r3
 8011790:	d203      	bcs.n	801179a <VL53L1_f_029+0x14a>
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 8011792:	6a3b      	ldr	r3, [r7, #32]
 8011794:	2205      	movs	r2, #5
 8011796:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 801179a:	bf00      	nop
 801179c:	3710      	adds	r7, #16
 801179e:	46bd      	mov	sp, r7
 80117a0:	bc90      	pop	{r4, r7}
 80117a2:	4770      	bx	lr

080117a4 <VL53L1_f_033>:
	VL53L1_hist_gen3_algo_private_data_t   *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53L1_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53L1_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 80117a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117a6:	b08f      	sub	sp, #60	; 0x3c
 80117a8:	af06      	add	r7, sp, #24
 80117aa:	60f8      	str	r0, [r7, #12]
 80117ac:	60b9      	str	r1, [r7, #8]
 80117ae:	607a      	str	r2, [r7, #4]
 80117b0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80117b2:	2300      	movs	r3, #0
 80117b4:	77fb      	strb	r3, [r7, #31]

	VL53L1_hist_pulse_data_t     *ppulse_data;
	VL53L1_range_data_t          *prange_data;

	uint8_t                       p = 0;
 80117b6:	2300      	movs	r3, #0
 80117b8:	77bb      	strb	r3, [r7, #30]
	VL53L1_histogram_bin_data_t *pB = &(palgo3->VL53L1_p_010);
 80117ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117bc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80117c0:	61bb      	str	r3, [r7, #24]





	VL53L1_f_016(palgo3);
 80117c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80117c4:	f7ff f856 	bl	8010874 <VL53L1_f_016>



	memcpy(
		&(palgo3->VL53L1_p_010),
 80117c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117ca:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 80117ce:	22ac      	movs	r2, #172	; 0xac
 80117d0:	6839      	ldr	r1, [r7, #0]
 80117d2:	4618      	mov	r0, r3
 80117d4:	f009 f92a 	bl	801aa2c <memcpy>
		pbins_input,
		sizeof(VL53L1_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	781a      	ldrb	r2, [r3, #0]
 80117dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117de:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	785a      	ldrb	r2, [r3, #1]
 80117e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117e6:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	789a      	ldrb	r2, [r3, #2]
 80117ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117ee:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 80117f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117f8:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 80117fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117fc:	2200      	movs	r2, #0
 80117fe:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 8011800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011802:	2204      	movs	r2, #4
 8011804:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 8011806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011808:	2200      	movs	r2, #0
 801180a:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 801180c:	2300      	movs	r3, #0
 801180e:	77bb      	strb	r3, [r7, #30]
 8011810:	e008      	b.n	8011824 <VL53L1_f_033+0x80>
		presults->VL53L1_p_007[p] = 0;
 8011812:	7fbb      	ldrb	r3, [r7, #30]
 8011814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011816:	005b      	lsls	r3, r3, #1
 8011818:	4413      	add	r3, r2
 801181a:	2200      	movs	r2, #0
 801181c:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 801181e:	7fbb      	ldrb	r3, [r7, #30]
 8011820:	3301      	adds	r3, #1
 8011822:	77bb      	strb	r3, [r7, #30]
 8011824:	7fbb      	ldrb	r3, [r7, #30]
 8011826:	2b04      	cmp	r3, #4
 8011828:	d9f3      	bls.n	8011812 <VL53L1_f_033+0x6e>



	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 801182a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801182c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011830:	4618      	mov	r0, r3
 8011832:	f7fd ff58 	bl	800f6e6 <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	795b      	ldrb	r3, [r3, #5]
	VL53L1_hist_estimate_ambient_from_thresholded_bins(
 801183a:	461a      	mov	r2, r3
 801183c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801183e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011842:	4619      	mov	r1, r3
 8011844:	4610      	mov	r0, r2
 8011846:	f7fd ff8e 	bl	800f766 <VL53L1_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53L1_p_010));

	VL53L1_hist_estimate_ambient_from_ambient_bins(
 801184a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801184c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011850:	4618      	mov	r0, r3
 8011852:	f7fe fb66 	bl	800ff22 <VL53L1_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53L1_p_010));


	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 8011856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011858:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801185c:	4618      	mov	r0, r3
 801185e:	f7fd fffc 	bl	800f85a <VL53L1_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011868:	2b00      	cmp	r3, #0
 801186a:	d009      	beq.n	8011880 <VL53L1_f_033+0xdc>
		VL53L1_f_004(
 801186c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801186e:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8011872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011874:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8011878:	461a      	mov	r2, r3
 801187a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801187c:	f000 fdae 	bl	80123dc <VL53L1_f_004>
				&(palgo3->VL53L1_p_010),
				&(palgo3->VL53L1_p_038));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8011888:	2300      	movs	r3, #0
 801188a:	77bb      	strb	r3, [r7, #30]
 801188c:	e01e      	b.n	80118cc <VL53L1_f_033+0x128>
		if (status == VL53L1_ERROR_NONE) {
 801188e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d117      	bne.n	80118c6 <VL53L1_f_033+0x122>
			status =
			VL53L1_f_001(
 8011896:	7fbb      	ldrb	r3, [r7, #30]
 8011898:	68ba      	ldr	r2, [r7, #8]
 801189a:	3304      	adds	r3, #4
 801189c:	005b      	lsls	r3, r3, #1
 801189e:	4413      	add	r3, r2
 80118a0:	8898      	ldrh	r0, [r3, #4]
 80118a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118a4:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53L1_p_010),
				pdmax_algo,
				&(presults->VL53L1_p_007[p]));
 80118a8:	7fbb      	ldrb	r3, [r7, #30]
			VL53L1_f_001(
 80118aa:	005b      	lsls	r3, r3, #1
 80118ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80118ae:	4413      	add	r3, r2
 80118b0:	3304      	adds	r3, #4
 80118b2:	9301      	str	r3, [sp, #4]
 80118b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118b6:	9300      	str	r3, [sp, #0]
 80118b8:	460b      	mov	r3, r1
 80118ba:	68ba      	ldr	r2, [r7, #8]
 80118bc:	68f9      	ldr	r1, [r7, #12]
 80118be:	f7fe fb7b 	bl	800ffb8 <VL53L1_f_001>
 80118c2:	4603      	mov	r3, r0
 80118c4:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 80118c6:	7fbb      	ldrb	r3, [r7, #30]
 80118c8:	3301      	adds	r3, #1
 80118ca:	77bb      	strb	r3, [r7, #30]
 80118cc:	7fbb      	ldrb	r3, [r7, #30]
 80118ce:	2b04      	cmp	r3, #4
 80118d0:	d9dd      	bls.n	801188e <VL53L1_f_033+0xea>





	if (status == VL53L1_ERROR_NONE)
 80118d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d11a      	bne.n	8011910 <VL53L1_f_033+0x16c>
		status =
			VL53L1_f_018(
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 80118de:	68bb      	ldr	r3, [r7, #8]
 80118e0:	785b      	ldrb	r3, [r3, #1]
			VL53L1_f_018(
 80118e2:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	68dc      	ldr	r4, [r3, #12]
			VL53L1_f_018(
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 80118ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118f0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80118f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80118f6:	f502 7252 	add.w	r2, r2, #840	; 0x348
 80118fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80118fc:	9102      	str	r1, [sp, #8]
 80118fe:	9201      	str	r2, [sp, #4]
 8011900:	9300      	str	r3, [sp, #0]
 8011902:	462b      	mov	r3, r5
 8011904:	4622      	mov	r2, r4
 8011906:	4631      	mov	r1, r6
 8011908:	f7ff f82d 	bl	8010966 <VL53L1_f_018>
 801190c:	4603      	mov	r3, r0
 801190e:	77fb      	strb	r3, [r7, #31]





	if (status == VL53L1_ERROR_NONE)
 8011910:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d104      	bne.n	8011922 <VL53L1_f_033+0x17e>
		status =
			VL53L1_f_019(palgo3);
 8011918:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801191a:	f7ff f954 	bl	8010bc6 <VL53L1_f_019>
 801191e:	4603      	mov	r3, r0
 8011920:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8011922:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d104      	bne.n	8011934 <VL53L1_f_033+0x190>
		status =
			VL53L1_f_020(palgo3);
 801192a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801192c:	f7ff f999 	bl	8010c62 <VL53L1_f_020>
 8011930:	4603      	mov	r3, r0
 8011932:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8011934:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d104      	bne.n	8011946 <VL53L1_f_033+0x1a2>
		status =
			VL53L1_f_021(palgo3);
 801193c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801193e:	f7ff fa0e 	bl	8010d5e <VL53L1_f_021>
 8011942:	4603      	mov	r3, r0
 8011944:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8011946:	2300      	movs	r3, #0
 8011948:	77bb      	strb	r3, [r7, #30]
 801194a:	e0a6      	b.n	8011a9a <VL53L1_f_033+0x2f6>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 801194c:	7fba      	ldrb	r2, [r7, #30]
 801194e:	4613      	mov	r3, r2
 8011950:	00db      	lsls	r3, r3, #3
 8011952:	4413      	add	r3, r2
 8011954:	009b      	lsls	r3, r3, #2
 8011956:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801195a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801195c:	4413      	add	r3, r2
 801195e:	3304      	adds	r3, #4
 8011960:	617b      	str	r3, [r7, #20]



		if (status == VL53L1_ERROR_NONE)
 8011962:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d109      	bne.n	801197e <VL53L1_f_033+0x1da>
			status =
				VL53L1_f_022(
 801196a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801196c:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8011970:	7fbb      	ldrb	r3, [r7, #30]
 8011972:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011974:	4618      	mov	r0, r3
 8011976:	f7ff fb48 	bl	801100a <VL53L1_f_022>
 801197a:	4603      	mov	r3, r0
 801197c:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_010),
					palgo3);



		if (status == VL53L1_ERROR_NONE)
 801197e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d110      	bne.n	80119a8 <VL53L1_f_033+0x204>
			status =
				VL53L1_f_023(
 8011986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011988:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 801198c:	69bb      	ldr	r3, [r7, #24]
 801198e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8011992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011994:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8011998:	7fb8      	ldrb	r0, [r7, #30]
 801199a:	9300      	str	r3, [sp, #0]
 801199c:	4613      	mov	r3, r2
 801199e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80119a0:	f7ff fd5a 	bl	8011458 <VL53L1_f_023>
 80119a4:	4603      	mov	r3, r0
 80119a6:	77fb      	strb	r3, [r7, #31]
					pB->VL53L1_p_004,
					&(palgo3->VL53L1_p_052));



		if (status == VL53L1_ERROR_NONE) {
 80119a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d10d      	bne.n	80119cc <VL53L1_f_033+0x228>
			status =
				VL53L1_f_023(
 80119b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119b2:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 80119b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119b8:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80119bc:	7fb8      	ldrb	r0, [r7, #30]
 80119be:	9300      	str	r3, [sp, #0]
 80119c0:	2300      	movs	r3, #0
 80119c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80119c4:	f7ff fd48 	bl	8011458 <VL53L1_f_023>
 80119c8:	4603      	mov	r3, r0
 80119ca:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_053));
		}



		if (status == VL53L1_ERROR_NONE) {
 80119cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d10d      	bne.n	80119f0 <VL53L1_f_033+0x24c>
			status =
				VL53L1_f_023(
 80119d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119d6:	f503 7152 	add.w	r1, r3, #840	; 0x348
 80119da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119dc:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 80119e0:	7fb8      	ldrb	r0, [r7, #30]
 80119e2:	9300      	str	r3, [sp, #0]
 80119e4:	2300      	movs	r3, #0
 80119e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80119e8:	f7ff fd36 	bl	8011458 <VL53L1_f_023>
 80119ec:	4603      	mov	r3, r0
 80119ee:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_054));
		}



		if (status == VL53L1_ERROR_NONE)
 80119f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d109      	bne.n	8011a0c <VL53L1_f_033+0x268>
			status =
				VL53L1_f_034(
 80119f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119fa:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 80119fe:	7fb8      	ldrb	r0, [r7, #30]
 8011a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011a04:	f000 f8dd 	bl	8011bc2 <VL53L1_f_034>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53L1_ERROR_NONE)
 8011a0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d108      	bne.n	8011a26 <VL53L1_f_033+0x282>
			status =
				VL53L1_f_035(
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	8a19      	ldrh	r1, [r3, #16]
 8011a18:	7fb8      	ldrb	r0, [r7, #30]
 8011a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a1e:	f000 f95c 	bl	8011cda <VL53L1_f_035>
 8011a22:	4603      	mov	r3, r0
 8011a24:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53L1_ERROR_NONE)
 8011a26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d124      	bne.n	8011a78 <VL53L1_f_033+0x2d4>
			status =
			VL53L1_f_026(
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	789d      	ldrb	r5, [r3, #2]
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	7e1e      	ldrb	r6, [r3, #24]
 8011a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a38:	f893 c003 	ldrb.w	ip, [r3, #3]
 8011a3c:	697b      	ldr	r3, [r7, #20]
 8011a3e:	f893 e006 	ldrb.w	lr, [r3, #6]
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011a4a:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 8011a4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011a50:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 8011a54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011a56:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 8011a5a:	697c      	ldr	r4, [r7, #20]
 8011a5c:	3420      	adds	r4, #32
 8011a5e:	9404      	str	r4, [sp, #16]
 8011a60:	9003      	str	r0, [sp, #12]
 8011a62:	9102      	str	r1, [sp, #8]
 8011a64:	9201      	str	r2, [sp, #4]
 8011a66:	9300      	str	r3, [sp, #0]
 8011a68:	4673      	mov	r3, lr
 8011a6a:	4662      	mov	r2, ip
 8011a6c:	4631      	mov	r1, r6
 8011a6e:	4628      	mov	r0, r5
 8011a70:	f7ff fd46 	bl	8011500 <VL53L1_f_026>
 8011a74:	4603      	mov	r3, r0
 8011a76:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53L1_p_054),
			&(ppulse_data->VL53L1_p_005));



		if (status == VL53L1_ERROR_NONE)
 8011a78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d109      	bne.n	8011a94 <VL53L1_f_033+0x2f0>
			status =
				VL53L1_f_027(
 8011a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a82:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 8011a86:	7fb8      	ldrb	r0, [r7, #30]
 8011a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a8a:	2101      	movs	r1, #1
 8011a8c:	f7ff fb10 	bl	80110b0 <VL53L1_f_027>
 8011a90:	4603      	mov	r3, r0
 8011a92:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8011a94:	7fbb      	ldrb	r3, [r7, #30]
 8011a96:	3301      	adds	r3, #1
 8011a98:	77bb      	strb	r3, [r7, #30]
 8011a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a9c:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8011aa0:	7fba      	ldrb	r2, [r7, #30]
 8011aa2:	429a      	cmp	r2, r3
 8011aa4:	f4ff af52 	bcc.w	801194c <VL53L1_f_033+0x1a8>

	}



	if (status == VL53L1_ERROR_NONE)
 8011aa8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d107      	bne.n	8011ac0 <VL53L1_f_033+0x31c>
		status =
			VL53L1_f_028(
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	785b      	ldrb	r3, [r3, #1]
 8011ab4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7ff fa23 	bl	8010f02 <VL53L1_f_028>
 8011abc:	4603      	mov	r3, r0
 8011abe:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	77bb      	strb	r3, [r7, #30]
 8011ac4:	e071      	b.n	8011baa <VL53L1_f_033+0x406>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8011ac6:	7fba      	ldrb	r2, [r7, #30]
 8011ac8:	4613      	mov	r3, r2
 8011aca:	00db      	lsls	r3, r3, #3
 8011acc:	4413      	add	r3, r2
 8011ace:	009b      	lsls	r3, r3, #2
 8011ad0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011ad4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011ad6:	4413      	add	r3, r2
 8011ad8:	3304      	adds	r3, #4
 8011ada:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 8011adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ade:	7c9a      	ldrb	r2, [r3, #18]
 8011ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ae2:	7c5b      	ldrb	r3, [r3, #17]
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d25c      	bcs.n	8011ba2 <VL53L1_f_033+0x3fe>
			continue;




		if (ppulse_data->VL53L1_p_013 >
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53L1_p_013 >
 8011af0:	429a      	cmp	r2, r3
 8011af2:	dd57      	ble.n	8011ba4 <VL53L1_f_033+0x400>
			ppulse_data->VL53L1_p_025 < 0xFF) {
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 8011af8:	2bff      	cmp	r3, #255	; 0xff
 8011afa:	d053      	beq.n	8011ba4 <VL53L1_f_033+0x400>

			prange_data =
			&(presults->VL53L1_p_002[presults->active_results]);
 8011afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011afe:	7c9b      	ldrb	r3, [r3, #18]
 8011b00:	461a      	mov	r2, r3
			prange_data =
 8011b02:	234c      	movs	r3, #76	; 0x4c
 8011b04:	fb02 f303 	mul.w	r3, r2, r3
 8011b08:	3310      	adds	r3, #16
 8011b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b0c:	4413      	add	r3, r2
 8011b0e:	3304      	adds	r3, #4
 8011b10:	613b      	str	r3, [r7, #16]

			if (status == VL53L1_ERROR_NONE)
 8011b12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d115      	bne.n	8011b46 <VL53L1_f_033+0x3a2>
				VL53L1_f_029(
 8011b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b1c:	7c98      	ldrb	r0, [r3, #18]
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	f893 1020 	ldrb.w	r1, [r3, #32]
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	8b5d      	ldrh	r5, [r3, #26]
 8011b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b30:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011b34:	693a      	ldr	r2, [r7, #16]
 8011b36:	9202      	str	r2, [sp, #8]
 8011b38:	697a      	ldr	r2, [r7, #20]
 8011b3a:	9201      	str	r2, [sp, #4]
 8011b3c:	9300      	str	r3, [sp, #0]
 8011b3e:	462b      	mov	r3, r5
 8011b40:	4622      	mov	r2, r4
 8011b42:	f7ff fd85 	bl	8011650 <VL53L1_f_029>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53L1_p_010),
						ppulse_data,
						prange_data);

			if (status == VL53L1_ERROR_NONE)
 8011b46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d115      	bne.n	8011b7a <VL53L1_f_033+0x3d6>
				status =
				VL53L1_f_011(
 8011b4e:	69bb      	ldr	r3, [r7, #24]
 8011b50:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 8011b54:	69bb      	ldr	r3, [r7, #24]
 8011b56:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8011b60:	69bb      	ldr	r3, [r7, #24]
 8011b62:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 8011b66:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011b6a:	9301      	str	r3, [sp, #4]
 8011b6c:	693b      	ldr	r3, [r7, #16]
 8011b6e:	9300      	str	r3, [sp, #0]
 8011b70:	4623      	mov	r3, r4
 8011b72:	f000 fb44 	bl	80121fe <VL53L1_f_011>
 8011b76:	4603      	mov	r3, r0
 8011b78:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53L1_ERROR_NONE)
 8011b7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d108      	bne.n	8011b94 <VL53L1_f_033+0x3f0>
				VL53L1_f_012(
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	8bd8      	ldrh	r0, [r3, #30]
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8011b8c:	693a      	ldr	r2, [r7, #16]
 8011b8e:	4619      	mov	r1, r3
 8011b90:	f000 fbda 	bl	8012348 <VL53L1_f_012>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 8011b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b96:	7c9b      	ldrb	r3, [r3, #18]
 8011b98:	3301      	adds	r3, #1
 8011b9a:	b2da      	uxtb	r2, r3
 8011b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b9e:	749a      	strb	r2, [r3, #18]
 8011ba0:	e000      	b.n	8011ba4 <VL53L1_f_033+0x400>
			continue;
 8011ba2:	bf00      	nop
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8011ba4:	7fbb      	ldrb	r3, [r7, #30]
 8011ba6:	3301      	adds	r3, #1
 8011ba8:	77bb      	strb	r3, [r7, #30]
 8011baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bac:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8011bb0:	7fba      	ldrb	r2, [r7, #30]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d387      	bcc.n	8011ac6 <VL53L1_f_033+0x322>



	LOG_FUNCTION_END(status);

	return status;
 8011bb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3724      	adds	r7, #36	; 0x24
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011bc2 <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 8011bc2:	b580      	push	{r7, lr}
 8011bc4:	b08c      	sub	sp, #48	; 0x30
 8011bc6:	af02      	add	r7, sp, #8
 8011bc8:	60b9      	str	r1, [r7, #8]
 8011bca:	607a      	str	r2, [r7, #4]
 8011bcc:	603b      	str	r3, [r7, #0]
 8011bce:	4603      	mov	r3, r0
 8011bd0:	73fb      	strb	r3, [r7, #15]




	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8011bd8:	7bfa      	ldrb	r2, [r7, #15]
 8011bda:	4613      	mov	r3, r2
 8011bdc:	00db      	lsls	r3, r3, #3
 8011bde:	4413      	add	r3, r2
 8011be0:	009b      	lsls	r3, r3, #2
 8011be2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011be6:	687a      	ldr	r2, [r7, #4]
 8011be8:	4413      	add	r3, r2
 8011bea:	3304      	adds	r3, #4
 8011bec:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 8011c00:	2300      	movs	r3, #0
 8011c02:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	785a      	ldrb	r2, [r3, #1]
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	781a      	ldrb	r2, [r3, #0]
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	789a      	ldrb	r2, [r3, #2]
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8011c1c:	6a3b      	ldr	r3, [r7, #32]
 8011c1e:	781b      	ldrb	r3, [r3, #0]
 8011c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c24:	e04d      	b.n	8011cc2 <VL53L1_f_034+0x100>

		i =  lb  % palgo3->VL53L1_p_031;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	78da      	ldrb	r2, [r3, #3]
 8011c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c32:	fb01 f202 	mul.w	r2, r1, r2
 8011c36:	1a9b      	subs	r3, r3, r2
 8011c38:	77fb      	strb	r3, [r7, #31]


		VL53L1_f_013(
 8011c3a:	6a3b      	ldr	r3, [r7, #32]
 8011c3c:	7999      	ldrb	r1, [r3, #6]
 8011c3e:	f107 0218 	add.w	r2, r7, #24
 8011c42:	7ff8      	ldrb	r0, [r7, #31]
 8011c44:	f107 0310 	add.w	r3, r7, #16
 8011c48:	9301      	str	r3, [sp, #4]
 8011c4a:	f107 0314 	add.w	r3, r7, #20
 8011c4e:	9300      	str	r3, [sp, #0]
 8011c50:	4613      	mov	r3, r2
 8011c52:	68ba      	ldr	r2, [r7, #8]
 8011c54:	f000 fa7a 	bl	801214c <VL53L1_f_013>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53L1_p_003[i] = suma;
 8011c58:	7ffb      	ldrb	r3, [r7, #31]
 8011c5a:	69ba      	ldr	r2, [r7, #24]
 8011c5c:	6839      	ldr	r1, [r7, #0]
 8011c5e:	009b      	lsls	r3, r3, #2
 8011c60:	440b      	add	r3, r1
 8011c62:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_018[i] = sumb;
 8011c64:	7ffb      	ldrb	r3, [r7, #31]
 8011c66:	697a      	ldr	r2, [r7, #20]
 8011c68:	6839      	ldr	r1, [r7, #0]
 8011c6a:	3318      	adds	r3, #24
 8011c6c:	009b      	lsls	r3, r3, #2
 8011c6e:	440b      	add	r3, r1
 8011c70:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_001[i] = sumc;
 8011c72:	7ffb      	ldrb	r3, [r7, #31]
 8011c74:	693a      	ldr	r2, [r7, #16]
 8011c76:	6839      	ldr	r1, [r7, #0]
 8011c78:	3330      	adds	r3, #48	; 0x30
 8011c7a:	009b      	lsls	r3, r3, #2
 8011c7c:	440b      	add	r3, r1
 8011c7e:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_039[i] =
			(suma + sumb) -
 8011c80:	69ba      	ldr	r2, [r7, #24]
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53L1_p_004);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	689a      	ldr	r2, [r3, #8]
 8011c8a:	693b      	ldr	r3, [r7, #16]
 8011c8c:	441a      	add	r2, r3
		pfiltered->VL53L1_p_039[i] =
 8011c8e:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 8011c90:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_039[i] =
 8011c92:	6839      	ldr	r1, [r7, #0]
 8011c94:	3348      	adds	r3, #72	; 0x48
 8011c96:	009b      	lsls	r3, r3, #2
 8011c98:	440b      	add	r3, r1
 8011c9a:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_040[i] =
			(sumb + sumc) -
 8011c9c:	697a      	ldr	r2, [r7, #20]
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53L1_p_004);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	689a      	ldr	r2, [r3, #8]
 8011ca6:	69bb      	ldr	r3, [r7, #24]
 8011ca8:	441a      	add	r2, r3
		pfiltered->VL53L1_p_040[i] =
 8011caa:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 8011cac:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_040[i] =
 8011cae:	6839      	ldr	r1, [r7, #0]
 8011cb0:	3360      	adds	r3, #96	; 0x60
 8011cb2:	009b      	lsls	r3, r3, #2
 8011cb4:	440b      	add	r3, r1
 8011cb6:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8011cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cbc:	3301      	adds	r3, #1
 8011cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011cc2:	6a3b      	ldr	r3, [r7, #32]
 8011cc4:	791b      	ldrb	r3, [r3, #4]
 8011cc6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d9ab      	bls.n	8011c26 <VL53L1_f_034+0x64>
	}

	return status;
 8011cce:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3728      	adds	r7, #40	; 0x28
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}

08011cda <VL53L1_f_035>:
VL53L1_Error VL53L1_f_035(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3)
{
 8011cda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cdc:	b08f      	sub	sp, #60	; 0x3c
 8011cde:	af06      	add	r7, sp, #24
 8011ce0:	60ba      	str	r2, [r7, #8]
 8011ce2:	607b      	str	r3, [r7, #4]
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	73fb      	strb	r3, [r7, #15]
 8011ce8:	460b      	mov	r3, r1
 8011cea:	81bb      	strh	r3, [r7, #12]



	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8011cec:	2300      	movs	r3, #0
 8011cee:	77bb      	strb	r3, [r7, #30]
	VL53L1_Error  func_status  = VL53L1_ERROR_NONE;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	777b      	strb	r3, [r7, #29]

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8011cf4:	7bfa      	ldrb	r2, [r7, #15]
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	00db      	lsls	r3, r3, #3
 8011cfa:	4413      	add	r3, r2
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011d02:	687a      	ldr	r2, [r7, #4]
 8011d04:	4413      	add	r3, r2
 8011d06:	3304      	adds	r3, #4
 8011d08:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 8011d12:	2300      	movs	r3, #0
 8011d14:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8011d16:	69bb      	ldr	r3, [r7, #24]
 8011d18:	781b      	ldrb	r3, [r3, #0]
 8011d1a:	77fb      	strb	r3, [r7, #31]
 8011d1c:	e0b9      	b.n	8011e92 <VL53L1_f_035+0x1b8>

		i =  lb    % palgo3->VL53L1_p_031;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	78da      	ldrb	r2, [r3, #3]
 8011d22:	7ffb      	ldrb	r3, [r7, #31]
 8011d24:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d28:	fb01 f202 	mul.w	r2, r1, r2
 8011d2c:	1a9b      	subs	r3, r3, r2
 8011d2e:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53L1_p_031;
 8011d30:	7ffb      	ldrb	r3, [r7, #31]
 8011d32:	3301      	adds	r3, #1
 8011d34:	687a      	ldr	r2, [r7, #4]
 8011d36:	78d2      	ldrb	r2, [r2, #3]
 8011d38:	fb93 f1f2 	sdiv	r1, r3, r2
 8011d3c:	fb01 f202 	mul.w	r2, r1, r2
 8011d40:	1a9b      	subs	r3, r3, r2
 8011d42:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53L1_p_024 &&
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	789b      	ldrb	r3, [r3, #2]
 8011d48:	7dfa      	ldrb	r2, [r7, #23]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	f080 809e 	bcs.w	8011e8c <VL53L1_f_035+0x1b2>
			j < palgo3->VL53L1_p_024) {
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53L1_p_024 &&
 8011d54:	7dba      	ldrb	r2, [r7, #22]
 8011d56:	429a      	cmp	r2, r3
 8011d58:	f080 8098 	bcs.w	8011e8c <VL53L1_f_035+0x1b2>

			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8011d5c:	7dfb      	ldrb	r3, [r7, #23]
 8011d5e:	68ba      	ldr	r2, [r7, #8]
 8011d60:	3348      	adds	r3, #72	; 0x48
 8011d62:	009b      	lsls	r3, r3, #2
 8011d64:	4413      	add	r3, r2
 8011d66:	685b      	ldr	r3, [r3, #4]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d10e      	bne.n	8011d8a <VL53L1_f_035+0xb0>
				pfiltered->VL53L1_p_040[i] == 0)
 8011d6c:	7dfb      	ldrb	r3, [r7, #23]
 8011d6e:	68ba      	ldr	r2, [r7, #8]
 8011d70:	3360      	adds	r3, #96	; 0x60
 8011d72:	009b      	lsls	r3, r3, #2
 8011d74:	4413      	add	r3, r2
 8011d76:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d106      	bne.n	8011d8a <VL53L1_f_035+0xb0>

				pfiltered->VL53L1_p_043[i] = 0;
 8011d7c:	7dfb      	ldrb	r3, [r7, #23]
 8011d7e:	68ba      	ldr	r2, [r7, #8]
 8011d80:	4413      	add	r3, r2
 8011d82:	2200      	movs	r2, #0
 8011d84:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8011d88:	e043      	b.n	8011e12 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8011d8a:	7dfb      	ldrb	r3, [r7, #23]
 8011d8c:	68ba      	ldr	r2, [r7, #8]
 8011d8e:	3348      	adds	r3, #72	; 0x48
 8011d90:	009b      	lsls	r3, r3, #2
 8011d92:	4413      	add	r3, r2
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	db0e      	blt.n	8011db8 <VL53L1_f_035+0xde>
					 pfiltered->VL53L1_p_040[i] >= 0)
 8011d9a:	7dfb      	ldrb	r3, [r7, #23]
 8011d9c:	68ba      	ldr	r2, [r7, #8]
 8011d9e:	3360      	adds	r3, #96	; 0x60
 8011da0:	009b      	lsls	r3, r3, #2
 8011da2:	4413      	add	r3, r2
 8011da4:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	db06      	blt.n	8011db8 <VL53L1_f_035+0xde>
				pfiltered->VL53L1_p_043[i] = 1;
 8011daa:	7dfb      	ldrb	r3, [r7, #23]
 8011dac:	68ba      	ldr	r2, [r7, #8]
 8011dae:	4413      	add	r3, r2
 8011db0:	2201      	movs	r2, #1
 8011db2:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8011db6:	e02c      	b.n	8011e12 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8011db8:	7dfb      	ldrb	r3, [r7, #23]
 8011dba:	68ba      	ldr	r2, [r7, #8]
 8011dbc:	3348      	adds	r3, #72	; 0x48
 8011dbe:	009b      	lsls	r3, r3, #2
 8011dc0:	4413      	add	r3, r2
 8011dc2:	685b      	ldr	r3, [r3, #4]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	da1e      	bge.n	8011e06 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8011dc8:	7dfb      	ldrb	r3, [r7, #23]
 8011dca:	68ba      	ldr	r2, [r7, #8]
 8011dcc:	3360      	adds	r3, #96	; 0x60
 8011dce:	009b      	lsls	r3, r3, #2
 8011dd0:	4413      	add	r3, r2
 8011dd2:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	db16      	blt.n	8011e06 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8011dd8:	7dbb      	ldrb	r3, [r7, #22]
 8011dda:	68ba      	ldr	r2, [r7, #8]
 8011ddc:	3348      	adds	r3, #72	; 0x48
 8011dde:	009b      	lsls	r3, r3, #2
 8011de0:	4413      	add	r3, r2
 8011de2:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	db0e      	blt.n	8011e06 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[j] <  0)
 8011de8:	7dbb      	ldrb	r3, [r7, #22]
 8011dea:	68ba      	ldr	r2, [r7, #8]
 8011dec:	3360      	adds	r3, #96	; 0x60
 8011dee:	009b      	lsls	r3, r3, #2
 8011df0:	4413      	add	r3, r2
 8011df2:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	da06      	bge.n	8011e06 <VL53L1_f_035+0x12c>
				pfiltered->VL53L1_p_043[i] = 1;
 8011df8:	7dfb      	ldrb	r3, [r7, #23]
 8011dfa:	68ba      	ldr	r2, [r7, #8]
 8011dfc:	4413      	add	r3, r2
 8011dfe:	2201      	movs	r2, #1
 8011e00:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8011e04:	e005      	b.n	8011e12 <VL53L1_f_035+0x138>

			else
				pfiltered->VL53L1_p_043[i] = 0;
 8011e06:	7dfb      	ldrb	r3, [r7, #23]
 8011e08:	68ba      	ldr	r2, [r7, #8]
 8011e0a:	4413      	add	r3, r2
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53L1_p_043[i] > 0) {
 8011e12:	7dfb      	ldrb	r3, [r7, #23]
 8011e14:	68ba      	ldr	r2, [r7, #8]
 8011e16:	4413      	add	r3, r2
 8011e18:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d035      	beq.n	8011e8c <VL53L1_f_035+0x1b2>

				pdata->VL53L1_p_025 = lb;
 8011e20:	69bb      	ldr	r3, [r7, #24]
 8011e22:	7ffa      	ldrb	r2, [r7, #31]
 8011e24:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53L1_f_036(
 8011e26:	7dfb      	ldrb	r3, [r7, #23]
 8011e28:	68ba      	ldr	r2, [r7, #8]
 8011e2a:	009b      	lsls	r3, r3, #2
 8011e2c:	4413      	add	r3, r2
 8011e2e:	685c      	ldr	r4, [r3, #4]
 8011e30:	7dfb      	ldrb	r3, [r7, #23]
 8011e32:	68ba      	ldr	r2, [r7, #8]
 8011e34:	3318      	adds	r3, #24
 8011e36:	009b      	lsls	r3, r3, #2
 8011e38:	4413      	add	r3, r2
 8011e3a:	685d      	ldr	r5, [r3, #4]
 8011e3c:	7dfb      	ldrb	r3, [r7, #23]
 8011e3e:	68ba      	ldr	r2, [r7, #8]
 8011e40:	3330      	adds	r3, #48	; 0x30
 8011e42:	009b      	lsls	r3, r3, #2
 8011e44:	4413      	add	r3, r2
 8011e46:	685e      	ldr	r6, [r3, #4]
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	689b      	ldr	r3, [r3, #8]
 8011e4c:	687a      	ldr	r2, [r7, #4]
 8011e4e:	78d2      	ldrb	r2, [r2, #3]
 8011e50:	69b9      	ldr	r1, [r7, #24]
 8011e52:	3118      	adds	r1, #24
 8011e54:	7ff8      	ldrb	r0, [r7, #31]
 8011e56:	9105      	str	r1, [sp, #20]
 8011e58:	9204      	str	r2, [sp, #16]
 8011e5a:	9303      	str	r3, [sp, #12]
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	9302      	str	r3, [sp, #8]
 8011e60:	2300      	movs	r3, #0
 8011e62:	9301      	str	r3, [sp, #4]
 8011e64:	2300      	movs	r3, #0
 8011e66:	9300      	str	r3, [sp, #0]
 8011e68:	4633      	mov	r3, r6
 8011e6a:	462a      	mov	r2, r5
 8011e6c:	4621      	mov	r1, r4
 8011e6e:	f000 f81c 	bl	8011eaa <VL53L1_f_036>
 8011e72:	4603      	mov	r3, r0
 8011e74:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53L1_p_004,
					palgo3->VL53L1_p_031,
					&(pdata->VL53L1_p_014));

				if (func_status ==
 8011e76:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011e7a:	f113 0f0f 	cmn.w	r3, #15
 8011e7e:	d105      	bne.n	8011e8c <VL53L1_f_035+0x1b2>
					VL53L1_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53L1_p_043[i] = 0;
 8011e80:	7dfb      	ldrb	r3, [r7, #23]
 8011e82:	68ba      	ldr	r2, [r7, #8]
 8011e84:	4413      	add	r3, r2
 8011e86:	2200      	movs	r2, #0
 8011e88:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8011e8c:	7ffb      	ldrb	r3, [r7, #31]
 8011e8e:	3301      	adds	r3, #1
 8011e90:	77fb      	strb	r3, [r7, #31]
 8011e92:	69bb      	ldr	r3, [r7, #24]
 8011e94:	791b      	ldrb	r3, [r3, #4]
 8011e96:	7ffa      	ldrb	r2, [r7, #31]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	f4ff af40 	bcc.w	8011d1e <VL53L1_f_035+0x44>

			}
		}
	}

	return status;
 8011e9e:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3724      	adds	r7, #36	; 0x24
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011eaa <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 8011eaa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011eae:	b0b2      	sub	sp, #200	; 0xc8
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8011eb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8011ec4:	23f1      	movs	r3, #241	; 0xf1
 8011ec6:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 8011eca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ece:	f04f 0300 	mov.w	r3, #0
 8011ed2:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
 8011ed6:	f04f 0200 	mov.w	r2, #0
 8011eda:	f04f 0300 	mov.w	r3, #0
 8011ede:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 8011ee2:	f04f 0200 	mov.w	r2, #0
 8011ee6:	f04f 0300 	mov.w	r3, #0
 8011eea:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8011eee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011ef2:	17da      	asrs	r2, r3, #31
 8011ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011ef8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8011efc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011f00:	17da      	asrs	r2, r3, #31
 8011f02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011f06:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8011f0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011f0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8011f12:	4602      	mov	r2, r0
 8011f14:	ebb3 0802 	subs.w	r8, r3, r2
 8011f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011f1c:	460a      	mov	r2, r1
 8011f1e:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8011f22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011f26:	17da      	asrs	r2, r3, #31
 8011f28:	67bb      	str	r3, [r7, #120]	; 0x78
 8011f2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011f2c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8011f30:	460b      	mov	r3, r1
 8011f32:	ebb8 0a03 	subs.w	sl, r8, r3
 8011f36:	4613      	mov	r3, r2
 8011f38:	eb69 0b03 	sbc.w	fp, r9, r3
 8011f3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011f40:	17da      	asrs	r2, r3, #31
 8011f42:	673b      	str	r3, [r7, #112]	; 0x70
 8011f44:	677a      	str	r2, [r7, #116]	; 0x74
 8011f46:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8011f4a:	460b      	mov	r3, r1
 8011f4c:	ebba 0403 	subs.w	r4, sl, r3
 8011f50:	4613      	mov	r3, r2
 8011f52:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8011f56:	f04f 0200 	mov.w	r2, #0
 8011f5a:	f04f 0300 	mov.w	r3, #0
 8011f5e:	032b      	lsls	r3, r5, #12
 8011f60:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8011f64:	0322      	lsls	r2, r4, #12
 8011f66:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8011f6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011f6e:	17da      	asrs	r2, r3, #31
 8011f70:	66bb      	str	r3, [r7, #104]	; 0x68
 8011f72:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8011f74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011f78:	17da      	asrs	r2, r3, #31
 8011f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8011f7c:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8011f7e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8011f82:	4623      	mov	r3, r4
 8011f84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8011f88:	4602      	mov	r2, r0
 8011f8a:	1a9b      	subs	r3, r3, r2
 8011f8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8011f8e:	462b      	mov	r3, r5
 8011f90:	460a      	mov	r2, r1
 8011f92:	eb63 0302 	sbc.w	r3, r3, r2
 8011f96:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8011f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011f9c:	17da      	asrs	r2, r3, #31
 8011f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8011fa0:	657a      	str	r2, [r7, #84]	; 0x54
 8011fa2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8011fa6:	4623      	mov	r3, r4
 8011fa8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8011fac:	4602      	mov	r2, r0
 8011fae:	1a9b      	subs	r3, r3, r2
 8011fb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8011fb2:	462b      	mov	r3, r5
 8011fb4:	460a      	mov	r2, r1
 8011fb6:	eb63 0302 	sbc.w	r3, r3, r2
 8011fba:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8011fbc:	f04f 0200 	mov.w	r2, #0
 8011fc0:	f04f 0300 	mov.w	r3, #0
 8011fc4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8011fc8:	4629      	mov	r1, r5
 8011fca:	030b      	lsls	r3, r1, #12
 8011fcc:	4621      	mov	r1, r4
 8011fce:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8011fd2:	4621      	mov	r1, r4
 8011fd4:	030a      	lsls	r2, r1, #12
 8011fd6:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 8011fda:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8011fde:	4313      	orrs	r3, r2
 8011fe0:	f000 80a8 	beq.w	8012134 <VL53L1_f_036+0x28a>
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 8011fe4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8011fe8:	f04f 0000 	mov.w	r0, #0
 8011fec:	f04f 0100 	mov.w	r1, #0
 8011ff0:	0319      	lsls	r1, r3, #12
 8011ff2:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8011ff6:	0310      	lsls	r0, r2, #12
 8011ff8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8011ffc:	1814      	adds	r4, r2, r0
 8011ffe:	633c      	str	r4, [r7, #48]	; 0x30
 8012000:	414b      	adcs	r3, r1
 8012002:	637b      	str	r3, [r7, #52]	; 0x34
 8012004:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8012008:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 801200c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8012010:	1891      	adds	r1, r2, r2
 8012012:	62b9      	str	r1, [r7, #40]	; 0x28
 8012014:	415b      	adcs	r3, r3
 8012016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012018:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801201c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8012020:	f7ee fd9a 	bl	8000b58 <__aeabi_ldivmod>
 8012024:	4602      	mov	r2, r0
 8012026:	460b      	mov	r3, r1
 8012028:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		mean_phase += 2048;
 801202c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8012030:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8012034:	6239      	str	r1, [r7, #32]
 8012036:	f143 0300 	adc.w	r3, r3, #0
 801203a:	627b      	str	r3, [r7, #36]	; 0x24
 801203c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8012040:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase += (4096 * (int64_t)bin);
 8012044:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8012048:	2200      	movs	r2, #0
 801204a:	643b      	str	r3, [r7, #64]	; 0x40
 801204c:	647a      	str	r2, [r7, #68]	; 0x44
 801204e:	f04f 0200 	mov.w	r2, #0
 8012052:	f04f 0300 	mov.w	r3, #0
 8012056:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 801205a:	4629      	mov	r1, r5
 801205c:	030b      	lsls	r3, r1, #12
 801205e:	4621      	mov	r1, r4
 8012060:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8012064:	4621      	mov	r1, r4
 8012066:	030a      	lsls	r2, r1, #12
 8012068:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 801206c:	1884      	adds	r4, r0, r2
 801206e:	61bc      	str	r4, [r7, #24]
 8012070:	eb41 0303 	adc.w	r3, r1, r3
 8012074:	61fb      	str	r3, [r7, #28]
 8012076:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801207a:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		mean_phase  = do_division_s((mean_phase + 1), 2);
 801207e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8012082:	1c51      	adds	r1, r2, #1
 8012084:	63b9      	str	r1, [r7, #56]	; 0x38
 8012086:	f143 0300 	adc.w	r3, r3, #0
 801208a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801208c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8012090:	460b      	mov	r3, r1
 8012092:	0fdb      	lsrs	r3, r3, #31
 8012094:	2200      	movs	r2, #0
 8012096:	613b      	str	r3, [r7, #16]
 8012098:	617a      	str	r2, [r7, #20]
 801209a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801209e:	4623      	mov	r3, r4
 80120a0:	4602      	mov	r2, r0
 80120a2:	189b      	adds	r3, r3, r2
 80120a4:	60bb      	str	r3, [r7, #8]
 80120a6:	460b      	mov	r3, r1
 80120a8:	462a      	mov	r2, r5
 80120aa:	eb42 0303 	adc.w	r3, r2, r3
 80120ae:	60fb      	str	r3, [r7, #12]
 80120b0:	f04f 0200 	mov.w	r2, #0
 80120b4:	f04f 0300 	mov.w	r3, #0
 80120b8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80120bc:	4621      	mov	r1, r4
 80120be:	084a      	lsrs	r2, r1, #1
 80120c0:	4629      	mov	r1, r5
 80120c2:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80120c6:	4629      	mov	r1, r5
 80120c8:	104b      	asrs	r3, r1, #1
 80120ca:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		if (mean_phase  < 0)
 80120ce:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	da05      	bge.n	80120e2 <VL53L1_f_036+0x238>
			mean_phase = 0;
 80120d6:	f04f 0200 	mov.w	r2, #0
 80120da:	f04f 0300 	mov.w	r3, #0
 80120de:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
 80120e2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80120e6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80120ea:	f173 0300 	sbcs.w	r3, r3, #0
 80120ee:	db05      	blt.n	80120fc <VL53L1_f_036+0x252>
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;
 80120f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120f4:	f04f 0300 	mov.w	r3, #0
 80120f8:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase32 = (int32_t)mean_phase;
 80120fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 8012104:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 8012108:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 801210a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801210e:	fb93 f1f2 	sdiv	r1, r3, r2
 8012112:	fb01 f202 	mul.w	r2, r1, r2
 8012116:	1a9b      	subs	r3, r3, r2
 8012118:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 801211c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012120:	17da      	asrs	r2, r3, #31
 8012122:	603b      	str	r3, [r7, #0]
 8012124:	607a      	str	r2, [r7, #4]
 8012126:	e9d7 3400 	ldrd	r3, r4, [r7]
 801212a:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53L1_ERROR_NONE;
 801212e:	2300      	movs	r3, #0
 8012130:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	*pmean_phase = (uint32_t)mean_phase;
 8012134:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8012138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801213c:	601a      	str	r2, [r3, #0]

	return status;
 801213e:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 8012142:	4618      	mov	r0, r3
 8012144:	37c8      	adds	r7, #200	; 0xc8
 8012146:	46bd      	mov	sp, r7
 8012148:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801214c <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 801214c:	b480      	push	{r7}
 801214e:	b087      	sub	sp, #28
 8012150:	af00      	add	r7, sp, #0
 8012152:	60ba      	str	r2, [r7, #8]
 8012154:	607b      	str	r3, [r7, #4]
 8012156:	4603      	mov	r3, r0
 8012158:	73fb      	strb	r3, [r7, #15]
 801215a:	460b      	mov	r3, r1
 801215c:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 801215e:	2300      	movs	r3, #0
 8012160:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 8012162:	2300      	movs	r3, #0
 8012164:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2200      	movs	r2, #0
 801216a:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 801216c:	7bfa      	ldrb	r2, [r7, #15]
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	3206      	adds	r2, #6
 8012172:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012176:	6a3b      	ldr	r3, [r7, #32]
 8012178:	601a      	str	r2, [r3, #0]
	*pc = 0;
 801217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801217c:	2200      	movs	r2, #0
 801217e:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8012180:	2300      	movs	r3, #0
 8012182:	75fb      	strb	r3, [r7, #23]
 8012184:	e02f      	b.n	80121e6 <VL53L1_f_013+0x9a>


		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8012186:	7bfa      	ldrb	r2, [r7, #15]
 8012188:	7dfb      	ldrb	r3, [r7, #23]
 801218a:	4413      	add	r3, r2
 801218c:	68ba      	ldr	r2, [r7, #8]
 801218e:	7a92      	ldrb	r2, [r2, #10]
 8012190:	441a      	add	r2, r3
 8012192:	7bbb      	ldrb	r3, [r7, #14]
 8012194:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53L1_p_024;
 8012196:	68ba      	ldr	r2, [r7, #8]
 8012198:	7a92      	ldrb	r2, [r2, #10]
 801219a:	fb93 f1f2 	sdiv	r1, r3, r2
 801219e:	fb01 f202 	mul.w	r2, r1, r2
 80121a2:	1a9b      	subs	r3, r3, r2
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 80121a4:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 80121a6:	7dfa      	ldrb	r2, [r7, #23]
 80121a8:	7bbb      	ldrb	r3, [r7, #14]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d20a      	bcs.n	80121c4 <VL53L1_f_013+0x78>
			*pa += pbins->bin_data[j];
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	681a      	ldr	r2, [r3, #0]
 80121b2:	7db9      	ldrb	r1, [r7, #22]
 80121b4:	68bb      	ldr	r3, [r7, #8]
 80121b6:	3106      	adds	r1, #6
 80121b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80121bc:	441a      	add	r2, r3
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	601a      	str	r2, [r3, #0]
 80121c2:	e00d      	b.n	80121e0 <VL53L1_f_013+0x94>
		else if (w > filter_woi)
 80121c4:	7dfa      	ldrb	r2, [r7, #23]
 80121c6:	7bbb      	ldrb	r3, [r7, #14]
 80121c8:	429a      	cmp	r2, r3
 80121ca:	d909      	bls.n	80121e0 <VL53L1_f_013+0x94>
			*pc += pbins->bin_data[j];
 80121cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ce:	681a      	ldr	r2, [r3, #0]
 80121d0:	7db9      	ldrb	r1, [r7, #22]
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	3106      	adds	r1, #6
 80121d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80121da:	441a      	add	r2, r3
 80121dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121de:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 80121e0:	7dfb      	ldrb	r3, [r7, #23]
 80121e2:	3301      	adds	r3, #1
 80121e4:	75fb      	strb	r3, [r7, #23]
 80121e6:	7bbb      	ldrb	r3, [r7, #14]
 80121e8:	005a      	lsls	r2, r3, #1
 80121ea:	7dfb      	ldrb	r3, [r7, #23]
 80121ec:	429a      	cmp	r2, r3
 80121ee:	daca      	bge.n	8012186 <VL53L1_f_013+0x3a>
	}
}
 80121f0:	bf00      	nop
 80121f2:	bf00      	nop
 80121f4:	371c      	adds	r7, #28
 80121f6:	46bd      	mov	sp, r7
 80121f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fc:	4770      	bx	lr

080121fe <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 80121fe:	b580      	push	{r7, lr}
 8012200:	b088      	sub	sp, #32
 8012202:	af00      	add	r7, sp, #0
 8012204:	60ba      	str	r2, [r7, #8]
 8012206:	461a      	mov	r2, r3
 8012208:	4603      	mov	r3, r0
 801220a:	81fb      	strh	r3, [r7, #14]
 801220c:	460b      	mov	r3, r1
 801220e:	81bb      	strh	r3, [r7, #12]
 8012210:	4613      	mov	r3, r2
 8012212:	80fb      	strh	r3, [r7, #6]
	VL53L1_Error     status = VL53L1_ERROR_NONE;
 8012214:	2300      	movs	r3, #0
 8012216:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 8012218:	2300      	movs	r3, #0
 801221a:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 801221c:	2300      	movs	r3, #0
 801221e:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 8012220:	2300      	movs	r3, #0
 8012222:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 8012224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012226:	89fa      	ldrh	r2, [r7, #14]
 8012228:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 801222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801222c:	89ba      	ldrh	r2, [r7, #12]
 801222e:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 8012230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012232:	68ba      	ldr	r2, [r7, #8]
 8012234:	619a      	str	r2, [r3, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 8012236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012238:	88fa      	ldrh	r2, [r7, #6]
 801223a:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 801223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801223e:	8a5b      	ldrh	r3, [r3, #18]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d101      	bne.n	8012248 <VL53L1_f_011+0x4a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8012244:	23f1      	movs	r3, #241	; 0xf1
 8012246:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 8012248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801224a:	699b      	ldr	r3, [r3, #24]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d101      	bne.n	8012254 <VL53L1_f_011+0x56>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8012250:	23f1      	movs	r3, #241	; 0xf1
 8012252:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8012254:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d16f      	bne.n	801233c <VL53L1_f_011+0x13e>



		pll_period_us =
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 801225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801225e:	8a5b      	ldrh	r3, [r3, #18]
 8012260:	4618      	mov	r0, r3
 8012262:	f7fd f903 	bl	800f46c <VL53L1_calc_pll_period_us>
 8012266:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 8012268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801226a:	699b      	ldr	r3, [r3, #24]
 801226c:	3301      	adds	r3, #1
 801226e:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 8012270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012272:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 8012274:	4619      	mov	r1, r3
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801227c:	6978      	ldr	r0, [r7, #20]
 801227e:	f7fd f90c 	bl	800f49a <VL53L1_duration_maths>
 8012282:	4602      	mov	r2, r0
 8012284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012286:	61da      	str	r2, [r3, #28]
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53L1_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53L1_p_030) << 4,
 8012288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801228a:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 801228c:	0119      	lsls	r1, r3, #4
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012294:	6978      	ldr	r0, [r7, #20]
 8012296:	f7fd f900 	bl	800f49a <VL53L1_duration_maths>
 801229a:	4602      	mov	r2, r0
 801229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801229e:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 80122a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 80122a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a6:	69db      	ldr	r3, [r3, #28]
 80122a8:	4619      	mov	r1, r3
 80122aa:	4610      	mov	r0, r2
 80122ac:	f7fd fb6d 	bl	800f98a <VL53L1_rate_maths>
 80122b0:	4603      	mov	r3, r0
 80122b2:	461a      	mov	r2, r3
 80122b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b6:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 80122b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 80122bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122be:	6a1b      	ldr	r3, [r3, #32]
 80122c0:	4619      	mov	r1, r3
 80122c2:	4610      	mov	r0, r2
 80122c4:	f7fd fb61 	bl	800f98a <VL53L1_rate_maths>
 80122c8:	4603      	mov	r3, r0
 80122ca:	461a      	mov	r2, r3
 80122cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ce:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_020,
 80122d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 80122d4:	461a      	mov	r2, r3
 80122d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d8:	6a1b      	ldr	r3, [r3, #32]
 80122da:	4619      	mov	r1, r3
 80122dc:	4610      	mov	r0, r2
 80122de:	f7fd fb54 	bl	800f98a <VL53L1_rate_maths>
 80122e2:	4603      	mov	r3, r0
 80122e4:	461a      	mov	r2, r3
 80122e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e8:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 80122ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ec:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80122ee:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 80122f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 80122f4:	4413      	add	r3, r2
 80122f6:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 80122f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80122fc:	2b01      	cmp	r3, #1
 80122fe:	d905      	bls.n	801230c <VL53L1_f_011+0x10e>
			count_rate_total /= histo_merge_nb;
 8012300:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012304:	69ba      	ldr	r2, [r7, #24]
 8012306:	fbb2 f3f3 	udiv	r3, r2, r3
 801230a:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53L1_rate_per_spad_maths(
 801230c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801230e:	8ada      	ldrh	r2, [r3, #22]
 8012310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012314:	69b9      	ldr	r1, [r7, #24]
 8012316:	2006      	movs	r0, #6
 8012318:	f7fd fb7c 	bl	800fa14 <VL53L1_rate_per_spad_maths>
 801231c:	4603      	mov	r3, r0
 801231e:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 8012320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012322:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53L1_p_012   =
			VL53L1_events_per_spad_maths(
 8012324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012326:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801232a:	8ad9      	ldrh	r1, [r3, #22]
 801232c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801232e:	69db      	ldr	r3, [r3, #28]
 8012330:	461a      	mov	r2, r3
 8012332:	f7fd f90b 	bl	800f54c <VL53L1_events_per_spad_maths>
 8012336:	4602      	mov	r2, r0
		pdata->VL53L1_p_012   =
 8012338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801233a:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 801233c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012340:	4618      	mov	r0, r3
 8012342:	3720      	adds	r7, #32
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}

08012348 <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 8012348:	b590      	push	{r4, r7, lr}
 801234a:	b085      	sub	sp, #20
 801234c:	af02      	add	r7, sp, #8
 801234e:	4603      	mov	r3, r0
 8012350:	603a      	str	r2, [r7, #0]
 8012352:	80fb      	strh	r3, [r7, #6]
 8012354:	460b      	mov	r3, r1
 8012356:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	8a58      	ldrh	r0, [r3, #18]
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	8a9c      	ldrh	r4, [r3, #20]
 8012364:	88fb      	ldrh	r3, [r7, #6]
 8012366:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801236a:	9201      	str	r2, [sp, #4]
 801236c:	9300      	str	r3, [sp, #0]
 801236e:	2300      	movs	r3, #0
 8012370:	4622      	mov	r2, r4
 8012372:	f7fd fb83 	bl	800fa7c <VL53L1_range_maths>
 8012376:	4603      	mov	r3, r0
 8012378:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 8012380:	683b      	ldr	r3, [r7, #0]
 8012382:	8a58      	ldrh	r0, [r3, #18]
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	8a9c      	ldrh	r4, [r3, #20]
 801238e:	88fb      	ldrh	r3, [r7, #6]
 8012390:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012394:	9201      	str	r2, [sp, #4]
 8012396:	9300      	str	r3, [sp, #0]
 8012398:	2300      	movs	r3, #0
 801239a:	4622      	mov	r2, r4
 801239c:	f7fd fb6e 	bl	800fa7c <VL53L1_range_maths>
 80123a0:	4603      	mov	r3, r0
 80123a2:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 80123a4:	683b      	ldr	r3, [r7, #0]
 80123a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	8a58      	ldrh	r0, [r3, #18]
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	8a9c      	ldrh	r4, [r3, #20]
 80123b8:	88fb      	ldrh	r3, [r7, #6]
 80123ba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80123be:	9201      	str	r2, [sp, #4]
 80123c0:	9300      	str	r3, [sp, #0]
 80123c2:	2300      	movs	r3, #0
 80123c4:	4622      	mov	r2, r4
 80123c6:	f7fd fb59 	bl	800fa7c <VL53L1_range_maths>
 80123ca:	4603      	mov	r3, r0
 80123cc:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 80123d4:	bf00      	nop
 80123d6:	370c      	adds	r7, #12
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd90      	pop	{r4, r7, pc}

080123dc <VL53L1_f_004>:

void  VL53L1_f_004(
	VL53L1_histogram_bin_data_t   *pxtalk,
	VL53L1_histogram_bin_data_t   *pbins,
	VL53L1_histogram_bin_data_t   *pxtalk_realigned)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b086      	sub	sp, #24
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 80123e8:	2300      	movs	r3, #0
 80123ea:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 80123ec:	2300      	movs	r3, #0
 80123ee:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 80123f0:	2300      	movs	r3, #0
 80123f2:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 80123f4:	2300      	movs	r3, #0
 80123f6:	757b      	strb	r3, [r7, #21]





	memcpy(
 80123f8:	22ac      	movs	r2, #172	; 0xac
 80123fa:	68b9      	ldr	r1, [r7, #8]
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f008 fb15 	bl	801aa2c <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53L1_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8012402:	2300      	movs	r3, #0
 8012404:	75fb      	strb	r3, [r7, #23]
 8012406:	e008      	b.n	801241a <VL53L1_f_004+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 8012408:	7dfa      	ldrb	r2, [r7, #23]
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	3206      	adds	r2, #6
 801240e:	2100      	movs	r1, #0
 8012410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8012414:	7dfb      	ldrb	r3, [r7, #23]
 8012416:	3301      	adds	r3, #1
 8012418:	75fb      	strb	r3, [r7, #23]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	7a5b      	ldrb	r3, [r3, #9]
 801241e:	7dfa      	ldrb	r2, [r7, #23]
 8012420:	429a      	cmp	r2, r3
 8012422:	d3f1      	bcc.n	8012408 <VL53L1_f_004+0x2c>



	bin_offset =  VL53L1_f_038(
 8012424:	68f9      	ldr	r1, [r7, #12]
 8012426:	68b8      	ldr	r0, [r7, #8]
 8012428:	f000 f878 	bl	801251c <VL53L1_f_038>
 801242c:	4603      	mov	r3, r0
 801242e:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	7a9a      	ldrb	r2, [r3, #10]
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	7a9b      	ldrb	r3, [r3, #10]
 8012438:	429a      	cmp	r2, r3
 801243a:	d203      	bcs.n	8012444 <VL53L1_f_004+0x68>
		min_bins = pxtalk->VL53L1_p_024;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	7a9b      	ldrb	r3, [r3, #10]
 8012440:	75bb      	strb	r3, [r7, #22]
 8012442:	e002      	b.n	801244a <VL53L1_f_004+0x6e>
	else
		min_bins = pbins->VL53L1_p_024;
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	7a9b      	ldrb	r3, [r3, #10]
 8012448:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 801244a:	2300      	movs	r3, #0
 801244c:	75fb      	strb	r3, [r7, #23]
 801244e:	e05c      	b.n	801250a <VL53L1_f_004+0x12e>



		if (bin_offset >= 0)
 8012450:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8012454:	2b00      	cmp	r3, #0
 8012456:	db0f      	blt.n	8012478 <VL53L1_f_004+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8012458:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801245c:	461a      	mov	r2, r3
 801245e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8012462:	4413      	add	r3, r2
				% (int8_t)pbins->VL53L1_p_024;
 8012464:	68ba      	ldr	r2, [r7, #8]
 8012466:	7a92      	ldrb	r2, [r2, #10]
 8012468:	b252      	sxtb	r2, r2
 801246a:	fb93 f1f2 	sdiv	r1, r3, r2
 801246e:	fb01 f202 	mul.w	r2, r1, r2
 8012472:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8012474:	757b      	strb	r3, [r7, #21]
 8012476:	e013      	b.n	80124a0 <VL53L1_f_004+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	7a9b      	ldrb	r3, [r3, #10]
 801247c:	b25b      	sxtb	r3, r3
 801247e:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 8012480:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012484:	4619      	mov	r1, r3
 8012486:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801248a:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 801248c:	4413      	add	r3, r2
					% (int8_t)pbins->VL53L1_p_024;
 801248e:	68ba      	ldr	r2, [r7, #8]
 8012490:	7a92      	ldrb	r2, [r2, #10]
 8012492:	b252      	sxtb	r2, r2
 8012494:	fb93 f1f2 	sdiv	r1, r3, r2
 8012498:	fb01 f202 	mul.w	r2, r1, r2
 801249c:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 801249e:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 80124a0:	7d7b      	ldrb	r3, [r7, #21]
 80124a2:	461a      	mov	r2, r3
 80124a4:	68bb      	ldr	r3, [r7, #8]
 80124a6:	3206      	adds	r2, #6
 80124a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 80124ac:	7df9      	ldrb	r1, [r7, #23]
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	3106      	adds	r1, #6
 80124b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 80124b6:	429a      	cmp	r2, r3
 80124b8:	dd12      	ble.n	80124e0 <VL53L1_f_004+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 80124ba:	7d7b      	ldrb	r3, [r7, #21]
 80124bc:	461a      	mov	r2, r3
 80124be:	68bb      	ldr	r3, [r7, #8]
 80124c0:	3206      	adds	r2, #6
 80124c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 80124c6:	7df9      	ldrb	r1, [r7, #23]
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	3106      	adds	r1, #6
 80124cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 80124d0:	7d79      	ldrb	r1, [r7, #21]
 80124d2:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 80124d4:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	1d82      	adds	r2, r0, #6
 80124da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80124de:	e006      	b.n	80124ee <VL53L1_f_004+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 80124e0:	7d7b      	ldrb	r3, [r7, #21]
 80124e2:	461a      	mov	r2, r3
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	3206      	adds	r2, #6
 80124e8:	2100      	movs	r1, #0
 80124ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 80124ee:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 80124f0:	7d7b      	ldrb	r3, [r7, #21]
 80124f2:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	3206      	adds	r2, #6
 80124f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	1d82      	adds	r2, r0, #6
 8012500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 8012504:	7dfb      	ldrb	r3, [r7, #23]
 8012506:	3301      	adds	r3, #1
 8012508:	75fb      	strb	r3, [r7, #23]
 801250a:	7dfa      	ldrb	r2, [r7, #23]
 801250c:	7dbb      	ldrb	r3, [r7, #22]
 801250e:	429a      	cmp	r2, r3
 8012510:	d39e      	bcc.n	8012450 <VL53L1_f_004+0x74>
	}



	LOG_FUNCTION_END(0);
}
 8012512:	bf00      	nop
 8012514:	bf00      	nop
 8012516:	3718      	adds	r7, #24
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}

0801251c <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b086      	sub	sp, #24
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
 8012524:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 8012526:	2300      	movs	r3, #0
 8012528:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 801252a:	2300      	movs	r3, #0
 801252c:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 801252e:	2300      	movs	r3, #0
 8012530:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 8012532:	2300      	movs	r3, #0
 8012534:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801253c:	4618      	mov	r0, r3
 801253e:	f7fd fb85 	bl	800fc4c <VL53L1_decode_vcsel_period>
 8012542:	4603      	mov	r3, r0
	period = 2048 *
 8012544:	02db      	lsls	r3, r3, #11
 8012546:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d00a      	beq.n	8012564 <VL53L1_f_038+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 8012554:	68ba      	ldr	r2, [r7, #8]
 8012556:	fbb3 f2f2 	udiv	r2, r3, r2
 801255a:	68b9      	ldr	r1, [r7, #8]
 801255c:	fb01 f202 	mul.w	r2, r1, r2
 8012560:	1a9b      	subs	r3, r3, r2
 8012562:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801256a:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 801256c:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 801256e:	1ad3      	subs	r3, r2, r3
 8012570:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	2b00      	cmp	r3, #0
 8012576:	dd09      	ble.n	801258c <VL53L1_f_038+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801257e:	2b00      	cmp	r3, #0
 8012580:	da01      	bge.n	8012586 <VL53L1_f_038+0x6a>
 8012582:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8012586:	12db      	asrs	r3, r3, #11
 8012588:	75fb      	strb	r3, [r7, #23]
 801258a:	e008      	b.n	801259e <VL53L1_f_038+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8012592:	2b00      	cmp	r3, #0
 8012594:	da01      	bge.n	801259a <VL53L1_f_038+0x7e>
 8012596:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801259a:	12db      	asrs	r3, r3, #11
 801259c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 801259e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	3718      	adds	r7, #24
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}

080125aa <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 80125aa:	b580      	push	{r7, lr}
 80125ac:	b08e      	sub	sp, #56	; 0x38
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	6078      	str	r0, [r7, #4]
 80125b2:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80125b4:	2300      	movs	r3, #0
 80125b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53L1_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53L1_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 80125ba:	2300      	movs	r3, #0
 80125bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 80125c0:	2300      	movs	r3, #0
 80125c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 80125c6:	2300      	movs	r3, #0
 80125c8:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53L1_p_018       = 0;
 80125ca:	2300      	movs	r3, #0
 80125cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 80125d0:	2300      	movs	r3, #0
 80125d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 80125d6:	2300      	movs	r3, #0
 80125d8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 80125dc:	22ac      	movs	r2, #172	; 0xac
 80125de:	6879      	ldr	r1, [r7, #4]
 80125e0:	6838      	ldr	r0, [r7, #0]
 80125e2:	f008 fa23 	bl	801aa2c <memcpy>


	podata->VL53L1_p_024 = 0;
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	2200      	movs	r2, #0
 80125ea:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 80125ec:	2300      	movs	r3, #0
 80125ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80125f2:	e00a      	b.n	801260a <VL53L1_f_039+0x60>
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 80125f4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80125f8:	683a      	ldr	r2, [r7, #0]
 80125fa:	4413      	add	r3, r2
 80125fc:	2210      	movs	r2, #16
 80125fe:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8012600:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012604:	3301      	adds	r3, #1
 8012606:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801260a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801260e:	2b05      	cmp	r3, #5
 8012610:	d9f0      	bls.n	80125f4 <VL53L1_f_039+0x4a>

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8012612:	2300      	movs	r3, #0
 8012614:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012618:	e00b      	b.n	8012632 <VL53L1_f_039+0x88>
		podata->bin_data[lc] = 0;
 801261a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	3206      	adds	r2, #6
 8012622:	2100      	movs	r1, #0
 8012624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8012628:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801262c:	3301      	adds	r3, #1
 801262e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	7a5b      	ldrb	r3, [r3, #9]
 8012636:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801263a:	429a      	cmp	r2, r3
 801263c:	d3ed      	bcc.n	801261a <VL53L1_f_039+0x70>



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 801263e:	2300      	movs	r3, #0
 8012640:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012644:	e012      	b.n	801266c <VL53L1_f_039+0xc2>
		bin_initial_index[lc] = 0x00;
 8012646:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801264a:	3338      	adds	r3, #56	; 0x38
 801264c:	443b      	add	r3, r7
 801264e:	2200      	movs	r2, #0
 8012650:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 8012654:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012658:	3338      	adds	r3, #56	; 0x38
 801265a:	443b      	add	r3, r7
 801265c:	2200      	movs	r2, #0
 801265e:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8012662:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012666:	3301      	adds	r3, #1
 8012668:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801266c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012670:	2b0f      	cmp	r3, #15
 8012672:	d9e8      	bls.n	8012646 <VL53L1_f_039+0x9c>
	}




	bin_seq_length = 0x00;
 8012674:	2300      	movs	r3, #0
 8012676:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 801267a:	2300      	movs	r3, #0
 801267c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012680:	e068      	b.n	8012754 <VL53L1_f_039+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 8012682:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012686:	687a      	ldr	r2, [r7, #4]
 8012688:	4413      	add	r3, r2
 801268a:	7b1b      	ldrb	r3, [r3, #12]
 801268c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 8012690:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012694:	3338      	adds	r3, #56	; 0x38
 8012696:	443b      	add	r3, r7
 8012698:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d115      	bne.n	80126cc <VL53L1_f_039+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 80126a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80126a4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80126a8:	0092      	lsls	r2, r2, #2
 80126aa:	b2d2      	uxtb	r2, r2
 80126ac:	3338      	adds	r3, #56	; 0x38
 80126ae:	443b      	add	r3, r7
 80126b0:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 80126b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126b8:	683a      	ldr	r2, [r7, #0]
 80126ba:	4413      	add	r3, r2
 80126bc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80126c0:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 80126c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126c6:	3301      	adds	r3, #1
 80126c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 80126cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80126d0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80126d4:	443a      	add	r2, r7
 80126d6:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 80126da:	3201      	adds	r2, #1
 80126dc:	b2d2      	uxtb	r2, r2
 80126de:	3338      	adds	r3, #56	; 0x38
 80126e0:	443b      	add	r3, r7
 80126e2:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53L1_p_018 = bin_initial_index[bin_cfg];
 80126e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80126ea:	3338      	adds	r3, #56	; 0x38
 80126ec:	443b      	add	r3, r7
 80126ee:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80126f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 80126f6:	2300      	movs	r3, #0
 80126f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80126fc:	e021      	b.n	8012742 <VL53L1_f_039+0x198>
			podata->bin_data[VL53L1_p_018+i] +=
 80126fe:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8012702:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8012706:	441a      	add	r2, r3
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	3206      	adds	r2, #6
 801270c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 8012710:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012714:	009a      	lsls	r2, r3, #2
 8012716:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801271a:	441a      	add	r2, r3
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	3206      	adds	r2, #6
 8012720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53L1_p_018+i] +=
 8012724:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 8012728:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801272c:	4402      	add	r2, r0
 801272e:	4419      	add	r1, r3
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	3206      	adds	r2, #6
 8012734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 8012738:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801273c:	3301      	adds	r3, #1
 801273e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8012742:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8012746:	2b03      	cmp	r3, #3
 8012748:	d9d9      	bls.n	80126fe <VL53L1_f_039+0x154>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 801274a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801274e:	3301      	adds	r3, #1
 8012750:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012754:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012758:	2b05      	cmp	r3, #5
 801275a:	d992      	bls.n	8012682 <VL53L1_f_039+0xd8>

	}



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 801275c:	2300      	movs	r3, #0
 801275e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012762:	e022      	b.n	80127aa <VL53L1_f_039+0x200>

		bin_cfg = podata->bin_seq[lc];
 8012764:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012768:	683a      	ldr	r2, [r7, #0]
 801276a:	4413      	add	r3, r2
 801276c:	7b1b      	ldrb	r3, [r3, #12]
 801276e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 8012772:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012776:	2b0f      	cmp	r3, #15
 8012778:	d80c      	bhi.n	8012794 <VL53L1_f_039+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 801277a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 801277e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 8012782:	3238      	adds	r2, #56	; 0x38
 8012784:	443a      	add	r2, r7
 8012786:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 801278a:	683a      	ldr	r2, [r7, #0]
 801278c:	4413      	add	r3, r2
 801278e:	460a      	mov	r2, r1
 8012790:	749a      	strb	r2, [r3, #18]
 8012792:	e005      	b.n	80127a0 <VL53L1_f_039+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 8012794:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012798:	683a      	ldr	r2, [r7, #0]
 801279a:	4413      	add	r3, r2
 801279c:	2200      	movs	r2, #0
 801279e:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80127a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80127a4:	3301      	adds	r3, #1
 80127a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80127aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80127ae:	2b05      	cmp	r3, #5
 80127b0:	d9d8      	bls.n	8012764 <VL53L1_f_039+0x1ba>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 80127b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80127b6:	009b      	lsls	r3, r3, #2
 80127b8:	b2da      	uxtb	r2, r3
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80127be:	2300      	movs	r3, #0
 80127c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80127c4:	e050      	b.n	8012868 <VL53L1_f_039+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 80127c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80127ca:	3338      	adds	r3, #56	; 0x38
 80127cc:	443b      	add	r3, r7
 80127ce:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80127d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 80127d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	dd41      	ble.n	801285e <VL53L1_f_039+0x2b4>

			VL53L1_p_018 = bin_initial_index[lc];
 80127da:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80127de:	3338      	adds	r3, #56	; 0x38
 80127e0:	443b      	add	r3, r7
 80127e2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80127e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 80127ea:	2300      	movs	r3, #0
 80127ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80127f0:	e031      	b.n	8012856 <VL53L1_f_039+0x2ac>
				podata->bin_data[VL53L1_p_018+i] +=
 80127f2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80127f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80127fa:	441a      	add	r2, r3
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	3206      	adds	r2, #6
 8012800:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 8012804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012806:	0fda      	lsrs	r2, r3, #31
 8012808:	4413      	add	r3, r2
 801280a:	105b      	asrs	r3, r3, #1
 801280c:	4618      	mov	r0, r3
				podata->bin_data[VL53L1_p_018+i] +=
 801280e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8012812:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8012816:	441a      	add	r2, r3
 8012818:	4401      	add	r1, r0
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	3206      	adds	r2, #6
 801281e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53L1_p_018+i] /=
 8012822:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8012826:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801282a:	441a      	add	r2, r3
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	3206      	adds	r2, #6
 8012830:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012834:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8012838:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801283c:	441a      	add	r2, r3
 801283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012840:	fb91 f1f3 	sdiv	r1, r1, r3
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	3206      	adds	r2, #6
 8012848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 801284c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8012850:	3301      	adds	r3, #1
 8012852:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8012856:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801285a:	2b03      	cmp	r3, #3
 801285c:	d9c9      	bls.n	80127f2 <VL53L1_f_039+0x248>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 801285e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012862:	3301      	adds	r3, #1
 8012864:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012868:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801286c:	2b0f      	cmp	r3, #15
 801286e:	d9aa      	bls.n	80127c6 <VL53L1_f_039+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	2200      	movs	r2, #0
 8012874:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 8012876:	7bfb      	ldrb	r3, [r7, #15]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d102      	bne.n	8012882 <VL53L1_f_039+0x2d8>
		(bin_repeat_count[15] > 0))
 801287c:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 801287e:	2b00      	cmp	r3, #0
 8012880:	d002      	beq.n	8012888 <VL53L1_f_039+0x2de>
		podata->number_of_ambient_bins = 4;
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	2204      	movs	r2, #4
 8012886:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 8012888:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 801288c:	4618      	mov	r0, r3
 801288e:	3738      	adds	r7, #56	; 0x38
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}

08012894 <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 8012894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012896:	b0cb      	sub	sp, #300	; 0x12c
 8012898:	af06      	add	r7, sp, #24
 801289a:	f507 7488 	add.w	r4, r7, #272	; 0x110
 801289e:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 80128a2:	6020      	str	r0, [r4, #0]
 80128a4:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80128a8:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 80128ac:	6001      	str	r1, [r0, #0]
 80128ae:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80128b2:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80128b6:	600a      	str	r2, [r1, #0]
 80128b8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80128bc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80128c0:	6013      	str	r3, [r2, #0]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80128c2:	2300      	movs	r3, #0
 80128c4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53L1_hist_gen3_algo_private_data_t  *palgo_gen3 =
 80128c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80128cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53L1_hist_gen3_algo_private_data_t *) pArea1;
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered4 =
 80128d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80128d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53L1_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53L1_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53L1_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 80128d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80128dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 80128e0:	f107 0318 	add.w	r3, r7, #24
 80128e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 80128e8:	2300      	movs	r3, #0
 80128ea:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 80128ec:	2300      	movs	r3, #0
 80128ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 80128f2:	2300      	movs	r3, #0
 80128f4:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 80128f8:	2300      	movs	r3, #0
 80128fa:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 80128fe:	2300      	movs	r3, #0
 8012900:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 8012904:	2300      	movs	r3, #0
 8012906:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 801290a:	2300      	movs	r3, #0
 801290c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53L1_f_039(
 8012910:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012914:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012918:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 801291c:	6818      	ldr	r0, [r3, #0]
 801291e:	f7ff fe44 	bl	80125aa <VL53L1_f_039>



	VL53L1_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
 8012922:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012926:	7a9b      	ldrb	r3, [r3, #10]
	VL53L1_init_histogram_bin_data_struct(
 8012928:	b299      	uxth	r1, r3
 801292a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801292e:	3348      	adds	r3, #72	; 0x48
 8012930:	461a      	mov	r2, r3
 8012932:	2000      	movs	r0, #0
 8012934:	f7fd f9db 	bl	800fcee <VL53L1_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 8012938:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801293c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012940:	3348      	adds	r3, #72	; 0x48
 8012942:	4619      	mov	r1, r3
 8012944:	4610      	mov	r0, r2
 8012946:	f7fd f994 	bl	800fc72 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
 801294a:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 801294e:	2b00      	cmp	r3, #0
 8012950:	d142      	bne.n	80129d8 <VL53L1_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8012952:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012956:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8012960:	2b00      	cmp	r3, #0
 8012962:	d039      	beq.n	80129d8 <VL53L1_hist_process_data+0x144>
		status =
		VL53L1_f_040(
 8012964:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012968:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012970:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012974:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 801297e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012982:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 801298c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012990:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 801299a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801299e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80129a2:	6812      	ldr	r2, [r2, #0]
 80129a4:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 80129a8:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80129ac:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80129b0:	6809      	ldr	r1, [r1, #0]
 80129b2:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 80129b6:	f107 0014 	add.w	r0, r7, #20
 80129ba:	9004      	str	r0, [sp, #16]
 80129bc:	9103      	str	r1, [sp, #12]
 80129be:	9202      	str	r2, [sp, #8]
 80129c0:	9301      	str	r3, [sp, #4]
 80129c2:	2300      	movs	r3, #0
 80129c4:	9300      	str	r3, [sp, #0]
 80129c6:	2300      	movs	r3, #0
 80129c8:	4632      	mov	r2, r6
 80129ca:	4629      	mov	r1, r5
 80129cc:	4620      	mov	r0, r4
 80129ce:	f002 f98c 	bl	8014cea <VL53L1_f_040>
 80129d2:	4603      	mov	r3, r0
 80129d4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
 80129d8:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d115      	bne.n	8012a0c <VL53L1_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 80129e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80129e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d00c      	beq.n	8012a0c <VL53L1_hist_process_data+0x178>
		status =
			VL53L1_f_041(
 80129f2:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80129f6:	697a      	ldr	r2, [r7, #20]
 80129f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80129fc:	3348      	adds	r3, #72	; 0x48
 80129fe:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8012a02:	f002 fbe4 	bl	80151ce <VL53L1_f_041>
 8012a06:	4603      	mov	r3, r0
 8012a08:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 8012a0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012a10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 8012a14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012a18:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;
 8012a1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012a20:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53L1_p_006 =
 8012a24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012a28:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 8012a2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012a30:	2200      	movs	r2, #0
 8012a32:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 8012a36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 8012a40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012a44:	2200      	movs	r2, #0
 8012a46:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8012a4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012a4e:	2200      	movs	r2, #0
 8012a50:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 8012a54:	2300      	movs	r3, #0
 8012a56:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8012a5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012a5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d002      	beq.n	8012a72 <VL53L1_hist_process_data+0x1de>
		xtalk_enable = 1;
 8012a6c:	2301      	movs	r3, #1
 8012a6e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 8012a72:	2300      	movs	r3, #0
 8012a74:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8012a78:	e108      	b.n	8012c8c <VL53L1_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 8012a7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012a7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8012a88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53L1_f_033(
 8012a8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012a90:	3348      	adds	r3, #72	; 0x48
 8012a92:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8012a96:	7814      	ldrb	r4, [r2, #0]
 8012a98:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8012a9c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8012aa0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8012aa4:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8012aa8:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8012aac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012ab0:	9405      	str	r4, [sp, #20]
 8012ab2:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8012ab6:	9404      	str	r4, [sp, #16]
 8012ab8:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8012abc:	9403      	str	r4, [sp, #12]
 8012abe:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8012ac2:	9402      	str	r4, [sp, #8]
 8012ac4:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8012ac8:	9401      	str	r4, [sp, #4]
 8012aca:	9300      	str	r3, [sp, #0]
 8012acc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012ad0:	6812      	ldr	r2, [r2, #0]
 8012ad2:	6809      	ldr	r1, [r1, #0]
 8012ad4:	6800      	ldr	r0, [r0, #0]
 8012ad6:	f7fe fe65 	bl	80117a4 <VL53L1_f_033>
 8012ada:	4603      	mov	r3, r0
 8012adc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53L1_ERROR_NONE && r == 0))
 8012ae0:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	f040 80cb 	bne.w	8012c80 <VL53L1_hist_process_data+0x3ec>
 8012aea:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	f040 80c6 	bne.w	8012c80 <VL53L1_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 8012af4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012af8:	7c9b      	ldrb	r3, [r3, #18]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d110      	bne.n	8012b20 <VL53L1_hist_process_data+0x28c>
			pdata = &(presults->VL53L1_p_002[0]);
 8012afe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012b02:	3314      	adds	r3, #20
 8012b04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53L1_p_001;
 8012b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012b0c:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 8012b0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012b12:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_006 =
				pdmax_algo_gen3->VL53L1_p_006;
 8012b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012b18:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53L1_p_006 =
 8012b1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012b1e:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 8012b20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b24:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 8012b2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8012b30:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012b34:	781b      	ldrb	r3, [r3, #0]
 8012b36:	461a      	mov	r2, r3
 8012b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012b3c:	fb02 f303 	mul.w	r3, r2, r3
 8012b40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 8012b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012b48:	011b      	lsls	r3, r3, #4
 8012b4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 8012b4e:	2300      	movs	r3, #0
 8012b50:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8012b54:	e08b      	b.n	8012c6e <VL53L1_hist_process_data+0x3da>

			pdata = &(presults->VL53L1_p_002[t]);
 8012b56:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8012b5a:	224c      	movs	r2, #76	; 0x4c
 8012b5c:	fb02 f303 	mul.w	r3, r2, r3
 8012b60:	3310      	adds	r3, #16
 8012b62:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8012b66:	4413      	add	r3, r2
 8012b68:	3304      	adds	r3, #4
 8012b6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 8012b6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012b72:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8012b76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012b7a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	dd0e      	ble.n	8012ba0 <VL53L1_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 8012b82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012b86:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8012b8a:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 8012b8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012b90:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8012b94:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 8012b96:	1ad3      	subs	r3, r2, r3
 8012b98:	b29b      	uxth	r3, r3
				delta_mm =
 8012b9a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8012b9e:	e00d      	b.n	8012bbc <VL53L1_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 8012ba0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012ba4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8012ba8:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 8012baa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012bae:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8012bb2:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 8012bb4:	1ad3      	subs	r3, r2, r3
 8012bb6:	b29b      	uxth	r3, r3
				delta_mm =
 8012bb8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8012bbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012bc0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 8012bc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8012bcc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	461a      	mov	r2, r3
 8012bd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012bd8:	fb02 f303 	mul.w	r3, r2, r3
 8012bdc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 8012be0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012be4:	015b      	lsls	r3, r3, #5
 8012be6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 8012bea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012bee:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8012bf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012bf6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 8012c00:	429a      	cmp	r2, r3
 8012c02:	dd2f      	ble.n	8012c64 <VL53L1_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 8012c04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012c08:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8012c0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	da22      	bge.n	8012c64 <VL53L1_hist_process_data+0x3d0>
			pdata->VL53L1_p_012 <
 8012c1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8012c24:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d91b      	bls.n	8012c64 <VL53L1_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8012c2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012c30:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012c32:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 8012c34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012c38:	4293      	cmp	r3, r2
 8012c3a:	d913      	bls.n	8012c64 <VL53L1_hist_process_data+0x3d0>
			delta_mm <
 8012c3c:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8012c40:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8012c44:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8012c48:	6812      	ldr	r2, [r2, #0]
 8012c4a:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8012c4c:	4293      	cmp	r3, r2
 8012c4e:	da09      	bge.n	8012c64 <VL53L1_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 8012c50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c54:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 8012c58:	224c      	movs	r2, #76	; 0x4c
 8012c5a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f007 fee4 	bl	801aa2c <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 8012c64:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8012c68:	3301      	adds	r3, #1
 8012c6a:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8012c6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c72:	7c9b      	ldrb	r3, [r3, #18]
 8012c74:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	f4ff af6c 	bcc.w	8012b56 <VL53L1_hist_process_data+0x2c2>
 8012c7e:	e000      	b.n	8012c82 <VL53L1_hist_process_data+0x3ee>
			continue;
 8012c80:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 8012c82:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8012c86:	3301      	adds	r3, #1
 8012c88:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8012c8c:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8012c90:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8012c94:	429a      	cmp	r2, r3
 8012c96:	f67f aef0 	bls.w	8012a7a <VL53L1_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 8012c9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8012ca8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 8012cac:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012cba <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 8012cba:	b580      	push	{r7, lr}
 8012cbc:	b086      	sub	sp, #24
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	60f8      	str	r0, [r7, #12]
 8012cc2:	460b      	mov	r3, r1
 8012cc4:	607a      	str	r2, [r7, #4]
 8012cc6:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012cc8:	2300      	movs	r3, #0
 8012cca:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53L1_ERROR_NONE)
 8012ccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d104      	bne.n	8012cde <VL53L1_nvm_enable+0x24>
		status = VL53L1_disable_firmware(Dev);
 8012cd4:	68f8      	ldr	r0, [r7, #12]
 8012cd6:	f7f9 fb5a 	bl	800c38e <VL53L1_disable_firmware>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	75fb      	strb	r3, [r7, #23]




	if (status == VL53L1_ERROR_NONE)
 8012cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d104      	bne.n	8012cf0 <VL53L1_nvm_enable+0x36>
		status = VL53L1_enable_powerforce(Dev);
 8012ce6:	68f8      	ldr	r0, [r7, #12]
 8012ce8:	f7f9 fb82 	bl	800c3f0 <VL53L1_enable_powerforce>
 8012cec:	4603      	mov	r3, r0
 8012cee:	75fb      	strb	r3, [r7, #23]



	if (status == VL53L1_ERROR_NONE)
 8012cf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d105      	bne.n	8012d04 <VL53L1_nvm_enable+0x4a>
		status = VL53L1_WaitUs(
 8012cf8:	21fa      	movs	r1, #250	; 0xfa
 8012cfa:	68f8      	ldr	r0, [r7, #12]
 8012cfc:	f002 fdd0 	bl	80158a0 <VL53L1_WaitUs>
 8012d00:	4603      	mov	r3, r0
 8012d02:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 8012d04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d107      	bne.n	8012d1c <VL53L1_nvm_enable+0x62>
		status = VL53L1_WrByte(
 8012d0c:	2201      	movs	r2, #1
 8012d0e:	f240 7181 	movw	r1, #1921	; 0x781
 8012d12:	68f8      	ldr	r0, [r7, #12]
 8012d14:	f002 fcd0 	bl	80156b8 <VL53L1_WrByte>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8012d1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d107      	bne.n	8012d34 <VL53L1_nvm_enable+0x7a>
		status = VL53L1_WrByte(
 8012d24:	2205      	movs	r2, #5
 8012d26:	f240 6183 	movw	r1, #1667	; 0x683
 8012d2a:	68f8      	ldr	r0, [r7, #12]
 8012d2c:	f002 fcc4 	bl	80156b8 <VL53L1_WrByte>
 8012d30:	4603      	mov	r3, r0
 8012d32:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53L1_ERROR_NONE)
 8012d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d105      	bne.n	8012d48 <VL53L1_nvm_enable+0x8e>
		status = VL53L1_WaitUs(
 8012d3c:	6879      	ldr	r1, [r7, #4]
 8012d3e:	68f8      	ldr	r0, [r7, #12]
 8012d40:	f002 fdae 	bl	80158a0 <VL53L1_WaitUs>
 8012d44:	4603      	mov	r3, r0
 8012d46:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53L1_ERROR_NONE)
 8012d48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d107      	bne.n	8012d60 <VL53L1_nvm_enable+0xa6>
		status = VL53L1_WrByte(
 8012d50:	2201      	movs	r2, #1
 8012d52:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8012d56:	68f8      	ldr	r0, [r7, #12]
 8012d58:	f002 fcae 	bl	80156b8 <VL53L1_WrByte>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53L1_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53L1_ERROR_NONE)
 8012d60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d108      	bne.n	8012d7a <VL53L1_nvm_enable+0xc0>
		status = VL53L1_WrWord(
 8012d68:	897b      	ldrh	r3, [r7, #10]
 8012d6a:	461a      	mov	r2, r3
 8012d6c:	f240 7184 	movw	r1, #1924	; 0x784
 8012d70:	68f8      	ldr	r0, [r7, #12]
 8012d72:	f002 fccb 	bl	801570c <VL53L1_WrWord>
 8012d76:	4603      	mov	r3, r0
 8012d78:	75fb      	strb	r3, [r7, #23]
			VL53L1_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 8012d7a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3718      	adds	r7, #24
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}

08012d86 <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 8012d86:	b580      	push	{r7, lr}
 8012d88:	b086      	sub	sp, #24
 8012d8a:	af00      	add	r7, sp, #0
 8012d8c:	60f8      	str	r0, [r7, #12]
 8012d8e:	607b      	str	r3, [r7, #4]
 8012d90:	460b      	mov	r3, r1
 8012d92:	72fb      	strb	r3, [r7, #11]
 8012d94:	4613      	mov	r3, r2
 8012d96:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8012d98:	2300      	movs	r3, #0
 8012d9a:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 8012da0:	7afb      	ldrb	r3, [r7, #11]
 8012da2:	75bb      	strb	r3, [r7, #22]
 8012da4:	e041      	b.n	8012e2a <VL53L1_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53L1_ERROR_NONE)
 8012da6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d108      	bne.n	8012dc0 <VL53L1_nvm_read+0x3a>
			status = VL53L1_WrByte(
 8012dae:	7dbb      	ldrb	r3, [r7, #22]
 8012db0:	461a      	mov	r2, r3
 8012db2:	f240 7194 	movw	r1, #1940	; 0x794
 8012db6:	68f8      	ldr	r0, [r7, #12]
 8012db8:	f002 fc7e 	bl	80156b8 <VL53L1_WrByte>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53L1_ERROR_NONE)
 8012dc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d107      	bne.n	8012dd8 <VL53L1_nvm_read+0x52>
			status = VL53L1_WrByte(
 8012dc8:	2200      	movs	r2, #0
 8012dca:	f240 7183 	movw	r1, #1923	; 0x783
 8012dce:	68f8      	ldr	r0, [r7, #12]
 8012dd0:	f002 fc72 	bl	80156b8 <VL53L1_WrByte>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53L1_ERROR_NONE)
 8012dd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d105      	bne.n	8012dec <VL53L1_nvm_read+0x66>
			status = VL53L1_WaitUs(
 8012de0:	2105      	movs	r1, #5
 8012de2:	68f8      	ldr	r0, [r7, #12]
 8012de4:	f002 fd5c 	bl	80158a0 <VL53L1_WaitUs>
 8012de8:	4603      	mov	r3, r0
 8012dea:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53L1_ERROR_NONE)
 8012dec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d107      	bne.n	8012e04 <VL53L1_nvm_read+0x7e>
			status = VL53L1_WrByte(
 8012df4:	2201      	movs	r2, #1
 8012df6:	f240 7183 	movw	r1, #1923	; 0x783
 8012dfa:	68f8      	ldr	r0, [r7, #12]
 8012dfc:	f002 fc5c 	bl	80156b8 <VL53L1_WrByte>
 8012e00:	4603      	mov	r3, r0
 8012e02:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53L1_ERROR_NONE)
 8012e04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d108      	bne.n	8012e1e <VL53L1_nvm_read+0x98>
			status = VL53L1_ReadMulti(
 8012e0c:	2304      	movs	r3, #4
 8012e0e:	687a      	ldr	r2, [r7, #4]
 8012e10:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8012e14:	68f8      	ldr	r0, [r7, #12]
 8012e16:	f002 fc19 	bl	801564c <VL53L1_ReadMulti>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	3304      	adds	r3, #4
 8012e22:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8012e24:	7dbb      	ldrb	r3, [r7, #22]
 8012e26:	3301      	adds	r3, #1
 8012e28:	75bb      	strb	r3, [r7, #22]
 8012e2a:	7dba      	ldrb	r2, [r7, #22]
 8012e2c:	7af9      	ldrb	r1, [r7, #11]
 8012e2e:	7abb      	ldrb	r3, [r7, #10]
 8012e30:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 8012e32:	429a      	cmp	r2, r3
 8012e34:	dbb7      	blt.n	8012da6 <VL53L1_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 8012e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3718      	adds	r7, #24
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}

08012e42 <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 8012e42:	b580      	push	{r7, lr}
 8012e44:	b084      	sub	sp, #16
 8012e46:	af00      	add	r7, sp, #0
 8012e48:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8012e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d107      	bne.n	8012e66 <VL53L1_nvm_disable+0x24>
		status = VL53L1_WrByte(
 8012e56:	2201      	movs	r2, #1
 8012e58:	f240 7183 	movw	r1, #1923	; 0x783
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f002 fc2b 	bl	80156b8 <VL53L1_WrByte>
 8012e62:	4603      	mov	r3, r0
 8012e64:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8012e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d107      	bne.n	8012e7e <VL53L1_nvm_disable+0x3c>
		status = VL53L1_WrByte(
 8012e6e:	2200      	movs	r2, #0
 8012e70:	f240 7181 	movw	r1, #1921	; 0x781
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	f002 fc1f 	bl	80156b8 <VL53L1_WrByte>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53L1_ERROR_NONE)
 8012e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d104      	bne.n	8012e90 <VL53L1_nvm_disable+0x4e>
		status = VL53L1_disable_powerforce(Dev);
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	f7f9 fac4 	bl	800c414 <VL53L1_disable_powerforce>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	73fb      	strb	r3, [r7, #15]



	if (status == VL53L1_ERROR_NONE)
 8012e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d104      	bne.n	8012ea2 <VL53L1_nvm_disable+0x60>
		status = VL53L1_enable_firmware(Dev);
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f7f9 fa66 	bl	800c36a <VL53L1_enable_firmware>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8012ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	3710      	adds	r7, #16
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	bd80      	pop	{r7, pc}

08012eae <VL53L1_nvm_decode_optical_centre>:

VL53L1_Error VL53L1_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_optical_centre_t    *pdata)
{
 8012eae:	b480      	push	{r7}
 8012eb0:	b087      	sub	sp, #28
 8012eb2:	af00      	add	r7, sp, #0
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	60b9      	str	r1, [r7, #8]
 8012eb8:	607a      	str	r2, [r7, #4]
 8012eba:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53L1_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 8012ec4:	89fb      	ldrh	r3, [r7, #14]
 8012ec6:	2b03      	cmp	r3, #3
 8012ec8:	d802      	bhi.n	8012ed0 <VL53L1_nvm_decode_optical_centre+0x22>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8012eca:	f06f 0308 	mvn.w	r3, #8
 8012ece:	e018      	b.n	8012f02 <VL53L1_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 8012ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ed4:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	3302      	adds	r3, #2
 8012eda:	781b      	ldrb	r3, [r3, #0]
 8012edc:	b29b      	uxth	r3, r3
 8012ede:	8afa      	ldrh	r2, [r7, #22]
 8012ee0:	1ad3      	subs	r3, r2, r3
 8012ee2:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 8012ee4:	8afb      	ldrh	r3, [r7, #22]
 8012ee6:	2bff      	cmp	r3, #255	; 0xff
 8012ee8:	d901      	bls.n	8012eee <VL53L1_nvm_decode_optical_centre+0x40>
		tmp = 0;
 8012eea:	2300      	movs	r3, #0
 8012eec:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 8012eee:	8afb      	ldrh	r3, [r7, #22]
 8012ef0:	b2da      	uxtb	r2, r3
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	78da      	ldrb	r2, [r3, #3]
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	705a      	strb	r2, [r3, #1]

	return status;
 8012efe:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	371c      	adds	r7, #28
 8012f06:	46bd      	mov	sp, r7
 8012f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0c:	4770      	bx	lr

08012f0e <VL53L1_nvm_decode_cal_peak_rate_map>:

VL53L1_Error VL53L1_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_cal_peak_rate_map_t *pdata)
{
 8012f0e:	b590      	push	{r4, r7, lr}
 8012f10:	b087      	sub	sp, #28
 8012f12:	af00      	add	r7, sp, #0
 8012f14:	4603      	mov	r3, r0
 8012f16:	60b9      	str	r1, [r7, #8]
 8012f18:	607a      	str	r2, [r7, #4]
 8012f1a:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 8012f20:	2300      	movs	r3, #0
 8012f22:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 8012f24:	2300      	movs	r3, #0
 8012f26:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 8012f28:	89fb      	ldrh	r3, [r7, #14]
 8012f2a:	2b37      	cmp	r3, #55	; 0x37
 8012f2c:	d802      	bhi.n	8012f34 <VL53L1_nvm_decode_cal_peak_rate_map+0x26>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8012f2e:	f06f 0308 	mvn.w	r3, #8
 8012f32:	e03e      	b.n	8012fb2 <VL53L1_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8012f34:	68b9      	ldr	r1, [r7, #8]
 8012f36:	2002      	movs	r0, #2
 8012f38:	f7f9 f8fd 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	3302      	adds	r3, #2
 8012f48:	4619      	mov	r1, r3
 8012f4a:	2002      	movs	r0, #2
 8012f4c:	f7f9 f8f3 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8012f50:	4603      	mov	r3, r0
 8012f52:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 8012f5c:	099b      	lsrs	r3, r3, #6
 8012f5e:	b29a      	uxth	r2, r3
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2219      	movs	r2, #25
 8012f68:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2205      	movs	r2, #5
 8012f6e:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	2205      	movs	r2, #5
 8012f74:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 8012f76:	68bb      	ldr	r3, [r7, #8]
 8012f78:	3304      	adds	r3, #4
 8012f7a:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	74fb      	strb	r3, [r7, #19]
 8012f80:	e012      	b.n	8012fa8 <VL53L1_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 8012f82:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 8012f84:	6979      	ldr	r1, [r7, #20]
 8012f86:	2002      	movs	r0, #2
 8012f88:	f7f9 f8d5 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 8012f90:	687a      	ldr	r2, [r7, #4]
 8012f92:	1d23      	adds	r3, r4, #4
 8012f94:	005b      	lsls	r3, r3, #1
 8012f96:	4413      	add	r3, r2
 8012f98:	460a      	mov	r2, r1
 8012f9a:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 8012f9c:	697b      	ldr	r3, [r7, #20]
 8012f9e:	3302      	adds	r3, #2
 8012fa0:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8012fa2:	7cfb      	ldrb	r3, [r7, #19]
 8012fa4:	3301      	adds	r3, #1
 8012fa6:	74fb      	strb	r3, [r7, #19]
 8012fa8:	7cfb      	ldrb	r3, [r7, #19]
 8012faa:	2b18      	cmp	r3, #24
 8012fac:	d9e9      	bls.n	8012f82 <VL53L1_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 8012fae:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	371c      	adds	r7, #28
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd90      	pop	{r4, r7, pc}

08012fba <VL53L1_nvm_decode_additional_offset_cal_data>:

VL53L1_Error VL53L1_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_additional_offset_cal_data_t *pdata)
{
 8012fba:	b580      	push	{r7, lr}
 8012fbc:	b086      	sub	sp, #24
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	60b9      	str	r1, [r7, #8]
 8012fc4:	607a      	str	r2, [r7, #4]
 8012fc6:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 8012fcc:	89fb      	ldrh	r3, [r7, #14]
 8012fce:	2b07      	cmp	r3, #7
 8012fd0:	d802      	bhi.n	8012fd8 <VL53L1_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8012fd2:	f06f 0308 	mvn.w	r3, #8
 8012fd6:	e027      	b.n	8013028 <VL53L1_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8012fd8:	68b9      	ldr	r1, [r7, #8]
 8012fda:	2002      	movs	r0, #2
 8012fdc:	f7f9 f8ab 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	3302      	adds	r3, #2
 8012fec:	4619      	mov	r1, r3
 8012fee:	2002      	movs	r0, #2
 8012ff0:	f7f9 f8a1 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	3304      	adds	r3, #4
 8013000:	4619      	mov	r1, r3
 8013002:	2002      	movs	r0, #2
 8013004:	f7f9 f897 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013008:	4603      	mov	r3, r0
 801300a:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	3306      	adds	r3, #6
 8013014:	4619      	mov	r1, r3
 8013016:	2002      	movs	r0, #2
 8013018:	f7f9 f88d 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 801301c:	4603      	mov	r3, r0
 801301e:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	80da      	strh	r2, [r3, #6]

	return status;
 8013024:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013028:	4618      	mov	r0, r3
 801302a:	3718      	adds	r7, #24
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}

08013030 <VL53L1_nvm_decode_fmt_range_results_data>:

VL53L1_Error VL53L1_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b086      	sub	sp, #24
 8013034:	af00      	add	r7, sp, #0
 8013036:	4603      	mov	r3, r0
 8013038:	60b9      	str	r1, [r7, #8]
 801303a:	607a      	str	r2, [r7, #4]
 801303c:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 801303e:	2300      	movs	r3, #0
 8013040:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 8013042:	89fb      	ldrh	r3, [r7, #14]
 8013044:	2b0f      	cmp	r3, #15
 8013046:	d802      	bhi.n	801304e <VL53L1_nvm_decode_fmt_range_results_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8013048:	f06f 0308 	mvn.w	r3, #8
 801304c:	e04d      	b.n	80130ea <VL53L1_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 801304e:	68b9      	ldr	r1, [r7, #8]
 8013050:	2002      	movs	r0, #2
 8013052:	f7f9 f870 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013056:	4603      	mov	r3, r0
 8013058:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 801305e:	68bb      	ldr	r3, [r7, #8]
 8013060:	789a      	ldrb	r2, [r3, #2]
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 8013066:	68bb      	ldr	r3, [r7, #8]
 8013068:	78da      	ldrb	r2, [r3, #3]
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	3304      	adds	r3, #4
 8013072:	4619      	mov	r1, r3
 8013074:	2002      	movs	r0, #2
 8013076:	f7f9 f85e 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 801307a:	4603      	mov	r3, r0
 801307c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8013082:	68bb      	ldr	r3, [r7, #8]
 8013084:	3306      	adds	r3, #6
 8013086:	4619      	mov	r1, r3
 8013088:	2002      	movs	r0, #2
 801308a:	f7f9 f854 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 801308e:	4603      	mov	r3, r0
 8013090:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 8013096:	68bb      	ldr	r3, [r7, #8]
 8013098:	3308      	adds	r3, #8
 801309a:	4619      	mov	r1, r3
 801309c:	2002      	movs	r0, #2
 801309e:	f7f9 f84a 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 80130a2:	4603      	mov	r3, r0
 80130a4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	330a      	adds	r3, #10
 80130ae:	4619      	mov	r1, r3
 80130b0:	2002      	movs	r0, #2
 80130b2:	f7f9 f840 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 80130b6:	4603      	mov	r3, r0
 80130b8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	330c      	adds	r3, #12
 80130c2:	4619      	mov	r1, r3
 80130c4:	2002      	movs	r0, #2
 80130c6:	f7f9 f836 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 80130ca:	4603      	mov	r3, r0
 80130cc:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 80130d2:	68bb      	ldr	r3, [r7, #8]
 80130d4:	330e      	adds	r3, #14
 80130d6:	4619      	mov	r1, r3
 80130d8:	2002      	movs	r0, #2
 80130da:	f7f9 f82c 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 80130de:	4603      	mov	r3, r0
 80130e0:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	81da      	strh	r2, [r3, #14]

	return status;
 80130e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80130ea:	4618      	mov	r0, r3
 80130ec:	3718      	adds	r7, #24
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}

080130f2 <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 80130f2:	b580      	push	{r7, lr}
 80130f4:	b086      	sub	sp, #24
 80130f6:	af00      	add	r7, sp, #0
 80130f8:	60f8      	str	r0, [r7, #12]
 80130fa:	607b      	str	r3, [r7, #4]
 80130fc:	460b      	mov	r3, r1
 80130fe:	72fb      	strb	r3, [r7, #11]
 8013100:	4613      	mov	r3, r2
 8013102:	72bb      	strb	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013104:	2300      	movs	r3, #0
 8013106:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8013108:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d106      	bne.n	801311e <VL53L1_read_nvm_raw_data+0x2c>
		status = VL53L1_nvm_enable(
 8013110:	2232      	movs	r2, #50	; 0x32
 8013112:	2104      	movs	r1, #4
 8013114:	68f8      	ldr	r0, [r7, #12]
 8013116:	f7ff fdd0 	bl	8012cba <VL53L1_nvm_enable>
 801311a:	4603      	mov	r3, r0
 801311c:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 801311e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d107      	bne.n	8013136 <VL53L1_read_nvm_raw_data+0x44>
		status = VL53L1_nvm_read(
 8013126:	7aba      	ldrb	r2, [r7, #10]
 8013128:	7af9      	ldrb	r1, [r7, #11]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	68f8      	ldr	r0, [r7, #12]
 801312e:	f7ff fe2a 	bl	8012d86 <VL53L1_nvm_read>
 8013132:	4603      	mov	r3, r0
 8013134:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53L1_ERROR_NONE)
 8013136:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d104      	bne.n	8013148 <VL53L1_read_nvm_raw_data+0x56>
		status = VL53L1_nvm_disable(Dev);
 801313e:	68f8      	ldr	r0, [r7, #12]
 8013140:	f7ff fe7f 	bl	8012e42 <VL53L1_nvm_disable>
 8013144:	4603      	mov	r3, r0
 8013146:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 8013148:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 801314c:	4618      	mov	r0, r3
 801314e:	3718      	adds	r7, #24
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}

08013154 <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b084      	sub	sp, #16
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
 801315c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801315e:	2300      	movs	r3, #0
 8013160:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8013162:	f107 0308 	add.w	r3, r7, #8
 8013166:	2201      	movs	r2, #1
 8013168:	212e      	movs	r1, #46	; 0x2e
 801316a:	6878      	ldr	r0, [r7, #4]
 801316c:	f7ff ffc1 	bl	80130f2 <VL53L1_read_nvm_raw_data>
 8013170:	4603      	mov	r3, r0
 8013172:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8013174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d108      	bne.n	801318e <VL53L1_read_nvm_optical_centre+0x3a>
		status =
			VL53L1_nvm_decode_optical_centre(
 801317c:	f107 0308 	add.w	r3, r7, #8
 8013180:	683a      	ldr	r2, [r7, #0]
 8013182:	4619      	mov	r1, r3
 8013184:	2004      	movs	r0, #4
 8013186:	f7ff fe92 	bl	8012eae <VL53L1_nvm_decode_optical_centre>
 801318a:	4603      	mov	r3, r0
 801318c:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 801318e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013192:	4618      	mov	r0, r3
 8013194:	3710      	adds	r7, #16
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}

0801319a <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 801319a:	b580      	push	{r7, lr}
 801319c:	b092      	sub	sp, #72	; 0x48
 801319e:	af00      	add	r7, sp, #0
 80131a0:	6078      	str	r0, [r7, #4]
 80131a2:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80131a4:	2300      	movs	r3, #0
 80131a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 80131aa:	f107 030c 	add.w	r3, r7, #12
 80131ae:	220e      	movs	r2, #14
 80131b0:	2157      	movs	r1, #87	; 0x57
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f7ff ff9d 	bl	80130f2 <VL53L1_read_nvm_raw_data>
 80131b8:	4603      	mov	r3, r0
 80131ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80131be:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d109      	bne.n	80131da <VL53L1_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53L1_nvm_decode_cal_peak_rate_map(
 80131c6:	f107 030c 	add.w	r3, r7, #12
 80131ca:	683a      	ldr	r2, [r7, #0]
 80131cc:	4619      	mov	r1, r3
 80131ce:	2038      	movs	r0, #56	; 0x38
 80131d0:	f7ff fe9d 	bl	8012f0e <VL53L1_nvm_decode_cal_peak_rate_map>
 80131d4:	4603      	mov	r3, r0
 80131d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 80131da:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3748      	adds	r7, #72	; 0x48
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}

080131e6 <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 80131e6:	b580      	push	{r7, lr}
 80131e8:	b086      	sub	sp, #24
 80131ea:	af00      	add	r7, sp, #0
 80131ec:	6078      	str	r0, [r7, #4]
 80131ee:	6039      	str	r1, [r7, #0]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80131f0:	2300      	movs	r3, #0
 80131f2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 80131f4:	f107 030c 	add.w	r3, r7, #12
 80131f8:	2202      	movs	r2, #2
 80131fa:	2165      	movs	r1, #101	; 0x65
 80131fc:	6878      	ldr	r0, [r7, #4]
 80131fe:	f7ff ff78 	bl	80130f2 <VL53L1_read_nvm_raw_data>
 8013202:	4603      	mov	r3, r0
 8013204:	75fb      	strb	r3, [r7, #23]
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8013206:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d108      	bne.n	8013220 <VL53L1_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 801320e:	f107 030c 	add.w	r3, r7, #12
 8013212:	683a      	ldr	r2, [r7, #0]
 8013214:	4619      	mov	r1, r3
 8013216:	2008      	movs	r0, #8
 8013218:	f7ff fecf 	bl	8012fba <VL53L1_nvm_decode_additional_offset_cal_data>
 801321c:	4603      	mov	r3, r0
 801321e:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8013220:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8013224:	4618      	mov	r0, r3
 8013226:	3718      	adds	r7, #24
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}

0801322c <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b08a      	sub	sp, #40	; 0x28
 8013230:	af00      	add	r7, sp, #0
 8013232:	60f8      	str	r0, [r7, #12]
 8013234:	460b      	mov	r3, r1
 8013236:	607a      	str	r2, [r7, #4]
 8013238:	817b      	strh	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 801323a:	2300      	movs	r3, #0
 801323c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 8013240:	897b      	ldrh	r3, [r7, #10]
 8013242:	089b      	lsrs	r3, r3, #2
 8013244:	b29b      	uxth	r3, r3
 8013246:	b2d9      	uxtb	r1, r3
 8013248:	f107 0314 	add.w	r3, r7, #20
 801324c:	2204      	movs	r2, #4
 801324e:	68f8      	ldr	r0, [r7, #12]
 8013250:	f7ff ff4f 	bl	80130f2 <VL53L1_read_nvm_raw_data>
 8013254:	4603      	mov	r3, r0
 8013256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 801325a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801325e:	2b00      	cmp	r3, #0
 8013260:	d109      	bne.n	8013276 <VL53L1_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53L1_nvm_decode_fmt_range_results_data(
 8013262:	f107 0314 	add.w	r3, r7, #20
 8013266:	687a      	ldr	r2, [r7, #4]
 8013268:	4619      	mov	r1, r3
 801326a:	2010      	movs	r0, #16
 801326c:	f7ff fee0 	bl	8013030 <VL53L1_nvm_decode_fmt_range_results_data>
 8013270:	4603      	mov	r3, r0
 8013272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 8013276:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 801327a:	4618      	mov	r0, r3
 801327c:	3728      	adds	r7, #40	; 0x28
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}

08013282 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8013282:	b580      	push	{r7, lr}
 8013284:	b086      	sub	sp, #24
 8013286:	af00      	add	r7, sp, #0
 8013288:	60f8      	str	r0, [r7, #12]
 801328a:	460b      	mov	r3, r1
 801328c:	607a      	str	r2, [r7, #4]
 801328e:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013290:	2300      	movs	r3, #0
 8013292:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8013294:	897b      	ldrh	r3, [r7, #10]
 8013296:	2b0a      	cmp	r3, #10
 8013298:	d802      	bhi.n	80132a0 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801329a:	f06f 0309 	mvn.w	r3, #9
 801329e:	e047      	b.n	8013330 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	781b      	ldrb	r3, [r3, #0]
 80132a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132a8:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80132b6:	f002 020f 	and.w	r2, r2, #15
 80132ba:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 80132bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 80132c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80132ca:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80132cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80132d6:	f002 0203 	and.w	r2, r2, #3
 80132da:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80132dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 80132e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80132ea:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80132ec:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	88d8      	ldrh	r0, [r3, #6]
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	3305      	adds	r3, #5
 80132f6:	461a      	mov	r2, r3
 80132f8:	2102      	movs	r1, #2
 80132fa:	f7f8 fef1 	bl	800c0e0 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8013302:	68fa      	ldr	r2, [r7, #12]
 8013304:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8013306:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 801330c:	68fa      	ldr	r2, [r7, #12]
 801330e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8013310:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 801331a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801331e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8013320:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8013326:	68fa      	ldr	r2, [r7, #12]
 8013328:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 801332a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801332c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013330:	4618      	mov	r0, r3
 8013332:	3718      	adds	r7, #24
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}

08013338 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b086      	sub	sp, #24
 801333c:	af00      	add	r7, sp, #0
 801333e:	4603      	mov	r3, r0
 8013340:	60b9      	str	r1, [r7, #8]
 8013342:	607a      	str	r2, [r7, #4]
 8013344:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013346:	2300      	movs	r3, #0
 8013348:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 801334a:	89fb      	ldrh	r3, [r7, #14]
 801334c:	2b0a      	cmp	r3, #10
 801334e:	d802      	bhi.n	8013356 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013350:	f06f 0309 	mvn.w	r3, #9
 8013354:	e046      	b.n	80133e4 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8013356:	68bb      	ldr	r3, [r7, #8]
 8013358:	781b      	ldrb	r3, [r3, #0]
 801335a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801335e:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8013364:	68bb      	ldr	r3, [r7, #8]
 8013366:	3301      	adds	r3, #1
 8013368:	781b      	ldrb	r3, [r3, #0]
 801336a:	f003 030f 	and.w	r3, r3, #15
 801336e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	3302      	adds	r3, #2
 8013378:	781b      	ldrb	r3, [r3, #0]
 801337a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801337e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	3303      	adds	r3, #3
 8013388:	781b      	ldrb	r3, [r3, #0]
 801338a:	f003 0303 	and.w	r3, r3, #3
 801338e:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8013394:	68bb      	ldr	r3, [r7, #8]
 8013396:	3304      	adds	r3, #4
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801339e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	3305      	adds	r3, #5
 80133a8:	4619      	mov	r1, r3
 80133aa:	2002      	movs	r0, #2
 80133ac:	f7f8 fec3 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 80133b0:	4603      	mov	r3, r0
 80133b2:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 80133b8:	68bb      	ldr	r3, [r7, #8]
 80133ba:	79da      	ldrb	r2, [r3, #7]
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 80133c0:	68bb      	ldr	r3, [r7, #8]
 80133c2:	7a1a      	ldrb	r2, [r3, #8]
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	3309      	adds	r3, #9
 80133cc:	781b      	ldrb	r3, [r3, #0]
 80133ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80133d2:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 80133d8:	68bb      	ldr	r3, [r7, #8]
 80133da:	7a9a      	ldrb	r2, [r3, #10]
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 80133e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80133e4:	4618      	mov	r0, r3
 80133e6:	3718      	adds	r7, #24
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}

080133ec <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b086      	sub	sp, #24
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
 80133f4:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80133f6:	2300      	movs	r3, #0
 80133f8:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80133fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d108      	bne.n	8013414 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8013402:	f107 020c 	add.w	r2, r7, #12
 8013406:	230b      	movs	r3, #11
 8013408:	2101      	movs	r1, #1
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f002 f91e 	bl	801564c <VL53L1_ReadMulti>
 8013410:	4603      	mov	r3, r0
 8013412:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8013414:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d108      	bne.n	801342e <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 801341c:	f107 030c 	add.w	r3, r7, #12
 8013420:	683a      	ldr	r2, [r7, #0]
 8013422:	4619      	mov	r1, r3
 8013424:	200b      	movs	r0, #11
 8013426:	f7ff ff87 	bl	8013338 <VL53L1_i2c_decode_static_nvm_managed>
 801342a:	4603      	mov	r3, r0
 801342c:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801342e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013432:	4618      	mov	r0, r3
 8013434:	3718      	adds	r7, #24
 8013436:	46bd      	mov	sp, r7
 8013438:	bd80      	pop	{r7, pc}

0801343a <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801343a:	b580      	push	{r7, lr}
 801343c:	b086      	sub	sp, #24
 801343e:	af00      	add	r7, sp, #0
 8013440:	60f8      	str	r0, [r7, #12]
 8013442:	460b      	mov	r3, r1
 8013444:	607a      	str	r2, [r7, #4]
 8013446:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013448:	2300      	movs	r3, #0
 801344a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 801344c:	897b      	ldrh	r3, [r7, #10]
 801344e:	2b16      	cmp	r3, #22
 8013450:	d802      	bhi.n	8013458 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013452:	f06f 0309 	mvn.w	r3, #9
 8013456:	e076      	b.n	8013546 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8013464:	68fa      	ldr	r2, [r7, #12]
 8013466:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8013468:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 801346e:	68fa      	ldr	r2, [r7, #12]
 8013470:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8013472:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8013478:	68fa      	ldr	r2, [r7, #12]
 801347a:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 801347c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8013482:	68fa      	ldr	r2, [r7, #12]
 8013484:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8013486:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8013490:	f002 020f 	and.w	r2, r2, #15
 8013494:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8013496:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 801349c:	68fa      	ldr	r2, [r7, #12]
 801349e:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 80134a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80134aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80134ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80134b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 80134ba:	f002 0203 	and.w	r2, r2, #3
 80134be:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80134c0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	8958      	ldrh	r0, [r3, #10]
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	3309      	adds	r3, #9
 80134ca:	461a      	mov	r2, r3
 80134cc:	2102      	movs	r1, #2
 80134ce:	f7f8 fe07 	bl	800c0e0 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	330b      	adds	r3, #11
 80134dc:	461a      	mov	r2, r3
 80134de:	2102      	movs	r1, #2
 80134e0:	f7f8 fe49 	bl	800c176 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	330d      	adds	r3, #13
 80134ee:	461a      	mov	r2, r3
 80134f0:	2102      	movs	r1, #2
 80134f2:	f7f8 fe40 	bl	800c176 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	8a18      	ldrh	r0, [r3, #16]
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	330f      	adds	r3, #15
 80134fe:	461a      	mov	r2, r3
 8013500:	2102      	movs	r1, #2
 8013502:	f7f8 fded 	bl	800c0e0 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 801350c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013510:	b218      	sxth	r0, r3
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	3311      	adds	r3, #17
 8013516:	461a      	mov	r2, r3
 8013518:	2102      	movs	r1, #2
 801351a:	f7f8 fe2c 	bl	800c176 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	3313      	adds	r3, #19
 8013528:	461a      	mov	r2, r3
 801352a:	2102      	movs	r1, #2
 801352c:	f7f8 fe23 	bl	800c176 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	3315      	adds	r3, #21
 801353a:	461a      	mov	r2, r3
 801353c:	2102      	movs	r1, #2
 801353e:	f7f8 fe1a 	bl	800c176 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8013542:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013546:	4618      	mov	r0, r3
 8013548:	3718      	adds	r7, #24
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}

0801354e <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 801354e:	b580      	push	{r7, lr}
 8013550:	b086      	sub	sp, #24
 8013552:	af00      	add	r7, sp, #0
 8013554:	4603      	mov	r3, r0
 8013556:	60b9      	str	r1, [r7, #8]
 8013558:	607a      	str	r2, [r7, #4]
 801355a:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801355c:	2300      	movs	r3, #0
 801355e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8013560:	89fb      	ldrh	r3, [r7, #14]
 8013562:	2b16      	cmp	r3, #22
 8013564:	d802      	bhi.n	801356c <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013566:	f06f 0309 	mvn.w	r3, #9
 801356a:	e079      	b.n	8013660 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	785a      	ldrb	r2, [r3, #1]
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	789a      	ldrb	r2, [r3, #2]
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8013584:	68bb      	ldr	r3, [r7, #8]
 8013586:	78da      	ldrb	r2, [r3, #3]
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	791a      	ldrb	r2, [r3, #4]
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	3305      	adds	r3, #5
 8013598:	781b      	ldrb	r3, [r3, #0]
 801359a:	f003 030f 	and.w	r3, r3, #15
 801359e:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	799a      	ldrb	r2, [r3, #6]
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	3307      	adds	r3, #7
 80135b0:	781b      	ldrb	r3, [r3, #0]
 80135b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80135b6:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	3308      	adds	r3, #8
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	f003 0303 	and.w	r3, r3, #3
 80135c6:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	3309      	adds	r3, #9
 80135d0:	4619      	mov	r1, r3
 80135d2:	2002      	movs	r0, #2
 80135d4:	f7f8 fdaf 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 80135d8:	4603      	mov	r3, r0
 80135da:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	330b      	adds	r3, #11
 80135e4:	4619      	mov	r1, r3
 80135e6:	2002      	movs	r0, #2
 80135e8:	f7f8 fdf1 	bl	800c1ce <VL53L1_i2c_decode_int16_t>
 80135ec:	4603      	mov	r3, r0
 80135ee:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	330d      	adds	r3, #13
 80135f8:	4619      	mov	r1, r3
 80135fa:	2002      	movs	r0, #2
 80135fc:	f7f8 fde7 	bl	800c1ce <VL53L1_i2c_decode_int16_t>
 8013600:	4603      	mov	r3, r0
 8013602:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	330f      	adds	r3, #15
 801360c:	4619      	mov	r1, r3
 801360e:	2002      	movs	r0, #2
 8013610:	f7f8 fd91 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013614:	4603      	mov	r3, r0
 8013616:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	3311      	adds	r3, #17
 8013620:	4619      	mov	r1, r3
 8013622:	2002      	movs	r0, #2
 8013624:	f7f8 fdd3 	bl	800c1ce <VL53L1_i2c_decode_int16_t>
 8013628:	4603      	mov	r3, r0
 801362a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801362e:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	3313      	adds	r3, #19
 8013638:	4619      	mov	r1, r3
 801363a:	2002      	movs	r0, #2
 801363c:	f7f8 fdc7 	bl	800c1ce <VL53L1_i2c_decode_int16_t>
 8013640:	4603      	mov	r3, r0
 8013642:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	3315      	adds	r3, #21
 801364c:	4619      	mov	r1, r3
 801364e:	2002      	movs	r0, #2
 8013650:	f7f8 fdbd 	bl	800c1ce <VL53L1_i2c_decode_int16_t>
 8013654:	4603      	mov	r3, r0
 8013656:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 801365c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013660:	4618      	mov	r0, r3
 8013662:	3718      	adds	r7, #24
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b088      	sub	sp, #32
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013672:	2300      	movs	r3, #0
 8013674:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8013676:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d108      	bne.n	8013690 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 801367e:	f107 0208 	add.w	r2, r7, #8
 8013682:	2317      	movs	r3, #23
 8013684:	210d      	movs	r1, #13
 8013686:	6878      	ldr	r0, [r7, #4]
 8013688:	f001 ffe0 	bl	801564c <VL53L1_ReadMulti>
 801368c:	4603      	mov	r3, r0
 801368e:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8013690:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d108      	bne.n	80136aa <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8013698:	f107 0308 	add.w	r3, r7, #8
 801369c:	683a      	ldr	r2, [r7, #0]
 801369e:	4619      	mov	r1, r3
 80136a0:	2017      	movs	r0, #23
 80136a2:	f7ff ff54 	bl	801354e <VL53L1_i2c_decode_customer_nvm_managed>
 80136a6:	4603      	mov	r3, r0
 80136a8:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80136aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3720      	adds	r7, #32
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}

080136b6 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80136b6:	b580      	push	{r7, lr}
 80136b8:	b086      	sub	sp, #24
 80136ba:	af00      	add	r7, sp, #0
 80136bc:	60f8      	str	r0, [r7, #12]
 80136be:	460b      	mov	r3, r1
 80136c0:	607a      	str	r2, [r7, #4]
 80136c2:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80136c4:	2300      	movs	r3, #0
 80136c6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 80136c8:	897b      	ldrh	r3, [r7, #10]
 80136ca:	2b1f      	cmp	r3, #31
 80136cc:	d802      	bhi.n	80136d4 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80136ce:	f06f 0309 	mvn.w	r3, #9
 80136d2:	e0cf      	b.n	8013874 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	881b      	ldrh	r3, [r3, #0]
 80136d8:	687a      	ldr	r2, [r7, #4]
 80136da:	2102      	movs	r1, #2
 80136dc:	4618      	mov	r0, r3
 80136de:	f7f8 fcff 	bl	800c0e0 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 80136ea:	f002 0201 	and.w	r2, r2, #1
 80136ee:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80136f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 80136fa:	f002 020f 	and.w	r2, r2, #15
 80136fe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8013700:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 801370a:	f002 020f 	and.w	r2, r2, #15
 801370e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8013710:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 801371a:	f002 021f 	and.w	r2, r2, #31
 801371e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8013720:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 801372a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801372e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8013730:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 801373a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801373e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8013740:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 801374a:	f002 0201 	and.w	r2, r2, #1
 801374e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8013750:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8013756:	68fa      	ldr	r2, [r7, #12]
 8013758:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 801375a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8013764:	f002 0201 	and.w	r2, r2, #1
 8013768:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 801376a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8013774:	f002 0203 	and.w	r2, r2, #3
 8013778:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 801377a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8013784:	f002 021f 	and.w	r2, r2, #31
 8013788:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 801378a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8013794:	f002 0203 	and.w	r2, r2, #3
 8013798:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 801379a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 80137a4:	f002 0203 	and.w	r2, r2, #3
 80137a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 80137aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 80137b4:	f002 0207 	and.w	r2, r2, #7
 80137b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 80137ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 80137c4:	f002 021f 	and.w	r2, r2, #31
 80137c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 80137ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 80137d4:	f002 0201 	and.w	r2, r2, #1
 80137d8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 80137da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 80137e0:	68fa      	ldr	r2, [r7, #12]
 80137e2:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80137e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 80137ea:	68fa      	ldr	r2, [r7, #12]
 80137ec:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80137ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 80137f4:	68fa      	ldr	r2, [r7, #12]
 80137f6:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80137f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 80137fe:	68fa      	ldr	r2, [r7, #12]
 8013800:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8013802:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8013808:	68fa      	ldr	r2, [r7, #12]
 801380a:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 801380c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8013812:	68fa      	ldr	r2, [r7, #12]
 8013814:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8013816:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	8b18      	ldrh	r0, [r3, #24]
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	3318      	adds	r3, #24
 8013820:	461a      	mov	r2, r3
 8013822:	2102      	movs	r1, #2
 8013824:	f7f8 fc5c 	bl	800c0e0 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 801382c:	68fa      	ldr	r2, [r7, #12]
 801382e:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8013830:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8013836:	68fa      	ldr	r2, [r7, #12]
 8013838:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 801383a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8013844:	f002 020f 	and.w	r2, r2, #15
 8013848:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 801384a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8013850:	68fa      	ldr	r2, [r7, #12]
 8013852:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8013854:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 801385e:	f002 020f 	and.w	r2, r2, #15
 8013862:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8013864:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 801386a:	68fa      	ldr	r2, [r7, #12]
 801386c:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 801386e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8013870:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013874:	4618      	mov	r0, r3
 8013876:	3718      	adds	r7, #24
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}

0801387c <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b086      	sub	sp, #24
 8013880:	af00      	add	r7, sp, #0
 8013882:	60f8      	str	r0, [r7, #12]
 8013884:	460b      	mov	r3, r1
 8013886:	607a      	str	r2, [r7, #4]
 8013888:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801388a:	2300      	movs	r3, #0
 801388c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 801388e:	897b      	ldrh	r3, [r7, #10]
 8013890:	2b15      	cmp	r3, #21
 8013892:	d802      	bhi.n	801389a <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013894:	f06f 0309 	mvn.w	r3, #9
 8013898:	e070      	b.n	801397c <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 80138a6:	68fa      	ldr	r2, [r7, #12]
 80138a8:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80138aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 80138b0:	68fa      	ldr	r2, [r7, #12]
 80138b2:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80138b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 80138be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80138c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80138c4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 80138ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80138ce:	b298      	uxth	r0, r3
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	3304      	adds	r3, #4
 80138d4:	461a      	mov	r2, r3
 80138d6:	2102      	movs	r1, #2
 80138d8:	f7f8 fc02 	bl	800c0e0 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 80138e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80138e8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80138ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 80138f0:	68fa      	ldr	r2, [r7, #12]
 80138f2:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 80138f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 80138fa:	68fa      	ldr	r2, [r7, #12]
 80138fc:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 80138fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8013908:	f002 0201 	and.w	r2, r2, #1
 801390c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 801390e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8013918:	f002 0207 	and.w	r2, r2, #7
 801391c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 801391e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	8998      	ldrh	r0, [r3, #12]
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	330c      	adds	r3, #12
 8013928:	461a      	mov	r2, r3
 801392a:	2102      	movs	r1, #2
 801392c:	f7f8 fbd8 	bl	800c0e0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	89d8      	ldrh	r0, [r3, #14]
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	330e      	adds	r3, #14
 8013938:	461a      	mov	r2, r3
 801393a:	2102      	movs	r1, #2
 801393c:	f7f8 fbd0 	bl	800c0e0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	8a18      	ldrh	r0, [r3, #16]
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	3310      	adds	r3, #16
 8013948:	461a      	mov	r2, r3
 801394a:	2102      	movs	r1, #2
 801394c:	f7f8 fbc8 	bl	800c0e0 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8013954:	68fa      	ldr	r2, [r7, #12]
 8013956:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8013958:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 801395e:	68fa      	ldr	r2, [r7, #12]
 8013960:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8013962:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8013968:	68fa      	ldr	r2, [r7, #12]
 801396a:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 801396c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8013972:	68fa      	ldr	r2, [r7, #12]
 8013974:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8013976:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8013978:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801397c:	4618      	mov	r0, r3
 801397e:	3718      	adds	r7, #24
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}

08013984 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b086      	sub	sp, #24
 8013988:	af00      	add	r7, sp, #0
 801398a:	60f8      	str	r0, [r7, #12]
 801398c:	460b      	mov	r3, r1
 801398e:	607a      	str	r2, [r7, #4]
 8013990:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013992:	2300      	movs	r3, #0
 8013994:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 8013996:	897b      	ldrh	r3, [r7, #10]
 8013998:	2b16      	cmp	r3, #22
 801399a:	d802      	bhi.n	80139a2 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801399c:	f06f 0309 	mvn.w	r3, #9
 80139a0:	e06e      	b.n	8013a80 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	781b      	ldrb	r3, [r3, #0]
 80139a6:	f003 030f 	and.w	r3, r3, #15
 80139aa:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 80139b4:	68fa      	ldr	r2, [r7, #12]
 80139b6:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80139b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80139c2:	f002 020f 	and.w	r2, r2, #15
 80139c6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80139c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 80139ce:	68fa      	ldr	r2, [r7, #12]
 80139d0:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80139d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80139dc:	f002 020f 	and.w	r2, r2, #15
 80139e0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80139e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 80139e8:	68fa      	ldr	r2, [r7, #12]
 80139ea:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 80139ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 80139f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80139fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80139fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8013a06:	f002 020f 	and.w	r2, r2, #15
 8013a0a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8013a0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8013a12:	68fa      	ldr	r2, [r7, #12]
 8013a14:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8013a16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8013a20:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8013a24:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8013a26:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	8958      	ldrh	r0, [r3, #10]
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	330a      	adds	r3, #10
 8013a30:	461a      	mov	r2, r3
 8013a32:	2102      	movs	r1, #2
 8013a34:	f7f8 fb54 	bl	800c0e0 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	8998      	ldrh	r0, [r3, #12]
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	330c      	adds	r3, #12
 8013a40:	461a      	mov	r2, r3
 8013a42:	2102      	movs	r1, #2
 8013a44:	f7f8 fb4c 	bl	800c0e0 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8013a4c:	68fa      	ldr	r2, [r7, #12]
 8013a4e:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8013a50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8013a56:	68fa      	ldr	r2, [r7, #12]
 8013a58:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8013a5a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	6918      	ldr	r0, [r3, #16]
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	3312      	adds	r3, #18
 8013a64:	461a      	mov	r2, r3
 8013a66:	2104      	movs	r1, #4
 8013a68:	f7f8 fbda 	bl	800c220 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8013a74:	f002 0201 	and.w	r2, r2, #1
 8013a78:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8013a7a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8013a7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013a80:	4618      	mov	r0, r3
 8013a82:	3718      	adds	r7, #24
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}

08013a88 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b086      	sub	sp, #24
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	60f8      	str	r0, [r7, #12]
 8013a90:	460b      	mov	r3, r1
 8013a92:	607a      	str	r2, [r7, #4]
 8013a94:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013a96:	2300      	movs	r3, #0
 8013a98:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8013a9a:	897b      	ldrh	r3, [r7, #10]
 8013a9c:	2b11      	cmp	r3, #17
 8013a9e:	d802      	bhi.n	8013aa6 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013aa0:	f06f 0309 	mvn.w	r3, #9
 8013aa4:	e071      	b.n	8013b8a <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	781b      	ldrb	r3, [r3, #0]
 8013aaa:	f003 0303 	and.w	r3, r3, #3
 8013aae:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	8858      	ldrh	r0, [r3, #2]
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	3301      	adds	r3, #1
 8013abc:	461a      	mov	r2, r3
 8013abe:	2102      	movs	r1, #2
 8013ac0:	f7f8 fb0e 	bl	800c0e0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	8898      	ldrh	r0, [r3, #4]
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	3303      	adds	r3, #3
 8013acc:	461a      	mov	r2, r3
 8013ace:	2102      	movs	r1, #2
 8013ad0:	f7f8 fb06 	bl	800c0e0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8013adc:	f002 0201 	and.w	r2, r2, #1
 8013ae0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8013ae2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8013aec:	f002 0207 	and.w	r2, r2, #7
 8013af0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8013af2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8013af8:	68fa      	ldr	r2, [r7, #12]
 8013afa:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8013afc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8013b02:	68fa      	ldr	r2, [r7, #12]
 8013b04:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8013b06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8013b10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013b14:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8013b16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8013b20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013b24:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8013b26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8013b30:	f002 0203 	and.w	r2, r2, #3
 8013b34:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8013b36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8013b40:	f002 0203 	and.w	r2, r2, #3
 8013b44:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8013b46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8013b50:	f002 020f 	and.w	r2, r2, #15
 8013b54:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8013b56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8013b5c:	68fa      	ldr	r2, [r7, #12]
 8013b5e:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8013b60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8013b66:	68fa      	ldr	r2, [r7, #12]
 8013b68:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8013b6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8013b70:	68fa      	ldr	r2, [r7, #12]
 8013b72:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8013b74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8013b7e:	f002 0203 	and.w	r2, r2, #3
 8013b82:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8013b84:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8013b86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3718      	adds	r7, #24
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}

08013b92 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8013b92:	b480      	push	{r7}
 8013b94:	b087      	sub	sp, #28
 8013b96:	af00      	add	r7, sp, #0
 8013b98:	60f8      	str	r0, [r7, #12]
 8013b9a:	460b      	mov	r3, r1
 8013b9c:	607a      	str	r2, [r7, #4]
 8013b9e:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8013ba4:	897b      	ldrh	r3, [r7, #10]
 8013ba6:	2b04      	cmp	r3, #4
 8013ba8:	d802      	bhi.n	8013bb0 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013baa:	f06f 0309 	mvn.w	r3, #9
 8013bae:	e025      	b.n	8013bfc <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	f003 0301 	and.w	r3, r3, #1
 8013bb8:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8013bc6:	f002 0201 	and.w	r2, r2, #1
 8013bca:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8013bcc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8013bd6:	f002 0201 	and.w	r2, r2, #1
 8013bda:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8013bdc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8013be6:	f002 0203 	and.w	r2, r2, #3
 8013bea:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8013bec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8013bf2:	68fa      	ldr	r2, [r7, #12]
 8013bf4:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8013bf6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8013bf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	371c      	adds	r7, #28
 8013c00:	46bd      	mov	sp, r7
 8013c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c06:	4770      	bx	lr

08013c08 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b084      	sub	sp, #16
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
 8013c10:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013c12:	2300      	movs	r3, #0
 8013c14:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8013c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d108      	bne.n	8013c30 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 8013c1e:	f107 0308 	add.w	r3, r7, #8
 8013c22:	461a      	mov	r2, r3
 8013c24:	2105      	movs	r1, #5
 8013c26:	6838      	ldr	r0, [r7, #0]
 8013c28:	f7ff ffb3 	bl	8013b92 <VL53L1_i2c_encode_system_control>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8013c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d108      	bne.n	8013c4a <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8013c38:	f107 0208 	add.w	r2, r7, #8
 8013c3c:	2305      	movs	r3, #5
 8013c3e:	2183      	movs	r1, #131	; 0x83
 8013c40:	6878      	ldr	r0, [r7, #4]
 8013c42:	f001 fccd 	bl	80155e0 <VL53L1_WriteMulti>
 8013c46:	4603      	mov	r3, r0
 8013c48:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8013c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013c4e:	4618      	mov	r0, r3
 8013c50:	3710      	adds	r7, #16
 8013c52:	46bd      	mov	sp, r7
 8013c54:	bd80      	pop	{r7, pc}

08013c56 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8013c56:	b580      	push	{r7, lr}
 8013c58:	b086      	sub	sp, #24
 8013c5a:	af00      	add	r7, sp, #0
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	60b9      	str	r1, [r7, #8]
 8013c60:	607a      	str	r2, [r7, #4]
 8013c62:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013c64:	2300      	movs	r3, #0
 8013c66:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8013c68:	89fb      	ldrh	r3, [r7, #14]
 8013c6a:	2b2b      	cmp	r3, #43	; 0x2b
 8013c6c:	d802      	bhi.n	8013c74 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013c6e:	f06f 0309 	mvn.w	r3, #9
 8013c72:	e0e2      	b.n	8013e3a <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8013c74:	68bb      	ldr	r3, [r7, #8]
 8013c76:	781b      	ldrb	r3, [r3, #0]
 8013c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013c7c:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8013c82:	68bb      	ldr	r3, [r7, #8]
 8013c84:	785a      	ldrb	r2, [r3, #1]
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	3302      	adds	r3, #2
 8013c8e:	781b      	ldrb	r3, [r3, #0]
 8013c90:	f003 030f 	and.w	r3, r3, #15
 8013c94:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8013c9a:	68bb      	ldr	r3, [r7, #8]
 8013c9c:	78da      	ldrb	r2, [r3, #3]
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	3304      	adds	r3, #4
 8013ca6:	4619      	mov	r1, r3
 8013ca8:	2002      	movs	r0, #2
 8013caa:	f7f8 fa44 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	3306      	adds	r3, #6
 8013cba:	4619      	mov	r1, r3
 8013cbc:	2002      	movs	r0, #2
 8013cbe:	f7f8 fa3a 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	3308      	adds	r3, #8
 8013cce:	4619      	mov	r1, r3
 8013cd0:	2002      	movs	r0, #2
 8013cd2:	f7f8 fa30 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	330a      	adds	r3, #10
 8013ce2:	4619      	mov	r1, r3
 8013ce4:	2002      	movs	r0, #2
 8013ce6:	f7f8 fa26 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013cea:	4603      	mov	r3, r0
 8013cec:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	330c      	adds	r3, #12
 8013cf6:	4619      	mov	r1, r3
 8013cf8:	2002      	movs	r0, #2
 8013cfa:	f7f8 fa1c 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8013d06:	68bb      	ldr	r3, [r7, #8]
 8013d08:	330e      	adds	r3, #14
 8013d0a:	4619      	mov	r1, r3
 8013d0c:	2002      	movs	r0, #2
 8013d0e:	f7f8 fa12 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013d12:	4603      	mov	r3, r0
 8013d14:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	3310      	adds	r3, #16
 8013d1e:	4619      	mov	r1, r3
 8013d20:	2002      	movs	r0, #2
 8013d22:	f7f8 fa08 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013d26:	4603      	mov	r3, r0
 8013d28:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	3312      	adds	r3, #18
 8013d32:	4619      	mov	r1, r3
 8013d34:	2002      	movs	r0, #2
 8013d36:	f7f8 f9fe 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8013d42:	68bb      	ldr	r3, [r7, #8]
 8013d44:	3314      	adds	r3, #20
 8013d46:	4619      	mov	r1, r3
 8013d48:	2002      	movs	r0, #2
 8013d4a:	f7f8 f9f4 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8013d56:	68bb      	ldr	r3, [r7, #8]
 8013d58:	3316      	adds	r3, #22
 8013d5a:	4619      	mov	r1, r3
 8013d5c:	2002      	movs	r0, #2
 8013d5e:	f7f8 f9ea 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013d62:	4603      	mov	r3, r0
 8013d64:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8013d6a:	68bb      	ldr	r3, [r7, #8]
 8013d6c:	3318      	adds	r3, #24
 8013d6e:	4619      	mov	r1, r3
 8013d70:	2002      	movs	r0, #2
 8013d72:	f7f8 f9e0 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013d76:	4603      	mov	r3, r0
 8013d78:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8013d7e:	68bb      	ldr	r3, [r7, #8]
 8013d80:	331a      	adds	r3, #26
 8013d82:	4619      	mov	r1, r3
 8013d84:	2002      	movs	r0, #2
 8013d86:	f7f8 f9d6 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8013d92:	68bb      	ldr	r3, [r7, #8]
 8013d94:	331c      	adds	r3, #28
 8013d96:	4619      	mov	r1, r3
 8013d98:	2002      	movs	r0, #2
 8013d9a:	f7f8 f9cc 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	331e      	adds	r3, #30
 8013daa:	4619      	mov	r1, r3
 8013dac:	2002      	movs	r0, #2
 8013dae:	f7f8 f9c2 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013db2:	4603      	mov	r3, r0
 8013db4:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8013dba:	68bb      	ldr	r3, [r7, #8]
 8013dbc:	3320      	adds	r3, #32
 8013dbe:	4619      	mov	r1, r3
 8013dc0:	2002      	movs	r0, #2
 8013dc2:	f7f8 f9b8 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8013dce:	68bb      	ldr	r3, [r7, #8]
 8013dd0:	3322      	adds	r3, #34	; 0x22
 8013dd2:	4619      	mov	r1, r3
 8013dd4:	2002      	movs	r0, #2
 8013dd6:	f7f8 f9ae 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	3324      	adds	r3, #36	; 0x24
 8013de6:	4619      	mov	r1, r3
 8013de8:	2002      	movs	r0, #2
 8013dea:	f7f8 f9a4 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013dee:	4603      	mov	r3, r0
 8013df0:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8013df6:	68bb      	ldr	r3, [r7, #8]
 8013df8:	3326      	adds	r3, #38	; 0x26
 8013dfa:	4619      	mov	r1, r3
 8013dfc:	2002      	movs	r0, #2
 8013dfe:	f7f8 f99a 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013e02:	4603      	mov	r3, r0
 8013e04:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	3328      	adds	r3, #40	; 0x28
 8013e0e:	4619      	mov	r1, r3
 8013e10:	2002      	movs	r0, #2
 8013e12:	f7f8 f990 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013e16:	4603      	mov	r3, r0
 8013e18:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8013e1e:	68bb      	ldr	r3, [r7, #8]
 8013e20:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8013e2a:	68bb      	ldr	r3, [r7, #8]
 8013e2c:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8013e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	3718      	adds	r7, #24
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	bd80      	pop	{r7, pc}

08013e42 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8013e42:	b580      	push	{r7, lr}
 8013e44:	b086      	sub	sp, #24
 8013e46:	af00      	add	r7, sp, #0
 8013e48:	4603      	mov	r3, r0
 8013e4a:	60b9      	str	r1, [r7, #8]
 8013e4c:	607a      	str	r2, [r7, #4]
 8013e4e:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013e50:	2300      	movs	r3, #0
 8013e52:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 8013e54:	89fb      	ldrh	r3, [r7, #14]
 8013e56:	2b20      	cmp	r3, #32
 8013e58:	d802      	bhi.n	8013e60 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013e5a:	f06f 0309 	mvn.w	r3, #9
 8013e5e:	e04d      	b.n	8013efc <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8013e60:	68b9      	ldr	r1, [r7, #8]
 8013e62:	2004      	movs	r0, #4
 8013e64:	f7f8 fa06 	bl	800c274 <VL53L1_i2c_decode_uint32_t>
 8013e68:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8013e6e:	68bb      	ldr	r3, [r7, #8]
 8013e70:	3304      	adds	r3, #4
 8013e72:	4619      	mov	r1, r3
 8013e74:	2004      	movs	r0, #4
 8013e76:	f7f8 f9fd 	bl	800c274 <VL53L1_i2c_decode_uint32_t>
 8013e7a:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	3308      	adds	r3, #8
 8013e84:	4619      	mov	r1, r3
 8013e86:	2004      	movs	r0, #4
 8013e88:	f7f8 fa11 	bl	800c2ae <VL53L1_i2c_decode_int32_t>
 8013e8c:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	330c      	adds	r3, #12
 8013e96:	4619      	mov	r1, r3
 8013e98:	2004      	movs	r0, #4
 8013e9a:	f7f8 f9eb 	bl	800c274 <VL53L1_i2c_decode_uint32_t>
 8013e9e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8013ea4:	68bb      	ldr	r3, [r7, #8]
 8013ea6:	3310      	adds	r3, #16
 8013ea8:	4619      	mov	r1, r3
 8013eaa:	2004      	movs	r0, #4
 8013eac:	f7f8 f9e2 	bl	800c274 <VL53L1_i2c_decode_uint32_t>
 8013eb0:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	3314      	adds	r3, #20
 8013eba:	4619      	mov	r1, r3
 8013ebc:	2004      	movs	r0, #4
 8013ebe:	f7f8 f9d9 	bl	800c274 <VL53L1_i2c_decode_uint32_t>
 8013ec2:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8013ec8:	68bb      	ldr	r3, [r7, #8]
 8013eca:	3318      	adds	r3, #24
 8013ecc:	4619      	mov	r1, r3
 8013ece:	2004      	movs	r0, #4
 8013ed0:	f7f8 f9ed 	bl	800c2ae <VL53L1_i2c_decode_int32_t>
 8013ed4:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8013eda:	68bb      	ldr	r3, [r7, #8]
 8013edc:	331c      	adds	r3, #28
 8013ede:	4619      	mov	r1, r3
 8013ee0:	2004      	movs	r0, #4
 8013ee2:	f7f8 f9c7 	bl	800c274 <VL53L1_i2c_decode_uint32_t>
 8013ee6:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	f893 2020 	ldrb.w	r2, [r3, #32]
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8013ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013efc:	4618      	mov	r0, r3
 8013efe:	3718      	adds	r7, #24
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}

08013f04 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b086      	sub	sp, #24
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	60b9      	str	r1, [r7, #8]
 8013f0e:	607a      	str	r2, [r7, #4]
 8013f10:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013f12:	2300      	movs	r3, #0
 8013f14:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8013f16:	89fb      	ldrh	r3, [r7, #14]
 8013f18:	2b37      	cmp	r3, #55	; 0x37
 8013f1a:	d802      	bhi.n	8013f22 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013f1c:	f06f 0309 	mvn.w	r3, #9
 8013f20:	e15e      	b.n	80141e0 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8013f22:	68b9      	ldr	r1, [r7, #8]
 8013f24:	2002      	movs	r0, #2
 8013f26:	f7f8 f906 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	3302      	adds	r3, #2
 8013f36:	781b      	ldrb	r3, [r3, #0]
 8013f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f3c:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8013f42:	68bb      	ldr	r3, [r7, #8]
 8013f44:	3303      	adds	r3, #3
 8013f46:	781b      	ldrb	r3, [r3, #0]
 8013f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013f4c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8013f52:	68bb      	ldr	r3, [r7, #8]
 8013f54:	3304      	adds	r3, #4
 8013f56:	781b      	ldrb	r3, [r3, #0]
 8013f58:	f003 0303 	and.w	r3, r3, #3
 8013f5c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8013f62:	68bb      	ldr	r3, [r7, #8]
 8013f64:	3305      	adds	r3, #5
 8013f66:	781b      	ldrb	r3, [r3, #0]
 8013f68:	f003 0301 	and.w	r3, r3, #1
 8013f6c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	3306      	adds	r3, #6
 8013f76:	781b      	ldrb	r3, [r3, #0]
 8013f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013f7c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8013f82:	68bb      	ldr	r3, [r7, #8]
 8013f84:	3307      	adds	r3, #7
 8013f86:	781b      	ldrb	r3, [r3, #0]
 8013f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013f8c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8013f92:	68bb      	ldr	r3, [r7, #8]
 8013f94:	3308      	adds	r3, #8
 8013f96:	4619      	mov	r1, r3
 8013f98:	2002      	movs	r0, #2
 8013f9a:	f7f8 f8cc 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013fa4:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	330a      	adds	r3, #10
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	f003 0303 	and.w	r3, r3, #3
 8013fb4:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	330b      	adds	r3, #11
 8013fbe:	781b      	ldrb	r3, [r3, #0]
 8013fc0:	f003 0303 	and.w	r3, r3, #3
 8013fc4:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	330c      	adds	r3, #12
 8013fce:	781b      	ldrb	r3, [r3, #0]
 8013fd0:	f003 030f 	and.w	r3, r3, #15
 8013fd4:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	330d      	adds	r3, #13
 8013fde:	781b      	ldrb	r3, [r3, #0]
 8013fe0:	f003 0307 	and.w	r3, r3, #7
 8013fe4:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8013fea:	68bb      	ldr	r3, [r7, #8]
 8013fec:	330e      	adds	r3, #14
 8013fee:	781b      	ldrb	r3, [r3, #0]
 8013ff0:	f003 0301 	and.w	r3, r3, #1
 8013ff4:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	330f      	adds	r3, #15
 8013ffe:	781b      	ldrb	r3, [r3, #0]
 8014000:	f003 0303 	and.w	r3, r3, #3
 8014004:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	7c1a      	ldrb	r2, [r3, #16]
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	7c5a      	ldrb	r2, [r3, #17]
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	3312      	adds	r3, #18
 801401e:	4619      	mov	r1, r3
 8014020:	2002      	movs	r0, #2
 8014022:	f7f8 f888 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8014026:	4603      	mov	r3, r0
 8014028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801402c:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8014032:	68bb      	ldr	r3, [r7, #8]
 8014034:	3316      	adds	r3, #22
 8014036:	4619      	mov	r1, r3
 8014038:	2002      	movs	r0, #2
 801403a:	f7f8 f87c 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 801403e:	4603      	mov	r3, r0
 8014040:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8014046:	68bb      	ldr	r3, [r7, #8]
 8014048:	3318      	adds	r3, #24
 801404a:	4619      	mov	r1, r3
 801404c:	2002      	movs	r0, #2
 801404e:	f7f8 f872 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 8014052:	4603      	mov	r3, r0
 8014054:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	331a      	adds	r3, #26
 801405e:	781b      	ldrb	r3, [r3, #0]
 8014060:	f003 0301 	and.w	r3, r3, #1
 8014064:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 801406a:	68bb      	ldr	r3, [r7, #8]
 801406c:	331b      	adds	r3, #27
 801406e:	781b      	ldrb	r3, [r3, #0]
 8014070:	f003 0307 	and.w	r3, r3, #7
 8014074:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	7f1a      	ldrb	r2, [r3, #28]
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	7f5a      	ldrb	r2, [r3, #29]
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 801408a:	68bb      	ldr	r3, [r7, #8]
 801408c:	331e      	adds	r3, #30
 801408e:	781b      	ldrb	r3, [r3, #0]
 8014090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014094:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	331f      	adds	r3, #31
 801409e:	781b      	ldrb	r3, [r3, #0]
 80140a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80140a4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 80140aa:	68bb      	ldr	r3, [r7, #8]
 80140ac:	3320      	adds	r3, #32
 80140ae:	781b      	ldrb	r3, [r3, #0]
 80140b0:	f003 0303 	and.w	r3, r3, #3
 80140b4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	3321      	adds	r3, #33	; 0x21
 80140be:	781b      	ldrb	r3, [r3, #0]
 80140c0:	f003 030f 	and.w	r3, r3, #15
 80140c4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80140ca:	68bb      	ldr	r3, [r7, #8]
 80140cc:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 80140e2:	68bb      	ldr	r3, [r7, #8]
 80140e4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	3325      	adds	r3, #37	; 0x25
 80140f2:	781b      	ldrb	r3, [r3, #0]
 80140f4:	f003 0301 	and.w	r3, r3, #1
 80140f8:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8014100:	68bb      	ldr	r3, [r7, #8]
 8014102:	3326      	adds	r3, #38	; 0x26
 8014104:	781b      	ldrb	r3, [r3, #0]
 8014106:	f003 0303 	and.w	r3, r3, #3
 801410a:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	3327      	adds	r3, #39	; 0x27
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	f003 031f 	and.w	r3, r3, #31
 801411c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	3328      	adds	r3, #40	; 0x28
 8014128:	781b      	ldrb	r3, [r3, #0]
 801412a:	f003 031f 	and.w	r3, r3, #31
 801412e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	3329      	adds	r3, #41	; 0x29
 801413a:	781b      	ldrb	r3, [r3, #0]
 801413c:	f003 031f 	and.w	r3, r3, #31
 8014140:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	332a      	adds	r3, #42	; 0x2a
 801414c:	781b      	ldrb	r3, [r3, #0]
 801414e:	f003 0301 	and.w	r3, r3, #1
 8014152:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 801415a:	68bb      	ldr	r3, [r7, #8]
 801415c:	332b      	adds	r3, #43	; 0x2b
 801415e:	781b      	ldrb	r3, [r3, #0]
 8014160:	f003 0301 	and.w	r3, r3, #1
 8014164:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	332c      	adds	r3, #44	; 0x2c
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	f003 0303 	and.w	r3, r3, #3
 8014176:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 801417e:	68bb      	ldr	r3, [r7, #8]
 8014180:	332d      	adds	r3, #45	; 0x2d
 8014182:	781b      	ldrb	r3, [r3, #0]
 8014184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014188:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	332e      	adds	r3, #46	; 0x2e
 8014194:	4619      	mov	r1, r3
 8014196:	2004      	movs	r0, #4
 8014198:	f7f8 f86c 	bl	800c274 <VL53L1_i2c_decode_uint32_t>
 801419c:	4603      	mov	r3, r0
 801419e:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	3332      	adds	r3, #50	; 0x32
 80141aa:	4619      	mov	r1, r3
 80141ac:	2004      	movs	r0, #4
 80141ae:	f7f8 f861 	bl	800c274 <VL53L1_i2c_decode_uint32_t>
 80141b2:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	3336      	adds	r3, #54	; 0x36
 80141bc:	781b      	ldrb	r3, [r3, #0]
 80141be:	f003 0301 	and.w	r3, r3, #1
 80141c2:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	3337      	adds	r3, #55	; 0x37
 80141ce:	781b      	ldrb	r3, [r3, #0]
 80141d0:	f003 0301 	and.w	r3, r3, #1
 80141d4:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 80141dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80141e0:	4618      	mov	r0, r3
 80141e2:	3718      	adds	r7, #24
 80141e4:	46bd      	mov	sp, r7
 80141e6:	bd80      	pop	{r7, pc}

080141e8 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b086      	sub	sp, #24
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	4603      	mov	r3, r0
 80141f0:	60b9      	str	r1, [r7, #8]
 80141f2:	607a      	str	r2, [r7, #4]
 80141f4:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80141f6:	2300      	movs	r3, #0
 80141f8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 80141fa:	89fb      	ldrh	r3, [r7, #14]
 80141fc:	2b30      	cmp	r3, #48	; 0x30
 80141fe:	d802      	bhi.n	8014206 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014200:	f06f 0309 	mvn.w	r3, #9
 8014204:	e112      	b.n	801442c <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	785a      	ldrb	r2, [r3, #1]
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	789a      	ldrb	r2, [r3, #2]
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 801421e:	68bb      	ldr	r3, [r7, #8]
 8014220:	3303      	adds	r3, #3
 8014222:	4619      	mov	r1, r3
 8014224:	2002      	movs	r0, #2
 8014226:	f7f7 ff86 	bl	800c136 <VL53L1_i2c_decode_uint16_t>
 801422a:	4603      	mov	r3, r0
 801422c:	461a      	mov	r2, r3
	pdata->identification__module_id =
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8014232:	68bb      	ldr	r3, [r7, #8]
 8014234:	3305      	adds	r3, #5
 8014236:	781b      	ldrb	r3, [r3, #0]
 8014238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801423c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8014242:	68bb      	ldr	r3, [r7, #8]
 8014244:	3306      	adds	r3, #6
 8014246:	781b      	ldrb	r3, [r3, #0]
 8014248:	f003 0307 	and.w	r3, r3, #7
 801424c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8014252:	68bb      	ldr	r3, [r7, #8]
 8014254:	3307      	adds	r3, #7
 8014256:	781b      	ldrb	r3, [r3, #0]
 8014258:	f003 0307 	and.w	r3, r3, #7
 801425c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	3308      	adds	r3, #8
 8014266:	781b      	ldrb	r3, [r3, #0]
 8014268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801426c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8014272:	68bb      	ldr	r3, [r7, #8]
 8014274:	3309      	adds	r3, #9
 8014276:	781b      	ldrb	r3, [r3, #0]
 8014278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801427c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8014282:	68bb      	ldr	r3, [r7, #8]
 8014284:	330a      	adds	r3, #10
 8014286:	781b      	ldrb	r3, [r3, #0]
 8014288:	f003 0301 	and.w	r3, r3, #1
 801428c:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8014292:	68bb      	ldr	r3, [r7, #8]
 8014294:	330b      	adds	r3, #11
 8014296:	781b      	ldrb	r3, [r3, #0]
 8014298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801429c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 80142a2:	68bb      	ldr	r3, [r7, #8]
 80142a4:	330c      	adds	r3, #12
 80142a6:	781b      	ldrb	r3, [r3, #0]
 80142a8:	f003 0301 	and.w	r3, r3, #1
 80142ac:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 80142b2:	68bb      	ldr	r3, [r7, #8]
 80142b4:	330d      	adds	r3, #13
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80142bc:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 80142c2:	68bb      	ldr	r3, [r7, #8]
 80142c4:	330e      	adds	r3, #14
 80142c6:	781b      	ldrb	r3, [r3, #0]
 80142c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80142cc:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 80142d2:	68bb      	ldr	r3, [r7, #8]
 80142d4:	7bda      	ldrb	r2, [r3, #15]
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80142da:	68bb      	ldr	r3, [r7, #8]
 80142dc:	7c1a      	ldrb	r2, [r3, #16]
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	7c5a      	ldrb	r2, [r3, #17]
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80142ea:	68bb      	ldr	r3, [r7, #8]
 80142ec:	7c9a      	ldrb	r2, [r3, #18]
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 80142f2:	68bb      	ldr	r3, [r7, #8]
 80142f4:	7cda      	ldrb	r2, [r3, #19]
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80142fa:	68bb      	ldr	r3, [r7, #8]
 80142fc:	7d1a      	ldrb	r2, [r3, #20]
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	7d5a      	ldrb	r2, [r3, #21]
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	7d9a      	ldrb	r2, [r3, #22]
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8014312:	68bb      	ldr	r3, [r7, #8]
 8014314:	7dda      	ldrb	r2, [r3, #23]
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 801431a:	68bb      	ldr	r3, [r7, #8]
 801431c:	7e1a      	ldrb	r2, [r3, #24]
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8014322:	68bb      	ldr	r3, [r7, #8]
 8014324:	7e5a      	ldrb	r2, [r3, #25]
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 801432a:	68bb      	ldr	r3, [r7, #8]
 801432c:	7e9a      	ldrb	r2, [r3, #26]
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8014332:	68bb      	ldr	r3, [r7, #8]
 8014334:	7eda      	ldrb	r2, [r3, #27]
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	7f1a      	ldrb	r2, [r3, #28]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8014342:	68bb      	ldr	r3, [r7, #8]
 8014344:	7f5a      	ldrb	r2, [r3, #29]
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 801434a:	68bb      	ldr	r3, [r7, #8]
 801434c:	7f9a      	ldrb	r2, [r3, #30]
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8014352:	68bb      	ldr	r3, [r7, #8]
 8014354:	7fda      	ldrb	r2, [r3, #31]
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 801435c:	68bb      	ldr	r3, [r7, #8]
 801435e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8014368:	68bb      	ldr	r3, [r7, #8]
 801436a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 801438c:	68bb      	ldr	r3, [r7, #8]
 801438e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 80143a4:	68bb      	ldr	r3, [r7, #8]
 80143a6:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 80143bc:	68bb      	ldr	r3, [r7, #8]
 80143be:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 80143e0:	68bb      	ldr	r3, [r7, #8]
 80143e2:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8014404:	68bb      	ldr	r3, [r7, #8]
 8014406:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8014410:	68bb      	ldr	r3, [r7, #8]
 8014412:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8014428:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801442c:	4618      	mov	r0, r3
 801442e:	3718      	adds	r7, #24
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}

08014434 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b090      	sub	sp, #64	; 0x40
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
 801443c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801443e:	2300      	movs	r3, #0
 8014440:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8014444:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014448:	2b00      	cmp	r3, #0
 801444a:	d10a      	bne.n	8014462 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 801444c:	f107 020c 	add.w	r2, r7, #12
 8014450:	2331      	movs	r3, #49	; 0x31
 8014452:	f240 110f 	movw	r1, #271	; 0x10f
 8014456:	6878      	ldr	r0, [r7, #4]
 8014458:	f001 f8f8 	bl	801564c <VL53L1_ReadMulti>
 801445c:	4603      	mov	r3, r0
 801445e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8014462:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014466:	2b00      	cmp	r3, #0
 8014468:	d109      	bne.n	801447e <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 801446a:	f107 030c 	add.w	r3, r7, #12
 801446e:	683a      	ldr	r2, [r7, #0]
 8014470:	4619      	mov	r1, r3
 8014472:	2031      	movs	r0, #49	; 0x31
 8014474:	f7ff feb8 	bl	80141e8 <VL53L1_i2c_decode_nvm_copy_data>
 8014478:	4603      	mov	r3, r0
 801447a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801447e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8014482:	4618      	mov	r0, r3
 8014484:	3740      	adds	r7, #64	; 0x40
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}

0801448a <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 801448a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801448e:	b0d6      	sub	sp, #344	; 0x158
 8014490:	af00      	add	r7, sp, #0
 8014492:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8014496:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 801449a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801449e:	4603      	mov	r3, r0
 80144a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80144a4:	23f1      	movs	r3, #241	; 0xf1
 80144a6:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53L1_D_002;
 80144aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80144ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 80144b2:	2300      	movs	r3, #0
 80144b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 80144b8:	f04f 0200 	mov.w	r2, #0
 80144bc:	f04f 0300 	mov.w	r3, #0
 80144c0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 80144c4:	f04f 0200 	mov.w	r2, #0
 80144c8:	f04f 0300 	mov.w	r3, #0
 80144cc:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 80144d0:	f04f 0200 	mov.w	r2, #0
 80144d4:	f04f 0300 	mov.w	r3, #0
 80144d8:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53L1_p_041   = 0;
 80144dc:	f04f 0200 	mov.w	r2, #0
 80144e0:	f04f 0300 	mov.w	r3, #0
 80144e4:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53L1_D_002;
 80144e8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80144ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80144f0:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 80144f2:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	f000 8322 	beq.w	8014b40 <VL53L1_f_014+0x6b6>



		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 80144fc:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8014500:	4618      	mov	r0, r3
 8014502:	f7fb fa23 	bl	800f94c <VL53L1_calc_pll_period_mm>
 8014506:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53L1_p_004 > VL53L1_p_018)
 801450a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801450e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014512:	429a      	cmp	r2, r3
 8014514:	d91a      	bls.n	801454c <VL53L1_f_014+0xc2>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 8014516:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801451a:	2200      	movs	r2, #0
 801451c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014520:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53L1_p_018;
 8014524:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014528:	2200      	movs	r2, #0
 801452a:	4698      	mov	r8, r3
 801452c:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 801452e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8014532:	460b      	mov	r3, r1
 8014534:	ebb3 0308 	subs.w	r3, r3, r8
 8014538:	63bb      	str	r3, [r7, #56]	; 0x38
 801453a:	4613      	mov	r3, r2
 801453c:	eb63 0309 	sbc.w	r3, r3, r9
 8014540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014542:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8014546:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 801454a:	e013      	b.n	8014574 <VL53L1_f_014+0xea>
		else
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 801454c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014550:	2200      	movs	r2, #0
 8014552:	469a      	mov	sl, r3
 8014554:	4693      	mov	fp, r2
			(uint64_t)VL53L1_p_004;
 8014556:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801455a:	2200      	movs	r2, #0
 801455c:	461c      	mov	r4, r3
 801455e:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 8014560:	ebba 0304 	subs.w	r3, sl, r4
 8014564:	633b      	str	r3, [r7, #48]	; 0x30
 8014566:	eb6b 0305 	sbc.w	r3, fp, r5
 801456a:	637b      	str	r3, [r7, #52]	; 0x34
 801456c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8014570:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53L1_p_003 > VL53L1_p_001)
 8014574:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8014578:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801457c:	429a      	cmp	r2, r3
 801457e:	d91f      	bls.n	80145c0 <VL53L1_f_014+0x136>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 8014580:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8014584:	2200      	movs	r2, #0
 8014586:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801458a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53L1_p_001;
 801458e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8014592:	2200      	movs	r2, #0
 8014594:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014598:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 801459c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80145a0:	4623      	mov	r3, r4
 80145a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80145a6:	4602      	mov	r2, r0
 80145a8:	1a9b      	subs	r3, r3, r2
 80145aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80145ac:	462b      	mov	r3, r5
 80145ae:	460a      	mov	r2, r1
 80145b0:	eb63 0302 	sbc.w	r3, r3, r2
 80145b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80145b6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80145ba:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 80145be:	e01e      	b.n	80145fe <VL53L1_f_014+0x174>
		else
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 80145c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80145c4:	2200      	movs	r2, #0
 80145c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80145ca:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53L1_p_003;
 80145ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80145d2:	2200      	movs	r2, #0
 80145d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80145d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 80145dc:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80145e0:	4623      	mov	r3, r4
 80145e2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80145e6:	4602      	mov	r2, r0
 80145e8:	1a9b      	subs	r3, r3, r2
 80145ea:	623b      	str	r3, [r7, #32]
 80145ec:	462b      	mov	r3, r5
 80145ee:	460a      	mov	r2, r1
 80145f0:	eb63 0302 	sbc.w	r3, r3, r2
 80145f4:	627b      	str	r3, [r7, #36]	; 0x24
 80145f6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80145fa:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 80145fe:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014602:	4313      	orrs	r3, r2
 8014604:	f000 829c 	beq.w	8014b40 <VL53L1_f_014+0x6b6>




			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 8014608:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801460c:	2200      	movs	r2, #0
 801460e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014612:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8014616:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801461a:	2200      	movs	r2, #0
 801461c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8014620:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8014624:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8014628:	4623      	mov	r3, r4
 801462a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 801462e:	4602      	mov	r2, r0
 8014630:	189b      	adds	r3, r3, r2
 8014632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8014636:	460b      	mov	r3, r1
 8014638:	462a      	mov	r2, r5
 801463a:	eb42 0303 	adc.w	r3, r2, r3
 801463e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53L1_p_004;
 8014642:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8014646:	2200      	movs	r2, #0
 8014648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801464c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 8014650:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8014654:	4623      	mov	r3, r4
 8014656:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801465a:	4602      	mov	r2, r0
 801465c:	189b      	adds	r3, r3, r2
 801465e:	61bb      	str	r3, [r7, #24]
 8014660:	460b      	mov	r3, r1
 8014662:	462a      	mov	r2, r5
 8014664:	eb42 0303 	adc.w	r3, r2, r3
 8014668:	61fb      	str	r3, [r7, #28]
 801466a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801466e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53L1_D_003)
 8014672:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014676:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 801467a:	f173 0300 	sbcs.w	r3, r3, #0
 801467e:	d305      	bcc.n	801468c <VL53L1_f_014+0x202>
				tmp0 = VL53L1_D_003;
 8014680:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8014684:	f04f 0300 	mov.w	r3, #0
 8014688:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 801468c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8014690:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014694:	fb03 f102 	mul.w	r1, r3, r2
 8014698:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801469c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80146a0:	fb02 f303 	mul.w	r3, r2, r3
 80146a4:	18ca      	adds	r2, r1, r3
 80146a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80146aa:	fba3 1303 	umull	r1, r3, r3, r3
 80146ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80146b2:	460b      	mov	r3, r1
 80146b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80146b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80146bc:	18d3      	adds	r3, r2, r3
 80146be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80146c2:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80146c6:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 80146ca:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 80146ce:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80146d2:	f04f 0000 	mov.w	r0, #0
 80146d6:	f04f 0100 	mov.w	r1, #0
 80146da:	0219      	lsls	r1, r3, #8
 80146dc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80146e0:	0210      	lsls	r0, r2, #8
 80146e2:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53L1_D_004)
 80146e6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80146ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80146ee:	d305      	bcc.n	80146fc <VL53L1_f_014+0x272>
				tmp1 = VL53L1_D_004;
 80146f0:	f04f 32ff 	mov.w	r2, #4294967295
 80146f4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80146f8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 80146fc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014700:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8014704:	f7ec fa78 	bl	8000bf8 <__aeabi_uldivmod>
 8014708:	4602      	mov	r2, r0
 801470a:	460b      	mov	r3, r1
 801470c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8014710:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014714:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8014718:	f7ec fa6e 	bl	8000bf8 <__aeabi_uldivmod>
 801471c:	4602      	mov	r2, r0
 801471e:	460b      	mov	r3, r1
 8014720:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_005)
 8014724:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8014728:	2b80      	cmp	r3, #128	; 0x80
 801472a:	d305      	bcc.n	8014738 <VL53L1_f_014+0x2ae>
				tmp1 = (uint64_t)VL53L1_D_005;
 801472c:	f04f 32ff 	mov.w	r2, #4294967295
 8014730:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8014734:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 8014738:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801473c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8014740:	fb03 f102 	mul.w	r1, r3, r2
 8014744:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8014748:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801474c:	fb02 f303 	mul.w	r3, r2, r3
 8014750:	4419      	add	r1, r3
 8014752:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8014756:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801475a:	fba2 2303 	umull	r2, r3, r2, r3
 801475e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8014762:	4613      	mov	r3, r2
 8014764:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8014768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801476c:	18cb      	adds	r3, r1, r3
 801476e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8014772:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8014776:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801477a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801477e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8014782:	2200      	movs	r2, #0
 8014784:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014788:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801478c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8014790:	2200      	movs	r2, #0
 8014792:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014796:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801479a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801479e:	4623      	mov	r3, r4
 80147a0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80147a4:	4602      	mov	r2, r0
 80147a6:	189b      	adds	r3, r3, r2
 80147a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80147ac:	460b      	mov	r3, r1
 80147ae:	462a      	mov	r2, r5
 80147b0:	eb42 0303 	adc.w	r3, r2, r3
 80147b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80147b8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80147bc:	2200      	movs	r2, #0
 80147be:	67bb      	str	r3, [r7, #120]	; 0x78
 80147c0:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80147c2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80147c6:	4623      	mov	r3, r4
 80147c8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80147cc:	4602      	mov	r2, r0
 80147ce:	189b      	adds	r3, r3, r2
 80147d0:	673b      	str	r3, [r7, #112]	; 0x70
 80147d2:	460b      	mov	r3, r1
 80147d4:	462a      	mov	r2, r5
 80147d6:	eb42 0303 	adc.w	r3, r2, r3
 80147da:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80147dc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80147e0:	2200      	movs	r2, #0
 80147e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80147e4:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80147e6:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80147ea:	4623      	mov	r3, r4
 80147ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80147f0:	4602      	mov	r2, r0
 80147f2:	189b      	adds	r3, r3, r2
 80147f4:	613b      	str	r3, [r7, #16]
 80147f6:	460b      	mov	r3, r1
 80147f8:	462a      	mov	r2, r5
 80147fa:	eb42 0303 	adc.w	r3, r2, r3
 80147fe:	617b      	str	r3, [r7, #20]
 8014800:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8014804:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_003)
 8014808:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801480c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8014810:	f173 0300 	sbcs.w	r3, r3, #0
 8014814:	d305      	bcc.n	8014822 <VL53L1_f_014+0x398>
				tmp1 = (uint64_t)VL53L1_D_003;
 8014816:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801481a:	f04f 0300 	mov.w	r3, #0
 801481e:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 8014822:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8014826:	f04f 0000 	mov.w	r0, #0
 801482a:	f04f 0100 	mov.w	r1, #0
 801482e:	0219      	lsls	r1, r3, #8
 8014830:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8014834:	0210      	lsls	r0, r2, #8
 8014836:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 801483a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801483e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8014842:	1884      	adds	r4, r0, r2
 8014844:	60bc      	str	r4, [r7, #8]
 8014846:	eb41 0303 	adc.w	r3, r1, r3
 801484a:	60fb      	str	r3, [r7, #12]
 801484c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8014850:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53L1_D_006)
 8014854:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014858:	2b00      	cmp	r3, #0
 801485a:	da05      	bge.n	8014868 <VL53L1_f_014+0x3de>
				tmp0 = (uint64_t)VL53L1_D_006;
 801485c:	f04f 32ff 	mov.w	r2, #4294967295
 8014860:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014864:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8014868:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801486c:	2b01      	cmp	r3, #1
 801486e:	d331      	bcc.n	80148d4 <VL53L1_f_014+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8014870:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014874:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014878:	f7ec f9be 	bl	8000bf8 <__aeabi_uldivmod>
 801487c:	4602      	mov	r2, r0
 801487e:	460b      	mov	r3, r1
 8014880:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8014884:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014888:	2200      	movs	r2, #0
 801488a:	663b      	str	r3, [r7, #96]	; 0x60
 801488c:	667a      	str	r2, [r7, #100]	; 0x64
 801488e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8014892:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8014896:	4622      	mov	r2, r4
 8014898:	fb02 f203 	mul.w	r2, r2, r3
 801489c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80148a0:	4629      	mov	r1, r5
 80148a2:	fb01 f303 	mul.w	r3, r1, r3
 80148a6:	441a      	add	r2, r3
 80148a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80148ac:	4621      	mov	r1, r4
 80148ae:	fba3 1301 	umull	r1, r3, r3, r1
 80148b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80148b6:	460b      	mov	r3, r1
 80148b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80148bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80148c0:	18d3      	adds	r3, r2, r3
 80148c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80148c6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80148ca:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80148ce:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80148d2:	e030      	b.n	8014936 <VL53L1_f_014+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 80148d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80148d8:	2200      	movs	r2, #0
 80148da:	65bb      	str	r3, [r7, #88]	; 0x58
 80148dc:	65fa      	str	r2, [r7, #92]	; 0x5c
 80148de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80148e2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80148e6:	4622      	mov	r2, r4
 80148e8:	fb02 f203 	mul.w	r2, r2, r3
 80148ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80148f0:	4629      	mov	r1, r5
 80148f2:	fb01 f303 	mul.w	r3, r1, r3
 80148f6:	441a      	add	r2, r3
 80148f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80148fc:	4621      	mov	r1, r4
 80148fe:	fba3 1301 	umull	r1, r3, r3, r1
 8014902:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014906:	460b      	mov	r3, r1
 8014908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801490c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014910:	18d3      	adds	r3, r2, r3
 8014912:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014916:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 801491a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801491e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8014922:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014926:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801492a:	f7ec f965 	bl	8000bf8 <__aeabi_uldivmod>
 801492e:	4602      	mov	r2, r0
 8014930:	460b      	mov	r3, r1
 8014932:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8014936:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801493a:	2b00      	cmp	r3, #0
 801493c:	da05      	bge.n	801494a <VL53L1_f_014+0x4c0>
				tmp0 = (uint64_t)VL53L1_D_006;
 801493e:	f04f 32ff 	mov.w	r2, #4294967295
 8014942:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014946:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53L1_D_007) {
 801494a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801494e:	2b01      	cmp	r3, #1
 8014950:	d33d      	bcc.n	80149ce <VL53L1_f_014+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8014952:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014956:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801495a:	f7ec f94d 	bl	8000bf8 <__aeabi_uldivmod>
 801495e:	4602      	mov	r2, r0
 8014960:	460b      	mov	r3, r1
 8014962:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8014966:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801496a:	f04f 0200 	mov.w	r2, #0
 801496e:	f04f 0300 	mov.w	r3, #0
 8014972:	0882      	lsrs	r2, r0, #2
 8014974:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8014978:	088b      	lsrs	r3, r1, #2
 801497a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 801497e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014982:	2200      	movs	r2, #0
 8014984:	653b      	str	r3, [r7, #80]	; 0x50
 8014986:	657a      	str	r2, [r7, #84]	; 0x54
 8014988:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801498c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8014990:	4622      	mov	r2, r4
 8014992:	fb02 f203 	mul.w	r2, r2, r3
 8014996:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801499a:	4629      	mov	r1, r5
 801499c:	fb01 f303 	mul.w	r3, r1, r3
 80149a0:	4413      	add	r3, r2
 80149a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80149a6:	4621      	mov	r1, r4
 80149a8:	fba2 1201 	umull	r1, r2, r2, r1
 80149ac:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80149b0:	460a      	mov	r2, r1
 80149b2:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80149b6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80149ba:	4413      	add	r3, r2
 80149bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80149c0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80149c4:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80149c8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80149cc:	e03c      	b.n	8014a48 <VL53L1_f_014+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 80149ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80149d2:	2200      	movs	r2, #0
 80149d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80149d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80149d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80149dc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80149e0:	4622      	mov	r2, r4
 80149e2:	fb02 f203 	mul.w	r2, r2, r3
 80149e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80149ea:	4629      	mov	r1, r5
 80149ec:	fb01 f303 	mul.w	r3, r1, r3
 80149f0:	4413      	add	r3, r2
 80149f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80149f6:	4621      	mov	r1, r4
 80149f8:	fba2 1201 	umull	r1, r2, r2, r1
 80149fc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8014a00:	460a      	mov	r2, r1
 8014a02:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8014a06:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014a0a:	4413      	add	r3, r2
 8014a0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8014a10:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8014a14:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8014a18:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8014a1c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014a20:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014a24:	f7ec f8e8 	bl	8000bf8 <__aeabi_uldivmod>
 8014a28:	4602      	mov	r2, r0
 8014a2a:	460b      	mov	r3, r1
 8014a2c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8014a30:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014a34:	f04f 0200 	mov.w	r2, #0
 8014a38:	f04f 0300 	mov.w	r3, #0
 8014a3c:	0882      	lsrs	r2, r0, #2
 8014a3e:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8014a42:	088b      	lsrs	r3, r1, #2
 8014a44:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8014a48:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	da05      	bge.n	8014a5c <VL53L1_f_014+0x5d2>
				tmp0 = (uint64_t)VL53L1_D_006;
 8014a50:	f04f 32ff 	mov.w	r2, #4294967295
 8014a54:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014a58:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 8014a5c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014a60:	f04f 0200 	mov.w	r2, #0
 8014a64:	f04f 0300 	mov.w	r3, #0
 8014a68:	0882      	lsrs	r2, r0, #2
 8014a6a:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8014a6e:	088b      	lsrs	r3, r1, #2
 8014a70:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8014a74:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014a78:	2b01      	cmp	r3, #1
 8014a7a:	d305      	bcc.n	8014a88 <VL53L1_f_014+0x5fe>
				tmp0 = (uint64_t)VL53L1_D_007;
 8014a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8014a80:	f04f 0300 	mov.w	r3, #0
 8014a84:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8014a88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8014a90:	647a      	str	r2, [r7, #68]	; 0x44
 8014a92:	f04f 0200 	mov.w	r2, #0
 8014a96:	f04f 0300 	mov.w	r3, #0
 8014a9a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8014a9e:	4629      	mov	r1, r5
 8014aa0:	01cb      	lsls	r3, r1, #7
 8014aa2:	4621      	mov	r1, r4
 8014aa4:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8014aa8:	4621      	mov	r1, r4
 8014aaa:	01ca      	lsls	r2, r1, #7
 8014aac:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 8014ab0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8014ab4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8014ab8:	fb03 f202 	mul.w	r2, r3, r2
 8014abc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8014ac0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8014ac4:	fb01 f303 	mul.w	r3, r1, r3
 8014ac8:	441a      	add	r2, r3
 8014aca:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8014ace:	fba3 1303 	umull	r1, r3, r3, r3
 8014ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014ad6:	460b      	mov	r3, r1
 8014ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8014adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ae0:	18d3      	adds	r3, r2, r3
 8014ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014ae6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8014aea:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8014aee:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 8014af2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014af6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8014afa:	1884      	adds	r4, r0, r2
 8014afc:	603c      	str	r4, [r7, #0]
 8014afe:	eb41 0303 	adc.w	r3, r1, r3
 8014b02:	607b      	str	r3, [r7, #4]
 8014b04:	e9d7 3400 	ldrd	r3, r4, [r7]
 8014b08:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8014b0c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014b10:	2b01      	cmp	r3, #1
 8014b12:	d305      	bcc.n	8014b20 <VL53L1_f_014+0x696>
				tmp0 = (uint64_t)VL53L1_D_007;
 8014b14:	f04f 32ff 	mov.w	r2, #4294967295
 8014b18:	f04f 0300 	mov.w	r3, #0
 8014b1c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 8014b20:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7fa fdaa 	bl	800f67e <VL53L1_isqrt>
 8014b2a:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8014b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014b32:	b29a      	uxth	r2, r3
 8014b34:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8014b38:	801a      	strh	r2, [r3, #0]

			status = VL53L1_ERROR_NONE;
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 8014b40:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8014b44:	4618      	mov	r0, r3
 8014b46:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014b50 <VL53L1_wait_for_test_completion>:
}


VL53L1_Error VL53L1_wait_for_test_completion(
	VL53L1_DEV     Dev)
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b086      	sub	sp, #24
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014b58:	2300      	movs	r3, #0
 8014b5a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	3318      	adds	r3, #24
 8014b60:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8014b62:	2300      	movs	r3, #0
 8014b64:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 8014b66:	693b      	ldr	r3, [r7, #16]
 8014b68:	781b      	ldrb	r3, [r3, #0]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d107      	bne.n	8014b7e <VL53L1_wait_for_test_completion+0x2e>



		status =
			VL53L1_poll_for_range_completion(
 8014b6e:	f64e 2160 	movw	r1, #60000	; 0xea60
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	f000 f88b 	bl	8014c8e <VL53L1_poll_for_range_completion>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	75fb      	strb	r3, [r7, #23]
 8014b7c:	e01b      	b.n	8014bb6 <VL53L1_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8014b7e:	2300      	movs	r3, #0
 8014b80:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8014b82:	e011      	b.n	8014ba8 <VL53L1_wait_for_test_completion+0x58>
			status = VL53L1_is_new_data_ready(
 8014b84:	f107 030f 	add.w	r3, r7, #15
 8014b88:	4619      	mov	r1, r3
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f000 f819 	bl	8014bc2 <VL53L1_is_new_data_ready>
 8014b90:	4603      	mov	r3, r0
 8014b92:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53L1_ERROR_NONE) {
 8014b94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d105      	bne.n	8014ba8 <VL53L1_wait_for_test_completion+0x58>
				status = VL53L1_WaitMs(
 8014b9c:	2101      	movs	r1, #1
 8014b9e:	6878      	ldr	r0, [r7, #4]
 8014ba0:	f000 fe6e 	bl	8015880 <VL53L1_WaitMs>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8014ba8:	7bfb      	ldrb	r3, [r7, #15]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d103      	bne.n	8014bb6 <VL53L1_wait_for_test_completion+0x66>
 8014bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d0e6      	beq.n	8014b84 <VL53L1_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8014bb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014bba:	4618      	mov	r0, r3
 8014bbc:	3718      	adds	r7, #24
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	bd80      	pop	{r7, pc}

08014bc2 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8014bc2:	b580      	push	{r7, lr}
 8014bc4:	b086      	sub	sp, #24
 8014bc6:	af00      	add	r7, sp, #0
 8014bc8:	6078      	str	r0, [r7, #4]
 8014bca:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	3318      	adds	r3, #24
 8014bd4:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8014bda:	2300      	movs	r3, #0
 8014bdc:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8014bde:	2300      	movs	r3, #0
 8014be0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8014be2:	693b      	ldr	r3, [r7, #16]
 8014be4:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8014be8:	f003 0310 	and.w	r3, r3, #16
 8014bec:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8014bee:	7bfb      	ldrb	r3, [r7, #15]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d102      	bne.n	8014bfa <VL53L1_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	75fb      	strb	r3, [r7, #23]
 8014bf8:	e001      	b.n	8014bfe <VL53L1_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	75fb      	strb	r3, [r7, #23]



	status = VL53L1_RdByte(
 8014bfe:	f107 030e 	add.w	r3, r7, #14
 8014c02:	461a      	mov	r2, r3
 8014c04:	2131      	movs	r1, #49	; 0x31
 8014c06:	6878      	ldr	r0, [r7, #4]
 8014c08:	f000 fdb2 	bl	8015770 <VL53L1_RdByte>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8014c10:	7bbb      	ldrb	r3, [r7, #14]
 8014c12:	f003 0201 	and.w	r2, r3, #1
 8014c16:	7dfb      	ldrb	r3, [r7, #23]
 8014c18:	429a      	cmp	r2, r3
 8014c1a:	d103      	bne.n	8014c24 <VL53L1_is_new_data_ready+0x62>
		*pready = 0x01;
 8014c1c:	683b      	ldr	r3, [r7, #0]
 8014c1e:	2201      	movs	r2, #1
 8014c20:	701a      	strb	r2, [r3, #0]
 8014c22:	e002      	b.n	8014c2a <VL53L1_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8014c24:	683b      	ldr	r3, [r7, #0]
 8014c26:	2200      	movs	r2, #0
 8014c28:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8014c2a:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	3718      	adds	r7, #24
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}

08014c36 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8014c36:	b580      	push	{r7, lr}
 8014c38:	b086      	sub	sp, #24
 8014c3a:	af02      	add	r7, sp, #8
 8014c3c:	6078      	str	r0, [r7, #4]
 8014c3e:	6039      	str	r1, [r7, #0]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8014c40:	2300      	movs	r3, #0
 8014c42:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 8014c44:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f000 fe29 	bl	80158a0 <VL53L1_WaitUs>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8014c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d10b      	bne.n	8014c72 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 8014c5a:	2301      	movs	r3, #1
 8014c5c:	9301      	str	r3, [sp, #4]
 8014c5e:	2301      	movs	r3, #1
 8014c60:	9300      	str	r3, [sp, #0]
 8014c62:	2301      	movs	r3, #1
 8014c64:	22e5      	movs	r2, #229	; 0xe5
 8014c66:	6839      	ldr	r1, [r7, #0]
 8014c68:	6878      	ldr	r0, [r7, #4]
 8014c6a:	f000 fe31 	bl	80158d0 <VL53L1_WaitValueMaskEx>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8014c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d103      	bne.n	8014c82 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8014c7a:	2103      	movs	r1, #3
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f7f6 fc38 	bl	800b4f2 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8014c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014c86:	4618      	mov	r0, r3
 8014c88:	3710      	adds	r7, #16
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	bd80      	pop	{r7, pc}

08014c8e <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8014c8e:	b580      	push	{r7, lr}
 8014c90:	b088      	sub	sp, #32
 8014c92:	af02      	add	r7, sp, #8
 8014c94:	6078      	str	r0, [r7, #4]
 8014c96:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014c98:	2300      	movs	r3, #0
 8014c9a:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	3318      	adds	r3, #24
 8014ca0:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8014caa:	693b      	ldr	r3, [r7, #16]
 8014cac:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8014cb0:	f003 0310 	and.w	r3, r3, #16
 8014cb4:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8014cb6:	7bfb      	ldrb	r3, [r7, #15]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d102      	bne.n	8014cc2 <VL53L1_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8014cbc:	2301      	movs	r3, #1
 8014cbe:	75fb      	strb	r3, [r7, #23]
 8014cc0:	e001      	b.n	8014cc6 <VL53L1_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 8014cc6:	7dfb      	ldrb	r3, [r7, #23]
 8014cc8:	2201      	movs	r2, #1
 8014cca:	9201      	str	r2, [sp, #4]
 8014ccc:	2201      	movs	r2, #1
 8014cce:	9200      	str	r2, [sp, #0]
 8014cd0:	2231      	movs	r2, #49	; 0x31
 8014cd2:	6839      	ldr	r1, [r7, #0]
 8014cd4:	6878      	ldr	r0, [r7, #4]
 8014cd6:	f000 fdfb 	bl	80158d0 <VL53L1_WaitValueMaskEx>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8014cde:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	3718      	adds	r7, #24
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}

08014cea <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8014cea:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014cee:	b0c0      	sub	sp, #256	; 0x100
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	460b      	mov	r3, r1
 8014cfa:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8014cfe:	4613      	mov	r3, r2
 8014d00:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8014d04:	4603      	mov	r3, r0
 8014d06:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 8014d10:	2300      	movs	r3, #0
 8014d12:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 8014d16:	2300      	movs	r3, #0
 8014d18:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 8014d22:	2300      	movs	r3, #0
 8014d24:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 8014d28:	2300      	movs	r3, #0
 8014d2a:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 8014d34:	f04f 0200 	mov.w	r2, #0
 8014d38:	f04f 0300 	mov.w	r3, #0
 8014d3c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 8014d40:	f04f 0200 	mov.w	r2, #0
 8014d44:	f04f 0300 	mov.w	r3, #0
 8014d48:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 8014d4c:	f04f 0200 	mov.w	r2, #0
 8014d50:	f04f 0300 	mov.w	r3, #0
 8014d54:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53L1_ERROR_NONE) {
 8014d58:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d108      	bne.n	8014d72 <VL53L1_f_040+0x88>
		VL53L1_decode_row_col(
 8014d60:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 8014d64:	f107 01de 	add.w	r1, r7, #222	; 0xde
 8014d68:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	f7fb f867 	bl	800fe40 <VL53L1_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
 8014d72:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d165      	bne.n	8014e46 <VL53L1_f_040+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8014d7a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014d7e:	091b      	lsrs	r3, r3, #4
 8014d80:	b2db      	uxtb	r3, r3
 8014d82:	f003 0301 	and.w	r3, r3, #1
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d00e      	beq.n	8014da8 <VL53L1_f_040+0xbe>
			bound_l_x = (int16_t) col -
 8014d8a:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8014d8e:	b29a      	uxth	r2, r3
 8014d90:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014d94:	095b      	lsrs	r3, r3, #5
 8014d96:	b2db      	uxtb	r3, r3
 8014d98:	b29b      	uxth	r3, r3
 8014d9a:	1ad3      	subs	r3, r2, r3
 8014d9c:	b29b      	uxth	r3, r3
 8014d9e:	3b01      	subs	r3, #1
 8014da0:	b29b      	uxth	r3, r3
 8014da2:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8014da6:	e00b      	b.n	8014dc0 <VL53L1_f_040+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8014da8:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8014dac:	b29a      	uxth	r2, r3
 8014dae:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014db2:	095b      	lsrs	r3, r3, #5
 8014db4:	b2db      	uxtb	r3, r3
 8014db6:	b29b      	uxth	r3, r3
 8014db8:	1ad3      	subs	r3, r2, r3
 8014dba:	b29b      	uxth	r3, r3
 8014dbc:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8014dc0:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8014dc4:	b29a      	uxth	r2, r3
 8014dc6:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014dca:	095b      	lsrs	r3, r3, #5
 8014dcc:	b2db      	uxtb	r3, r3
 8014dce:	b29b      	uxth	r3, r3
 8014dd0:	4413      	add	r3, r2
 8014dd2:	b29b      	uxth	r3, r3
 8014dd4:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8014dd8:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014ddc:	f003 0301 	and.w	r3, r3, #1
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d011      	beq.n	8014e08 <VL53L1_f_040+0x11e>
			bound_d_y = (int16_t) row -
 8014de4:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8014de8:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8014dea:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014dee:	f003 020f 	and.w	r2, r3, #15
 8014df2:	0fd3      	lsrs	r3, r2, #31
 8014df4:	4413      	add	r3, r2
 8014df6:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8014df8:	b29b      	uxth	r3, r3
 8014dfa:	1acb      	subs	r3, r1, r3
 8014dfc:	b29b      	uxth	r3, r3
 8014dfe:	3b01      	subs	r3, #1
 8014e00:	b29b      	uxth	r3, r3
 8014e02:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8014e06:	e00f      	b.n	8014e28 <VL53L1_f_040+0x13e>
		else
			bound_d_y = (int16_t) row -
 8014e08:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8014e0c:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8014e0e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014e12:	f003 020f 	and.w	r2, r3, #15
 8014e16:	0fd3      	lsrs	r3, r2, #31
 8014e18:	4413      	add	r3, r2
 8014e1a:	105b      	asrs	r3, r3, #1
 8014e1c:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8014e1e:	b29b      	uxth	r3, r3
 8014e20:	440b      	add	r3, r1
 8014e22:	b29b      	uxth	r3, r3
 8014e24:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 8014e28:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8014e2c:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8014e2e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014e32:	f003 020f 	and.w	r2, r3, #15
 8014e36:	0fd3      	lsrs	r3, r2, #31
 8014e38:	4413      	add	r3, r2
 8014e3a:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8014e3c:	b29b      	uxth	r3, r3
 8014e3e:	440b      	add	r3, r1
 8014e40:	b29b      	uxth	r3, r3
 8014e42:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8014e46:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d133      	bne.n	8014eb6 <VL53L1_f_040+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8014e4e:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8014e52:	b29a      	uxth	r2, r3
 8014e54:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8014e58:	4413      	add	r3, r2
 8014e5a:	b29b      	uxth	r3, r3
 8014e5c:	005b      	lsls	r3, r3, #1
 8014e5e:	b29b      	uxth	r3, r3
 8014e60:	3b0f      	subs	r3, #15
 8014e62:	b29b      	uxth	r3, r3
 8014e64:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8014e68:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8014e6c:	b29a      	uxth	r2, r3
 8014e6e:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8014e72:	4413      	add	r3, r2
 8014e74:	b29b      	uxth	r3, r3
 8014e76:	005b      	lsls	r3, r3, #1
 8014e78:	b29b      	uxth	r3, r3
 8014e7a:	3b0f      	subs	r3, #15
 8014e7c:	b29b      	uxth	r3, r3
 8014e7e:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8014e82:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8014e86:	b29a      	uxth	r2, r3
 8014e88:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8014e8c:	4413      	add	r3, r2
 8014e8e:	b29b      	uxth	r3, r3
 8014e90:	005b      	lsls	r3, r3, #1
 8014e92:	b29b      	uxth	r3, r3
 8014e94:	3b0f      	subs	r3, #15
 8014e96:	b29b      	uxth	r3, r3
 8014e98:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8014e9c:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8014ea0:	b29a      	uxth	r2, r3
 8014ea2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8014ea6:	4413      	add	r3, r2
 8014ea8:	b29b      	uxth	r3, r3
 8014eaa:	005b      	lsls	r3, r3, #1
 8014eac:	b29b      	uxth	r3, r3
 8014eae:	3b0f      	subs	r3, #15
 8014eb0:	b29b      	uxth	r3, r3
 8014eb2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8014eb6:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	f040 8135 	bne.w	801512a <VL53L1_f_040+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8014ec0:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 8014ec4:	17da      	asrs	r2, r3, #31
 8014ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014eca:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8014ece:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8014ed2:	17da      	asrs	r2, r3, #31
 8014ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014ed8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8014edc:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8014ee0:	460b      	mov	r3, r1
 8014ee2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014ee6:	fb02 f203 	mul.w	r2, r2, r3
 8014eea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014eee:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8014ef2:	4601      	mov	r1, r0
 8014ef4:	fb01 f303 	mul.w	r3, r1, r3
 8014ef8:	4413      	add	r3, r2
 8014efa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8014efe:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8014f02:	fba2 4501 	umull	r4, r5, r2, r1
 8014f06:	442b      	add	r3, r5
 8014f08:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8014f0a:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8014f0e:	17da      	asrs	r2, r3, #31
 8014f10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014f14:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 8014f18:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8014f1c:	17da      	asrs	r2, r3, #31
 8014f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8014f22:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8014f26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8014f2a:	460b      	mov	r3, r1
 8014f2c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014f30:	fb02 f203 	mul.w	r2, r2, r3
 8014f34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014f38:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 8014f3c:	4601      	mov	r1, r0
 8014f3e:	fb01 f303 	mul.w	r3, r1, r3
 8014f42:	4413      	add	r3, r2
 8014f44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014f48:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8014f4c:	fba2 8901 	umull	r8, r9, r2, r1
 8014f50:	444b      	add	r3, r9
 8014f52:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8014f54:	eb14 0308 	adds.w	r3, r4, r8
 8014f58:	64bb      	str	r3, [r7, #72]	; 0x48
 8014f5a:	eb45 0309 	adc.w	r3, r5, r9
 8014f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014f60:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8014f64:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8014f68:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8014f6c:	1c51      	adds	r1, r2, #1
 8014f6e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8014f72:	f143 0300 	adc.w	r3, r3, #0
 8014f76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8014f7a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8014f7e:	460b      	mov	r3, r1
 8014f80:	0fdb      	lsrs	r3, r3, #31
 8014f82:	2200      	movs	r2, #0
 8014f84:	643b      	str	r3, [r7, #64]	; 0x40
 8014f86:	647a      	str	r2, [r7, #68]	; 0x44
 8014f88:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8014f8c:	4623      	mov	r3, r4
 8014f8e:	4602      	mov	r2, r0
 8014f90:	189b      	adds	r3, r3, r2
 8014f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8014f94:	460b      	mov	r3, r1
 8014f96:	462a      	mov	r2, r5
 8014f98:	eb42 0303 	adc.w	r3, r2, r3
 8014f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014f9e:	f04f 0200 	mov.w	r2, #0
 8014fa2:	f04f 0300 	mov.w	r3, #0
 8014fa6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8014faa:	4621      	mov	r1, r4
 8014fac:	084a      	lsrs	r2, r1, #1
 8014fae:	4629      	mov	r1, r5
 8014fb0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8014fb4:	4629      	mov	r1, r5
 8014fb6:	104b      	asrs	r3, r1, #1
 8014fb8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8014fbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014fc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8014fca:	f04f 0000 	mov.w	r0, #0
 8014fce:	f04f 0100 	mov.w	r1, #0
 8014fd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8014fd6:	462b      	mov	r3, r5
 8014fd8:	0099      	lsls	r1, r3, #2
 8014fda:	4623      	mov	r3, r4
 8014fdc:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8014fe0:	4623      	mov	r3, r4
 8014fe2:	0098      	lsls	r0, r3, #2
 8014fe4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8014fe8:	1814      	adds	r4, r2, r0
 8014fea:	633c      	str	r4, [r7, #48]	; 0x30
 8014fec:	414b      	adcs	r3, r1
 8014fee:	637b      	str	r3, [r7, #52]	; 0x34
 8014ff0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8014ff4:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8014ff8:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 8014ffc:	17da      	asrs	r2, r3, #31
 8014ffe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015002:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8015006:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 801500a:	17da      	asrs	r2, r3, #31
 801500c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015010:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8015014:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8015018:	462b      	mov	r3, r5
 801501a:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 801501e:	4642      	mov	r2, r8
 8015020:	fb02 f203 	mul.w	r2, r2, r3
 8015024:	464b      	mov	r3, r9
 8015026:	4621      	mov	r1, r4
 8015028:	fb01 f303 	mul.w	r3, r1, r3
 801502c:	4413      	add	r3, r2
 801502e:	4622      	mov	r2, r4
 8015030:	4641      	mov	r1, r8
 8015032:	fba2 ab01 	umull	sl, fp, r2, r1
 8015036:	445b      	add	r3, fp
 8015038:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801503a:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 801503e:	17da      	asrs	r2, r3, #31
 8015040:	67bb      	str	r3, [r7, #120]	; 0x78
 8015042:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 8015044:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8015048:	17da      	asrs	r2, r3, #31
 801504a:	673b      	str	r3, [r7, #112]	; 0x70
 801504c:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801504e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8015052:	462b      	mov	r3, r5
 8015054:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8015058:	4642      	mov	r2, r8
 801505a:	fb02 f203 	mul.w	r2, r2, r3
 801505e:	464b      	mov	r3, r9
 8015060:	4621      	mov	r1, r4
 8015062:	fb01 f303 	mul.w	r3, r1, r3
 8015066:	4413      	add	r3, r2
 8015068:	4622      	mov	r2, r4
 801506a:	4641      	mov	r1, r8
 801506c:	fba2 1201 	umull	r1, r2, r2, r1
 8015070:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015074:	460a      	mov	r2, r1
 8015076:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 801507a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801507e:	4413      	add	r3, r2
 8015080:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8015084:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8015088:	460b      	mov	r3, r1
 801508a:	eb1a 0303 	adds.w	r3, sl, r3
 801508e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015090:	4613      	mov	r3, r2
 8015092:	eb4b 0303 	adc.w	r3, fp, r3
 8015096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015098:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801509c:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 80150a0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80150a4:	1c51      	adds	r1, r2, #1
 80150a6:	66b9      	str	r1, [r7, #104]	; 0x68
 80150a8:	f143 0300 	adc.w	r3, r3, #0
 80150ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80150ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80150b2:	460b      	mov	r3, r1
 80150b4:	0fdb      	lsrs	r3, r3, #31
 80150b6:	2200      	movs	r2, #0
 80150b8:	623b      	str	r3, [r7, #32]
 80150ba:	627a      	str	r2, [r7, #36]	; 0x24
 80150bc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80150c0:	4623      	mov	r3, r4
 80150c2:	4602      	mov	r2, r0
 80150c4:	189b      	adds	r3, r3, r2
 80150c6:	61bb      	str	r3, [r7, #24]
 80150c8:	460b      	mov	r3, r1
 80150ca:	462a      	mov	r2, r5
 80150cc:	eb42 0303 	adc.w	r3, r2, r3
 80150d0:	61fb      	str	r3, [r7, #28]
 80150d2:	f04f 0200 	mov.w	r2, #0
 80150d6:	f04f 0300 	mov.w	r3, #0
 80150da:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80150de:	4621      	mov	r1, r4
 80150e0:	084a      	lsrs	r2, r1, #1
 80150e2:	4629      	mov	r1, r5
 80150e4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80150e8:	4629      	mov	r1, r5
 80150ea:	104b      	asrs	r3, r1, #1
 80150ec:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 80150f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80150f4:	2200      	movs	r2, #0
 80150f6:	663b      	str	r3, [r7, #96]	; 0x60
 80150f8:	667a      	str	r2, [r7, #100]	; 0x64
 80150fa:	f04f 0200 	mov.w	r2, #0
 80150fe:	f04f 0300 	mov.w	r3, #0
 8015102:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8015106:	4629      	mov	r1, r5
 8015108:	008b      	lsls	r3, r1, #2
 801510a:	4621      	mov	r1, r4
 801510c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015110:	4621      	mov	r1, r4
 8015112:	008a      	lsls	r2, r1, #2
 8015114:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8015118:	1884      	adds	r4, r0, r2
 801511a:	613c      	str	r4, [r7, #16]
 801511c:	eb41 0303 	adc.w	r3, r1, r3
 8015120:	617b      	str	r3, [r7, #20]
 8015122:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8015126:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
 801512a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801512e:	2b00      	cmp	r3, #0
 8015130:	d132      	bne.n	8015198 <VL53L1_f_040+0x4ae>
		xtalk_avg = do_division_s(
 8015132:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8015136:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801513a:	1884      	adds	r4, r0, r2
 801513c:	65bc      	str	r4, [r7, #88]	; 0x58
 801513e:	eb41 0303 	adc.w	r3, r1, r3
 8015142:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015144:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8015148:	460b      	mov	r3, r1
 801514a:	3301      	adds	r3, #1
 801514c:	653b      	str	r3, [r7, #80]	; 0x50
 801514e:	4613      	mov	r3, r2
 8015150:	f143 0300 	adc.w	r3, r3, #0
 8015154:	657b      	str	r3, [r7, #84]	; 0x54
 8015156:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801515a:	460b      	mov	r3, r1
 801515c:	0fdb      	lsrs	r3, r3, #31
 801515e:	2200      	movs	r2, #0
 8015160:	60bb      	str	r3, [r7, #8]
 8015162:	60fa      	str	r2, [r7, #12]
 8015164:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8015168:	4623      	mov	r3, r4
 801516a:	4602      	mov	r2, r0
 801516c:	189b      	adds	r3, r3, r2
 801516e:	603b      	str	r3, [r7, #0]
 8015170:	460b      	mov	r3, r1
 8015172:	462a      	mov	r2, r5
 8015174:	eb42 0303 	adc.w	r3, r2, r3
 8015178:	607b      	str	r3, [r7, #4]
 801517a:	f04f 0200 	mov.w	r2, #0
 801517e:	f04f 0300 	mov.w	r3, #0
 8015182:	e9d7 4500 	ldrd	r4, r5, [r7]
 8015186:	4621      	mov	r1, r4
 8015188:	084a      	lsrs	r2, r1, #1
 801518a:	4629      	mov	r1, r5
 801518c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8015190:	4629      	mov	r1, r5
 8015192:	104b      	asrs	r3, r1, #1
 8015194:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
 8015198:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801519c:	2b00      	cmp	r3, #0
 801519e:	d109      	bne.n	80151b4 <VL53L1_f_040+0x4ca>
		if (xtalk_avg < 0)
 80151a0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	da05      	bge.n	80151b4 <VL53L1_f_040+0x4ca>
			xtalk_avg = 0;
 80151a8:	f04f 0200 	mov.w	r2, #0
 80151ac:	f04f 0300 	mov.w	r3, #0
 80151b0:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 80151b4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80151b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80151bc:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 80151be:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 80151c2:	4618      	mov	r0, r3
 80151c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80151c8:	46bd      	mov	sp, r7
 80151ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080151ce <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 80151ce:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80151d2:	b09a      	sub	sp, #104	; 0x68
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6478      	str	r0, [r7, #68]	; 0x44
 80151d8:	6439      	str	r1, [r7, #64]	; 0x40
 80151da:	63fa      	str	r2, [r7, #60]	; 0x3c
 80151dc:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53L1_Error status              = VL53L1_ERROR_NONE;
 80151de:	2300      	movs	r3, #0
 80151e0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 80151e4:	f04f 0200 	mov.w	r2, #0
 80151e8:	f04f 0300 	mov.w	r3, #0
 80151ec:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 80151f0:	f04f 0200 	mov.w	r2, #0
 80151f4:	f04f 0300 	mov.w	r3, #0
 80151f8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 80151fc:	f04f 0200 	mov.w	r2, #0
 8015200:	f04f 0300 	mov.w	r3, #0
 8015204:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 8015208:	2300      	movs	r3, #0
 801520a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 801520e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015210:	2200      	movs	r2, #0
 8015212:	633b      	str	r3, [r7, #48]	; 0x30
 8015214:	637a      	str	r2, [r7, #52]	; 0x34
 8015216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801521c:	2200      	movs	r2, #0
 801521e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015220:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015222:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8015226:	460b      	mov	r3, r1
 8015228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801522a:	fb02 f203 	mul.w	r2, r2, r3
 801522e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015230:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8015234:	4601      	mov	r1, r0
 8015236:	fb01 f303 	mul.w	r3, r1, r3
 801523a:	4413      	add	r3, r2
 801523c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801523e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015240:	fba2 4501 	umull	r4, r5, r2, r1
 8015244:	442b      	add	r3, r5
 8015246:	461d      	mov	r5, r3
 8015248:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 801524c:	623b      	str	r3, [r7, #32]
 801524e:	f145 0300 	adc.w	r3, r5, #0
 8015252:	627b      	str	r3, [r7, #36]	; 0x24
 8015254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015258:	f04f 0300 	mov.w	r3, #0
 801525c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8015260:	f7eb fcca 	bl	8000bf8 <__aeabi_uldivmod>
 8015264:	4602      	mov	r2, r0
 8015266:	460b      	mov	r3, r1
 8015268:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 801526c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801526e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8015272:	b29b      	uxth	r3, r3
 8015274:	2200      	movs	r2, #0
 8015276:	61bb      	str	r3, [r7, #24]
 8015278:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 801527a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801527c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8015280:	4622      	mov	r2, r4
 8015282:	fb02 f203 	mul.w	r2, r2, r3
 8015286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015288:	4629      	mov	r1, r5
 801528a:	fb01 f303 	mul.w	r3, r1, r3
 801528e:	4413      	add	r3, r2
 8015290:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015292:	4621      	mov	r1, r4
 8015294:	fba2 ab01 	umull	sl, fp, r2, r1
 8015298:	445b      	add	r3, fp
 801529a:	469b      	mov	fp, r3
 801529c:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 80152a0:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 80152a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80152a8:	f04f 0200 	mov.w	r2, #0
 80152ac:	f04f 0300 	mov.w	r3, #0
 80152b0:	0a02      	lsrs	r2, r0, #8
 80152b2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80152b6:	0a0b      	lsrs	r3, r1, #8
 80152b8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 80152bc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80152c0:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 80152c4:	6139      	str	r1, [r7, #16]
 80152c6:	f143 0300 	adc.w	r3, r3, #0
 80152ca:	617b      	str	r3, [r7, #20]
 80152cc:	f04f 0200 	mov.w	r2, #0
 80152d0:	f04f 0300 	mov.w	r3, #0
 80152d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80152d8:	4621      	mov	r1, r4
 80152da:	0aca      	lsrs	r2, r1, #11
 80152dc:	4629      	mov	r1, r5
 80152de:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 80152e2:	4629      	mov	r1, r5
 80152e4:	0acb      	lsrs	r3, r1, #11
 80152e6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 80152ea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80152ee:	2b01      	cmp	r3, #1
 80152f0:	d305      	bcc.n	80152fe <VL53L1_f_041+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 80152f2:	f04f 32ff 	mov.w	r2, #4294967295
 80152f6:	f04f 0300 	mov.w	r3, #0
 80152fa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 80152fe:	2300      	movs	r3, #0
 8015300:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015304:	e041      	b.n	801538a <VL53L1_f_041+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8015306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801530a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801530c:	3302      	adds	r3, #2
 801530e:	009b      	lsls	r3, r3, #2
 8015310:	4413      	add	r3, r2
 8015312:	685b      	ldr	r3, [r3, #4]
 8015314:	2200      	movs	r2, #0
 8015316:	60bb      	str	r3, [r7, #8]
 8015318:	60fa      	str	r2, [r7, #12]
 801531a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801531c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8015320:	4622      	mov	r2, r4
 8015322:	fb02 f203 	mul.w	r2, r2, r3
 8015326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015328:	4629      	mov	r1, r5
 801532a:	fb01 f303 	mul.w	r3, r1, r3
 801532e:	4413      	add	r3, r2
 8015330:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015332:	4621      	mov	r1, r4
 8015334:	fba2 8901 	umull	r8, r9, r2, r1
 8015338:	444b      	add	r3, r9
 801533a:	4699      	mov	r9, r3
 801533c:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 8015340:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8015344:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8015348:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 801534c:	6039      	str	r1, [r7, #0]
 801534e:	f143 0300 	adc.w	r3, r3, #0
 8015352:	607b      	str	r3, [r7, #4]
 8015354:	f04f 0200 	mov.w	r2, #0
 8015358:	f04f 0300 	mov.w	r3, #0
 801535c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8015360:	4621      	mov	r1, r4
 8015362:	0a8a      	lsrs	r2, r1, #10
 8015364:	4629      	mov	r1, r5
 8015366:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 801536a:	4629      	mov	r1, r5
 801536c:	0a8b      	lsrs	r3, r1, #10
 801536e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8015372:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8015376:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801537a:	3206      	adds	r2, #6
 801537c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8015380:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015384:	3301      	adds	r3, #1
 8015386:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801538a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801538c:	7a9b      	ldrb	r3, [r3, #10]
 801538e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8015392:	429a      	cmp	r2, r3
 8015394:	d3b7      	bcc.n	8015306 <VL53L1_f_041+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8015396:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 801539a:	4618      	mov	r0, r3
 801539c:	3768      	adds	r7, #104	; 0x68
 801539e:	46bd      	mov	sp, r7
 80153a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080153a4 <VL53L1_init_zone_config_structure>:
	uint8_t y_inc,
	uint8_t y_zones,
	uint8_t width,
	uint8_t height,
	VL53L1_zone_config_t   *pdata)
{
 80153a4:	b590      	push	{r4, r7, lr}
 80153a6:	b085      	sub	sp, #20
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	4604      	mov	r4, r0
 80153ac:	4608      	mov	r0, r1
 80153ae:	4611      	mov	r1, r2
 80153b0:	461a      	mov	r2, r3
 80153b2:	4623      	mov	r3, r4
 80153b4:	71fb      	strb	r3, [r7, #7]
 80153b6:	4603      	mov	r3, r0
 80153b8:	71bb      	strb	r3, [r7, #6]
 80153ba:	460b      	mov	r3, r1
 80153bc:	717b      	strb	r3, [r7, #5]
 80153be:	4613      	mov	r3, r2
 80153c0:	713b      	strb	r3, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80153c2:	2300      	movs	r3, #0
 80153c4:	72fb      	strb	r3, [r7, #11]

	uint8_t  x  = 0;
 80153c6:	2300      	movs	r3, #0
 80153c8:	73fb      	strb	r3, [r7, #15]
	uint8_t  y  = 0;
 80153ca:	2300      	movs	r3, #0
 80153cc:	73bb      	strb	r3, [r7, #14]
	uint16_t  i  = 0;
 80153ce:	2300      	movs	r3, #0
 80153d0:	81bb      	strh	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 80153d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153d4:	2210      	movs	r2, #16
 80153d6:	701a      	strb	r2, [r3, #0]

	i = 0;
 80153d8:	2300      	movs	r3, #0
 80153da:	81bb      	strh	r3, [r7, #12]

	for (x = 0 ; x < x_zones ; x++) {
 80153dc:	2300      	movs	r3, #0
 80153de:	73fb      	strb	r3, [r7, #15]
 80153e0:	e046      	b.n	8015470 <VL53L1_init_zone_config_structure+0xcc>
		for (y = 0 ; y <  y_zones ; y++) {
 80153e2:	2300      	movs	r3, #0
 80153e4:	73bb      	strb	r3, [r7, #14]
 80153e6:	e03b      	b.n	8015460 <VL53L1_init_zone_config_structure+0xbc>

			if (i < VL53L1_MAX_USER_ZONES) {
 80153e8:	89bb      	ldrh	r3, [r7, #12]
 80153ea:	2b0f      	cmp	r3, #15
 80153ec:	d832      	bhi.n	8015454 <VL53L1_init_zone_config_structure+0xb0>

				pdata->active_zones = (uint8_t)i;
 80153ee:	89bb      	ldrh	r3, [r7, #12]
 80153f0:	b2da      	uxtb	r2, r3
 80153f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f4:	705a      	strb	r2, [r3, #1]
				pdata->user_zones[i].height   = height;
 80153f6:	89bb      	ldrh	r3, [r7, #12]
 80153f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153fa:	3306      	adds	r3, #6
 80153fc:	009b      	lsls	r3, r3, #2
 80153fe:	4413      	add	r3, r2
 8015400:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015404:	71da      	strb	r2, [r3, #7]
				pdata->user_zones[i].width    = width;
 8015406:	89bb      	ldrh	r3, [r7, #12]
 8015408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801540a:	3306      	adds	r3, #6
 801540c:	009b      	lsls	r3, r3, #2
 801540e:	4413      	add	r3, r2
 8015410:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015414:	719a      	strb	r2, [r3, #6]
				pdata->user_zones[i].x_centre =
						x_off + (x * x_inc);
 8015416:	7bfa      	ldrb	r2, [r7, #15]
 8015418:	79bb      	ldrb	r3, [r7, #6]
 801541a:	fb12 f303 	smulbb	r3, r2, r3
 801541e:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].x_centre =
 8015420:	89bb      	ldrh	r3, [r7, #12]
						x_off + (x * x_inc);
 8015422:	79fa      	ldrb	r2, [r7, #7]
 8015424:	440a      	add	r2, r1
 8015426:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].x_centre =
 8015428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801542a:	3306      	adds	r3, #6
 801542c:	009b      	lsls	r3, r3, #2
 801542e:	4413      	add	r3, r2
 8015430:	460a      	mov	r2, r1
 8015432:	711a      	strb	r2, [r3, #4]
				pdata->user_zones[i].y_centre =
						y_off + (y * y_inc);
 8015434:	7bba      	ldrb	r2, [r7, #14]
 8015436:	f897 3020 	ldrb.w	r3, [r7, #32]
 801543a:	fb12 f303 	smulbb	r3, r2, r3
 801543e:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].y_centre =
 8015440:	89bb      	ldrh	r3, [r7, #12]
						y_off + (y * y_inc);
 8015442:	793a      	ldrb	r2, [r7, #4]
 8015444:	440a      	add	r2, r1
 8015446:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].y_centre =
 8015448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801544a:	3306      	adds	r3, #6
 801544c:	009b      	lsls	r3, r3, #2
 801544e:	4413      	add	r3, r2
 8015450:	460a      	mov	r2, r1
 8015452:	715a      	strb	r2, [r3, #5]
			}

			i++;
 8015454:	89bb      	ldrh	r3, [r7, #12]
 8015456:	3301      	adds	r3, #1
 8015458:	81bb      	strh	r3, [r7, #12]
		for (y = 0 ; y <  y_zones ; y++) {
 801545a:	7bbb      	ldrb	r3, [r7, #14]
 801545c:	3301      	adds	r3, #1
 801545e:	73bb      	strb	r3, [r7, #14]
 8015460:	7bba      	ldrb	r2, [r7, #14]
 8015462:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015466:	429a      	cmp	r2, r3
 8015468:	d3be      	bcc.n	80153e8 <VL53L1_init_zone_config_structure+0x44>
	for (x = 0 ; x < x_zones ; x++) {
 801546a:	7bfb      	ldrb	r3, [r7, #15]
 801546c:	3301      	adds	r3, #1
 801546e:	73fb      	strb	r3, [r7, #15]
 8015470:	7bfa      	ldrb	r2, [r7, #15]
 8015472:	797b      	ldrb	r3, [r7, #5]
 8015474:	429a      	cmp	r2, r3
 8015476:	d3b4      	bcc.n	80153e2 <VL53L1_init_zone_config_structure+0x3e>
		}
	}

	status = VL53L1_init_zone_config_histogram_bins(pdata);
 8015478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801547a:	f000 f86c 	bl	8015556 <VL53L1_init_zone_config_histogram_bins>
 801547e:	4603      	mov	r3, r0
 8015480:	72fb      	strb	r3, [r7, #11]


	LOG_FUNCTION_END(status);

	return status;
 8015482:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015486:	4618      	mov	r0, r3
 8015488:	3714      	adds	r7, #20
 801548a:	46bd      	mov	sp, r7
 801548c:	bd90      	pop	{r4, r7, pc}

0801548e <VL53L1_zone_preset_xtalk_planar>:


VL53L1_Error VL53L1_zone_preset_xtalk_planar(
	VL53L1_general_config_t	*pgeneral,
	VL53L1_zone_config_t    *pzone_cfg)
{
 801548e:	b580      	push	{r7, lr}
 8015490:	b084      	sub	sp, #16
 8015492:	af00      	add	r7, sp, #0
 8015494:	6078      	str	r0, [r7, #4]
 8015496:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015498:	2300      	movs	r3, #0
 801549a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pgeneral->global_config__stream_divider = 0x05;
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	2205      	movs	r2, #5
 80154a0:	705a      	strb	r2, [r3, #1]


	pzone_cfg->active_zones                 = 0x04;
 80154a2:	683b      	ldr	r3, [r7, #0]
 80154a4:	2204      	movs	r2, #4
 80154a6:	705a      	strb	r2, [r3, #1]

	pzone_cfg->user_zones[0].height         = 15;
 80154a8:	683b      	ldr	r3, [r7, #0]
 80154aa:	220f      	movs	r2, #15
 80154ac:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width          = 7;
 80154ae:	683b      	ldr	r3, [r7, #0]
 80154b0:	2207      	movs	r2, #7
 80154b2:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre       = 4;
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	2204      	movs	r2, #4
 80154b8:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre       = 8;
 80154ba:	683b      	ldr	r3, [r7, #0]
 80154bc:	2208      	movs	r2, #8
 80154be:	775a      	strb	r2, [r3, #29]

	pzone_cfg->user_zones[1].height         = 15;
 80154c0:	683b      	ldr	r3, [r7, #0]
 80154c2:	220f      	movs	r2, #15
 80154c4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pzone_cfg->user_zones[1].width          = 7;
 80154c8:	683b      	ldr	r3, [r7, #0]
 80154ca:	2207      	movs	r2, #7
 80154cc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pzone_cfg->user_zones[1].x_centre       = 12;
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	220c      	movs	r2, #12
 80154d4:	f883 2020 	strb.w	r2, [r3, #32]
	pzone_cfg->user_zones[1].y_centre       = 8;
 80154d8:	683b      	ldr	r3, [r7, #0]
 80154da:	2208      	movs	r2, #8
 80154dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pzone_cfg->user_zones[2].height         = 7;
 80154e0:	683b      	ldr	r3, [r7, #0]
 80154e2:	2207      	movs	r2, #7
 80154e4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pzone_cfg->user_zones[2].width          = 15;
 80154e8:	683b      	ldr	r3, [r7, #0]
 80154ea:	220f      	movs	r2, #15
 80154ec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pzone_cfg->user_zones[2].x_centre       = 8;
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	2208      	movs	r2, #8
 80154f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pzone_cfg->user_zones[2].y_centre       = 4;
 80154f8:	683b      	ldr	r3, [r7, #0]
 80154fa:	2204      	movs	r2, #4
 80154fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	pzone_cfg->user_zones[3].height         = 7;
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	2207      	movs	r2, #7
 8015504:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pzone_cfg->user_zones[3].width          = 15;
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	220f      	movs	r2, #15
 801550c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pzone_cfg->user_zones[3].x_centre       = 8;
 8015510:	683b      	ldr	r3, [r7, #0]
 8015512:	2208      	movs	r2, #8
 8015514:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pzone_cfg->user_zones[3].y_centre       = 12;
 8015518:	683b      	ldr	r3, [r7, #0]
 801551a:	220c      	movs	r2, #12
 801551c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29



	pzone_cfg->user_zones[4].height         = 15;
 8015520:	683b      	ldr	r3, [r7, #0]
 8015522:	220f      	movs	r2, #15
 8015524:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	pzone_cfg->user_zones[4].width          = 15;
 8015528:	683b      	ldr	r3, [r7, #0]
 801552a:	220f      	movs	r2, #15
 801552c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	pzone_cfg->user_zones[4].x_centre       = 8;
 8015530:	683b      	ldr	r3, [r7, #0]
 8015532:	2208      	movs	r2, #8
 8015534:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pzone_cfg->user_zones[4].y_centre       = 8;
 8015538:	683b      	ldr	r3, [r7, #0]
 801553a:	2208      	movs	r2, #8
 801553c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 8015540:	6838      	ldr	r0, [r7, #0]
 8015542:	f000 f808 	bl	8015556 <VL53L1_init_zone_config_histogram_bins>
 8015546:	4603      	mov	r3, r0
 8015548:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(status);

	return status;
 801554a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801554e:	4618      	mov	r0, r3
 8015550:	3710      	adds	r7, #16
 8015552:	46bd      	mov	sp, r7
 8015554:	bd80      	pop	{r7, pc}

08015556 <VL53L1_init_zone_config_histogram_bins>:


VL53L1_Error VL53L1_init_zone_config_histogram_bins(
	VL53L1_zone_config_t   *pdata)
{
 8015556:	b480      	push	{r7}
 8015558:	b085      	sub	sp, #20
 801555a:	af00      	add	r7, sp, #0
 801555c:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801555e:	2300      	movs	r3, #0
 8015560:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8015562:	2300      	movs	r3, #0
 8015564:	73fb      	strb	r3, [r7, #15]
 8015566:	e008      	b.n	801557a <VL53L1_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 8015568:	7bfb      	ldrb	r3, [r7, #15]
 801556a:	687a      	ldr	r2, [r7, #4]
 801556c:	4413      	add	r3, r2
 801556e:	2201      	movs	r2, #1
 8015570:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (i = 0; i < pdata->max_zones; i++)
 8015574:	7bfb      	ldrb	r3, [r7, #15]
 8015576:	3301      	adds	r3, #1
 8015578:	73fb      	strb	r3, [r7, #15]
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	781b      	ldrb	r3, [r3, #0]
 801557e:	7bfa      	ldrb	r2, [r7, #15]
 8015580:	429a      	cmp	r2, r3
 8015582:	d3f1      	bcc.n	8015568 <VL53L1_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 8015584:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8015588:	4618      	mov	r0, r3
 801558a:	3714      	adds	r7, #20
 801558c:	46bd      	mov	sp, r7
 801558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015592:	4770      	bx	lr

08015594 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8015594:	b580      	push	{r7, lr}
 8015596:	b084      	sub	sp, #16
 8015598:	af00      	add	r7, sp, #0
 801559a:	60f8      	str	r0, [r7, #12]
 801559c:	60b9      	str	r1, [r7, #8]
 801559e:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	68db      	ldr	r3, [r3, #12]
 80155a4:	68fa      	ldr	r2, [r7, #12]
 80155a6:	8910      	ldrh	r0, [r2, #8]
 80155a8:	687a      	ldr	r2, [r7, #4]
 80155aa:	b292      	uxth	r2, r2
 80155ac:	68b9      	ldr	r1, [r7, #8]
 80155ae:	4798      	blx	r3
 80155b0:	4603      	mov	r3, r0
}
 80155b2:	4618      	mov	r0, r3
 80155b4:	3710      	adds	r7, #16
 80155b6:	46bd      	mov	sp, r7
 80155b8:	bd80      	pop	{r7, pc}

080155ba <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80155ba:	b580      	push	{r7, lr}
 80155bc:	b084      	sub	sp, #16
 80155be:	af00      	add	r7, sp, #0
 80155c0:	60f8      	str	r0, [r7, #12]
 80155c2:	60b9      	str	r1, [r7, #8]
 80155c4:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	691b      	ldr	r3, [r3, #16]
 80155ca:	68fa      	ldr	r2, [r7, #12]
 80155cc:	8910      	ldrh	r0, [r2, #8]
 80155ce:	687a      	ldr	r2, [r7, #4]
 80155d0:	b292      	uxth	r2, r2
 80155d2:	68b9      	ldr	r1, [r7, #8]
 80155d4:	4798      	blx	r3
 80155d6:	4603      	mov	r3, r0
}
 80155d8:	4618      	mov	r0, r3
 80155da:	3710      	adds	r7, #16
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}

080155e0 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b086      	sub	sp, #24
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	60f8      	str	r0, [r7, #12]
 80155e8:	607a      	str	r2, [r7, #4]
 80155ea:	603b      	str	r3, [r7, #0]
 80155ec:	460b      	mov	r3, r1
 80155ee:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80155f0:	2300      	movs	r3, #0
 80155f2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80155f4:	683b      	ldr	r3, [r7, #0]
 80155f6:	2bff      	cmp	r3, #255	; 0xff
 80155f8:	d902      	bls.n	8015600 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 80155fa:	f06f 0303 	mvn.w	r3, #3
 80155fe:	e01d      	b.n	801563c <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8015600:	897b      	ldrh	r3, [r7, #10]
 8015602:	0a1b      	lsrs	r3, r3, #8
 8015604:	b29b      	uxth	r3, r3
 8015606:	b2da      	uxtb	r2, r3
 8015608:	4b0e      	ldr	r3, [pc, #56]	; (8015644 <VL53L1_WriteMulti+0x64>)
 801560a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801560c:	897b      	ldrh	r3, [r7, #10]
 801560e:	b2da      	uxtb	r2, r3
 8015610:	4b0c      	ldr	r3, [pc, #48]	; (8015644 <VL53L1_WriteMulti+0x64>)
 8015612:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8015614:	683a      	ldr	r2, [r7, #0]
 8015616:	6879      	ldr	r1, [r7, #4]
 8015618:	480b      	ldr	r0, [pc, #44]	; (8015648 <VL53L1_WriteMulti+0x68>)
 801561a:	f005 fa07 	bl	801aa2c <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 801561e:	683b      	ldr	r3, [r7, #0]
 8015620:	3302      	adds	r3, #2
 8015622:	461a      	mov	r2, r3
 8015624:	4907      	ldr	r1, [pc, #28]	; (8015644 <VL53L1_WriteMulti+0x64>)
 8015626:	68f8      	ldr	r0, [r7, #12]
 8015628:	f7ff ffb4 	bl	8015594 <_I2CWrite>
 801562c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801562e:	693b      	ldr	r3, [r7, #16]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d001      	beq.n	8015638 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8015634:	23f3      	movs	r3, #243	; 0xf3
 8015636:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 8015638:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801563c:	4618      	mov	r0, r3
 801563e:	3718      	adds	r7, #24
 8015640:	46bd      	mov	sp, r7
 8015642:	bd80      	pop	{r7, pc}
 8015644:	20008720 	.word	0x20008720
 8015648:	20008722 	.word	0x20008722

0801564c <VL53L1_ReadMulti>:

VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 801564c:	b580      	push	{r7, lr}
 801564e:	b086      	sub	sp, #24
 8015650:	af00      	add	r7, sp, #0
 8015652:	60f8      	str	r0, [r7, #12]
 8015654:	607a      	str	r2, [r7, #4]
 8015656:	603b      	str	r3, [r7, #0]
 8015658:	460b      	mov	r3, r1
 801565a:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801565c:	2300      	movs	r3, #0
 801565e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8015660:	897b      	ldrh	r3, [r7, #10]
 8015662:	0a1b      	lsrs	r3, r3, #8
 8015664:	b29b      	uxth	r3, r3
 8015666:	b2da      	uxtb	r2, r3
 8015668:	4b12      	ldr	r3, [pc, #72]	; (80156b4 <VL53L1_ReadMulti+0x68>)
 801566a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801566c:	897b      	ldrh	r3, [r7, #10]
 801566e:	b2da      	uxtb	r2, r3
 8015670:	4b10      	ldr	r3, [pc, #64]	; (80156b4 <VL53L1_ReadMulti+0x68>)
 8015672:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8015674:	2202      	movs	r2, #2
 8015676:	490f      	ldr	r1, [pc, #60]	; (80156b4 <VL53L1_ReadMulti+0x68>)
 8015678:	68f8      	ldr	r0, [r7, #12]
 801567a:	f7ff ff8b 	bl	8015594 <_I2CWrite>
 801567e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8015680:	693b      	ldr	r3, [r7, #16]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d002      	beq.n	801568c <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8015686:	23f3      	movs	r3, #243	; 0xf3
 8015688:	75fb      	strb	r3, [r7, #23]
        goto done;
 801568a:	e00c      	b.n	80156a6 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 801568c:	683a      	ldr	r2, [r7, #0]
 801568e:	6879      	ldr	r1, [r7, #4]
 8015690:	68f8      	ldr	r0, [r7, #12]
 8015692:	f7ff ff92 	bl	80155ba <_I2CRead>
 8015696:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8015698:	693b      	ldr	r3, [r7, #16]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d002      	beq.n	80156a4 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801569e:	23f3      	movs	r3, #243	; 0xf3
 80156a0:	75fb      	strb	r3, [r7, #23]
 80156a2:	e000      	b.n	80156a6 <VL53L1_ReadMulti+0x5a>
    }
done:
 80156a4:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 80156a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80156aa:	4618      	mov	r0, r3
 80156ac:	3718      	adds	r7, #24
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd80      	pop	{r7, pc}
 80156b2:	bf00      	nop
 80156b4:	20008720 	.word	0x20008720

080156b8 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b084      	sub	sp, #16
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
 80156c0:	460b      	mov	r3, r1
 80156c2:	807b      	strh	r3, [r7, #2]
 80156c4:	4613      	mov	r3, r2
 80156c6:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80156c8:	2300      	movs	r3, #0
 80156ca:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80156cc:	887b      	ldrh	r3, [r7, #2]
 80156ce:	0a1b      	lsrs	r3, r3, #8
 80156d0:	b29b      	uxth	r3, r3
 80156d2:	b2da      	uxtb	r2, r3
 80156d4:	4b0c      	ldr	r3, [pc, #48]	; (8015708 <VL53L1_WrByte+0x50>)
 80156d6:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80156d8:	887b      	ldrh	r3, [r7, #2]
 80156da:	b2da      	uxtb	r2, r3
 80156dc:	4b0a      	ldr	r3, [pc, #40]	; (8015708 <VL53L1_WrByte+0x50>)
 80156de:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 80156e0:	4a09      	ldr	r2, [pc, #36]	; (8015708 <VL53L1_WrByte+0x50>)
 80156e2:	787b      	ldrb	r3, [r7, #1]
 80156e4:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80156e6:	2203      	movs	r2, #3
 80156e8:	4907      	ldr	r1, [pc, #28]	; (8015708 <VL53L1_WrByte+0x50>)
 80156ea:	6878      	ldr	r0, [r7, #4]
 80156ec:	f7ff ff52 	bl	8015594 <_I2CWrite>
 80156f0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80156f2:	68bb      	ldr	r3, [r7, #8]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d001      	beq.n	80156fc <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80156f8:	23f3      	movs	r3, #243	; 0xf3
 80156fa:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 80156fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015700:	4618      	mov	r0, r3
 8015702:	3710      	adds	r7, #16
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}
 8015708:	20008720 	.word	0x20008720

0801570c <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 801570c:	b580      	push	{r7, lr}
 801570e:	b084      	sub	sp, #16
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
 8015714:	460b      	mov	r3, r1
 8015716:	807b      	strh	r3, [r7, #2]
 8015718:	4613      	mov	r3, r2
 801571a:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801571c:	2300      	movs	r3, #0
 801571e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8015720:	887b      	ldrh	r3, [r7, #2]
 8015722:	0a1b      	lsrs	r3, r3, #8
 8015724:	b29b      	uxth	r3, r3
 8015726:	b2da      	uxtb	r2, r3
 8015728:	4b10      	ldr	r3, [pc, #64]	; (801576c <VL53L1_WrWord+0x60>)
 801572a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801572c:	887b      	ldrh	r3, [r7, #2]
 801572e:	b2da      	uxtb	r2, r3
 8015730:	4b0e      	ldr	r3, [pc, #56]	; (801576c <VL53L1_WrWord+0x60>)
 8015732:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8015734:	883b      	ldrh	r3, [r7, #0]
 8015736:	0a1b      	lsrs	r3, r3, #8
 8015738:	b29b      	uxth	r3, r3
 801573a:	b2da      	uxtb	r2, r3
 801573c:	4b0b      	ldr	r3, [pc, #44]	; (801576c <VL53L1_WrWord+0x60>)
 801573e:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8015740:	883b      	ldrh	r3, [r7, #0]
 8015742:	b2da      	uxtb	r2, r3
 8015744:	4b09      	ldr	r3, [pc, #36]	; (801576c <VL53L1_WrWord+0x60>)
 8015746:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8015748:	2204      	movs	r2, #4
 801574a:	4908      	ldr	r1, [pc, #32]	; (801576c <VL53L1_WrWord+0x60>)
 801574c:	6878      	ldr	r0, [r7, #4]
 801574e:	f7ff ff21 	bl	8015594 <_I2CWrite>
 8015752:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8015754:	68bb      	ldr	r3, [r7, #8]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d001      	beq.n	801575e <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801575a:	23f3      	movs	r3, #243	; 0xf3
 801575c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 801575e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015762:	4618      	mov	r0, r3
 8015764:	3710      	adds	r7, #16
 8015766:	46bd      	mov	sp, r7
 8015768:	bd80      	pop	{r7, pc}
 801576a:	bf00      	nop
 801576c:	20008720 	.word	0x20008720

08015770 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8015770:	b580      	push	{r7, lr}
 8015772:	b086      	sub	sp, #24
 8015774:	af00      	add	r7, sp, #0
 8015776:	60f8      	str	r0, [r7, #12]
 8015778:	460b      	mov	r3, r1
 801577a:	607a      	str	r2, [r7, #4]
 801577c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801577e:	2300      	movs	r3, #0
 8015780:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8015782:	897b      	ldrh	r3, [r7, #10]
 8015784:	0a1b      	lsrs	r3, r3, #8
 8015786:	b29b      	uxth	r3, r3
 8015788:	b2da      	uxtb	r2, r3
 801578a:	4b12      	ldr	r3, [pc, #72]	; (80157d4 <VL53L1_RdByte+0x64>)
 801578c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801578e:	897b      	ldrh	r3, [r7, #10]
 8015790:	b2da      	uxtb	r2, r3
 8015792:	4b10      	ldr	r3, [pc, #64]	; (80157d4 <VL53L1_RdByte+0x64>)
 8015794:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8015796:	2202      	movs	r2, #2
 8015798:	490e      	ldr	r1, [pc, #56]	; (80157d4 <VL53L1_RdByte+0x64>)
 801579a:	68f8      	ldr	r0, [r7, #12]
 801579c:	f7ff fefa 	bl	8015594 <_I2CWrite>
 80157a0:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80157a2:	693b      	ldr	r3, [r7, #16]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d002      	beq.n	80157ae <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80157a8:	23f3      	movs	r3, #243	; 0xf3
 80157aa:	75fb      	strb	r3, [r7, #23]
        goto done;
 80157ac:	e00c      	b.n	80157c8 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 80157ae:	2201      	movs	r2, #1
 80157b0:	6879      	ldr	r1, [r7, #4]
 80157b2:	68f8      	ldr	r0, [r7, #12]
 80157b4:	f7ff ff01 	bl	80155ba <_I2CRead>
 80157b8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80157ba:	693b      	ldr	r3, [r7, #16]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d002      	beq.n	80157c6 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80157c0:	23f3      	movs	r3, #243	; 0xf3
 80157c2:	75fb      	strb	r3, [r7, #23]
 80157c4:	e000      	b.n	80157c8 <VL53L1_RdByte+0x58>
    }
done:
 80157c6:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 80157c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80157cc:	4618      	mov	r0, r3
 80157ce:	3718      	adds	r7, #24
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd80      	pop	{r7, pc}
 80157d4:	20008720 	.word	0x20008720

080157d8 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 80157d8:	b580      	push	{r7, lr}
 80157da:	b086      	sub	sp, #24
 80157dc:	af00      	add	r7, sp, #0
 80157de:	60f8      	str	r0, [r7, #12]
 80157e0:	460b      	mov	r3, r1
 80157e2:	607a      	str	r2, [r7, #4]
 80157e4:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80157e6:	2300      	movs	r3, #0
 80157e8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80157ea:	897b      	ldrh	r3, [r7, #10]
 80157ec:	0a1b      	lsrs	r3, r3, #8
 80157ee:	b29b      	uxth	r3, r3
 80157f0:	b2da      	uxtb	r2, r3
 80157f2:	4b18      	ldr	r3, [pc, #96]	; (8015854 <VL53L1_RdWord+0x7c>)
 80157f4:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80157f6:	897b      	ldrh	r3, [r7, #10]
 80157f8:	b2da      	uxtb	r2, r3
 80157fa:	4b16      	ldr	r3, [pc, #88]	; (8015854 <VL53L1_RdWord+0x7c>)
 80157fc:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80157fe:	2202      	movs	r2, #2
 8015800:	4914      	ldr	r1, [pc, #80]	; (8015854 <VL53L1_RdWord+0x7c>)
 8015802:	68f8      	ldr	r0, [r7, #12]
 8015804:	f7ff fec6 	bl	8015594 <_I2CWrite>
 8015808:	6138      	str	r0, [r7, #16]

    if( status_int ){
 801580a:	693b      	ldr	r3, [r7, #16]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d002      	beq.n	8015816 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8015810:	23f3      	movs	r3, #243	; 0xf3
 8015812:	75fb      	strb	r3, [r7, #23]
        goto done;
 8015814:	e017      	b.n	8015846 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8015816:	2202      	movs	r2, #2
 8015818:	490e      	ldr	r1, [pc, #56]	; (8015854 <VL53L1_RdWord+0x7c>)
 801581a:	68f8      	ldr	r0, [r7, #12]
 801581c:	f7ff fecd 	bl	80155ba <_I2CRead>
 8015820:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8015822:	693b      	ldr	r3, [r7, #16]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d002      	beq.n	801582e <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8015828:	23f3      	movs	r3, #243	; 0xf3
 801582a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801582c:	e00b      	b.n	8015846 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 801582e:	4b09      	ldr	r3, [pc, #36]	; (8015854 <VL53L1_RdWord+0x7c>)
 8015830:	781b      	ldrb	r3, [r3, #0]
 8015832:	b29b      	uxth	r3, r3
 8015834:	021b      	lsls	r3, r3, #8
 8015836:	b29a      	uxth	r2, r3
 8015838:	4b06      	ldr	r3, [pc, #24]	; (8015854 <VL53L1_RdWord+0x7c>)
 801583a:	785b      	ldrb	r3, [r3, #1]
 801583c:	b29b      	uxth	r3, r3
 801583e:	4413      	add	r3, r2
 8015840:	b29a      	uxth	r2, r3
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8015846:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801584a:	4618      	mov	r0, r3
 801584c:	3718      	adds	r7, #24
 801584e:	46bd      	mov	sp, r7
 8015850:	bd80      	pop	{r7, pc}
 8015852:	bf00      	nop
 8015854:	20008720 	.word	0x20008720

08015858 <VL53L1_GetTickCount>:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(VL53L1_DEV Dev, uint32_t *ptick_count_ms)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b084      	sub	sp, #16
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
 8015860:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8015862:	2300      	movs	r3, #0
 8015864:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	695b      	ldr	r3, [r3, #20]
 801586a:	4798      	blx	r3
 801586c:	4603      	mov	r3, r0
 801586e:	461a      	mov	r2, r3
 8015870:	683b      	ldr	r3, [r7, #0]
 8015872:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8015874:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015878:	4618      	mov	r0, r3
 801587a:	3710      	adds	r7, #16
 801587c:	46bd      	mov	sp, r7
 801587e:	bd80      	pop	{r7, pc}

08015880 <VL53L1_WaitMs>:
	
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_DEV Dev, int32_t wait_ms){
 8015880:	b580      	push	{r7, lr}
 8015882:	b082      	sub	sp, #8
 8015884:	af00      	add	r7, sp, #0
 8015886:	6078      	str	r0, [r7, #4]
 8015888:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_ms);
 801588a:	683b      	ldr	r3, [r7, #0]
 801588c:	4619      	mov	r1, r3
 801588e:	6878      	ldr	r0, [r7, #4]
 8015890:	f000 f8d2 	bl	8015a38 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8015894:	2300      	movs	r3, #0
}
 8015896:	4618      	mov	r0, r3
 8015898:	3708      	adds	r7, #8
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}
	...

080158a0 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_DEV Dev, int32_t wait_us){
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b082      	sub	sp, #8
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
 80158a8:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_us/1000);
 80158aa:	683b      	ldr	r3, [r7, #0]
 80158ac:	4a07      	ldr	r2, [pc, #28]	; (80158cc <VL53L1_WaitUs+0x2c>)
 80158ae:	fb82 1203 	smull	r1, r2, r2, r3
 80158b2:	1192      	asrs	r2, r2, #6
 80158b4:	17db      	asrs	r3, r3, #31
 80158b6:	1ad3      	subs	r3, r2, r3
 80158b8:	4619      	mov	r1, r3
 80158ba:	6878      	ldr	r0, [r7, #4]
 80158bc:	f000 f8bc 	bl	8015a38 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 80158c0:	2300      	movs	r3, #0
}
 80158c2:	4618      	mov	r0, r3
 80158c4:	3708      	adds	r7, #8
 80158c6:	46bd      	mov	sp, r7
 80158c8:	bd80      	pop	{r7, pc}
 80158ca:	bf00      	nop
 80158cc:	10624dd3 	.word	0x10624dd3

080158d0 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 80158d0:	b590      	push	{r4, r7, lr}
 80158d2:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80158d6:	af00      	add	r7, sp, #0
 80158d8:	f507 740a 	add.w	r4, r7, #552	; 0x228
 80158dc:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 80158e0:	6020      	str	r0, [r4, #0]
 80158e2:	f507 700a 	add.w	r0, r7, #552	; 0x228
 80158e6:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 80158ea:	6001      	str	r1, [r0, #0]
 80158ec:	4619      	mov	r1, r3
 80158ee:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80158f2:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 80158f6:	801a      	strh	r2, [r3, #0]
 80158f8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80158fc:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 8015900:	460a      	mov	r2, r1
 8015902:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8015904:	2300      	movs	r3, #0
 8015906:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 801590a:	2300      	movs	r3, #0
 801590c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8015910:	2300      	movs	r3, #0
 8015912:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8015916:	2300      	movs	r3, #0
 8015918:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 801591c:	2300      	movs	r3, #0
 801591e:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8015922:	2300      	movs	r3, #0
 8015924:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8015928:	f107 0310 	add.w	r3, r7, #16
 801592c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015930:	4940      	ldr	r1, [pc, #256]	; (8015a34 <VL53L1_WaitValueMaskEx+0x164>)
 8015932:	4618      	mov	r0, r3
 8015934:	f005 fd9e 	bl	801b474 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(Dev, &start_time_ms);
 8015938:	f507 7206 	add.w	r2, r7, #536	; 0x218
 801593c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015940:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8015944:	4611      	mov	r1, r2
 8015946:	6818      	ldr	r0, [r3, #0]
 8015948:	f7ff ff86 	bl	8015858 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 801594c:	e04e      	b.n	80159ec <VL53L1_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 801594e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8015952:	2b00      	cmp	r3, #0
 8015954:	d110      	bne.n	8015978 <VL53L1_WaitValueMaskEx+0xa8>
			status = VL53L1_RdByte(
 8015956:	f207 2213 	addw	r2, r7, #531	; 0x213
 801595a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801595e:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8015962:	8819      	ldrh	r1, [r3, #0]
 8015964:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015968:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801596c:	6818      	ldr	r0, [r3, #0]
 801596e:	f7ff feff 	bl	8015770 <VL53L1_RdByte>
 8015972:	4603      	mov	r3, r0
 8015974:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8015978:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 801597c:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8015980:	4013      	ands	r3, r2
 8015982:	b2db      	uxtb	r3, r3
 8015984:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8015988:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 801598c:	7812      	ldrb	r2, [r2, #0]
 801598e:	429a      	cmp	r2, r3
 8015990:	d102      	bne.n	8015998 <VL53L1_WaitValueMaskEx+0xc8>
			found = 1;
 8015992:	2301      	movs	r3, #1
 8015994:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8015998:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 801599c:	2b00      	cmp	r3, #0
 801599e:	d114      	bne.n	80159ca <VL53L1_WaitValueMaskEx+0xfa>
 80159a0:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d110      	bne.n	80159ca <VL53L1_WaitValueMaskEx+0xfa>
			found == 0 &&
 80159a8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d00c      	beq.n	80159ca <VL53L1_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 80159b0:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80159b4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80159b8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80159bc:	4611      	mov	r1, r2
 80159be:	6818      	ldr	r0, [r3, #0]
 80159c0:	f7ff ff5e 	bl	8015880 <VL53L1_WaitMs>
 80159c4:	4603      	mov	r3, r0
 80159c6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(Dev, &current_time_ms);
 80159ca:	f507 7205 	add.w	r2, r7, #532	; 0x214
 80159ce:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80159d2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80159d6:	4611      	mov	r1, r2
 80159d8:	6818      	ldr	r0, [r3, #0]
 80159da:	f7ff ff3d 	bl	8015858 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 80159de:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80159e2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80159e6:	1ad3      	subs	r3, r2, r3
 80159e8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 80159ec:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d10c      	bne.n	8015a0e <VL53L1_WaitValueMaskEx+0x13e>
 80159f4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80159f8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80159fc:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	429a      	cmp	r2, r3
 8015a04:	d203      	bcs.n	8015a0e <VL53L1_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 8015a06:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d09f      	beq.n	801594e <VL53L1_WaitValueMaskEx+0x7e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8015a0e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d106      	bne.n	8015a24 <VL53L1_WaitValueMaskEx+0x154>
 8015a16:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d102      	bne.n	8015a24 <VL53L1_WaitValueMaskEx+0x154>
		status = VL53L1_ERROR_TIME_OUT;
 8015a1e:	23f9      	movs	r3, #249	; 0xf9
 8015a20:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8015a24:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8015a28:	4618      	mov	r0, r3
 8015a2a:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bd90      	pop	{r4, r7, pc}
 8015a32:	bf00      	nop
 8015a34:	0801d9f0 	.word	0x0801d9f0

08015a38 <VL53L1_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53L1_Error
  */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay)
{
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	b084      	sub	sp, #16
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	6078      	str	r0, [r7, #4]
 8015a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	695b      	ldr	r3, [r3, #20]
 8015a46:	4798      	blx	r3
 8015a48:	4603      	mov	r3, r0
 8015a4a:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8015a4c:	bf00      	nop
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	695b      	ldr	r3, [r3, #20]
 8015a52:	4798      	blx	r3
 8015a54:	4603      	mov	r3, r0
 8015a56:	461a      	mov	r2, r3
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	1ad3      	subs	r3, r2, r3
 8015a5c:	683a      	ldr	r2, [r7, #0]
 8015a5e:	429a      	cmp	r2, r3
 8015a60:	d8f5      	bhi.n	8015a4e <VL53L1_Delay+0x16>
  {
  }

  return VL53L1_ERROR_NONE;
 8015a62:	2300      	movs	r3, #0
}
 8015a64:	4618      	mov	r0, r3
 8015a66:	3710      	adds	r7, #16
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	bd80      	pop	{r7, pc}

08015a6c <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b08c      	sub	sp, #48	; 0x30
 8015a70:	af06      	add	r7, sp, #24
 8015a72:	60f8      	str	r0, [r7, #12]
 8015a74:	60b9      	str	r1, [r7, #8]
 8015a76:	607a      	str	r2, [r7, #4]
 8015a78:	603b      	str	r3, [r7, #0]



	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 8015a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a80:	9304      	str	r3, [sp, #16]
 8015a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a84:	9303      	str	r3, [sp, #12]
 8015a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a88:	9302      	str	r3, [sp, #8]
 8015a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a8c:	9301      	str	r3, [sp, #4]
 8015a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a90:	9300      	str	r3, [sp, #0]
 8015a92:	6a3b      	ldr	r3, [r7, #32]
 8015a94:	683a      	ldr	r2, [r7, #0]
 8015a96:	6879      	ldr	r1, [r7, #4]
 8015a98:	68b8      	ldr	r0, [r7, #8]
 8015a9a:	f7fc fefb 	bl	8012894 <VL53L1_hist_process_data>
 8015a9e:	4603      	mov	r3, r0
 8015aa0:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8015aa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	3718      	adds	r7, #24
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	bd80      	pop	{r7, pc}

08015aae <VL53L1CB_RegisterBusIO>:
  * @param pObj    vl53l1cb context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_RegisterBusIO(VL53L1CB_Object_t *pObj, VL53L1CB_IO_t *pIO)
{
 8015aae:	b580      	push	{r7, lr}
 8015ab0:	b084      	sub	sp, #16
 8015ab2:	af00      	add	r7, sp, #0
 8015ab4:	6078      	str	r0, [r7, #4]
 8015ab6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d103      	bne.n	8015ac6 <VL53L1CB_RegisterBusIO+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015abe:	f06f 0301 	mvn.w	r3, #1
 8015ac2:	60fb      	str	r3, [r7, #12]
 8015ac4:	e023      	b.n	8015b0e <VL53L1CB_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8015ac6:	683b      	ldr	r3, [r7, #0]
 8015ac8:	681a      	ldr	r2, [r3, #0]
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8015ace:	683b      	ldr	r3, [r7, #0]
 8015ad0:	685a      	ldr	r2, [r3, #4]
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8015ad6:	683b      	ldr	r3, [r7, #0]
 8015ad8:	891a      	ldrh	r2, [r3, #8]
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8015ade:	683b      	ldr	r3, [r7, #0]
 8015ae0:	68da      	ldr	r2, [r3, #12]
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8015ae6:	683b      	ldr	r3, [r7, #0]
 8015ae8:	691a      	ldr	r2, [r3, #16]
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8015aee:	683b      	ldr	r3, [r7, #0]
 8015af0:	695a      	ldr	r2, [r3, #20]
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d004      	beq.n	8015b08 <VL53L1CB_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	4798      	blx	r3
 8015b04:	60f8      	str	r0, [r7, #12]
 8015b06:	e002      	b.n	8015b0e <VL53L1CB_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L1CB_ERROR;
 8015b08:	f04f 33ff 	mov.w	r3, #4294967295
 8015b0c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
}
 8015b10:	4618      	mov	r0, r3
 8015b12:	3710      	adds	r7, #16
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bd80      	pop	{r7, pc}

08015b18 <VL53L1CB_Init>:
  * @brief Initializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Init(VL53L1CB_Object_t *pObj)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b084      	sub	sp, #16
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015b26:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d003      	beq.n	8015b36 <VL53L1CB_Init+0x1e>
  {
    ret =  VL53L1CB_ERROR;
 8015b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8015b32:	60fb      	str	r3, [r7, #12]
 8015b34:	e04d      	b.n	8015bd2 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_WaitDeviceBooted(pObj) != VL53L1_ERROR_NONE)
 8015b36:	6878      	ldr	r0, [r7, #4]
 8015b38:	f7ed f8d1 	bl	8002cde <VL53L1_WaitDeviceBooted>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d003      	beq.n	8015b4a <VL53L1CB_Init+0x32>
  {
    ret =  VL53L1CB_ERROR;
 8015b42:	f04f 33ff 	mov.w	r3, #4294967295
 8015b46:	60fb      	str	r3, [r7, #12]
 8015b48:	e043      	b.n	8015bd2 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_DataInit(pObj) != VL53L1_ERROR_NONE)
 8015b4a:	6878      	ldr	r0, [r7, #4]
 8015b4c:	f7ed f847 	bl	8002bde <VL53L1_DataInit>
 8015b50:	4603      	mov	r3, r0
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d003      	beq.n	8015b5e <VL53L1CB_Init+0x46>
  {
    ret = VL53L1CB_ERROR;
 8015b56:	f04f 33ff 	mov.w	r3, #4294967295
 8015b5a:	60fb      	str	r3, [r7, #12]
 8015b5c:	e039      	b.n	8015bd2 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_StaticInit(pObj) != VL53L1_ERROR_NONE)
 8015b5e:	6878      	ldr	r0, [r7, #4]
 8015b60:	f7ed f892 	bl	8002c88 <VL53L1_StaticInit>
 8015b64:	4603      	mov	r3, r0
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d003      	beq.n	8015b72 <VL53L1CB_Init+0x5a>
  {
    ret = VL53L1CB_ERROR;
 8015b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8015b6e:	60fb      	str	r3, [r7, #12]
 8015b70:	e02f      	b.n	8015bd2 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_PerformRefSpadManagement(pObj) != VL53L1_ERROR_NONE)
 8015b72:	6878      	ldr	r0, [r7, #4]
 8015b74:	f7ee fe8a 	bl	800488c <VL53L1_PerformRefSpadManagement>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d003      	beq.n	8015b86 <VL53L1CB_Init+0x6e>
  {
    ret = VL53L1CB_ERROR;
 8015b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8015b82:	60fb      	str	r3, [r7, #12]
 8015b84:	e025      	b.n	8015bd2 <VL53L1CB_Init+0xba>
  }
  else
  {
    pObj->IsRanging = 0;
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    pObj->IsBlocking = 0;
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015b98:	2200      	movs	r2, #0
 8015b9a:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
    pObj->IsContinuous = 0;
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
    pObj->IsAmbientEnabled = 0;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = 0;
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
    pObj->IsInitialized = 1;
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015bc8:	2201      	movs	r2, #1
 8015bca:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    ret = VL53L1CB_OK;
 8015bce:	2300      	movs	r3, #0
 8015bd0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3710      	adds	r7, #16
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}

08015bdc <VL53L1CB_DeInit>:
  * @brief Deinitializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_DeInit(VL53L1CB_Object_t *pObj)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b084      	sub	sp, #16
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L1CB_ERROR;
 8015be4:	f04f 33ff 	mov.w	r3, #4294967295
 8015be8:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015bf0:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8015bf4:	2b01      	cmp	r3, #1
 8015bf6:	d111      	bne.n	8015c1c <VL53L1CB_DeInit+0x40>
  {
    /* De-initialize the vl53l1cb interface */
    if (pObj->IO.DeInit() != 0)
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	685b      	ldr	r3, [r3, #4]
 8015bfc:	4798      	blx	r3
 8015bfe:	4603      	mov	r3, r0
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d003      	beq.n	8015c0c <VL53L1CB_DeInit+0x30>
    {
      ret = VL53L1CB_ERROR;
 8015c04:	f04f 33ff 	mov.w	r3, #4294967295
 8015c08:	60fb      	str	r3, [r7, #12]
 8015c0a:	e007      	b.n	8015c1c <VL53L1CB_DeInit+0x40>
    }
    else
    {
      ret = VL53L1CB_OK;
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015c16:	2200      	movs	r2, #0
 8015c18:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    }
  }

  return ret;
 8015c1c:	68fb      	ldr	r3, [r7, #12]
}
 8015c1e:	4618      	mov	r0, r3
 8015c20:	3710      	adds	r7, #16
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bd80      	pop	{r7, pc}

08015c26 <VL53L1CB_ReadID>:
  * @param pObj    vl53l1cb context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ReadID(VL53L1CB_Object_t *pObj, uint32_t *pId)
{
 8015c26:	b580      	push	{r7, lr}
 8015c28:	b084      	sub	sp, #16
 8015c2a:	af00      	add	r7, sp, #0
 8015c2c:	6078      	str	r0, [r7, #4]
 8015c2e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d002      	beq.n	8015c3c <VL53L1CB_ReadID+0x16>
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d103      	bne.n	8015c44 <VL53L1CB_ReadID+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015c3c:	f06f 0301 	mvn.w	r3, #1
 8015c40:	60fb      	str	r3, [r7, #12]
 8015c42:	e00a      	b.n	8015c5a <VL53L1CB_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8015c44:	683b      	ldr	r3, [r7, #0]
 8015c46:	2200      	movs	r2, #0
 8015c48:	601a      	str	r2, [r3, #0]
    ret = VL53L1_RdWord(pObj, VL53L1CB_ID_REG, (uint16_t *) pId);
 8015c4a:	683a      	ldr	r2, [r7, #0]
 8015c4c:	f240 110f 	movw	r1, #271	; 0x10f
 8015c50:	6878      	ldr	r0, [r7, #4]
 8015c52:	f7ff fdc1 	bl	80157d8 <VL53L1_RdWord>
 8015c56:	4603      	mov	r3, r0
 8015c58:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015c5a:	68fb      	ldr	r3, [r7, #12]
}
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	3710      	adds	r7, #16
 8015c60:	46bd      	mov	sp, r7
 8015c62:	bd80      	pop	{r7, pc}

08015c64 <VL53L1CB_GetCapabilities>:
  * @param pObj    vl53l1cb context object.
  * @param pCap    Pointer to the vl53l1cb capabilities.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetCapabilities(VL53L1CB_Object_t *pObj, VL53L1CB_Capabilities_t *pCap)
{
 8015c64:	b480      	push	{r7}
 8015c66:	b085      	sub	sp, #20
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
 8015c6c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d002      	beq.n	8015c7a <VL53L1CB_GetCapabilities+0x16>
 8015c74:	683b      	ldr	r3, [r7, #0]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d103      	bne.n	8015c82 <VL53L1CB_GetCapabilities+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015c7a:	f06f 0301 	mvn.w	r3, #1
 8015c7e:	60fb      	str	r3, [r7, #12]
 8015c80:	e00d      	b.n	8015c9e <VL53L1CB_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8015c82:	683b      	ldr	r3, [r7, #0]
 8015c84:	2201      	movs	r2, #1
 8015c86:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L1CB_NB_TARGET_PER_ZONE;
 8015c88:	683b      	ldr	r3, [r7, #0]
 8015c8a:	2204      	movs	r2, #4
 8015c8c:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8015c8e:	683b      	ldr	r3, [r7, #0]
 8015c90:	2201      	movs	r2, #1
 8015c92:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8015c94:	683b      	ldr	r3, [r7, #0]
 8015c96:	2200      	movs	r2, #0
 8015c98:	60da      	str	r2, [r3, #12]

    ret = VL53L1CB_OK;
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015c9e:	68fb      	ldr	r3, [r7, #12]
}
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	3714      	adds	r7, #20
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015caa:	4770      	bx	lr

08015cac <VL53L1CB_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L1CB the profile corresponds to the distance modes.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigProfile(VL53L1CB_Object_t *pObj, VL53L1CB_ProfileConfig_t *pConfig)
{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	b084      	sub	sp, #16
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
 8015cb4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d009      	beq.n	8015cd0 <VL53L1CB_ConfigProfile+0x24>
 8015cbc:	683b      	ldr	r3, [r7, #0]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d006      	beq.n	8015cd0 <VL53L1CB_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8015cc2:	683b      	ldr	r3, [r7, #0]
 8015cc4:	781b      	ldrb	r3, [r3, #0]
 8015cc6:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L1CB_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8015cc8:	7afb      	ldrb	r3, [r7, #11]
 8015cca:	2b01      	cmp	r3, #1
 8015ccc:	d103      	bne.n	8015cd6 <VL53L1CB_ConfigProfile+0x2a>
 8015cce:	e00c      	b.n	8015cea <VL53L1CB_ConfigProfile+0x3e>
    return VL53L1CB_INVALID_PARAM;
 8015cd0:	f06f 0301 	mvn.w	r3, #1
 8015cd4:	e043      	b.n	8015d5e <VL53L1CB_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8015cd6:	7afb      	ldrb	r3, [r7, #11]
 8015cd8:	2b02      	cmp	r3, #2
 8015cda:	d006      	beq.n	8015cea <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_MEDIUM) &&
 8015cdc:	7afb      	ldrb	r3, [r7, #11]
 8015cde:	2b03      	cmp	r3, #3
 8015ce0:	d003      	beq.n	8015cea <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_LONG))
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015ce2:	f06f 0301 	mvn.w	r3, #1
 8015ce6:	60fb      	str	r3, [r7, #12]
 8015ce8:	e038      	b.n	8015d5c <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetDistanceMode(pObj, ranging_profile) != VL53L1_ERROR_NONE)
 8015cea:	7afb      	ldrb	r3, [r7, #11]
 8015cec:	4619      	mov	r1, r3
 8015cee:	6878      	ldr	r0, [r7, #4]
 8015cf0:	f7ed f970 	bl	8002fd4 <VL53L1_SetDistanceMode>
 8015cf4:	4603      	mov	r3, r0
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d003      	beq.n	8015d02 <VL53L1CB_ConfigProfile+0x56>
  {
    ret = VL53L1CB_ERROR;
 8015cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8015cfe:	60fb      	str	r3, [r7, #12]
 8015d00:	e02c      	b.n	8015d5c <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53L1_ERROR_NONE)
 8015d02:	683b      	ldr	r3, [r7, #0]
 8015d04:	685b      	ldr	r3, [r3, #4]
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8015d06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015d0a:	fb02 f303 	mul.w	r3, r2, r3
 8015d0e:	4619      	mov	r1, r3
 8015d10:	6878      	ldr	r0, [r7, #4]
 8015d12:	f7ed f9ed 	bl	80030f0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8015d16:	4603      	mov	r3, r0
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d003      	beq.n	8015d24 <VL53L1CB_ConfigProfile+0x78>
  {
    ret = VL53L1CB_ERROR;
 8015d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8015d20:	60fb      	str	r3, [r7, #12]
 8015d22:	e01b      	b.n	8015d5c <VL53L1CB_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8015d24:	683b      	ldr	r3, [r7, #0]
 8015d26:	68db      	ldr	r3, [r3, #12]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	bf14      	ite	ne
 8015d2c:	2301      	movne	r3, #1
 8015d2e:	2300      	moveq	r3, #0
 8015d30:	b2db      	uxtb	r3, r3
 8015d32:	461a      	mov	r2, r3
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015d3a:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8015d3e:	683b      	ldr	r3, [r7, #0]
 8015d40:	691b      	ldr	r3, [r3, #16]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	bf14      	ite	ne
 8015d46:	2301      	movne	r3, #1
 8015d48:	2300      	moveq	r3, #0
 8015d4a:	b2db      	uxtb	r3, r3
 8015d4c:	461a      	mov	r2, r3
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015d54:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d

    ret = VL53L1CB_OK;
 8015d58:	2300      	movs	r3, #0
 8015d5a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015d5c:	68fb      	ldr	r3, [r7, #12]
}
 8015d5e:	4618      	mov	r0, r3
 8015d60:	3710      	adds	r7, #16
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bd80      	pop	{r7, pc}

08015d66 <VL53L1CB_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigROI(VL53L1CB_Object_t *pObj, VL53L1CB_ROIConfig_t *pROIConfig)
{
 8015d66:	b580      	push	{r7, lr}
 8015d68:	b094      	sub	sp, #80	; 0x50
 8015d6a:	af00      	add	r7, sp, #0
 8015d6c:	6078      	str	r0, [r7, #4]
 8015d6e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53L1_RoiConfig_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d002      	beq.n	8015d7c <VL53L1CB_ConfigROI+0x16>
 8015d76:	683b      	ldr	r3, [r7, #0]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d103      	bne.n	8015d84 <VL53L1CB_ConfigROI+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015d7c:	f06f 0301 	mvn.w	r3, #1
 8015d80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015d82:	e01c      	b.n	8015dbe <VL53L1CB_ConfigROI+0x58>
  }
  else
  {
    roi_settings.NumberOfRoi = 1;
 8015d84:	2301      	movs	r3, #1
 8015d86:	723b      	strb	r3, [r7, #8]
    roi_settings.UserRois[0].BotRightX = pROIConfig->BotRightX;
 8015d88:	683b      	ldr	r3, [r7, #0]
 8015d8a:	789b      	ldrb	r3, [r3, #2]
 8015d8c:	72fb      	strb	r3, [r7, #11]
    roi_settings.UserRois[0].BotRightY = pROIConfig->BotRightY;
 8015d8e:	683b      	ldr	r3, [r7, #0]
 8015d90:	78db      	ldrb	r3, [r3, #3]
 8015d92:	733b      	strb	r3, [r7, #12]
    roi_settings.UserRois[0].TopLeftX = pROIConfig->TopLeftX;
 8015d94:	683b      	ldr	r3, [r7, #0]
 8015d96:	781b      	ldrb	r3, [r3, #0]
 8015d98:	727b      	strb	r3, [r7, #9]
    roi_settings.UserRois[0].TopLeftY = pROIConfig->TopLeftY;
 8015d9a:	683b      	ldr	r3, [r7, #0]
 8015d9c:	785b      	ldrb	r3, [r3, #1]
 8015d9e:	72bb      	strb	r3, [r7, #10]

    if (VL53L1_SetROI(pObj, &roi_settings) != VL53L1_ERROR_NONE)
 8015da0:	f107 0308 	add.w	r3, r7, #8
 8015da4:	4619      	mov	r1, r3
 8015da6:	6878      	ldr	r0, [r7, #4]
 8015da8:	f7ed fca6 	bl	80036f8 <VL53L1_SetROI>
 8015dac:	4603      	mov	r3, r0
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d003      	beq.n	8015dba <VL53L1CB_ConfigROI+0x54>
    {
      ret = VL53L1CB_ERROR;
 8015db2:	f04f 33ff 	mov.w	r3, #4294967295
 8015db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015db8:	e001      	b.n	8015dbe <VL53L1CB_ConfigROI+0x58>
    }
    else
    {
      ret = VL53L1CB_OK;
 8015dba:	2300      	movs	r3, #0
 8015dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8015dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	3750      	adds	r7, #80	; 0x50
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	bd80      	pop	{r7, pc}

08015dc8 <VL53L1CB_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigIT(VL53L1CB_Object_t *pObj, VL53L1CB_ITConfig_t *pITConfig)
{
 8015dc8:	b480      	push	{r7}
 8015dca:	b083      	sub	sp, #12
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
 8015dd0:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L1CB_NOT_IMPLEMENTED;
 8015dd2:	f06f 0303 	mvn.w	r3, #3
}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	370c      	adds	r7, #12
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de0:	4770      	bx	lr

08015de2 <VL53L1CB_GetDistance>:
  * @param pObj    vl53l1cb context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetDistance(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8015de2:	b580      	push	{r7, lr}
 8015de4:	b084      	sub	sp, #16
 8015de6:	af00      	add	r7, sp, #0
 8015de8:	6078      	str	r0, [r7, #4]
 8015dea:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d002      	beq.n	8015df8 <VL53L1CB_GetDistance+0x16>
 8015df2:	683b      	ldr	r3, [r7, #0]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d103      	bne.n	8015e00 <VL53L1CB_GetDistance+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015df8:	f06f 0301 	mvn.w	r3, #1
 8015dfc:	60fb      	str	r3, [r7, #12]
 8015dfe:	e03a      	b.n	8015e76 <VL53L1CB_GetDistance+0x94>
  }
  else if (pObj->IsRanging == 0U)
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015e06:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d103      	bne.n	8015e16 <VL53L1CB_GetDistance+0x34>
  {
    ret = VL53L1CB_ERROR;
 8015e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8015e12:	60fb      	str	r3, [r7, #12]
 8015e14:	e02f      	b.n	8015e76 <VL53L1CB_GetDistance+0x94>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015e1c:	f893 3a8a 	ldrb.w	r3, [r3, #2698]	; 0xa8a
 8015e20:	2b01      	cmp	r3, #1
 8015e22:	d106      	bne.n	8015e32 <VL53L1CB_GetDistance+0x50>
    {
      ret = vl53l1cb_poll_for_measurement(pObj, VL53L1CB_POLL_TIMEOUT);
 8015e24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015e28:	6878      	ldr	r0, [r7, #4]
 8015e2a:	f000 f92b 	bl	8016084 <vl53l1cb_poll_for_measurement>
 8015e2e:	60f8      	str	r0, [r7, #12]
 8015e30:	e004      	b.n	8015e3c <VL53L1CB_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l1cb_poll_for_measurement(pObj, 0U);
 8015e32:	2100      	movs	r1, #0
 8015e34:	6878      	ldr	r0, [r7, #4]
 8015e36:	f000 f925 	bl	8016084 <vl53l1cb_poll_for_measurement>
 8015e3a:	60f8      	str	r0, [r7, #12]
    }
    /* a new measure is available if no error is returned by poll function */
    if (ret == VL53L1CB_OK)
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d119      	bne.n	8015e76 <VL53L1CB_GetDistance+0x94>
    {
      /* retrieve measurements and fill result structure */
      if (vl53l1cb_get_result(pObj, pResult) != VL53L1CB_OK)
 8015e42:	6839      	ldr	r1, [r7, #0]
 8015e44:	6878      	ldr	r0, [r7, #4]
 8015e46:	f000 f94b 	bl	80160e0 <vl53l1cb_get_result>
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d003      	beq.n	8015e58 <VL53L1CB_GetDistance+0x76>
      {
        ret = VL53L1CB_ERROR;
 8015e50:	f04f 33ff 	mov.w	r3, #4294967295
 8015e54:	60fb      	str	r3, [r7, #12]
 8015e56:	e00e      	b.n	8015e76 <VL53L1CB_GetDistance+0x94>
      }
      else if (pObj->IsContinuous == 1U)
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015e5e:	f893 3a8b 	ldrb.w	r3, [r3, #2699]	; 0xa8b
 8015e62:	2b01      	cmp	r3, #1
 8015e64:	d105      	bne.n	8015e72 <VL53L1CB_GetDistance+0x90>
      {
        /* trigger new measurement if device configured in continuous mode */
        ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 8015e66:	6878      	ldr	r0, [r7, #4]
 8015e68:	f7ed fdde 	bl	8003a28 <VL53L1_ClearInterruptAndStartMeasurement>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	60fb      	str	r3, [r7, #12]
 8015e70:	e001      	b.n	8015e76 <VL53L1CB_GetDistance+0x94>
      }
      else
      {
        ret = VL53L1CB_OK;
 8015e72:	2300      	movs	r3, #0
 8015e74:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  
  return ret;
 8015e76:	68fb      	ldr	r3, [r7, #12]
}
 8015e78:	4618      	mov	r0, r3
 8015e7a:	3710      	adds	r7, #16
 8015e7c:	46bd      	mov	sp, r7
 8015e7e:	bd80      	pop	{r7, pc}

08015e80 <VL53L1CB_Start>:
  * @param pObj    vl53l1cb context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Start(VL53L1CB_Object_t *pObj, uint32_t Mode)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b084      	sub	sp, #16
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	6078      	str	r0, [r7, #4]
 8015e88:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d103      	bne.n	8015e98 <VL53L1CB_Start+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015e90:	f06f 0301 	mvn.w	r3, #1
 8015e94:	60fb      	str	r3, [r7, #12]
 8015e96:	e068      	b.n	8015f6a <VL53L1CB_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015e9e:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8015ea2:	2b01      	cmp	r3, #1
 8015ea4:	d103      	bne.n	8015eae <VL53L1CB_Start+0x2e>
  {
    ret = VL53L1CB_ERROR;
 8015ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8015eaa:	60fb      	str	r3, [r7, #12]
 8015eac:	e05d      	b.n	8015f6a <VL53L1CB_Start+0xea>
  }
  else if (VL53L1_StartMeasurement(pObj) == VL53L1_ERROR_NONE)
 8015eae:	6878      	ldr	r0, [r7, #4]
 8015eb0:	f7ed fcf6 	bl	80038a0 <VL53L1_StartMeasurement>
 8015eb4:	4603      	mov	r3, r0
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d154      	bne.n	8015f64 <VL53L1CB_Start+0xe4>
  {
    pObj->IsRanging = 1;
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015ec0:	2201      	movs	r2, #1
 8015ec2:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8015eca:	683b      	ldr	r3, [r7, #0]
 8015ecc:	3b01      	subs	r3, #1
 8015ece:	2b03      	cmp	r3, #3
 8015ed0:	d83e      	bhi.n	8015f50 <VL53L1CB_Start+0xd0>
 8015ed2:	a201      	add	r2, pc, #4	; (adr r2, 8015ed8 <VL53L1CB_Start+0x58>)
 8015ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ed8:	08015ee9 	.word	0x08015ee9
 8015edc:	08015f03 	.word	0x08015f03
 8015ee0:	08015f1d 	.word	0x08015f1d
 8015ee4:	08015f37 	.word	0x08015f37
    {
    case VL53L1CB_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015eee:	2201      	movs	r2, #1
 8015ef0:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015efa:	2201      	movs	r2, #1
 8015efc:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8015f00:	e033      	b.n	8015f6a <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015f08:	2200      	movs	r2, #0
 8015f0a:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015f14:	2201      	movs	r2, #1
 8015f16:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8015f1a:	e026      	b.n	8015f6a <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015f22:	2201      	movs	r2, #1
 8015f24:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015f2e:	2200      	movs	r2, #0
 8015f30:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8015f34:	e019      	b.n	8015f6a <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015f48:	2200      	movs	r2, #0
 8015f4a:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8015f4e:	e00c      	b.n	8015f6a <VL53L1CB_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015f56:	2200      	movs	r2, #0
 8015f58:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
      ret = VL53L1CB_INVALID_PARAM;
 8015f5c:	f06f 0301 	mvn.w	r3, #1
 8015f60:	60fb      	str	r3, [r7, #12]
      break;
 8015f62:	e002      	b.n	8015f6a <VL53L1CB_Start+0xea>
    }
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8015f64:	f04f 33ff 	mov.w	r3, #4294967295
 8015f68:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015f6a:	68fb      	ldr	r3, [r7, #12]
}
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	3710      	adds	r7, #16
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bd80      	pop	{r7, pc}

08015f74 <VL53L1CB_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Stop(VL53L1CB_Object_t *pObj)
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b084      	sub	sp, #16
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d103      	bne.n	8015f8a <VL53L1CB_Stop+0x16>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015f82:	f06f 0301 	mvn.w	r3, #1
 8015f86:	60fb      	str	r3, [r7, #12]
 8015f88:	e01c      	b.n	8015fc4 <VL53L1CB_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015f90:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d103      	bne.n	8015fa0 <VL53L1CB_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L1CB_ERROR;
 8015f98:	f04f 33ff 	mov.w	r3, #4294967295
 8015f9c:	60fb      	str	r3, [r7, #12]
 8015f9e:	e011      	b.n	8015fc4 <VL53L1CB_Stop+0x50>
  }
  else if (VL53L1_StopMeasurement(pObj) == VL53L1_ERROR_NONE)
 8015fa0:	6878      	ldr	r0, [r7, #4]
 8015fa2:	f7ed fd1d 	bl	80039e0 <VL53L1_StopMeasurement>
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d108      	bne.n	8015fbe <VL53L1CB_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8015fb8:	2300      	movs	r3, #0
 8015fba:	60fb      	str	r3, [r7, #12]
 8015fbc:	e002      	b.n	8015fc4 <VL53L1CB_Stop+0x50>
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8015fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8015fc2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015fc4:	68fb      	ldr	r3, [r7, #12]
}
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	3710      	adds	r7, #16
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	bd80      	pop	{r7, pc}

08015fce <VL53L1CB_SetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param Address     New I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetAddress(VL53L1CB_Object_t *pObj, uint32_t Address)
{
 8015fce:	b580      	push	{r7, lr}
 8015fd0:	b084      	sub	sp, #16
 8015fd2:	af00      	add	r7, sp, #0
 8015fd4:	6078      	str	r0, [r7, #4]
 8015fd6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d103      	bne.n	8015fe6 <VL53L1CB_SetAddress+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015fde:	f06f 0301 	mvn.w	r3, #1
 8015fe2:	60fb      	str	r3, [r7, #12]
 8015fe4:	e012      	b.n	801600c <VL53L1CB_SetAddress+0x3e>
  }
  else if (VL53L1_SetDeviceAddress(pObj, (uint8_t)Address) != VL53L1_ERROR_NONE)
 8015fe6:	683b      	ldr	r3, [r7, #0]
 8015fe8:	b2db      	uxtb	r3, r3
 8015fea:	4619      	mov	r1, r3
 8015fec:	6878      	ldr	r0, [r7, #4]
 8015fee:	f7ec fdcf 	bl	8002b90 <VL53L1_SetDeviceAddress>
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d003      	beq.n	8016000 <VL53L1CB_SetAddress+0x32>
  {
    ret = VL53L1CB_ERROR;
 8015ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8015ffc:	60fb      	str	r3, [r7, #12]
 8015ffe:	e005      	b.n	801600c <VL53L1CB_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8016000:	683b      	ldr	r3, [r7, #0]
 8016002:	b29a      	uxth	r2, r3
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	811a      	strh	r2, [r3, #8]
    ret = VL53L1CB_OK;
 8016008:	2300      	movs	r3, #0
 801600a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801600c:	68fb      	ldr	r3, [r7, #12]
}
 801600e:	4618      	mov	r0, r3
 8016010:	3710      	adds	r7, #16
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}

08016016 <VL53L1CB_GetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetAddress(VL53L1CB_Object_t *pObj, uint32_t *pAddress)
{
 8016016:	b480      	push	{r7}
 8016018:	b085      	sub	sp, #20
 801601a:	af00      	add	r7, sp, #0
 801601c:	6078      	str	r0, [r7, #4]
 801601e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d002      	beq.n	801602c <VL53L1CB_GetAddress+0x16>
 8016026:	683b      	ldr	r3, [r7, #0]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d103      	bne.n	8016034 <VL53L1CB_GetAddress+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 801602c:	f06f 0301 	mvn.w	r3, #1
 8016030:	60fb      	str	r3, [r7, #12]
 8016032:	e006      	b.n	8016042 <VL53L1CB_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	891b      	ldrh	r3, [r3, #8]
 8016038:	461a      	mov	r2, r3
 801603a:	683b      	ldr	r3, [r7, #0]
 801603c:	601a      	str	r2, [r3, #0]
    ret = VL53L1CB_OK;
 801603e:	2300      	movs	r3, #0
 8016040:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8016042:	68fb      	ldr	r3, [r7, #12]
}
 8016044:	4618      	mov	r0, r3
 8016046:	3714      	adds	r7, #20
 8016048:	46bd      	mov	sp, r7
 801604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604e:	4770      	bx	lr

08016050 <VL53L1CB_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetPowerMode(VL53L1CB_Object_t *pObj, uint32_t PowerMode)
{
 8016050:	b480      	push	{r7}
 8016052:	b083      	sub	sp, #12
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
 8016058:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 801605a:	f06f 0303 	mvn.w	r3, #3
}
 801605e:	4618      	mov	r0, r3
 8016060:	370c      	adds	r7, #12
 8016062:	46bd      	mov	sp, r7
 8016064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016068:	4770      	bx	lr

0801606a <VL53L1CB_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetPowerMode(VL53L1CB_Object_t *pObj, uint32_t *pPowerMode)
{
 801606a:	b480      	push	{r7}
 801606c:	b083      	sub	sp, #12
 801606e:	af00      	add	r7, sp, #0
 8016070:	6078      	str	r0, [r7, #4]
 8016072:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 8016074:	f06f 0303 	mvn.w	r3, #3
}
 8016078:	4618      	mov	r0, r3
 801607a:	370c      	adds	r7, #12
 801607c:	46bd      	mov	sp, r7
 801607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016082:	4770      	bx	lr

08016084 <vl53l1cb_poll_for_measurement>:
/** @defgroup VL53L1CB_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l1cb_poll_for_measurement(VL53L1CB_Object_t *pObj, uint32_t Timeout)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b084      	sub	sp, #16
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
 801608c:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 801608e:	2300      	movs	r3, #0
 8016090:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d102      	bne.n	801609e <vl53l1cb_poll_for_measurement+0x1a>
  {
    return VL53L1CB_INVALID_PARAM;
 8016098:	f06f 0301 	mvn.w	r3, #1
 801609c:	e01b      	b.n	80160d6 <vl53l1cb_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	695b      	ldr	r3, [r3, #20]
 80160a2:	4798      	blx	r3
 80160a4:	4603      	mov	r3, r0
 80160a6:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 80160a8:	f107 030b 	add.w	r3, r7, #11
 80160ac:	4619      	mov	r1, r3
 80160ae:	6878      	ldr	r0, [r7, #4]
 80160b0:	f7ed fcd0 	bl	8003a54 <VL53L1_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 80160b4:	7afb      	ldrb	r3, [r7, #11]
 80160b6:	2b01      	cmp	r3, #1
 80160b8:	d101      	bne.n	80160be <vl53l1cb_poll_for_measurement+0x3a>
    {
      return VL53L1CB_OK;
 80160ba:	2300      	movs	r3, #0
 80160bc:	e00b      	b.n	80160d6 <vl53l1cb_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	695b      	ldr	r3, [r3, #20]
 80160c2:	4798      	blx	r3
 80160c4:	4603      	mov	r3, r0
 80160c6:	461a      	mov	r2, r3
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	1ad3      	subs	r3, r2, r3
 80160cc:	683a      	ldr	r2, [r7, #0]
 80160ce:	429a      	cmp	r2, r3
 80160d0:	d8ea      	bhi.n	80160a8 <vl53l1cb_poll_for_measurement+0x24>

  return VL53L1CB_TIMEOUT;
 80160d2:	f06f 0302 	mvn.w	r3, #2
}
 80160d6:	4618      	mov	r0, r3
 80160d8:	3710      	adds	r7, #16
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd80      	pop	{r7, pc}
	...

080160e0 <vl53l1cb_get_result>:

static int32_t vl53l1cb_get_result(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 80160e0:	b590      	push	{r4, r7, lr}
 80160e2:	b0a9      	sub	sp, #164	; 0xa4
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
 80160e8:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53L1_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d002      	beq.n	80160f6 <vl53l1cb_get_result+0x16>
 80160f0:	683b      	ldr	r3, [r7, #0]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d104      	bne.n	8016100 <vl53l1cb_get_result+0x20>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80160f6:	f06f 0301 	mvn.w	r3, #1
 80160fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80160fe:	e120      	b.n	8016342 <vl53l1cb_get_result+0x262>
  }
  else if (VL53L1_GetMultiRangingData(pObj, &data) != VL53L1_ERROR_NONE)
 8016100:	f107 030c 	add.w	r3, r7, #12
 8016104:	4619      	mov	r1, r3
 8016106:	6878      	ldr	r0, [r7, #4]
 8016108:	f7ee fb82 	bl	8004810 <VL53L1_GetMultiRangingData>
 801610c:	4603      	mov	r3, r0
 801610e:	2b00      	cmp	r3, #0
 8016110:	d004      	beq.n	801611c <vl53l1cb_get_result+0x3c>
  {
    ret = VL53L1CB_ERROR;
 8016112:	f04f 33ff 	mov.w	r3, #4294967295
 8016116:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801611a:	e112      	b.n	8016342 <vl53l1cb_get_result+0x262>
  }
  else
  {
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 801611c:	2300      	movs	r3, #0
 801611e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8016122:	e106      	b.n	8016332 <vl53l1cb_get_result+0x252>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8016124:	7cbb      	ldrb	r3, [r7, #18]
 8016126:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801612a:	4618      	mov	r0, r3
 801612c:	6839      	ldr	r1, [r7, #0]
 801612e:	4613      	mov	r3, r2
 8016130:	011b      	lsls	r3, r3, #4
 8016132:	4413      	add	r3, r2
 8016134:	009b      	lsls	r3, r3, #2
 8016136:	440b      	add	r3, r1
 8016138:	3304      	adds	r3, #4
 801613a:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 801613c:	2300      	movs	r3, #0
 801613e:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8016142:	e0eb      	b.n	801631c <vl53l1cb_get_result+0x23c>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8016144:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8016148:	4613      	mov	r3, r2
 801614a:	00db      	lsls	r3, r3, #3
 801614c:	1a9b      	subs	r3, r3, r2
 801614e:	009b      	lsls	r3, r3, #2
 8016150:	33a0      	adds	r3, #160	; 0xa0
 8016152:	443b      	add	r3, r7
 8016154:	3b78      	subs	r3, #120	; 0x78
 8016156:	f9b3 3000 	ldrsh.w	r3, [r3]
 801615a:	2b00      	cmp	r3, #0
 801615c:	da0d      	bge.n	801617a <vl53l1cb_get_result+0x9a>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 801615e:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8016162:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8016166:	6839      	ldr	r1, [r7, #0]
 8016168:	4613      	mov	r3, r2
 801616a:	011b      	lsls	r3, r3, #4
 801616c:	4413      	add	r3, r2
 801616e:	4403      	add	r3, r0
 8016170:	009b      	lsls	r3, r3, #2
 8016172:	440b      	add	r3, r1
 8016174:	2200      	movs	r2, #0
 8016176:	609a      	str	r2, [r3, #8]
 8016178:	e017      	b.n	80161aa <vl53l1cb_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 801617a:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 801617e:	4613      	mov	r3, r2
 8016180:	00db      	lsls	r3, r3, #3
 8016182:	1a9b      	subs	r3, r3, r2
 8016184:	009b      	lsls	r3, r3, #2
 8016186:	33a0      	adds	r3, #160	; 0xa0
 8016188:	443b      	add	r3, r7
 801618a:	3b78      	subs	r3, #120	; 0x78
 801618c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016190:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8016194:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8016198:	461c      	mov	r4, r3
 801619a:	6839      	ldr	r1, [r7, #0]
 801619c:	4613      	mov	r3, r2
 801619e:	011b      	lsls	r3, r3, #4
 80161a0:	4413      	add	r3, r2
 80161a2:	4403      	add	r3, r0
 80161a4:	009b      	lsls	r3, r3, #2
 80161a6:	440b      	add	r3, r1
 80161a8:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80161b0:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 80161b4:	2b01      	cmp	r3, #1
 80161b6:	d136      	bne.n	8016226 <vl53l1cb_get_result+0x146>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 80161b8:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80161bc:	4613      	mov	r3, r2
 80161be:	00db      	lsls	r3, r3, #3
 80161c0:	1a9b      	subs	r3, r3, r2
 80161c2:	009b      	lsls	r3, r3, #2
 80161c4:	33a0      	adds	r3, #160	; 0xa0
 80161c6:	443b      	add	r3, r7
 80161c8:	3b80      	subs	r3, #128	; 0x80
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	ee07 3a90 	vmov	s15, r3
 80161d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80161d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8016350 <vl53l1cb_get_result+0x270>
 80161d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80161dc:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8016354 <vl53l1cb_get_result+0x274>
 80161e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80161e4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80161e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80161ec:	0a1b      	lsrs	r3, r3, #8
 80161ee:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 80161f2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80161f6:	ee07 3a90 	vmov	s15, r3
 80161fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80161fe:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8016202:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8016206:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 801620a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801620e:	6839      	ldr	r1, [r7, #0]
 8016210:	4613      	mov	r3, r2
 8016212:	011b      	lsls	r3, r3, #4
 8016214:	4413      	add	r3, r2
 8016216:	4403      	add	r3, r0
 8016218:	3308      	adds	r3, #8
 801621a:	009b      	lsls	r3, r3, #2
 801621c:	440b      	add	r3, r1
 801621e:	3308      	adds	r3, #8
 8016220:	edc3 7a00 	vstr	s15, [r3]
 8016224:	e00f      	b.n	8016246 <vl53l1cb_get_result+0x166>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8016226:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801622a:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801622e:	6839      	ldr	r1, [r7, #0]
 8016230:	4613      	mov	r3, r2
 8016232:	011b      	lsls	r3, r3, #4
 8016234:	4413      	add	r3, r2
 8016236:	4403      	add	r3, r0
 8016238:	3308      	adds	r3, #8
 801623a:	009b      	lsls	r3, r3, #2
 801623c:	440b      	add	r3, r1
 801623e:	3308      	adds	r3, #8
 8016240:	f04f 0200 	mov.w	r2, #0
 8016244:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801624c:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 8016250:	2b01      	cmp	r3, #1
 8016252:	d136      	bne.n	80162c2 <vl53l1cb_get_result+0x1e2>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8016254:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8016258:	4613      	mov	r3, r2
 801625a:	00db      	lsls	r3, r3, #3
 801625c:	1a9b      	subs	r3, r3, r2
 801625e:	009b      	lsls	r3, r3, #2
 8016260:	33a0      	adds	r3, #160	; 0xa0
 8016262:	443b      	add	r3, r7
 8016264:	3b84      	subs	r3, #132	; 0x84
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	ee07 3a90 	vmov	s15, r3
 801626c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016270:	eddf 6a37 	vldr	s13, [pc, #220]	; 8016350 <vl53l1cb_get_result+0x270>
 8016274:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016278:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8016354 <vl53l1cb_get_result+0x274>
 801627c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016280:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8016284:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8016288:	0a1b      	lsrs	r3, r3, #8
 801628a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 801628e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8016292:	ee07 3a90 	vmov	s15, r3
 8016296:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801629a:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801629e:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80162a2:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80162a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80162aa:	6839      	ldr	r1, [r7, #0]
 80162ac:	4613      	mov	r3, r2
 80162ae:	011b      	lsls	r3, r3, #4
 80162b0:	4413      	add	r3, r2
 80162b2:	4403      	add	r3, r0
 80162b4:	330c      	adds	r3, #12
 80162b6:	009b      	lsls	r3, r3, #2
 80162b8:	440b      	add	r3, r1
 80162ba:	3308      	adds	r3, #8
 80162bc:	edc3 7a00 	vstr	s15, [r3]
 80162c0:	e00f      	b.n	80162e2 <vl53l1cb_get_result+0x202>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 80162c2:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80162c6:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80162ca:	6839      	ldr	r1, [r7, #0]
 80162cc:	4613      	mov	r3, r2
 80162ce:	011b      	lsls	r3, r3, #4
 80162d0:	4413      	add	r3, r2
 80162d2:	4403      	add	r3, r0
 80162d4:	330c      	adds	r3, #12
 80162d6:	009b      	lsls	r3, r3, #2
 80162d8:	440b      	add	r3, r1
 80162da:	3308      	adds	r3, #8
 80162dc:	f04f 0200 	mov.w	r2, #0
 80162e0:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 80162e2:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80162e6:	4613      	mov	r3, r2
 80162e8:	00db      	lsls	r3, r3, #3
 80162ea:	1a9b      	subs	r3, r3, r2
 80162ec:	009b      	lsls	r3, r3, #2
 80162ee:	33a0      	adds	r3, #160	; 0xa0
 80162f0:	443b      	add	r3, r7
 80162f2:	3b75      	subs	r3, #117	; 0x75
 80162f4:	781b      	ldrb	r3, [r3, #0]
 80162f6:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80162fa:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80162fe:	461c      	mov	r4, r3
 8016300:	6839      	ldr	r1, [r7, #0]
 8016302:	4613      	mov	r3, r2
 8016304:	011b      	lsls	r3, r3, #4
 8016306:	4413      	add	r3, r2
 8016308:	4403      	add	r3, r0
 801630a:	3304      	adds	r3, #4
 801630c:	009b      	lsls	r3, r3, #2
 801630e:	440b      	add	r3, r1
 8016310:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8016312:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8016316:	3301      	adds	r3, #1
 8016318:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 801631c:	7cbb      	ldrb	r3, [r7, #18]
 801631e:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8016322:	429a      	cmp	r2, r3
 8016324:	f4ff af0e 	bcc.w	8016144 <vl53l1cb_get_result+0x64>
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8016328:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 801632c:	3301      	adds	r3, #1
 801632e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8016332:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8016336:	2b00      	cmp	r3, #0
 8016338:	f43f aef4 	beq.w	8016124 <vl53l1cb_get_result+0x44>
      }
    }

    ret = VL53L1CB_OK;
 801633c:	2300      	movs	r3, #0
 801633e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  }

  return ret;
 8016342:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 8016346:	4618      	mov	r0, r3
 8016348:	37a4      	adds	r7, #164	; 0xa4
 801634a:	46bd      	mov	sp, r7
 801634c:	bd90      	pop	{r4, r7, pc}
 801634e:	bf00      	nop
 8016350:	47800000 	.word	0x47800000
 8016354:	447a0000 	.word	0x447a0000

08016358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b082      	sub	sp, #8
 801635c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801635e:	2300      	movs	r3, #0
 8016360:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8016362:	4b0c      	ldr	r3, [pc, #48]	; (8016394 <HAL_Init+0x3c>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	4a0b      	ldr	r2, [pc, #44]	; (8016394 <HAL_Init+0x3c>)
 8016368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801636c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801636e:	2003      	movs	r0, #3
 8016370:	f000 f90f 	bl	8016592 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8016374:	200f      	movs	r0, #15
 8016376:	f7eb fb71 	bl	8001a5c <HAL_InitTick>
 801637a:	4603      	mov	r3, r0
 801637c:	2b00      	cmp	r3, #0
 801637e:	d002      	beq.n	8016386 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8016380:	2301      	movs	r3, #1
 8016382:	71fb      	strb	r3, [r7, #7]
 8016384:	e001      	b.n	801638a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8016386:	f7eb fb49 	bl	8001a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801638a:	79fb      	ldrb	r3, [r7, #7]
}
 801638c:	4618      	mov	r0, r3
 801638e:	3708      	adds	r7, #8
 8016390:	46bd      	mov	sp, r7
 8016392:	bd80      	pop	{r7, pc}
 8016394:	58004000 	.word	0x58004000

08016398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8016398:	b480      	push	{r7}
 801639a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801639c:	4b06      	ldr	r3, [pc, #24]	; (80163b8 <HAL_IncTick+0x20>)
 801639e:	781b      	ldrb	r3, [r3, #0]
 80163a0:	461a      	mov	r2, r3
 80163a2:	4b06      	ldr	r3, [pc, #24]	; (80163bc <HAL_IncTick+0x24>)
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	4413      	add	r3, r2
 80163a8:	4a04      	ldr	r2, [pc, #16]	; (80163bc <HAL_IncTick+0x24>)
 80163aa:	6013      	str	r3, [r2, #0]
}
 80163ac:	bf00      	nop
 80163ae:	46bd      	mov	sp, r7
 80163b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b4:	4770      	bx	lr
 80163b6:	bf00      	nop
 80163b8:	20000078 	.word	0x20000078
 80163bc:	20008820 	.word	0x20008820

080163c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80163c0:	b480      	push	{r7}
 80163c2:	af00      	add	r7, sp, #0
  return uwTick;
 80163c4:	4b03      	ldr	r3, [pc, #12]	; (80163d4 <HAL_GetTick+0x14>)
 80163c6:	681b      	ldr	r3, [r3, #0]
}
 80163c8:	4618      	mov	r0, r3
 80163ca:	46bd      	mov	sp, r7
 80163cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d0:	4770      	bx	lr
 80163d2:	bf00      	nop
 80163d4:	20008820 	.word	0x20008820

080163d8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80163d8:	b480      	push	{r7}
 80163da:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80163dc:	4b03      	ldr	r3, [pc, #12]	; (80163ec <HAL_GetTickPrio+0x14>)
 80163de:	681b      	ldr	r3, [r3, #0]
}
 80163e0:	4618      	mov	r0, r3
 80163e2:	46bd      	mov	sp, r7
 80163e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e8:	4770      	bx	lr
 80163ea:	bf00      	nop
 80163ec:	20000074 	.word	0x20000074

080163f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b084      	sub	sp, #16
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80163f8:	f7ff ffe2 	bl	80163c0 <HAL_GetTick>
 80163fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016408:	d005      	beq.n	8016416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801640a:	4b0a      	ldr	r3, [pc, #40]	; (8016434 <HAL_Delay+0x44>)
 801640c:	781b      	ldrb	r3, [r3, #0]
 801640e:	461a      	mov	r2, r3
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	4413      	add	r3, r2
 8016414:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8016416:	bf00      	nop
 8016418:	f7ff ffd2 	bl	80163c0 <HAL_GetTick>
 801641c:	4602      	mov	r2, r0
 801641e:	68bb      	ldr	r3, [r7, #8]
 8016420:	1ad3      	subs	r3, r2, r3
 8016422:	68fa      	ldr	r2, [r7, #12]
 8016424:	429a      	cmp	r2, r3
 8016426:	d8f7      	bhi.n	8016418 <HAL_Delay+0x28>
  {
  }
}
 8016428:	bf00      	nop
 801642a:	bf00      	nop
 801642c:	3710      	adds	r7, #16
 801642e:	46bd      	mov	sp, r7
 8016430:	bd80      	pop	{r7, pc}
 8016432:	bf00      	nop
 8016434:	20000078 	.word	0x20000078

08016438 <__NVIC_SetPriorityGrouping>:
{
 8016438:	b480      	push	{r7}
 801643a:	b085      	sub	sp, #20
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	f003 0307 	and.w	r3, r3, #7
 8016446:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016448:	4b0c      	ldr	r3, [pc, #48]	; (801647c <__NVIC_SetPriorityGrouping+0x44>)
 801644a:	68db      	ldr	r3, [r3, #12]
 801644c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801644e:	68ba      	ldr	r2, [r7, #8]
 8016450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8016454:	4013      	ands	r3, r2
 8016456:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801645c:	68bb      	ldr	r3, [r7, #8]
 801645e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8016460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8016464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801646a:	4a04      	ldr	r2, [pc, #16]	; (801647c <__NVIC_SetPriorityGrouping+0x44>)
 801646c:	68bb      	ldr	r3, [r7, #8]
 801646e:	60d3      	str	r3, [r2, #12]
}
 8016470:	bf00      	nop
 8016472:	3714      	adds	r7, #20
 8016474:	46bd      	mov	sp, r7
 8016476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801647a:	4770      	bx	lr
 801647c:	e000ed00 	.word	0xe000ed00

08016480 <__NVIC_GetPriorityGrouping>:
{
 8016480:	b480      	push	{r7}
 8016482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016484:	4b04      	ldr	r3, [pc, #16]	; (8016498 <__NVIC_GetPriorityGrouping+0x18>)
 8016486:	68db      	ldr	r3, [r3, #12]
 8016488:	0a1b      	lsrs	r3, r3, #8
 801648a:	f003 0307 	and.w	r3, r3, #7
}
 801648e:	4618      	mov	r0, r3
 8016490:	46bd      	mov	sp, r7
 8016492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016496:	4770      	bx	lr
 8016498:	e000ed00 	.word	0xe000ed00

0801649c <__NVIC_EnableIRQ>:
{
 801649c:	b480      	push	{r7}
 801649e:	b083      	sub	sp, #12
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	4603      	mov	r3, r0
 80164a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80164a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	db0b      	blt.n	80164c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80164ae:	79fb      	ldrb	r3, [r7, #7]
 80164b0:	f003 021f 	and.w	r2, r3, #31
 80164b4:	4907      	ldr	r1, [pc, #28]	; (80164d4 <__NVIC_EnableIRQ+0x38>)
 80164b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80164ba:	095b      	lsrs	r3, r3, #5
 80164bc:	2001      	movs	r0, #1
 80164be:	fa00 f202 	lsl.w	r2, r0, r2
 80164c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80164c6:	bf00      	nop
 80164c8:	370c      	adds	r7, #12
 80164ca:	46bd      	mov	sp, r7
 80164cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d0:	4770      	bx	lr
 80164d2:	bf00      	nop
 80164d4:	e000e100 	.word	0xe000e100

080164d8 <__NVIC_SetPriority>:
{
 80164d8:	b480      	push	{r7}
 80164da:	b083      	sub	sp, #12
 80164dc:	af00      	add	r7, sp, #0
 80164de:	4603      	mov	r3, r0
 80164e0:	6039      	str	r1, [r7, #0]
 80164e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80164e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	db0a      	blt.n	8016502 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80164ec:	683b      	ldr	r3, [r7, #0]
 80164ee:	b2da      	uxtb	r2, r3
 80164f0:	490c      	ldr	r1, [pc, #48]	; (8016524 <__NVIC_SetPriority+0x4c>)
 80164f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80164f6:	0112      	lsls	r2, r2, #4
 80164f8:	b2d2      	uxtb	r2, r2
 80164fa:	440b      	add	r3, r1
 80164fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016500:	e00a      	b.n	8016518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016502:	683b      	ldr	r3, [r7, #0]
 8016504:	b2da      	uxtb	r2, r3
 8016506:	4908      	ldr	r1, [pc, #32]	; (8016528 <__NVIC_SetPriority+0x50>)
 8016508:	79fb      	ldrb	r3, [r7, #7]
 801650a:	f003 030f 	and.w	r3, r3, #15
 801650e:	3b04      	subs	r3, #4
 8016510:	0112      	lsls	r2, r2, #4
 8016512:	b2d2      	uxtb	r2, r2
 8016514:	440b      	add	r3, r1
 8016516:	761a      	strb	r2, [r3, #24]
}
 8016518:	bf00      	nop
 801651a:	370c      	adds	r7, #12
 801651c:	46bd      	mov	sp, r7
 801651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016522:	4770      	bx	lr
 8016524:	e000e100 	.word	0xe000e100
 8016528:	e000ed00 	.word	0xe000ed00

0801652c <NVIC_EncodePriority>:
{
 801652c:	b480      	push	{r7}
 801652e:	b089      	sub	sp, #36	; 0x24
 8016530:	af00      	add	r7, sp, #0
 8016532:	60f8      	str	r0, [r7, #12]
 8016534:	60b9      	str	r1, [r7, #8]
 8016536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	f003 0307 	and.w	r3, r3, #7
 801653e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016540:	69fb      	ldr	r3, [r7, #28]
 8016542:	f1c3 0307 	rsb	r3, r3, #7
 8016546:	2b04      	cmp	r3, #4
 8016548:	bf28      	it	cs
 801654a:	2304      	movcs	r3, #4
 801654c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801654e:	69fb      	ldr	r3, [r7, #28]
 8016550:	3304      	adds	r3, #4
 8016552:	2b06      	cmp	r3, #6
 8016554:	d902      	bls.n	801655c <NVIC_EncodePriority+0x30>
 8016556:	69fb      	ldr	r3, [r7, #28]
 8016558:	3b03      	subs	r3, #3
 801655a:	e000      	b.n	801655e <NVIC_EncodePriority+0x32>
 801655c:	2300      	movs	r3, #0
 801655e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016560:	f04f 32ff 	mov.w	r2, #4294967295
 8016564:	69bb      	ldr	r3, [r7, #24]
 8016566:	fa02 f303 	lsl.w	r3, r2, r3
 801656a:	43da      	mvns	r2, r3
 801656c:	68bb      	ldr	r3, [r7, #8]
 801656e:	401a      	ands	r2, r3
 8016570:	697b      	ldr	r3, [r7, #20]
 8016572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016574:	f04f 31ff 	mov.w	r1, #4294967295
 8016578:	697b      	ldr	r3, [r7, #20]
 801657a:	fa01 f303 	lsl.w	r3, r1, r3
 801657e:	43d9      	mvns	r1, r3
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016584:	4313      	orrs	r3, r2
}
 8016586:	4618      	mov	r0, r3
 8016588:	3724      	adds	r7, #36	; 0x24
 801658a:	46bd      	mov	sp, r7
 801658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016590:	4770      	bx	lr

08016592 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016592:	b580      	push	{r7, lr}
 8016594:	b082      	sub	sp, #8
 8016596:	af00      	add	r7, sp, #0
 8016598:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801659a:	6878      	ldr	r0, [r7, #4]
 801659c:	f7ff ff4c 	bl	8016438 <__NVIC_SetPriorityGrouping>
}
 80165a0:	bf00      	nop
 80165a2:	3708      	adds	r7, #8
 80165a4:	46bd      	mov	sp, r7
 80165a6:	bd80      	pop	{r7, pc}

080165a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b086      	sub	sp, #24
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	4603      	mov	r3, r0
 80165b0:	60b9      	str	r1, [r7, #8]
 80165b2:	607a      	str	r2, [r7, #4]
 80165b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80165b6:	f7ff ff63 	bl	8016480 <__NVIC_GetPriorityGrouping>
 80165ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80165bc:	687a      	ldr	r2, [r7, #4]
 80165be:	68b9      	ldr	r1, [r7, #8]
 80165c0:	6978      	ldr	r0, [r7, #20]
 80165c2:	f7ff ffb3 	bl	801652c <NVIC_EncodePriority>
 80165c6:	4602      	mov	r2, r0
 80165c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165cc:	4611      	mov	r1, r2
 80165ce:	4618      	mov	r0, r3
 80165d0:	f7ff ff82 	bl	80164d8 <__NVIC_SetPriority>
}
 80165d4:	bf00      	nop
 80165d6:	3718      	adds	r7, #24
 80165d8:	46bd      	mov	sp, r7
 80165da:	bd80      	pop	{r7, pc}

080165dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b082      	sub	sp, #8
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	4603      	mov	r3, r0
 80165e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80165e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80165ea:	4618      	mov	r0, r3
 80165ec:	f7ff ff56 	bl	801649c <__NVIC_EnableIRQ>
}
 80165f0:	bf00      	nop
 80165f2:	3708      	adds	r7, #8
 80165f4:	46bd      	mov	sp, r7
 80165f6:	bd80      	pop	{r7, pc}

080165f8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80165f8:	b480      	push	{r7}
 80165fa:	b087      	sub	sp, #28
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	6078      	str	r0, [r7, #4]
 8016600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8016602:	2300      	movs	r3, #0
 8016604:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8016606:	e14c      	b.n	80168a2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8016608:	683b      	ldr	r3, [r7, #0]
 801660a:	681a      	ldr	r2, [r3, #0]
 801660c:	2101      	movs	r1, #1
 801660e:	697b      	ldr	r3, [r7, #20]
 8016610:	fa01 f303 	lsl.w	r3, r1, r3
 8016614:	4013      	ands	r3, r2
 8016616:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	2b00      	cmp	r3, #0
 801661c:	f000 813e 	beq.w	801689c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8016620:	683b      	ldr	r3, [r7, #0]
 8016622:	685b      	ldr	r3, [r3, #4]
 8016624:	f003 0303 	and.w	r3, r3, #3
 8016628:	2b01      	cmp	r3, #1
 801662a:	d005      	beq.n	8016638 <HAL_GPIO_Init+0x40>
 801662c:	683b      	ldr	r3, [r7, #0]
 801662e:	685b      	ldr	r3, [r3, #4]
 8016630:	f003 0303 	and.w	r3, r3, #3
 8016634:	2b02      	cmp	r3, #2
 8016636:	d130      	bne.n	801669a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	689b      	ldr	r3, [r3, #8]
 801663c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801663e:	697b      	ldr	r3, [r7, #20]
 8016640:	005b      	lsls	r3, r3, #1
 8016642:	2203      	movs	r2, #3
 8016644:	fa02 f303 	lsl.w	r3, r2, r3
 8016648:	43db      	mvns	r3, r3
 801664a:	693a      	ldr	r2, [r7, #16]
 801664c:	4013      	ands	r3, r2
 801664e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8016650:	683b      	ldr	r3, [r7, #0]
 8016652:	68da      	ldr	r2, [r3, #12]
 8016654:	697b      	ldr	r3, [r7, #20]
 8016656:	005b      	lsls	r3, r3, #1
 8016658:	fa02 f303 	lsl.w	r3, r2, r3
 801665c:	693a      	ldr	r2, [r7, #16]
 801665e:	4313      	orrs	r3, r2
 8016660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	693a      	ldr	r2, [r7, #16]
 8016666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	685b      	ldr	r3, [r3, #4]
 801666c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801666e:	2201      	movs	r2, #1
 8016670:	697b      	ldr	r3, [r7, #20]
 8016672:	fa02 f303 	lsl.w	r3, r2, r3
 8016676:	43db      	mvns	r3, r3
 8016678:	693a      	ldr	r2, [r7, #16]
 801667a:	4013      	ands	r3, r2
 801667c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801667e:	683b      	ldr	r3, [r7, #0]
 8016680:	685b      	ldr	r3, [r3, #4]
 8016682:	091b      	lsrs	r3, r3, #4
 8016684:	f003 0201 	and.w	r2, r3, #1
 8016688:	697b      	ldr	r3, [r7, #20]
 801668a:	fa02 f303 	lsl.w	r3, r2, r3
 801668e:	693a      	ldr	r2, [r7, #16]
 8016690:	4313      	orrs	r3, r2
 8016692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	693a      	ldr	r2, [r7, #16]
 8016698:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801669a:	683b      	ldr	r3, [r7, #0]
 801669c:	685b      	ldr	r3, [r3, #4]
 801669e:	f003 0303 	and.w	r3, r3, #3
 80166a2:	2b03      	cmp	r3, #3
 80166a4:	d017      	beq.n	80166d6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	68db      	ldr	r3, [r3, #12]
 80166aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80166ac:	697b      	ldr	r3, [r7, #20]
 80166ae:	005b      	lsls	r3, r3, #1
 80166b0:	2203      	movs	r2, #3
 80166b2:	fa02 f303 	lsl.w	r3, r2, r3
 80166b6:	43db      	mvns	r3, r3
 80166b8:	693a      	ldr	r2, [r7, #16]
 80166ba:	4013      	ands	r3, r2
 80166bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80166be:	683b      	ldr	r3, [r7, #0]
 80166c0:	689a      	ldr	r2, [r3, #8]
 80166c2:	697b      	ldr	r3, [r7, #20]
 80166c4:	005b      	lsls	r3, r3, #1
 80166c6:	fa02 f303 	lsl.w	r3, r2, r3
 80166ca:	693a      	ldr	r2, [r7, #16]
 80166cc:	4313      	orrs	r3, r2
 80166ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	693a      	ldr	r2, [r7, #16]
 80166d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80166d6:	683b      	ldr	r3, [r7, #0]
 80166d8:	685b      	ldr	r3, [r3, #4]
 80166da:	f003 0303 	and.w	r3, r3, #3
 80166de:	2b02      	cmp	r3, #2
 80166e0:	d123      	bne.n	801672a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80166e2:	697b      	ldr	r3, [r7, #20]
 80166e4:	08da      	lsrs	r2, r3, #3
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	3208      	adds	r2, #8
 80166ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80166f0:	697b      	ldr	r3, [r7, #20]
 80166f2:	f003 0307 	and.w	r3, r3, #7
 80166f6:	009b      	lsls	r3, r3, #2
 80166f8:	220f      	movs	r2, #15
 80166fa:	fa02 f303 	lsl.w	r3, r2, r3
 80166fe:	43db      	mvns	r3, r3
 8016700:	693a      	ldr	r2, [r7, #16]
 8016702:	4013      	ands	r3, r2
 8016704:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8016706:	683b      	ldr	r3, [r7, #0]
 8016708:	691a      	ldr	r2, [r3, #16]
 801670a:	697b      	ldr	r3, [r7, #20]
 801670c:	f003 0307 	and.w	r3, r3, #7
 8016710:	009b      	lsls	r3, r3, #2
 8016712:	fa02 f303 	lsl.w	r3, r2, r3
 8016716:	693a      	ldr	r2, [r7, #16]
 8016718:	4313      	orrs	r3, r2
 801671a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801671c:	697b      	ldr	r3, [r7, #20]
 801671e:	08da      	lsrs	r2, r3, #3
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	3208      	adds	r2, #8
 8016724:	6939      	ldr	r1, [r7, #16]
 8016726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8016730:	697b      	ldr	r3, [r7, #20]
 8016732:	005b      	lsls	r3, r3, #1
 8016734:	2203      	movs	r2, #3
 8016736:	fa02 f303 	lsl.w	r3, r2, r3
 801673a:	43db      	mvns	r3, r3
 801673c:	693a      	ldr	r2, [r7, #16]
 801673e:	4013      	ands	r3, r2
 8016740:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8016742:	683b      	ldr	r3, [r7, #0]
 8016744:	685b      	ldr	r3, [r3, #4]
 8016746:	f003 0203 	and.w	r2, r3, #3
 801674a:	697b      	ldr	r3, [r7, #20]
 801674c:	005b      	lsls	r3, r3, #1
 801674e:	fa02 f303 	lsl.w	r3, r2, r3
 8016752:	693a      	ldr	r2, [r7, #16]
 8016754:	4313      	orrs	r3, r2
 8016756:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	693a      	ldr	r2, [r7, #16]
 801675c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801675e:	683b      	ldr	r3, [r7, #0]
 8016760:	685b      	ldr	r3, [r3, #4]
 8016762:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8016766:	2b00      	cmp	r3, #0
 8016768:	f000 8098 	beq.w	801689c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 801676c:	4a54      	ldr	r2, [pc, #336]	; (80168c0 <HAL_GPIO_Init+0x2c8>)
 801676e:	697b      	ldr	r3, [r7, #20]
 8016770:	089b      	lsrs	r3, r3, #2
 8016772:	3302      	adds	r3, #2
 8016774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016778:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801677a:	697b      	ldr	r3, [r7, #20]
 801677c:	f003 0303 	and.w	r3, r3, #3
 8016780:	009b      	lsls	r3, r3, #2
 8016782:	220f      	movs	r2, #15
 8016784:	fa02 f303 	lsl.w	r3, r2, r3
 8016788:	43db      	mvns	r3, r3
 801678a:	693a      	ldr	r2, [r7, #16]
 801678c:	4013      	ands	r3, r2
 801678e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8016796:	d019      	beq.n	80167cc <HAL_GPIO_Init+0x1d4>
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	4a4a      	ldr	r2, [pc, #296]	; (80168c4 <HAL_GPIO_Init+0x2cc>)
 801679c:	4293      	cmp	r3, r2
 801679e:	d013      	beq.n	80167c8 <HAL_GPIO_Init+0x1d0>
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	4a49      	ldr	r2, [pc, #292]	; (80168c8 <HAL_GPIO_Init+0x2d0>)
 80167a4:	4293      	cmp	r3, r2
 80167a6:	d00d      	beq.n	80167c4 <HAL_GPIO_Init+0x1cc>
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	4a48      	ldr	r2, [pc, #288]	; (80168cc <HAL_GPIO_Init+0x2d4>)
 80167ac:	4293      	cmp	r3, r2
 80167ae:	d007      	beq.n	80167c0 <HAL_GPIO_Init+0x1c8>
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	4a47      	ldr	r2, [pc, #284]	; (80168d0 <HAL_GPIO_Init+0x2d8>)
 80167b4:	4293      	cmp	r3, r2
 80167b6:	d101      	bne.n	80167bc <HAL_GPIO_Init+0x1c4>
 80167b8:	2304      	movs	r3, #4
 80167ba:	e008      	b.n	80167ce <HAL_GPIO_Init+0x1d6>
 80167bc:	2307      	movs	r3, #7
 80167be:	e006      	b.n	80167ce <HAL_GPIO_Init+0x1d6>
 80167c0:	2303      	movs	r3, #3
 80167c2:	e004      	b.n	80167ce <HAL_GPIO_Init+0x1d6>
 80167c4:	2302      	movs	r3, #2
 80167c6:	e002      	b.n	80167ce <HAL_GPIO_Init+0x1d6>
 80167c8:	2301      	movs	r3, #1
 80167ca:	e000      	b.n	80167ce <HAL_GPIO_Init+0x1d6>
 80167cc:	2300      	movs	r3, #0
 80167ce:	697a      	ldr	r2, [r7, #20]
 80167d0:	f002 0203 	and.w	r2, r2, #3
 80167d4:	0092      	lsls	r2, r2, #2
 80167d6:	4093      	lsls	r3, r2
 80167d8:	693a      	ldr	r2, [r7, #16]
 80167da:	4313      	orrs	r3, r2
 80167dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80167de:	4938      	ldr	r1, [pc, #224]	; (80168c0 <HAL_GPIO_Init+0x2c8>)
 80167e0:	697b      	ldr	r3, [r7, #20]
 80167e2:	089b      	lsrs	r3, r3, #2
 80167e4:	3302      	adds	r3, #2
 80167e6:	693a      	ldr	r2, [r7, #16]
 80167e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80167ec:	4b39      	ldr	r3, [pc, #228]	; (80168d4 <HAL_GPIO_Init+0x2dc>)
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	43db      	mvns	r3, r3
 80167f6:	693a      	ldr	r2, [r7, #16]
 80167f8:	4013      	ands	r3, r2
 80167fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80167fc:	683b      	ldr	r3, [r7, #0]
 80167fe:	685b      	ldr	r3, [r3, #4]
 8016800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016804:	2b00      	cmp	r3, #0
 8016806:	d003      	beq.n	8016810 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8016808:	693a      	ldr	r2, [r7, #16]
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	4313      	orrs	r3, r2
 801680e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8016810:	4a30      	ldr	r2, [pc, #192]	; (80168d4 <HAL_GPIO_Init+0x2dc>)
 8016812:	693b      	ldr	r3, [r7, #16]
 8016814:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8016816:	4b2f      	ldr	r3, [pc, #188]	; (80168d4 <HAL_GPIO_Init+0x2dc>)
 8016818:	685b      	ldr	r3, [r3, #4]
 801681a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	43db      	mvns	r3, r3
 8016820:	693a      	ldr	r2, [r7, #16]
 8016822:	4013      	ands	r3, r2
 8016824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8016826:	683b      	ldr	r3, [r7, #0]
 8016828:	685b      	ldr	r3, [r3, #4]
 801682a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801682e:	2b00      	cmp	r3, #0
 8016830:	d003      	beq.n	801683a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8016832:	693a      	ldr	r2, [r7, #16]
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	4313      	orrs	r3, r2
 8016838:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801683a:	4a26      	ldr	r2, [pc, #152]	; (80168d4 <HAL_GPIO_Init+0x2dc>)
 801683c:	693b      	ldr	r3, [r7, #16]
 801683e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8016840:	4b24      	ldr	r3, [pc, #144]	; (80168d4 <HAL_GPIO_Init+0x2dc>)
 8016842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	43db      	mvns	r3, r3
 801684c:	693a      	ldr	r2, [r7, #16]
 801684e:	4013      	ands	r3, r2
 8016850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8016852:	683b      	ldr	r3, [r7, #0]
 8016854:	685b      	ldr	r3, [r3, #4]
 8016856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801685a:	2b00      	cmp	r3, #0
 801685c:	d003      	beq.n	8016866 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 801685e:	693a      	ldr	r2, [r7, #16]
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	4313      	orrs	r3, r2
 8016864:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8016866:	4a1b      	ldr	r2, [pc, #108]	; (80168d4 <HAL_GPIO_Init+0x2dc>)
 8016868:	693b      	ldr	r3, [r7, #16]
 801686a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 801686e:	4b19      	ldr	r3, [pc, #100]	; (80168d4 <HAL_GPIO_Init+0x2dc>)
 8016870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	43db      	mvns	r3, r3
 801687a:	693a      	ldr	r2, [r7, #16]
 801687c:	4013      	ands	r3, r2
 801687e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8016880:	683b      	ldr	r3, [r7, #0]
 8016882:	685b      	ldr	r3, [r3, #4]
 8016884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016888:	2b00      	cmp	r3, #0
 801688a:	d003      	beq.n	8016894 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 801688c:	693a      	ldr	r2, [r7, #16]
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	4313      	orrs	r3, r2
 8016892:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8016894:	4a0f      	ldr	r2, [pc, #60]	; (80168d4 <HAL_GPIO_Init+0x2dc>)
 8016896:	693b      	ldr	r3, [r7, #16]
 8016898:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 801689c:	697b      	ldr	r3, [r7, #20]
 801689e:	3301      	adds	r3, #1
 80168a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80168a2:	683b      	ldr	r3, [r7, #0]
 80168a4:	681a      	ldr	r2, [r3, #0]
 80168a6:	697b      	ldr	r3, [r7, #20]
 80168a8:	fa22 f303 	lsr.w	r3, r2, r3
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	f47f aeab 	bne.w	8016608 <HAL_GPIO_Init+0x10>
  }
}
 80168b2:	bf00      	nop
 80168b4:	bf00      	nop
 80168b6:	371c      	adds	r7, #28
 80168b8:	46bd      	mov	sp, r7
 80168ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168be:	4770      	bx	lr
 80168c0:	40010000 	.word	0x40010000
 80168c4:	48000400 	.word	0x48000400
 80168c8:	48000800 	.word	0x48000800
 80168cc:	48000c00 	.word	0x48000c00
 80168d0:	48001000 	.word	0x48001000
 80168d4:	58000800 	.word	0x58000800

080168d8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80168d8:	b480      	push	{r7}
 80168da:	b087      	sub	sp, #28
 80168dc:	af00      	add	r7, sp, #0
 80168de:	6078      	str	r0, [r7, #4]
 80168e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80168e2:	2300      	movs	r3, #0
 80168e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80168e6:	e0bb      	b.n	8016a60 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80168e8:	2201      	movs	r2, #1
 80168ea:	697b      	ldr	r3, [r7, #20]
 80168ec:	fa02 f303 	lsl.w	r3, r2, r3
 80168f0:	683a      	ldr	r2, [r7, #0]
 80168f2:	4013      	ands	r3, r2
 80168f4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80168f6:	693b      	ldr	r3, [r7, #16]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	f000 80ae 	beq.w	8016a5a <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80168fe:	4a5f      	ldr	r2, [pc, #380]	; (8016a7c <HAL_GPIO_DeInit+0x1a4>)
 8016900:	697b      	ldr	r3, [r7, #20]
 8016902:	089b      	lsrs	r3, r3, #2
 8016904:	3302      	adds	r3, #2
 8016906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801690a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 801690c:	697b      	ldr	r3, [r7, #20]
 801690e:	f003 0303 	and.w	r3, r3, #3
 8016912:	009b      	lsls	r3, r3, #2
 8016914:	220f      	movs	r2, #15
 8016916:	fa02 f303 	lsl.w	r3, r2, r3
 801691a:	68fa      	ldr	r2, [r7, #12]
 801691c:	4013      	ands	r3, r2
 801691e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8016926:	d019      	beq.n	801695c <HAL_GPIO_DeInit+0x84>
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	4a55      	ldr	r2, [pc, #340]	; (8016a80 <HAL_GPIO_DeInit+0x1a8>)
 801692c:	4293      	cmp	r3, r2
 801692e:	d013      	beq.n	8016958 <HAL_GPIO_DeInit+0x80>
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	4a54      	ldr	r2, [pc, #336]	; (8016a84 <HAL_GPIO_DeInit+0x1ac>)
 8016934:	4293      	cmp	r3, r2
 8016936:	d00d      	beq.n	8016954 <HAL_GPIO_DeInit+0x7c>
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	4a53      	ldr	r2, [pc, #332]	; (8016a88 <HAL_GPIO_DeInit+0x1b0>)
 801693c:	4293      	cmp	r3, r2
 801693e:	d007      	beq.n	8016950 <HAL_GPIO_DeInit+0x78>
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	4a52      	ldr	r2, [pc, #328]	; (8016a8c <HAL_GPIO_DeInit+0x1b4>)
 8016944:	4293      	cmp	r3, r2
 8016946:	d101      	bne.n	801694c <HAL_GPIO_DeInit+0x74>
 8016948:	2304      	movs	r3, #4
 801694a:	e008      	b.n	801695e <HAL_GPIO_DeInit+0x86>
 801694c:	2307      	movs	r3, #7
 801694e:	e006      	b.n	801695e <HAL_GPIO_DeInit+0x86>
 8016950:	2303      	movs	r3, #3
 8016952:	e004      	b.n	801695e <HAL_GPIO_DeInit+0x86>
 8016954:	2302      	movs	r3, #2
 8016956:	e002      	b.n	801695e <HAL_GPIO_DeInit+0x86>
 8016958:	2301      	movs	r3, #1
 801695a:	e000      	b.n	801695e <HAL_GPIO_DeInit+0x86>
 801695c:	2300      	movs	r3, #0
 801695e:	697a      	ldr	r2, [r7, #20]
 8016960:	f002 0203 	and.w	r2, r2, #3
 8016964:	0092      	lsls	r2, r2, #2
 8016966:	4093      	lsls	r3, r2
 8016968:	68fa      	ldr	r2, [r7, #12]
 801696a:	429a      	cmp	r2, r3
 801696c:	d136      	bne.n	80169dc <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 801696e:	4b48      	ldr	r3, [pc, #288]	; (8016a90 <HAL_GPIO_DeInit+0x1b8>)
 8016970:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8016974:	693b      	ldr	r3, [r7, #16]
 8016976:	43db      	mvns	r3, r3
 8016978:	4945      	ldr	r1, [pc, #276]	; (8016a90 <HAL_GPIO_DeInit+0x1b8>)
 801697a:	4013      	ands	r3, r2
 801697c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8016980:	4b43      	ldr	r3, [pc, #268]	; (8016a90 <HAL_GPIO_DeInit+0x1b8>)
 8016982:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8016986:	693b      	ldr	r3, [r7, #16]
 8016988:	43db      	mvns	r3, r3
 801698a:	4941      	ldr	r1, [pc, #260]	; (8016a90 <HAL_GPIO_DeInit+0x1b8>)
 801698c:	4013      	ands	r3, r2
 801698e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8016992:	4b3f      	ldr	r3, [pc, #252]	; (8016a90 <HAL_GPIO_DeInit+0x1b8>)
 8016994:	681a      	ldr	r2, [r3, #0]
 8016996:	693b      	ldr	r3, [r7, #16]
 8016998:	43db      	mvns	r3, r3
 801699a:	493d      	ldr	r1, [pc, #244]	; (8016a90 <HAL_GPIO_DeInit+0x1b8>)
 801699c:	4013      	ands	r3, r2
 801699e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80169a0:	4b3b      	ldr	r3, [pc, #236]	; (8016a90 <HAL_GPIO_DeInit+0x1b8>)
 80169a2:	685a      	ldr	r2, [r3, #4]
 80169a4:	693b      	ldr	r3, [r7, #16]
 80169a6:	43db      	mvns	r3, r3
 80169a8:	4939      	ldr	r1, [pc, #228]	; (8016a90 <HAL_GPIO_DeInit+0x1b8>)
 80169aa:	4013      	ands	r3, r2
 80169ac:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80169ae:	697b      	ldr	r3, [r7, #20]
 80169b0:	f003 0303 	and.w	r3, r3, #3
 80169b4:	009b      	lsls	r3, r3, #2
 80169b6:	220f      	movs	r2, #15
 80169b8:	fa02 f303 	lsl.w	r3, r2, r3
 80169bc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80169be:	4a2f      	ldr	r2, [pc, #188]	; (8016a7c <HAL_GPIO_DeInit+0x1a4>)
 80169c0:	697b      	ldr	r3, [r7, #20]
 80169c2:	089b      	lsrs	r3, r3, #2
 80169c4:	3302      	adds	r3, #2
 80169c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	43da      	mvns	r2, r3
 80169ce:	482b      	ldr	r0, [pc, #172]	; (8016a7c <HAL_GPIO_DeInit+0x1a4>)
 80169d0:	697b      	ldr	r3, [r7, #20]
 80169d2:	089b      	lsrs	r3, r3, #2
 80169d4:	400a      	ands	r2, r1
 80169d6:	3302      	adds	r3, #2
 80169d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	681a      	ldr	r2, [r3, #0]
 80169e0:	697b      	ldr	r3, [r7, #20]
 80169e2:	005b      	lsls	r3, r3, #1
 80169e4:	2103      	movs	r1, #3
 80169e6:	fa01 f303 	lsl.w	r3, r1, r3
 80169ea:	431a      	orrs	r2, r3
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80169f0:	697b      	ldr	r3, [r7, #20]
 80169f2:	08da      	lsrs	r2, r3, #3
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	3208      	adds	r2, #8
 80169f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80169fc:	697b      	ldr	r3, [r7, #20]
 80169fe:	f003 0307 	and.w	r3, r3, #7
 8016a02:	009b      	lsls	r3, r3, #2
 8016a04:	220f      	movs	r2, #15
 8016a06:	fa02 f303 	lsl.w	r3, r2, r3
 8016a0a:	43db      	mvns	r3, r3
 8016a0c:	697a      	ldr	r2, [r7, #20]
 8016a0e:	08d2      	lsrs	r2, r2, #3
 8016a10:	4019      	ands	r1, r3
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	3208      	adds	r2, #8
 8016a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	68da      	ldr	r2, [r3, #12]
 8016a1e:	697b      	ldr	r3, [r7, #20]
 8016a20:	005b      	lsls	r3, r3, #1
 8016a22:	2103      	movs	r1, #3
 8016a24:	fa01 f303 	lsl.w	r3, r1, r3
 8016a28:	43db      	mvns	r3, r3
 8016a2a:	401a      	ands	r2, r3
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	685a      	ldr	r2, [r3, #4]
 8016a34:	2101      	movs	r1, #1
 8016a36:	697b      	ldr	r3, [r7, #20]
 8016a38:	fa01 f303 	lsl.w	r3, r1, r3
 8016a3c:	43db      	mvns	r3, r3
 8016a3e:	401a      	ands	r2, r3
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	689a      	ldr	r2, [r3, #8]
 8016a48:	697b      	ldr	r3, [r7, #20]
 8016a4a:	005b      	lsls	r3, r3, #1
 8016a4c:	2103      	movs	r1, #3
 8016a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8016a52:	43db      	mvns	r3, r3
 8016a54:	401a      	ands	r2, r3
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	609a      	str	r2, [r3, #8]
    }

    position++;
 8016a5a:	697b      	ldr	r3, [r7, #20]
 8016a5c:	3301      	adds	r3, #1
 8016a5e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8016a60:	683a      	ldr	r2, [r7, #0]
 8016a62:	697b      	ldr	r3, [r7, #20]
 8016a64:	fa22 f303 	lsr.w	r3, r2, r3
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	f47f af3d 	bne.w	80168e8 <HAL_GPIO_DeInit+0x10>
  }
}
 8016a6e:	bf00      	nop
 8016a70:	bf00      	nop
 8016a72:	371c      	adds	r7, #28
 8016a74:	46bd      	mov	sp, r7
 8016a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7a:	4770      	bx	lr
 8016a7c:	40010000 	.word	0x40010000
 8016a80:	48000400 	.word	0x48000400
 8016a84:	48000800 	.word	0x48000800
 8016a88:	48000c00 	.word	0x48000c00
 8016a8c:	48001000 	.word	0x48001000
 8016a90:	58000800 	.word	0x58000800

08016a94 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8016a94:	b480      	push	{r7}
 8016a96:	b085      	sub	sp, #20
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
 8016a9c:	460b      	mov	r3, r1
 8016a9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	691a      	ldr	r2, [r3, #16]
 8016aa4:	887b      	ldrh	r3, [r7, #2]
 8016aa6:	4013      	ands	r3, r2
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d002      	beq.n	8016ab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8016aac:	2301      	movs	r3, #1
 8016aae:	73fb      	strb	r3, [r7, #15]
 8016ab0:	e001      	b.n	8016ab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8016ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ab8:	4618      	mov	r0, r3
 8016aba:	3714      	adds	r7, #20
 8016abc:	46bd      	mov	sp, r7
 8016abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac2:	4770      	bx	lr

08016ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016ac4:	b480      	push	{r7}
 8016ac6:	b083      	sub	sp, #12
 8016ac8:	af00      	add	r7, sp, #0
 8016aca:	6078      	str	r0, [r7, #4]
 8016acc:	460b      	mov	r3, r1
 8016ace:	807b      	strh	r3, [r7, #2]
 8016ad0:	4613      	mov	r3, r2
 8016ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8016ad4:	787b      	ldrb	r3, [r7, #1]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d003      	beq.n	8016ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8016ada:	887a      	ldrh	r2, [r7, #2]
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8016ae0:	e002      	b.n	8016ae8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8016ae2:	887a      	ldrh	r2, [r7, #2]
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8016ae8:	bf00      	nop
 8016aea:	370c      	adds	r7, #12
 8016aec:	46bd      	mov	sp, r7
 8016aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af2:	4770      	bx	lr

08016af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b082      	sub	sp, #8
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d101      	bne.n	8016b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8016b02:	2301      	movs	r3, #1
 8016b04:	e081      	b.n	8016c0a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016b0c:	b2db      	uxtb	r3, r3
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d106      	bne.n	8016b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	2200      	movs	r2, #0
 8016b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8016b1a:	6878      	ldr	r0, [r7, #4]
 8016b1c:	f7ea fc50 	bl	80013c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	2224      	movs	r2, #36	; 0x24
 8016b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	681a      	ldr	r2, [r3, #0]
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	f022 0201 	bic.w	r2, r2, #1
 8016b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	685a      	ldr	r2, [r3, #4]
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8016b44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	689a      	ldr	r2, [r3, #8]
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016b54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	68db      	ldr	r3, [r3, #12]
 8016b5a:	2b01      	cmp	r3, #1
 8016b5c:	d107      	bne.n	8016b6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	689a      	ldr	r2, [r3, #8]
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016b6a:	609a      	str	r2, [r3, #8]
 8016b6c:	e006      	b.n	8016b7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	689a      	ldr	r2, [r3, #8]
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8016b7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	68db      	ldr	r3, [r3, #12]
 8016b80:	2b02      	cmp	r3, #2
 8016b82:	d104      	bne.n	8016b8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016b8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	685b      	ldr	r3, [r3, #4]
 8016b94:	687a      	ldr	r2, [r7, #4]
 8016b96:	6812      	ldr	r2, [r2, #0]
 8016b98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016ba0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	68da      	ldr	r2, [r3, #12]
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016bb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	691a      	ldr	r2, [r3, #16]
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	695b      	ldr	r3, [r3, #20]
 8016bba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	699b      	ldr	r3, [r3, #24]
 8016bc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	430a      	orrs	r2, r1
 8016bca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	69d9      	ldr	r1, [r3, #28]
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	6a1a      	ldr	r2, [r3, #32]
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	430a      	orrs	r2, r1
 8016bda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	681a      	ldr	r2, [r3, #0]
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	f042 0201 	orr.w	r2, r2, #1
 8016bea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	2200      	movs	r2, #0
 8016bf0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	2220      	movs	r2, #32
 8016bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	2200      	movs	r2, #0
 8016bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	2200      	movs	r2, #0
 8016c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8016c08:	2300      	movs	r3, #0
}
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	3708      	adds	r7, #8
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	bd80      	pop	{r7, pc}

08016c12 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8016c12:	b580      	push	{r7, lr}
 8016c14:	b082      	sub	sp, #8
 8016c16:	af00      	add	r7, sp, #0
 8016c18:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d101      	bne.n	8016c24 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8016c20:	2301      	movs	r3, #1
 8016c22:	e021      	b.n	8016c68 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	2224      	movs	r2, #36	; 0x24
 8016c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	681a      	ldr	r2, [r3, #0]
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	f022 0201 	bic.w	r2, r2, #1
 8016c3a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8016c3c:	6878      	ldr	r0, [r7, #4]
 8016c3e:	f7ea fc05 	bl	800144c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	2200      	movs	r2, #0
 8016c46:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	2200      	movs	r2, #0
 8016c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	2200      	movs	r2, #0
 8016c54:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	2200      	movs	r2, #0
 8016c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	2200      	movs	r2, #0
 8016c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8016c66:	2300      	movs	r3, #0
}
 8016c68:	4618      	mov	r0, r3
 8016c6a:	3708      	adds	r7, #8
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd80      	pop	{r7, pc}

08016c70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b088      	sub	sp, #32
 8016c74:	af02      	add	r7, sp, #8
 8016c76:	60f8      	str	r0, [r7, #12]
 8016c78:	607a      	str	r2, [r7, #4]
 8016c7a:	461a      	mov	r2, r3
 8016c7c:	460b      	mov	r3, r1
 8016c7e:	817b      	strh	r3, [r7, #10]
 8016c80:	4613      	mov	r3, r2
 8016c82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016c8a:	b2db      	uxtb	r3, r3
 8016c8c:	2b20      	cmp	r3, #32
 8016c8e:	f040 80da 	bne.w	8016e46 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016c98:	2b01      	cmp	r3, #1
 8016c9a:	d101      	bne.n	8016ca0 <HAL_I2C_Master_Transmit+0x30>
 8016c9c:	2302      	movs	r3, #2
 8016c9e:	e0d3      	b.n	8016e48 <HAL_I2C_Master_Transmit+0x1d8>
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	2201      	movs	r2, #1
 8016ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016ca8:	f7ff fb8a 	bl	80163c0 <HAL_GetTick>
 8016cac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016cae:	697b      	ldr	r3, [r7, #20]
 8016cb0:	9300      	str	r3, [sp, #0]
 8016cb2:	2319      	movs	r3, #25
 8016cb4:	2201      	movs	r2, #1
 8016cb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016cba:	68f8      	ldr	r0, [r7, #12]
 8016cbc:	f000 fc76 	bl	80175ac <I2C_WaitOnFlagUntilTimeout>
 8016cc0:	4603      	mov	r3, r0
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d001      	beq.n	8016cca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8016cc6:	2301      	movs	r3, #1
 8016cc8:	e0be      	b.n	8016e48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	2221      	movs	r2, #33	; 0x21
 8016cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	2210      	movs	r2, #16
 8016cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	2200      	movs	r2, #0
 8016cde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	687a      	ldr	r2, [r7, #4]
 8016ce4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	893a      	ldrh	r2, [r7, #8]
 8016cea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	2200      	movs	r2, #0
 8016cf0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016cf6:	b29b      	uxth	r3, r3
 8016cf8:	2bff      	cmp	r3, #255	; 0xff
 8016cfa:	d90e      	bls.n	8016d1a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	22ff      	movs	r2, #255	; 0xff
 8016d00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d06:	b2da      	uxtb	r2, r3
 8016d08:	8979      	ldrh	r1, [r7, #10]
 8016d0a:	4b51      	ldr	r3, [pc, #324]	; (8016e50 <HAL_I2C_Master_Transmit+0x1e0>)
 8016d0c:	9300      	str	r3, [sp, #0]
 8016d0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016d12:	68f8      	ldr	r0, [r7, #12]
 8016d14:	f000 fe6c 	bl	80179f0 <I2C_TransferConfig>
 8016d18:	e06c      	b.n	8016df4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016d1e:	b29a      	uxth	r2, r3
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d28:	b2da      	uxtb	r2, r3
 8016d2a:	8979      	ldrh	r1, [r7, #10]
 8016d2c:	4b48      	ldr	r3, [pc, #288]	; (8016e50 <HAL_I2C_Master_Transmit+0x1e0>)
 8016d2e:	9300      	str	r3, [sp, #0]
 8016d30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016d34:	68f8      	ldr	r0, [r7, #12]
 8016d36:	f000 fe5b 	bl	80179f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8016d3a:	e05b      	b.n	8016df4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016d3c:	697a      	ldr	r2, [r7, #20]
 8016d3e:	6a39      	ldr	r1, [r7, #32]
 8016d40:	68f8      	ldr	r0, [r7, #12]
 8016d42:	f000 fc73 	bl	801762c <I2C_WaitOnTXISFlagUntilTimeout>
 8016d46:	4603      	mov	r3, r0
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d001      	beq.n	8016d50 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8016d4c:	2301      	movs	r3, #1
 8016d4e:	e07b      	b.n	8016e48 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d54:	781a      	ldrb	r2, [r3, #0]
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d60:	1c5a      	adds	r2, r3, #1
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016d6a:	b29b      	uxth	r3, r3
 8016d6c:	3b01      	subs	r3, #1
 8016d6e:	b29a      	uxth	r2, r3
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d78:	3b01      	subs	r3, #1
 8016d7a:	b29a      	uxth	r2, r3
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016d84:	b29b      	uxth	r3, r3
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d034      	beq.n	8016df4 <HAL_I2C_Master_Transmit+0x184>
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d130      	bne.n	8016df4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016d92:	697b      	ldr	r3, [r7, #20]
 8016d94:	9300      	str	r3, [sp, #0]
 8016d96:	6a3b      	ldr	r3, [r7, #32]
 8016d98:	2200      	movs	r2, #0
 8016d9a:	2180      	movs	r1, #128	; 0x80
 8016d9c:	68f8      	ldr	r0, [r7, #12]
 8016d9e:	f000 fc05 	bl	80175ac <I2C_WaitOnFlagUntilTimeout>
 8016da2:	4603      	mov	r3, r0
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d001      	beq.n	8016dac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8016da8:	2301      	movs	r3, #1
 8016daa:	e04d      	b.n	8016e48 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016db0:	b29b      	uxth	r3, r3
 8016db2:	2bff      	cmp	r3, #255	; 0xff
 8016db4:	d90e      	bls.n	8016dd4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	22ff      	movs	r2, #255	; 0xff
 8016dba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016dc0:	b2da      	uxtb	r2, r3
 8016dc2:	8979      	ldrh	r1, [r7, #10]
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	9300      	str	r3, [sp, #0]
 8016dc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016dcc:	68f8      	ldr	r0, [r7, #12]
 8016dce:	f000 fe0f 	bl	80179f0 <I2C_TransferConfig>
 8016dd2:	e00f      	b.n	8016df4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016dd8:	b29a      	uxth	r2, r3
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016de2:	b2da      	uxtb	r2, r3
 8016de4:	8979      	ldrh	r1, [r7, #10]
 8016de6:	2300      	movs	r3, #0
 8016de8:	9300      	str	r3, [sp, #0]
 8016dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016dee:	68f8      	ldr	r0, [r7, #12]
 8016df0:	f000 fdfe 	bl	80179f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016df8:	b29b      	uxth	r3, r3
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d19e      	bne.n	8016d3c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016dfe:	697a      	ldr	r2, [r7, #20]
 8016e00:	6a39      	ldr	r1, [r7, #32]
 8016e02:	68f8      	ldr	r0, [r7, #12]
 8016e04:	f000 fc52 	bl	80176ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8016e08:	4603      	mov	r3, r0
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d001      	beq.n	8016e12 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8016e0e:	2301      	movs	r3, #1
 8016e10:	e01a      	b.n	8016e48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	2220      	movs	r2, #32
 8016e18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	6859      	ldr	r1, [r3, #4]
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	681a      	ldr	r2, [r3, #0]
 8016e24:	4b0b      	ldr	r3, [pc, #44]	; (8016e54 <HAL_I2C_Master_Transmit+0x1e4>)
 8016e26:	400b      	ands	r3, r1
 8016e28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	2220      	movs	r2, #32
 8016e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	2200      	movs	r2, #0
 8016e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016e42:	2300      	movs	r3, #0
 8016e44:	e000      	b.n	8016e48 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8016e46:	2302      	movs	r3, #2
  }
}
 8016e48:	4618      	mov	r0, r3
 8016e4a:	3718      	adds	r7, #24
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bd80      	pop	{r7, pc}
 8016e50:	80002000 	.word	0x80002000
 8016e54:	fe00e800 	.word	0xfe00e800

08016e58 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b088      	sub	sp, #32
 8016e5c:	af02      	add	r7, sp, #8
 8016e5e:	60f8      	str	r0, [r7, #12]
 8016e60:	607a      	str	r2, [r7, #4]
 8016e62:	461a      	mov	r2, r3
 8016e64:	460b      	mov	r3, r1
 8016e66:	817b      	strh	r3, [r7, #10]
 8016e68:	4613      	mov	r3, r2
 8016e6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016e72:	b2db      	uxtb	r3, r3
 8016e74:	2b20      	cmp	r3, #32
 8016e76:	f040 80db 	bne.w	8017030 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016e80:	2b01      	cmp	r3, #1
 8016e82:	d101      	bne.n	8016e88 <HAL_I2C_Master_Receive+0x30>
 8016e84:	2302      	movs	r3, #2
 8016e86:	e0d4      	b.n	8017032 <HAL_I2C_Master_Receive+0x1da>
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	2201      	movs	r2, #1
 8016e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016e90:	f7ff fa96 	bl	80163c0 <HAL_GetTick>
 8016e94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016e96:	697b      	ldr	r3, [r7, #20]
 8016e98:	9300      	str	r3, [sp, #0]
 8016e9a:	2319      	movs	r3, #25
 8016e9c:	2201      	movs	r2, #1
 8016e9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016ea2:	68f8      	ldr	r0, [r7, #12]
 8016ea4:	f000 fb82 	bl	80175ac <I2C_WaitOnFlagUntilTimeout>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d001      	beq.n	8016eb2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8016eae:	2301      	movs	r3, #1
 8016eb0:	e0bf      	b.n	8017032 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	2222      	movs	r2, #34	; 0x22
 8016eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	2210      	movs	r2, #16
 8016ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	2200      	movs	r2, #0
 8016ec6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	687a      	ldr	r2, [r7, #4]
 8016ecc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	893a      	ldrh	r2, [r7, #8]
 8016ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016ede:	b29b      	uxth	r3, r3
 8016ee0:	2bff      	cmp	r3, #255	; 0xff
 8016ee2:	d90e      	bls.n	8016f02 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	22ff      	movs	r2, #255	; 0xff
 8016ee8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016eee:	b2da      	uxtb	r2, r3
 8016ef0:	8979      	ldrh	r1, [r7, #10]
 8016ef2:	4b52      	ldr	r3, [pc, #328]	; (801703c <HAL_I2C_Master_Receive+0x1e4>)
 8016ef4:	9300      	str	r3, [sp, #0]
 8016ef6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016efa:	68f8      	ldr	r0, [r7, #12]
 8016efc:	f000 fd78 	bl	80179f0 <I2C_TransferConfig>
 8016f00:	e06d      	b.n	8016fde <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016f02:	68fb      	ldr	r3, [r7, #12]
 8016f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f06:	b29a      	uxth	r2, r3
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f10:	b2da      	uxtb	r2, r3
 8016f12:	8979      	ldrh	r1, [r7, #10]
 8016f14:	4b49      	ldr	r3, [pc, #292]	; (801703c <HAL_I2C_Master_Receive+0x1e4>)
 8016f16:	9300      	str	r3, [sp, #0]
 8016f18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016f1c:	68f8      	ldr	r0, [r7, #12]
 8016f1e:	f000 fd67 	bl	80179f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8016f22:	e05c      	b.n	8016fde <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016f24:	697a      	ldr	r2, [r7, #20]
 8016f26:	6a39      	ldr	r1, [r7, #32]
 8016f28:	68f8      	ldr	r0, [r7, #12]
 8016f2a:	f000 fbfb 	bl	8017724 <I2C_WaitOnRXNEFlagUntilTimeout>
 8016f2e:	4603      	mov	r3, r0
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d001      	beq.n	8016f38 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8016f34:	2301      	movs	r3, #1
 8016f36:	e07c      	b.n	8017032 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f42:	b2d2      	uxtb	r2, r2
 8016f44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f4a:	1c5a      	adds	r2, r3, #1
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f54:	3b01      	subs	r3, #1
 8016f56:	b29a      	uxth	r2, r3
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f60:	b29b      	uxth	r3, r3
 8016f62:	3b01      	subs	r3, #1
 8016f64:	b29a      	uxth	r2, r3
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f6e:	b29b      	uxth	r3, r3
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d034      	beq.n	8016fde <HAL_I2C_Master_Receive+0x186>
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d130      	bne.n	8016fde <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016f7c:	697b      	ldr	r3, [r7, #20]
 8016f7e:	9300      	str	r3, [sp, #0]
 8016f80:	6a3b      	ldr	r3, [r7, #32]
 8016f82:	2200      	movs	r2, #0
 8016f84:	2180      	movs	r1, #128	; 0x80
 8016f86:	68f8      	ldr	r0, [r7, #12]
 8016f88:	f000 fb10 	bl	80175ac <I2C_WaitOnFlagUntilTimeout>
 8016f8c:	4603      	mov	r3, r0
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d001      	beq.n	8016f96 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8016f92:	2301      	movs	r3, #1
 8016f94:	e04d      	b.n	8017032 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f9a:	b29b      	uxth	r3, r3
 8016f9c:	2bff      	cmp	r3, #255	; 0xff
 8016f9e:	d90e      	bls.n	8016fbe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	22ff      	movs	r2, #255	; 0xff
 8016fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016faa:	b2da      	uxtb	r2, r3
 8016fac:	8979      	ldrh	r1, [r7, #10]
 8016fae:	2300      	movs	r3, #0
 8016fb0:	9300      	str	r3, [sp, #0]
 8016fb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016fb6:	68f8      	ldr	r0, [r7, #12]
 8016fb8:	f000 fd1a 	bl	80179f0 <I2C_TransferConfig>
 8016fbc:	e00f      	b.n	8016fde <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016fc2:	b29a      	uxth	r2, r3
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016fcc:	b2da      	uxtb	r2, r3
 8016fce:	8979      	ldrh	r1, [r7, #10]
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	9300      	str	r3, [sp, #0]
 8016fd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016fd8:	68f8      	ldr	r0, [r7, #12]
 8016fda:	f000 fd09 	bl	80179f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016fe2:	b29b      	uxth	r3, r3
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d19d      	bne.n	8016f24 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016fe8:	697a      	ldr	r2, [r7, #20]
 8016fea:	6a39      	ldr	r1, [r7, #32]
 8016fec:	68f8      	ldr	r0, [r7, #12]
 8016fee:	f000 fb5d 	bl	80176ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d001      	beq.n	8016ffc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8016ff8:	2301      	movs	r3, #1
 8016ffa:	e01a      	b.n	8017032 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	2220      	movs	r2, #32
 8017002:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	6859      	ldr	r1, [r3, #4]
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	681a      	ldr	r2, [r3, #0]
 801700e:	4b0c      	ldr	r3, [pc, #48]	; (8017040 <HAL_I2C_Master_Receive+0x1e8>)
 8017010:	400b      	ands	r3, r1
 8017012:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	2220      	movs	r2, #32
 8017018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	2200      	movs	r2, #0
 8017020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	2200      	movs	r2, #0
 8017028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801702c:	2300      	movs	r3, #0
 801702e:	e000      	b.n	8017032 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8017030:	2302      	movs	r3, #2
  }
}
 8017032:	4618      	mov	r0, r3
 8017034:	3718      	adds	r7, #24
 8017036:	46bd      	mov	sp, r7
 8017038:	bd80      	pop	{r7, pc}
 801703a:	bf00      	nop
 801703c:	80002400 	.word	0x80002400
 8017040:	fe00e800 	.word	0xfe00e800

08017044 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017044:	b580      	push	{r7, lr}
 8017046:	b088      	sub	sp, #32
 8017048:	af02      	add	r7, sp, #8
 801704a:	60f8      	str	r0, [r7, #12]
 801704c:	4608      	mov	r0, r1
 801704e:	4611      	mov	r1, r2
 8017050:	461a      	mov	r2, r3
 8017052:	4603      	mov	r3, r0
 8017054:	817b      	strh	r3, [r7, #10]
 8017056:	460b      	mov	r3, r1
 8017058:	813b      	strh	r3, [r7, #8]
 801705a:	4613      	mov	r3, r2
 801705c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017064:	b2db      	uxtb	r3, r3
 8017066:	2b20      	cmp	r3, #32
 8017068:	f040 80fd 	bne.w	8017266 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 801706c:	6a3b      	ldr	r3, [r7, #32]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d002      	beq.n	8017078 <HAL_I2C_Mem_Read+0x34>
 8017072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017074:	2b00      	cmp	r3, #0
 8017076:	d105      	bne.n	8017084 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801707e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8017080:	2301      	movs	r3, #1
 8017082:	e0f1      	b.n	8017268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801708a:	2b01      	cmp	r3, #1
 801708c:	d101      	bne.n	8017092 <HAL_I2C_Mem_Read+0x4e>
 801708e:	2302      	movs	r3, #2
 8017090:	e0ea      	b.n	8017268 <HAL_I2C_Mem_Read+0x224>
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	2201      	movs	r2, #1
 8017096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801709a:	f7ff f991 	bl	80163c0 <HAL_GetTick>
 801709e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80170a0:	697b      	ldr	r3, [r7, #20]
 80170a2:	9300      	str	r3, [sp, #0]
 80170a4:	2319      	movs	r3, #25
 80170a6:	2201      	movs	r2, #1
 80170a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80170ac:	68f8      	ldr	r0, [r7, #12]
 80170ae:	f000 fa7d 	bl	80175ac <I2C_WaitOnFlagUntilTimeout>
 80170b2:	4603      	mov	r3, r0
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d001      	beq.n	80170bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80170b8:	2301      	movs	r3, #1
 80170ba:	e0d5      	b.n	8017268 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	2222      	movs	r2, #34	; 0x22
 80170c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	2240      	movs	r2, #64	; 0x40
 80170c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	2200      	movs	r2, #0
 80170d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	6a3a      	ldr	r2, [r7, #32]
 80170d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80170dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	2200      	movs	r2, #0
 80170e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80170e4:	88f8      	ldrh	r0, [r7, #6]
 80170e6:	893a      	ldrh	r2, [r7, #8]
 80170e8:	8979      	ldrh	r1, [r7, #10]
 80170ea:	697b      	ldr	r3, [r7, #20]
 80170ec:	9301      	str	r3, [sp, #4]
 80170ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170f0:	9300      	str	r3, [sp, #0]
 80170f2:	4603      	mov	r3, r0
 80170f4:	68f8      	ldr	r0, [r7, #12]
 80170f6:	f000 f9e1 	bl	80174bc <I2C_RequestMemoryRead>
 80170fa:	4603      	mov	r3, r0
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d005      	beq.n	801710c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	2200      	movs	r2, #0
 8017104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8017108:	2301      	movs	r3, #1
 801710a:	e0ad      	b.n	8017268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017110:	b29b      	uxth	r3, r3
 8017112:	2bff      	cmp	r3, #255	; 0xff
 8017114:	d90e      	bls.n	8017134 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	22ff      	movs	r2, #255	; 0xff
 801711a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017120:	b2da      	uxtb	r2, r3
 8017122:	8979      	ldrh	r1, [r7, #10]
 8017124:	4b52      	ldr	r3, [pc, #328]	; (8017270 <HAL_I2C_Mem_Read+0x22c>)
 8017126:	9300      	str	r3, [sp, #0]
 8017128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801712c:	68f8      	ldr	r0, [r7, #12]
 801712e:	f000 fc5f 	bl	80179f0 <I2C_TransferConfig>
 8017132:	e00f      	b.n	8017154 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017138:	b29a      	uxth	r2, r3
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017142:	b2da      	uxtb	r2, r3
 8017144:	8979      	ldrh	r1, [r7, #10]
 8017146:	4b4a      	ldr	r3, [pc, #296]	; (8017270 <HAL_I2C_Mem_Read+0x22c>)
 8017148:	9300      	str	r3, [sp, #0]
 801714a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801714e:	68f8      	ldr	r0, [r7, #12]
 8017150:	f000 fc4e 	bl	80179f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8017154:	697b      	ldr	r3, [r7, #20]
 8017156:	9300      	str	r3, [sp, #0]
 8017158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801715a:	2200      	movs	r2, #0
 801715c:	2104      	movs	r1, #4
 801715e:	68f8      	ldr	r0, [r7, #12]
 8017160:	f000 fa24 	bl	80175ac <I2C_WaitOnFlagUntilTimeout>
 8017164:	4603      	mov	r3, r0
 8017166:	2b00      	cmp	r3, #0
 8017168:	d001      	beq.n	801716e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801716a:	2301      	movs	r3, #1
 801716c:	e07c      	b.n	8017268 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017178:	b2d2      	uxtb	r2, r2
 801717a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017180:	1c5a      	adds	r2, r3, #1
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801718a:	3b01      	subs	r3, #1
 801718c:	b29a      	uxth	r2, r3
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017196:	b29b      	uxth	r3, r3
 8017198:	3b01      	subs	r3, #1
 801719a:	b29a      	uxth	r2, r3
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80171a4:	b29b      	uxth	r3, r3
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d034      	beq.n	8017214 <HAL_I2C_Mem_Read+0x1d0>
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d130      	bne.n	8017214 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80171b2:	697b      	ldr	r3, [r7, #20]
 80171b4:	9300      	str	r3, [sp, #0]
 80171b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171b8:	2200      	movs	r2, #0
 80171ba:	2180      	movs	r1, #128	; 0x80
 80171bc:	68f8      	ldr	r0, [r7, #12]
 80171be:	f000 f9f5 	bl	80175ac <I2C_WaitOnFlagUntilTimeout>
 80171c2:	4603      	mov	r3, r0
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d001      	beq.n	80171cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80171c8:	2301      	movs	r3, #1
 80171ca:	e04d      	b.n	8017268 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80171d0:	b29b      	uxth	r3, r3
 80171d2:	2bff      	cmp	r3, #255	; 0xff
 80171d4:	d90e      	bls.n	80171f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	22ff      	movs	r2, #255	; 0xff
 80171da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80171e0:	b2da      	uxtb	r2, r3
 80171e2:	8979      	ldrh	r1, [r7, #10]
 80171e4:	2300      	movs	r3, #0
 80171e6:	9300      	str	r3, [sp, #0]
 80171e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80171ec:	68f8      	ldr	r0, [r7, #12]
 80171ee:	f000 fbff 	bl	80179f0 <I2C_TransferConfig>
 80171f2:	e00f      	b.n	8017214 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80171f8:	b29a      	uxth	r2, r3
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017202:	b2da      	uxtb	r2, r3
 8017204:	8979      	ldrh	r1, [r7, #10]
 8017206:	2300      	movs	r3, #0
 8017208:	9300      	str	r3, [sp, #0]
 801720a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801720e:	68f8      	ldr	r0, [r7, #12]
 8017210:	f000 fbee 	bl	80179f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017218:	b29b      	uxth	r3, r3
 801721a:	2b00      	cmp	r3, #0
 801721c:	d19a      	bne.n	8017154 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801721e:	697a      	ldr	r2, [r7, #20]
 8017220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017222:	68f8      	ldr	r0, [r7, #12]
 8017224:	f000 fa42 	bl	80176ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8017228:	4603      	mov	r3, r0
 801722a:	2b00      	cmp	r3, #0
 801722c:	d001      	beq.n	8017232 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801722e:	2301      	movs	r3, #1
 8017230:	e01a      	b.n	8017268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	2220      	movs	r2, #32
 8017238:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	6859      	ldr	r1, [r3, #4]
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	681a      	ldr	r2, [r3, #0]
 8017244:	4b0b      	ldr	r3, [pc, #44]	; (8017274 <HAL_I2C_Mem_Read+0x230>)
 8017246:	400b      	ands	r3, r1
 8017248:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	2220      	movs	r2, #32
 801724e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	2200      	movs	r2, #0
 8017256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	2200      	movs	r2, #0
 801725e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8017262:	2300      	movs	r3, #0
 8017264:	e000      	b.n	8017268 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8017266:	2302      	movs	r3, #2
  }
}
 8017268:	4618      	mov	r0, r3
 801726a:	3718      	adds	r7, #24
 801726c:	46bd      	mov	sp, r7
 801726e:	bd80      	pop	{r7, pc}
 8017270:	80002400 	.word	0x80002400
 8017274:	fe00e800 	.word	0xfe00e800

08017278 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8017278:	b580      	push	{r7, lr}
 801727a:	b08a      	sub	sp, #40	; 0x28
 801727c:	af02      	add	r7, sp, #8
 801727e:	60f8      	str	r0, [r7, #12]
 8017280:	607a      	str	r2, [r7, #4]
 8017282:	603b      	str	r3, [r7, #0]
 8017284:	460b      	mov	r3, r1
 8017286:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8017288:	2300      	movs	r3, #0
 801728a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017292:	b2db      	uxtb	r3, r3
 8017294:	2b20      	cmp	r3, #32
 8017296:	f040 80f1 	bne.w	801747c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	699b      	ldr	r3, [r3, #24]
 80172a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80172a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80172a8:	d101      	bne.n	80172ae <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80172aa:	2302      	movs	r3, #2
 80172ac:	e0e7      	b.n	801747e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80172b4:	2b01      	cmp	r3, #1
 80172b6:	d101      	bne.n	80172bc <HAL_I2C_IsDeviceReady+0x44>
 80172b8:	2302      	movs	r3, #2
 80172ba:	e0e0      	b.n	801747e <HAL_I2C_IsDeviceReady+0x206>
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	2201      	movs	r2, #1
 80172c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	2224      	movs	r2, #36	; 0x24
 80172c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	2200      	movs	r2, #0
 80172d0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	68db      	ldr	r3, [r3, #12]
 80172d6:	2b01      	cmp	r3, #1
 80172d8:	d107      	bne.n	80172ea <HAL_I2C_IsDeviceReady+0x72>
 80172da:	897b      	ldrh	r3, [r7, #10]
 80172dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80172e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80172e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80172e8:	e004      	b.n	80172f4 <HAL_I2C_IsDeviceReady+0x7c>
 80172ea:	897b      	ldrh	r3, [r7, #10]
 80172ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80172f0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80172f4:	68fa      	ldr	r2, [r7, #12]
 80172f6:	6812      	ldr	r2, [r2, #0]
 80172f8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80172fa:	f7ff f861 	bl	80163c0 <HAL_GetTick>
 80172fe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	699b      	ldr	r3, [r3, #24]
 8017306:	f003 0320 	and.w	r3, r3, #32
 801730a:	2b20      	cmp	r3, #32
 801730c:	bf0c      	ite	eq
 801730e:	2301      	moveq	r3, #1
 8017310:	2300      	movne	r3, #0
 8017312:	b2db      	uxtb	r3, r3
 8017314:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	699b      	ldr	r3, [r3, #24]
 801731c:	f003 0310 	and.w	r3, r3, #16
 8017320:	2b10      	cmp	r3, #16
 8017322:	bf0c      	ite	eq
 8017324:	2301      	moveq	r3, #1
 8017326:	2300      	movne	r3, #0
 8017328:	b2db      	uxtb	r3, r3
 801732a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 801732c:	e034      	b.n	8017398 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 801732e:	683b      	ldr	r3, [r7, #0]
 8017330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017334:	d01a      	beq.n	801736c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8017336:	f7ff f843 	bl	80163c0 <HAL_GetTick>
 801733a:	4602      	mov	r2, r0
 801733c:	69bb      	ldr	r3, [r7, #24]
 801733e:	1ad3      	subs	r3, r2, r3
 8017340:	683a      	ldr	r2, [r7, #0]
 8017342:	429a      	cmp	r2, r3
 8017344:	d302      	bcc.n	801734c <HAL_I2C_IsDeviceReady+0xd4>
 8017346:	683b      	ldr	r3, [r7, #0]
 8017348:	2b00      	cmp	r3, #0
 801734a:	d10f      	bne.n	801736c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	2220      	movs	r2, #32
 8017350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017358:	f043 0220 	orr.w	r2, r3, #32
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	2200      	movs	r2, #0
 8017364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8017368:	2301      	movs	r3, #1
 801736a:	e088      	b.n	801747e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	699b      	ldr	r3, [r3, #24]
 8017372:	f003 0320 	and.w	r3, r3, #32
 8017376:	2b20      	cmp	r3, #32
 8017378:	bf0c      	ite	eq
 801737a:	2301      	moveq	r3, #1
 801737c:	2300      	movne	r3, #0
 801737e:	b2db      	uxtb	r3, r3
 8017380:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	699b      	ldr	r3, [r3, #24]
 8017388:	f003 0310 	and.w	r3, r3, #16
 801738c:	2b10      	cmp	r3, #16
 801738e:	bf0c      	ite	eq
 8017390:	2301      	moveq	r3, #1
 8017392:	2300      	movne	r3, #0
 8017394:	b2db      	uxtb	r3, r3
 8017396:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8017398:	7ffb      	ldrb	r3, [r7, #31]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d102      	bne.n	80173a4 <HAL_I2C_IsDeviceReady+0x12c>
 801739e:	7fbb      	ldrb	r3, [r7, #30]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d0c4      	beq.n	801732e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	699b      	ldr	r3, [r3, #24]
 80173aa:	f003 0310 	and.w	r3, r3, #16
 80173ae:	2b10      	cmp	r3, #16
 80173b0:	d01a      	beq.n	80173e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80173b2:	69bb      	ldr	r3, [r7, #24]
 80173b4:	9300      	str	r3, [sp, #0]
 80173b6:	683b      	ldr	r3, [r7, #0]
 80173b8:	2200      	movs	r2, #0
 80173ba:	2120      	movs	r1, #32
 80173bc:	68f8      	ldr	r0, [r7, #12]
 80173be:	f000 f8f5 	bl	80175ac <I2C_WaitOnFlagUntilTimeout>
 80173c2:	4603      	mov	r3, r0
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d001      	beq.n	80173cc <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80173c8:	2301      	movs	r3, #1
 80173ca:	e058      	b.n	801747e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	2220      	movs	r2, #32
 80173d2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	2220      	movs	r2, #32
 80173d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	2200      	movs	r2, #0
 80173e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80173e4:	2300      	movs	r3, #0
 80173e6:	e04a      	b.n	801747e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80173e8:	69bb      	ldr	r3, [r7, #24]
 80173ea:	9300      	str	r3, [sp, #0]
 80173ec:	683b      	ldr	r3, [r7, #0]
 80173ee:	2200      	movs	r2, #0
 80173f0:	2120      	movs	r1, #32
 80173f2:	68f8      	ldr	r0, [r7, #12]
 80173f4:	f000 f8da 	bl	80175ac <I2C_WaitOnFlagUntilTimeout>
 80173f8:	4603      	mov	r3, r0
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d001      	beq.n	8017402 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80173fe:	2301      	movs	r3, #1
 8017400:	e03d      	b.n	801747e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	2210      	movs	r2, #16
 8017408:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	2220      	movs	r2, #32
 8017410:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8017412:	697b      	ldr	r3, [r7, #20]
 8017414:	687a      	ldr	r2, [r7, #4]
 8017416:	429a      	cmp	r2, r3
 8017418:	d118      	bne.n	801744c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	685a      	ldr	r2, [r3, #4]
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8017428:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 801742a:	69bb      	ldr	r3, [r7, #24]
 801742c:	9300      	str	r3, [sp, #0]
 801742e:	683b      	ldr	r3, [r7, #0]
 8017430:	2200      	movs	r2, #0
 8017432:	2120      	movs	r1, #32
 8017434:	68f8      	ldr	r0, [r7, #12]
 8017436:	f000 f8b9 	bl	80175ac <I2C_WaitOnFlagUntilTimeout>
 801743a:	4603      	mov	r3, r0
 801743c:	2b00      	cmp	r3, #0
 801743e:	d001      	beq.n	8017444 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8017440:	2301      	movs	r3, #1
 8017442:	e01c      	b.n	801747e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	2220      	movs	r2, #32
 801744a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 801744c:	697b      	ldr	r3, [r7, #20]
 801744e:	3301      	adds	r3, #1
 8017450:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8017452:	697b      	ldr	r3, [r7, #20]
 8017454:	687a      	ldr	r2, [r7, #4]
 8017456:	429a      	cmp	r2, r3
 8017458:	f63f af3b 	bhi.w	80172d2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	2220      	movs	r2, #32
 8017460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017468:	f043 0220 	orr.w	r2, r3, #32
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	2200      	movs	r2, #0
 8017474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8017478:	2301      	movs	r3, #1
 801747a:	e000      	b.n	801747e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 801747c:	2302      	movs	r3, #2
  }
}
 801747e:	4618      	mov	r0, r3
 8017480:	3720      	adds	r7, #32
 8017482:	46bd      	mov	sp, r7
 8017484:	bd80      	pop	{r7, pc}

08017486 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8017486:	b480      	push	{r7}
 8017488:	b083      	sub	sp, #12
 801748a:	af00      	add	r7, sp, #0
 801748c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017494:	b2db      	uxtb	r3, r3
}
 8017496:	4618      	mov	r0, r3
 8017498:	370c      	adds	r7, #12
 801749a:	46bd      	mov	sp, r7
 801749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a0:	4770      	bx	lr

080174a2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80174a2:	b480      	push	{r7}
 80174a4:	b083      	sub	sp, #12
 80174a6:	af00      	add	r7, sp, #0
 80174a8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80174ae:	4618      	mov	r0, r3
 80174b0:	370c      	adds	r7, #12
 80174b2:	46bd      	mov	sp, r7
 80174b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b8:	4770      	bx	lr
	...

080174bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b086      	sub	sp, #24
 80174c0:	af02      	add	r7, sp, #8
 80174c2:	60f8      	str	r0, [r7, #12]
 80174c4:	4608      	mov	r0, r1
 80174c6:	4611      	mov	r1, r2
 80174c8:	461a      	mov	r2, r3
 80174ca:	4603      	mov	r3, r0
 80174cc:	817b      	strh	r3, [r7, #10]
 80174ce:	460b      	mov	r3, r1
 80174d0:	813b      	strh	r3, [r7, #8]
 80174d2:	4613      	mov	r3, r2
 80174d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80174d6:	88fb      	ldrh	r3, [r7, #6]
 80174d8:	b2da      	uxtb	r2, r3
 80174da:	8979      	ldrh	r1, [r7, #10]
 80174dc:	4b20      	ldr	r3, [pc, #128]	; (8017560 <I2C_RequestMemoryRead+0xa4>)
 80174de:	9300      	str	r3, [sp, #0]
 80174e0:	2300      	movs	r3, #0
 80174e2:	68f8      	ldr	r0, [r7, #12]
 80174e4:	f000 fa84 	bl	80179f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80174e8:	69fa      	ldr	r2, [r7, #28]
 80174ea:	69b9      	ldr	r1, [r7, #24]
 80174ec:	68f8      	ldr	r0, [r7, #12]
 80174ee:	f000 f89d 	bl	801762c <I2C_WaitOnTXISFlagUntilTimeout>
 80174f2:	4603      	mov	r3, r0
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d001      	beq.n	80174fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80174f8:	2301      	movs	r3, #1
 80174fa:	e02c      	b.n	8017556 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80174fc:	88fb      	ldrh	r3, [r7, #6]
 80174fe:	2b01      	cmp	r3, #1
 8017500:	d105      	bne.n	801750e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017502:	893b      	ldrh	r3, [r7, #8]
 8017504:	b2da      	uxtb	r2, r3
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	629a      	str	r2, [r3, #40]	; 0x28
 801750c:	e015      	b.n	801753a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801750e:	893b      	ldrh	r3, [r7, #8]
 8017510:	0a1b      	lsrs	r3, r3, #8
 8017512:	b29b      	uxth	r3, r3
 8017514:	b2da      	uxtb	r2, r3
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801751c:	69fa      	ldr	r2, [r7, #28]
 801751e:	69b9      	ldr	r1, [r7, #24]
 8017520:	68f8      	ldr	r0, [r7, #12]
 8017522:	f000 f883 	bl	801762c <I2C_WaitOnTXISFlagUntilTimeout>
 8017526:	4603      	mov	r3, r0
 8017528:	2b00      	cmp	r3, #0
 801752a:	d001      	beq.n	8017530 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801752c:	2301      	movs	r3, #1
 801752e:	e012      	b.n	8017556 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017530:	893b      	ldrh	r3, [r7, #8]
 8017532:	b2da      	uxtb	r2, r3
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	681b      	ldr	r3, [r3, #0]
 8017538:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801753a:	69fb      	ldr	r3, [r7, #28]
 801753c:	9300      	str	r3, [sp, #0]
 801753e:	69bb      	ldr	r3, [r7, #24]
 8017540:	2200      	movs	r2, #0
 8017542:	2140      	movs	r1, #64	; 0x40
 8017544:	68f8      	ldr	r0, [r7, #12]
 8017546:	f000 f831 	bl	80175ac <I2C_WaitOnFlagUntilTimeout>
 801754a:	4603      	mov	r3, r0
 801754c:	2b00      	cmp	r3, #0
 801754e:	d001      	beq.n	8017554 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8017550:	2301      	movs	r3, #1
 8017552:	e000      	b.n	8017556 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8017554:	2300      	movs	r3, #0
}
 8017556:	4618      	mov	r0, r3
 8017558:	3710      	adds	r7, #16
 801755a:	46bd      	mov	sp, r7
 801755c:	bd80      	pop	{r7, pc}
 801755e:	bf00      	nop
 8017560:	80002000 	.word	0x80002000

08017564 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8017564:	b480      	push	{r7}
 8017566:	b083      	sub	sp, #12
 8017568:	af00      	add	r7, sp, #0
 801756a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	699b      	ldr	r3, [r3, #24]
 8017572:	f003 0302 	and.w	r3, r3, #2
 8017576:	2b02      	cmp	r3, #2
 8017578:	d103      	bne.n	8017582 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	2200      	movs	r2, #0
 8017580:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	699b      	ldr	r3, [r3, #24]
 8017588:	f003 0301 	and.w	r3, r3, #1
 801758c:	2b01      	cmp	r3, #1
 801758e:	d007      	beq.n	80175a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	699a      	ldr	r2, [r3, #24]
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	f042 0201 	orr.w	r2, r2, #1
 801759e:	619a      	str	r2, [r3, #24]
  }
}
 80175a0:	bf00      	nop
 80175a2:	370c      	adds	r7, #12
 80175a4:	46bd      	mov	sp, r7
 80175a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175aa:	4770      	bx	lr

080175ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b084      	sub	sp, #16
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	60f8      	str	r0, [r7, #12]
 80175b4:	60b9      	str	r1, [r7, #8]
 80175b6:	603b      	str	r3, [r7, #0]
 80175b8:	4613      	mov	r3, r2
 80175ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80175bc:	e022      	b.n	8017604 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80175be:	683b      	ldr	r3, [r7, #0]
 80175c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175c4:	d01e      	beq.n	8017604 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80175c6:	f7fe fefb 	bl	80163c0 <HAL_GetTick>
 80175ca:	4602      	mov	r2, r0
 80175cc:	69bb      	ldr	r3, [r7, #24]
 80175ce:	1ad3      	subs	r3, r2, r3
 80175d0:	683a      	ldr	r2, [r7, #0]
 80175d2:	429a      	cmp	r2, r3
 80175d4:	d302      	bcc.n	80175dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80175d6:	683b      	ldr	r3, [r7, #0]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d113      	bne.n	8017604 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80175e0:	f043 0220 	orr.w	r2, r3, #32
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	2220      	movs	r2, #32
 80175ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	2200      	movs	r2, #0
 80175f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	2200      	movs	r2, #0
 80175fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8017600:	2301      	movs	r3, #1
 8017602:	e00f      	b.n	8017624 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	699a      	ldr	r2, [r3, #24]
 801760a:	68bb      	ldr	r3, [r7, #8]
 801760c:	4013      	ands	r3, r2
 801760e:	68ba      	ldr	r2, [r7, #8]
 8017610:	429a      	cmp	r2, r3
 8017612:	bf0c      	ite	eq
 8017614:	2301      	moveq	r3, #1
 8017616:	2300      	movne	r3, #0
 8017618:	b2db      	uxtb	r3, r3
 801761a:	461a      	mov	r2, r3
 801761c:	79fb      	ldrb	r3, [r7, #7]
 801761e:	429a      	cmp	r2, r3
 8017620:	d0cd      	beq.n	80175be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8017622:	2300      	movs	r3, #0
}
 8017624:	4618      	mov	r0, r3
 8017626:	3710      	adds	r7, #16
 8017628:	46bd      	mov	sp, r7
 801762a:	bd80      	pop	{r7, pc}

0801762c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b084      	sub	sp, #16
 8017630:	af00      	add	r7, sp, #0
 8017632:	60f8      	str	r0, [r7, #12]
 8017634:	60b9      	str	r1, [r7, #8]
 8017636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017638:	e02c      	b.n	8017694 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801763a:	687a      	ldr	r2, [r7, #4]
 801763c:	68b9      	ldr	r1, [r7, #8]
 801763e:	68f8      	ldr	r0, [r7, #12]
 8017640:	f000 f8ea 	bl	8017818 <I2C_IsErrorOccurred>
 8017644:	4603      	mov	r3, r0
 8017646:	2b00      	cmp	r3, #0
 8017648:	d001      	beq.n	801764e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801764a:	2301      	movs	r3, #1
 801764c:	e02a      	b.n	80176a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801764e:	68bb      	ldr	r3, [r7, #8]
 8017650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017654:	d01e      	beq.n	8017694 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017656:	f7fe feb3 	bl	80163c0 <HAL_GetTick>
 801765a:	4602      	mov	r2, r0
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	1ad3      	subs	r3, r2, r3
 8017660:	68ba      	ldr	r2, [r7, #8]
 8017662:	429a      	cmp	r2, r3
 8017664:	d302      	bcc.n	801766c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8017666:	68bb      	ldr	r3, [r7, #8]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d113      	bne.n	8017694 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017670:	f043 0220 	orr.w	r2, r3, #32
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	2220      	movs	r2, #32
 801767c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	2200      	movs	r2, #0
 8017684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	2200      	movs	r2, #0
 801768c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8017690:	2301      	movs	r3, #1
 8017692:	e007      	b.n	80176a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	699b      	ldr	r3, [r3, #24]
 801769a:	f003 0302 	and.w	r3, r3, #2
 801769e:	2b02      	cmp	r3, #2
 80176a0:	d1cb      	bne.n	801763a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80176a2:	2300      	movs	r3, #0
}
 80176a4:	4618      	mov	r0, r3
 80176a6:	3710      	adds	r7, #16
 80176a8:	46bd      	mov	sp, r7
 80176aa:	bd80      	pop	{r7, pc}

080176ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b084      	sub	sp, #16
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	60f8      	str	r0, [r7, #12]
 80176b4:	60b9      	str	r1, [r7, #8]
 80176b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80176b8:	e028      	b.n	801770c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80176ba:	687a      	ldr	r2, [r7, #4]
 80176bc:	68b9      	ldr	r1, [r7, #8]
 80176be:	68f8      	ldr	r0, [r7, #12]
 80176c0:	f000 f8aa 	bl	8017818 <I2C_IsErrorOccurred>
 80176c4:	4603      	mov	r3, r0
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d001      	beq.n	80176ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80176ca:	2301      	movs	r3, #1
 80176cc:	e026      	b.n	801771c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80176ce:	f7fe fe77 	bl	80163c0 <HAL_GetTick>
 80176d2:	4602      	mov	r2, r0
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	1ad3      	subs	r3, r2, r3
 80176d8:	68ba      	ldr	r2, [r7, #8]
 80176da:	429a      	cmp	r2, r3
 80176dc:	d302      	bcc.n	80176e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80176de:	68bb      	ldr	r3, [r7, #8]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d113      	bne.n	801770c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80176e8:	f043 0220 	orr.w	r2, r3, #32
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	2220      	movs	r2, #32
 80176f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	2200      	movs	r2, #0
 80176fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	2200      	movs	r2, #0
 8017704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8017708:	2301      	movs	r3, #1
 801770a:	e007      	b.n	801771c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	699b      	ldr	r3, [r3, #24]
 8017712:	f003 0320 	and.w	r3, r3, #32
 8017716:	2b20      	cmp	r3, #32
 8017718:	d1cf      	bne.n	80176ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801771a:	2300      	movs	r3, #0
}
 801771c:	4618      	mov	r0, r3
 801771e:	3710      	adds	r7, #16
 8017720:	46bd      	mov	sp, r7
 8017722:	bd80      	pop	{r7, pc}

08017724 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017724:	b580      	push	{r7, lr}
 8017726:	b084      	sub	sp, #16
 8017728:	af00      	add	r7, sp, #0
 801772a:	60f8      	str	r0, [r7, #12]
 801772c:	60b9      	str	r1, [r7, #8]
 801772e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017730:	e064      	b.n	80177fc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017732:	687a      	ldr	r2, [r7, #4]
 8017734:	68b9      	ldr	r1, [r7, #8]
 8017736:	68f8      	ldr	r0, [r7, #12]
 8017738:	f000 f86e 	bl	8017818 <I2C_IsErrorOccurred>
 801773c:	4603      	mov	r3, r0
 801773e:	2b00      	cmp	r3, #0
 8017740:	d001      	beq.n	8017746 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017742:	2301      	movs	r3, #1
 8017744:	e062      	b.n	801780c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	699b      	ldr	r3, [r3, #24]
 801774c:	f003 0320 	and.w	r3, r3, #32
 8017750:	2b20      	cmp	r3, #32
 8017752:	d138      	bne.n	80177c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	699b      	ldr	r3, [r3, #24]
 801775a:	f003 0304 	and.w	r3, r3, #4
 801775e:	2b04      	cmp	r3, #4
 8017760:	d105      	bne.n	801776e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017766:	2b00      	cmp	r3, #0
 8017768:	d001      	beq.n	801776e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801776a:	2300      	movs	r3, #0
 801776c:	e04e      	b.n	801780c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	699b      	ldr	r3, [r3, #24]
 8017774:	f003 0310 	and.w	r3, r3, #16
 8017778:	2b10      	cmp	r3, #16
 801777a:	d107      	bne.n	801778c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	2210      	movs	r2, #16
 8017782:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	2204      	movs	r2, #4
 8017788:	645a      	str	r2, [r3, #68]	; 0x44
 801778a:	e002      	b.n	8017792 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	2200      	movs	r2, #0
 8017790:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	2220      	movs	r2, #32
 8017798:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	6859      	ldr	r1, [r3, #4]
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	681a      	ldr	r2, [r3, #0]
 80177a4:	4b1b      	ldr	r3, [pc, #108]	; (8017814 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80177a6:	400b      	ands	r3, r1
 80177a8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	2220      	movs	r2, #32
 80177ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	2200      	movs	r2, #0
 80177b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	2200      	movs	r2, #0
 80177be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80177c2:	2301      	movs	r3, #1
 80177c4:	e022      	b.n	801780c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80177c6:	f7fe fdfb 	bl	80163c0 <HAL_GetTick>
 80177ca:	4602      	mov	r2, r0
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	1ad3      	subs	r3, r2, r3
 80177d0:	68ba      	ldr	r2, [r7, #8]
 80177d2:	429a      	cmp	r2, r3
 80177d4:	d302      	bcc.n	80177dc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80177d6:	68bb      	ldr	r3, [r7, #8]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d10f      	bne.n	80177fc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80177e0:	f043 0220 	orr.w	r2, r3, #32
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	2220      	movs	r2, #32
 80177ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	2200      	movs	r2, #0
 80177f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80177f8:	2301      	movs	r3, #1
 80177fa:	e007      	b.n	801780c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	699b      	ldr	r3, [r3, #24]
 8017802:	f003 0304 	and.w	r3, r3, #4
 8017806:	2b04      	cmp	r3, #4
 8017808:	d193      	bne.n	8017732 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801780a:	2300      	movs	r3, #0
}
 801780c:	4618      	mov	r0, r3
 801780e:	3710      	adds	r7, #16
 8017810:	46bd      	mov	sp, r7
 8017812:	bd80      	pop	{r7, pc}
 8017814:	fe00e800 	.word	0xfe00e800

08017818 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8017818:	b580      	push	{r7, lr}
 801781a:	b08a      	sub	sp, #40	; 0x28
 801781c:	af00      	add	r7, sp, #0
 801781e:	60f8      	str	r0, [r7, #12]
 8017820:	60b9      	str	r1, [r7, #8]
 8017822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017824:	2300      	movs	r3, #0
 8017826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	699b      	ldr	r3, [r3, #24]
 8017830:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8017832:	2300      	movs	r3, #0
 8017834:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801783a:	69bb      	ldr	r3, [r7, #24]
 801783c:	f003 0310 	and.w	r3, r3, #16
 8017840:	2b00      	cmp	r3, #0
 8017842:	d075      	beq.n	8017930 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	2210      	movs	r2, #16
 801784a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801784c:	e056      	b.n	80178fc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801784e:	68bb      	ldr	r3, [r7, #8]
 8017850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017854:	d052      	beq.n	80178fc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8017856:	f7fe fdb3 	bl	80163c0 <HAL_GetTick>
 801785a:	4602      	mov	r2, r0
 801785c:	69fb      	ldr	r3, [r7, #28]
 801785e:	1ad3      	subs	r3, r2, r3
 8017860:	68ba      	ldr	r2, [r7, #8]
 8017862:	429a      	cmp	r2, r3
 8017864:	d302      	bcc.n	801786c <I2C_IsErrorOccurred+0x54>
 8017866:	68bb      	ldr	r3, [r7, #8]
 8017868:	2b00      	cmp	r3, #0
 801786a:	d147      	bne.n	80178fc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	685b      	ldr	r3, [r3, #4]
 8017872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017876:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801787e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	699b      	ldr	r3, [r3, #24]
 8017886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801788a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801788e:	d12e      	bne.n	80178ee <I2C_IsErrorOccurred+0xd6>
 8017890:	697b      	ldr	r3, [r7, #20]
 8017892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017896:	d02a      	beq.n	80178ee <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8017898:	7cfb      	ldrb	r3, [r7, #19]
 801789a:	2b20      	cmp	r3, #32
 801789c:	d027      	beq.n	80178ee <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	685a      	ldr	r2, [r3, #4]
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80178ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80178ae:	f7fe fd87 	bl	80163c0 <HAL_GetTick>
 80178b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80178b4:	e01b      	b.n	80178ee <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80178b6:	f7fe fd83 	bl	80163c0 <HAL_GetTick>
 80178ba:	4602      	mov	r2, r0
 80178bc:	69fb      	ldr	r3, [r7, #28]
 80178be:	1ad3      	subs	r3, r2, r3
 80178c0:	2b19      	cmp	r3, #25
 80178c2:	d914      	bls.n	80178ee <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80178c8:	f043 0220 	orr.w	r2, r3, #32
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	2220      	movs	r2, #32
 80178d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	2200      	movs	r2, #0
 80178dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	2200      	movs	r2, #0
 80178e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80178e8:	2301      	movs	r3, #1
 80178ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	699b      	ldr	r3, [r3, #24]
 80178f4:	f003 0320 	and.w	r3, r3, #32
 80178f8:	2b20      	cmp	r3, #32
 80178fa:	d1dc      	bne.n	80178b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	699b      	ldr	r3, [r3, #24]
 8017902:	f003 0320 	and.w	r3, r3, #32
 8017906:	2b20      	cmp	r3, #32
 8017908:	d003      	beq.n	8017912 <I2C_IsErrorOccurred+0xfa>
 801790a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801790e:	2b00      	cmp	r3, #0
 8017910:	d09d      	beq.n	801784e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8017912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017916:	2b00      	cmp	r3, #0
 8017918:	d103      	bne.n	8017922 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	2220      	movs	r2, #32
 8017920:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8017922:	6a3b      	ldr	r3, [r7, #32]
 8017924:	f043 0304 	orr.w	r3, r3, #4
 8017928:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801792a:	2301      	movs	r3, #1
 801792c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	699b      	ldr	r3, [r3, #24]
 8017936:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8017938:	69bb      	ldr	r3, [r7, #24]
 801793a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801793e:	2b00      	cmp	r3, #0
 8017940:	d00b      	beq.n	801795a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8017942:	6a3b      	ldr	r3, [r7, #32]
 8017944:	f043 0301 	orr.w	r3, r3, #1
 8017948:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017952:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017954:	2301      	movs	r3, #1
 8017956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801795a:	69bb      	ldr	r3, [r7, #24]
 801795c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017960:	2b00      	cmp	r3, #0
 8017962:	d00b      	beq.n	801797c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8017964:	6a3b      	ldr	r3, [r7, #32]
 8017966:	f043 0308 	orr.w	r3, r3, #8
 801796a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017974:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017976:	2301      	movs	r3, #1
 8017978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801797c:	69bb      	ldr	r3, [r7, #24]
 801797e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017982:	2b00      	cmp	r3, #0
 8017984:	d00b      	beq.n	801799e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8017986:	6a3b      	ldr	r3, [r7, #32]
 8017988:	f043 0302 	orr.w	r3, r3, #2
 801798c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017996:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017998:	2301      	movs	r3, #1
 801799a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801799e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d01c      	beq.n	80179e0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80179a6:	68f8      	ldr	r0, [r7, #12]
 80179a8:	f7ff fddc 	bl	8017564 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	6859      	ldr	r1, [r3, #4]
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	681a      	ldr	r2, [r3, #0]
 80179b6:	4b0d      	ldr	r3, [pc, #52]	; (80179ec <I2C_IsErrorOccurred+0x1d4>)
 80179b8:	400b      	ands	r3, r1
 80179ba:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80179c0:	6a3b      	ldr	r3, [r7, #32]
 80179c2:	431a      	orrs	r2, r3
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	2220      	movs	r2, #32
 80179cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	2200      	movs	r2, #0
 80179d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	2200      	movs	r2, #0
 80179dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80179e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80179e4:	4618      	mov	r0, r3
 80179e6:	3728      	adds	r7, #40	; 0x28
 80179e8:	46bd      	mov	sp, r7
 80179ea:	bd80      	pop	{r7, pc}
 80179ec:	fe00e800 	.word	0xfe00e800

080179f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80179f0:	b480      	push	{r7}
 80179f2:	b087      	sub	sp, #28
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	60f8      	str	r0, [r7, #12]
 80179f8:	607b      	str	r3, [r7, #4]
 80179fa:	460b      	mov	r3, r1
 80179fc:	817b      	strh	r3, [r7, #10]
 80179fe:	4613      	mov	r3, r2
 8017a00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017a02:	897b      	ldrh	r3, [r7, #10]
 8017a04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017a08:	7a7b      	ldrb	r3, [r7, #9]
 8017a0a:	041b      	lsls	r3, r3, #16
 8017a0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017a10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017a16:	6a3b      	ldr	r3, [r7, #32]
 8017a18:	4313      	orrs	r3, r2
 8017a1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017a1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	685a      	ldr	r2, [r3, #4]
 8017a26:	6a3b      	ldr	r3, [r7, #32]
 8017a28:	0d5b      	lsrs	r3, r3, #21
 8017a2a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8017a2e:	4b08      	ldr	r3, [pc, #32]	; (8017a50 <I2C_TransferConfig+0x60>)
 8017a30:	430b      	orrs	r3, r1
 8017a32:	43db      	mvns	r3, r3
 8017a34:	ea02 0103 	and.w	r1, r2, r3
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	697a      	ldr	r2, [r7, #20]
 8017a3e:	430a      	orrs	r2, r1
 8017a40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8017a42:	bf00      	nop
 8017a44:	371c      	adds	r7, #28
 8017a46:	46bd      	mov	sp, r7
 8017a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a4c:	4770      	bx	lr
 8017a4e:	bf00      	nop
 8017a50:	03ff63ff 	.word	0x03ff63ff

08017a54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8017a54:	b480      	push	{r7}
 8017a56:	b083      	sub	sp, #12
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	6078      	str	r0, [r7, #4]
 8017a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017a64:	b2db      	uxtb	r3, r3
 8017a66:	2b20      	cmp	r3, #32
 8017a68:	d138      	bne.n	8017adc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017a70:	2b01      	cmp	r3, #1
 8017a72:	d101      	bne.n	8017a78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8017a74:	2302      	movs	r3, #2
 8017a76:	e032      	b.n	8017ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	2201      	movs	r2, #1
 8017a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2224      	movs	r2, #36	; 0x24
 8017a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	681a      	ldr	r2, [r3, #0]
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	f022 0201 	bic.w	r2, r2, #1
 8017a96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	681a      	ldr	r2, [r3, #0]
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8017aa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	6819      	ldr	r1, [r3, #0]
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	683a      	ldr	r2, [r7, #0]
 8017ab4:	430a      	orrs	r2, r1
 8017ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	681a      	ldr	r2, [r3, #0]
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	f042 0201 	orr.w	r2, r2, #1
 8017ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	2220      	movs	r2, #32
 8017acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	2200      	movs	r2, #0
 8017ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8017ad8:	2300      	movs	r3, #0
 8017ada:	e000      	b.n	8017ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8017adc:	2302      	movs	r3, #2
  }
}
 8017ade:	4618      	mov	r0, r3
 8017ae0:	370c      	adds	r7, #12
 8017ae2:	46bd      	mov	sp, r7
 8017ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae8:	4770      	bx	lr

08017aea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8017aea:	b480      	push	{r7}
 8017aec:	b085      	sub	sp, #20
 8017aee:	af00      	add	r7, sp, #0
 8017af0:	6078      	str	r0, [r7, #4]
 8017af2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017afa:	b2db      	uxtb	r3, r3
 8017afc:	2b20      	cmp	r3, #32
 8017afe:	d139      	bne.n	8017b74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017b06:	2b01      	cmp	r3, #1
 8017b08:	d101      	bne.n	8017b0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8017b0a:	2302      	movs	r3, #2
 8017b0c:	e033      	b.n	8017b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	2201      	movs	r2, #1
 8017b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	2224      	movs	r2, #36	; 0x24
 8017b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	681a      	ldr	r2, [r3, #0]
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	f022 0201 	bic.w	r2, r2, #1
 8017b2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8017b3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8017b3e:	683b      	ldr	r3, [r7, #0]
 8017b40:	021b      	lsls	r3, r3, #8
 8017b42:	68fa      	ldr	r2, [r7, #12]
 8017b44:	4313      	orrs	r3, r2
 8017b46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	68fa      	ldr	r2, [r7, #12]
 8017b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	681a      	ldr	r2, [r3, #0]
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	f042 0201 	orr.w	r2, r2, #1
 8017b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	2220      	movs	r2, #32
 8017b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	2200      	movs	r2, #0
 8017b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8017b70:	2300      	movs	r3, #0
 8017b72:	e000      	b.n	8017b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8017b74:	2302      	movs	r3, #2
  }
}
 8017b76:	4618      	mov	r0, r3
 8017b78:	3714      	adds	r7, #20
 8017b7a:	46bd      	mov	sp, r7
 8017b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b80:	4770      	bx	lr

08017b82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8017b82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b84:	b08b      	sub	sp, #44	; 0x2c
 8017b86:	af06      	add	r7, sp, #24
 8017b88:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d101      	bne.n	8017b94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8017b90:	2301      	movs	r3, #1
 8017b92:	e0cb      	b.n	8017d2c <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8017b9a:	b2db      	uxtb	r3, r3
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d106      	bne.n	8017bae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8017ba8:	6878      	ldr	r0, [r7, #4]
 8017baa:	f7ea fb9d 	bl	80022e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	2203      	movs	r2, #3
 8017bb2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	4618      	mov	r0, r3
 8017bbc:	f002 fed0 	bl	801a960 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	73fb      	strb	r3, [r7, #15]
 8017bc4:	e040      	b.n	8017c48 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8017bc6:	7bfb      	ldrb	r3, [r7, #15]
 8017bc8:	6879      	ldr	r1, [r7, #4]
 8017bca:	1c5a      	adds	r2, r3, #1
 8017bcc:	4613      	mov	r3, r2
 8017bce:	009b      	lsls	r3, r3, #2
 8017bd0:	4413      	add	r3, r2
 8017bd2:	00db      	lsls	r3, r3, #3
 8017bd4:	440b      	add	r3, r1
 8017bd6:	3301      	adds	r3, #1
 8017bd8:	2201      	movs	r2, #1
 8017bda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8017bdc:	7bfb      	ldrb	r3, [r7, #15]
 8017bde:	6879      	ldr	r1, [r7, #4]
 8017be0:	1c5a      	adds	r2, r3, #1
 8017be2:	4613      	mov	r3, r2
 8017be4:	009b      	lsls	r3, r3, #2
 8017be6:	4413      	add	r3, r2
 8017be8:	00db      	lsls	r3, r3, #3
 8017bea:	440b      	add	r3, r1
 8017bec:	7bfa      	ldrb	r2, [r7, #15]
 8017bee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8017bf0:	7bfb      	ldrb	r3, [r7, #15]
 8017bf2:	6879      	ldr	r1, [r7, #4]
 8017bf4:	1c5a      	adds	r2, r3, #1
 8017bf6:	4613      	mov	r3, r2
 8017bf8:	009b      	lsls	r3, r3, #2
 8017bfa:	4413      	add	r3, r2
 8017bfc:	00db      	lsls	r3, r3, #3
 8017bfe:	440b      	add	r3, r1
 8017c00:	3303      	adds	r3, #3
 8017c02:	2200      	movs	r2, #0
 8017c04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8017c06:	7bfa      	ldrb	r2, [r7, #15]
 8017c08:	6879      	ldr	r1, [r7, #4]
 8017c0a:	4613      	mov	r3, r2
 8017c0c:	009b      	lsls	r3, r3, #2
 8017c0e:	4413      	add	r3, r2
 8017c10:	00db      	lsls	r3, r3, #3
 8017c12:	440b      	add	r3, r1
 8017c14:	3338      	adds	r3, #56	; 0x38
 8017c16:	2200      	movs	r2, #0
 8017c18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8017c1a:	7bfa      	ldrb	r2, [r7, #15]
 8017c1c:	6879      	ldr	r1, [r7, #4]
 8017c1e:	4613      	mov	r3, r2
 8017c20:	009b      	lsls	r3, r3, #2
 8017c22:	4413      	add	r3, r2
 8017c24:	00db      	lsls	r3, r3, #3
 8017c26:	440b      	add	r3, r1
 8017c28:	333c      	adds	r3, #60	; 0x3c
 8017c2a:	2200      	movs	r2, #0
 8017c2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8017c2e:	7bfa      	ldrb	r2, [r7, #15]
 8017c30:	6879      	ldr	r1, [r7, #4]
 8017c32:	4613      	mov	r3, r2
 8017c34:	009b      	lsls	r3, r3, #2
 8017c36:	4413      	add	r3, r2
 8017c38:	00db      	lsls	r3, r3, #3
 8017c3a:	440b      	add	r3, r1
 8017c3c:	3340      	adds	r3, #64	; 0x40
 8017c3e:	2200      	movs	r2, #0
 8017c40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017c42:	7bfb      	ldrb	r3, [r7, #15]
 8017c44:	3301      	adds	r3, #1
 8017c46:	73fb      	strb	r3, [r7, #15]
 8017c48:	7bfa      	ldrb	r2, [r7, #15]
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	685b      	ldr	r3, [r3, #4]
 8017c4e:	429a      	cmp	r2, r3
 8017c50:	d3b9      	bcc.n	8017bc6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017c52:	2300      	movs	r3, #0
 8017c54:	73fb      	strb	r3, [r7, #15]
 8017c56:	e044      	b.n	8017ce2 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8017c58:	7bfa      	ldrb	r2, [r7, #15]
 8017c5a:	6879      	ldr	r1, [r7, #4]
 8017c5c:	4613      	mov	r3, r2
 8017c5e:	009b      	lsls	r3, r3, #2
 8017c60:	4413      	add	r3, r2
 8017c62:	00db      	lsls	r3, r3, #3
 8017c64:	440b      	add	r3, r1
 8017c66:	f203 1369 	addw	r3, r3, #361	; 0x169
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8017c6e:	7bfa      	ldrb	r2, [r7, #15]
 8017c70:	6879      	ldr	r1, [r7, #4]
 8017c72:	4613      	mov	r3, r2
 8017c74:	009b      	lsls	r3, r3, #2
 8017c76:	4413      	add	r3, r2
 8017c78:	00db      	lsls	r3, r3, #3
 8017c7a:	440b      	add	r3, r1
 8017c7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8017c80:	7bfa      	ldrb	r2, [r7, #15]
 8017c82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8017c84:	7bfa      	ldrb	r2, [r7, #15]
 8017c86:	6879      	ldr	r1, [r7, #4]
 8017c88:	4613      	mov	r3, r2
 8017c8a:	009b      	lsls	r3, r3, #2
 8017c8c:	4413      	add	r3, r2
 8017c8e:	00db      	lsls	r3, r3, #3
 8017c90:	440b      	add	r3, r1
 8017c92:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8017c96:	2200      	movs	r2, #0
 8017c98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8017c9a:	7bfa      	ldrb	r2, [r7, #15]
 8017c9c:	6879      	ldr	r1, [r7, #4]
 8017c9e:	4613      	mov	r3, r2
 8017ca0:	009b      	lsls	r3, r3, #2
 8017ca2:	4413      	add	r3, r2
 8017ca4:	00db      	lsls	r3, r3, #3
 8017ca6:	440b      	add	r3, r1
 8017ca8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8017cac:	2200      	movs	r2, #0
 8017cae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8017cb0:	7bfa      	ldrb	r2, [r7, #15]
 8017cb2:	6879      	ldr	r1, [r7, #4]
 8017cb4:	4613      	mov	r3, r2
 8017cb6:	009b      	lsls	r3, r3, #2
 8017cb8:	4413      	add	r3, r2
 8017cba:	00db      	lsls	r3, r3, #3
 8017cbc:	440b      	add	r3, r1
 8017cbe:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8017cc2:	2200      	movs	r2, #0
 8017cc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8017cc6:	7bfa      	ldrb	r2, [r7, #15]
 8017cc8:	6879      	ldr	r1, [r7, #4]
 8017cca:	4613      	mov	r3, r2
 8017ccc:	009b      	lsls	r3, r3, #2
 8017cce:	4413      	add	r3, r2
 8017cd0:	00db      	lsls	r3, r3, #3
 8017cd2:	440b      	add	r3, r1
 8017cd4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8017cd8:	2200      	movs	r2, #0
 8017cda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017cdc:	7bfb      	ldrb	r3, [r7, #15]
 8017cde:	3301      	adds	r3, #1
 8017ce0:	73fb      	strb	r3, [r7, #15]
 8017ce2:	7bfa      	ldrb	r2, [r7, #15]
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	685b      	ldr	r3, [r3, #4]
 8017ce8:	429a      	cmp	r2, r3
 8017cea:	d3b5      	bcc.n	8017c58 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	603b      	str	r3, [r7, #0]
 8017cf2:	687e      	ldr	r6, [r7, #4]
 8017cf4:	466d      	mov	r5, sp
 8017cf6:	f106 0410 	add.w	r4, r6, #16
 8017cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017cfe:	6823      	ldr	r3, [r4, #0]
 8017d00:	602b      	str	r3, [r5, #0]
 8017d02:	1d33      	adds	r3, r6, #4
 8017d04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017d06:	6838      	ldr	r0, [r7, #0]
 8017d08:	f002 fe45 	bl	801a996 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	2200      	movs	r2, #0
 8017d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	2201      	movs	r2, #1
 8017d18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	69db      	ldr	r3, [r3, #28]
 8017d20:	2b01      	cmp	r3, #1
 8017d22:	d102      	bne.n	8017d2a <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8017d24:	6878      	ldr	r0, [r7, #4]
 8017d26:	f000 f805 	bl	8017d34 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8017d2a:	2300      	movs	r3, #0
}
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	3714      	adds	r7, #20
 8017d30:	46bd      	mov	sp, r7
 8017d32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017d34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8017d34:	b480      	push	{r7}
 8017d36:	b085      	sub	sp, #20
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	2201      	movs	r2, #1
 8017d46:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	2200      	movs	r2, #0
 8017d4e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8017d58:	b29b      	uxth	r3, r3
 8017d5a:	f043 0301 	orr.w	r3, r3, #1
 8017d5e:	b29a      	uxth	r2, r3
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8017d6c:	b29b      	uxth	r3, r3
 8017d6e:	f043 0302 	orr.w	r3, r3, #2
 8017d72:	b29a      	uxth	r2, r3
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8017d7a:	2300      	movs	r3, #0
}
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	3714      	adds	r7, #20
 8017d80:	46bd      	mov	sp, r7
 8017d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d86:	4770      	bx	lr

08017d88 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8017d88:	b480      	push	{r7}
 8017d8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8017d8c:	4b05      	ldr	r3, [pc, #20]	; (8017da4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	4a04      	ldr	r2, [pc, #16]	; (8017da4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8017d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017d96:	6013      	str	r3, [r2, #0]
}
 8017d98:	bf00      	nop
 8017d9a:	46bd      	mov	sp, r7
 8017d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da0:	4770      	bx	lr
 8017da2:	bf00      	nop
 8017da4:	58000400 	.word	0x58000400

08017da8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8017da8:	b480      	push	{r7}
 8017daa:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8017dac:	4b04      	ldr	r3, [pc, #16]	; (8017dc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8017db4:	4618      	mov	r0, r3
 8017db6:	46bd      	mov	sp, r7
 8017db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dbc:	4770      	bx	lr
 8017dbe:	bf00      	nop
 8017dc0:	58000400 	.word	0x58000400

08017dc4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8017dc4:	b480      	push	{r7}
 8017dc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8017dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017dd6:	d101      	bne.n	8017ddc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8017dd8:	2301      	movs	r3, #1
 8017dda:	e000      	b.n	8017dde <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8017ddc:	2300      	movs	r3, #0
}
 8017dde:	4618      	mov	r0, r3
 8017de0:	46bd      	mov	sp, r7
 8017de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de6:	4770      	bx	lr

08017de8 <LL_RCC_HSE_Enable>:
{
 8017de8:	b480      	push	{r7}
 8017dea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8017dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017dfa:	6013      	str	r3, [r2, #0]
}
 8017dfc:	bf00      	nop
 8017dfe:	46bd      	mov	sp, r7
 8017e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e04:	4770      	bx	lr

08017e06 <LL_RCC_HSE_Disable>:
{
 8017e06:	b480      	push	{r7}
 8017e08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8017e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017e18:	6013      	str	r3, [r2, #0]
}
 8017e1a:	bf00      	nop
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e22:	4770      	bx	lr

08017e24 <LL_RCC_HSE_IsReady>:
{
 8017e24:	b480      	push	{r7}
 8017e26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8017e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017e32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8017e36:	d101      	bne.n	8017e3c <LL_RCC_HSE_IsReady+0x18>
 8017e38:	2301      	movs	r3, #1
 8017e3a:	e000      	b.n	8017e3e <LL_RCC_HSE_IsReady+0x1a>
 8017e3c:	2300      	movs	r3, #0
}
 8017e3e:	4618      	mov	r0, r3
 8017e40:	46bd      	mov	sp, r7
 8017e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e46:	4770      	bx	lr

08017e48 <LL_RCC_HSI_Enable>:
{
 8017e48:	b480      	push	{r7}
 8017e4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8017e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017e5a:	6013      	str	r3, [r2, #0]
}
 8017e5c:	bf00      	nop
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e64:	4770      	bx	lr

08017e66 <LL_RCC_HSI_Disable>:
{
 8017e66:	b480      	push	{r7}
 8017e68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8017e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017e78:	6013      	str	r3, [r2, #0]
}
 8017e7a:	bf00      	nop
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e82:	4770      	bx	lr

08017e84 <LL_RCC_HSI_IsReady>:
{
 8017e84:	b480      	push	{r7}
 8017e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8017e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017e96:	d101      	bne.n	8017e9c <LL_RCC_HSI_IsReady+0x18>
 8017e98:	2301      	movs	r3, #1
 8017e9a:	e000      	b.n	8017e9e <LL_RCC_HSI_IsReady+0x1a>
 8017e9c:	2300      	movs	r3, #0
}
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	46bd      	mov	sp, r7
 8017ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ea6:	4770      	bx	lr

08017ea8 <LL_RCC_HSI_SetCalibTrimming>:
{
 8017ea8:	b480      	push	{r7}
 8017eaa:	b083      	sub	sp, #12
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8017eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017eb4:	685b      	ldr	r3, [r3, #4]
 8017eb6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	061b      	lsls	r3, r3, #24
 8017ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017ec2:	4313      	orrs	r3, r2
 8017ec4:	604b      	str	r3, [r1, #4]
}
 8017ec6:	bf00      	nop
 8017ec8:	370c      	adds	r7, #12
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed0:	4770      	bx	lr

08017ed2 <LL_RCC_HSI48_Enable>:
{
 8017ed2:	b480      	push	{r7}
 8017ed4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8017ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017eda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017ede:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017ee2:	f043 0301 	orr.w	r3, r3, #1
 8017ee6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8017eea:	bf00      	nop
 8017eec:	46bd      	mov	sp, r7
 8017eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef2:	4770      	bx	lr

08017ef4 <LL_RCC_HSI48_Disable>:
{
 8017ef4:	b480      	push	{r7}
 8017ef6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8017ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017f04:	f023 0301 	bic.w	r3, r3, #1
 8017f08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8017f0c:	bf00      	nop
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f14:	4770      	bx	lr

08017f16 <LL_RCC_HSI48_IsReady>:
{
 8017f16:	b480      	push	{r7}
 8017f18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8017f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017f22:	f003 0302 	and.w	r3, r3, #2
 8017f26:	2b02      	cmp	r3, #2
 8017f28:	d101      	bne.n	8017f2e <LL_RCC_HSI48_IsReady+0x18>
 8017f2a:	2301      	movs	r3, #1
 8017f2c:	e000      	b.n	8017f30 <LL_RCC_HSI48_IsReady+0x1a>
 8017f2e:	2300      	movs	r3, #0
}
 8017f30:	4618      	mov	r0, r3
 8017f32:	46bd      	mov	sp, r7
 8017f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f38:	4770      	bx	lr

08017f3a <LL_RCC_LSE_Enable>:
{
 8017f3a:	b480      	push	{r7}
 8017f3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8017f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017f4a:	f043 0301 	orr.w	r3, r3, #1
 8017f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8017f52:	bf00      	nop
 8017f54:	46bd      	mov	sp, r7
 8017f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f5a:	4770      	bx	lr

08017f5c <LL_RCC_LSE_Disable>:
{
 8017f5c:	b480      	push	{r7}
 8017f5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8017f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017f6c:	f023 0301 	bic.w	r3, r3, #1
 8017f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8017f74:	bf00      	nop
 8017f76:	46bd      	mov	sp, r7
 8017f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f7c:	4770      	bx	lr

08017f7e <LL_RCC_LSE_EnableBypass>:
{
 8017f7e:	b480      	push	{r7}
 8017f80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8017f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017f8e:	f043 0304 	orr.w	r3, r3, #4
 8017f92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8017f96:	bf00      	nop
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9e:	4770      	bx	lr

08017fa0 <LL_RCC_LSE_DisableBypass>:
{
 8017fa0:	b480      	push	{r7}
 8017fa2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8017fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017fb0:	f023 0304 	bic.w	r3, r3, #4
 8017fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8017fb8:	bf00      	nop
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fc0:	4770      	bx	lr

08017fc2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8017fc2:	b480      	push	{r7}
 8017fc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8017fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017fce:	f003 0302 	and.w	r3, r3, #2
 8017fd2:	2b02      	cmp	r3, #2
 8017fd4:	d101      	bne.n	8017fda <LL_RCC_LSE_IsReady+0x18>
 8017fd6:	2301      	movs	r3, #1
 8017fd8:	e000      	b.n	8017fdc <LL_RCC_LSE_IsReady+0x1a>
 8017fda:	2300      	movs	r3, #0
}
 8017fdc:	4618      	mov	r0, r3
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe4:	4770      	bx	lr

08017fe6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8017fe6:	b480      	push	{r7}
 8017fe8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8017fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017ff2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017ff6:	f043 0301 	orr.w	r3, r3, #1
 8017ffa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8017ffe:	bf00      	nop
 8018000:	46bd      	mov	sp, r7
 8018002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018006:	4770      	bx	lr

08018008 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8018008:	b480      	push	{r7}
 801800a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801800c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018018:	f023 0301 	bic.w	r3, r3, #1
 801801c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8018020:	bf00      	nop
 8018022:	46bd      	mov	sp, r7
 8018024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018028:	4770      	bx	lr

0801802a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 801802a:	b480      	push	{r7}
 801802c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 801802e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018036:	f003 0302 	and.w	r3, r3, #2
 801803a:	2b02      	cmp	r3, #2
 801803c:	d101      	bne.n	8018042 <LL_RCC_LSI1_IsReady+0x18>
 801803e:	2301      	movs	r3, #1
 8018040:	e000      	b.n	8018044 <LL_RCC_LSI1_IsReady+0x1a>
 8018042:	2300      	movs	r3, #0
}
 8018044:	4618      	mov	r0, r3
 8018046:	46bd      	mov	sp, r7
 8018048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801804c:	4770      	bx	lr

0801804e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 801804e:	b480      	push	{r7}
 8018050:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8018052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801805a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801805e:	f043 0304 	orr.w	r3, r3, #4
 8018062:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8018066:	bf00      	nop
 8018068:	46bd      	mov	sp, r7
 801806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801806e:	4770      	bx	lr

08018070 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8018070:	b480      	push	{r7}
 8018072:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8018074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801807c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018080:	f023 0304 	bic.w	r3, r3, #4
 8018084:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8018088:	bf00      	nop
 801808a:	46bd      	mov	sp, r7
 801808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018090:	4770      	bx	lr

08018092 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8018092:	b480      	push	{r7}
 8018094:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8018096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801809a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801809e:	f003 0308 	and.w	r3, r3, #8
 80180a2:	2b08      	cmp	r3, #8
 80180a4:	d101      	bne.n	80180aa <LL_RCC_LSI2_IsReady+0x18>
 80180a6:	2301      	movs	r3, #1
 80180a8:	e000      	b.n	80180ac <LL_RCC_LSI2_IsReady+0x1a>
 80180aa:	2300      	movs	r3, #0
}
 80180ac:	4618      	mov	r0, r3
 80180ae:	46bd      	mov	sp, r7
 80180b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b4:	4770      	bx	lr

080180b6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80180b6:	b480      	push	{r7}
 80180b8:	b083      	sub	sp, #12
 80180ba:	af00      	add	r7, sp, #0
 80180bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80180be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80180c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	021b      	lsls	r3, r3, #8
 80180ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80180d2:	4313      	orrs	r3, r2
 80180d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80180d8:	bf00      	nop
 80180da:	370c      	adds	r7, #12
 80180dc:	46bd      	mov	sp, r7
 80180de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e2:	4770      	bx	lr

080180e4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80180e4:	b480      	push	{r7}
 80180e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80180e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80180f2:	f043 0301 	orr.w	r3, r3, #1
 80180f6:	6013      	str	r3, [r2, #0]
}
 80180f8:	bf00      	nop
 80180fa:	46bd      	mov	sp, r7
 80180fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018100:	4770      	bx	lr

08018102 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8018102:	b480      	push	{r7}
 8018104:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8018106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018110:	f023 0301 	bic.w	r3, r3, #1
 8018114:	6013      	str	r3, [r2, #0]
}
 8018116:	bf00      	nop
 8018118:	46bd      	mov	sp, r7
 801811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801811e:	4770      	bx	lr

08018120 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8018120:	b480      	push	{r7}
 8018122:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8018124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	f003 0302 	and.w	r3, r3, #2
 801812e:	2b02      	cmp	r3, #2
 8018130:	d101      	bne.n	8018136 <LL_RCC_MSI_IsReady+0x16>
 8018132:	2301      	movs	r3, #1
 8018134:	e000      	b.n	8018138 <LL_RCC_MSI_IsReady+0x18>
 8018136:	2300      	movs	r3, #0
}
 8018138:	4618      	mov	r0, r3
 801813a:	46bd      	mov	sp, r7
 801813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018140:	4770      	bx	lr

08018142 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8018142:	b480      	push	{r7}
 8018144:	b083      	sub	sp, #12
 8018146:	af00      	add	r7, sp, #0
 8018148:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 801814a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8018154:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	4313      	orrs	r3, r2
 801815c:	600b      	str	r3, [r1, #0]
}
 801815e:	bf00      	nop
 8018160:	370c      	adds	r7, #12
 8018162:	46bd      	mov	sp, r7
 8018164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018168:	4770      	bx	lr

0801816a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 801816a:	b480      	push	{r7}
 801816c:	b083      	sub	sp, #12
 801816e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8018170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801817a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	2bb0      	cmp	r3, #176	; 0xb0
 8018180:	d901      	bls.n	8018186 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8018182:	23b0      	movs	r3, #176	; 0xb0
 8018184:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8018186:	687b      	ldr	r3, [r7, #4]
}
 8018188:	4618      	mov	r0, r3
 801818a:	370c      	adds	r7, #12
 801818c:	46bd      	mov	sp, r7
 801818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018192:	4770      	bx	lr

08018194 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8018194:	b480      	push	{r7}
 8018196:	b083      	sub	sp, #12
 8018198:	af00      	add	r7, sp, #0
 801819a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 801819c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181a0:	685b      	ldr	r3, [r3, #4]
 80181a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	021b      	lsls	r3, r3, #8
 80181aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80181ae:	4313      	orrs	r3, r2
 80181b0:	604b      	str	r3, [r1, #4]
}
 80181b2:	bf00      	nop
 80181b4:	370c      	adds	r7, #12
 80181b6:	46bd      	mov	sp, r7
 80181b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181bc:	4770      	bx	lr

080181be <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80181be:	b480      	push	{r7}
 80181c0:	b083      	sub	sp, #12
 80181c2:	af00      	add	r7, sp, #0
 80181c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80181c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181ca:	689b      	ldr	r3, [r3, #8]
 80181cc:	f023 0203 	bic.w	r2, r3, #3
 80181d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	4313      	orrs	r3, r2
 80181d8:	608b      	str	r3, [r1, #8]
}
 80181da:	bf00      	nop
 80181dc:	370c      	adds	r7, #12
 80181de:	46bd      	mov	sp, r7
 80181e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e4:	4770      	bx	lr

080181e6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80181e6:	b480      	push	{r7}
 80181e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80181ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181ee:	689b      	ldr	r3, [r3, #8]
 80181f0:	f003 030c 	and.w	r3, r3, #12
}
 80181f4:	4618      	mov	r0, r3
 80181f6:	46bd      	mov	sp, r7
 80181f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181fc:	4770      	bx	lr

080181fe <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80181fe:	b480      	push	{r7}
 8018200:	b083      	sub	sp, #12
 8018202:	af00      	add	r7, sp, #0
 8018204:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8018206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801820a:	689b      	ldr	r3, [r3, #8]
 801820c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8018210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	4313      	orrs	r3, r2
 8018218:	608b      	str	r3, [r1, #8]
}
 801821a:	bf00      	nop
 801821c:	370c      	adds	r7, #12
 801821e:	46bd      	mov	sp, r7
 8018220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018224:	4770      	bx	lr

08018226 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8018226:	b480      	push	{r7}
 8018228:	b083      	sub	sp, #12
 801822a:	af00      	add	r7, sp, #0
 801822c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 801822e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018232:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8018236:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801823a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	4313      	orrs	r3, r2
 8018242:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8018246:	bf00      	nop
 8018248:	370c      	adds	r7, #12
 801824a:	46bd      	mov	sp, r7
 801824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018250:	4770      	bx	lr

08018252 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8018252:	b480      	push	{r7}
 8018254:	b083      	sub	sp, #12
 8018256:	af00      	add	r7, sp, #0
 8018258:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 801825a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801825e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8018262:	f023 020f 	bic.w	r2, r3, #15
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	091b      	lsrs	r3, r3, #4
 801826a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801826e:	4313      	orrs	r3, r2
 8018270:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8018274:	bf00      	nop
 8018276:	370c      	adds	r7, #12
 8018278:	46bd      	mov	sp, r7
 801827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801827e:	4770      	bx	lr

08018280 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8018280:	b480      	push	{r7}
 8018282:	b083      	sub	sp, #12
 8018284:	af00      	add	r7, sp, #0
 8018286:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8018288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801828c:	689b      	ldr	r3, [r3, #8]
 801828e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8018292:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	4313      	orrs	r3, r2
 801829a:	608b      	str	r3, [r1, #8]
}
 801829c:	bf00      	nop
 801829e:	370c      	adds	r7, #12
 80182a0:	46bd      	mov	sp, r7
 80182a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a6:	4770      	bx	lr

080182a8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80182a8:	b480      	push	{r7}
 80182aa:	b083      	sub	sp, #12
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80182b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182b4:	689b      	ldr	r3, [r3, #8]
 80182b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80182ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	4313      	orrs	r3, r2
 80182c2:	608b      	str	r3, [r1, #8]
}
 80182c4:	bf00      	nop
 80182c6:	370c      	adds	r7, #12
 80182c8:	46bd      	mov	sp, r7
 80182ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ce:	4770      	bx	lr

080182d0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80182d0:	b480      	push	{r7}
 80182d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80182d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182d8:	689b      	ldr	r3, [r3, #8]
 80182da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80182de:	4618      	mov	r0, r3
 80182e0:	46bd      	mov	sp, r7
 80182e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e6:	4770      	bx	lr

080182e8 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 80182e8:	b480      	push	{r7}
 80182ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80182ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80182f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80182f8:	4618      	mov	r0, r3
 80182fa:	46bd      	mov	sp, r7
 80182fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018300:	4770      	bx	lr

08018302 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8018302:	b480      	push	{r7}
 8018304:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8018306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801830a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801830e:	011b      	lsls	r3, r3, #4
 8018310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8018314:	4618      	mov	r0, r3
 8018316:	46bd      	mov	sp, r7
 8018318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801831c:	4770      	bx	lr

0801831e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 801831e:	b480      	push	{r7}
 8018320:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8018322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018326:	689b      	ldr	r3, [r3, #8]
 8018328:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 801832c:	4618      	mov	r0, r3
 801832e:	46bd      	mov	sp, r7
 8018330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018334:	4770      	bx	lr

08018336 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8018336:	b480      	push	{r7}
 8018338:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 801833a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801833e:	689b      	ldr	r3, [r3, #8]
 8018340:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8018344:	4618      	mov	r0, r3
 8018346:	46bd      	mov	sp, r7
 8018348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801834c:	4770      	bx	lr

0801834e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 801834e:	b480      	push	{r7}
 8018350:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8018352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801835c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018360:	6013      	str	r3, [r2, #0]
}
 8018362:	bf00      	nop
 8018364:	46bd      	mov	sp, r7
 8018366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801836a:	4770      	bx	lr

0801836c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 801836c:	b480      	push	{r7}
 801836e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8018370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801837a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801837e:	6013      	str	r3, [r2, #0]
}
 8018380:	bf00      	nop
 8018382:	46bd      	mov	sp, r7
 8018384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018388:	4770      	bx	lr

0801838a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 801838a:	b480      	push	{r7}
 801838c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 801838e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018398:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801839c:	d101      	bne.n	80183a2 <LL_RCC_PLL_IsReady+0x18>
 801839e:	2301      	movs	r3, #1
 80183a0:	e000      	b.n	80183a4 <LL_RCC_PLL_IsReady+0x1a>
 80183a2:	2300      	movs	r3, #0
}
 80183a4:	4618      	mov	r0, r3
 80183a6:	46bd      	mov	sp, r7
 80183a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ac:	4770      	bx	lr

080183ae <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80183ae:	b480      	push	{r7}
 80183b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80183b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183b6:	68db      	ldr	r3, [r3, #12]
 80183b8:	0a1b      	lsrs	r3, r3, #8
 80183ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80183be:	4618      	mov	r0, r3
 80183c0:	46bd      	mov	sp, r7
 80183c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183c6:	4770      	bx	lr

080183c8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80183c8:	b480      	push	{r7}
 80183ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80183cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183d0:	68db      	ldr	r3, [r3, #12]
 80183d2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80183d6:	4618      	mov	r0, r3
 80183d8:	46bd      	mov	sp, r7
 80183da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183de:	4770      	bx	lr

080183e0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80183e0:	b480      	push	{r7}
 80183e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80183e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183e8:	68db      	ldr	r3, [r3, #12]
 80183ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80183ee:	4618      	mov	r0, r3
 80183f0:	46bd      	mov	sp, r7
 80183f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f6:	4770      	bx	lr

080183f8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80183f8:	b480      	push	{r7}
 80183fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80183fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018400:	68db      	ldr	r3, [r3, #12]
 8018402:	f003 0303 	and.w	r3, r3, #3
}
 8018406:	4618      	mov	r0, r3
 8018408:	46bd      	mov	sp, r7
 801840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801840e:	4770      	bx	lr

08018410 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8018410:	b480      	push	{r7}
 8018412:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8018414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018418:	689b      	ldr	r3, [r3, #8]
 801841a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801841e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018422:	d101      	bne.n	8018428 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8018424:	2301      	movs	r3, #1
 8018426:	e000      	b.n	801842a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8018428:	2300      	movs	r3, #0
}
 801842a:	4618      	mov	r0, r3
 801842c:	46bd      	mov	sp, r7
 801842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018432:	4770      	bx	lr

08018434 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8018434:	b480      	push	{r7}
 8018436:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8018438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801843c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8018440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018444:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8018448:	d101      	bne.n	801844e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 801844a:	2301      	movs	r3, #1
 801844c:	e000      	b.n	8018450 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 801844e:	2300      	movs	r3, #0
}
 8018450:	4618      	mov	r0, r3
 8018452:	46bd      	mov	sp, r7
 8018454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018458:	4770      	bx	lr

0801845a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 801845a:	b480      	push	{r7}
 801845c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 801845e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018462:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8018466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801846a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801846e:	d101      	bne.n	8018474 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8018470:	2301      	movs	r3, #1
 8018472:	e000      	b.n	8018476 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8018474:	2300      	movs	r3, #0
}
 8018476:	4618      	mov	r0, r3
 8018478:	46bd      	mov	sp, r7
 801847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847e:	4770      	bx	lr

08018480 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8018480:	b480      	push	{r7}
 8018482:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8018484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018488:	689b      	ldr	r3, [r3, #8]
 801848a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801848e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8018492:	d101      	bne.n	8018498 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8018494:	2301      	movs	r3, #1
 8018496:	e000      	b.n	801849a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8018498:	2300      	movs	r3, #0
}
 801849a:	4618      	mov	r0, r3
 801849c:	46bd      	mov	sp, r7
 801849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a2:	4770      	bx	lr

080184a4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80184a4:	b480      	push	{r7}
 80184a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80184a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80184ac:	689b      	ldr	r3, [r3, #8]
 80184ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80184b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80184b6:	d101      	bne.n	80184bc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80184b8:	2301      	movs	r3, #1
 80184ba:	e000      	b.n	80184be <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80184bc:	2300      	movs	r3, #0
}
 80184be:	4618      	mov	r0, r3
 80184c0:	46bd      	mov	sp, r7
 80184c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184c6:	4770      	bx	lr

080184c8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80184c8:	b590      	push	{r4, r7, lr}
 80184ca:	b08d      	sub	sp, #52	; 0x34
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d101      	bne.n	80184da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80184d6:	2301      	movs	r3, #1
 80184d8:	e363      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	f003 0320 	and.w	r3, r3, #32
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	f000 808d 	beq.w	8018602 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80184e8:	f7ff fe7d 	bl	80181e6 <LL_RCC_GetSysClkSource>
 80184ec:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80184ee:	f7ff ff83 	bl	80183f8 <LL_RCC_PLL_GetMainSource>
 80184f2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80184f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d005      	beq.n	8018506 <HAL_RCC_OscConfig+0x3e>
 80184fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184fc:	2b0c      	cmp	r3, #12
 80184fe:	d147      	bne.n	8018590 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8018500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018502:	2b01      	cmp	r3, #1
 8018504:	d144      	bne.n	8018590 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	69db      	ldr	r3, [r3, #28]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d101      	bne.n	8018512 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 801850e:	2301      	movs	r3, #1
 8018510:	e347      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018516:	f7ff fe28 	bl	801816a <LL_RCC_MSI_GetRange>
 801851a:	4603      	mov	r3, r0
 801851c:	429c      	cmp	r4, r3
 801851e:	d914      	bls.n	801854a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018524:	4618      	mov	r0, r3
 8018526:	f000 fd61 	bl	8018fec <RCC_SetFlashLatencyFromMSIRange>
 801852a:	4603      	mov	r3, r0
 801852c:	2b00      	cmp	r3, #0
 801852e:	d001      	beq.n	8018534 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8018530:	2301      	movs	r3, #1
 8018532:	e336      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018538:	4618      	mov	r0, r3
 801853a:	f7ff fe02 	bl	8018142 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	6a1b      	ldr	r3, [r3, #32]
 8018542:	4618      	mov	r0, r3
 8018544:	f7ff fe26 	bl	8018194 <LL_RCC_MSI_SetCalibTrimming>
 8018548:	e013      	b.n	8018572 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801854e:	4618      	mov	r0, r3
 8018550:	f7ff fdf7 	bl	8018142 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	6a1b      	ldr	r3, [r3, #32]
 8018558:	4618      	mov	r0, r3
 801855a:	f7ff fe1b 	bl	8018194 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018562:	4618      	mov	r0, r3
 8018564:	f000 fd42 	bl	8018fec <RCC_SetFlashLatencyFromMSIRange>
 8018568:	4603      	mov	r3, r0
 801856a:	2b00      	cmp	r3, #0
 801856c:	d001      	beq.n	8018572 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 801856e:	2301      	movs	r3, #1
 8018570:	e317      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8018572:	f000 fcc9 	bl	8018f08 <HAL_RCC_GetHCLKFreq>
 8018576:	4603      	mov	r3, r0
 8018578:	4aa4      	ldr	r2, [pc, #656]	; (801880c <HAL_RCC_OscConfig+0x344>)
 801857a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801857c:	4ba4      	ldr	r3, [pc, #656]	; (8018810 <HAL_RCC_OscConfig+0x348>)
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	4618      	mov	r0, r3
 8018582:	f7e9 fa6b 	bl	8001a5c <HAL_InitTick>
 8018586:	4603      	mov	r3, r0
 8018588:	2b00      	cmp	r3, #0
 801858a:	d039      	beq.n	8018600 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 801858c:	2301      	movs	r3, #1
 801858e:	e308      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	69db      	ldr	r3, [r3, #28]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d01e      	beq.n	80185d6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8018598:	f7ff fda4 	bl	80180e4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801859c:	f7fd ff10 	bl	80163c0 <HAL_GetTick>
 80185a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80185a2:	e008      	b.n	80185b6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80185a4:	f7fd ff0c 	bl	80163c0 <HAL_GetTick>
 80185a8:	4602      	mov	r2, r0
 80185aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ac:	1ad3      	subs	r3, r2, r3
 80185ae:	2b02      	cmp	r3, #2
 80185b0:	d901      	bls.n	80185b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80185b2:	2303      	movs	r3, #3
 80185b4:	e2f5      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80185b6:	f7ff fdb3 	bl	8018120 <LL_RCC_MSI_IsReady>
 80185ba:	4603      	mov	r3, r0
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d0f1      	beq.n	80185a4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185c4:	4618      	mov	r0, r3
 80185c6:	f7ff fdbc 	bl	8018142 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	6a1b      	ldr	r3, [r3, #32]
 80185ce:	4618      	mov	r0, r3
 80185d0:	f7ff fde0 	bl	8018194 <LL_RCC_MSI_SetCalibTrimming>
 80185d4:	e015      	b.n	8018602 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80185d6:	f7ff fd94 	bl	8018102 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80185da:	f7fd fef1 	bl	80163c0 <HAL_GetTick>
 80185de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80185e0:	e008      	b.n	80185f4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80185e2:	f7fd feed 	bl	80163c0 <HAL_GetTick>
 80185e6:	4602      	mov	r2, r0
 80185e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ea:	1ad3      	subs	r3, r2, r3
 80185ec:	2b02      	cmp	r3, #2
 80185ee:	d901      	bls.n	80185f4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80185f0:	2303      	movs	r3, #3
 80185f2:	e2d6      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80185f4:	f7ff fd94 	bl	8018120 <LL_RCC_MSI_IsReady>
 80185f8:	4603      	mov	r3, r0
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d1f1      	bne.n	80185e2 <HAL_RCC_OscConfig+0x11a>
 80185fe:	e000      	b.n	8018602 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8018600:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	f003 0301 	and.w	r3, r3, #1
 801860a:	2b00      	cmp	r3, #0
 801860c:	d047      	beq.n	801869e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801860e:	f7ff fdea 	bl	80181e6 <LL_RCC_GetSysClkSource>
 8018612:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8018614:	f7ff fef0 	bl	80183f8 <LL_RCC_PLL_GetMainSource>
 8018618:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 801861a:	6a3b      	ldr	r3, [r7, #32]
 801861c:	2b08      	cmp	r3, #8
 801861e:	d005      	beq.n	801862c <HAL_RCC_OscConfig+0x164>
 8018620:	6a3b      	ldr	r3, [r7, #32]
 8018622:	2b0c      	cmp	r3, #12
 8018624:	d108      	bne.n	8018638 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8018626:	69fb      	ldr	r3, [r7, #28]
 8018628:	2b03      	cmp	r3, #3
 801862a:	d105      	bne.n	8018638 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	685b      	ldr	r3, [r3, #4]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d134      	bne.n	801869e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8018634:	2301      	movs	r3, #1
 8018636:	e2b4      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	685b      	ldr	r3, [r3, #4]
 801863c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018640:	d102      	bne.n	8018648 <HAL_RCC_OscConfig+0x180>
 8018642:	f7ff fbd1 	bl	8017de8 <LL_RCC_HSE_Enable>
 8018646:	e001      	b.n	801864c <HAL_RCC_OscConfig+0x184>
 8018648:	f7ff fbdd 	bl	8017e06 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	685b      	ldr	r3, [r3, #4]
 8018650:	2b00      	cmp	r3, #0
 8018652:	d012      	beq.n	801867a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018654:	f7fd feb4 	bl	80163c0 <HAL_GetTick>
 8018658:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 801865a:	e008      	b.n	801866e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801865c:	f7fd feb0 	bl	80163c0 <HAL_GetTick>
 8018660:	4602      	mov	r2, r0
 8018662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018664:	1ad3      	subs	r3, r2, r3
 8018666:	2b64      	cmp	r3, #100	; 0x64
 8018668:	d901      	bls.n	801866e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801866a:	2303      	movs	r3, #3
 801866c:	e299      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 801866e:	f7ff fbd9 	bl	8017e24 <LL_RCC_HSE_IsReady>
 8018672:	4603      	mov	r3, r0
 8018674:	2b00      	cmp	r3, #0
 8018676:	d0f1      	beq.n	801865c <HAL_RCC_OscConfig+0x194>
 8018678:	e011      	b.n	801869e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801867a:	f7fd fea1 	bl	80163c0 <HAL_GetTick>
 801867e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8018680:	e008      	b.n	8018694 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018682:	f7fd fe9d 	bl	80163c0 <HAL_GetTick>
 8018686:	4602      	mov	r2, r0
 8018688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801868a:	1ad3      	subs	r3, r2, r3
 801868c:	2b64      	cmp	r3, #100	; 0x64
 801868e:	d901      	bls.n	8018694 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8018690:	2303      	movs	r3, #3
 8018692:	e286      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8018694:	f7ff fbc6 	bl	8017e24 <LL_RCC_HSE_IsReady>
 8018698:	4603      	mov	r3, r0
 801869a:	2b00      	cmp	r3, #0
 801869c:	d1f1      	bne.n	8018682 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	f003 0302 	and.w	r3, r3, #2
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d04c      	beq.n	8018744 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80186aa:	f7ff fd9c 	bl	80181e6 <LL_RCC_GetSysClkSource>
 80186ae:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80186b0:	f7ff fea2 	bl	80183f8 <LL_RCC_PLL_GetMainSource>
 80186b4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80186b6:	69bb      	ldr	r3, [r7, #24]
 80186b8:	2b04      	cmp	r3, #4
 80186ba:	d005      	beq.n	80186c8 <HAL_RCC_OscConfig+0x200>
 80186bc:	69bb      	ldr	r3, [r7, #24]
 80186be:	2b0c      	cmp	r3, #12
 80186c0:	d10e      	bne.n	80186e0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80186c2:	697b      	ldr	r3, [r7, #20]
 80186c4:	2b02      	cmp	r3, #2
 80186c6:	d10b      	bne.n	80186e0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	68db      	ldr	r3, [r3, #12]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d101      	bne.n	80186d4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80186d0:	2301      	movs	r3, #1
 80186d2:	e266      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	691b      	ldr	r3, [r3, #16]
 80186d8:	4618      	mov	r0, r3
 80186da:	f7ff fbe5 	bl	8017ea8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80186de:	e031      	b.n	8018744 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	68db      	ldr	r3, [r3, #12]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d019      	beq.n	801871c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80186e8:	f7ff fbae 	bl	8017e48 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80186ec:	f7fd fe68 	bl	80163c0 <HAL_GetTick>
 80186f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80186f2:	e008      	b.n	8018706 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80186f4:	f7fd fe64 	bl	80163c0 <HAL_GetTick>
 80186f8:	4602      	mov	r2, r0
 80186fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186fc:	1ad3      	subs	r3, r2, r3
 80186fe:	2b02      	cmp	r3, #2
 8018700:	d901      	bls.n	8018706 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8018702:	2303      	movs	r3, #3
 8018704:	e24d      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8018706:	f7ff fbbd 	bl	8017e84 <LL_RCC_HSI_IsReady>
 801870a:	4603      	mov	r3, r0
 801870c:	2b00      	cmp	r3, #0
 801870e:	d0f1      	beq.n	80186f4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	691b      	ldr	r3, [r3, #16]
 8018714:	4618      	mov	r0, r3
 8018716:	f7ff fbc7 	bl	8017ea8 <LL_RCC_HSI_SetCalibTrimming>
 801871a:	e013      	b.n	8018744 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801871c:	f7ff fba3 	bl	8017e66 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018720:	f7fd fe4e 	bl	80163c0 <HAL_GetTick>
 8018724:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8018726:	e008      	b.n	801873a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8018728:	f7fd fe4a 	bl	80163c0 <HAL_GetTick>
 801872c:	4602      	mov	r2, r0
 801872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018730:	1ad3      	subs	r3, r2, r3
 8018732:	2b02      	cmp	r3, #2
 8018734:	d901      	bls.n	801873a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8018736:	2303      	movs	r3, #3
 8018738:	e233      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 801873a:	f7ff fba3 	bl	8017e84 <LL_RCC_HSI_IsReady>
 801873e:	4603      	mov	r3, r0
 8018740:	2b00      	cmp	r3, #0
 8018742:	d1f1      	bne.n	8018728 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	f003 0308 	and.w	r3, r3, #8
 801874c:	2b00      	cmp	r3, #0
 801874e:	d106      	bne.n	801875e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8018758:	2b00      	cmp	r3, #0
 801875a:	f000 80a3 	beq.w	80188a4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	695b      	ldr	r3, [r3, #20]
 8018762:	2b00      	cmp	r3, #0
 8018764:	d076      	beq.n	8018854 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	f003 0310 	and.w	r3, r3, #16
 801876e:	2b00      	cmp	r3, #0
 8018770:	d046      	beq.n	8018800 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8018772:	f7ff fc5a 	bl	801802a <LL_RCC_LSI1_IsReady>
 8018776:	4603      	mov	r3, r0
 8018778:	2b00      	cmp	r3, #0
 801877a:	d113      	bne.n	80187a4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 801877c:	f7ff fc33 	bl	8017fe6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8018780:	f7fd fe1e 	bl	80163c0 <HAL_GetTick>
 8018784:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8018786:	e008      	b.n	801879a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8018788:	f7fd fe1a 	bl	80163c0 <HAL_GetTick>
 801878c:	4602      	mov	r2, r0
 801878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018790:	1ad3      	subs	r3, r2, r3
 8018792:	2b02      	cmp	r3, #2
 8018794:	d901      	bls.n	801879a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8018796:	2303      	movs	r3, #3
 8018798:	e203      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 801879a:	f7ff fc46 	bl	801802a <LL_RCC_LSI1_IsReady>
 801879e:	4603      	mov	r3, r0
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d0f1      	beq.n	8018788 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80187a4:	f7ff fc53 	bl	801804e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80187a8:	f7fd fe0a 	bl	80163c0 <HAL_GetTick>
 80187ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80187ae:	e008      	b.n	80187c2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80187b0:	f7fd fe06 	bl	80163c0 <HAL_GetTick>
 80187b4:	4602      	mov	r2, r0
 80187b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187b8:	1ad3      	subs	r3, r2, r3
 80187ba:	2b03      	cmp	r3, #3
 80187bc:	d901      	bls.n	80187c2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80187be:	2303      	movs	r3, #3
 80187c0:	e1ef      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80187c2:	f7ff fc66 	bl	8018092 <LL_RCC_LSI2_IsReady>
 80187c6:	4603      	mov	r3, r0
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d0f1      	beq.n	80187b0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	699b      	ldr	r3, [r3, #24]
 80187d0:	4618      	mov	r0, r3
 80187d2:	f7ff fc70 	bl	80180b6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80187d6:	f7ff fc17 	bl	8018008 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80187da:	f7fd fdf1 	bl	80163c0 <HAL_GetTick>
 80187de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80187e0:	e008      	b.n	80187f4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80187e2:	f7fd fded 	bl	80163c0 <HAL_GetTick>
 80187e6:	4602      	mov	r2, r0
 80187e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ea:	1ad3      	subs	r3, r2, r3
 80187ec:	2b02      	cmp	r3, #2
 80187ee:	d901      	bls.n	80187f4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80187f0:	2303      	movs	r3, #3
 80187f2:	e1d6      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80187f4:	f7ff fc19 	bl	801802a <LL_RCC_LSI1_IsReady>
 80187f8:	4603      	mov	r3, r0
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d1f1      	bne.n	80187e2 <HAL_RCC_OscConfig+0x31a>
 80187fe:	e051      	b.n	80188a4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8018800:	f7ff fbf1 	bl	8017fe6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018804:	f7fd fddc 	bl	80163c0 <HAL_GetTick>
 8018808:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 801880a:	e00c      	b.n	8018826 <HAL_RCC_OscConfig+0x35e>
 801880c:	2000000c 	.word	0x2000000c
 8018810:	20000074 	.word	0x20000074
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8018814:	f7fd fdd4 	bl	80163c0 <HAL_GetTick>
 8018818:	4602      	mov	r2, r0
 801881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801881c:	1ad3      	subs	r3, r2, r3
 801881e:	2b02      	cmp	r3, #2
 8018820:	d901      	bls.n	8018826 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8018822:	2303      	movs	r3, #3
 8018824:	e1bd      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8018826:	f7ff fc00 	bl	801802a <LL_RCC_LSI1_IsReady>
 801882a:	4603      	mov	r3, r0
 801882c:	2b00      	cmp	r3, #0
 801882e:	d0f1      	beq.n	8018814 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8018830:	f7ff fc1e 	bl	8018070 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8018834:	e008      	b.n	8018848 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8018836:	f7fd fdc3 	bl	80163c0 <HAL_GetTick>
 801883a:	4602      	mov	r2, r0
 801883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801883e:	1ad3      	subs	r3, r2, r3
 8018840:	2b03      	cmp	r3, #3
 8018842:	d901      	bls.n	8018848 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8018844:	2303      	movs	r3, #3
 8018846:	e1ac      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8018848:	f7ff fc23 	bl	8018092 <LL_RCC_LSI2_IsReady>
 801884c:	4603      	mov	r3, r0
 801884e:	2b00      	cmp	r3, #0
 8018850:	d1f1      	bne.n	8018836 <HAL_RCC_OscConfig+0x36e>
 8018852:	e027      	b.n	80188a4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8018854:	f7ff fc0c 	bl	8018070 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018858:	f7fd fdb2 	bl	80163c0 <HAL_GetTick>
 801885c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 801885e:	e008      	b.n	8018872 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8018860:	f7fd fdae 	bl	80163c0 <HAL_GetTick>
 8018864:	4602      	mov	r2, r0
 8018866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018868:	1ad3      	subs	r3, r2, r3
 801886a:	2b03      	cmp	r3, #3
 801886c:	d901      	bls.n	8018872 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801886e:	2303      	movs	r3, #3
 8018870:	e197      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8018872:	f7ff fc0e 	bl	8018092 <LL_RCC_LSI2_IsReady>
 8018876:	4603      	mov	r3, r0
 8018878:	2b00      	cmp	r3, #0
 801887a:	d1f1      	bne.n	8018860 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 801887c:	f7ff fbc4 	bl	8018008 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018880:	f7fd fd9e 	bl	80163c0 <HAL_GetTick>
 8018884:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8018886:	e008      	b.n	801889a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8018888:	f7fd fd9a 	bl	80163c0 <HAL_GetTick>
 801888c:	4602      	mov	r2, r0
 801888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018890:	1ad3      	subs	r3, r2, r3
 8018892:	2b02      	cmp	r3, #2
 8018894:	d901      	bls.n	801889a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8018896:	2303      	movs	r3, #3
 8018898:	e183      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 801889a:	f7ff fbc6 	bl	801802a <LL_RCC_LSI1_IsReady>
 801889e:	4603      	mov	r3, r0
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d1f1      	bne.n	8018888 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	f003 0304 	and.w	r3, r3, #4
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d05b      	beq.n	8018968 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80188b0:	4ba7      	ldr	r3, [pc, #668]	; (8018b50 <HAL_RCC_OscConfig+0x688>)
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d114      	bne.n	80188e6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80188bc:	f7ff fa64 	bl	8017d88 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80188c0:	f7fd fd7e 	bl	80163c0 <HAL_GetTick>
 80188c4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80188c6:	e008      	b.n	80188da <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80188c8:	f7fd fd7a 	bl	80163c0 <HAL_GetTick>
 80188cc:	4602      	mov	r2, r0
 80188ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188d0:	1ad3      	subs	r3, r2, r3
 80188d2:	2b02      	cmp	r3, #2
 80188d4:	d901      	bls.n	80188da <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80188d6:	2303      	movs	r3, #3
 80188d8:	e163      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80188da:	4b9d      	ldr	r3, [pc, #628]	; (8018b50 <HAL_RCC_OscConfig+0x688>)
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d0f0      	beq.n	80188c8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	689b      	ldr	r3, [r3, #8]
 80188ea:	2b01      	cmp	r3, #1
 80188ec:	d102      	bne.n	80188f4 <HAL_RCC_OscConfig+0x42c>
 80188ee:	f7ff fb24 	bl	8017f3a <LL_RCC_LSE_Enable>
 80188f2:	e00c      	b.n	801890e <HAL_RCC_OscConfig+0x446>
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	689b      	ldr	r3, [r3, #8]
 80188f8:	2b05      	cmp	r3, #5
 80188fa:	d104      	bne.n	8018906 <HAL_RCC_OscConfig+0x43e>
 80188fc:	f7ff fb3f 	bl	8017f7e <LL_RCC_LSE_EnableBypass>
 8018900:	f7ff fb1b 	bl	8017f3a <LL_RCC_LSE_Enable>
 8018904:	e003      	b.n	801890e <HAL_RCC_OscConfig+0x446>
 8018906:	f7ff fb29 	bl	8017f5c <LL_RCC_LSE_Disable>
 801890a:	f7ff fb49 	bl	8017fa0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	689b      	ldr	r3, [r3, #8]
 8018912:	2b00      	cmp	r3, #0
 8018914:	d014      	beq.n	8018940 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018916:	f7fd fd53 	bl	80163c0 <HAL_GetTick>
 801891a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 801891c:	e00a      	b.n	8018934 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801891e:	f7fd fd4f 	bl	80163c0 <HAL_GetTick>
 8018922:	4602      	mov	r2, r0
 8018924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018926:	1ad3      	subs	r3, r2, r3
 8018928:	f241 3288 	movw	r2, #5000	; 0x1388
 801892c:	4293      	cmp	r3, r2
 801892e:	d901      	bls.n	8018934 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8018930:	2303      	movs	r3, #3
 8018932:	e136      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8018934:	f7ff fb45 	bl	8017fc2 <LL_RCC_LSE_IsReady>
 8018938:	4603      	mov	r3, r0
 801893a:	2b00      	cmp	r3, #0
 801893c:	d0ef      	beq.n	801891e <HAL_RCC_OscConfig+0x456>
 801893e:	e013      	b.n	8018968 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018940:	f7fd fd3e 	bl	80163c0 <HAL_GetTick>
 8018944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8018946:	e00a      	b.n	801895e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018948:	f7fd fd3a 	bl	80163c0 <HAL_GetTick>
 801894c:	4602      	mov	r2, r0
 801894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018950:	1ad3      	subs	r3, r2, r3
 8018952:	f241 3288 	movw	r2, #5000	; 0x1388
 8018956:	4293      	cmp	r3, r2
 8018958:	d901      	bls.n	801895e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 801895a:	2303      	movs	r3, #3
 801895c:	e121      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 801895e:	f7ff fb30 	bl	8017fc2 <LL_RCC_LSE_IsReady>
 8018962:	4603      	mov	r3, r0
 8018964:	2b00      	cmp	r3, #0
 8018966:	d1ef      	bne.n	8018948 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018970:	2b00      	cmp	r3, #0
 8018972:	d02c      	beq.n	80189ce <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018978:	2b00      	cmp	r3, #0
 801897a:	d014      	beq.n	80189a6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801897c:	f7ff faa9 	bl	8017ed2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018980:	f7fd fd1e 	bl	80163c0 <HAL_GetTick>
 8018984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8018986:	e008      	b.n	801899a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8018988:	f7fd fd1a 	bl	80163c0 <HAL_GetTick>
 801898c:	4602      	mov	r2, r0
 801898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018990:	1ad3      	subs	r3, r2, r3
 8018992:	2b02      	cmp	r3, #2
 8018994:	d901      	bls.n	801899a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8018996:	2303      	movs	r3, #3
 8018998:	e103      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 801899a:	f7ff fabc 	bl	8017f16 <LL_RCC_HSI48_IsReady>
 801899e:	4603      	mov	r3, r0
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d0f1      	beq.n	8018988 <HAL_RCC_OscConfig+0x4c0>
 80189a4:	e013      	b.n	80189ce <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80189a6:	f7ff faa5 	bl	8017ef4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80189aa:	f7fd fd09 	bl	80163c0 <HAL_GetTick>
 80189ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80189b0:	e008      	b.n	80189c4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80189b2:	f7fd fd05 	bl	80163c0 <HAL_GetTick>
 80189b6:	4602      	mov	r2, r0
 80189b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ba:	1ad3      	subs	r3, r2, r3
 80189bc:	2b02      	cmp	r3, #2
 80189be:	d901      	bls.n	80189c4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80189c0:	2303      	movs	r3, #3
 80189c2:	e0ee      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80189c4:	f7ff faa7 	bl	8017f16 <LL_RCC_HSI48_IsReady>
 80189c8:	4603      	mov	r3, r0
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d1f1      	bne.n	80189b2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	f000 80e4 	beq.w	8018ba0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80189d8:	f7ff fc05 	bl	80181e6 <LL_RCC_GetSysClkSource>
 80189dc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80189de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80189e2:	68db      	ldr	r3, [r3, #12]
 80189e4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189ea:	2b02      	cmp	r3, #2
 80189ec:	f040 80b4 	bne.w	8018b58 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	f003 0203 	and.w	r2, r3, #3
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189fa:	429a      	cmp	r2, r3
 80189fc:	d123      	bne.n	8018a46 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018a08:	429a      	cmp	r2, r3
 8018a0a:	d11c      	bne.n	8018a46 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	0a1b      	lsrs	r3, r3, #8
 8018a10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8018a18:	429a      	cmp	r2, r3
 8018a1a:	d114      	bne.n	8018a46 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8018a26:	429a      	cmp	r2, r3
 8018a28:	d10d      	bne.n	8018a46 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8018a34:	429a      	cmp	r2, r3
 8018a36:	d106      	bne.n	8018a46 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8018a42:	429a      	cmp	r2, r3
 8018a44:	d05d      	beq.n	8018b02 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018a46:	693b      	ldr	r3, [r7, #16]
 8018a48:	2b0c      	cmp	r3, #12
 8018a4a:	d058      	beq.n	8018afe <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8018a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d001      	beq.n	8018a5e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8018a5a:	2301      	movs	r3, #1
 8018a5c:	e0a1      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8018a5e:	f7ff fc85 	bl	801836c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8018a62:	f7fd fcad 	bl	80163c0 <HAL_GetTick>
 8018a66:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018a68:	e008      	b.n	8018a7c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018a6a:	f7fd fca9 	bl	80163c0 <HAL_GetTick>
 8018a6e:	4602      	mov	r2, r0
 8018a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a72:	1ad3      	subs	r3, r2, r3
 8018a74:	2b02      	cmp	r3, #2
 8018a76:	d901      	bls.n	8018a7c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8018a78:	2303      	movs	r3, #3
 8018a7a:	e092      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d1ef      	bne.n	8018a6a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8018a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018a8e:	68da      	ldr	r2, [r3, #12]
 8018a90:	4b30      	ldr	r3, [pc, #192]	; (8018b54 <HAL_RCC_OscConfig+0x68c>)
 8018a92:	4013      	ands	r3, r2
 8018a94:	687a      	ldr	r2, [r7, #4]
 8018a96:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8018a98:	687a      	ldr	r2, [r7, #4]
 8018a9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8018a9c:	4311      	orrs	r1, r2
 8018a9e:	687a      	ldr	r2, [r7, #4]
 8018aa0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8018aa2:	0212      	lsls	r2, r2, #8
 8018aa4:	4311      	orrs	r1, r2
 8018aa6:	687a      	ldr	r2, [r7, #4]
 8018aa8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8018aaa:	4311      	orrs	r1, r2
 8018aac:	687a      	ldr	r2, [r7, #4]
 8018aae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018ab0:	4311      	orrs	r1, r2
 8018ab2:	687a      	ldr	r2, [r7, #4]
 8018ab4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8018ab6:	430a      	orrs	r2, r1
 8018ab8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018abc:	4313      	orrs	r3, r2
 8018abe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8018ac0:	f7ff fc45 	bl	801834e <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8018ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018ac8:	68db      	ldr	r3, [r3, #12]
 8018aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018ad2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8018ad4:	f7fd fc74 	bl	80163c0 <HAL_GetTick>
 8018ad8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018ada:	e008      	b.n	8018aee <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018adc:	f7fd fc70 	bl	80163c0 <HAL_GetTick>
 8018ae0:	4602      	mov	r2, r0
 8018ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ae4:	1ad3      	subs	r3, r2, r3
 8018ae6:	2b02      	cmp	r3, #2
 8018ae8:	d901      	bls.n	8018aee <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8018aea:	2303      	movs	r3, #3
 8018aec:	e059      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d0ef      	beq.n	8018adc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018afc:	e050      	b.n	8018ba0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8018afe:	2301      	movs	r3, #1
 8018b00:	e04f      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d147      	bne.n	8018ba0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8018b10:	f7ff fc1d 	bl	801834e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8018b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018b18:	68db      	ldr	r3, [r3, #12]
 8018b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018b22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8018b24:	f7fd fc4c 	bl	80163c0 <HAL_GetTick>
 8018b28:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018b2a:	e008      	b.n	8018b3e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018b2c:	f7fd fc48 	bl	80163c0 <HAL_GetTick>
 8018b30:	4602      	mov	r2, r0
 8018b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b34:	1ad3      	subs	r3, r2, r3
 8018b36:	2b02      	cmp	r3, #2
 8018b38:	d901      	bls.n	8018b3e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8018b3a:	2303      	movs	r3, #3
 8018b3c:	e031      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	d0ef      	beq.n	8018b2c <HAL_RCC_OscConfig+0x664>
 8018b4c:	e028      	b.n	8018ba0 <HAL_RCC_OscConfig+0x6d8>
 8018b4e:	bf00      	nop
 8018b50:	58000400 	.word	0x58000400
 8018b54:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018b58:	693b      	ldr	r3, [r7, #16]
 8018b5a:	2b0c      	cmp	r3, #12
 8018b5c:	d01e      	beq.n	8018b9c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018b5e:	f7ff fc05 	bl	801836c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018b62:	f7fd fc2d 	bl	80163c0 <HAL_GetTick>
 8018b66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018b68:	e008      	b.n	8018b7c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018b6a:	f7fd fc29 	bl	80163c0 <HAL_GetTick>
 8018b6e:	4602      	mov	r2, r0
 8018b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b72:	1ad3      	subs	r3, r2, r3
 8018b74:	2b02      	cmp	r3, #2
 8018b76:	d901      	bls.n	8018b7c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8018b78:	2303      	movs	r3, #3
 8018b7a:	e012      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d1ef      	bne.n	8018b6a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8018b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018b8e:	68da      	ldr	r2, [r3, #12]
 8018b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018b94:	4b05      	ldr	r3, [pc, #20]	; (8018bac <HAL_RCC_OscConfig+0x6e4>)
 8018b96:	4013      	ands	r3, r2
 8018b98:	60cb      	str	r3, [r1, #12]
 8018b9a:	e001      	b.n	8018ba0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8018b9c:	2301      	movs	r3, #1
 8018b9e:	e000      	b.n	8018ba2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8018ba0:	2300      	movs	r3, #0
}
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	3734      	adds	r7, #52	; 0x34
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd90      	pop	{r4, r7, pc}
 8018baa:	bf00      	nop
 8018bac:	eefefffc 	.word	0xeefefffc

08018bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8018bb0:	b580      	push	{r7, lr}
 8018bb2:	b084      	sub	sp, #16
 8018bb4:	af00      	add	r7, sp, #0
 8018bb6:	6078      	str	r0, [r7, #4]
 8018bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d101      	bne.n	8018bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8018bc0:	2301      	movs	r3, #1
 8018bc2:	e12d      	b.n	8018e20 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8018bc4:	4b98      	ldr	r3, [pc, #608]	; (8018e28 <HAL_RCC_ClockConfig+0x278>)
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	f003 0307 	and.w	r3, r3, #7
 8018bcc:	683a      	ldr	r2, [r7, #0]
 8018bce:	429a      	cmp	r2, r3
 8018bd0:	d91b      	bls.n	8018c0a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018bd2:	4b95      	ldr	r3, [pc, #596]	; (8018e28 <HAL_RCC_ClockConfig+0x278>)
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	f023 0207 	bic.w	r2, r3, #7
 8018bda:	4993      	ldr	r1, [pc, #588]	; (8018e28 <HAL_RCC_ClockConfig+0x278>)
 8018bdc:	683b      	ldr	r3, [r7, #0]
 8018bde:	4313      	orrs	r3, r2
 8018be0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018be2:	f7fd fbed 	bl	80163c0 <HAL_GetTick>
 8018be6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018be8:	e008      	b.n	8018bfc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8018bea:	f7fd fbe9 	bl	80163c0 <HAL_GetTick>
 8018bee:	4602      	mov	r2, r0
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	1ad3      	subs	r3, r2, r3
 8018bf4:	2b02      	cmp	r3, #2
 8018bf6:	d901      	bls.n	8018bfc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8018bf8:	2303      	movs	r3, #3
 8018bfa:	e111      	b.n	8018e20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018bfc:	4b8a      	ldr	r3, [pc, #552]	; (8018e28 <HAL_RCC_ClockConfig+0x278>)
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	f003 0307 	and.w	r3, r3, #7
 8018c04:	683a      	ldr	r2, [r7, #0]
 8018c06:	429a      	cmp	r2, r3
 8018c08:	d1ef      	bne.n	8018bea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	f003 0302 	and.w	r3, r3, #2
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d016      	beq.n	8018c44 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	689b      	ldr	r3, [r3, #8]
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	f7ff faef 	bl	80181fe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8018c20:	f7fd fbce 	bl	80163c0 <HAL_GetTick>
 8018c24:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8018c26:	e008      	b.n	8018c3a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8018c28:	f7fd fbca 	bl	80163c0 <HAL_GetTick>
 8018c2c:	4602      	mov	r2, r0
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	1ad3      	subs	r3, r2, r3
 8018c32:	2b02      	cmp	r3, #2
 8018c34:	d901      	bls.n	8018c3a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8018c36:	2303      	movs	r3, #3
 8018c38:	e0f2      	b.n	8018e20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8018c3a:	f7ff fbe9 	bl	8018410 <LL_RCC_IsActiveFlag_HPRE>
 8018c3e:	4603      	mov	r3, r0
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d0f1      	beq.n	8018c28 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	f003 0320 	and.w	r3, r3, #32
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d016      	beq.n	8018c7e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	695b      	ldr	r3, [r3, #20]
 8018c54:	4618      	mov	r0, r3
 8018c56:	f7ff fae6 	bl	8018226 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8018c5a:	f7fd fbb1 	bl	80163c0 <HAL_GetTick>
 8018c5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8018c60:	e008      	b.n	8018c74 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8018c62:	f7fd fbad 	bl	80163c0 <HAL_GetTick>
 8018c66:	4602      	mov	r2, r0
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	1ad3      	subs	r3, r2, r3
 8018c6c:	2b02      	cmp	r3, #2
 8018c6e:	d901      	bls.n	8018c74 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8018c70:	2303      	movs	r3, #3
 8018c72:	e0d5      	b.n	8018e20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8018c74:	f7ff fbde 	bl	8018434 <LL_RCC_IsActiveFlag_C2HPRE>
 8018c78:	4603      	mov	r3, r0
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d0f1      	beq.n	8018c62 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d016      	beq.n	8018cb8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	699b      	ldr	r3, [r3, #24]
 8018c8e:	4618      	mov	r0, r3
 8018c90:	f7ff fadf 	bl	8018252 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8018c94:	f7fd fb94 	bl	80163c0 <HAL_GetTick>
 8018c98:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8018c9a:	e008      	b.n	8018cae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8018c9c:	f7fd fb90 	bl	80163c0 <HAL_GetTick>
 8018ca0:	4602      	mov	r2, r0
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	1ad3      	subs	r3, r2, r3
 8018ca6:	2b02      	cmp	r3, #2
 8018ca8:	d901      	bls.n	8018cae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8018caa:	2303      	movs	r3, #3
 8018cac:	e0b8      	b.n	8018e20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8018cae:	f7ff fbd4 	bl	801845a <LL_RCC_IsActiveFlag_SHDHPRE>
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d0f1      	beq.n	8018c9c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	f003 0304 	and.w	r3, r3, #4
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d016      	beq.n	8018cf2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	68db      	ldr	r3, [r3, #12]
 8018cc8:	4618      	mov	r0, r3
 8018cca:	f7ff fad9 	bl	8018280 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8018cce:	f7fd fb77 	bl	80163c0 <HAL_GetTick>
 8018cd2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8018cd4:	e008      	b.n	8018ce8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8018cd6:	f7fd fb73 	bl	80163c0 <HAL_GetTick>
 8018cda:	4602      	mov	r2, r0
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	1ad3      	subs	r3, r2, r3
 8018ce0:	2b02      	cmp	r3, #2
 8018ce2:	d901      	bls.n	8018ce8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8018ce4:	2303      	movs	r3, #3
 8018ce6:	e09b      	b.n	8018e20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8018ce8:	f7ff fbca 	bl	8018480 <LL_RCC_IsActiveFlag_PPRE1>
 8018cec:	4603      	mov	r3, r0
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d0f1      	beq.n	8018cd6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	f003 0308 	and.w	r3, r3, #8
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d017      	beq.n	8018d2e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	691b      	ldr	r3, [r3, #16]
 8018d02:	00db      	lsls	r3, r3, #3
 8018d04:	4618      	mov	r0, r3
 8018d06:	f7ff facf 	bl	80182a8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8018d0a:	f7fd fb59 	bl	80163c0 <HAL_GetTick>
 8018d0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8018d10:	e008      	b.n	8018d24 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8018d12:	f7fd fb55 	bl	80163c0 <HAL_GetTick>
 8018d16:	4602      	mov	r2, r0
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	1ad3      	subs	r3, r2, r3
 8018d1c:	2b02      	cmp	r3, #2
 8018d1e:	d901      	bls.n	8018d24 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8018d20:	2303      	movs	r3, #3
 8018d22:	e07d      	b.n	8018e20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8018d24:	f7ff fbbe 	bl	80184a4 <LL_RCC_IsActiveFlag_PPRE2>
 8018d28:	4603      	mov	r3, r0
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d0f1      	beq.n	8018d12 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	f003 0301 	and.w	r3, r3, #1
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d043      	beq.n	8018dc2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	685b      	ldr	r3, [r3, #4]
 8018d3e:	2b02      	cmp	r3, #2
 8018d40:	d106      	bne.n	8018d50 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8018d42:	f7ff f86f 	bl	8017e24 <LL_RCC_HSE_IsReady>
 8018d46:	4603      	mov	r3, r0
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d11e      	bne.n	8018d8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8018d4c:	2301      	movs	r3, #1
 8018d4e:	e067      	b.n	8018e20 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	685b      	ldr	r3, [r3, #4]
 8018d54:	2b03      	cmp	r3, #3
 8018d56:	d106      	bne.n	8018d66 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8018d58:	f7ff fb17 	bl	801838a <LL_RCC_PLL_IsReady>
 8018d5c:	4603      	mov	r3, r0
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d113      	bne.n	8018d8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8018d62:	2301      	movs	r3, #1
 8018d64:	e05c      	b.n	8018e20 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	685b      	ldr	r3, [r3, #4]
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d106      	bne.n	8018d7c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8018d6e:	f7ff f9d7 	bl	8018120 <LL_RCC_MSI_IsReady>
 8018d72:	4603      	mov	r3, r0
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d108      	bne.n	8018d8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8018d78:	2301      	movs	r3, #1
 8018d7a:	e051      	b.n	8018e20 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8018d7c:	f7ff f882 	bl	8017e84 <LL_RCC_HSI_IsReady>
 8018d80:	4603      	mov	r3, r0
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d101      	bne.n	8018d8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8018d86:	2301      	movs	r3, #1
 8018d88:	e04a      	b.n	8018e20 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	685b      	ldr	r3, [r3, #4]
 8018d8e:	4618      	mov	r0, r3
 8018d90:	f7ff fa15 	bl	80181be <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018d94:	f7fd fb14 	bl	80163c0 <HAL_GetTick>
 8018d98:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018d9a:	e00a      	b.n	8018db2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018d9c:	f7fd fb10 	bl	80163c0 <HAL_GetTick>
 8018da0:	4602      	mov	r2, r0
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	1ad3      	subs	r3, r2, r3
 8018da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8018daa:	4293      	cmp	r3, r2
 8018dac:	d901      	bls.n	8018db2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8018dae:	2303      	movs	r3, #3
 8018db0:	e036      	b.n	8018e20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018db2:	f7ff fa18 	bl	80181e6 <LL_RCC_GetSysClkSource>
 8018db6:	4602      	mov	r2, r0
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	685b      	ldr	r3, [r3, #4]
 8018dbc:	009b      	lsls	r3, r3, #2
 8018dbe:	429a      	cmp	r2, r3
 8018dc0:	d1ec      	bne.n	8018d9c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8018dc2:	4b19      	ldr	r3, [pc, #100]	; (8018e28 <HAL_RCC_ClockConfig+0x278>)
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	f003 0307 	and.w	r3, r3, #7
 8018dca:	683a      	ldr	r2, [r7, #0]
 8018dcc:	429a      	cmp	r2, r3
 8018dce:	d21b      	bcs.n	8018e08 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018dd0:	4b15      	ldr	r3, [pc, #84]	; (8018e28 <HAL_RCC_ClockConfig+0x278>)
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	f023 0207 	bic.w	r2, r3, #7
 8018dd8:	4913      	ldr	r1, [pc, #76]	; (8018e28 <HAL_RCC_ClockConfig+0x278>)
 8018dda:	683b      	ldr	r3, [r7, #0]
 8018ddc:	4313      	orrs	r3, r2
 8018dde:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018de0:	f7fd faee 	bl	80163c0 <HAL_GetTick>
 8018de4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018de6:	e008      	b.n	8018dfa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8018de8:	f7fd faea 	bl	80163c0 <HAL_GetTick>
 8018dec:	4602      	mov	r2, r0
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	1ad3      	subs	r3, r2, r3
 8018df2:	2b02      	cmp	r3, #2
 8018df4:	d901      	bls.n	8018dfa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8018df6:	2303      	movs	r3, #3
 8018df8:	e012      	b.n	8018e20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018dfa:	4b0b      	ldr	r3, [pc, #44]	; (8018e28 <HAL_RCC_ClockConfig+0x278>)
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	f003 0307 	and.w	r3, r3, #7
 8018e02:	683a      	ldr	r2, [r7, #0]
 8018e04:	429a      	cmp	r2, r3
 8018e06:	d1ef      	bne.n	8018de8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8018e08:	f000 f87e 	bl	8018f08 <HAL_RCC_GetHCLKFreq>
 8018e0c:	4603      	mov	r3, r0
 8018e0e:	4a07      	ldr	r2, [pc, #28]	; (8018e2c <HAL_RCC_ClockConfig+0x27c>)
 8018e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8018e12:	f7fd fae1 	bl	80163d8 <HAL_GetTickPrio>
 8018e16:	4603      	mov	r3, r0
 8018e18:	4618      	mov	r0, r3
 8018e1a:	f7e8 fe1f 	bl	8001a5c <HAL_InitTick>
 8018e1e:	4603      	mov	r3, r0
}
 8018e20:	4618      	mov	r0, r3
 8018e22:	3710      	adds	r7, #16
 8018e24:	46bd      	mov	sp, r7
 8018e26:	bd80      	pop	{r7, pc}
 8018e28:	58004000 	.word	0x58004000
 8018e2c:	2000000c 	.word	0x2000000c

08018e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8018e30:	b590      	push	{r4, r7, lr}
 8018e32:	b085      	sub	sp, #20
 8018e34:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8018e36:	f7ff f9d6 	bl	80181e6 <LL_RCC_GetSysClkSource>
 8018e3a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d10a      	bne.n	8018e58 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8018e42:	f7ff f992 	bl	801816a <LL_RCC_MSI_GetRange>
 8018e46:	4603      	mov	r3, r0
 8018e48:	091b      	lsrs	r3, r3, #4
 8018e4a:	f003 030f 	and.w	r3, r3, #15
 8018e4e:	4a2b      	ldr	r2, [pc, #172]	; (8018efc <HAL_RCC_GetSysClockFreq+0xcc>)
 8018e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018e54:	60fb      	str	r3, [r7, #12]
 8018e56:	e04b      	b.n	8018ef0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	2b04      	cmp	r3, #4
 8018e5c:	d102      	bne.n	8018e64 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8018e5e:	4b28      	ldr	r3, [pc, #160]	; (8018f00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8018e60:	60fb      	str	r3, [r7, #12]
 8018e62:	e045      	b.n	8018ef0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	2b08      	cmp	r3, #8
 8018e68:	d10a      	bne.n	8018e80 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8018e6a:	f7fe ffab 	bl	8017dc4 <LL_RCC_HSE_IsEnabledDiv2>
 8018e6e:	4603      	mov	r3, r0
 8018e70:	2b01      	cmp	r3, #1
 8018e72:	d102      	bne.n	8018e7a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8018e74:	4b22      	ldr	r3, [pc, #136]	; (8018f00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8018e76:	60fb      	str	r3, [r7, #12]
 8018e78:	e03a      	b.n	8018ef0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8018e7a:	4b22      	ldr	r3, [pc, #136]	; (8018f04 <HAL_RCC_GetSysClockFreq+0xd4>)
 8018e7c:	60fb      	str	r3, [r7, #12]
 8018e7e:	e037      	b.n	8018ef0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8018e80:	f7ff faba 	bl	80183f8 <LL_RCC_PLL_GetMainSource>
 8018e84:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8018e86:	683b      	ldr	r3, [r7, #0]
 8018e88:	2b02      	cmp	r3, #2
 8018e8a:	d003      	beq.n	8018e94 <HAL_RCC_GetSysClockFreq+0x64>
 8018e8c:	683b      	ldr	r3, [r7, #0]
 8018e8e:	2b03      	cmp	r3, #3
 8018e90:	d003      	beq.n	8018e9a <HAL_RCC_GetSysClockFreq+0x6a>
 8018e92:	e00d      	b.n	8018eb0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8018e94:	4b1a      	ldr	r3, [pc, #104]	; (8018f00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8018e96:	60bb      	str	r3, [r7, #8]
        break;
 8018e98:	e015      	b.n	8018ec6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8018e9a:	f7fe ff93 	bl	8017dc4 <LL_RCC_HSE_IsEnabledDiv2>
 8018e9e:	4603      	mov	r3, r0
 8018ea0:	2b01      	cmp	r3, #1
 8018ea2:	d102      	bne.n	8018eaa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8018ea4:	4b16      	ldr	r3, [pc, #88]	; (8018f00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8018ea6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8018ea8:	e00d      	b.n	8018ec6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8018eaa:	4b16      	ldr	r3, [pc, #88]	; (8018f04 <HAL_RCC_GetSysClockFreq+0xd4>)
 8018eac:	60bb      	str	r3, [r7, #8]
        break;
 8018eae:	e00a      	b.n	8018ec6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8018eb0:	f7ff f95b 	bl	801816a <LL_RCC_MSI_GetRange>
 8018eb4:	4603      	mov	r3, r0
 8018eb6:	091b      	lsrs	r3, r3, #4
 8018eb8:	f003 030f 	and.w	r3, r3, #15
 8018ebc:	4a0f      	ldr	r2, [pc, #60]	; (8018efc <HAL_RCC_GetSysClockFreq+0xcc>)
 8018ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018ec2:	60bb      	str	r3, [r7, #8]
        break;
 8018ec4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8018ec6:	f7ff fa72 	bl	80183ae <LL_RCC_PLL_GetN>
 8018eca:	4602      	mov	r2, r0
 8018ecc:	68bb      	ldr	r3, [r7, #8]
 8018ece:	fb03 f402 	mul.w	r4, r3, r2
 8018ed2:	f7ff fa85 	bl	80183e0 <LL_RCC_PLL_GetDivider>
 8018ed6:	4603      	mov	r3, r0
 8018ed8:	091b      	lsrs	r3, r3, #4
 8018eda:	3301      	adds	r3, #1
 8018edc:	fbb4 f4f3 	udiv	r4, r4, r3
 8018ee0:	f7ff fa72 	bl	80183c8 <LL_RCC_PLL_GetR>
 8018ee4:	4603      	mov	r3, r0
 8018ee6:	0f5b      	lsrs	r3, r3, #29
 8018ee8:	3301      	adds	r3, #1
 8018eea:	fbb4 f3f3 	udiv	r3, r4, r3
 8018eee:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8018ef0:	68fb      	ldr	r3, [r7, #12]
}
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	3714      	adds	r7, #20
 8018ef6:	46bd      	mov	sp, r7
 8018ef8:	bd90      	pop	{r4, r7, pc}
 8018efa:	bf00      	nop
 8018efc:	0801da80 	.word	0x0801da80
 8018f00:	00f42400 	.word	0x00f42400
 8018f04:	01e84800 	.word	0x01e84800

08018f08 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8018f08:	b598      	push	{r3, r4, r7, lr}
 8018f0a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8018f0c:	f7ff ff90 	bl	8018e30 <HAL_RCC_GetSysClockFreq>
 8018f10:	4604      	mov	r4, r0
 8018f12:	f7ff f9dd 	bl	80182d0 <LL_RCC_GetAHBPrescaler>
 8018f16:	4603      	mov	r3, r0
 8018f18:	091b      	lsrs	r3, r3, #4
 8018f1a:	f003 030f 	and.w	r3, r3, #15
 8018f1e:	4a03      	ldr	r2, [pc, #12]	; (8018f2c <HAL_RCC_GetHCLKFreq+0x24>)
 8018f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018f24:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8018f28:	4618      	mov	r0, r3
 8018f2a:	bd98      	pop	{r3, r4, r7, pc}
 8018f2c:	0801da20 	.word	0x0801da20

08018f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8018f30:	b598      	push	{r3, r4, r7, lr}
 8018f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8018f34:	f7ff ffe8 	bl	8018f08 <HAL_RCC_GetHCLKFreq>
 8018f38:	4604      	mov	r4, r0
 8018f3a:	f7ff f9f0 	bl	801831e <LL_RCC_GetAPB1Prescaler>
 8018f3e:	4603      	mov	r3, r0
 8018f40:	0a1b      	lsrs	r3, r3, #8
 8018f42:	f003 0307 	and.w	r3, r3, #7
 8018f46:	4a04      	ldr	r2, [pc, #16]	; (8018f58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8018f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018f4c:	f003 031f 	and.w	r3, r3, #31
 8018f50:	fa24 f303 	lsr.w	r3, r4, r3
}
 8018f54:	4618      	mov	r0, r3
 8018f56:	bd98      	pop	{r3, r4, r7, pc}
 8018f58:	0801da60 	.word	0x0801da60

08018f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8018f5c:	b598      	push	{r3, r4, r7, lr}
 8018f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8018f60:	f7ff ffd2 	bl	8018f08 <HAL_RCC_GetHCLKFreq>
 8018f64:	4604      	mov	r4, r0
 8018f66:	f7ff f9e6 	bl	8018336 <LL_RCC_GetAPB2Prescaler>
 8018f6a:	4603      	mov	r3, r0
 8018f6c:	0adb      	lsrs	r3, r3, #11
 8018f6e:	f003 0307 	and.w	r3, r3, #7
 8018f72:	4a04      	ldr	r2, [pc, #16]	; (8018f84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8018f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018f78:	f003 031f 	and.w	r3, r3, #31
 8018f7c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8018f80:	4618      	mov	r0, r3
 8018f82:	bd98      	pop	{r3, r4, r7, pc}
 8018f84:	0801da60 	.word	0x0801da60

08018f88 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8018f88:	b580      	push	{r7, lr}
 8018f8a:	b082      	sub	sp, #8
 8018f8c:	af00      	add	r7, sp, #0
 8018f8e:	6078      	str	r0, [r7, #4]
 8018f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	226f      	movs	r2, #111	; 0x6f
 8018f96:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8018f98:	f7ff f925 	bl	80181e6 <LL_RCC_GetSysClkSource>
 8018f9c:	4602      	mov	r2, r0
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8018fa2:	f7ff f995 	bl	80182d0 <LL_RCC_GetAHBPrescaler>
 8018fa6:	4602      	mov	r2, r0
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8018fac:	f7ff f9b7 	bl	801831e <LL_RCC_GetAPB1Prescaler>
 8018fb0:	4602      	mov	r2, r0
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8018fb6:	f7ff f9be 	bl	8018336 <LL_RCC_GetAPB2Prescaler>
 8018fba:	4602      	mov	r2, r0
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8018fc0:	f7ff f992 	bl	80182e8 <LL_C2_RCC_GetAHBPrescaler>
 8018fc4:	4602      	mov	r2, r0
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8018fca:	f7ff f99a 	bl	8018302 <LL_RCC_GetAHB4Prescaler>
 8018fce:	4602      	mov	r2, r0
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8018fd4:	4b04      	ldr	r3, [pc, #16]	; (8018fe8 <HAL_RCC_GetClockConfig+0x60>)
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	f003 0207 	and.w	r2, r3, #7
 8018fdc:	683b      	ldr	r3, [r7, #0]
 8018fde:	601a      	str	r2, [r3, #0]
}
 8018fe0:	bf00      	nop
 8018fe2:	3708      	adds	r7, #8
 8018fe4:	46bd      	mov	sp, r7
 8018fe6:	bd80      	pop	{r7, pc}
 8018fe8:	58004000 	.word	0x58004000

08018fec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8018fec:	b590      	push	{r4, r7, lr}
 8018fee:	b085      	sub	sp, #20
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	2bb0      	cmp	r3, #176	; 0xb0
 8018ff8:	d903      	bls.n	8019002 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8018ffa:	4b15      	ldr	r3, [pc, #84]	; (8019050 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8018ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ffe:	60fb      	str	r3, [r7, #12]
 8019000:	e007      	b.n	8019012 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	091b      	lsrs	r3, r3, #4
 8019006:	f003 030f 	and.w	r3, r3, #15
 801900a:	4a11      	ldr	r2, [pc, #68]	; (8019050 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 801900c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019010:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8019012:	f7ff f976 	bl	8018302 <LL_RCC_GetAHB4Prescaler>
 8019016:	4603      	mov	r3, r0
 8019018:	091b      	lsrs	r3, r3, #4
 801901a:	f003 030f 	and.w	r3, r3, #15
 801901e:	4a0d      	ldr	r2, [pc, #52]	; (8019054 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8019020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019024:	68fa      	ldr	r2, [r7, #12]
 8019026:	fbb2 f3f3 	udiv	r3, r2, r3
 801902a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 801902c:	68bb      	ldr	r3, [r7, #8]
 801902e:	4a0a      	ldr	r2, [pc, #40]	; (8019058 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8019030:	fba2 2303 	umull	r2, r3, r2, r3
 8019034:	0c9c      	lsrs	r4, r3, #18
 8019036:	f7fe feb7 	bl	8017da8 <HAL_PWREx_GetVoltageRange>
 801903a:	4603      	mov	r3, r0
 801903c:	4619      	mov	r1, r3
 801903e:	4620      	mov	r0, r4
 8019040:	f000 f80c 	bl	801905c <RCC_SetFlashLatency>
 8019044:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8019046:	4618      	mov	r0, r3
 8019048:	3714      	adds	r7, #20
 801904a:	46bd      	mov	sp, r7
 801904c:	bd90      	pop	{r4, r7, pc}
 801904e:	bf00      	nop
 8019050:	0801da80 	.word	0x0801da80
 8019054:	0801da20 	.word	0x0801da20
 8019058:	431bde83 	.word	0x431bde83

0801905c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 801905c:	b590      	push	{r4, r7, lr}
 801905e:	b093      	sub	sp, #76	; 0x4c
 8019060:	af00      	add	r7, sp, #0
 8019062:	6078      	str	r0, [r7, #4]
 8019064:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8019066:	4b37      	ldr	r3, [pc, #220]	; (8019144 <RCC_SetFlashLatency+0xe8>)
 8019068:	f107 0428 	add.w	r4, r7, #40	; 0x28
 801906c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801906e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8019072:	4a35      	ldr	r2, [pc, #212]	; (8019148 <RCC_SetFlashLatency+0xec>)
 8019074:	f107 031c 	add.w	r3, r7, #28
 8019078:	ca07      	ldmia	r2, {r0, r1, r2}
 801907a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 801907e:	4b33      	ldr	r3, [pc, #204]	; (801914c <RCC_SetFlashLatency+0xf0>)
 8019080:	f107 040c 	add.w	r4, r7, #12
 8019084:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019086:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 801908a:	2300      	movs	r3, #0
 801908c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 801908e:	683b      	ldr	r3, [r7, #0]
 8019090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019094:	d11a      	bne.n	80190cc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8019096:	2300      	movs	r3, #0
 8019098:	643b      	str	r3, [r7, #64]	; 0x40
 801909a:	e013      	b.n	80190c4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 801909c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801909e:	009b      	lsls	r3, r3, #2
 80190a0:	3348      	adds	r3, #72	; 0x48
 80190a2:	443b      	add	r3, r7
 80190a4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80190a8:	687a      	ldr	r2, [r7, #4]
 80190aa:	429a      	cmp	r2, r3
 80190ac:	d807      	bhi.n	80190be <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80190ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80190b0:	009b      	lsls	r3, r3, #2
 80190b2:	3348      	adds	r3, #72	; 0x48
 80190b4:	443b      	add	r3, r7
 80190b6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80190ba:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80190bc:	e020      	b.n	8019100 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80190be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80190c0:	3301      	adds	r3, #1
 80190c2:	643b      	str	r3, [r7, #64]	; 0x40
 80190c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80190c6:	2b03      	cmp	r3, #3
 80190c8:	d9e8      	bls.n	801909c <RCC_SetFlashLatency+0x40>
 80190ca:	e019      	b.n	8019100 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80190cc:	2300      	movs	r3, #0
 80190ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80190d0:	e013      	b.n	80190fa <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80190d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80190d4:	009b      	lsls	r3, r3, #2
 80190d6:	3348      	adds	r3, #72	; 0x48
 80190d8:	443b      	add	r3, r7
 80190da:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80190de:	687a      	ldr	r2, [r7, #4]
 80190e0:	429a      	cmp	r2, r3
 80190e2:	d807      	bhi.n	80190f4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80190e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80190e6:	009b      	lsls	r3, r3, #2
 80190e8:	3348      	adds	r3, #72	; 0x48
 80190ea:	443b      	add	r3, r7
 80190ec:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80190f0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80190f2:	e005      	b.n	8019100 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80190f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80190f6:	3301      	adds	r3, #1
 80190f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80190fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80190fc:	2b02      	cmp	r3, #2
 80190fe:	d9e8      	bls.n	80190d2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8019100:	4b13      	ldr	r3, [pc, #76]	; (8019150 <RCC_SetFlashLatency+0xf4>)
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	f023 0207 	bic.w	r2, r3, #7
 8019108:	4911      	ldr	r1, [pc, #68]	; (8019150 <RCC_SetFlashLatency+0xf4>)
 801910a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801910c:	4313      	orrs	r3, r2
 801910e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8019110:	f7fd f956 	bl	80163c0 <HAL_GetTick>
 8019114:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8019116:	e008      	b.n	801912a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8019118:	f7fd f952 	bl	80163c0 <HAL_GetTick>
 801911c:	4602      	mov	r2, r0
 801911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019120:	1ad3      	subs	r3, r2, r3
 8019122:	2b02      	cmp	r3, #2
 8019124:	d901      	bls.n	801912a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8019126:	2303      	movs	r3, #3
 8019128:	e007      	b.n	801913a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801912a:	4b09      	ldr	r3, [pc, #36]	; (8019150 <RCC_SetFlashLatency+0xf4>)
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	f003 0307 	and.w	r3, r3, #7
 8019132:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019134:	429a      	cmp	r2, r3
 8019136:	d1ef      	bne.n	8019118 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8019138:	2300      	movs	r3, #0
}
 801913a:	4618      	mov	r0, r3
 801913c:	374c      	adds	r7, #76	; 0x4c
 801913e:	46bd      	mov	sp, r7
 8019140:	bd90      	pop	{r4, r7, pc}
 8019142:	bf00      	nop
 8019144:	0801d9f4 	.word	0x0801d9f4
 8019148:	0801da04 	.word	0x0801da04
 801914c:	0801da10 	.word	0x0801da10
 8019150:	58004000 	.word	0x58004000

08019154 <LL_RCC_LSE_IsEnabled>:
{
 8019154:	b480      	push	{r7}
 8019156:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8019158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801915c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019160:	f003 0301 	and.w	r3, r3, #1
 8019164:	2b01      	cmp	r3, #1
 8019166:	d101      	bne.n	801916c <LL_RCC_LSE_IsEnabled+0x18>
 8019168:	2301      	movs	r3, #1
 801916a:	e000      	b.n	801916e <LL_RCC_LSE_IsEnabled+0x1a>
 801916c:	2300      	movs	r3, #0
}
 801916e:	4618      	mov	r0, r3
 8019170:	46bd      	mov	sp, r7
 8019172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019176:	4770      	bx	lr

08019178 <LL_RCC_LSE_IsReady>:
{
 8019178:	b480      	push	{r7}
 801917a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801917c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019184:	f003 0302 	and.w	r3, r3, #2
 8019188:	2b02      	cmp	r3, #2
 801918a:	d101      	bne.n	8019190 <LL_RCC_LSE_IsReady+0x18>
 801918c:	2301      	movs	r3, #1
 801918e:	e000      	b.n	8019192 <LL_RCC_LSE_IsReady+0x1a>
 8019190:	2300      	movs	r3, #0
}
 8019192:	4618      	mov	r0, r3
 8019194:	46bd      	mov	sp, r7
 8019196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801919a:	4770      	bx	lr

0801919c <LL_RCC_MSI_EnablePLLMode>:
{
 801919c:	b480      	push	{r7}
 801919e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80191a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80191aa:	f043 0304 	orr.w	r3, r3, #4
 80191ae:	6013      	str	r3, [r2, #0]
}
 80191b0:	bf00      	nop
 80191b2:	46bd      	mov	sp, r7
 80191b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b8:	4770      	bx	lr

080191ba <LL_RCC_SetRFWKPClockSource>:
{
 80191ba:	b480      	push	{r7}
 80191bc:	b083      	sub	sp, #12
 80191be:	af00      	add	r7, sp, #0
 80191c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80191c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80191c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80191ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80191ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	4313      	orrs	r3, r2
 80191d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80191da:	bf00      	nop
 80191dc:	370c      	adds	r7, #12
 80191de:	46bd      	mov	sp, r7
 80191e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191e4:	4770      	bx	lr

080191e6 <LL_RCC_SetSMPSClockSource>:
{
 80191e6:	b480      	push	{r7}
 80191e8:	b083      	sub	sp, #12
 80191ea:	af00      	add	r7, sp, #0
 80191ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80191ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80191f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191f4:	f023 0203 	bic.w	r2, r3, #3
 80191f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	4313      	orrs	r3, r2
 8019200:	624b      	str	r3, [r1, #36]	; 0x24
}
 8019202:	bf00      	nop
 8019204:	370c      	adds	r7, #12
 8019206:	46bd      	mov	sp, r7
 8019208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801920c:	4770      	bx	lr

0801920e <LL_RCC_SetSMPSPrescaler>:
{
 801920e:	b480      	push	{r7}
 8019210:	b083      	sub	sp, #12
 8019212:	af00      	add	r7, sp, #0
 8019214:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8019216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801921c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8019220:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	4313      	orrs	r3, r2
 8019228:	624b      	str	r3, [r1, #36]	; 0x24
}
 801922a:	bf00      	nop
 801922c:	370c      	adds	r7, #12
 801922e:	46bd      	mov	sp, r7
 8019230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019234:	4770      	bx	lr

08019236 <LL_RCC_SetUSARTClockSource>:
{
 8019236:	b480      	push	{r7}
 8019238:	b083      	sub	sp, #12
 801923a:	af00      	add	r7, sp, #0
 801923c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 801923e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019246:	f023 0203 	bic.w	r2, r3, #3
 801924a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	4313      	orrs	r3, r2
 8019252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8019256:	bf00      	nop
 8019258:	370c      	adds	r7, #12
 801925a:	46bd      	mov	sp, r7
 801925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019260:	4770      	bx	lr

08019262 <LL_RCC_SetLPUARTClockSource>:
{
 8019262:	b480      	push	{r7}
 8019264:	b083      	sub	sp, #12
 8019266:	af00      	add	r7, sp, #0
 8019268:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 801926a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801926e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019272:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8019276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	4313      	orrs	r3, r2
 801927e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8019282:	bf00      	nop
 8019284:	370c      	adds	r7, #12
 8019286:	46bd      	mov	sp, r7
 8019288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801928c:	4770      	bx	lr

0801928e <LL_RCC_SetI2CClockSource>:
{
 801928e:	b480      	push	{r7}
 8019290:	b083      	sub	sp, #12
 8019292:	af00      	add	r7, sp, #0
 8019294:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8019296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801929a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	091b      	lsrs	r3, r3, #4
 80192a2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80192a6:	43db      	mvns	r3, r3
 80192a8:	401a      	ands	r2, r3
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	011b      	lsls	r3, r3, #4
 80192ae:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80192b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80192b6:	4313      	orrs	r3, r2
 80192b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80192bc:	bf00      	nop
 80192be:	370c      	adds	r7, #12
 80192c0:	46bd      	mov	sp, r7
 80192c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c6:	4770      	bx	lr

080192c8 <LL_RCC_SetLPTIMClockSource>:
{
 80192c8:	b480      	push	{r7}
 80192ca:	b083      	sub	sp, #12
 80192cc:	af00      	add	r7, sp, #0
 80192ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80192d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80192d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	0c1b      	lsrs	r3, r3, #16
 80192dc:	041b      	lsls	r3, r3, #16
 80192de:	43db      	mvns	r3, r3
 80192e0:	401a      	ands	r2, r3
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	041b      	lsls	r3, r3, #16
 80192e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80192ea:	4313      	orrs	r3, r2
 80192ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80192f0:	bf00      	nop
 80192f2:	370c      	adds	r7, #12
 80192f4:	46bd      	mov	sp, r7
 80192f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192fa:	4770      	bx	lr

080192fc <LL_RCC_SetSAIClockSource>:
{
 80192fc:	b480      	push	{r7}
 80192fe:	b083      	sub	sp, #12
 8019300:	af00      	add	r7, sp, #0
 8019302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8019304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801930c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8019310:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	4313      	orrs	r3, r2
 8019318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801931c:	bf00      	nop
 801931e:	370c      	adds	r7, #12
 8019320:	46bd      	mov	sp, r7
 8019322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019326:	4770      	bx	lr

08019328 <LL_RCC_SetRNGClockSource>:
{
 8019328:	b480      	push	{r7}
 801932a:	b083      	sub	sp, #12
 801932c:	af00      	add	r7, sp, #0
 801932e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8019330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019338:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801933c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	4313      	orrs	r3, r2
 8019344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8019348:	bf00      	nop
 801934a:	370c      	adds	r7, #12
 801934c:	46bd      	mov	sp, r7
 801934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019352:	4770      	bx	lr

08019354 <LL_RCC_SetCLK48ClockSource>:
{
 8019354:	b480      	push	{r7}
 8019356:	b083      	sub	sp, #12
 8019358:	af00      	add	r7, sp, #0
 801935a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 801935c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019364:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8019368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	4313      	orrs	r3, r2
 8019370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8019374:	bf00      	nop
 8019376:	370c      	adds	r7, #12
 8019378:	46bd      	mov	sp, r7
 801937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801937e:	4770      	bx	lr

08019380 <LL_RCC_SetUSBClockSource>:
{
 8019380:	b580      	push	{r7, lr}
 8019382:	b082      	sub	sp, #8
 8019384:	af00      	add	r7, sp, #0
 8019386:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8019388:	6878      	ldr	r0, [r7, #4]
 801938a:	f7ff ffe3 	bl	8019354 <LL_RCC_SetCLK48ClockSource>
}
 801938e:	bf00      	nop
 8019390:	3708      	adds	r7, #8
 8019392:	46bd      	mov	sp, r7
 8019394:	bd80      	pop	{r7, pc}

08019396 <LL_RCC_SetADCClockSource>:
{
 8019396:	b480      	push	{r7}
 8019398:	b083      	sub	sp, #12
 801939a:	af00      	add	r7, sp, #0
 801939c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 801939e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80193a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80193a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80193aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	4313      	orrs	r3, r2
 80193b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80193b6:	bf00      	nop
 80193b8:	370c      	adds	r7, #12
 80193ba:	46bd      	mov	sp, r7
 80193bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c0:	4770      	bx	lr

080193c2 <LL_RCC_SetRTCClockSource>:
{
 80193c2:	b480      	push	{r7}
 80193c4:	b083      	sub	sp, #12
 80193c6:	af00      	add	r7, sp, #0
 80193c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80193ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80193ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80193d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80193d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	4313      	orrs	r3, r2
 80193de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80193e2:	bf00      	nop
 80193e4:	370c      	adds	r7, #12
 80193e6:	46bd      	mov	sp, r7
 80193e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ec:	4770      	bx	lr

080193ee <LL_RCC_GetRTCClockSource>:
{
 80193ee:	b480      	push	{r7}
 80193f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80193f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80193f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80193fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80193fe:	4618      	mov	r0, r3
 8019400:	46bd      	mov	sp, r7
 8019402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019406:	4770      	bx	lr

08019408 <LL_RCC_ForceBackupDomainReset>:
{
 8019408:	b480      	push	{r7}
 801940a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801940c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019414:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801941c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8019420:	bf00      	nop
 8019422:	46bd      	mov	sp, r7
 8019424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019428:	4770      	bx	lr

0801942a <LL_RCC_ReleaseBackupDomainReset>:
{
 801942a:	b480      	push	{r7}
 801942c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801942e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019436:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801943a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801943e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8019442:	bf00      	nop
 8019444:	46bd      	mov	sp, r7
 8019446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801944a:	4770      	bx	lr

0801944c <LL_RCC_PLLSAI1_Enable>:
{
 801944c:	b480      	push	{r7}
 801944e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8019450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801945a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801945e:	6013      	str	r3, [r2, #0]
}
 8019460:	bf00      	nop
 8019462:	46bd      	mov	sp, r7
 8019464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019468:	4770      	bx	lr

0801946a <LL_RCC_PLLSAI1_Disable>:
{
 801946a:	b480      	push	{r7}
 801946c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801946e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019478:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801947c:	6013      	str	r3, [r2, #0]
}
 801947e:	bf00      	nop
 8019480:	46bd      	mov	sp, r7
 8019482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019486:	4770      	bx	lr

08019488 <LL_RCC_PLLSAI1_IsReady>:
{
 8019488:	b480      	push	{r7}
 801948a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 801948c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801949a:	d101      	bne.n	80194a0 <LL_RCC_PLLSAI1_IsReady+0x18>
 801949c:	2301      	movs	r3, #1
 801949e:	e000      	b.n	80194a2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80194a0:	2300      	movs	r3, #0
}
 80194a2:	4618      	mov	r0, r3
 80194a4:	46bd      	mov	sp, r7
 80194a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194aa:	4770      	bx	lr

080194ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80194ac:	b580      	push	{r7, lr}
 80194ae:	b088      	sub	sp, #32
 80194b0:	af00      	add	r7, sp, #0
 80194b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80194b4:	2300      	movs	r3, #0
 80194b6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80194b8:	2300      	movs	r3, #0
 80194ba:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d034      	beq.n	8019532 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80194cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80194d0:	d021      	beq.n	8019516 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80194d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80194d6:	d81b      	bhi.n	8019510 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80194d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80194dc:	d01d      	beq.n	801951a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80194de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80194e2:	d815      	bhi.n	8019510 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d00b      	beq.n	8019500 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80194e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80194ec:	d110      	bne.n	8019510 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80194ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80194f2:	68db      	ldr	r3, [r3, #12]
 80194f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80194f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80194fc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80194fe:	e00d      	b.n	801951c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	3304      	adds	r3, #4
 8019504:	4618      	mov	r0, r3
 8019506:	f000 f94d 	bl	80197a4 <RCCEx_PLLSAI1_ConfigNP>
 801950a:	4603      	mov	r3, r0
 801950c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801950e:	e005      	b.n	801951c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8019510:	2301      	movs	r3, #1
 8019512:	77fb      	strb	r3, [r7, #31]
        break;
 8019514:	e002      	b.n	801951c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8019516:	bf00      	nop
 8019518:	e000      	b.n	801951c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 801951a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801951c:	7ffb      	ldrb	r3, [r7, #31]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d105      	bne.n	801952e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019526:	4618      	mov	r0, r3
 8019528:	f7ff fee8 	bl	80192fc <LL_RCC_SetSAIClockSource>
 801952c:	e001      	b.n	8019532 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801952e:	7ffb      	ldrb	r3, [r7, #31]
 8019530:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801953a:	2b00      	cmp	r3, #0
 801953c:	d046      	beq.n	80195cc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 801953e:	f7ff ff56 	bl	80193ee <LL_RCC_GetRTCClockSource>
 8019542:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019548:	69ba      	ldr	r2, [r7, #24]
 801954a:	429a      	cmp	r2, r3
 801954c:	d03c      	beq.n	80195c8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801954e:	f7fe fc1b 	bl	8017d88 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8019552:	69bb      	ldr	r3, [r7, #24]
 8019554:	2b00      	cmp	r3, #0
 8019556:	d105      	bne.n	8019564 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801955c:	4618      	mov	r0, r3
 801955e:	f7ff ff30 	bl	80193c2 <LL_RCC_SetRTCClockSource>
 8019562:	e02e      	b.n	80195c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8019564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801956c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 801956e:	f7ff ff4b 	bl	8019408 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8019572:	f7ff ff5a 	bl	801942a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8019576:	697b      	ldr	r3, [r7, #20]
 8019578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019580:	4313      	orrs	r3, r2
 8019582:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8019584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019588:	697b      	ldr	r3, [r7, #20]
 801958a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 801958e:	f7ff fde1 	bl	8019154 <LL_RCC_LSE_IsEnabled>
 8019592:	4603      	mov	r3, r0
 8019594:	2b01      	cmp	r3, #1
 8019596:	d114      	bne.n	80195c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8019598:	f7fc ff12 	bl	80163c0 <HAL_GetTick>
 801959c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 801959e:	e00b      	b.n	80195b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80195a0:	f7fc ff0e 	bl	80163c0 <HAL_GetTick>
 80195a4:	4602      	mov	r2, r0
 80195a6:	693b      	ldr	r3, [r7, #16]
 80195a8:	1ad3      	subs	r3, r2, r3
 80195aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80195ae:	4293      	cmp	r3, r2
 80195b0:	d902      	bls.n	80195b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80195b2:	2303      	movs	r3, #3
 80195b4:	77fb      	strb	r3, [r7, #31]
              break;
 80195b6:	e004      	b.n	80195c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80195b8:	f7ff fdde 	bl	8019178 <LL_RCC_LSE_IsReady>
 80195bc:	4603      	mov	r3, r0
 80195be:	2b01      	cmp	r3, #1
 80195c0:	d1ee      	bne.n	80195a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80195c2:	7ffb      	ldrb	r3, [r7, #31]
 80195c4:	77bb      	strb	r3, [r7, #30]
 80195c6:	e001      	b.n	80195cc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80195c8:	7ffb      	ldrb	r3, [r7, #31]
 80195ca:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	f003 0301 	and.w	r3, r3, #1
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d004      	beq.n	80195e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	699b      	ldr	r3, [r3, #24]
 80195dc:	4618      	mov	r0, r3
 80195de:	f7ff fe2a 	bl	8019236 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	f003 0302 	and.w	r3, r3, #2
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d004      	beq.n	80195f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	69db      	ldr	r3, [r3, #28]
 80195f2:	4618      	mov	r0, r3
 80195f4:	f7ff fe35 	bl	8019262 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	f003 0310 	and.w	r3, r3, #16
 8019600:	2b00      	cmp	r3, #0
 8019602:	d004      	beq.n	801960e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019608:	4618      	mov	r0, r3
 801960a:	f7ff fe5d 	bl	80192c8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	f003 0320 	and.w	r3, r3, #32
 8019616:	2b00      	cmp	r3, #0
 8019618:	d004      	beq.n	8019624 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801961e:	4618      	mov	r0, r3
 8019620:	f7ff fe52 	bl	80192c8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	f003 0304 	and.w	r3, r3, #4
 801962c:	2b00      	cmp	r3, #0
 801962e:	d004      	beq.n	801963a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	6a1b      	ldr	r3, [r3, #32]
 8019634:	4618      	mov	r0, r3
 8019636:	f7ff fe2a 	bl	801928e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	f003 0308 	and.w	r3, r3, #8
 8019642:	2b00      	cmp	r3, #0
 8019644:	d004      	beq.n	8019650 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801964a:	4618      	mov	r0, r3
 801964c:	f7ff fe1f 	bl	801928e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	681b      	ldr	r3, [r3, #0]
 8019654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019658:	2b00      	cmp	r3, #0
 801965a:	d022      	beq.n	80196a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019660:	4618      	mov	r0, r3
 8019662:	f7ff fe8d 	bl	8019380 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801966a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801966e:	d107      	bne.n	8019680 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8019670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019674:	68db      	ldr	r3, [r3, #12]
 8019676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801967a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801967e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8019688:	d10b      	bne.n	80196a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	3304      	adds	r3, #4
 801968e:	4618      	mov	r0, r3
 8019690:	f000 f8e3 	bl	801985a <RCCEx_PLLSAI1_ConfigNQ>
 8019694:	4603      	mov	r3, r0
 8019696:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8019698:	7ffb      	ldrb	r3, [r7, #31]
 801969a:	2b00      	cmp	r3, #0
 801969c:	d001      	beq.n	80196a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 801969e:	7ffb      	ldrb	r3, [r7, #31]
 80196a0:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d02b      	beq.n	8019706 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80196b6:	d008      	beq.n	80196ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80196c0:	d003      	beq.n	80196ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d105      	bne.n	80196d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196ce:	4618      	mov	r0, r3
 80196d0:	f7ff fe2a 	bl	8019328 <LL_RCC_SetRNGClockSource>
 80196d4:	e00a      	b.n	80196ec <HAL_RCCEx_PeriphCLKConfig+0x240>
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80196de:	60fb      	str	r3, [r7, #12]
 80196e0:	2000      	movs	r0, #0
 80196e2:	f7ff fe21 	bl	8019328 <LL_RCC_SetRNGClockSource>
 80196e6:	68f8      	ldr	r0, [r7, #12]
 80196e8:	f7ff fe34 	bl	8019354 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196f0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80196f4:	d107      	bne.n	8019706 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80196f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80196fa:	68db      	ldr	r3, [r3, #12]
 80196fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019700:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8019704:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801970e:	2b00      	cmp	r3, #0
 8019710:	d022      	beq.n	8019758 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019716:	4618      	mov	r0, r3
 8019718:	f7ff fe3d 	bl	8019396 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019724:	d107      	bne.n	8019736 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8019726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801972a:	68db      	ldr	r3, [r3, #12]
 801972c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019734:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801973a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801973e:	d10b      	bne.n	8019758 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	3304      	adds	r3, #4
 8019744:	4618      	mov	r0, r3
 8019746:	f000 f8e3 	bl	8019910 <RCCEx_PLLSAI1_ConfigNR>
 801974a:	4603      	mov	r3, r0
 801974c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801974e:	7ffb      	ldrb	r3, [r7, #31]
 8019750:	2b00      	cmp	r3, #0
 8019752:	d001      	beq.n	8019758 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8019754:	7ffb      	ldrb	r3, [r7, #31]
 8019756:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019760:	2b00      	cmp	r3, #0
 8019762:	d004      	beq.n	801976e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019768:	4618      	mov	r0, r3
 801976a:	f7ff fd26 	bl	80191ba <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019776:	2b00      	cmp	r3, #0
 8019778:	d009      	beq.n	801978e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801977e:	4618      	mov	r0, r3
 8019780:	f7ff fd45 	bl	801920e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019788:	4618      	mov	r0, r3
 801978a:	f7ff fd2c 	bl	80191e6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 801978e:	7fbb      	ldrb	r3, [r7, #30]
}
 8019790:	4618      	mov	r0, r3
 8019792:	3720      	adds	r7, #32
 8019794:	46bd      	mov	sp, r7
 8019796:	bd80      	pop	{r7, pc}

08019798 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8019798:	b580      	push	{r7, lr}
 801979a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 801979c:	f7ff fcfe 	bl	801919c <LL_RCC_MSI_EnablePLLMode>
}
 80197a0:	bf00      	nop
 80197a2:	bd80      	pop	{r7, pc}

080197a4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80197a4:	b580      	push	{r7, lr}
 80197a6:	b084      	sub	sp, #16
 80197a8:	af00      	add	r7, sp, #0
 80197aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80197ac:	2300      	movs	r3, #0
 80197ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80197b0:	f7ff fe5b 	bl	801946a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80197b4:	f7fc fe04 	bl	80163c0 <HAL_GetTick>
 80197b8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80197ba:	e009      	b.n	80197d0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80197bc:	f7fc fe00 	bl	80163c0 <HAL_GetTick>
 80197c0:	4602      	mov	r2, r0
 80197c2:	68bb      	ldr	r3, [r7, #8]
 80197c4:	1ad3      	subs	r3, r2, r3
 80197c6:	2b02      	cmp	r3, #2
 80197c8:	d902      	bls.n	80197d0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80197ca:	2303      	movs	r3, #3
 80197cc:	73fb      	strb	r3, [r7, #15]
      break;
 80197ce:	e004      	b.n	80197da <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80197d0:	f7ff fe5a 	bl	8019488 <LL_RCC_PLLSAI1_IsReady>
 80197d4:	4603      	mov	r3, r0
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d1f0      	bne.n	80197bc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80197da:	7bfb      	ldrb	r3, [r7, #15]
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d137      	bne.n	8019850 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80197e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80197e4:	691b      	ldr	r3, [r3, #16]
 80197e6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	021b      	lsls	r3, r3, #8
 80197f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80197f4:	4313      	orrs	r3, r2
 80197f6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80197f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80197fc:	691b      	ldr	r3, [r3, #16]
 80197fe:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	685b      	ldr	r3, [r3, #4]
 8019806:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801980a:	4313      	orrs	r3, r2
 801980c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801980e:	f7ff fe1d 	bl	801944c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019812:	f7fc fdd5 	bl	80163c0 <HAL_GetTick>
 8019816:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8019818:	e009      	b.n	801982e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801981a:	f7fc fdd1 	bl	80163c0 <HAL_GetTick>
 801981e:	4602      	mov	r2, r0
 8019820:	68bb      	ldr	r3, [r7, #8]
 8019822:	1ad3      	subs	r3, r2, r3
 8019824:	2b02      	cmp	r3, #2
 8019826:	d902      	bls.n	801982e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8019828:	2303      	movs	r3, #3
 801982a:	73fb      	strb	r3, [r7, #15]
        break;
 801982c:	e004      	b.n	8019838 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801982e:	f7ff fe2b 	bl	8019488 <LL_RCC_PLLSAI1_IsReady>
 8019832:	4603      	mov	r3, r0
 8019834:	2b01      	cmp	r3, #1
 8019836:	d1f0      	bne.n	801981a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8019838:	7bfb      	ldrb	r3, [r7, #15]
 801983a:	2b00      	cmp	r3, #0
 801983c:	d108      	bne.n	8019850 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801983e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019842:	691a      	ldr	r2, [r3, #16]
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	691b      	ldr	r3, [r3, #16]
 8019848:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801984c:	4313      	orrs	r3, r2
 801984e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8019850:	7bfb      	ldrb	r3, [r7, #15]
}
 8019852:	4618      	mov	r0, r3
 8019854:	3710      	adds	r7, #16
 8019856:	46bd      	mov	sp, r7
 8019858:	bd80      	pop	{r7, pc}

0801985a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801985a:	b580      	push	{r7, lr}
 801985c:	b084      	sub	sp, #16
 801985e:	af00      	add	r7, sp, #0
 8019860:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8019862:	2300      	movs	r3, #0
 8019864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8019866:	f7ff fe00 	bl	801946a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801986a:	f7fc fda9 	bl	80163c0 <HAL_GetTick>
 801986e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8019870:	e009      	b.n	8019886 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8019872:	f7fc fda5 	bl	80163c0 <HAL_GetTick>
 8019876:	4602      	mov	r2, r0
 8019878:	68bb      	ldr	r3, [r7, #8]
 801987a:	1ad3      	subs	r3, r2, r3
 801987c:	2b02      	cmp	r3, #2
 801987e:	d902      	bls.n	8019886 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8019880:	2303      	movs	r3, #3
 8019882:	73fb      	strb	r3, [r7, #15]
      break;
 8019884:	e004      	b.n	8019890 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8019886:	f7ff fdff 	bl	8019488 <LL_RCC_PLLSAI1_IsReady>
 801988a:	4603      	mov	r3, r0
 801988c:	2b00      	cmp	r3, #0
 801988e:	d1f0      	bne.n	8019872 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8019890:	7bfb      	ldrb	r3, [r7, #15]
 8019892:	2b00      	cmp	r3, #0
 8019894:	d137      	bne.n	8019906 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8019896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801989a:	691b      	ldr	r3, [r3, #16]
 801989c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	681b      	ldr	r3, [r3, #0]
 80198a4:	021b      	lsls	r3, r3, #8
 80198a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80198aa:	4313      	orrs	r3, r2
 80198ac:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80198ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80198b2:	691b      	ldr	r3, [r3, #16]
 80198b4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	689b      	ldr	r3, [r3, #8]
 80198bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80198c0:	4313      	orrs	r3, r2
 80198c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80198c4:	f7ff fdc2 	bl	801944c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80198c8:	f7fc fd7a 	bl	80163c0 <HAL_GetTick>
 80198cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80198ce:	e009      	b.n	80198e4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80198d0:	f7fc fd76 	bl	80163c0 <HAL_GetTick>
 80198d4:	4602      	mov	r2, r0
 80198d6:	68bb      	ldr	r3, [r7, #8]
 80198d8:	1ad3      	subs	r3, r2, r3
 80198da:	2b02      	cmp	r3, #2
 80198dc:	d902      	bls.n	80198e4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80198de:	2303      	movs	r3, #3
 80198e0:	73fb      	strb	r3, [r7, #15]
        break;
 80198e2:	e004      	b.n	80198ee <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80198e4:	f7ff fdd0 	bl	8019488 <LL_RCC_PLLSAI1_IsReady>
 80198e8:	4603      	mov	r3, r0
 80198ea:	2b01      	cmp	r3, #1
 80198ec:	d1f0      	bne.n	80198d0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80198ee:	7bfb      	ldrb	r3, [r7, #15]
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d108      	bne.n	8019906 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80198f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80198f8:	691a      	ldr	r2, [r3, #16]
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	691b      	ldr	r3, [r3, #16]
 80198fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019902:	4313      	orrs	r3, r2
 8019904:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8019906:	7bfb      	ldrb	r3, [r7, #15]
}
 8019908:	4618      	mov	r0, r3
 801990a:	3710      	adds	r7, #16
 801990c:	46bd      	mov	sp, r7
 801990e:	bd80      	pop	{r7, pc}

08019910 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8019910:	b580      	push	{r7, lr}
 8019912:	b084      	sub	sp, #16
 8019914:	af00      	add	r7, sp, #0
 8019916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8019918:	2300      	movs	r3, #0
 801991a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801991c:	f7ff fda5 	bl	801946a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8019920:	f7fc fd4e 	bl	80163c0 <HAL_GetTick>
 8019924:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8019926:	e009      	b.n	801993c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8019928:	f7fc fd4a 	bl	80163c0 <HAL_GetTick>
 801992c:	4602      	mov	r2, r0
 801992e:	68bb      	ldr	r3, [r7, #8]
 8019930:	1ad3      	subs	r3, r2, r3
 8019932:	2b02      	cmp	r3, #2
 8019934:	d902      	bls.n	801993c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8019936:	2303      	movs	r3, #3
 8019938:	73fb      	strb	r3, [r7, #15]
      break;
 801993a:	e004      	b.n	8019946 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801993c:	f7ff fda4 	bl	8019488 <LL_RCC_PLLSAI1_IsReady>
 8019940:	4603      	mov	r3, r0
 8019942:	2b00      	cmp	r3, #0
 8019944:	d1f0      	bne.n	8019928 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8019946:	7bfb      	ldrb	r3, [r7, #15]
 8019948:	2b00      	cmp	r3, #0
 801994a:	d137      	bne.n	80199bc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801994c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019950:	691b      	ldr	r3, [r3, #16]
 8019952:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	021b      	lsls	r3, r3, #8
 801995c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019960:	4313      	orrs	r3, r2
 8019962:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8019964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019968:	691b      	ldr	r3, [r3, #16]
 801996a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	68db      	ldr	r3, [r3, #12]
 8019972:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019976:	4313      	orrs	r3, r2
 8019978:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801997a:	f7ff fd67 	bl	801944c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801997e:	f7fc fd1f 	bl	80163c0 <HAL_GetTick>
 8019982:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8019984:	e009      	b.n	801999a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8019986:	f7fc fd1b 	bl	80163c0 <HAL_GetTick>
 801998a:	4602      	mov	r2, r0
 801998c:	68bb      	ldr	r3, [r7, #8]
 801998e:	1ad3      	subs	r3, r2, r3
 8019990:	2b02      	cmp	r3, #2
 8019992:	d902      	bls.n	801999a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8019994:	2303      	movs	r3, #3
 8019996:	73fb      	strb	r3, [r7, #15]
        break;
 8019998:	e004      	b.n	80199a4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801999a:	f7ff fd75 	bl	8019488 <LL_RCC_PLLSAI1_IsReady>
 801999e:	4603      	mov	r3, r0
 80199a0:	2b01      	cmp	r3, #1
 80199a2:	d1f0      	bne.n	8019986 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80199a4:	7bfb      	ldrb	r3, [r7, #15]
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d108      	bne.n	80199bc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80199aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80199ae:	691a      	ldr	r2, [r3, #16]
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	691b      	ldr	r3, [r3, #16]
 80199b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80199b8:	4313      	orrs	r3, r2
 80199ba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80199bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80199be:	4618      	mov	r0, r3
 80199c0:	3710      	adds	r7, #16
 80199c2:	46bd      	mov	sp, r7
 80199c4:	bd80      	pop	{r7, pc}

080199c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80199c6:	b580      	push	{r7, lr}
 80199c8:	b082      	sub	sp, #8
 80199ca:	af00      	add	r7, sp, #0
 80199cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d101      	bne.n	80199d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80199d4:	2301      	movs	r3, #1
 80199d6:	e049      	b.n	8019a6c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80199de:	b2db      	uxtb	r3, r3
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d106      	bne.n	80199f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	2200      	movs	r2, #0
 80199e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80199ec:	6878      	ldr	r0, [r7, #4]
 80199ee:	f000 f841 	bl	8019a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	2202      	movs	r2, #2
 80199f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	681a      	ldr	r2, [r3, #0]
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	3304      	adds	r3, #4
 8019a02:	4619      	mov	r1, r3
 8019a04:	4610      	mov	r0, r2
 8019a06:	f000 f9d5 	bl	8019db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	2201      	movs	r2, #1
 8019a0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	2201      	movs	r2, #1
 8019a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	2201      	movs	r2, #1
 8019a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	2201      	movs	r2, #1
 8019a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	2201      	movs	r2, #1
 8019a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	2201      	movs	r2, #1
 8019a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	2201      	movs	r2, #1
 8019a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	2201      	movs	r2, #1
 8019a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	2201      	movs	r2, #1
 8019a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	2201      	movs	r2, #1
 8019a56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	2201      	movs	r2, #1
 8019a5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	2201      	movs	r2, #1
 8019a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8019a6a:	2300      	movs	r3, #0
}
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	3708      	adds	r7, #8
 8019a70:	46bd      	mov	sp, r7
 8019a72:	bd80      	pop	{r7, pc}

08019a74 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8019a74:	b480      	push	{r7}
 8019a76:	b083      	sub	sp, #12
 8019a78:	af00      	add	r7, sp, #0
 8019a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8019a7c:	bf00      	nop
 8019a7e:	370c      	adds	r7, #12
 8019a80:	46bd      	mov	sp, r7
 8019a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a86:	4770      	bx	lr

08019a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8019a88:	b480      	push	{r7}
 8019a8a:	b085      	sub	sp, #20
 8019a8c:	af00      	add	r7, sp, #0
 8019a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019a96:	b2db      	uxtb	r3, r3
 8019a98:	2b01      	cmp	r3, #1
 8019a9a:	d001      	beq.n	8019aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8019a9c:	2301      	movs	r3, #1
 8019a9e:	e036      	b.n	8019b0e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	2202      	movs	r2, #2
 8019aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	68da      	ldr	r2, [r3, #12]
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	f042 0201 	orr.w	r2, r2, #1
 8019ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	4a17      	ldr	r2, [pc, #92]	; (8019b1c <HAL_TIM_Base_Start_IT+0x94>)
 8019abe:	4293      	cmp	r3, r2
 8019ac0:	d004      	beq.n	8019acc <HAL_TIM_Base_Start_IT+0x44>
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019aca:	d115      	bne.n	8019af8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	689a      	ldr	r2, [r3, #8]
 8019ad2:	4b13      	ldr	r3, [pc, #76]	; (8019b20 <HAL_TIM_Base_Start_IT+0x98>)
 8019ad4:	4013      	ands	r3, r2
 8019ad6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	2b06      	cmp	r3, #6
 8019adc:	d015      	beq.n	8019b0a <HAL_TIM_Base_Start_IT+0x82>
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019ae4:	d011      	beq.n	8019b0a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	681a      	ldr	r2, [r3, #0]
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	f042 0201 	orr.w	r2, r2, #1
 8019af4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019af6:	e008      	b.n	8019b0a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	681b      	ldr	r3, [r3, #0]
 8019afc:	681a      	ldr	r2, [r3, #0]
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	f042 0201 	orr.w	r2, r2, #1
 8019b06:	601a      	str	r2, [r3, #0]
 8019b08:	e000      	b.n	8019b0c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019b0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8019b0c:	2300      	movs	r3, #0
}
 8019b0e:	4618      	mov	r0, r3
 8019b10:	3714      	adds	r7, #20
 8019b12:	46bd      	mov	sp, r7
 8019b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b18:	4770      	bx	lr
 8019b1a:	bf00      	nop
 8019b1c:	40012c00 	.word	0x40012c00
 8019b20:	00010007 	.word	0x00010007

08019b24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8019b24:	b580      	push	{r7, lr}
 8019b26:	b082      	sub	sp, #8
 8019b28:	af00      	add	r7, sp, #0
 8019b2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	691b      	ldr	r3, [r3, #16]
 8019b32:	f003 0302 	and.w	r3, r3, #2
 8019b36:	2b02      	cmp	r3, #2
 8019b38:	d122      	bne.n	8019b80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	68db      	ldr	r3, [r3, #12]
 8019b40:	f003 0302 	and.w	r3, r3, #2
 8019b44:	2b02      	cmp	r3, #2
 8019b46:	d11b      	bne.n	8019b80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	f06f 0202 	mvn.w	r2, #2
 8019b50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	2201      	movs	r2, #1
 8019b56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	699b      	ldr	r3, [r3, #24]
 8019b5e:	f003 0303 	and.w	r3, r3, #3
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d003      	beq.n	8019b6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8019b66:	6878      	ldr	r0, [r7, #4]
 8019b68:	f000 f905 	bl	8019d76 <HAL_TIM_IC_CaptureCallback>
 8019b6c:	e005      	b.n	8019b7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8019b6e:	6878      	ldr	r0, [r7, #4]
 8019b70:	f000 f8f7 	bl	8019d62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019b74:	6878      	ldr	r0, [r7, #4]
 8019b76:	f000 f908 	bl	8019d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	2200      	movs	r2, #0
 8019b7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	691b      	ldr	r3, [r3, #16]
 8019b86:	f003 0304 	and.w	r3, r3, #4
 8019b8a:	2b04      	cmp	r3, #4
 8019b8c:	d122      	bne.n	8019bd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	68db      	ldr	r3, [r3, #12]
 8019b94:	f003 0304 	and.w	r3, r3, #4
 8019b98:	2b04      	cmp	r3, #4
 8019b9a:	d11b      	bne.n	8019bd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	f06f 0204 	mvn.w	r2, #4
 8019ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	2202      	movs	r2, #2
 8019baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	699b      	ldr	r3, [r3, #24]
 8019bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d003      	beq.n	8019bc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019bba:	6878      	ldr	r0, [r7, #4]
 8019bbc:	f000 f8db 	bl	8019d76 <HAL_TIM_IC_CaptureCallback>
 8019bc0:	e005      	b.n	8019bce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019bc2:	6878      	ldr	r0, [r7, #4]
 8019bc4:	f000 f8cd 	bl	8019d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019bc8:	6878      	ldr	r0, [r7, #4]
 8019bca:	f000 f8de 	bl	8019d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	2200      	movs	r2, #0
 8019bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	691b      	ldr	r3, [r3, #16]
 8019bda:	f003 0308 	and.w	r3, r3, #8
 8019bde:	2b08      	cmp	r3, #8
 8019be0:	d122      	bne.n	8019c28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	68db      	ldr	r3, [r3, #12]
 8019be8:	f003 0308 	and.w	r3, r3, #8
 8019bec:	2b08      	cmp	r3, #8
 8019bee:	d11b      	bne.n	8019c28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	f06f 0208 	mvn.w	r2, #8
 8019bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	2204      	movs	r2, #4
 8019bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	69db      	ldr	r3, [r3, #28]
 8019c06:	f003 0303 	and.w	r3, r3, #3
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d003      	beq.n	8019c16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019c0e:	6878      	ldr	r0, [r7, #4]
 8019c10:	f000 f8b1 	bl	8019d76 <HAL_TIM_IC_CaptureCallback>
 8019c14:	e005      	b.n	8019c22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019c16:	6878      	ldr	r0, [r7, #4]
 8019c18:	f000 f8a3 	bl	8019d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019c1c:	6878      	ldr	r0, [r7, #4]
 8019c1e:	f000 f8b4 	bl	8019d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	2200      	movs	r2, #0
 8019c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	691b      	ldr	r3, [r3, #16]
 8019c2e:	f003 0310 	and.w	r3, r3, #16
 8019c32:	2b10      	cmp	r3, #16
 8019c34:	d122      	bne.n	8019c7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	68db      	ldr	r3, [r3, #12]
 8019c3c:	f003 0310 	and.w	r3, r3, #16
 8019c40:	2b10      	cmp	r3, #16
 8019c42:	d11b      	bne.n	8019c7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	f06f 0210 	mvn.w	r2, #16
 8019c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	2208      	movs	r2, #8
 8019c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	69db      	ldr	r3, [r3, #28]
 8019c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d003      	beq.n	8019c6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019c62:	6878      	ldr	r0, [r7, #4]
 8019c64:	f000 f887 	bl	8019d76 <HAL_TIM_IC_CaptureCallback>
 8019c68:	e005      	b.n	8019c76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019c6a:	6878      	ldr	r0, [r7, #4]
 8019c6c:	f000 f879 	bl	8019d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019c70:	6878      	ldr	r0, [r7, #4]
 8019c72:	f000 f88a 	bl	8019d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	2200      	movs	r2, #0
 8019c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	691b      	ldr	r3, [r3, #16]
 8019c82:	f003 0301 	and.w	r3, r3, #1
 8019c86:	2b01      	cmp	r3, #1
 8019c88:	d10e      	bne.n	8019ca8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	68db      	ldr	r3, [r3, #12]
 8019c90:	f003 0301 	and.w	r3, r3, #1
 8019c94:	2b01      	cmp	r3, #1
 8019c96:	d107      	bne.n	8019ca8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	f06f 0201 	mvn.w	r2, #1
 8019ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8019ca2:	6878      	ldr	r0, [r7, #4]
 8019ca4:	f7e7 fcf6 	bl	8001694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	691b      	ldr	r3, [r3, #16]
 8019cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019cb2:	2b80      	cmp	r3, #128	; 0x80
 8019cb4:	d10e      	bne.n	8019cd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	68db      	ldr	r3, [r3, #12]
 8019cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019cc0:	2b80      	cmp	r3, #128	; 0x80
 8019cc2:	d107      	bne.n	8019cd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8019ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8019cce:	6878      	ldr	r0, [r7, #4]
 8019cd0:	f000 f8de 	bl	8019e90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	691b      	ldr	r3, [r3, #16]
 8019cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019ce2:	d10e      	bne.n	8019d02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	68db      	ldr	r3, [r3, #12]
 8019cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019cee:	2b80      	cmp	r3, #128	; 0x80
 8019cf0:	d107      	bne.n	8019d02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	681b      	ldr	r3, [r3, #0]
 8019cf6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8019cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8019cfc:	6878      	ldr	r0, [r7, #4]
 8019cfe:	f000 f8d1 	bl	8019ea4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	691b      	ldr	r3, [r3, #16]
 8019d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019d0c:	2b40      	cmp	r3, #64	; 0x40
 8019d0e:	d10e      	bne.n	8019d2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	68db      	ldr	r3, [r3, #12]
 8019d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019d1a:	2b40      	cmp	r3, #64	; 0x40
 8019d1c:	d107      	bne.n	8019d2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8019d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8019d28:	6878      	ldr	r0, [r7, #4]
 8019d2a:	f000 f838 	bl	8019d9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	691b      	ldr	r3, [r3, #16]
 8019d34:	f003 0320 	and.w	r3, r3, #32
 8019d38:	2b20      	cmp	r3, #32
 8019d3a:	d10e      	bne.n	8019d5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	681b      	ldr	r3, [r3, #0]
 8019d40:	68db      	ldr	r3, [r3, #12]
 8019d42:	f003 0320 	and.w	r3, r3, #32
 8019d46:	2b20      	cmp	r3, #32
 8019d48:	d107      	bne.n	8019d5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	f06f 0220 	mvn.w	r2, #32
 8019d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8019d54:	6878      	ldr	r0, [r7, #4]
 8019d56:	f000 f891 	bl	8019e7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8019d5a:	bf00      	nop
 8019d5c:	3708      	adds	r7, #8
 8019d5e:	46bd      	mov	sp, r7
 8019d60:	bd80      	pop	{r7, pc}

08019d62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8019d62:	b480      	push	{r7}
 8019d64:	b083      	sub	sp, #12
 8019d66:	af00      	add	r7, sp, #0
 8019d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8019d6a:	bf00      	nop
 8019d6c:	370c      	adds	r7, #12
 8019d6e:	46bd      	mov	sp, r7
 8019d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d74:	4770      	bx	lr

08019d76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8019d76:	b480      	push	{r7}
 8019d78:	b083      	sub	sp, #12
 8019d7a:	af00      	add	r7, sp, #0
 8019d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8019d7e:	bf00      	nop
 8019d80:	370c      	adds	r7, #12
 8019d82:	46bd      	mov	sp, r7
 8019d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d88:	4770      	bx	lr

08019d8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8019d8a:	b480      	push	{r7}
 8019d8c:	b083      	sub	sp, #12
 8019d8e:	af00      	add	r7, sp, #0
 8019d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8019d92:	bf00      	nop
 8019d94:	370c      	adds	r7, #12
 8019d96:	46bd      	mov	sp, r7
 8019d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d9c:	4770      	bx	lr

08019d9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8019d9e:	b480      	push	{r7}
 8019da0:	b083      	sub	sp, #12
 8019da2:	af00      	add	r7, sp, #0
 8019da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8019da6:	bf00      	nop
 8019da8:	370c      	adds	r7, #12
 8019daa:	46bd      	mov	sp, r7
 8019dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019db0:	4770      	bx	lr
	...

08019db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8019db4:	b480      	push	{r7}
 8019db6:	b085      	sub	sp, #20
 8019db8:	af00      	add	r7, sp, #0
 8019dba:	6078      	str	r0, [r7, #4]
 8019dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	4a2a      	ldr	r2, [pc, #168]	; (8019e70 <TIM_Base_SetConfig+0xbc>)
 8019dc8:	4293      	cmp	r3, r2
 8019dca:	d003      	beq.n	8019dd4 <TIM_Base_SetConfig+0x20>
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019dd2:	d108      	bne.n	8019de6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8019ddc:	683b      	ldr	r3, [r7, #0]
 8019dde:	685b      	ldr	r3, [r3, #4]
 8019de0:	68fa      	ldr	r2, [r7, #12]
 8019de2:	4313      	orrs	r3, r2
 8019de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	4a21      	ldr	r2, [pc, #132]	; (8019e70 <TIM_Base_SetConfig+0xbc>)
 8019dea:	4293      	cmp	r3, r2
 8019dec:	d00b      	beq.n	8019e06 <TIM_Base_SetConfig+0x52>
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019df4:	d007      	beq.n	8019e06 <TIM_Base_SetConfig+0x52>
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	4a1e      	ldr	r2, [pc, #120]	; (8019e74 <TIM_Base_SetConfig+0xc0>)
 8019dfa:	4293      	cmp	r3, r2
 8019dfc:	d003      	beq.n	8019e06 <TIM_Base_SetConfig+0x52>
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	4a1d      	ldr	r2, [pc, #116]	; (8019e78 <TIM_Base_SetConfig+0xc4>)
 8019e02:	4293      	cmp	r3, r2
 8019e04:	d108      	bne.n	8019e18 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8019e0e:	683b      	ldr	r3, [r7, #0]
 8019e10:	68db      	ldr	r3, [r3, #12]
 8019e12:	68fa      	ldr	r2, [r7, #12]
 8019e14:	4313      	orrs	r3, r2
 8019e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8019e1e:	683b      	ldr	r3, [r7, #0]
 8019e20:	695b      	ldr	r3, [r3, #20]
 8019e22:	4313      	orrs	r3, r2
 8019e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	68fa      	ldr	r2, [r7, #12]
 8019e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8019e2c:	683b      	ldr	r3, [r7, #0]
 8019e2e:	689a      	ldr	r2, [r3, #8]
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8019e34:	683b      	ldr	r3, [r7, #0]
 8019e36:	681a      	ldr	r2, [r3, #0]
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	4a0c      	ldr	r2, [pc, #48]	; (8019e70 <TIM_Base_SetConfig+0xbc>)
 8019e40:	4293      	cmp	r3, r2
 8019e42:	d007      	beq.n	8019e54 <TIM_Base_SetConfig+0xa0>
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	4a0b      	ldr	r2, [pc, #44]	; (8019e74 <TIM_Base_SetConfig+0xc0>)
 8019e48:	4293      	cmp	r3, r2
 8019e4a:	d003      	beq.n	8019e54 <TIM_Base_SetConfig+0xa0>
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	4a0a      	ldr	r2, [pc, #40]	; (8019e78 <TIM_Base_SetConfig+0xc4>)
 8019e50:	4293      	cmp	r3, r2
 8019e52:	d103      	bne.n	8019e5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8019e54:	683b      	ldr	r3, [r7, #0]
 8019e56:	691a      	ldr	r2, [r3, #16]
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	2201      	movs	r2, #1
 8019e60:	615a      	str	r2, [r3, #20]
}
 8019e62:	bf00      	nop
 8019e64:	3714      	adds	r7, #20
 8019e66:	46bd      	mov	sp, r7
 8019e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e6c:	4770      	bx	lr
 8019e6e:	bf00      	nop
 8019e70:	40012c00 	.word	0x40012c00
 8019e74:	40014400 	.word	0x40014400
 8019e78:	40014800 	.word	0x40014800

08019e7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8019e7c:	b480      	push	{r7}
 8019e7e:	b083      	sub	sp, #12
 8019e80:	af00      	add	r7, sp, #0
 8019e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8019e84:	bf00      	nop
 8019e86:	370c      	adds	r7, #12
 8019e88:	46bd      	mov	sp, r7
 8019e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e8e:	4770      	bx	lr

08019e90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8019e90:	b480      	push	{r7}
 8019e92:	b083      	sub	sp, #12
 8019e94:	af00      	add	r7, sp, #0
 8019e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8019e98:	bf00      	nop
 8019e9a:	370c      	adds	r7, #12
 8019e9c:	46bd      	mov	sp, r7
 8019e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ea2:	4770      	bx	lr

08019ea4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8019ea4:	b480      	push	{r7}
 8019ea6:	b083      	sub	sp, #12
 8019ea8:	af00      	add	r7, sp, #0
 8019eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8019eac:	bf00      	nop
 8019eae:	370c      	adds	r7, #12
 8019eb0:	46bd      	mov	sp, r7
 8019eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eb6:	4770      	bx	lr

08019eb8 <LL_RCC_GetUSARTClockSource>:
{
 8019eb8:	b480      	push	{r7}
 8019eba:	b083      	sub	sp, #12
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8019ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019ec4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	4013      	ands	r3, r2
}
 8019ecc:	4618      	mov	r0, r3
 8019ece:	370c      	adds	r7, #12
 8019ed0:	46bd      	mov	sp, r7
 8019ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ed6:	4770      	bx	lr

08019ed8 <LL_RCC_GetLPUARTClockSource>:
{
 8019ed8:	b480      	push	{r7}
 8019eda:	b083      	sub	sp, #12
 8019edc:	af00      	add	r7, sp, #0
 8019ede:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8019ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019ee4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	4013      	ands	r3, r2
}
 8019eec:	4618      	mov	r0, r3
 8019eee:	370c      	adds	r7, #12
 8019ef0:	46bd      	mov	sp, r7
 8019ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ef6:	4770      	bx	lr

08019ef8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8019ef8:	b580      	push	{r7, lr}
 8019efa:	b082      	sub	sp, #8
 8019efc:	af00      	add	r7, sp, #0
 8019efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d101      	bne.n	8019f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8019f06:	2301      	movs	r3, #1
 8019f08:	e042      	b.n	8019f90 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d106      	bne.n	8019f22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	2200      	movs	r2, #0
 8019f18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8019f1c:	6878      	ldr	r0, [r7, #4]
 8019f1e:	f7e8 f943 	bl	80021a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	2224      	movs	r2, #36	; 0x24
 8019f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	681a      	ldr	r2, [r3, #0]
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	f022 0201 	bic.w	r2, r2, #1
 8019f38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8019f3a:	6878      	ldr	r0, [r7, #4]
 8019f3c:	f000 f82c 	bl	8019f98 <UART_SetConfig>
 8019f40:	4603      	mov	r3, r0
 8019f42:	2b01      	cmp	r3, #1
 8019f44:	d101      	bne.n	8019f4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8019f46:	2301      	movs	r3, #1
 8019f48:	e022      	b.n	8019f90 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	d002      	beq.n	8019f58 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8019f52:	6878      	ldr	r0, [r7, #4]
 8019f54:	f000 fa48 	bl	801a3e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	685a      	ldr	r2, [r3, #4]
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8019f66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	689a      	ldr	r2, [r3, #8]
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8019f76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	681a      	ldr	r2, [r3, #0]
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	f042 0201 	orr.w	r2, r2, #1
 8019f86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8019f88:	6878      	ldr	r0, [r7, #4]
 8019f8a:	f000 facf 	bl	801a52c <UART_CheckIdleState>
 8019f8e:	4603      	mov	r3, r0
}
 8019f90:	4618      	mov	r0, r3
 8019f92:	3708      	adds	r7, #8
 8019f94:	46bd      	mov	sp, r7
 8019f96:	bd80      	pop	{r7, pc}

08019f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8019f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019f9c:	b08c      	sub	sp, #48	; 0x30
 8019f9e:	af00      	add	r7, sp, #0
 8019fa0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8019fa2:	2300      	movs	r3, #0
 8019fa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8019fa8:	697b      	ldr	r3, [r7, #20]
 8019faa:	689a      	ldr	r2, [r3, #8]
 8019fac:	697b      	ldr	r3, [r7, #20]
 8019fae:	691b      	ldr	r3, [r3, #16]
 8019fb0:	431a      	orrs	r2, r3
 8019fb2:	697b      	ldr	r3, [r7, #20]
 8019fb4:	695b      	ldr	r3, [r3, #20]
 8019fb6:	431a      	orrs	r2, r3
 8019fb8:	697b      	ldr	r3, [r7, #20]
 8019fba:	69db      	ldr	r3, [r3, #28]
 8019fbc:	4313      	orrs	r3, r2
 8019fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8019fc0:	697b      	ldr	r3, [r7, #20]
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	681a      	ldr	r2, [r3, #0]
 8019fc6:	4baf      	ldr	r3, [pc, #700]	; (801a284 <UART_SetConfig+0x2ec>)
 8019fc8:	4013      	ands	r3, r2
 8019fca:	697a      	ldr	r2, [r7, #20]
 8019fcc:	6812      	ldr	r2, [r2, #0]
 8019fce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019fd0:	430b      	orrs	r3, r1
 8019fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8019fd4:	697b      	ldr	r3, [r7, #20]
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	685b      	ldr	r3, [r3, #4]
 8019fda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8019fde:	697b      	ldr	r3, [r7, #20]
 8019fe0:	68da      	ldr	r2, [r3, #12]
 8019fe2:	697b      	ldr	r3, [r7, #20]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	430a      	orrs	r2, r1
 8019fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8019fea:	697b      	ldr	r3, [r7, #20]
 8019fec:	699b      	ldr	r3, [r3, #24]
 8019fee:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8019ff0:	697b      	ldr	r3, [r7, #20]
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	4aa4      	ldr	r2, [pc, #656]	; (801a288 <UART_SetConfig+0x2f0>)
 8019ff6:	4293      	cmp	r3, r2
 8019ff8:	d004      	beq.n	801a004 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8019ffa:	697b      	ldr	r3, [r7, #20]
 8019ffc:	6a1b      	ldr	r3, [r3, #32]
 8019ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a000:	4313      	orrs	r3, r2
 801a002:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801a004:	697b      	ldr	r3, [r7, #20]
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	689b      	ldr	r3, [r3, #8]
 801a00a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801a00e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801a012:	697a      	ldr	r2, [r7, #20]
 801a014:	6812      	ldr	r2, [r2, #0]
 801a016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a018:	430b      	orrs	r3, r1
 801a01a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801a01c:	697b      	ldr	r3, [r7, #20]
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a022:	f023 010f 	bic.w	r1, r3, #15
 801a026:	697b      	ldr	r3, [r7, #20]
 801a028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a02a:	697b      	ldr	r3, [r7, #20]
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	430a      	orrs	r2, r1
 801a030:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801a032:	697b      	ldr	r3, [r7, #20]
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	4a95      	ldr	r2, [pc, #596]	; (801a28c <UART_SetConfig+0x2f4>)
 801a038:	4293      	cmp	r3, r2
 801a03a:	d125      	bne.n	801a088 <UART_SetConfig+0xf0>
 801a03c:	2003      	movs	r0, #3
 801a03e:	f7ff ff3b 	bl	8019eb8 <LL_RCC_GetUSARTClockSource>
 801a042:	4603      	mov	r3, r0
 801a044:	2b03      	cmp	r3, #3
 801a046:	d81b      	bhi.n	801a080 <UART_SetConfig+0xe8>
 801a048:	a201      	add	r2, pc, #4	; (adr r2, 801a050 <UART_SetConfig+0xb8>)
 801a04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a04e:	bf00      	nop
 801a050:	0801a061 	.word	0x0801a061
 801a054:	0801a071 	.word	0x0801a071
 801a058:	0801a069 	.word	0x0801a069
 801a05c:	0801a079 	.word	0x0801a079
 801a060:	2301      	movs	r3, #1
 801a062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a066:	e042      	b.n	801a0ee <UART_SetConfig+0x156>
 801a068:	2302      	movs	r3, #2
 801a06a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a06e:	e03e      	b.n	801a0ee <UART_SetConfig+0x156>
 801a070:	2304      	movs	r3, #4
 801a072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a076:	e03a      	b.n	801a0ee <UART_SetConfig+0x156>
 801a078:	2308      	movs	r3, #8
 801a07a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a07e:	e036      	b.n	801a0ee <UART_SetConfig+0x156>
 801a080:	2310      	movs	r3, #16
 801a082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a086:	e032      	b.n	801a0ee <UART_SetConfig+0x156>
 801a088:	697b      	ldr	r3, [r7, #20]
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	4a7e      	ldr	r2, [pc, #504]	; (801a288 <UART_SetConfig+0x2f0>)
 801a08e:	4293      	cmp	r3, r2
 801a090:	d12a      	bne.n	801a0e8 <UART_SetConfig+0x150>
 801a092:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801a096:	f7ff ff1f 	bl	8019ed8 <LL_RCC_GetLPUARTClockSource>
 801a09a:	4603      	mov	r3, r0
 801a09c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801a0a0:	d01a      	beq.n	801a0d8 <UART_SetConfig+0x140>
 801a0a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801a0a6:	d81b      	bhi.n	801a0e0 <UART_SetConfig+0x148>
 801a0a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a0ac:	d00c      	beq.n	801a0c8 <UART_SetConfig+0x130>
 801a0ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a0b2:	d815      	bhi.n	801a0e0 <UART_SetConfig+0x148>
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d003      	beq.n	801a0c0 <UART_SetConfig+0x128>
 801a0b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a0bc:	d008      	beq.n	801a0d0 <UART_SetConfig+0x138>
 801a0be:	e00f      	b.n	801a0e0 <UART_SetConfig+0x148>
 801a0c0:	2300      	movs	r3, #0
 801a0c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a0c6:	e012      	b.n	801a0ee <UART_SetConfig+0x156>
 801a0c8:	2302      	movs	r3, #2
 801a0ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a0ce:	e00e      	b.n	801a0ee <UART_SetConfig+0x156>
 801a0d0:	2304      	movs	r3, #4
 801a0d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a0d6:	e00a      	b.n	801a0ee <UART_SetConfig+0x156>
 801a0d8:	2308      	movs	r3, #8
 801a0da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a0de:	e006      	b.n	801a0ee <UART_SetConfig+0x156>
 801a0e0:	2310      	movs	r3, #16
 801a0e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a0e6:	e002      	b.n	801a0ee <UART_SetConfig+0x156>
 801a0e8:	2310      	movs	r3, #16
 801a0ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801a0ee:	697b      	ldr	r3, [r7, #20]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	4a65      	ldr	r2, [pc, #404]	; (801a288 <UART_SetConfig+0x2f0>)
 801a0f4:	4293      	cmp	r3, r2
 801a0f6:	f040 8097 	bne.w	801a228 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801a0fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a0fe:	2b08      	cmp	r3, #8
 801a100:	d823      	bhi.n	801a14a <UART_SetConfig+0x1b2>
 801a102:	a201      	add	r2, pc, #4	; (adr r2, 801a108 <UART_SetConfig+0x170>)
 801a104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a108:	0801a12d 	.word	0x0801a12d
 801a10c:	0801a14b 	.word	0x0801a14b
 801a110:	0801a135 	.word	0x0801a135
 801a114:	0801a14b 	.word	0x0801a14b
 801a118:	0801a13b 	.word	0x0801a13b
 801a11c:	0801a14b 	.word	0x0801a14b
 801a120:	0801a14b 	.word	0x0801a14b
 801a124:	0801a14b 	.word	0x0801a14b
 801a128:	0801a143 	.word	0x0801a143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a12c:	f7fe ff00 	bl	8018f30 <HAL_RCC_GetPCLK1Freq>
 801a130:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a132:	e010      	b.n	801a156 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801a134:	4b56      	ldr	r3, [pc, #344]	; (801a290 <UART_SetConfig+0x2f8>)
 801a136:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a138:	e00d      	b.n	801a156 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a13a:	f7fe fe79 	bl	8018e30 <HAL_RCC_GetSysClockFreq>
 801a13e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a140:	e009      	b.n	801a156 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a146:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a148:	e005      	b.n	801a156 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 801a14a:	2300      	movs	r3, #0
 801a14c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801a14e:	2301      	movs	r3, #1
 801a150:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801a154:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801a156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a158:	2b00      	cmp	r3, #0
 801a15a:	f000 812b 	beq.w	801a3b4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801a15e:	697b      	ldr	r3, [r7, #20]
 801a160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a162:	4a4c      	ldr	r2, [pc, #304]	; (801a294 <UART_SetConfig+0x2fc>)
 801a164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a168:	461a      	mov	r2, r3
 801a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a16c:	fbb3 f3f2 	udiv	r3, r3, r2
 801a170:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801a172:	697b      	ldr	r3, [r7, #20]
 801a174:	685a      	ldr	r2, [r3, #4]
 801a176:	4613      	mov	r3, r2
 801a178:	005b      	lsls	r3, r3, #1
 801a17a:	4413      	add	r3, r2
 801a17c:	69ba      	ldr	r2, [r7, #24]
 801a17e:	429a      	cmp	r2, r3
 801a180:	d305      	bcc.n	801a18e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801a182:	697b      	ldr	r3, [r7, #20]
 801a184:	685b      	ldr	r3, [r3, #4]
 801a186:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801a188:	69ba      	ldr	r2, [r7, #24]
 801a18a:	429a      	cmp	r2, r3
 801a18c:	d903      	bls.n	801a196 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801a18e:	2301      	movs	r3, #1
 801a190:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801a194:	e10e      	b.n	801a3b4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a198:	2200      	movs	r2, #0
 801a19a:	60bb      	str	r3, [r7, #8]
 801a19c:	60fa      	str	r2, [r7, #12]
 801a19e:	697b      	ldr	r3, [r7, #20]
 801a1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1a2:	4a3c      	ldr	r2, [pc, #240]	; (801a294 <UART_SetConfig+0x2fc>)
 801a1a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a1a8:	b29b      	uxth	r3, r3
 801a1aa:	2200      	movs	r2, #0
 801a1ac:	603b      	str	r3, [r7, #0]
 801a1ae:	607a      	str	r2, [r7, #4]
 801a1b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a1b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801a1b8:	f7e6 fd1e 	bl	8000bf8 <__aeabi_uldivmod>
 801a1bc:	4602      	mov	r2, r0
 801a1be:	460b      	mov	r3, r1
 801a1c0:	4610      	mov	r0, r2
 801a1c2:	4619      	mov	r1, r3
 801a1c4:	f04f 0200 	mov.w	r2, #0
 801a1c8:	f04f 0300 	mov.w	r3, #0
 801a1cc:	020b      	lsls	r3, r1, #8
 801a1ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801a1d2:	0202      	lsls	r2, r0, #8
 801a1d4:	6979      	ldr	r1, [r7, #20]
 801a1d6:	6849      	ldr	r1, [r1, #4]
 801a1d8:	0849      	lsrs	r1, r1, #1
 801a1da:	2000      	movs	r0, #0
 801a1dc:	460c      	mov	r4, r1
 801a1de:	4605      	mov	r5, r0
 801a1e0:	eb12 0804 	adds.w	r8, r2, r4
 801a1e4:	eb43 0905 	adc.w	r9, r3, r5
 801a1e8:	697b      	ldr	r3, [r7, #20]
 801a1ea:	685b      	ldr	r3, [r3, #4]
 801a1ec:	2200      	movs	r2, #0
 801a1ee:	469a      	mov	sl, r3
 801a1f0:	4693      	mov	fp, r2
 801a1f2:	4652      	mov	r2, sl
 801a1f4:	465b      	mov	r3, fp
 801a1f6:	4640      	mov	r0, r8
 801a1f8:	4649      	mov	r1, r9
 801a1fa:	f7e6 fcfd 	bl	8000bf8 <__aeabi_uldivmod>
 801a1fe:	4602      	mov	r2, r0
 801a200:	460b      	mov	r3, r1
 801a202:	4613      	mov	r3, r2
 801a204:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801a206:	6a3b      	ldr	r3, [r7, #32]
 801a208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801a20c:	d308      	bcc.n	801a220 <UART_SetConfig+0x288>
 801a20e:	6a3b      	ldr	r3, [r7, #32]
 801a210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a214:	d204      	bcs.n	801a220 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 801a216:	697b      	ldr	r3, [r7, #20]
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	6a3a      	ldr	r2, [r7, #32]
 801a21c:	60da      	str	r2, [r3, #12]
 801a21e:	e0c9      	b.n	801a3b4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801a220:	2301      	movs	r3, #1
 801a222:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801a226:	e0c5      	b.n	801a3b4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801a228:	697b      	ldr	r3, [r7, #20]
 801a22a:	69db      	ldr	r3, [r3, #28]
 801a22c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a230:	d16d      	bne.n	801a30e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801a232:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a236:	3b01      	subs	r3, #1
 801a238:	2b07      	cmp	r3, #7
 801a23a:	d82d      	bhi.n	801a298 <UART_SetConfig+0x300>
 801a23c:	a201      	add	r2, pc, #4	; (adr r2, 801a244 <UART_SetConfig+0x2ac>)
 801a23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a242:	bf00      	nop
 801a244:	0801a265 	.word	0x0801a265
 801a248:	0801a26d 	.word	0x0801a26d
 801a24c:	0801a299 	.word	0x0801a299
 801a250:	0801a273 	.word	0x0801a273
 801a254:	0801a299 	.word	0x0801a299
 801a258:	0801a299 	.word	0x0801a299
 801a25c:	0801a299 	.word	0x0801a299
 801a260:	0801a27b 	.word	0x0801a27b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a264:	f7fe fe7a 	bl	8018f5c <HAL_RCC_GetPCLK2Freq>
 801a268:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a26a:	e01b      	b.n	801a2a4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801a26c:	4b08      	ldr	r3, [pc, #32]	; (801a290 <UART_SetConfig+0x2f8>)
 801a26e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a270:	e018      	b.n	801a2a4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a272:	f7fe fddd 	bl	8018e30 <HAL_RCC_GetSysClockFreq>
 801a276:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a278:	e014      	b.n	801a2a4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a27a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a27e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a280:	e010      	b.n	801a2a4 <UART_SetConfig+0x30c>
 801a282:	bf00      	nop
 801a284:	cfff69f3 	.word	0xcfff69f3
 801a288:	40008000 	.word	0x40008000
 801a28c:	40013800 	.word	0x40013800
 801a290:	00f42400 	.word	0x00f42400
 801a294:	0801dac0 	.word	0x0801dac0
      default:
        pclk = 0U;
 801a298:	2300      	movs	r3, #0
 801a29a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801a29c:	2301      	movs	r3, #1
 801a29e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801a2a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	f000 8084 	beq.w	801a3b4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a2ac:	697b      	ldr	r3, [r7, #20]
 801a2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2b0:	4a4b      	ldr	r2, [pc, #300]	; (801a3e0 <UART_SetConfig+0x448>)
 801a2b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a2b6:	461a      	mov	r2, r3
 801a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2ba:	fbb3 f3f2 	udiv	r3, r3, r2
 801a2be:	005a      	lsls	r2, r3, #1
 801a2c0:	697b      	ldr	r3, [r7, #20]
 801a2c2:	685b      	ldr	r3, [r3, #4]
 801a2c4:	085b      	lsrs	r3, r3, #1
 801a2c6:	441a      	add	r2, r3
 801a2c8:	697b      	ldr	r3, [r7, #20]
 801a2ca:	685b      	ldr	r3, [r3, #4]
 801a2cc:	fbb2 f3f3 	udiv	r3, r2, r3
 801a2d0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a2d2:	6a3b      	ldr	r3, [r7, #32]
 801a2d4:	2b0f      	cmp	r3, #15
 801a2d6:	d916      	bls.n	801a306 <UART_SetConfig+0x36e>
 801a2d8:	6a3b      	ldr	r3, [r7, #32]
 801a2da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a2de:	d212      	bcs.n	801a306 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801a2e0:	6a3b      	ldr	r3, [r7, #32]
 801a2e2:	b29b      	uxth	r3, r3
 801a2e4:	f023 030f 	bic.w	r3, r3, #15
 801a2e8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801a2ea:	6a3b      	ldr	r3, [r7, #32]
 801a2ec:	085b      	lsrs	r3, r3, #1
 801a2ee:	b29b      	uxth	r3, r3
 801a2f0:	f003 0307 	and.w	r3, r3, #7
 801a2f4:	b29a      	uxth	r2, r3
 801a2f6:	8bfb      	ldrh	r3, [r7, #30]
 801a2f8:	4313      	orrs	r3, r2
 801a2fa:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801a2fc:	697b      	ldr	r3, [r7, #20]
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	8bfa      	ldrh	r2, [r7, #30]
 801a302:	60da      	str	r2, [r3, #12]
 801a304:	e056      	b.n	801a3b4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801a306:	2301      	movs	r3, #1
 801a308:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801a30c:	e052      	b.n	801a3b4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801a30e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a312:	3b01      	subs	r3, #1
 801a314:	2b07      	cmp	r3, #7
 801a316:	d822      	bhi.n	801a35e <UART_SetConfig+0x3c6>
 801a318:	a201      	add	r2, pc, #4	; (adr r2, 801a320 <UART_SetConfig+0x388>)
 801a31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a31e:	bf00      	nop
 801a320:	0801a341 	.word	0x0801a341
 801a324:	0801a349 	.word	0x0801a349
 801a328:	0801a35f 	.word	0x0801a35f
 801a32c:	0801a34f 	.word	0x0801a34f
 801a330:	0801a35f 	.word	0x0801a35f
 801a334:	0801a35f 	.word	0x0801a35f
 801a338:	0801a35f 	.word	0x0801a35f
 801a33c:	0801a357 	.word	0x0801a357
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a340:	f7fe fe0c 	bl	8018f5c <HAL_RCC_GetPCLK2Freq>
 801a344:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a346:	e010      	b.n	801a36a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801a348:	4b26      	ldr	r3, [pc, #152]	; (801a3e4 <UART_SetConfig+0x44c>)
 801a34a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a34c:	e00d      	b.n	801a36a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a34e:	f7fe fd6f 	bl	8018e30 <HAL_RCC_GetSysClockFreq>
 801a352:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a354:	e009      	b.n	801a36a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a35a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a35c:	e005      	b.n	801a36a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801a35e:	2300      	movs	r3, #0
 801a360:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801a362:	2301      	movs	r3, #1
 801a364:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801a368:	bf00      	nop
    }

    if (pclk != 0U)
 801a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d021      	beq.n	801a3b4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a370:	697b      	ldr	r3, [r7, #20]
 801a372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a374:	4a1a      	ldr	r2, [pc, #104]	; (801a3e0 <UART_SetConfig+0x448>)
 801a376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a37a:	461a      	mov	r2, r3
 801a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a37e:	fbb3 f2f2 	udiv	r2, r3, r2
 801a382:	697b      	ldr	r3, [r7, #20]
 801a384:	685b      	ldr	r3, [r3, #4]
 801a386:	085b      	lsrs	r3, r3, #1
 801a388:	441a      	add	r2, r3
 801a38a:	697b      	ldr	r3, [r7, #20]
 801a38c:	685b      	ldr	r3, [r3, #4]
 801a38e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a392:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a394:	6a3b      	ldr	r3, [r7, #32]
 801a396:	2b0f      	cmp	r3, #15
 801a398:	d909      	bls.n	801a3ae <UART_SetConfig+0x416>
 801a39a:	6a3b      	ldr	r3, [r7, #32]
 801a39c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a3a0:	d205      	bcs.n	801a3ae <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801a3a2:	6a3b      	ldr	r3, [r7, #32]
 801a3a4:	b29a      	uxth	r2, r3
 801a3a6:	697b      	ldr	r3, [r7, #20]
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	60da      	str	r2, [r3, #12]
 801a3ac:	e002      	b.n	801a3b4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801a3ae:	2301      	movs	r3, #1
 801a3b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801a3b4:	697b      	ldr	r3, [r7, #20]
 801a3b6:	2201      	movs	r2, #1
 801a3b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801a3bc:	697b      	ldr	r3, [r7, #20]
 801a3be:	2201      	movs	r2, #1
 801a3c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801a3c4:	697b      	ldr	r3, [r7, #20]
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801a3ca:	697b      	ldr	r3, [r7, #20]
 801a3cc:	2200      	movs	r2, #0
 801a3ce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801a3d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801a3d4:	4618      	mov	r0, r3
 801a3d6:	3730      	adds	r7, #48	; 0x30
 801a3d8:	46bd      	mov	sp, r7
 801a3da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a3de:	bf00      	nop
 801a3e0:	0801dac0 	.word	0x0801dac0
 801a3e4:	00f42400 	.word	0x00f42400

0801a3e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801a3e8:	b480      	push	{r7}
 801a3ea:	b083      	sub	sp, #12
 801a3ec:	af00      	add	r7, sp, #0
 801a3ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3f4:	f003 0301 	and.w	r3, r3, #1
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d00a      	beq.n	801a412 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	685b      	ldr	r3, [r3, #4]
 801a402:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	430a      	orrs	r2, r1
 801a410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a416:	f003 0302 	and.w	r3, r3, #2
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d00a      	beq.n	801a434 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	685b      	ldr	r3, [r3, #4]
 801a424:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	430a      	orrs	r2, r1
 801a432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a438:	f003 0304 	and.w	r3, r3, #4
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d00a      	beq.n	801a456 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	685b      	ldr	r3, [r3, #4]
 801a446:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	430a      	orrs	r2, r1
 801a454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a45a:	f003 0308 	and.w	r3, r3, #8
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d00a      	beq.n	801a478 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	685b      	ldr	r3, [r3, #4]
 801a468:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	430a      	orrs	r2, r1
 801a476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a47c:	f003 0310 	and.w	r3, r3, #16
 801a480:	2b00      	cmp	r3, #0
 801a482:	d00a      	beq.n	801a49a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	689b      	ldr	r3, [r3, #8]
 801a48a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	681b      	ldr	r3, [r3, #0]
 801a496:	430a      	orrs	r2, r1
 801a498:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a49e:	f003 0320 	and.w	r3, r3, #32
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d00a      	beq.n	801a4bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	689b      	ldr	r3, [r3, #8]
 801a4ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	430a      	orrs	r2, r1
 801a4ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d01a      	beq.n	801a4fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	685b      	ldr	r3, [r3, #4]
 801a4ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	430a      	orrs	r2, r1
 801a4dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a4e6:	d10a      	bne.n	801a4fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	685b      	ldr	r3, [r3, #4]
 801a4ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	430a      	orrs	r2, r1
 801a4fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a506:	2b00      	cmp	r3, #0
 801a508:	d00a      	beq.n	801a520 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	685b      	ldr	r3, [r3, #4]
 801a510:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	430a      	orrs	r2, r1
 801a51e:	605a      	str	r2, [r3, #4]
  }
}
 801a520:	bf00      	nop
 801a522:	370c      	adds	r7, #12
 801a524:	46bd      	mov	sp, r7
 801a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a52a:	4770      	bx	lr

0801a52c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801a52c:	b580      	push	{r7, lr}
 801a52e:	b086      	sub	sp, #24
 801a530:	af02      	add	r7, sp, #8
 801a532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	2200      	movs	r2, #0
 801a538:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801a53c:	f7fb ff40 	bl	80163c0 <HAL_GetTick>
 801a540:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	681b      	ldr	r3, [r3, #0]
 801a546:	681b      	ldr	r3, [r3, #0]
 801a548:	f003 0308 	and.w	r3, r3, #8
 801a54c:	2b08      	cmp	r3, #8
 801a54e:	d10e      	bne.n	801a56e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801a554:	9300      	str	r3, [sp, #0]
 801a556:	68fb      	ldr	r3, [r7, #12]
 801a558:	2200      	movs	r2, #0
 801a55a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a55e:	6878      	ldr	r0, [r7, #4]
 801a560:	f000 f832 	bl	801a5c8 <UART_WaitOnFlagUntilTimeout>
 801a564:	4603      	mov	r3, r0
 801a566:	2b00      	cmp	r3, #0
 801a568:	d001      	beq.n	801a56e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a56a:	2303      	movs	r3, #3
 801a56c:	e028      	b.n	801a5c0 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	f003 0304 	and.w	r3, r3, #4
 801a578:	2b04      	cmp	r3, #4
 801a57a:	d10e      	bne.n	801a59a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a57c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801a580:	9300      	str	r3, [sp, #0]
 801a582:	68fb      	ldr	r3, [r7, #12]
 801a584:	2200      	movs	r2, #0
 801a586:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801a58a:	6878      	ldr	r0, [r7, #4]
 801a58c:	f000 f81c 	bl	801a5c8 <UART_WaitOnFlagUntilTimeout>
 801a590:	4603      	mov	r3, r0
 801a592:	2b00      	cmp	r3, #0
 801a594:	d001      	beq.n	801a59a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a596:	2303      	movs	r3, #3
 801a598:	e012      	b.n	801a5c0 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	2220      	movs	r2, #32
 801a59e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	2220      	movs	r2, #32
 801a5a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	2200      	movs	r2, #0
 801a5ae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	2200      	movs	r2, #0
 801a5b4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	2200      	movs	r2, #0
 801a5ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801a5be:	2300      	movs	r3, #0
}
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	3710      	adds	r7, #16
 801a5c4:	46bd      	mov	sp, r7
 801a5c6:	bd80      	pop	{r7, pc}

0801a5c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b09c      	sub	sp, #112	; 0x70
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	60f8      	str	r0, [r7, #12]
 801a5d0:	60b9      	str	r1, [r7, #8]
 801a5d2:	603b      	str	r3, [r7, #0]
 801a5d4:	4613      	mov	r3, r2
 801a5d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a5d8:	e0a9      	b.n	801a72e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a5da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a5e0:	f000 80a5 	beq.w	801a72e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a5e4:	f7fb feec 	bl	80163c0 <HAL_GetTick>
 801a5e8:	4602      	mov	r2, r0
 801a5ea:	683b      	ldr	r3, [r7, #0]
 801a5ec:	1ad3      	subs	r3, r2, r3
 801a5ee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801a5f0:	429a      	cmp	r2, r3
 801a5f2:	d302      	bcc.n	801a5fa <UART_WaitOnFlagUntilTimeout+0x32>
 801a5f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d140      	bne.n	801a67c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a602:	e853 3f00 	ldrex	r3, [r3]
 801a606:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801a608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a60a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801a60e:	667b      	str	r3, [r7, #100]	; 0x64
 801a610:	68fb      	ldr	r3, [r7, #12]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	461a      	mov	r2, r3
 801a616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a618:	65fb      	str	r3, [r7, #92]	; 0x5c
 801a61a:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a61c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801a61e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a620:	e841 2300 	strex	r3, r2, [r1]
 801a624:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801a626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a628:	2b00      	cmp	r3, #0
 801a62a:	d1e6      	bne.n	801a5fa <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a62c:	68fb      	ldr	r3, [r7, #12]
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	3308      	adds	r3, #8
 801a632:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a636:	e853 3f00 	ldrex	r3, [r3]
 801a63a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801a63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a63e:	f023 0301 	bic.w	r3, r3, #1
 801a642:	663b      	str	r3, [r7, #96]	; 0x60
 801a644:	68fb      	ldr	r3, [r7, #12]
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	3308      	adds	r3, #8
 801a64a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801a64c:	64ba      	str	r2, [r7, #72]	; 0x48
 801a64e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a650:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801a652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a654:	e841 2300 	strex	r3, r2, [r1]
 801a658:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801a65a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d1e5      	bne.n	801a62c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	2220      	movs	r2, #32
 801a664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	2220      	movs	r2, #32
 801a66c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 801a670:	68fb      	ldr	r3, [r7, #12]
 801a672:	2200      	movs	r2, #0
 801a674:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 801a678:	2303      	movs	r3, #3
 801a67a:	e069      	b.n	801a750 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801a67c:	68fb      	ldr	r3, [r7, #12]
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	f003 0304 	and.w	r3, r3, #4
 801a686:	2b00      	cmp	r3, #0
 801a688:	d051      	beq.n	801a72e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801a68a:	68fb      	ldr	r3, [r7, #12]
 801a68c:	681b      	ldr	r3, [r3, #0]
 801a68e:	69db      	ldr	r3, [r3, #28]
 801a690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a698:	d149      	bne.n	801a72e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a6a2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801a6a4:	68fb      	ldr	r3, [r7, #12]
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6ac:	e853 3f00 	ldrex	r3, [r3]
 801a6b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801a6b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 801a6ba:	68fb      	ldr	r3, [r7, #12]
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	461a      	mov	r2, r3
 801a6c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a6c2:	637b      	str	r3, [r7, #52]	; 0x34
 801a6c4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a6c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a6ca:	e841 2300 	strex	r3, r2, [r1]
 801a6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801a6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d1e6      	bne.n	801a6a4 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a6d6:	68fb      	ldr	r3, [r7, #12]
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	3308      	adds	r3, #8
 801a6dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6de:	697b      	ldr	r3, [r7, #20]
 801a6e0:	e853 3f00 	ldrex	r3, [r3]
 801a6e4:	613b      	str	r3, [r7, #16]
   return(result);
 801a6e6:	693b      	ldr	r3, [r7, #16]
 801a6e8:	f023 0301 	bic.w	r3, r3, #1
 801a6ec:	66bb      	str	r3, [r7, #104]	; 0x68
 801a6ee:	68fb      	ldr	r3, [r7, #12]
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	3308      	adds	r3, #8
 801a6f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a6f6:	623a      	str	r2, [r7, #32]
 801a6f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6fa:	69f9      	ldr	r1, [r7, #28]
 801a6fc:	6a3a      	ldr	r2, [r7, #32]
 801a6fe:	e841 2300 	strex	r3, r2, [r1]
 801a702:	61bb      	str	r3, [r7, #24]
   return(result);
 801a704:	69bb      	ldr	r3, [r7, #24]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d1e5      	bne.n	801a6d6 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	2220      	movs	r2, #32
 801a70e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 801a712:	68fb      	ldr	r3, [r7, #12]
 801a714:	2220      	movs	r2, #32
 801a716:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	2220      	movs	r2, #32
 801a71e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a722:	68fb      	ldr	r3, [r7, #12]
 801a724:	2200      	movs	r2, #0
 801a726:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801a72a:	2303      	movs	r3, #3
 801a72c:	e010      	b.n	801a750 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	69da      	ldr	r2, [r3, #28]
 801a734:	68bb      	ldr	r3, [r7, #8]
 801a736:	4013      	ands	r3, r2
 801a738:	68ba      	ldr	r2, [r7, #8]
 801a73a:	429a      	cmp	r2, r3
 801a73c:	bf0c      	ite	eq
 801a73e:	2301      	moveq	r3, #1
 801a740:	2300      	movne	r3, #0
 801a742:	b2db      	uxtb	r3, r3
 801a744:	461a      	mov	r2, r3
 801a746:	79fb      	ldrb	r3, [r7, #7]
 801a748:	429a      	cmp	r2, r3
 801a74a:	f43f af46 	beq.w	801a5da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801a74e:	2300      	movs	r3, #0
}
 801a750:	4618      	mov	r0, r3
 801a752:	3770      	adds	r7, #112	; 0x70
 801a754:	46bd      	mov	sp, r7
 801a756:	bd80      	pop	{r7, pc}

0801a758 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a758:	b480      	push	{r7}
 801a75a:	b085      	sub	sp, #20
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801a766:	2b01      	cmp	r3, #1
 801a768:	d101      	bne.n	801a76e <HAL_UARTEx_DisableFifoMode+0x16>
 801a76a:	2302      	movs	r3, #2
 801a76c:	e027      	b.n	801a7be <HAL_UARTEx_DisableFifoMode+0x66>
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	2201      	movs	r2, #1
 801a772:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	2224      	movs	r2, #36	; 0x24
 801a77a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	681b      	ldr	r3, [r3, #0]
 801a78a:	681a      	ldr	r2, [r3, #0]
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	681b      	ldr	r3, [r3, #0]
 801a790:	f022 0201 	bic.w	r2, r2, #1
 801a794:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a796:	68fb      	ldr	r3, [r7, #12]
 801a798:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801a79c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	2200      	movs	r2, #0
 801a7a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	68fa      	ldr	r2, [r7, #12]
 801a7aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	2220      	movs	r2, #32
 801a7b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	2200      	movs	r2, #0
 801a7b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801a7bc:	2300      	movs	r3, #0
}
 801a7be:	4618      	mov	r0, r3
 801a7c0:	3714      	adds	r7, #20
 801a7c2:	46bd      	mov	sp, r7
 801a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7c8:	4770      	bx	lr

0801a7ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a7ca:	b580      	push	{r7, lr}
 801a7cc:	b084      	sub	sp, #16
 801a7ce:	af00      	add	r7, sp, #0
 801a7d0:	6078      	str	r0, [r7, #4]
 801a7d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801a7da:	2b01      	cmp	r3, #1
 801a7dc:	d101      	bne.n	801a7e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a7de:	2302      	movs	r3, #2
 801a7e0:	e02d      	b.n	801a83e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	2201      	movs	r2, #1
 801a7e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	2224      	movs	r2, #36	; 0x24
 801a7ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	681b      	ldr	r3, [r3, #0]
 801a7fe:	681a      	ldr	r2, [r3, #0]
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	f022 0201 	bic.w	r2, r2, #1
 801a808:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	689b      	ldr	r3, [r3, #8]
 801a810:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	683a      	ldr	r2, [r7, #0]
 801a81a:	430a      	orrs	r2, r1
 801a81c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a81e:	6878      	ldr	r0, [r7, #4]
 801a820:	f000 f850 	bl	801a8c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	68fa      	ldr	r2, [r7, #12]
 801a82a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	2220      	movs	r2, #32
 801a830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	2200      	movs	r2, #0
 801a838:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801a83c:	2300      	movs	r3, #0
}
 801a83e:	4618      	mov	r0, r3
 801a840:	3710      	adds	r7, #16
 801a842:	46bd      	mov	sp, r7
 801a844:	bd80      	pop	{r7, pc}

0801a846 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a846:	b580      	push	{r7, lr}
 801a848:	b084      	sub	sp, #16
 801a84a:	af00      	add	r7, sp, #0
 801a84c:	6078      	str	r0, [r7, #4]
 801a84e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801a856:	2b01      	cmp	r3, #1
 801a858:	d101      	bne.n	801a85e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a85a:	2302      	movs	r3, #2
 801a85c:	e02d      	b.n	801a8ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	2201      	movs	r2, #1
 801a862:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	2224      	movs	r2, #36	; 0x24
 801a86a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	681a      	ldr	r2, [r3, #0]
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	f022 0201 	bic.w	r2, r2, #1
 801a884:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	681b      	ldr	r3, [r3, #0]
 801a88a:	689b      	ldr	r3, [r3, #8]
 801a88c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	683a      	ldr	r2, [r7, #0]
 801a896:	430a      	orrs	r2, r1
 801a898:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a89a:	6878      	ldr	r0, [r7, #4]
 801a89c:	f000 f812 	bl	801a8c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	68fa      	ldr	r2, [r7, #12]
 801a8a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	2220      	movs	r2, #32
 801a8ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	2200      	movs	r2, #0
 801a8b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801a8b8:	2300      	movs	r3, #0
}
 801a8ba:	4618      	mov	r0, r3
 801a8bc:	3710      	adds	r7, #16
 801a8be:	46bd      	mov	sp, r7
 801a8c0:	bd80      	pop	{r7, pc}
	...

0801a8c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801a8c4:	b480      	push	{r7}
 801a8c6:	b085      	sub	sp, #20
 801a8c8:	af00      	add	r7, sp, #0
 801a8ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d108      	bne.n	801a8e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	2201      	movs	r2, #1
 801a8d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	2201      	movs	r2, #1
 801a8e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801a8e4:	e031      	b.n	801a94a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801a8e6:	2308      	movs	r3, #8
 801a8e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801a8ea:	2308      	movs	r3, #8
 801a8ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	689b      	ldr	r3, [r3, #8]
 801a8f4:	0e5b      	lsrs	r3, r3, #25
 801a8f6:	b2db      	uxtb	r3, r3
 801a8f8:	f003 0307 	and.w	r3, r3, #7
 801a8fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	689b      	ldr	r3, [r3, #8]
 801a904:	0f5b      	lsrs	r3, r3, #29
 801a906:	b2db      	uxtb	r3, r3
 801a908:	f003 0307 	and.w	r3, r3, #7
 801a90c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a90e:	7bbb      	ldrb	r3, [r7, #14]
 801a910:	7b3a      	ldrb	r2, [r7, #12]
 801a912:	4911      	ldr	r1, [pc, #68]	; (801a958 <UARTEx_SetNbDataToProcess+0x94>)
 801a914:	5c8a      	ldrb	r2, [r1, r2]
 801a916:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801a91a:	7b3a      	ldrb	r2, [r7, #12]
 801a91c:	490f      	ldr	r1, [pc, #60]	; (801a95c <UARTEx_SetNbDataToProcess+0x98>)
 801a91e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a920:	fb93 f3f2 	sdiv	r3, r3, r2
 801a924:	b29a      	uxth	r2, r3
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a92c:	7bfb      	ldrb	r3, [r7, #15]
 801a92e:	7b7a      	ldrb	r2, [r7, #13]
 801a930:	4909      	ldr	r1, [pc, #36]	; (801a958 <UARTEx_SetNbDataToProcess+0x94>)
 801a932:	5c8a      	ldrb	r2, [r1, r2]
 801a934:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801a938:	7b7a      	ldrb	r2, [r7, #13]
 801a93a:	4908      	ldr	r1, [pc, #32]	; (801a95c <UARTEx_SetNbDataToProcess+0x98>)
 801a93c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a93e:	fb93 f3f2 	sdiv	r3, r3, r2
 801a942:	b29a      	uxth	r2, r3
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801a94a:	bf00      	nop
 801a94c:	3714      	adds	r7, #20
 801a94e:	46bd      	mov	sp, r7
 801a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a954:	4770      	bx	lr
 801a956:	bf00      	nop
 801a958:	0801dad8 	.word	0x0801dad8
 801a95c:	0801dae0 	.word	0x0801dae0

0801a960 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801a960:	b480      	push	{r7}
 801a962:	b085      	sub	sp, #20
 801a964:	af00      	add	r7, sp, #0
 801a966:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801a968:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801a96c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801a974:	b29a      	uxth	r2, r3
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	b29b      	uxth	r3, r3
 801a97a:	43db      	mvns	r3, r3
 801a97c:	b29b      	uxth	r3, r3
 801a97e:	4013      	ands	r3, r2
 801a980:	b29a      	uxth	r2, r3
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801a988:	2300      	movs	r3, #0
}
 801a98a:	4618      	mov	r0, r3
 801a98c:	3714      	adds	r7, #20
 801a98e:	46bd      	mov	sp, r7
 801a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a994:	4770      	bx	lr

0801a996 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801a996:	b084      	sub	sp, #16
 801a998:	b480      	push	{r7}
 801a99a:	b083      	sub	sp, #12
 801a99c:	af00      	add	r7, sp, #0
 801a99e:	6078      	str	r0, [r7, #4]
 801a9a0:	f107 0014 	add.w	r0, r7, #20
 801a9a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	2201      	movs	r2, #1
 801a9ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	2200      	movs	r2, #0
 801a9b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	2200      	movs	r2, #0
 801a9c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801a9c8:	2300      	movs	r3, #0
}
 801a9ca:	4618      	mov	r0, r3
 801a9cc:	370c      	adds	r7, #12
 801a9ce:	46bd      	mov	sp, r7
 801a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9d4:	b004      	add	sp, #16
 801a9d6:	4770      	bx	lr

0801a9d8 <__errno>:
 801a9d8:	4b01      	ldr	r3, [pc, #4]	; (801a9e0 <__errno+0x8>)
 801a9da:	6818      	ldr	r0, [r3, #0]
 801a9dc:	4770      	bx	lr
 801a9de:	bf00      	nop
 801a9e0:	2000007c 	.word	0x2000007c

0801a9e4 <__libc_init_array>:
 801a9e4:	b570      	push	{r4, r5, r6, lr}
 801a9e6:	4d0d      	ldr	r5, [pc, #52]	; (801aa1c <__libc_init_array+0x38>)
 801a9e8:	4c0d      	ldr	r4, [pc, #52]	; (801aa20 <__libc_init_array+0x3c>)
 801a9ea:	1b64      	subs	r4, r4, r5
 801a9ec:	10a4      	asrs	r4, r4, #2
 801a9ee:	2600      	movs	r6, #0
 801a9f0:	42a6      	cmp	r6, r4
 801a9f2:	d109      	bne.n	801aa08 <__libc_init_array+0x24>
 801a9f4:	4d0b      	ldr	r5, [pc, #44]	; (801aa24 <__libc_init_array+0x40>)
 801a9f6:	4c0c      	ldr	r4, [pc, #48]	; (801aa28 <__libc_init_array+0x44>)
 801a9f8:	f002 fe36 	bl	801d668 <_init>
 801a9fc:	1b64      	subs	r4, r4, r5
 801a9fe:	10a4      	asrs	r4, r4, #2
 801aa00:	2600      	movs	r6, #0
 801aa02:	42a6      	cmp	r6, r4
 801aa04:	d105      	bne.n	801aa12 <__libc_init_array+0x2e>
 801aa06:	bd70      	pop	{r4, r5, r6, pc}
 801aa08:	f855 3b04 	ldr.w	r3, [r5], #4
 801aa0c:	4798      	blx	r3
 801aa0e:	3601      	adds	r6, #1
 801aa10:	e7ee      	b.n	801a9f0 <__libc_init_array+0xc>
 801aa12:	f855 3b04 	ldr.w	r3, [r5], #4
 801aa16:	4798      	blx	r3
 801aa18:	3601      	adds	r6, #1
 801aa1a:	e7f2      	b.n	801aa02 <__libc_init_array+0x1e>
 801aa1c:	0801decc 	.word	0x0801decc
 801aa20:	0801decc 	.word	0x0801decc
 801aa24:	0801decc 	.word	0x0801decc
 801aa28:	0801ded0 	.word	0x0801ded0

0801aa2c <memcpy>:
 801aa2c:	440a      	add	r2, r1
 801aa2e:	4291      	cmp	r1, r2
 801aa30:	f100 33ff 	add.w	r3, r0, #4294967295
 801aa34:	d100      	bne.n	801aa38 <memcpy+0xc>
 801aa36:	4770      	bx	lr
 801aa38:	b510      	push	{r4, lr}
 801aa3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aa3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aa42:	4291      	cmp	r1, r2
 801aa44:	d1f9      	bne.n	801aa3a <memcpy+0xe>
 801aa46:	bd10      	pop	{r4, pc}

0801aa48 <memset>:
 801aa48:	4402      	add	r2, r0
 801aa4a:	4603      	mov	r3, r0
 801aa4c:	4293      	cmp	r3, r2
 801aa4e:	d100      	bne.n	801aa52 <memset+0xa>
 801aa50:	4770      	bx	lr
 801aa52:	f803 1b01 	strb.w	r1, [r3], #1
 801aa56:	e7f9      	b.n	801aa4c <memset+0x4>

0801aa58 <__cvt>:
 801aa58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aa5c:	ec55 4b10 	vmov	r4, r5, d0
 801aa60:	2d00      	cmp	r5, #0
 801aa62:	460e      	mov	r6, r1
 801aa64:	4619      	mov	r1, r3
 801aa66:	462b      	mov	r3, r5
 801aa68:	bfbb      	ittet	lt
 801aa6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801aa6e:	461d      	movlt	r5, r3
 801aa70:	2300      	movge	r3, #0
 801aa72:	232d      	movlt	r3, #45	; 0x2d
 801aa74:	700b      	strb	r3, [r1, #0]
 801aa76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801aa7c:	4691      	mov	r9, r2
 801aa7e:	f023 0820 	bic.w	r8, r3, #32
 801aa82:	bfbc      	itt	lt
 801aa84:	4622      	movlt	r2, r4
 801aa86:	4614      	movlt	r4, r2
 801aa88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801aa8c:	d005      	beq.n	801aa9a <__cvt+0x42>
 801aa8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801aa92:	d100      	bne.n	801aa96 <__cvt+0x3e>
 801aa94:	3601      	adds	r6, #1
 801aa96:	2102      	movs	r1, #2
 801aa98:	e000      	b.n	801aa9c <__cvt+0x44>
 801aa9a:	2103      	movs	r1, #3
 801aa9c:	ab03      	add	r3, sp, #12
 801aa9e:	9301      	str	r3, [sp, #4]
 801aaa0:	ab02      	add	r3, sp, #8
 801aaa2:	9300      	str	r3, [sp, #0]
 801aaa4:	ec45 4b10 	vmov	d0, r4, r5
 801aaa8:	4653      	mov	r3, sl
 801aaaa:	4632      	mov	r2, r6
 801aaac:	f000 fe44 	bl	801b738 <_dtoa_r>
 801aab0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801aab4:	4607      	mov	r7, r0
 801aab6:	d102      	bne.n	801aabe <__cvt+0x66>
 801aab8:	f019 0f01 	tst.w	r9, #1
 801aabc:	d022      	beq.n	801ab04 <__cvt+0xac>
 801aabe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801aac2:	eb07 0906 	add.w	r9, r7, r6
 801aac6:	d110      	bne.n	801aaea <__cvt+0x92>
 801aac8:	783b      	ldrb	r3, [r7, #0]
 801aaca:	2b30      	cmp	r3, #48	; 0x30
 801aacc:	d10a      	bne.n	801aae4 <__cvt+0x8c>
 801aace:	2200      	movs	r2, #0
 801aad0:	2300      	movs	r3, #0
 801aad2:	4620      	mov	r0, r4
 801aad4:	4629      	mov	r1, r5
 801aad6:	f7e5 ffcf 	bl	8000a78 <__aeabi_dcmpeq>
 801aada:	b918      	cbnz	r0, 801aae4 <__cvt+0x8c>
 801aadc:	f1c6 0601 	rsb	r6, r6, #1
 801aae0:	f8ca 6000 	str.w	r6, [sl]
 801aae4:	f8da 3000 	ldr.w	r3, [sl]
 801aae8:	4499      	add	r9, r3
 801aaea:	2200      	movs	r2, #0
 801aaec:	2300      	movs	r3, #0
 801aaee:	4620      	mov	r0, r4
 801aaf0:	4629      	mov	r1, r5
 801aaf2:	f7e5 ffc1 	bl	8000a78 <__aeabi_dcmpeq>
 801aaf6:	b108      	cbz	r0, 801aafc <__cvt+0xa4>
 801aaf8:	f8cd 900c 	str.w	r9, [sp, #12]
 801aafc:	2230      	movs	r2, #48	; 0x30
 801aafe:	9b03      	ldr	r3, [sp, #12]
 801ab00:	454b      	cmp	r3, r9
 801ab02:	d307      	bcc.n	801ab14 <__cvt+0xbc>
 801ab04:	9b03      	ldr	r3, [sp, #12]
 801ab06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ab08:	1bdb      	subs	r3, r3, r7
 801ab0a:	4638      	mov	r0, r7
 801ab0c:	6013      	str	r3, [r2, #0]
 801ab0e:	b004      	add	sp, #16
 801ab10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab14:	1c59      	adds	r1, r3, #1
 801ab16:	9103      	str	r1, [sp, #12]
 801ab18:	701a      	strb	r2, [r3, #0]
 801ab1a:	e7f0      	b.n	801aafe <__cvt+0xa6>

0801ab1c <__exponent>:
 801ab1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ab1e:	4603      	mov	r3, r0
 801ab20:	2900      	cmp	r1, #0
 801ab22:	bfb8      	it	lt
 801ab24:	4249      	neglt	r1, r1
 801ab26:	f803 2b02 	strb.w	r2, [r3], #2
 801ab2a:	bfb4      	ite	lt
 801ab2c:	222d      	movlt	r2, #45	; 0x2d
 801ab2e:	222b      	movge	r2, #43	; 0x2b
 801ab30:	2909      	cmp	r1, #9
 801ab32:	7042      	strb	r2, [r0, #1]
 801ab34:	dd2a      	ble.n	801ab8c <__exponent+0x70>
 801ab36:	f10d 0407 	add.w	r4, sp, #7
 801ab3a:	46a4      	mov	ip, r4
 801ab3c:	270a      	movs	r7, #10
 801ab3e:	46a6      	mov	lr, r4
 801ab40:	460a      	mov	r2, r1
 801ab42:	fb91 f6f7 	sdiv	r6, r1, r7
 801ab46:	fb07 1516 	mls	r5, r7, r6, r1
 801ab4a:	3530      	adds	r5, #48	; 0x30
 801ab4c:	2a63      	cmp	r2, #99	; 0x63
 801ab4e:	f104 34ff 	add.w	r4, r4, #4294967295
 801ab52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ab56:	4631      	mov	r1, r6
 801ab58:	dcf1      	bgt.n	801ab3e <__exponent+0x22>
 801ab5a:	3130      	adds	r1, #48	; 0x30
 801ab5c:	f1ae 0502 	sub.w	r5, lr, #2
 801ab60:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ab64:	1c44      	adds	r4, r0, #1
 801ab66:	4629      	mov	r1, r5
 801ab68:	4561      	cmp	r1, ip
 801ab6a:	d30a      	bcc.n	801ab82 <__exponent+0x66>
 801ab6c:	f10d 0209 	add.w	r2, sp, #9
 801ab70:	eba2 020e 	sub.w	r2, r2, lr
 801ab74:	4565      	cmp	r5, ip
 801ab76:	bf88      	it	hi
 801ab78:	2200      	movhi	r2, #0
 801ab7a:	4413      	add	r3, r2
 801ab7c:	1a18      	subs	r0, r3, r0
 801ab7e:	b003      	add	sp, #12
 801ab80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab82:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ab86:	f804 2f01 	strb.w	r2, [r4, #1]!
 801ab8a:	e7ed      	b.n	801ab68 <__exponent+0x4c>
 801ab8c:	2330      	movs	r3, #48	; 0x30
 801ab8e:	3130      	adds	r1, #48	; 0x30
 801ab90:	7083      	strb	r3, [r0, #2]
 801ab92:	70c1      	strb	r1, [r0, #3]
 801ab94:	1d03      	adds	r3, r0, #4
 801ab96:	e7f1      	b.n	801ab7c <__exponent+0x60>

0801ab98 <_printf_float>:
 801ab98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab9c:	ed2d 8b02 	vpush	{d8}
 801aba0:	b08d      	sub	sp, #52	; 0x34
 801aba2:	460c      	mov	r4, r1
 801aba4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801aba8:	4616      	mov	r6, r2
 801abaa:	461f      	mov	r7, r3
 801abac:	4605      	mov	r5, r0
 801abae:	f001 fd69 	bl	801c684 <_localeconv_r>
 801abb2:	f8d0 a000 	ldr.w	sl, [r0]
 801abb6:	4650      	mov	r0, sl
 801abb8:	f7e5 fae2 	bl	8000180 <strlen>
 801abbc:	2300      	movs	r3, #0
 801abbe:	930a      	str	r3, [sp, #40]	; 0x28
 801abc0:	6823      	ldr	r3, [r4, #0]
 801abc2:	9305      	str	r3, [sp, #20]
 801abc4:	f8d8 3000 	ldr.w	r3, [r8]
 801abc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 801abcc:	3307      	adds	r3, #7
 801abce:	f023 0307 	bic.w	r3, r3, #7
 801abd2:	f103 0208 	add.w	r2, r3, #8
 801abd6:	f8c8 2000 	str.w	r2, [r8]
 801abda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801abe2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801abe6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801abea:	9307      	str	r3, [sp, #28]
 801abec:	f8cd 8018 	str.w	r8, [sp, #24]
 801abf0:	ee08 0a10 	vmov	s16, r0
 801abf4:	4b9f      	ldr	r3, [pc, #636]	; (801ae74 <_printf_float+0x2dc>)
 801abf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801abfa:	f04f 32ff 	mov.w	r2, #4294967295
 801abfe:	f7e5 ff6d 	bl	8000adc <__aeabi_dcmpun>
 801ac02:	bb88      	cbnz	r0, 801ac68 <_printf_float+0xd0>
 801ac04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ac08:	4b9a      	ldr	r3, [pc, #616]	; (801ae74 <_printf_float+0x2dc>)
 801ac0a:	f04f 32ff 	mov.w	r2, #4294967295
 801ac0e:	f7e5 ff47 	bl	8000aa0 <__aeabi_dcmple>
 801ac12:	bb48      	cbnz	r0, 801ac68 <_printf_float+0xd0>
 801ac14:	2200      	movs	r2, #0
 801ac16:	2300      	movs	r3, #0
 801ac18:	4640      	mov	r0, r8
 801ac1a:	4649      	mov	r1, r9
 801ac1c:	f7e5 ff36 	bl	8000a8c <__aeabi_dcmplt>
 801ac20:	b110      	cbz	r0, 801ac28 <_printf_float+0x90>
 801ac22:	232d      	movs	r3, #45	; 0x2d
 801ac24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ac28:	4b93      	ldr	r3, [pc, #588]	; (801ae78 <_printf_float+0x2e0>)
 801ac2a:	4894      	ldr	r0, [pc, #592]	; (801ae7c <_printf_float+0x2e4>)
 801ac2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801ac30:	bf94      	ite	ls
 801ac32:	4698      	movls	r8, r3
 801ac34:	4680      	movhi	r8, r0
 801ac36:	2303      	movs	r3, #3
 801ac38:	6123      	str	r3, [r4, #16]
 801ac3a:	9b05      	ldr	r3, [sp, #20]
 801ac3c:	f023 0204 	bic.w	r2, r3, #4
 801ac40:	6022      	str	r2, [r4, #0]
 801ac42:	f04f 0900 	mov.w	r9, #0
 801ac46:	9700      	str	r7, [sp, #0]
 801ac48:	4633      	mov	r3, r6
 801ac4a:	aa0b      	add	r2, sp, #44	; 0x2c
 801ac4c:	4621      	mov	r1, r4
 801ac4e:	4628      	mov	r0, r5
 801ac50:	f000 f9d8 	bl	801b004 <_printf_common>
 801ac54:	3001      	adds	r0, #1
 801ac56:	f040 8090 	bne.w	801ad7a <_printf_float+0x1e2>
 801ac5a:	f04f 30ff 	mov.w	r0, #4294967295
 801ac5e:	b00d      	add	sp, #52	; 0x34
 801ac60:	ecbd 8b02 	vpop	{d8}
 801ac64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac68:	4642      	mov	r2, r8
 801ac6a:	464b      	mov	r3, r9
 801ac6c:	4640      	mov	r0, r8
 801ac6e:	4649      	mov	r1, r9
 801ac70:	f7e5 ff34 	bl	8000adc <__aeabi_dcmpun>
 801ac74:	b140      	cbz	r0, 801ac88 <_printf_float+0xf0>
 801ac76:	464b      	mov	r3, r9
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	bfbc      	itt	lt
 801ac7c:	232d      	movlt	r3, #45	; 0x2d
 801ac7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801ac82:	487f      	ldr	r0, [pc, #508]	; (801ae80 <_printf_float+0x2e8>)
 801ac84:	4b7f      	ldr	r3, [pc, #508]	; (801ae84 <_printf_float+0x2ec>)
 801ac86:	e7d1      	b.n	801ac2c <_printf_float+0x94>
 801ac88:	6863      	ldr	r3, [r4, #4]
 801ac8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801ac8e:	9206      	str	r2, [sp, #24]
 801ac90:	1c5a      	adds	r2, r3, #1
 801ac92:	d13f      	bne.n	801ad14 <_printf_float+0x17c>
 801ac94:	2306      	movs	r3, #6
 801ac96:	6063      	str	r3, [r4, #4]
 801ac98:	9b05      	ldr	r3, [sp, #20]
 801ac9a:	6861      	ldr	r1, [r4, #4]
 801ac9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801aca0:	2300      	movs	r3, #0
 801aca2:	9303      	str	r3, [sp, #12]
 801aca4:	ab0a      	add	r3, sp, #40	; 0x28
 801aca6:	e9cd b301 	strd	fp, r3, [sp, #4]
 801acaa:	ab09      	add	r3, sp, #36	; 0x24
 801acac:	ec49 8b10 	vmov	d0, r8, r9
 801acb0:	9300      	str	r3, [sp, #0]
 801acb2:	6022      	str	r2, [r4, #0]
 801acb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801acb8:	4628      	mov	r0, r5
 801acba:	f7ff fecd 	bl	801aa58 <__cvt>
 801acbe:	9b06      	ldr	r3, [sp, #24]
 801acc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801acc2:	2b47      	cmp	r3, #71	; 0x47
 801acc4:	4680      	mov	r8, r0
 801acc6:	d108      	bne.n	801acda <_printf_float+0x142>
 801acc8:	1cc8      	adds	r0, r1, #3
 801acca:	db02      	blt.n	801acd2 <_printf_float+0x13a>
 801accc:	6863      	ldr	r3, [r4, #4]
 801acce:	4299      	cmp	r1, r3
 801acd0:	dd41      	ble.n	801ad56 <_printf_float+0x1be>
 801acd2:	f1ab 0b02 	sub.w	fp, fp, #2
 801acd6:	fa5f fb8b 	uxtb.w	fp, fp
 801acda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801acde:	d820      	bhi.n	801ad22 <_printf_float+0x18a>
 801ace0:	3901      	subs	r1, #1
 801ace2:	465a      	mov	r2, fp
 801ace4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ace8:	9109      	str	r1, [sp, #36]	; 0x24
 801acea:	f7ff ff17 	bl	801ab1c <__exponent>
 801acee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801acf0:	1813      	adds	r3, r2, r0
 801acf2:	2a01      	cmp	r2, #1
 801acf4:	4681      	mov	r9, r0
 801acf6:	6123      	str	r3, [r4, #16]
 801acf8:	dc02      	bgt.n	801ad00 <_printf_float+0x168>
 801acfa:	6822      	ldr	r2, [r4, #0]
 801acfc:	07d2      	lsls	r2, r2, #31
 801acfe:	d501      	bpl.n	801ad04 <_printf_float+0x16c>
 801ad00:	3301      	adds	r3, #1
 801ad02:	6123      	str	r3, [r4, #16]
 801ad04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d09c      	beq.n	801ac46 <_printf_float+0xae>
 801ad0c:	232d      	movs	r3, #45	; 0x2d
 801ad0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ad12:	e798      	b.n	801ac46 <_printf_float+0xae>
 801ad14:	9a06      	ldr	r2, [sp, #24]
 801ad16:	2a47      	cmp	r2, #71	; 0x47
 801ad18:	d1be      	bne.n	801ac98 <_printf_float+0x100>
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	d1bc      	bne.n	801ac98 <_printf_float+0x100>
 801ad1e:	2301      	movs	r3, #1
 801ad20:	e7b9      	b.n	801ac96 <_printf_float+0xfe>
 801ad22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801ad26:	d118      	bne.n	801ad5a <_printf_float+0x1c2>
 801ad28:	2900      	cmp	r1, #0
 801ad2a:	6863      	ldr	r3, [r4, #4]
 801ad2c:	dd0b      	ble.n	801ad46 <_printf_float+0x1ae>
 801ad2e:	6121      	str	r1, [r4, #16]
 801ad30:	b913      	cbnz	r3, 801ad38 <_printf_float+0x1a0>
 801ad32:	6822      	ldr	r2, [r4, #0]
 801ad34:	07d0      	lsls	r0, r2, #31
 801ad36:	d502      	bpl.n	801ad3e <_printf_float+0x1a6>
 801ad38:	3301      	adds	r3, #1
 801ad3a:	440b      	add	r3, r1
 801ad3c:	6123      	str	r3, [r4, #16]
 801ad3e:	65a1      	str	r1, [r4, #88]	; 0x58
 801ad40:	f04f 0900 	mov.w	r9, #0
 801ad44:	e7de      	b.n	801ad04 <_printf_float+0x16c>
 801ad46:	b913      	cbnz	r3, 801ad4e <_printf_float+0x1b6>
 801ad48:	6822      	ldr	r2, [r4, #0]
 801ad4a:	07d2      	lsls	r2, r2, #31
 801ad4c:	d501      	bpl.n	801ad52 <_printf_float+0x1ba>
 801ad4e:	3302      	adds	r3, #2
 801ad50:	e7f4      	b.n	801ad3c <_printf_float+0x1a4>
 801ad52:	2301      	movs	r3, #1
 801ad54:	e7f2      	b.n	801ad3c <_printf_float+0x1a4>
 801ad56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801ad5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad5c:	4299      	cmp	r1, r3
 801ad5e:	db05      	blt.n	801ad6c <_printf_float+0x1d4>
 801ad60:	6823      	ldr	r3, [r4, #0]
 801ad62:	6121      	str	r1, [r4, #16]
 801ad64:	07d8      	lsls	r0, r3, #31
 801ad66:	d5ea      	bpl.n	801ad3e <_printf_float+0x1a6>
 801ad68:	1c4b      	adds	r3, r1, #1
 801ad6a:	e7e7      	b.n	801ad3c <_printf_float+0x1a4>
 801ad6c:	2900      	cmp	r1, #0
 801ad6e:	bfd4      	ite	le
 801ad70:	f1c1 0202 	rsble	r2, r1, #2
 801ad74:	2201      	movgt	r2, #1
 801ad76:	4413      	add	r3, r2
 801ad78:	e7e0      	b.n	801ad3c <_printf_float+0x1a4>
 801ad7a:	6823      	ldr	r3, [r4, #0]
 801ad7c:	055a      	lsls	r2, r3, #21
 801ad7e:	d407      	bmi.n	801ad90 <_printf_float+0x1f8>
 801ad80:	6923      	ldr	r3, [r4, #16]
 801ad82:	4642      	mov	r2, r8
 801ad84:	4631      	mov	r1, r6
 801ad86:	4628      	mov	r0, r5
 801ad88:	47b8      	blx	r7
 801ad8a:	3001      	adds	r0, #1
 801ad8c:	d12c      	bne.n	801ade8 <_printf_float+0x250>
 801ad8e:	e764      	b.n	801ac5a <_printf_float+0xc2>
 801ad90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ad94:	f240 80e0 	bls.w	801af58 <_printf_float+0x3c0>
 801ad98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ad9c:	2200      	movs	r2, #0
 801ad9e:	2300      	movs	r3, #0
 801ada0:	f7e5 fe6a 	bl	8000a78 <__aeabi_dcmpeq>
 801ada4:	2800      	cmp	r0, #0
 801ada6:	d034      	beq.n	801ae12 <_printf_float+0x27a>
 801ada8:	4a37      	ldr	r2, [pc, #220]	; (801ae88 <_printf_float+0x2f0>)
 801adaa:	2301      	movs	r3, #1
 801adac:	4631      	mov	r1, r6
 801adae:	4628      	mov	r0, r5
 801adb0:	47b8      	blx	r7
 801adb2:	3001      	adds	r0, #1
 801adb4:	f43f af51 	beq.w	801ac5a <_printf_float+0xc2>
 801adb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801adbc:	429a      	cmp	r2, r3
 801adbe:	db02      	blt.n	801adc6 <_printf_float+0x22e>
 801adc0:	6823      	ldr	r3, [r4, #0]
 801adc2:	07d8      	lsls	r0, r3, #31
 801adc4:	d510      	bpl.n	801ade8 <_printf_float+0x250>
 801adc6:	ee18 3a10 	vmov	r3, s16
 801adca:	4652      	mov	r2, sl
 801adcc:	4631      	mov	r1, r6
 801adce:	4628      	mov	r0, r5
 801add0:	47b8      	blx	r7
 801add2:	3001      	adds	r0, #1
 801add4:	f43f af41 	beq.w	801ac5a <_printf_float+0xc2>
 801add8:	f04f 0800 	mov.w	r8, #0
 801addc:	f104 091a 	add.w	r9, r4, #26
 801ade0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ade2:	3b01      	subs	r3, #1
 801ade4:	4543      	cmp	r3, r8
 801ade6:	dc09      	bgt.n	801adfc <_printf_float+0x264>
 801ade8:	6823      	ldr	r3, [r4, #0]
 801adea:	079b      	lsls	r3, r3, #30
 801adec:	f100 8105 	bmi.w	801affa <_printf_float+0x462>
 801adf0:	68e0      	ldr	r0, [r4, #12]
 801adf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801adf4:	4298      	cmp	r0, r3
 801adf6:	bfb8      	it	lt
 801adf8:	4618      	movlt	r0, r3
 801adfa:	e730      	b.n	801ac5e <_printf_float+0xc6>
 801adfc:	2301      	movs	r3, #1
 801adfe:	464a      	mov	r2, r9
 801ae00:	4631      	mov	r1, r6
 801ae02:	4628      	mov	r0, r5
 801ae04:	47b8      	blx	r7
 801ae06:	3001      	adds	r0, #1
 801ae08:	f43f af27 	beq.w	801ac5a <_printf_float+0xc2>
 801ae0c:	f108 0801 	add.w	r8, r8, #1
 801ae10:	e7e6      	b.n	801ade0 <_printf_float+0x248>
 801ae12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	dc39      	bgt.n	801ae8c <_printf_float+0x2f4>
 801ae18:	4a1b      	ldr	r2, [pc, #108]	; (801ae88 <_printf_float+0x2f0>)
 801ae1a:	2301      	movs	r3, #1
 801ae1c:	4631      	mov	r1, r6
 801ae1e:	4628      	mov	r0, r5
 801ae20:	47b8      	blx	r7
 801ae22:	3001      	adds	r0, #1
 801ae24:	f43f af19 	beq.w	801ac5a <_printf_float+0xc2>
 801ae28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ae2c:	4313      	orrs	r3, r2
 801ae2e:	d102      	bne.n	801ae36 <_printf_float+0x29e>
 801ae30:	6823      	ldr	r3, [r4, #0]
 801ae32:	07d9      	lsls	r1, r3, #31
 801ae34:	d5d8      	bpl.n	801ade8 <_printf_float+0x250>
 801ae36:	ee18 3a10 	vmov	r3, s16
 801ae3a:	4652      	mov	r2, sl
 801ae3c:	4631      	mov	r1, r6
 801ae3e:	4628      	mov	r0, r5
 801ae40:	47b8      	blx	r7
 801ae42:	3001      	adds	r0, #1
 801ae44:	f43f af09 	beq.w	801ac5a <_printf_float+0xc2>
 801ae48:	f04f 0900 	mov.w	r9, #0
 801ae4c:	f104 0a1a 	add.w	sl, r4, #26
 801ae50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae52:	425b      	negs	r3, r3
 801ae54:	454b      	cmp	r3, r9
 801ae56:	dc01      	bgt.n	801ae5c <_printf_float+0x2c4>
 801ae58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae5a:	e792      	b.n	801ad82 <_printf_float+0x1ea>
 801ae5c:	2301      	movs	r3, #1
 801ae5e:	4652      	mov	r2, sl
 801ae60:	4631      	mov	r1, r6
 801ae62:	4628      	mov	r0, r5
 801ae64:	47b8      	blx	r7
 801ae66:	3001      	adds	r0, #1
 801ae68:	f43f aef7 	beq.w	801ac5a <_printf_float+0xc2>
 801ae6c:	f109 0901 	add.w	r9, r9, #1
 801ae70:	e7ee      	b.n	801ae50 <_printf_float+0x2b8>
 801ae72:	bf00      	nop
 801ae74:	7fefffff 	.word	0x7fefffff
 801ae78:	0801daec 	.word	0x0801daec
 801ae7c:	0801daf0 	.word	0x0801daf0
 801ae80:	0801daf8 	.word	0x0801daf8
 801ae84:	0801daf4 	.word	0x0801daf4
 801ae88:	0801dafc 	.word	0x0801dafc
 801ae8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ae8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ae90:	429a      	cmp	r2, r3
 801ae92:	bfa8      	it	ge
 801ae94:	461a      	movge	r2, r3
 801ae96:	2a00      	cmp	r2, #0
 801ae98:	4691      	mov	r9, r2
 801ae9a:	dc37      	bgt.n	801af0c <_printf_float+0x374>
 801ae9c:	f04f 0b00 	mov.w	fp, #0
 801aea0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801aea4:	f104 021a 	add.w	r2, r4, #26
 801aea8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801aeaa:	9305      	str	r3, [sp, #20]
 801aeac:	eba3 0309 	sub.w	r3, r3, r9
 801aeb0:	455b      	cmp	r3, fp
 801aeb2:	dc33      	bgt.n	801af1c <_printf_float+0x384>
 801aeb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801aeb8:	429a      	cmp	r2, r3
 801aeba:	db3b      	blt.n	801af34 <_printf_float+0x39c>
 801aebc:	6823      	ldr	r3, [r4, #0]
 801aebe:	07da      	lsls	r2, r3, #31
 801aec0:	d438      	bmi.n	801af34 <_printf_float+0x39c>
 801aec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aec4:	9a05      	ldr	r2, [sp, #20]
 801aec6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aec8:	1a9a      	subs	r2, r3, r2
 801aeca:	eba3 0901 	sub.w	r9, r3, r1
 801aece:	4591      	cmp	r9, r2
 801aed0:	bfa8      	it	ge
 801aed2:	4691      	movge	r9, r2
 801aed4:	f1b9 0f00 	cmp.w	r9, #0
 801aed8:	dc35      	bgt.n	801af46 <_printf_float+0x3ae>
 801aeda:	f04f 0800 	mov.w	r8, #0
 801aede:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801aee2:	f104 0a1a 	add.w	sl, r4, #26
 801aee6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801aeea:	1a9b      	subs	r3, r3, r2
 801aeec:	eba3 0309 	sub.w	r3, r3, r9
 801aef0:	4543      	cmp	r3, r8
 801aef2:	f77f af79 	ble.w	801ade8 <_printf_float+0x250>
 801aef6:	2301      	movs	r3, #1
 801aef8:	4652      	mov	r2, sl
 801aefa:	4631      	mov	r1, r6
 801aefc:	4628      	mov	r0, r5
 801aefe:	47b8      	blx	r7
 801af00:	3001      	adds	r0, #1
 801af02:	f43f aeaa 	beq.w	801ac5a <_printf_float+0xc2>
 801af06:	f108 0801 	add.w	r8, r8, #1
 801af0a:	e7ec      	b.n	801aee6 <_printf_float+0x34e>
 801af0c:	4613      	mov	r3, r2
 801af0e:	4631      	mov	r1, r6
 801af10:	4642      	mov	r2, r8
 801af12:	4628      	mov	r0, r5
 801af14:	47b8      	blx	r7
 801af16:	3001      	adds	r0, #1
 801af18:	d1c0      	bne.n	801ae9c <_printf_float+0x304>
 801af1a:	e69e      	b.n	801ac5a <_printf_float+0xc2>
 801af1c:	2301      	movs	r3, #1
 801af1e:	4631      	mov	r1, r6
 801af20:	4628      	mov	r0, r5
 801af22:	9205      	str	r2, [sp, #20]
 801af24:	47b8      	blx	r7
 801af26:	3001      	adds	r0, #1
 801af28:	f43f ae97 	beq.w	801ac5a <_printf_float+0xc2>
 801af2c:	9a05      	ldr	r2, [sp, #20]
 801af2e:	f10b 0b01 	add.w	fp, fp, #1
 801af32:	e7b9      	b.n	801aea8 <_printf_float+0x310>
 801af34:	ee18 3a10 	vmov	r3, s16
 801af38:	4652      	mov	r2, sl
 801af3a:	4631      	mov	r1, r6
 801af3c:	4628      	mov	r0, r5
 801af3e:	47b8      	blx	r7
 801af40:	3001      	adds	r0, #1
 801af42:	d1be      	bne.n	801aec2 <_printf_float+0x32a>
 801af44:	e689      	b.n	801ac5a <_printf_float+0xc2>
 801af46:	9a05      	ldr	r2, [sp, #20]
 801af48:	464b      	mov	r3, r9
 801af4a:	4442      	add	r2, r8
 801af4c:	4631      	mov	r1, r6
 801af4e:	4628      	mov	r0, r5
 801af50:	47b8      	blx	r7
 801af52:	3001      	adds	r0, #1
 801af54:	d1c1      	bne.n	801aeda <_printf_float+0x342>
 801af56:	e680      	b.n	801ac5a <_printf_float+0xc2>
 801af58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801af5a:	2a01      	cmp	r2, #1
 801af5c:	dc01      	bgt.n	801af62 <_printf_float+0x3ca>
 801af5e:	07db      	lsls	r3, r3, #31
 801af60:	d538      	bpl.n	801afd4 <_printf_float+0x43c>
 801af62:	2301      	movs	r3, #1
 801af64:	4642      	mov	r2, r8
 801af66:	4631      	mov	r1, r6
 801af68:	4628      	mov	r0, r5
 801af6a:	47b8      	blx	r7
 801af6c:	3001      	adds	r0, #1
 801af6e:	f43f ae74 	beq.w	801ac5a <_printf_float+0xc2>
 801af72:	ee18 3a10 	vmov	r3, s16
 801af76:	4652      	mov	r2, sl
 801af78:	4631      	mov	r1, r6
 801af7a:	4628      	mov	r0, r5
 801af7c:	47b8      	blx	r7
 801af7e:	3001      	adds	r0, #1
 801af80:	f43f ae6b 	beq.w	801ac5a <_printf_float+0xc2>
 801af84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801af88:	2200      	movs	r2, #0
 801af8a:	2300      	movs	r3, #0
 801af8c:	f7e5 fd74 	bl	8000a78 <__aeabi_dcmpeq>
 801af90:	b9d8      	cbnz	r0, 801afca <_printf_float+0x432>
 801af92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af94:	f108 0201 	add.w	r2, r8, #1
 801af98:	3b01      	subs	r3, #1
 801af9a:	4631      	mov	r1, r6
 801af9c:	4628      	mov	r0, r5
 801af9e:	47b8      	blx	r7
 801afa0:	3001      	adds	r0, #1
 801afa2:	d10e      	bne.n	801afc2 <_printf_float+0x42a>
 801afa4:	e659      	b.n	801ac5a <_printf_float+0xc2>
 801afa6:	2301      	movs	r3, #1
 801afa8:	4652      	mov	r2, sl
 801afaa:	4631      	mov	r1, r6
 801afac:	4628      	mov	r0, r5
 801afae:	47b8      	blx	r7
 801afb0:	3001      	adds	r0, #1
 801afb2:	f43f ae52 	beq.w	801ac5a <_printf_float+0xc2>
 801afb6:	f108 0801 	add.w	r8, r8, #1
 801afba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801afbc:	3b01      	subs	r3, #1
 801afbe:	4543      	cmp	r3, r8
 801afc0:	dcf1      	bgt.n	801afa6 <_printf_float+0x40e>
 801afc2:	464b      	mov	r3, r9
 801afc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801afc8:	e6dc      	b.n	801ad84 <_printf_float+0x1ec>
 801afca:	f04f 0800 	mov.w	r8, #0
 801afce:	f104 0a1a 	add.w	sl, r4, #26
 801afd2:	e7f2      	b.n	801afba <_printf_float+0x422>
 801afd4:	2301      	movs	r3, #1
 801afd6:	4642      	mov	r2, r8
 801afd8:	e7df      	b.n	801af9a <_printf_float+0x402>
 801afda:	2301      	movs	r3, #1
 801afdc:	464a      	mov	r2, r9
 801afde:	4631      	mov	r1, r6
 801afe0:	4628      	mov	r0, r5
 801afe2:	47b8      	blx	r7
 801afe4:	3001      	adds	r0, #1
 801afe6:	f43f ae38 	beq.w	801ac5a <_printf_float+0xc2>
 801afea:	f108 0801 	add.w	r8, r8, #1
 801afee:	68e3      	ldr	r3, [r4, #12]
 801aff0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801aff2:	1a5b      	subs	r3, r3, r1
 801aff4:	4543      	cmp	r3, r8
 801aff6:	dcf0      	bgt.n	801afda <_printf_float+0x442>
 801aff8:	e6fa      	b.n	801adf0 <_printf_float+0x258>
 801affa:	f04f 0800 	mov.w	r8, #0
 801affe:	f104 0919 	add.w	r9, r4, #25
 801b002:	e7f4      	b.n	801afee <_printf_float+0x456>

0801b004 <_printf_common>:
 801b004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b008:	4616      	mov	r6, r2
 801b00a:	4699      	mov	r9, r3
 801b00c:	688a      	ldr	r2, [r1, #8]
 801b00e:	690b      	ldr	r3, [r1, #16]
 801b010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b014:	4293      	cmp	r3, r2
 801b016:	bfb8      	it	lt
 801b018:	4613      	movlt	r3, r2
 801b01a:	6033      	str	r3, [r6, #0]
 801b01c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b020:	4607      	mov	r7, r0
 801b022:	460c      	mov	r4, r1
 801b024:	b10a      	cbz	r2, 801b02a <_printf_common+0x26>
 801b026:	3301      	adds	r3, #1
 801b028:	6033      	str	r3, [r6, #0]
 801b02a:	6823      	ldr	r3, [r4, #0]
 801b02c:	0699      	lsls	r1, r3, #26
 801b02e:	bf42      	ittt	mi
 801b030:	6833      	ldrmi	r3, [r6, #0]
 801b032:	3302      	addmi	r3, #2
 801b034:	6033      	strmi	r3, [r6, #0]
 801b036:	6825      	ldr	r5, [r4, #0]
 801b038:	f015 0506 	ands.w	r5, r5, #6
 801b03c:	d106      	bne.n	801b04c <_printf_common+0x48>
 801b03e:	f104 0a19 	add.w	sl, r4, #25
 801b042:	68e3      	ldr	r3, [r4, #12]
 801b044:	6832      	ldr	r2, [r6, #0]
 801b046:	1a9b      	subs	r3, r3, r2
 801b048:	42ab      	cmp	r3, r5
 801b04a:	dc26      	bgt.n	801b09a <_printf_common+0x96>
 801b04c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b050:	1e13      	subs	r3, r2, #0
 801b052:	6822      	ldr	r2, [r4, #0]
 801b054:	bf18      	it	ne
 801b056:	2301      	movne	r3, #1
 801b058:	0692      	lsls	r2, r2, #26
 801b05a:	d42b      	bmi.n	801b0b4 <_printf_common+0xb0>
 801b05c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b060:	4649      	mov	r1, r9
 801b062:	4638      	mov	r0, r7
 801b064:	47c0      	blx	r8
 801b066:	3001      	adds	r0, #1
 801b068:	d01e      	beq.n	801b0a8 <_printf_common+0xa4>
 801b06a:	6823      	ldr	r3, [r4, #0]
 801b06c:	68e5      	ldr	r5, [r4, #12]
 801b06e:	6832      	ldr	r2, [r6, #0]
 801b070:	f003 0306 	and.w	r3, r3, #6
 801b074:	2b04      	cmp	r3, #4
 801b076:	bf08      	it	eq
 801b078:	1aad      	subeq	r5, r5, r2
 801b07a:	68a3      	ldr	r3, [r4, #8]
 801b07c:	6922      	ldr	r2, [r4, #16]
 801b07e:	bf0c      	ite	eq
 801b080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b084:	2500      	movne	r5, #0
 801b086:	4293      	cmp	r3, r2
 801b088:	bfc4      	itt	gt
 801b08a:	1a9b      	subgt	r3, r3, r2
 801b08c:	18ed      	addgt	r5, r5, r3
 801b08e:	2600      	movs	r6, #0
 801b090:	341a      	adds	r4, #26
 801b092:	42b5      	cmp	r5, r6
 801b094:	d11a      	bne.n	801b0cc <_printf_common+0xc8>
 801b096:	2000      	movs	r0, #0
 801b098:	e008      	b.n	801b0ac <_printf_common+0xa8>
 801b09a:	2301      	movs	r3, #1
 801b09c:	4652      	mov	r2, sl
 801b09e:	4649      	mov	r1, r9
 801b0a0:	4638      	mov	r0, r7
 801b0a2:	47c0      	blx	r8
 801b0a4:	3001      	adds	r0, #1
 801b0a6:	d103      	bne.n	801b0b0 <_printf_common+0xac>
 801b0a8:	f04f 30ff 	mov.w	r0, #4294967295
 801b0ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0b0:	3501      	adds	r5, #1
 801b0b2:	e7c6      	b.n	801b042 <_printf_common+0x3e>
 801b0b4:	18e1      	adds	r1, r4, r3
 801b0b6:	1c5a      	adds	r2, r3, #1
 801b0b8:	2030      	movs	r0, #48	; 0x30
 801b0ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b0be:	4422      	add	r2, r4
 801b0c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b0c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b0c8:	3302      	adds	r3, #2
 801b0ca:	e7c7      	b.n	801b05c <_printf_common+0x58>
 801b0cc:	2301      	movs	r3, #1
 801b0ce:	4622      	mov	r2, r4
 801b0d0:	4649      	mov	r1, r9
 801b0d2:	4638      	mov	r0, r7
 801b0d4:	47c0      	blx	r8
 801b0d6:	3001      	adds	r0, #1
 801b0d8:	d0e6      	beq.n	801b0a8 <_printf_common+0xa4>
 801b0da:	3601      	adds	r6, #1
 801b0dc:	e7d9      	b.n	801b092 <_printf_common+0x8e>
	...

0801b0e0 <_printf_i>:
 801b0e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b0e4:	7e0f      	ldrb	r7, [r1, #24]
 801b0e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b0e8:	2f78      	cmp	r7, #120	; 0x78
 801b0ea:	4691      	mov	r9, r2
 801b0ec:	4680      	mov	r8, r0
 801b0ee:	460c      	mov	r4, r1
 801b0f0:	469a      	mov	sl, r3
 801b0f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b0f6:	d807      	bhi.n	801b108 <_printf_i+0x28>
 801b0f8:	2f62      	cmp	r7, #98	; 0x62
 801b0fa:	d80a      	bhi.n	801b112 <_printf_i+0x32>
 801b0fc:	2f00      	cmp	r7, #0
 801b0fe:	f000 80d8 	beq.w	801b2b2 <_printf_i+0x1d2>
 801b102:	2f58      	cmp	r7, #88	; 0x58
 801b104:	f000 80a3 	beq.w	801b24e <_printf_i+0x16e>
 801b108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b10c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b110:	e03a      	b.n	801b188 <_printf_i+0xa8>
 801b112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b116:	2b15      	cmp	r3, #21
 801b118:	d8f6      	bhi.n	801b108 <_printf_i+0x28>
 801b11a:	a101      	add	r1, pc, #4	; (adr r1, 801b120 <_printf_i+0x40>)
 801b11c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b120:	0801b179 	.word	0x0801b179
 801b124:	0801b18d 	.word	0x0801b18d
 801b128:	0801b109 	.word	0x0801b109
 801b12c:	0801b109 	.word	0x0801b109
 801b130:	0801b109 	.word	0x0801b109
 801b134:	0801b109 	.word	0x0801b109
 801b138:	0801b18d 	.word	0x0801b18d
 801b13c:	0801b109 	.word	0x0801b109
 801b140:	0801b109 	.word	0x0801b109
 801b144:	0801b109 	.word	0x0801b109
 801b148:	0801b109 	.word	0x0801b109
 801b14c:	0801b299 	.word	0x0801b299
 801b150:	0801b1bd 	.word	0x0801b1bd
 801b154:	0801b27b 	.word	0x0801b27b
 801b158:	0801b109 	.word	0x0801b109
 801b15c:	0801b109 	.word	0x0801b109
 801b160:	0801b2bb 	.word	0x0801b2bb
 801b164:	0801b109 	.word	0x0801b109
 801b168:	0801b1bd 	.word	0x0801b1bd
 801b16c:	0801b109 	.word	0x0801b109
 801b170:	0801b109 	.word	0x0801b109
 801b174:	0801b283 	.word	0x0801b283
 801b178:	682b      	ldr	r3, [r5, #0]
 801b17a:	1d1a      	adds	r2, r3, #4
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	602a      	str	r2, [r5, #0]
 801b180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b188:	2301      	movs	r3, #1
 801b18a:	e0a3      	b.n	801b2d4 <_printf_i+0x1f4>
 801b18c:	6820      	ldr	r0, [r4, #0]
 801b18e:	6829      	ldr	r1, [r5, #0]
 801b190:	0606      	lsls	r6, r0, #24
 801b192:	f101 0304 	add.w	r3, r1, #4
 801b196:	d50a      	bpl.n	801b1ae <_printf_i+0xce>
 801b198:	680e      	ldr	r6, [r1, #0]
 801b19a:	602b      	str	r3, [r5, #0]
 801b19c:	2e00      	cmp	r6, #0
 801b19e:	da03      	bge.n	801b1a8 <_printf_i+0xc8>
 801b1a0:	232d      	movs	r3, #45	; 0x2d
 801b1a2:	4276      	negs	r6, r6
 801b1a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b1a8:	485e      	ldr	r0, [pc, #376]	; (801b324 <_printf_i+0x244>)
 801b1aa:	230a      	movs	r3, #10
 801b1ac:	e019      	b.n	801b1e2 <_printf_i+0x102>
 801b1ae:	680e      	ldr	r6, [r1, #0]
 801b1b0:	602b      	str	r3, [r5, #0]
 801b1b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b1b6:	bf18      	it	ne
 801b1b8:	b236      	sxthne	r6, r6
 801b1ba:	e7ef      	b.n	801b19c <_printf_i+0xbc>
 801b1bc:	682b      	ldr	r3, [r5, #0]
 801b1be:	6820      	ldr	r0, [r4, #0]
 801b1c0:	1d19      	adds	r1, r3, #4
 801b1c2:	6029      	str	r1, [r5, #0]
 801b1c4:	0601      	lsls	r1, r0, #24
 801b1c6:	d501      	bpl.n	801b1cc <_printf_i+0xec>
 801b1c8:	681e      	ldr	r6, [r3, #0]
 801b1ca:	e002      	b.n	801b1d2 <_printf_i+0xf2>
 801b1cc:	0646      	lsls	r6, r0, #25
 801b1ce:	d5fb      	bpl.n	801b1c8 <_printf_i+0xe8>
 801b1d0:	881e      	ldrh	r6, [r3, #0]
 801b1d2:	4854      	ldr	r0, [pc, #336]	; (801b324 <_printf_i+0x244>)
 801b1d4:	2f6f      	cmp	r7, #111	; 0x6f
 801b1d6:	bf0c      	ite	eq
 801b1d8:	2308      	moveq	r3, #8
 801b1da:	230a      	movne	r3, #10
 801b1dc:	2100      	movs	r1, #0
 801b1de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b1e2:	6865      	ldr	r5, [r4, #4]
 801b1e4:	60a5      	str	r5, [r4, #8]
 801b1e6:	2d00      	cmp	r5, #0
 801b1e8:	bfa2      	ittt	ge
 801b1ea:	6821      	ldrge	r1, [r4, #0]
 801b1ec:	f021 0104 	bicge.w	r1, r1, #4
 801b1f0:	6021      	strge	r1, [r4, #0]
 801b1f2:	b90e      	cbnz	r6, 801b1f8 <_printf_i+0x118>
 801b1f4:	2d00      	cmp	r5, #0
 801b1f6:	d04d      	beq.n	801b294 <_printf_i+0x1b4>
 801b1f8:	4615      	mov	r5, r2
 801b1fa:	fbb6 f1f3 	udiv	r1, r6, r3
 801b1fe:	fb03 6711 	mls	r7, r3, r1, r6
 801b202:	5dc7      	ldrb	r7, [r0, r7]
 801b204:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b208:	4637      	mov	r7, r6
 801b20a:	42bb      	cmp	r3, r7
 801b20c:	460e      	mov	r6, r1
 801b20e:	d9f4      	bls.n	801b1fa <_printf_i+0x11a>
 801b210:	2b08      	cmp	r3, #8
 801b212:	d10b      	bne.n	801b22c <_printf_i+0x14c>
 801b214:	6823      	ldr	r3, [r4, #0]
 801b216:	07de      	lsls	r6, r3, #31
 801b218:	d508      	bpl.n	801b22c <_printf_i+0x14c>
 801b21a:	6923      	ldr	r3, [r4, #16]
 801b21c:	6861      	ldr	r1, [r4, #4]
 801b21e:	4299      	cmp	r1, r3
 801b220:	bfde      	ittt	le
 801b222:	2330      	movle	r3, #48	; 0x30
 801b224:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b228:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b22c:	1b52      	subs	r2, r2, r5
 801b22e:	6122      	str	r2, [r4, #16]
 801b230:	f8cd a000 	str.w	sl, [sp]
 801b234:	464b      	mov	r3, r9
 801b236:	aa03      	add	r2, sp, #12
 801b238:	4621      	mov	r1, r4
 801b23a:	4640      	mov	r0, r8
 801b23c:	f7ff fee2 	bl	801b004 <_printf_common>
 801b240:	3001      	adds	r0, #1
 801b242:	d14c      	bne.n	801b2de <_printf_i+0x1fe>
 801b244:	f04f 30ff 	mov.w	r0, #4294967295
 801b248:	b004      	add	sp, #16
 801b24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b24e:	4835      	ldr	r0, [pc, #212]	; (801b324 <_printf_i+0x244>)
 801b250:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b254:	6829      	ldr	r1, [r5, #0]
 801b256:	6823      	ldr	r3, [r4, #0]
 801b258:	f851 6b04 	ldr.w	r6, [r1], #4
 801b25c:	6029      	str	r1, [r5, #0]
 801b25e:	061d      	lsls	r5, r3, #24
 801b260:	d514      	bpl.n	801b28c <_printf_i+0x1ac>
 801b262:	07df      	lsls	r7, r3, #31
 801b264:	bf44      	itt	mi
 801b266:	f043 0320 	orrmi.w	r3, r3, #32
 801b26a:	6023      	strmi	r3, [r4, #0]
 801b26c:	b91e      	cbnz	r6, 801b276 <_printf_i+0x196>
 801b26e:	6823      	ldr	r3, [r4, #0]
 801b270:	f023 0320 	bic.w	r3, r3, #32
 801b274:	6023      	str	r3, [r4, #0]
 801b276:	2310      	movs	r3, #16
 801b278:	e7b0      	b.n	801b1dc <_printf_i+0xfc>
 801b27a:	6823      	ldr	r3, [r4, #0]
 801b27c:	f043 0320 	orr.w	r3, r3, #32
 801b280:	6023      	str	r3, [r4, #0]
 801b282:	2378      	movs	r3, #120	; 0x78
 801b284:	4828      	ldr	r0, [pc, #160]	; (801b328 <_printf_i+0x248>)
 801b286:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b28a:	e7e3      	b.n	801b254 <_printf_i+0x174>
 801b28c:	0659      	lsls	r1, r3, #25
 801b28e:	bf48      	it	mi
 801b290:	b2b6      	uxthmi	r6, r6
 801b292:	e7e6      	b.n	801b262 <_printf_i+0x182>
 801b294:	4615      	mov	r5, r2
 801b296:	e7bb      	b.n	801b210 <_printf_i+0x130>
 801b298:	682b      	ldr	r3, [r5, #0]
 801b29a:	6826      	ldr	r6, [r4, #0]
 801b29c:	6961      	ldr	r1, [r4, #20]
 801b29e:	1d18      	adds	r0, r3, #4
 801b2a0:	6028      	str	r0, [r5, #0]
 801b2a2:	0635      	lsls	r5, r6, #24
 801b2a4:	681b      	ldr	r3, [r3, #0]
 801b2a6:	d501      	bpl.n	801b2ac <_printf_i+0x1cc>
 801b2a8:	6019      	str	r1, [r3, #0]
 801b2aa:	e002      	b.n	801b2b2 <_printf_i+0x1d2>
 801b2ac:	0670      	lsls	r0, r6, #25
 801b2ae:	d5fb      	bpl.n	801b2a8 <_printf_i+0x1c8>
 801b2b0:	8019      	strh	r1, [r3, #0]
 801b2b2:	2300      	movs	r3, #0
 801b2b4:	6123      	str	r3, [r4, #16]
 801b2b6:	4615      	mov	r5, r2
 801b2b8:	e7ba      	b.n	801b230 <_printf_i+0x150>
 801b2ba:	682b      	ldr	r3, [r5, #0]
 801b2bc:	1d1a      	adds	r2, r3, #4
 801b2be:	602a      	str	r2, [r5, #0]
 801b2c0:	681d      	ldr	r5, [r3, #0]
 801b2c2:	6862      	ldr	r2, [r4, #4]
 801b2c4:	2100      	movs	r1, #0
 801b2c6:	4628      	mov	r0, r5
 801b2c8:	f7e4 ff62 	bl	8000190 <memchr>
 801b2cc:	b108      	cbz	r0, 801b2d2 <_printf_i+0x1f2>
 801b2ce:	1b40      	subs	r0, r0, r5
 801b2d0:	6060      	str	r0, [r4, #4]
 801b2d2:	6863      	ldr	r3, [r4, #4]
 801b2d4:	6123      	str	r3, [r4, #16]
 801b2d6:	2300      	movs	r3, #0
 801b2d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b2dc:	e7a8      	b.n	801b230 <_printf_i+0x150>
 801b2de:	6923      	ldr	r3, [r4, #16]
 801b2e0:	462a      	mov	r2, r5
 801b2e2:	4649      	mov	r1, r9
 801b2e4:	4640      	mov	r0, r8
 801b2e6:	47d0      	blx	sl
 801b2e8:	3001      	adds	r0, #1
 801b2ea:	d0ab      	beq.n	801b244 <_printf_i+0x164>
 801b2ec:	6823      	ldr	r3, [r4, #0]
 801b2ee:	079b      	lsls	r3, r3, #30
 801b2f0:	d413      	bmi.n	801b31a <_printf_i+0x23a>
 801b2f2:	68e0      	ldr	r0, [r4, #12]
 801b2f4:	9b03      	ldr	r3, [sp, #12]
 801b2f6:	4298      	cmp	r0, r3
 801b2f8:	bfb8      	it	lt
 801b2fa:	4618      	movlt	r0, r3
 801b2fc:	e7a4      	b.n	801b248 <_printf_i+0x168>
 801b2fe:	2301      	movs	r3, #1
 801b300:	4632      	mov	r2, r6
 801b302:	4649      	mov	r1, r9
 801b304:	4640      	mov	r0, r8
 801b306:	47d0      	blx	sl
 801b308:	3001      	adds	r0, #1
 801b30a:	d09b      	beq.n	801b244 <_printf_i+0x164>
 801b30c:	3501      	adds	r5, #1
 801b30e:	68e3      	ldr	r3, [r4, #12]
 801b310:	9903      	ldr	r1, [sp, #12]
 801b312:	1a5b      	subs	r3, r3, r1
 801b314:	42ab      	cmp	r3, r5
 801b316:	dcf2      	bgt.n	801b2fe <_printf_i+0x21e>
 801b318:	e7eb      	b.n	801b2f2 <_printf_i+0x212>
 801b31a:	2500      	movs	r5, #0
 801b31c:	f104 0619 	add.w	r6, r4, #25
 801b320:	e7f5      	b.n	801b30e <_printf_i+0x22e>
 801b322:	bf00      	nop
 801b324:	0801dafe 	.word	0x0801dafe
 801b328:	0801db0f 	.word	0x0801db0f

0801b32c <iprintf>:
 801b32c:	b40f      	push	{r0, r1, r2, r3}
 801b32e:	4b0a      	ldr	r3, [pc, #40]	; (801b358 <iprintf+0x2c>)
 801b330:	b513      	push	{r0, r1, r4, lr}
 801b332:	681c      	ldr	r4, [r3, #0]
 801b334:	b124      	cbz	r4, 801b340 <iprintf+0x14>
 801b336:	69a3      	ldr	r3, [r4, #24]
 801b338:	b913      	cbnz	r3, 801b340 <iprintf+0x14>
 801b33a:	4620      	mov	r0, r4
 801b33c:	f001 f904 	bl	801c548 <__sinit>
 801b340:	ab05      	add	r3, sp, #20
 801b342:	9a04      	ldr	r2, [sp, #16]
 801b344:	68a1      	ldr	r1, [r4, #8]
 801b346:	9301      	str	r3, [sp, #4]
 801b348:	4620      	mov	r0, r4
 801b34a:	f001 feb3 	bl	801d0b4 <_vfiprintf_r>
 801b34e:	b002      	add	sp, #8
 801b350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b354:	b004      	add	sp, #16
 801b356:	4770      	bx	lr
 801b358:	2000007c 	.word	0x2000007c

0801b35c <putchar>:
 801b35c:	4b09      	ldr	r3, [pc, #36]	; (801b384 <putchar+0x28>)
 801b35e:	b513      	push	{r0, r1, r4, lr}
 801b360:	681c      	ldr	r4, [r3, #0]
 801b362:	4601      	mov	r1, r0
 801b364:	b134      	cbz	r4, 801b374 <putchar+0x18>
 801b366:	69a3      	ldr	r3, [r4, #24]
 801b368:	b923      	cbnz	r3, 801b374 <putchar+0x18>
 801b36a:	9001      	str	r0, [sp, #4]
 801b36c:	4620      	mov	r0, r4
 801b36e:	f001 f8eb 	bl	801c548 <__sinit>
 801b372:	9901      	ldr	r1, [sp, #4]
 801b374:	68a2      	ldr	r2, [r4, #8]
 801b376:	4620      	mov	r0, r4
 801b378:	b002      	add	sp, #8
 801b37a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b37e:	f001 bfc9 	b.w	801d314 <_putc_r>
 801b382:	bf00      	nop
 801b384:	2000007c 	.word	0x2000007c

0801b388 <_puts_r>:
 801b388:	b570      	push	{r4, r5, r6, lr}
 801b38a:	460e      	mov	r6, r1
 801b38c:	4605      	mov	r5, r0
 801b38e:	b118      	cbz	r0, 801b398 <_puts_r+0x10>
 801b390:	6983      	ldr	r3, [r0, #24]
 801b392:	b90b      	cbnz	r3, 801b398 <_puts_r+0x10>
 801b394:	f001 f8d8 	bl	801c548 <__sinit>
 801b398:	69ab      	ldr	r3, [r5, #24]
 801b39a:	68ac      	ldr	r4, [r5, #8]
 801b39c:	b913      	cbnz	r3, 801b3a4 <_puts_r+0x1c>
 801b39e:	4628      	mov	r0, r5
 801b3a0:	f001 f8d2 	bl	801c548 <__sinit>
 801b3a4:	4b2c      	ldr	r3, [pc, #176]	; (801b458 <_puts_r+0xd0>)
 801b3a6:	429c      	cmp	r4, r3
 801b3a8:	d120      	bne.n	801b3ec <_puts_r+0x64>
 801b3aa:	686c      	ldr	r4, [r5, #4]
 801b3ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b3ae:	07db      	lsls	r3, r3, #31
 801b3b0:	d405      	bmi.n	801b3be <_puts_r+0x36>
 801b3b2:	89a3      	ldrh	r3, [r4, #12]
 801b3b4:	0598      	lsls	r0, r3, #22
 801b3b6:	d402      	bmi.n	801b3be <_puts_r+0x36>
 801b3b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b3ba:	f001 f968 	bl	801c68e <__retarget_lock_acquire_recursive>
 801b3be:	89a3      	ldrh	r3, [r4, #12]
 801b3c0:	0719      	lsls	r1, r3, #28
 801b3c2:	d51d      	bpl.n	801b400 <_puts_r+0x78>
 801b3c4:	6923      	ldr	r3, [r4, #16]
 801b3c6:	b1db      	cbz	r3, 801b400 <_puts_r+0x78>
 801b3c8:	3e01      	subs	r6, #1
 801b3ca:	68a3      	ldr	r3, [r4, #8]
 801b3cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b3d0:	3b01      	subs	r3, #1
 801b3d2:	60a3      	str	r3, [r4, #8]
 801b3d4:	bb39      	cbnz	r1, 801b426 <_puts_r+0x9e>
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	da38      	bge.n	801b44c <_puts_r+0xc4>
 801b3da:	4622      	mov	r2, r4
 801b3dc:	210a      	movs	r1, #10
 801b3de:	4628      	mov	r0, r5
 801b3e0:	f000 f85c 	bl	801b49c <__swbuf_r>
 801b3e4:	3001      	adds	r0, #1
 801b3e6:	d011      	beq.n	801b40c <_puts_r+0x84>
 801b3e8:	250a      	movs	r5, #10
 801b3ea:	e011      	b.n	801b410 <_puts_r+0x88>
 801b3ec:	4b1b      	ldr	r3, [pc, #108]	; (801b45c <_puts_r+0xd4>)
 801b3ee:	429c      	cmp	r4, r3
 801b3f0:	d101      	bne.n	801b3f6 <_puts_r+0x6e>
 801b3f2:	68ac      	ldr	r4, [r5, #8]
 801b3f4:	e7da      	b.n	801b3ac <_puts_r+0x24>
 801b3f6:	4b1a      	ldr	r3, [pc, #104]	; (801b460 <_puts_r+0xd8>)
 801b3f8:	429c      	cmp	r4, r3
 801b3fa:	bf08      	it	eq
 801b3fc:	68ec      	ldreq	r4, [r5, #12]
 801b3fe:	e7d5      	b.n	801b3ac <_puts_r+0x24>
 801b400:	4621      	mov	r1, r4
 801b402:	4628      	mov	r0, r5
 801b404:	f000 f89c 	bl	801b540 <__swsetup_r>
 801b408:	2800      	cmp	r0, #0
 801b40a:	d0dd      	beq.n	801b3c8 <_puts_r+0x40>
 801b40c:	f04f 35ff 	mov.w	r5, #4294967295
 801b410:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b412:	07da      	lsls	r2, r3, #31
 801b414:	d405      	bmi.n	801b422 <_puts_r+0x9a>
 801b416:	89a3      	ldrh	r3, [r4, #12]
 801b418:	059b      	lsls	r3, r3, #22
 801b41a:	d402      	bmi.n	801b422 <_puts_r+0x9a>
 801b41c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b41e:	f001 f937 	bl	801c690 <__retarget_lock_release_recursive>
 801b422:	4628      	mov	r0, r5
 801b424:	bd70      	pop	{r4, r5, r6, pc}
 801b426:	2b00      	cmp	r3, #0
 801b428:	da04      	bge.n	801b434 <_puts_r+0xac>
 801b42a:	69a2      	ldr	r2, [r4, #24]
 801b42c:	429a      	cmp	r2, r3
 801b42e:	dc06      	bgt.n	801b43e <_puts_r+0xb6>
 801b430:	290a      	cmp	r1, #10
 801b432:	d004      	beq.n	801b43e <_puts_r+0xb6>
 801b434:	6823      	ldr	r3, [r4, #0]
 801b436:	1c5a      	adds	r2, r3, #1
 801b438:	6022      	str	r2, [r4, #0]
 801b43a:	7019      	strb	r1, [r3, #0]
 801b43c:	e7c5      	b.n	801b3ca <_puts_r+0x42>
 801b43e:	4622      	mov	r2, r4
 801b440:	4628      	mov	r0, r5
 801b442:	f000 f82b 	bl	801b49c <__swbuf_r>
 801b446:	3001      	adds	r0, #1
 801b448:	d1bf      	bne.n	801b3ca <_puts_r+0x42>
 801b44a:	e7df      	b.n	801b40c <_puts_r+0x84>
 801b44c:	6823      	ldr	r3, [r4, #0]
 801b44e:	250a      	movs	r5, #10
 801b450:	1c5a      	adds	r2, r3, #1
 801b452:	6022      	str	r2, [r4, #0]
 801b454:	701d      	strb	r5, [r3, #0]
 801b456:	e7db      	b.n	801b410 <_puts_r+0x88>
 801b458:	0801dbd0 	.word	0x0801dbd0
 801b45c:	0801dbf0 	.word	0x0801dbf0
 801b460:	0801dbb0 	.word	0x0801dbb0

0801b464 <puts>:
 801b464:	4b02      	ldr	r3, [pc, #8]	; (801b470 <puts+0xc>)
 801b466:	4601      	mov	r1, r0
 801b468:	6818      	ldr	r0, [r3, #0]
 801b46a:	f7ff bf8d 	b.w	801b388 <_puts_r>
 801b46e:	bf00      	nop
 801b470:	2000007c 	.word	0x2000007c

0801b474 <strncpy>:
 801b474:	b510      	push	{r4, lr}
 801b476:	3901      	subs	r1, #1
 801b478:	4603      	mov	r3, r0
 801b47a:	b132      	cbz	r2, 801b48a <strncpy+0x16>
 801b47c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b480:	f803 4b01 	strb.w	r4, [r3], #1
 801b484:	3a01      	subs	r2, #1
 801b486:	2c00      	cmp	r4, #0
 801b488:	d1f7      	bne.n	801b47a <strncpy+0x6>
 801b48a:	441a      	add	r2, r3
 801b48c:	2100      	movs	r1, #0
 801b48e:	4293      	cmp	r3, r2
 801b490:	d100      	bne.n	801b494 <strncpy+0x20>
 801b492:	bd10      	pop	{r4, pc}
 801b494:	f803 1b01 	strb.w	r1, [r3], #1
 801b498:	e7f9      	b.n	801b48e <strncpy+0x1a>
	...

0801b49c <__swbuf_r>:
 801b49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b49e:	460e      	mov	r6, r1
 801b4a0:	4614      	mov	r4, r2
 801b4a2:	4605      	mov	r5, r0
 801b4a4:	b118      	cbz	r0, 801b4ae <__swbuf_r+0x12>
 801b4a6:	6983      	ldr	r3, [r0, #24]
 801b4a8:	b90b      	cbnz	r3, 801b4ae <__swbuf_r+0x12>
 801b4aa:	f001 f84d 	bl	801c548 <__sinit>
 801b4ae:	4b21      	ldr	r3, [pc, #132]	; (801b534 <__swbuf_r+0x98>)
 801b4b0:	429c      	cmp	r4, r3
 801b4b2:	d12b      	bne.n	801b50c <__swbuf_r+0x70>
 801b4b4:	686c      	ldr	r4, [r5, #4]
 801b4b6:	69a3      	ldr	r3, [r4, #24]
 801b4b8:	60a3      	str	r3, [r4, #8]
 801b4ba:	89a3      	ldrh	r3, [r4, #12]
 801b4bc:	071a      	lsls	r2, r3, #28
 801b4be:	d52f      	bpl.n	801b520 <__swbuf_r+0x84>
 801b4c0:	6923      	ldr	r3, [r4, #16]
 801b4c2:	b36b      	cbz	r3, 801b520 <__swbuf_r+0x84>
 801b4c4:	6923      	ldr	r3, [r4, #16]
 801b4c6:	6820      	ldr	r0, [r4, #0]
 801b4c8:	1ac0      	subs	r0, r0, r3
 801b4ca:	6963      	ldr	r3, [r4, #20]
 801b4cc:	b2f6      	uxtb	r6, r6
 801b4ce:	4283      	cmp	r3, r0
 801b4d0:	4637      	mov	r7, r6
 801b4d2:	dc04      	bgt.n	801b4de <__swbuf_r+0x42>
 801b4d4:	4621      	mov	r1, r4
 801b4d6:	4628      	mov	r0, r5
 801b4d8:	f000 ffa2 	bl	801c420 <_fflush_r>
 801b4dc:	bb30      	cbnz	r0, 801b52c <__swbuf_r+0x90>
 801b4de:	68a3      	ldr	r3, [r4, #8]
 801b4e0:	3b01      	subs	r3, #1
 801b4e2:	60a3      	str	r3, [r4, #8]
 801b4e4:	6823      	ldr	r3, [r4, #0]
 801b4e6:	1c5a      	adds	r2, r3, #1
 801b4e8:	6022      	str	r2, [r4, #0]
 801b4ea:	701e      	strb	r6, [r3, #0]
 801b4ec:	6963      	ldr	r3, [r4, #20]
 801b4ee:	3001      	adds	r0, #1
 801b4f0:	4283      	cmp	r3, r0
 801b4f2:	d004      	beq.n	801b4fe <__swbuf_r+0x62>
 801b4f4:	89a3      	ldrh	r3, [r4, #12]
 801b4f6:	07db      	lsls	r3, r3, #31
 801b4f8:	d506      	bpl.n	801b508 <__swbuf_r+0x6c>
 801b4fa:	2e0a      	cmp	r6, #10
 801b4fc:	d104      	bne.n	801b508 <__swbuf_r+0x6c>
 801b4fe:	4621      	mov	r1, r4
 801b500:	4628      	mov	r0, r5
 801b502:	f000 ff8d 	bl	801c420 <_fflush_r>
 801b506:	b988      	cbnz	r0, 801b52c <__swbuf_r+0x90>
 801b508:	4638      	mov	r0, r7
 801b50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b50c:	4b0a      	ldr	r3, [pc, #40]	; (801b538 <__swbuf_r+0x9c>)
 801b50e:	429c      	cmp	r4, r3
 801b510:	d101      	bne.n	801b516 <__swbuf_r+0x7a>
 801b512:	68ac      	ldr	r4, [r5, #8]
 801b514:	e7cf      	b.n	801b4b6 <__swbuf_r+0x1a>
 801b516:	4b09      	ldr	r3, [pc, #36]	; (801b53c <__swbuf_r+0xa0>)
 801b518:	429c      	cmp	r4, r3
 801b51a:	bf08      	it	eq
 801b51c:	68ec      	ldreq	r4, [r5, #12]
 801b51e:	e7ca      	b.n	801b4b6 <__swbuf_r+0x1a>
 801b520:	4621      	mov	r1, r4
 801b522:	4628      	mov	r0, r5
 801b524:	f000 f80c 	bl	801b540 <__swsetup_r>
 801b528:	2800      	cmp	r0, #0
 801b52a:	d0cb      	beq.n	801b4c4 <__swbuf_r+0x28>
 801b52c:	f04f 37ff 	mov.w	r7, #4294967295
 801b530:	e7ea      	b.n	801b508 <__swbuf_r+0x6c>
 801b532:	bf00      	nop
 801b534:	0801dbd0 	.word	0x0801dbd0
 801b538:	0801dbf0 	.word	0x0801dbf0
 801b53c:	0801dbb0 	.word	0x0801dbb0

0801b540 <__swsetup_r>:
 801b540:	4b32      	ldr	r3, [pc, #200]	; (801b60c <__swsetup_r+0xcc>)
 801b542:	b570      	push	{r4, r5, r6, lr}
 801b544:	681d      	ldr	r5, [r3, #0]
 801b546:	4606      	mov	r6, r0
 801b548:	460c      	mov	r4, r1
 801b54a:	b125      	cbz	r5, 801b556 <__swsetup_r+0x16>
 801b54c:	69ab      	ldr	r3, [r5, #24]
 801b54e:	b913      	cbnz	r3, 801b556 <__swsetup_r+0x16>
 801b550:	4628      	mov	r0, r5
 801b552:	f000 fff9 	bl	801c548 <__sinit>
 801b556:	4b2e      	ldr	r3, [pc, #184]	; (801b610 <__swsetup_r+0xd0>)
 801b558:	429c      	cmp	r4, r3
 801b55a:	d10f      	bne.n	801b57c <__swsetup_r+0x3c>
 801b55c:	686c      	ldr	r4, [r5, #4]
 801b55e:	89a3      	ldrh	r3, [r4, #12]
 801b560:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b564:	0719      	lsls	r1, r3, #28
 801b566:	d42c      	bmi.n	801b5c2 <__swsetup_r+0x82>
 801b568:	06dd      	lsls	r5, r3, #27
 801b56a:	d411      	bmi.n	801b590 <__swsetup_r+0x50>
 801b56c:	2309      	movs	r3, #9
 801b56e:	6033      	str	r3, [r6, #0]
 801b570:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b574:	81a3      	strh	r3, [r4, #12]
 801b576:	f04f 30ff 	mov.w	r0, #4294967295
 801b57a:	e03e      	b.n	801b5fa <__swsetup_r+0xba>
 801b57c:	4b25      	ldr	r3, [pc, #148]	; (801b614 <__swsetup_r+0xd4>)
 801b57e:	429c      	cmp	r4, r3
 801b580:	d101      	bne.n	801b586 <__swsetup_r+0x46>
 801b582:	68ac      	ldr	r4, [r5, #8]
 801b584:	e7eb      	b.n	801b55e <__swsetup_r+0x1e>
 801b586:	4b24      	ldr	r3, [pc, #144]	; (801b618 <__swsetup_r+0xd8>)
 801b588:	429c      	cmp	r4, r3
 801b58a:	bf08      	it	eq
 801b58c:	68ec      	ldreq	r4, [r5, #12]
 801b58e:	e7e6      	b.n	801b55e <__swsetup_r+0x1e>
 801b590:	0758      	lsls	r0, r3, #29
 801b592:	d512      	bpl.n	801b5ba <__swsetup_r+0x7a>
 801b594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b596:	b141      	cbz	r1, 801b5aa <__swsetup_r+0x6a>
 801b598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b59c:	4299      	cmp	r1, r3
 801b59e:	d002      	beq.n	801b5a6 <__swsetup_r+0x66>
 801b5a0:	4630      	mov	r0, r6
 801b5a2:	f001 fc7d 	bl	801cea0 <_free_r>
 801b5a6:	2300      	movs	r3, #0
 801b5a8:	6363      	str	r3, [r4, #52]	; 0x34
 801b5aa:	89a3      	ldrh	r3, [r4, #12]
 801b5ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b5b0:	81a3      	strh	r3, [r4, #12]
 801b5b2:	2300      	movs	r3, #0
 801b5b4:	6063      	str	r3, [r4, #4]
 801b5b6:	6923      	ldr	r3, [r4, #16]
 801b5b8:	6023      	str	r3, [r4, #0]
 801b5ba:	89a3      	ldrh	r3, [r4, #12]
 801b5bc:	f043 0308 	orr.w	r3, r3, #8
 801b5c0:	81a3      	strh	r3, [r4, #12]
 801b5c2:	6923      	ldr	r3, [r4, #16]
 801b5c4:	b94b      	cbnz	r3, 801b5da <__swsetup_r+0x9a>
 801b5c6:	89a3      	ldrh	r3, [r4, #12]
 801b5c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b5cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b5d0:	d003      	beq.n	801b5da <__swsetup_r+0x9a>
 801b5d2:	4621      	mov	r1, r4
 801b5d4:	4630      	mov	r0, r6
 801b5d6:	f001 f881 	bl	801c6dc <__smakebuf_r>
 801b5da:	89a0      	ldrh	r0, [r4, #12]
 801b5dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b5e0:	f010 0301 	ands.w	r3, r0, #1
 801b5e4:	d00a      	beq.n	801b5fc <__swsetup_r+0xbc>
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	60a3      	str	r3, [r4, #8]
 801b5ea:	6963      	ldr	r3, [r4, #20]
 801b5ec:	425b      	negs	r3, r3
 801b5ee:	61a3      	str	r3, [r4, #24]
 801b5f0:	6923      	ldr	r3, [r4, #16]
 801b5f2:	b943      	cbnz	r3, 801b606 <__swsetup_r+0xc6>
 801b5f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b5f8:	d1ba      	bne.n	801b570 <__swsetup_r+0x30>
 801b5fa:	bd70      	pop	{r4, r5, r6, pc}
 801b5fc:	0781      	lsls	r1, r0, #30
 801b5fe:	bf58      	it	pl
 801b600:	6963      	ldrpl	r3, [r4, #20]
 801b602:	60a3      	str	r3, [r4, #8]
 801b604:	e7f4      	b.n	801b5f0 <__swsetup_r+0xb0>
 801b606:	2000      	movs	r0, #0
 801b608:	e7f7      	b.n	801b5fa <__swsetup_r+0xba>
 801b60a:	bf00      	nop
 801b60c:	2000007c 	.word	0x2000007c
 801b610:	0801dbd0 	.word	0x0801dbd0
 801b614:	0801dbf0 	.word	0x0801dbf0
 801b618:	0801dbb0 	.word	0x0801dbb0

0801b61c <quorem>:
 801b61c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b620:	6903      	ldr	r3, [r0, #16]
 801b622:	690c      	ldr	r4, [r1, #16]
 801b624:	42a3      	cmp	r3, r4
 801b626:	4607      	mov	r7, r0
 801b628:	f2c0 8081 	blt.w	801b72e <quorem+0x112>
 801b62c:	3c01      	subs	r4, #1
 801b62e:	f101 0814 	add.w	r8, r1, #20
 801b632:	f100 0514 	add.w	r5, r0, #20
 801b636:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b63a:	9301      	str	r3, [sp, #4]
 801b63c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b640:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b644:	3301      	adds	r3, #1
 801b646:	429a      	cmp	r2, r3
 801b648:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b64c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b650:	fbb2 f6f3 	udiv	r6, r2, r3
 801b654:	d331      	bcc.n	801b6ba <quorem+0x9e>
 801b656:	f04f 0e00 	mov.w	lr, #0
 801b65a:	4640      	mov	r0, r8
 801b65c:	46ac      	mov	ip, r5
 801b65e:	46f2      	mov	sl, lr
 801b660:	f850 2b04 	ldr.w	r2, [r0], #4
 801b664:	b293      	uxth	r3, r2
 801b666:	fb06 e303 	mla	r3, r6, r3, lr
 801b66a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b66e:	b29b      	uxth	r3, r3
 801b670:	ebaa 0303 	sub.w	r3, sl, r3
 801b674:	f8dc a000 	ldr.w	sl, [ip]
 801b678:	0c12      	lsrs	r2, r2, #16
 801b67a:	fa13 f38a 	uxtah	r3, r3, sl
 801b67e:	fb06 e202 	mla	r2, r6, r2, lr
 801b682:	9300      	str	r3, [sp, #0]
 801b684:	9b00      	ldr	r3, [sp, #0]
 801b686:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b68a:	b292      	uxth	r2, r2
 801b68c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b690:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b694:	f8bd 3000 	ldrh.w	r3, [sp]
 801b698:	4581      	cmp	r9, r0
 801b69a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b69e:	f84c 3b04 	str.w	r3, [ip], #4
 801b6a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b6a6:	d2db      	bcs.n	801b660 <quorem+0x44>
 801b6a8:	f855 300b 	ldr.w	r3, [r5, fp]
 801b6ac:	b92b      	cbnz	r3, 801b6ba <quorem+0x9e>
 801b6ae:	9b01      	ldr	r3, [sp, #4]
 801b6b0:	3b04      	subs	r3, #4
 801b6b2:	429d      	cmp	r5, r3
 801b6b4:	461a      	mov	r2, r3
 801b6b6:	d32e      	bcc.n	801b716 <quorem+0xfa>
 801b6b8:	613c      	str	r4, [r7, #16]
 801b6ba:	4638      	mov	r0, r7
 801b6bc:	f001 fad8 	bl	801cc70 <__mcmp>
 801b6c0:	2800      	cmp	r0, #0
 801b6c2:	db24      	blt.n	801b70e <quorem+0xf2>
 801b6c4:	3601      	adds	r6, #1
 801b6c6:	4628      	mov	r0, r5
 801b6c8:	f04f 0c00 	mov.w	ip, #0
 801b6cc:	f858 2b04 	ldr.w	r2, [r8], #4
 801b6d0:	f8d0 e000 	ldr.w	lr, [r0]
 801b6d4:	b293      	uxth	r3, r2
 801b6d6:	ebac 0303 	sub.w	r3, ip, r3
 801b6da:	0c12      	lsrs	r2, r2, #16
 801b6dc:	fa13 f38e 	uxtah	r3, r3, lr
 801b6e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b6e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b6e8:	b29b      	uxth	r3, r3
 801b6ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b6ee:	45c1      	cmp	r9, r8
 801b6f0:	f840 3b04 	str.w	r3, [r0], #4
 801b6f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b6f8:	d2e8      	bcs.n	801b6cc <quorem+0xb0>
 801b6fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b6fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b702:	b922      	cbnz	r2, 801b70e <quorem+0xf2>
 801b704:	3b04      	subs	r3, #4
 801b706:	429d      	cmp	r5, r3
 801b708:	461a      	mov	r2, r3
 801b70a:	d30a      	bcc.n	801b722 <quorem+0x106>
 801b70c:	613c      	str	r4, [r7, #16]
 801b70e:	4630      	mov	r0, r6
 801b710:	b003      	add	sp, #12
 801b712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b716:	6812      	ldr	r2, [r2, #0]
 801b718:	3b04      	subs	r3, #4
 801b71a:	2a00      	cmp	r2, #0
 801b71c:	d1cc      	bne.n	801b6b8 <quorem+0x9c>
 801b71e:	3c01      	subs	r4, #1
 801b720:	e7c7      	b.n	801b6b2 <quorem+0x96>
 801b722:	6812      	ldr	r2, [r2, #0]
 801b724:	3b04      	subs	r3, #4
 801b726:	2a00      	cmp	r2, #0
 801b728:	d1f0      	bne.n	801b70c <quorem+0xf0>
 801b72a:	3c01      	subs	r4, #1
 801b72c:	e7eb      	b.n	801b706 <quorem+0xea>
 801b72e:	2000      	movs	r0, #0
 801b730:	e7ee      	b.n	801b710 <quorem+0xf4>
 801b732:	0000      	movs	r0, r0
 801b734:	0000      	movs	r0, r0
	...

0801b738 <_dtoa_r>:
 801b738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b73c:	ed2d 8b04 	vpush	{d8-d9}
 801b740:	ec57 6b10 	vmov	r6, r7, d0
 801b744:	b093      	sub	sp, #76	; 0x4c
 801b746:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b748:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b74c:	9106      	str	r1, [sp, #24]
 801b74e:	ee10 aa10 	vmov	sl, s0
 801b752:	4604      	mov	r4, r0
 801b754:	9209      	str	r2, [sp, #36]	; 0x24
 801b756:	930c      	str	r3, [sp, #48]	; 0x30
 801b758:	46bb      	mov	fp, r7
 801b75a:	b975      	cbnz	r5, 801b77a <_dtoa_r+0x42>
 801b75c:	2010      	movs	r0, #16
 801b75e:	f000 fffd 	bl	801c75c <malloc>
 801b762:	4602      	mov	r2, r0
 801b764:	6260      	str	r0, [r4, #36]	; 0x24
 801b766:	b920      	cbnz	r0, 801b772 <_dtoa_r+0x3a>
 801b768:	4ba7      	ldr	r3, [pc, #668]	; (801ba08 <_dtoa_r+0x2d0>)
 801b76a:	21ea      	movs	r1, #234	; 0xea
 801b76c:	48a7      	ldr	r0, [pc, #668]	; (801ba0c <_dtoa_r+0x2d4>)
 801b76e:	f001 fe7f 	bl	801d470 <__assert_func>
 801b772:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b776:	6005      	str	r5, [r0, #0]
 801b778:	60c5      	str	r5, [r0, #12]
 801b77a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b77c:	6819      	ldr	r1, [r3, #0]
 801b77e:	b151      	cbz	r1, 801b796 <_dtoa_r+0x5e>
 801b780:	685a      	ldr	r2, [r3, #4]
 801b782:	604a      	str	r2, [r1, #4]
 801b784:	2301      	movs	r3, #1
 801b786:	4093      	lsls	r3, r2
 801b788:	608b      	str	r3, [r1, #8]
 801b78a:	4620      	mov	r0, r4
 801b78c:	f001 f82e 	bl	801c7ec <_Bfree>
 801b790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b792:	2200      	movs	r2, #0
 801b794:	601a      	str	r2, [r3, #0]
 801b796:	1e3b      	subs	r3, r7, #0
 801b798:	bfaa      	itet	ge
 801b79a:	2300      	movge	r3, #0
 801b79c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801b7a0:	f8c8 3000 	strge.w	r3, [r8]
 801b7a4:	4b9a      	ldr	r3, [pc, #616]	; (801ba10 <_dtoa_r+0x2d8>)
 801b7a6:	bfbc      	itt	lt
 801b7a8:	2201      	movlt	r2, #1
 801b7aa:	f8c8 2000 	strlt.w	r2, [r8]
 801b7ae:	ea33 030b 	bics.w	r3, r3, fp
 801b7b2:	d11b      	bne.n	801b7ec <_dtoa_r+0xb4>
 801b7b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b7b6:	f242 730f 	movw	r3, #9999	; 0x270f
 801b7ba:	6013      	str	r3, [r2, #0]
 801b7bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b7c0:	4333      	orrs	r3, r6
 801b7c2:	f000 8592 	beq.w	801c2ea <_dtoa_r+0xbb2>
 801b7c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b7c8:	b963      	cbnz	r3, 801b7e4 <_dtoa_r+0xac>
 801b7ca:	4b92      	ldr	r3, [pc, #584]	; (801ba14 <_dtoa_r+0x2dc>)
 801b7cc:	e022      	b.n	801b814 <_dtoa_r+0xdc>
 801b7ce:	4b92      	ldr	r3, [pc, #584]	; (801ba18 <_dtoa_r+0x2e0>)
 801b7d0:	9301      	str	r3, [sp, #4]
 801b7d2:	3308      	adds	r3, #8
 801b7d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b7d6:	6013      	str	r3, [r2, #0]
 801b7d8:	9801      	ldr	r0, [sp, #4]
 801b7da:	b013      	add	sp, #76	; 0x4c
 801b7dc:	ecbd 8b04 	vpop	{d8-d9}
 801b7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7e4:	4b8b      	ldr	r3, [pc, #556]	; (801ba14 <_dtoa_r+0x2dc>)
 801b7e6:	9301      	str	r3, [sp, #4]
 801b7e8:	3303      	adds	r3, #3
 801b7ea:	e7f3      	b.n	801b7d4 <_dtoa_r+0x9c>
 801b7ec:	2200      	movs	r2, #0
 801b7ee:	2300      	movs	r3, #0
 801b7f0:	4650      	mov	r0, sl
 801b7f2:	4659      	mov	r1, fp
 801b7f4:	f7e5 f940 	bl	8000a78 <__aeabi_dcmpeq>
 801b7f8:	ec4b ab19 	vmov	d9, sl, fp
 801b7fc:	4680      	mov	r8, r0
 801b7fe:	b158      	cbz	r0, 801b818 <_dtoa_r+0xe0>
 801b800:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b802:	2301      	movs	r3, #1
 801b804:	6013      	str	r3, [r2, #0]
 801b806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b808:	2b00      	cmp	r3, #0
 801b80a:	f000 856b 	beq.w	801c2e4 <_dtoa_r+0xbac>
 801b80e:	4883      	ldr	r0, [pc, #524]	; (801ba1c <_dtoa_r+0x2e4>)
 801b810:	6018      	str	r0, [r3, #0]
 801b812:	1e43      	subs	r3, r0, #1
 801b814:	9301      	str	r3, [sp, #4]
 801b816:	e7df      	b.n	801b7d8 <_dtoa_r+0xa0>
 801b818:	ec4b ab10 	vmov	d0, sl, fp
 801b81c:	aa10      	add	r2, sp, #64	; 0x40
 801b81e:	a911      	add	r1, sp, #68	; 0x44
 801b820:	4620      	mov	r0, r4
 801b822:	f001 facb 	bl	801cdbc <__d2b>
 801b826:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801b82a:	ee08 0a10 	vmov	s16, r0
 801b82e:	2d00      	cmp	r5, #0
 801b830:	f000 8084 	beq.w	801b93c <_dtoa_r+0x204>
 801b834:	ee19 3a90 	vmov	r3, s19
 801b838:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b83c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b840:	4656      	mov	r6, sl
 801b842:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b846:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b84a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b84e:	4b74      	ldr	r3, [pc, #464]	; (801ba20 <_dtoa_r+0x2e8>)
 801b850:	2200      	movs	r2, #0
 801b852:	4630      	mov	r0, r6
 801b854:	4639      	mov	r1, r7
 801b856:	f7e4 fcef 	bl	8000238 <__aeabi_dsub>
 801b85a:	a365      	add	r3, pc, #404	; (adr r3, 801b9f0 <_dtoa_r+0x2b8>)
 801b85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b860:	f7e4 fea2 	bl	80005a8 <__aeabi_dmul>
 801b864:	a364      	add	r3, pc, #400	; (adr r3, 801b9f8 <_dtoa_r+0x2c0>)
 801b866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b86a:	f7e4 fce7 	bl	800023c <__adddf3>
 801b86e:	4606      	mov	r6, r0
 801b870:	4628      	mov	r0, r5
 801b872:	460f      	mov	r7, r1
 801b874:	f7e4 fe2e 	bl	80004d4 <__aeabi_i2d>
 801b878:	a361      	add	r3, pc, #388	; (adr r3, 801ba00 <_dtoa_r+0x2c8>)
 801b87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b87e:	f7e4 fe93 	bl	80005a8 <__aeabi_dmul>
 801b882:	4602      	mov	r2, r0
 801b884:	460b      	mov	r3, r1
 801b886:	4630      	mov	r0, r6
 801b888:	4639      	mov	r1, r7
 801b88a:	f7e4 fcd7 	bl	800023c <__adddf3>
 801b88e:	4606      	mov	r6, r0
 801b890:	460f      	mov	r7, r1
 801b892:	f7e5 f939 	bl	8000b08 <__aeabi_d2iz>
 801b896:	2200      	movs	r2, #0
 801b898:	9000      	str	r0, [sp, #0]
 801b89a:	2300      	movs	r3, #0
 801b89c:	4630      	mov	r0, r6
 801b89e:	4639      	mov	r1, r7
 801b8a0:	f7e5 f8f4 	bl	8000a8c <__aeabi_dcmplt>
 801b8a4:	b150      	cbz	r0, 801b8bc <_dtoa_r+0x184>
 801b8a6:	9800      	ldr	r0, [sp, #0]
 801b8a8:	f7e4 fe14 	bl	80004d4 <__aeabi_i2d>
 801b8ac:	4632      	mov	r2, r6
 801b8ae:	463b      	mov	r3, r7
 801b8b0:	f7e5 f8e2 	bl	8000a78 <__aeabi_dcmpeq>
 801b8b4:	b910      	cbnz	r0, 801b8bc <_dtoa_r+0x184>
 801b8b6:	9b00      	ldr	r3, [sp, #0]
 801b8b8:	3b01      	subs	r3, #1
 801b8ba:	9300      	str	r3, [sp, #0]
 801b8bc:	9b00      	ldr	r3, [sp, #0]
 801b8be:	2b16      	cmp	r3, #22
 801b8c0:	d85a      	bhi.n	801b978 <_dtoa_r+0x240>
 801b8c2:	9a00      	ldr	r2, [sp, #0]
 801b8c4:	4b57      	ldr	r3, [pc, #348]	; (801ba24 <_dtoa_r+0x2ec>)
 801b8c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ce:	ec51 0b19 	vmov	r0, r1, d9
 801b8d2:	f7e5 f8db 	bl	8000a8c <__aeabi_dcmplt>
 801b8d6:	2800      	cmp	r0, #0
 801b8d8:	d050      	beq.n	801b97c <_dtoa_r+0x244>
 801b8da:	9b00      	ldr	r3, [sp, #0]
 801b8dc:	3b01      	subs	r3, #1
 801b8de:	9300      	str	r3, [sp, #0]
 801b8e0:	2300      	movs	r3, #0
 801b8e2:	930b      	str	r3, [sp, #44]	; 0x2c
 801b8e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b8e6:	1b5d      	subs	r5, r3, r5
 801b8e8:	1e6b      	subs	r3, r5, #1
 801b8ea:	9305      	str	r3, [sp, #20]
 801b8ec:	bf45      	ittet	mi
 801b8ee:	f1c5 0301 	rsbmi	r3, r5, #1
 801b8f2:	9304      	strmi	r3, [sp, #16]
 801b8f4:	2300      	movpl	r3, #0
 801b8f6:	2300      	movmi	r3, #0
 801b8f8:	bf4c      	ite	mi
 801b8fa:	9305      	strmi	r3, [sp, #20]
 801b8fc:	9304      	strpl	r3, [sp, #16]
 801b8fe:	9b00      	ldr	r3, [sp, #0]
 801b900:	2b00      	cmp	r3, #0
 801b902:	db3d      	blt.n	801b980 <_dtoa_r+0x248>
 801b904:	9b05      	ldr	r3, [sp, #20]
 801b906:	9a00      	ldr	r2, [sp, #0]
 801b908:	920a      	str	r2, [sp, #40]	; 0x28
 801b90a:	4413      	add	r3, r2
 801b90c:	9305      	str	r3, [sp, #20]
 801b90e:	2300      	movs	r3, #0
 801b910:	9307      	str	r3, [sp, #28]
 801b912:	9b06      	ldr	r3, [sp, #24]
 801b914:	2b09      	cmp	r3, #9
 801b916:	f200 8089 	bhi.w	801ba2c <_dtoa_r+0x2f4>
 801b91a:	2b05      	cmp	r3, #5
 801b91c:	bfc4      	itt	gt
 801b91e:	3b04      	subgt	r3, #4
 801b920:	9306      	strgt	r3, [sp, #24]
 801b922:	9b06      	ldr	r3, [sp, #24]
 801b924:	f1a3 0302 	sub.w	r3, r3, #2
 801b928:	bfcc      	ite	gt
 801b92a:	2500      	movgt	r5, #0
 801b92c:	2501      	movle	r5, #1
 801b92e:	2b03      	cmp	r3, #3
 801b930:	f200 8087 	bhi.w	801ba42 <_dtoa_r+0x30a>
 801b934:	e8df f003 	tbb	[pc, r3]
 801b938:	59383a2d 	.word	0x59383a2d
 801b93c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b940:	441d      	add	r5, r3
 801b942:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b946:	2b20      	cmp	r3, #32
 801b948:	bfc1      	itttt	gt
 801b94a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b94e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b952:	fa0b f303 	lslgt.w	r3, fp, r3
 801b956:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b95a:	bfda      	itte	le
 801b95c:	f1c3 0320 	rsble	r3, r3, #32
 801b960:	fa06 f003 	lslle.w	r0, r6, r3
 801b964:	4318      	orrgt	r0, r3
 801b966:	f7e4 fda5 	bl	80004b4 <__aeabi_ui2d>
 801b96a:	2301      	movs	r3, #1
 801b96c:	4606      	mov	r6, r0
 801b96e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b972:	3d01      	subs	r5, #1
 801b974:	930e      	str	r3, [sp, #56]	; 0x38
 801b976:	e76a      	b.n	801b84e <_dtoa_r+0x116>
 801b978:	2301      	movs	r3, #1
 801b97a:	e7b2      	b.n	801b8e2 <_dtoa_r+0x1aa>
 801b97c:	900b      	str	r0, [sp, #44]	; 0x2c
 801b97e:	e7b1      	b.n	801b8e4 <_dtoa_r+0x1ac>
 801b980:	9b04      	ldr	r3, [sp, #16]
 801b982:	9a00      	ldr	r2, [sp, #0]
 801b984:	1a9b      	subs	r3, r3, r2
 801b986:	9304      	str	r3, [sp, #16]
 801b988:	4253      	negs	r3, r2
 801b98a:	9307      	str	r3, [sp, #28]
 801b98c:	2300      	movs	r3, #0
 801b98e:	930a      	str	r3, [sp, #40]	; 0x28
 801b990:	e7bf      	b.n	801b912 <_dtoa_r+0x1da>
 801b992:	2300      	movs	r3, #0
 801b994:	9308      	str	r3, [sp, #32]
 801b996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b998:	2b00      	cmp	r3, #0
 801b99a:	dc55      	bgt.n	801ba48 <_dtoa_r+0x310>
 801b99c:	2301      	movs	r3, #1
 801b99e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b9a2:	461a      	mov	r2, r3
 801b9a4:	9209      	str	r2, [sp, #36]	; 0x24
 801b9a6:	e00c      	b.n	801b9c2 <_dtoa_r+0x28a>
 801b9a8:	2301      	movs	r3, #1
 801b9aa:	e7f3      	b.n	801b994 <_dtoa_r+0x25c>
 801b9ac:	2300      	movs	r3, #0
 801b9ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b9b0:	9308      	str	r3, [sp, #32]
 801b9b2:	9b00      	ldr	r3, [sp, #0]
 801b9b4:	4413      	add	r3, r2
 801b9b6:	9302      	str	r3, [sp, #8]
 801b9b8:	3301      	adds	r3, #1
 801b9ba:	2b01      	cmp	r3, #1
 801b9bc:	9303      	str	r3, [sp, #12]
 801b9be:	bfb8      	it	lt
 801b9c0:	2301      	movlt	r3, #1
 801b9c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b9c4:	2200      	movs	r2, #0
 801b9c6:	6042      	str	r2, [r0, #4]
 801b9c8:	2204      	movs	r2, #4
 801b9ca:	f102 0614 	add.w	r6, r2, #20
 801b9ce:	429e      	cmp	r6, r3
 801b9d0:	6841      	ldr	r1, [r0, #4]
 801b9d2:	d93d      	bls.n	801ba50 <_dtoa_r+0x318>
 801b9d4:	4620      	mov	r0, r4
 801b9d6:	f000 fec9 	bl	801c76c <_Balloc>
 801b9da:	9001      	str	r0, [sp, #4]
 801b9dc:	2800      	cmp	r0, #0
 801b9de:	d13b      	bne.n	801ba58 <_dtoa_r+0x320>
 801b9e0:	4b11      	ldr	r3, [pc, #68]	; (801ba28 <_dtoa_r+0x2f0>)
 801b9e2:	4602      	mov	r2, r0
 801b9e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b9e8:	e6c0      	b.n	801b76c <_dtoa_r+0x34>
 801b9ea:	2301      	movs	r3, #1
 801b9ec:	e7df      	b.n	801b9ae <_dtoa_r+0x276>
 801b9ee:	bf00      	nop
 801b9f0:	636f4361 	.word	0x636f4361
 801b9f4:	3fd287a7 	.word	0x3fd287a7
 801b9f8:	8b60c8b3 	.word	0x8b60c8b3
 801b9fc:	3fc68a28 	.word	0x3fc68a28
 801ba00:	509f79fb 	.word	0x509f79fb
 801ba04:	3fd34413 	.word	0x3fd34413
 801ba08:	0801db2d 	.word	0x0801db2d
 801ba0c:	0801db44 	.word	0x0801db44
 801ba10:	7ff00000 	.word	0x7ff00000
 801ba14:	0801db29 	.word	0x0801db29
 801ba18:	0801db20 	.word	0x0801db20
 801ba1c:	0801dafd 	.word	0x0801dafd
 801ba20:	3ff80000 	.word	0x3ff80000
 801ba24:	0801dc98 	.word	0x0801dc98
 801ba28:	0801db9f 	.word	0x0801db9f
 801ba2c:	2501      	movs	r5, #1
 801ba2e:	2300      	movs	r3, #0
 801ba30:	9306      	str	r3, [sp, #24]
 801ba32:	9508      	str	r5, [sp, #32]
 801ba34:	f04f 33ff 	mov.w	r3, #4294967295
 801ba38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ba3c:	2200      	movs	r2, #0
 801ba3e:	2312      	movs	r3, #18
 801ba40:	e7b0      	b.n	801b9a4 <_dtoa_r+0x26c>
 801ba42:	2301      	movs	r3, #1
 801ba44:	9308      	str	r3, [sp, #32]
 801ba46:	e7f5      	b.n	801ba34 <_dtoa_r+0x2fc>
 801ba48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ba4e:	e7b8      	b.n	801b9c2 <_dtoa_r+0x28a>
 801ba50:	3101      	adds	r1, #1
 801ba52:	6041      	str	r1, [r0, #4]
 801ba54:	0052      	lsls	r2, r2, #1
 801ba56:	e7b8      	b.n	801b9ca <_dtoa_r+0x292>
 801ba58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ba5a:	9a01      	ldr	r2, [sp, #4]
 801ba5c:	601a      	str	r2, [r3, #0]
 801ba5e:	9b03      	ldr	r3, [sp, #12]
 801ba60:	2b0e      	cmp	r3, #14
 801ba62:	f200 809d 	bhi.w	801bba0 <_dtoa_r+0x468>
 801ba66:	2d00      	cmp	r5, #0
 801ba68:	f000 809a 	beq.w	801bba0 <_dtoa_r+0x468>
 801ba6c:	9b00      	ldr	r3, [sp, #0]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	dd32      	ble.n	801bad8 <_dtoa_r+0x3a0>
 801ba72:	4ab7      	ldr	r2, [pc, #732]	; (801bd50 <_dtoa_r+0x618>)
 801ba74:	f003 030f 	and.w	r3, r3, #15
 801ba78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801ba7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ba80:	9b00      	ldr	r3, [sp, #0]
 801ba82:	05d8      	lsls	r0, r3, #23
 801ba84:	ea4f 1723 	mov.w	r7, r3, asr #4
 801ba88:	d516      	bpl.n	801bab8 <_dtoa_r+0x380>
 801ba8a:	4bb2      	ldr	r3, [pc, #712]	; (801bd54 <_dtoa_r+0x61c>)
 801ba8c:	ec51 0b19 	vmov	r0, r1, d9
 801ba90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ba94:	f7e4 feb2 	bl	80007fc <__aeabi_ddiv>
 801ba98:	f007 070f 	and.w	r7, r7, #15
 801ba9c:	4682      	mov	sl, r0
 801ba9e:	468b      	mov	fp, r1
 801baa0:	2503      	movs	r5, #3
 801baa2:	4eac      	ldr	r6, [pc, #688]	; (801bd54 <_dtoa_r+0x61c>)
 801baa4:	b957      	cbnz	r7, 801babc <_dtoa_r+0x384>
 801baa6:	4642      	mov	r2, r8
 801baa8:	464b      	mov	r3, r9
 801baaa:	4650      	mov	r0, sl
 801baac:	4659      	mov	r1, fp
 801baae:	f7e4 fea5 	bl	80007fc <__aeabi_ddiv>
 801bab2:	4682      	mov	sl, r0
 801bab4:	468b      	mov	fp, r1
 801bab6:	e028      	b.n	801bb0a <_dtoa_r+0x3d2>
 801bab8:	2502      	movs	r5, #2
 801baba:	e7f2      	b.n	801baa2 <_dtoa_r+0x36a>
 801babc:	07f9      	lsls	r1, r7, #31
 801babe:	d508      	bpl.n	801bad2 <_dtoa_r+0x39a>
 801bac0:	4640      	mov	r0, r8
 801bac2:	4649      	mov	r1, r9
 801bac4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bac8:	f7e4 fd6e 	bl	80005a8 <__aeabi_dmul>
 801bacc:	3501      	adds	r5, #1
 801bace:	4680      	mov	r8, r0
 801bad0:	4689      	mov	r9, r1
 801bad2:	107f      	asrs	r7, r7, #1
 801bad4:	3608      	adds	r6, #8
 801bad6:	e7e5      	b.n	801baa4 <_dtoa_r+0x36c>
 801bad8:	f000 809b 	beq.w	801bc12 <_dtoa_r+0x4da>
 801badc:	9b00      	ldr	r3, [sp, #0]
 801bade:	4f9d      	ldr	r7, [pc, #628]	; (801bd54 <_dtoa_r+0x61c>)
 801bae0:	425e      	negs	r6, r3
 801bae2:	4b9b      	ldr	r3, [pc, #620]	; (801bd50 <_dtoa_r+0x618>)
 801bae4:	f006 020f 	and.w	r2, r6, #15
 801bae8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801baec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baf0:	ec51 0b19 	vmov	r0, r1, d9
 801baf4:	f7e4 fd58 	bl	80005a8 <__aeabi_dmul>
 801baf8:	1136      	asrs	r6, r6, #4
 801bafa:	4682      	mov	sl, r0
 801bafc:	468b      	mov	fp, r1
 801bafe:	2300      	movs	r3, #0
 801bb00:	2502      	movs	r5, #2
 801bb02:	2e00      	cmp	r6, #0
 801bb04:	d17a      	bne.n	801bbfc <_dtoa_r+0x4c4>
 801bb06:	2b00      	cmp	r3, #0
 801bb08:	d1d3      	bne.n	801bab2 <_dtoa_r+0x37a>
 801bb0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	f000 8082 	beq.w	801bc16 <_dtoa_r+0x4de>
 801bb12:	4b91      	ldr	r3, [pc, #580]	; (801bd58 <_dtoa_r+0x620>)
 801bb14:	2200      	movs	r2, #0
 801bb16:	4650      	mov	r0, sl
 801bb18:	4659      	mov	r1, fp
 801bb1a:	f7e4 ffb7 	bl	8000a8c <__aeabi_dcmplt>
 801bb1e:	2800      	cmp	r0, #0
 801bb20:	d079      	beq.n	801bc16 <_dtoa_r+0x4de>
 801bb22:	9b03      	ldr	r3, [sp, #12]
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d076      	beq.n	801bc16 <_dtoa_r+0x4de>
 801bb28:	9b02      	ldr	r3, [sp, #8]
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	dd36      	ble.n	801bb9c <_dtoa_r+0x464>
 801bb2e:	9b00      	ldr	r3, [sp, #0]
 801bb30:	4650      	mov	r0, sl
 801bb32:	4659      	mov	r1, fp
 801bb34:	1e5f      	subs	r7, r3, #1
 801bb36:	2200      	movs	r2, #0
 801bb38:	4b88      	ldr	r3, [pc, #544]	; (801bd5c <_dtoa_r+0x624>)
 801bb3a:	f7e4 fd35 	bl	80005a8 <__aeabi_dmul>
 801bb3e:	9e02      	ldr	r6, [sp, #8]
 801bb40:	4682      	mov	sl, r0
 801bb42:	468b      	mov	fp, r1
 801bb44:	3501      	adds	r5, #1
 801bb46:	4628      	mov	r0, r5
 801bb48:	f7e4 fcc4 	bl	80004d4 <__aeabi_i2d>
 801bb4c:	4652      	mov	r2, sl
 801bb4e:	465b      	mov	r3, fp
 801bb50:	f7e4 fd2a 	bl	80005a8 <__aeabi_dmul>
 801bb54:	4b82      	ldr	r3, [pc, #520]	; (801bd60 <_dtoa_r+0x628>)
 801bb56:	2200      	movs	r2, #0
 801bb58:	f7e4 fb70 	bl	800023c <__adddf3>
 801bb5c:	46d0      	mov	r8, sl
 801bb5e:	46d9      	mov	r9, fp
 801bb60:	4682      	mov	sl, r0
 801bb62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801bb66:	2e00      	cmp	r6, #0
 801bb68:	d158      	bne.n	801bc1c <_dtoa_r+0x4e4>
 801bb6a:	4b7e      	ldr	r3, [pc, #504]	; (801bd64 <_dtoa_r+0x62c>)
 801bb6c:	2200      	movs	r2, #0
 801bb6e:	4640      	mov	r0, r8
 801bb70:	4649      	mov	r1, r9
 801bb72:	f7e4 fb61 	bl	8000238 <__aeabi_dsub>
 801bb76:	4652      	mov	r2, sl
 801bb78:	465b      	mov	r3, fp
 801bb7a:	4680      	mov	r8, r0
 801bb7c:	4689      	mov	r9, r1
 801bb7e:	f7e4 ffa3 	bl	8000ac8 <__aeabi_dcmpgt>
 801bb82:	2800      	cmp	r0, #0
 801bb84:	f040 8295 	bne.w	801c0b2 <_dtoa_r+0x97a>
 801bb88:	4652      	mov	r2, sl
 801bb8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801bb8e:	4640      	mov	r0, r8
 801bb90:	4649      	mov	r1, r9
 801bb92:	f7e4 ff7b 	bl	8000a8c <__aeabi_dcmplt>
 801bb96:	2800      	cmp	r0, #0
 801bb98:	f040 8289 	bne.w	801c0ae <_dtoa_r+0x976>
 801bb9c:	ec5b ab19 	vmov	sl, fp, d9
 801bba0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	f2c0 8148 	blt.w	801be38 <_dtoa_r+0x700>
 801bba8:	9a00      	ldr	r2, [sp, #0]
 801bbaa:	2a0e      	cmp	r2, #14
 801bbac:	f300 8144 	bgt.w	801be38 <_dtoa_r+0x700>
 801bbb0:	4b67      	ldr	r3, [pc, #412]	; (801bd50 <_dtoa_r+0x618>)
 801bbb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bbb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bbba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	f280 80d5 	bge.w	801bd6c <_dtoa_r+0x634>
 801bbc2:	9b03      	ldr	r3, [sp, #12]
 801bbc4:	2b00      	cmp	r3, #0
 801bbc6:	f300 80d1 	bgt.w	801bd6c <_dtoa_r+0x634>
 801bbca:	f040 826f 	bne.w	801c0ac <_dtoa_r+0x974>
 801bbce:	4b65      	ldr	r3, [pc, #404]	; (801bd64 <_dtoa_r+0x62c>)
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	4640      	mov	r0, r8
 801bbd4:	4649      	mov	r1, r9
 801bbd6:	f7e4 fce7 	bl	80005a8 <__aeabi_dmul>
 801bbda:	4652      	mov	r2, sl
 801bbdc:	465b      	mov	r3, fp
 801bbde:	f7e4 ff69 	bl	8000ab4 <__aeabi_dcmpge>
 801bbe2:	9e03      	ldr	r6, [sp, #12]
 801bbe4:	4637      	mov	r7, r6
 801bbe6:	2800      	cmp	r0, #0
 801bbe8:	f040 8245 	bne.w	801c076 <_dtoa_r+0x93e>
 801bbec:	9d01      	ldr	r5, [sp, #4]
 801bbee:	2331      	movs	r3, #49	; 0x31
 801bbf0:	f805 3b01 	strb.w	r3, [r5], #1
 801bbf4:	9b00      	ldr	r3, [sp, #0]
 801bbf6:	3301      	adds	r3, #1
 801bbf8:	9300      	str	r3, [sp, #0]
 801bbfa:	e240      	b.n	801c07e <_dtoa_r+0x946>
 801bbfc:	07f2      	lsls	r2, r6, #31
 801bbfe:	d505      	bpl.n	801bc0c <_dtoa_r+0x4d4>
 801bc00:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bc04:	f7e4 fcd0 	bl	80005a8 <__aeabi_dmul>
 801bc08:	3501      	adds	r5, #1
 801bc0a:	2301      	movs	r3, #1
 801bc0c:	1076      	asrs	r6, r6, #1
 801bc0e:	3708      	adds	r7, #8
 801bc10:	e777      	b.n	801bb02 <_dtoa_r+0x3ca>
 801bc12:	2502      	movs	r5, #2
 801bc14:	e779      	b.n	801bb0a <_dtoa_r+0x3d2>
 801bc16:	9f00      	ldr	r7, [sp, #0]
 801bc18:	9e03      	ldr	r6, [sp, #12]
 801bc1a:	e794      	b.n	801bb46 <_dtoa_r+0x40e>
 801bc1c:	9901      	ldr	r1, [sp, #4]
 801bc1e:	4b4c      	ldr	r3, [pc, #304]	; (801bd50 <_dtoa_r+0x618>)
 801bc20:	4431      	add	r1, r6
 801bc22:	910d      	str	r1, [sp, #52]	; 0x34
 801bc24:	9908      	ldr	r1, [sp, #32]
 801bc26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801bc2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bc2e:	2900      	cmp	r1, #0
 801bc30:	d043      	beq.n	801bcba <_dtoa_r+0x582>
 801bc32:	494d      	ldr	r1, [pc, #308]	; (801bd68 <_dtoa_r+0x630>)
 801bc34:	2000      	movs	r0, #0
 801bc36:	f7e4 fde1 	bl	80007fc <__aeabi_ddiv>
 801bc3a:	4652      	mov	r2, sl
 801bc3c:	465b      	mov	r3, fp
 801bc3e:	f7e4 fafb 	bl	8000238 <__aeabi_dsub>
 801bc42:	9d01      	ldr	r5, [sp, #4]
 801bc44:	4682      	mov	sl, r0
 801bc46:	468b      	mov	fp, r1
 801bc48:	4649      	mov	r1, r9
 801bc4a:	4640      	mov	r0, r8
 801bc4c:	f7e4 ff5c 	bl	8000b08 <__aeabi_d2iz>
 801bc50:	4606      	mov	r6, r0
 801bc52:	f7e4 fc3f 	bl	80004d4 <__aeabi_i2d>
 801bc56:	4602      	mov	r2, r0
 801bc58:	460b      	mov	r3, r1
 801bc5a:	4640      	mov	r0, r8
 801bc5c:	4649      	mov	r1, r9
 801bc5e:	f7e4 faeb 	bl	8000238 <__aeabi_dsub>
 801bc62:	3630      	adds	r6, #48	; 0x30
 801bc64:	f805 6b01 	strb.w	r6, [r5], #1
 801bc68:	4652      	mov	r2, sl
 801bc6a:	465b      	mov	r3, fp
 801bc6c:	4680      	mov	r8, r0
 801bc6e:	4689      	mov	r9, r1
 801bc70:	f7e4 ff0c 	bl	8000a8c <__aeabi_dcmplt>
 801bc74:	2800      	cmp	r0, #0
 801bc76:	d163      	bne.n	801bd40 <_dtoa_r+0x608>
 801bc78:	4642      	mov	r2, r8
 801bc7a:	464b      	mov	r3, r9
 801bc7c:	4936      	ldr	r1, [pc, #216]	; (801bd58 <_dtoa_r+0x620>)
 801bc7e:	2000      	movs	r0, #0
 801bc80:	f7e4 fada 	bl	8000238 <__aeabi_dsub>
 801bc84:	4652      	mov	r2, sl
 801bc86:	465b      	mov	r3, fp
 801bc88:	f7e4 ff00 	bl	8000a8c <__aeabi_dcmplt>
 801bc8c:	2800      	cmp	r0, #0
 801bc8e:	f040 80b5 	bne.w	801bdfc <_dtoa_r+0x6c4>
 801bc92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc94:	429d      	cmp	r5, r3
 801bc96:	d081      	beq.n	801bb9c <_dtoa_r+0x464>
 801bc98:	4b30      	ldr	r3, [pc, #192]	; (801bd5c <_dtoa_r+0x624>)
 801bc9a:	2200      	movs	r2, #0
 801bc9c:	4650      	mov	r0, sl
 801bc9e:	4659      	mov	r1, fp
 801bca0:	f7e4 fc82 	bl	80005a8 <__aeabi_dmul>
 801bca4:	4b2d      	ldr	r3, [pc, #180]	; (801bd5c <_dtoa_r+0x624>)
 801bca6:	4682      	mov	sl, r0
 801bca8:	468b      	mov	fp, r1
 801bcaa:	4640      	mov	r0, r8
 801bcac:	4649      	mov	r1, r9
 801bcae:	2200      	movs	r2, #0
 801bcb0:	f7e4 fc7a 	bl	80005a8 <__aeabi_dmul>
 801bcb4:	4680      	mov	r8, r0
 801bcb6:	4689      	mov	r9, r1
 801bcb8:	e7c6      	b.n	801bc48 <_dtoa_r+0x510>
 801bcba:	4650      	mov	r0, sl
 801bcbc:	4659      	mov	r1, fp
 801bcbe:	f7e4 fc73 	bl	80005a8 <__aeabi_dmul>
 801bcc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bcc4:	9d01      	ldr	r5, [sp, #4]
 801bcc6:	930f      	str	r3, [sp, #60]	; 0x3c
 801bcc8:	4682      	mov	sl, r0
 801bcca:	468b      	mov	fp, r1
 801bccc:	4649      	mov	r1, r9
 801bcce:	4640      	mov	r0, r8
 801bcd0:	f7e4 ff1a 	bl	8000b08 <__aeabi_d2iz>
 801bcd4:	4606      	mov	r6, r0
 801bcd6:	f7e4 fbfd 	bl	80004d4 <__aeabi_i2d>
 801bcda:	3630      	adds	r6, #48	; 0x30
 801bcdc:	4602      	mov	r2, r0
 801bcde:	460b      	mov	r3, r1
 801bce0:	4640      	mov	r0, r8
 801bce2:	4649      	mov	r1, r9
 801bce4:	f7e4 faa8 	bl	8000238 <__aeabi_dsub>
 801bce8:	f805 6b01 	strb.w	r6, [r5], #1
 801bcec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bcee:	429d      	cmp	r5, r3
 801bcf0:	4680      	mov	r8, r0
 801bcf2:	4689      	mov	r9, r1
 801bcf4:	f04f 0200 	mov.w	r2, #0
 801bcf8:	d124      	bne.n	801bd44 <_dtoa_r+0x60c>
 801bcfa:	4b1b      	ldr	r3, [pc, #108]	; (801bd68 <_dtoa_r+0x630>)
 801bcfc:	4650      	mov	r0, sl
 801bcfe:	4659      	mov	r1, fp
 801bd00:	f7e4 fa9c 	bl	800023c <__adddf3>
 801bd04:	4602      	mov	r2, r0
 801bd06:	460b      	mov	r3, r1
 801bd08:	4640      	mov	r0, r8
 801bd0a:	4649      	mov	r1, r9
 801bd0c:	f7e4 fedc 	bl	8000ac8 <__aeabi_dcmpgt>
 801bd10:	2800      	cmp	r0, #0
 801bd12:	d173      	bne.n	801bdfc <_dtoa_r+0x6c4>
 801bd14:	4652      	mov	r2, sl
 801bd16:	465b      	mov	r3, fp
 801bd18:	4913      	ldr	r1, [pc, #76]	; (801bd68 <_dtoa_r+0x630>)
 801bd1a:	2000      	movs	r0, #0
 801bd1c:	f7e4 fa8c 	bl	8000238 <__aeabi_dsub>
 801bd20:	4602      	mov	r2, r0
 801bd22:	460b      	mov	r3, r1
 801bd24:	4640      	mov	r0, r8
 801bd26:	4649      	mov	r1, r9
 801bd28:	f7e4 feb0 	bl	8000a8c <__aeabi_dcmplt>
 801bd2c:	2800      	cmp	r0, #0
 801bd2e:	f43f af35 	beq.w	801bb9c <_dtoa_r+0x464>
 801bd32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bd34:	1e6b      	subs	r3, r5, #1
 801bd36:	930f      	str	r3, [sp, #60]	; 0x3c
 801bd38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bd3c:	2b30      	cmp	r3, #48	; 0x30
 801bd3e:	d0f8      	beq.n	801bd32 <_dtoa_r+0x5fa>
 801bd40:	9700      	str	r7, [sp, #0]
 801bd42:	e049      	b.n	801bdd8 <_dtoa_r+0x6a0>
 801bd44:	4b05      	ldr	r3, [pc, #20]	; (801bd5c <_dtoa_r+0x624>)
 801bd46:	f7e4 fc2f 	bl	80005a8 <__aeabi_dmul>
 801bd4a:	4680      	mov	r8, r0
 801bd4c:	4689      	mov	r9, r1
 801bd4e:	e7bd      	b.n	801bccc <_dtoa_r+0x594>
 801bd50:	0801dc98 	.word	0x0801dc98
 801bd54:	0801dc70 	.word	0x0801dc70
 801bd58:	3ff00000 	.word	0x3ff00000
 801bd5c:	40240000 	.word	0x40240000
 801bd60:	401c0000 	.word	0x401c0000
 801bd64:	40140000 	.word	0x40140000
 801bd68:	3fe00000 	.word	0x3fe00000
 801bd6c:	9d01      	ldr	r5, [sp, #4]
 801bd6e:	4656      	mov	r6, sl
 801bd70:	465f      	mov	r7, fp
 801bd72:	4642      	mov	r2, r8
 801bd74:	464b      	mov	r3, r9
 801bd76:	4630      	mov	r0, r6
 801bd78:	4639      	mov	r1, r7
 801bd7a:	f7e4 fd3f 	bl	80007fc <__aeabi_ddiv>
 801bd7e:	f7e4 fec3 	bl	8000b08 <__aeabi_d2iz>
 801bd82:	4682      	mov	sl, r0
 801bd84:	f7e4 fba6 	bl	80004d4 <__aeabi_i2d>
 801bd88:	4642      	mov	r2, r8
 801bd8a:	464b      	mov	r3, r9
 801bd8c:	f7e4 fc0c 	bl	80005a8 <__aeabi_dmul>
 801bd90:	4602      	mov	r2, r0
 801bd92:	460b      	mov	r3, r1
 801bd94:	4630      	mov	r0, r6
 801bd96:	4639      	mov	r1, r7
 801bd98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801bd9c:	f7e4 fa4c 	bl	8000238 <__aeabi_dsub>
 801bda0:	f805 6b01 	strb.w	r6, [r5], #1
 801bda4:	9e01      	ldr	r6, [sp, #4]
 801bda6:	9f03      	ldr	r7, [sp, #12]
 801bda8:	1bae      	subs	r6, r5, r6
 801bdaa:	42b7      	cmp	r7, r6
 801bdac:	4602      	mov	r2, r0
 801bdae:	460b      	mov	r3, r1
 801bdb0:	d135      	bne.n	801be1e <_dtoa_r+0x6e6>
 801bdb2:	f7e4 fa43 	bl	800023c <__adddf3>
 801bdb6:	4642      	mov	r2, r8
 801bdb8:	464b      	mov	r3, r9
 801bdba:	4606      	mov	r6, r0
 801bdbc:	460f      	mov	r7, r1
 801bdbe:	f7e4 fe83 	bl	8000ac8 <__aeabi_dcmpgt>
 801bdc2:	b9d0      	cbnz	r0, 801bdfa <_dtoa_r+0x6c2>
 801bdc4:	4642      	mov	r2, r8
 801bdc6:	464b      	mov	r3, r9
 801bdc8:	4630      	mov	r0, r6
 801bdca:	4639      	mov	r1, r7
 801bdcc:	f7e4 fe54 	bl	8000a78 <__aeabi_dcmpeq>
 801bdd0:	b110      	cbz	r0, 801bdd8 <_dtoa_r+0x6a0>
 801bdd2:	f01a 0f01 	tst.w	sl, #1
 801bdd6:	d110      	bne.n	801bdfa <_dtoa_r+0x6c2>
 801bdd8:	4620      	mov	r0, r4
 801bdda:	ee18 1a10 	vmov	r1, s16
 801bdde:	f000 fd05 	bl	801c7ec <_Bfree>
 801bde2:	2300      	movs	r3, #0
 801bde4:	9800      	ldr	r0, [sp, #0]
 801bde6:	702b      	strb	r3, [r5, #0]
 801bde8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bdea:	3001      	adds	r0, #1
 801bdec:	6018      	str	r0, [r3, #0]
 801bdee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	f43f acf1 	beq.w	801b7d8 <_dtoa_r+0xa0>
 801bdf6:	601d      	str	r5, [r3, #0]
 801bdf8:	e4ee      	b.n	801b7d8 <_dtoa_r+0xa0>
 801bdfa:	9f00      	ldr	r7, [sp, #0]
 801bdfc:	462b      	mov	r3, r5
 801bdfe:	461d      	mov	r5, r3
 801be00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801be04:	2a39      	cmp	r2, #57	; 0x39
 801be06:	d106      	bne.n	801be16 <_dtoa_r+0x6de>
 801be08:	9a01      	ldr	r2, [sp, #4]
 801be0a:	429a      	cmp	r2, r3
 801be0c:	d1f7      	bne.n	801bdfe <_dtoa_r+0x6c6>
 801be0e:	9901      	ldr	r1, [sp, #4]
 801be10:	2230      	movs	r2, #48	; 0x30
 801be12:	3701      	adds	r7, #1
 801be14:	700a      	strb	r2, [r1, #0]
 801be16:	781a      	ldrb	r2, [r3, #0]
 801be18:	3201      	adds	r2, #1
 801be1a:	701a      	strb	r2, [r3, #0]
 801be1c:	e790      	b.n	801bd40 <_dtoa_r+0x608>
 801be1e:	4ba6      	ldr	r3, [pc, #664]	; (801c0b8 <_dtoa_r+0x980>)
 801be20:	2200      	movs	r2, #0
 801be22:	f7e4 fbc1 	bl	80005a8 <__aeabi_dmul>
 801be26:	2200      	movs	r2, #0
 801be28:	2300      	movs	r3, #0
 801be2a:	4606      	mov	r6, r0
 801be2c:	460f      	mov	r7, r1
 801be2e:	f7e4 fe23 	bl	8000a78 <__aeabi_dcmpeq>
 801be32:	2800      	cmp	r0, #0
 801be34:	d09d      	beq.n	801bd72 <_dtoa_r+0x63a>
 801be36:	e7cf      	b.n	801bdd8 <_dtoa_r+0x6a0>
 801be38:	9a08      	ldr	r2, [sp, #32]
 801be3a:	2a00      	cmp	r2, #0
 801be3c:	f000 80d7 	beq.w	801bfee <_dtoa_r+0x8b6>
 801be40:	9a06      	ldr	r2, [sp, #24]
 801be42:	2a01      	cmp	r2, #1
 801be44:	f300 80ba 	bgt.w	801bfbc <_dtoa_r+0x884>
 801be48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801be4a:	2a00      	cmp	r2, #0
 801be4c:	f000 80b2 	beq.w	801bfb4 <_dtoa_r+0x87c>
 801be50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801be54:	9e07      	ldr	r6, [sp, #28]
 801be56:	9d04      	ldr	r5, [sp, #16]
 801be58:	9a04      	ldr	r2, [sp, #16]
 801be5a:	441a      	add	r2, r3
 801be5c:	9204      	str	r2, [sp, #16]
 801be5e:	9a05      	ldr	r2, [sp, #20]
 801be60:	2101      	movs	r1, #1
 801be62:	441a      	add	r2, r3
 801be64:	4620      	mov	r0, r4
 801be66:	9205      	str	r2, [sp, #20]
 801be68:	f000 fd78 	bl	801c95c <__i2b>
 801be6c:	4607      	mov	r7, r0
 801be6e:	2d00      	cmp	r5, #0
 801be70:	dd0c      	ble.n	801be8c <_dtoa_r+0x754>
 801be72:	9b05      	ldr	r3, [sp, #20]
 801be74:	2b00      	cmp	r3, #0
 801be76:	dd09      	ble.n	801be8c <_dtoa_r+0x754>
 801be78:	42ab      	cmp	r3, r5
 801be7a:	9a04      	ldr	r2, [sp, #16]
 801be7c:	bfa8      	it	ge
 801be7e:	462b      	movge	r3, r5
 801be80:	1ad2      	subs	r2, r2, r3
 801be82:	9204      	str	r2, [sp, #16]
 801be84:	9a05      	ldr	r2, [sp, #20]
 801be86:	1aed      	subs	r5, r5, r3
 801be88:	1ad3      	subs	r3, r2, r3
 801be8a:	9305      	str	r3, [sp, #20]
 801be8c:	9b07      	ldr	r3, [sp, #28]
 801be8e:	b31b      	cbz	r3, 801bed8 <_dtoa_r+0x7a0>
 801be90:	9b08      	ldr	r3, [sp, #32]
 801be92:	2b00      	cmp	r3, #0
 801be94:	f000 80af 	beq.w	801bff6 <_dtoa_r+0x8be>
 801be98:	2e00      	cmp	r6, #0
 801be9a:	dd13      	ble.n	801bec4 <_dtoa_r+0x78c>
 801be9c:	4639      	mov	r1, r7
 801be9e:	4632      	mov	r2, r6
 801bea0:	4620      	mov	r0, r4
 801bea2:	f000 fe1b 	bl	801cadc <__pow5mult>
 801bea6:	ee18 2a10 	vmov	r2, s16
 801beaa:	4601      	mov	r1, r0
 801beac:	4607      	mov	r7, r0
 801beae:	4620      	mov	r0, r4
 801beb0:	f000 fd6a 	bl	801c988 <__multiply>
 801beb4:	ee18 1a10 	vmov	r1, s16
 801beb8:	4680      	mov	r8, r0
 801beba:	4620      	mov	r0, r4
 801bebc:	f000 fc96 	bl	801c7ec <_Bfree>
 801bec0:	ee08 8a10 	vmov	s16, r8
 801bec4:	9b07      	ldr	r3, [sp, #28]
 801bec6:	1b9a      	subs	r2, r3, r6
 801bec8:	d006      	beq.n	801bed8 <_dtoa_r+0x7a0>
 801beca:	ee18 1a10 	vmov	r1, s16
 801bece:	4620      	mov	r0, r4
 801bed0:	f000 fe04 	bl	801cadc <__pow5mult>
 801bed4:	ee08 0a10 	vmov	s16, r0
 801bed8:	2101      	movs	r1, #1
 801beda:	4620      	mov	r0, r4
 801bedc:	f000 fd3e 	bl	801c95c <__i2b>
 801bee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	4606      	mov	r6, r0
 801bee6:	f340 8088 	ble.w	801bffa <_dtoa_r+0x8c2>
 801beea:	461a      	mov	r2, r3
 801beec:	4601      	mov	r1, r0
 801beee:	4620      	mov	r0, r4
 801bef0:	f000 fdf4 	bl	801cadc <__pow5mult>
 801bef4:	9b06      	ldr	r3, [sp, #24]
 801bef6:	2b01      	cmp	r3, #1
 801bef8:	4606      	mov	r6, r0
 801befa:	f340 8081 	ble.w	801c000 <_dtoa_r+0x8c8>
 801befe:	f04f 0800 	mov.w	r8, #0
 801bf02:	6933      	ldr	r3, [r6, #16]
 801bf04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801bf08:	6918      	ldr	r0, [r3, #16]
 801bf0a:	f000 fcd7 	bl	801c8bc <__hi0bits>
 801bf0e:	f1c0 0020 	rsb	r0, r0, #32
 801bf12:	9b05      	ldr	r3, [sp, #20]
 801bf14:	4418      	add	r0, r3
 801bf16:	f010 001f 	ands.w	r0, r0, #31
 801bf1a:	f000 8092 	beq.w	801c042 <_dtoa_r+0x90a>
 801bf1e:	f1c0 0320 	rsb	r3, r0, #32
 801bf22:	2b04      	cmp	r3, #4
 801bf24:	f340 808a 	ble.w	801c03c <_dtoa_r+0x904>
 801bf28:	f1c0 001c 	rsb	r0, r0, #28
 801bf2c:	9b04      	ldr	r3, [sp, #16]
 801bf2e:	4403      	add	r3, r0
 801bf30:	9304      	str	r3, [sp, #16]
 801bf32:	9b05      	ldr	r3, [sp, #20]
 801bf34:	4403      	add	r3, r0
 801bf36:	4405      	add	r5, r0
 801bf38:	9305      	str	r3, [sp, #20]
 801bf3a:	9b04      	ldr	r3, [sp, #16]
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	dd07      	ble.n	801bf50 <_dtoa_r+0x818>
 801bf40:	ee18 1a10 	vmov	r1, s16
 801bf44:	461a      	mov	r2, r3
 801bf46:	4620      	mov	r0, r4
 801bf48:	f000 fe22 	bl	801cb90 <__lshift>
 801bf4c:	ee08 0a10 	vmov	s16, r0
 801bf50:	9b05      	ldr	r3, [sp, #20]
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	dd05      	ble.n	801bf62 <_dtoa_r+0x82a>
 801bf56:	4631      	mov	r1, r6
 801bf58:	461a      	mov	r2, r3
 801bf5a:	4620      	mov	r0, r4
 801bf5c:	f000 fe18 	bl	801cb90 <__lshift>
 801bf60:	4606      	mov	r6, r0
 801bf62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	d06e      	beq.n	801c046 <_dtoa_r+0x90e>
 801bf68:	ee18 0a10 	vmov	r0, s16
 801bf6c:	4631      	mov	r1, r6
 801bf6e:	f000 fe7f 	bl	801cc70 <__mcmp>
 801bf72:	2800      	cmp	r0, #0
 801bf74:	da67      	bge.n	801c046 <_dtoa_r+0x90e>
 801bf76:	9b00      	ldr	r3, [sp, #0]
 801bf78:	3b01      	subs	r3, #1
 801bf7a:	ee18 1a10 	vmov	r1, s16
 801bf7e:	9300      	str	r3, [sp, #0]
 801bf80:	220a      	movs	r2, #10
 801bf82:	2300      	movs	r3, #0
 801bf84:	4620      	mov	r0, r4
 801bf86:	f000 fc53 	bl	801c830 <__multadd>
 801bf8a:	9b08      	ldr	r3, [sp, #32]
 801bf8c:	ee08 0a10 	vmov	s16, r0
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	f000 81b1 	beq.w	801c2f8 <_dtoa_r+0xbc0>
 801bf96:	2300      	movs	r3, #0
 801bf98:	4639      	mov	r1, r7
 801bf9a:	220a      	movs	r2, #10
 801bf9c:	4620      	mov	r0, r4
 801bf9e:	f000 fc47 	bl	801c830 <__multadd>
 801bfa2:	9b02      	ldr	r3, [sp, #8]
 801bfa4:	2b00      	cmp	r3, #0
 801bfa6:	4607      	mov	r7, r0
 801bfa8:	f300 808e 	bgt.w	801c0c8 <_dtoa_r+0x990>
 801bfac:	9b06      	ldr	r3, [sp, #24]
 801bfae:	2b02      	cmp	r3, #2
 801bfb0:	dc51      	bgt.n	801c056 <_dtoa_r+0x91e>
 801bfb2:	e089      	b.n	801c0c8 <_dtoa_r+0x990>
 801bfb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bfb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801bfba:	e74b      	b.n	801be54 <_dtoa_r+0x71c>
 801bfbc:	9b03      	ldr	r3, [sp, #12]
 801bfbe:	1e5e      	subs	r6, r3, #1
 801bfc0:	9b07      	ldr	r3, [sp, #28]
 801bfc2:	42b3      	cmp	r3, r6
 801bfc4:	bfbf      	itttt	lt
 801bfc6:	9b07      	ldrlt	r3, [sp, #28]
 801bfc8:	9607      	strlt	r6, [sp, #28]
 801bfca:	1af2      	sublt	r2, r6, r3
 801bfcc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801bfce:	bfb6      	itet	lt
 801bfd0:	189b      	addlt	r3, r3, r2
 801bfd2:	1b9e      	subge	r6, r3, r6
 801bfd4:	930a      	strlt	r3, [sp, #40]	; 0x28
 801bfd6:	9b03      	ldr	r3, [sp, #12]
 801bfd8:	bfb8      	it	lt
 801bfda:	2600      	movlt	r6, #0
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	bfb7      	itett	lt
 801bfe0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801bfe4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801bfe8:	1a9d      	sublt	r5, r3, r2
 801bfea:	2300      	movlt	r3, #0
 801bfec:	e734      	b.n	801be58 <_dtoa_r+0x720>
 801bfee:	9e07      	ldr	r6, [sp, #28]
 801bff0:	9d04      	ldr	r5, [sp, #16]
 801bff2:	9f08      	ldr	r7, [sp, #32]
 801bff4:	e73b      	b.n	801be6e <_dtoa_r+0x736>
 801bff6:	9a07      	ldr	r2, [sp, #28]
 801bff8:	e767      	b.n	801beca <_dtoa_r+0x792>
 801bffa:	9b06      	ldr	r3, [sp, #24]
 801bffc:	2b01      	cmp	r3, #1
 801bffe:	dc18      	bgt.n	801c032 <_dtoa_r+0x8fa>
 801c000:	f1ba 0f00 	cmp.w	sl, #0
 801c004:	d115      	bne.n	801c032 <_dtoa_r+0x8fa>
 801c006:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c00a:	b993      	cbnz	r3, 801c032 <_dtoa_r+0x8fa>
 801c00c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c010:	0d1b      	lsrs	r3, r3, #20
 801c012:	051b      	lsls	r3, r3, #20
 801c014:	b183      	cbz	r3, 801c038 <_dtoa_r+0x900>
 801c016:	9b04      	ldr	r3, [sp, #16]
 801c018:	3301      	adds	r3, #1
 801c01a:	9304      	str	r3, [sp, #16]
 801c01c:	9b05      	ldr	r3, [sp, #20]
 801c01e:	3301      	adds	r3, #1
 801c020:	9305      	str	r3, [sp, #20]
 801c022:	f04f 0801 	mov.w	r8, #1
 801c026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c028:	2b00      	cmp	r3, #0
 801c02a:	f47f af6a 	bne.w	801bf02 <_dtoa_r+0x7ca>
 801c02e:	2001      	movs	r0, #1
 801c030:	e76f      	b.n	801bf12 <_dtoa_r+0x7da>
 801c032:	f04f 0800 	mov.w	r8, #0
 801c036:	e7f6      	b.n	801c026 <_dtoa_r+0x8ee>
 801c038:	4698      	mov	r8, r3
 801c03a:	e7f4      	b.n	801c026 <_dtoa_r+0x8ee>
 801c03c:	f43f af7d 	beq.w	801bf3a <_dtoa_r+0x802>
 801c040:	4618      	mov	r0, r3
 801c042:	301c      	adds	r0, #28
 801c044:	e772      	b.n	801bf2c <_dtoa_r+0x7f4>
 801c046:	9b03      	ldr	r3, [sp, #12]
 801c048:	2b00      	cmp	r3, #0
 801c04a:	dc37      	bgt.n	801c0bc <_dtoa_r+0x984>
 801c04c:	9b06      	ldr	r3, [sp, #24]
 801c04e:	2b02      	cmp	r3, #2
 801c050:	dd34      	ble.n	801c0bc <_dtoa_r+0x984>
 801c052:	9b03      	ldr	r3, [sp, #12]
 801c054:	9302      	str	r3, [sp, #8]
 801c056:	9b02      	ldr	r3, [sp, #8]
 801c058:	b96b      	cbnz	r3, 801c076 <_dtoa_r+0x93e>
 801c05a:	4631      	mov	r1, r6
 801c05c:	2205      	movs	r2, #5
 801c05e:	4620      	mov	r0, r4
 801c060:	f000 fbe6 	bl	801c830 <__multadd>
 801c064:	4601      	mov	r1, r0
 801c066:	4606      	mov	r6, r0
 801c068:	ee18 0a10 	vmov	r0, s16
 801c06c:	f000 fe00 	bl	801cc70 <__mcmp>
 801c070:	2800      	cmp	r0, #0
 801c072:	f73f adbb 	bgt.w	801bbec <_dtoa_r+0x4b4>
 801c076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c078:	9d01      	ldr	r5, [sp, #4]
 801c07a:	43db      	mvns	r3, r3
 801c07c:	9300      	str	r3, [sp, #0]
 801c07e:	f04f 0800 	mov.w	r8, #0
 801c082:	4631      	mov	r1, r6
 801c084:	4620      	mov	r0, r4
 801c086:	f000 fbb1 	bl	801c7ec <_Bfree>
 801c08a:	2f00      	cmp	r7, #0
 801c08c:	f43f aea4 	beq.w	801bdd8 <_dtoa_r+0x6a0>
 801c090:	f1b8 0f00 	cmp.w	r8, #0
 801c094:	d005      	beq.n	801c0a2 <_dtoa_r+0x96a>
 801c096:	45b8      	cmp	r8, r7
 801c098:	d003      	beq.n	801c0a2 <_dtoa_r+0x96a>
 801c09a:	4641      	mov	r1, r8
 801c09c:	4620      	mov	r0, r4
 801c09e:	f000 fba5 	bl	801c7ec <_Bfree>
 801c0a2:	4639      	mov	r1, r7
 801c0a4:	4620      	mov	r0, r4
 801c0a6:	f000 fba1 	bl	801c7ec <_Bfree>
 801c0aa:	e695      	b.n	801bdd8 <_dtoa_r+0x6a0>
 801c0ac:	2600      	movs	r6, #0
 801c0ae:	4637      	mov	r7, r6
 801c0b0:	e7e1      	b.n	801c076 <_dtoa_r+0x93e>
 801c0b2:	9700      	str	r7, [sp, #0]
 801c0b4:	4637      	mov	r7, r6
 801c0b6:	e599      	b.n	801bbec <_dtoa_r+0x4b4>
 801c0b8:	40240000 	.word	0x40240000
 801c0bc:	9b08      	ldr	r3, [sp, #32]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	f000 80ca 	beq.w	801c258 <_dtoa_r+0xb20>
 801c0c4:	9b03      	ldr	r3, [sp, #12]
 801c0c6:	9302      	str	r3, [sp, #8]
 801c0c8:	2d00      	cmp	r5, #0
 801c0ca:	dd05      	ble.n	801c0d8 <_dtoa_r+0x9a0>
 801c0cc:	4639      	mov	r1, r7
 801c0ce:	462a      	mov	r2, r5
 801c0d0:	4620      	mov	r0, r4
 801c0d2:	f000 fd5d 	bl	801cb90 <__lshift>
 801c0d6:	4607      	mov	r7, r0
 801c0d8:	f1b8 0f00 	cmp.w	r8, #0
 801c0dc:	d05b      	beq.n	801c196 <_dtoa_r+0xa5e>
 801c0de:	6879      	ldr	r1, [r7, #4]
 801c0e0:	4620      	mov	r0, r4
 801c0e2:	f000 fb43 	bl	801c76c <_Balloc>
 801c0e6:	4605      	mov	r5, r0
 801c0e8:	b928      	cbnz	r0, 801c0f6 <_dtoa_r+0x9be>
 801c0ea:	4b87      	ldr	r3, [pc, #540]	; (801c308 <_dtoa_r+0xbd0>)
 801c0ec:	4602      	mov	r2, r0
 801c0ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c0f2:	f7ff bb3b 	b.w	801b76c <_dtoa_r+0x34>
 801c0f6:	693a      	ldr	r2, [r7, #16]
 801c0f8:	3202      	adds	r2, #2
 801c0fa:	0092      	lsls	r2, r2, #2
 801c0fc:	f107 010c 	add.w	r1, r7, #12
 801c100:	300c      	adds	r0, #12
 801c102:	f7fe fc93 	bl	801aa2c <memcpy>
 801c106:	2201      	movs	r2, #1
 801c108:	4629      	mov	r1, r5
 801c10a:	4620      	mov	r0, r4
 801c10c:	f000 fd40 	bl	801cb90 <__lshift>
 801c110:	9b01      	ldr	r3, [sp, #4]
 801c112:	f103 0901 	add.w	r9, r3, #1
 801c116:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c11a:	4413      	add	r3, r2
 801c11c:	9305      	str	r3, [sp, #20]
 801c11e:	f00a 0301 	and.w	r3, sl, #1
 801c122:	46b8      	mov	r8, r7
 801c124:	9304      	str	r3, [sp, #16]
 801c126:	4607      	mov	r7, r0
 801c128:	4631      	mov	r1, r6
 801c12a:	ee18 0a10 	vmov	r0, s16
 801c12e:	f7ff fa75 	bl	801b61c <quorem>
 801c132:	4641      	mov	r1, r8
 801c134:	9002      	str	r0, [sp, #8]
 801c136:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c13a:	ee18 0a10 	vmov	r0, s16
 801c13e:	f000 fd97 	bl	801cc70 <__mcmp>
 801c142:	463a      	mov	r2, r7
 801c144:	9003      	str	r0, [sp, #12]
 801c146:	4631      	mov	r1, r6
 801c148:	4620      	mov	r0, r4
 801c14a:	f000 fdad 	bl	801cca8 <__mdiff>
 801c14e:	68c2      	ldr	r2, [r0, #12]
 801c150:	f109 3bff 	add.w	fp, r9, #4294967295
 801c154:	4605      	mov	r5, r0
 801c156:	bb02      	cbnz	r2, 801c19a <_dtoa_r+0xa62>
 801c158:	4601      	mov	r1, r0
 801c15a:	ee18 0a10 	vmov	r0, s16
 801c15e:	f000 fd87 	bl	801cc70 <__mcmp>
 801c162:	4602      	mov	r2, r0
 801c164:	4629      	mov	r1, r5
 801c166:	4620      	mov	r0, r4
 801c168:	9207      	str	r2, [sp, #28]
 801c16a:	f000 fb3f 	bl	801c7ec <_Bfree>
 801c16e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801c172:	ea43 0102 	orr.w	r1, r3, r2
 801c176:	9b04      	ldr	r3, [sp, #16]
 801c178:	430b      	orrs	r3, r1
 801c17a:	464d      	mov	r5, r9
 801c17c:	d10f      	bne.n	801c19e <_dtoa_r+0xa66>
 801c17e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c182:	d02a      	beq.n	801c1da <_dtoa_r+0xaa2>
 801c184:	9b03      	ldr	r3, [sp, #12]
 801c186:	2b00      	cmp	r3, #0
 801c188:	dd02      	ble.n	801c190 <_dtoa_r+0xa58>
 801c18a:	9b02      	ldr	r3, [sp, #8]
 801c18c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801c190:	f88b a000 	strb.w	sl, [fp]
 801c194:	e775      	b.n	801c082 <_dtoa_r+0x94a>
 801c196:	4638      	mov	r0, r7
 801c198:	e7ba      	b.n	801c110 <_dtoa_r+0x9d8>
 801c19a:	2201      	movs	r2, #1
 801c19c:	e7e2      	b.n	801c164 <_dtoa_r+0xa2c>
 801c19e:	9b03      	ldr	r3, [sp, #12]
 801c1a0:	2b00      	cmp	r3, #0
 801c1a2:	db04      	blt.n	801c1ae <_dtoa_r+0xa76>
 801c1a4:	9906      	ldr	r1, [sp, #24]
 801c1a6:	430b      	orrs	r3, r1
 801c1a8:	9904      	ldr	r1, [sp, #16]
 801c1aa:	430b      	orrs	r3, r1
 801c1ac:	d122      	bne.n	801c1f4 <_dtoa_r+0xabc>
 801c1ae:	2a00      	cmp	r2, #0
 801c1b0:	ddee      	ble.n	801c190 <_dtoa_r+0xa58>
 801c1b2:	ee18 1a10 	vmov	r1, s16
 801c1b6:	2201      	movs	r2, #1
 801c1b8:	4620      	mov	r0, r4
 801c1ba:	f000 fce9 	bl	801cb90 <__lshift>
 801c1be:	4631      	mov	r1, r6
 801c1c0:	ee08 0a10 	vmov	s16, r0
 801c1c4:	f000 fd54 	bl	801cc70 <__mcmp>
 801c1c8:	2800      	cmp	r0, #0
 801c1ca:	dc03      	bgt.n	801c1d4 <_dtoa_r+0xa9c>
 801c1cc:	d1e0      	bne.n	801c190 <_dtoa_r+0xa58>
 801c1ce:	f01a 0f01 	tst.w	sl, #1
 801c1d2:	d0dd      	beq.n	801c190 <_dtoa_r+0xa58>
 801c1d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c1d8:	d1d7      	bne.n	801c18a <_dtoa_r+0xa52>
 801c1da:	2339      	movs	r3, #57	; 0x39
 801c1dc:	f88b 3000 	strb.w	r3, [fp]
 801c1e0:	462b      	mov	r3, r5
 801c1e2:	461d      	mov	r5, r3
 801c1e4:	3b01      	subs	r3, #1
 801c1e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c1ea:	2a39      	cmp	r2, #57	; 0x39
 801c1ec:	d071      	beq.n	801c2d2 <_dtoa_r+0xb9a>
 801c1ee:	3201      	adds	r2, #1
 801c1f0:	701a      	strb	r2, [r3, #0]
 801c1f2:	e746      	b.n	801c082 <_dtoa_r+0x94a>
 801c1f4:	2a00      	cmp	r2, #0
 801c1f6:	dd07      	ble.n	801c208 <_dtoa_r+0xad0>
 801c1f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c1fc:	d0ed      	beq.n	801c1da <_dtoa_r+0xaa2>
 801c1fe:	f10a 0301 	add.w	r3, sl, #1
 801c202:	f88b 3000 	strb.w	r3, [fp]
 801c206:	e73c      	b.n	801c082 <_dtoa_r+0x94a>
 801c208:	9b05      	ldr	r3, [sp, #20]
 801c20a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c20e:	4599      	cmp	r9, r3
 801c210:	d047      	beq.n	801c2a2 <_dtoa_r+0xb6a>
 801c212:	ee18 1a10 	vmov	r1, s16
 801c216:	2300      	movs	r3, #0
 801c218:	220a      	movs	r2, #10
 801c21a:	4620      	mov	r0, r4
 801c21c:	f000 fb08 	bl	801c830 <__multadd>
 801c220:	45b8      	cmp	r8, r7
 801c222:	ee08 0a10 	vmov	s16, r0
 801c226:	f04f 0300 	mov.w	r3, #0
 801c22a:	f04f 020a 	mov.w	r2, #10
 801c22e:	4641      	mov	r1, r8
 801c230:	4620      	mov	r0, r4
 801c232:	d106      	bne.n	801c242 <_dtoa_r+0xb0a>
 801c234:	f000 fafc 	bl	801c830 <__multadd>
 801c238:	4680      	mov	r8, r0
 801c23a:	4607      	mov	r7, r0
 801c23c:	f109 0901 	add.w	r9, r9, #1
 801c240:	e772      	b.n	801c128 <_dtoa_r+0x9f0>
 801c242:	f000 faf5 	bl	801c830 <__multadd>
 801c246:	4639      	mov	r1, r7
 801c248:	4680      	mov	r8, r0
 801c24a:	2300      	movs	r3, #0
 801c24c:	220a      	movs	r2, #10
 801c24e:	4620      	mov	r0, r4
 801c250:	f000 faee 	bl	801c830 <__multadd>
 801c254:	4607      	mov	r7, r0
 801c256:	e7f1      	b.n	801c23c <_dtoa_r+0xb04>
 801c258:	9b03      	ldr	r3, [sp, #12]
 801c25a:	9302      	str	r3, [sp, #8]
 801c25c:	9d01      	ldr	r5, [sp, #4]
 801c25e:	ee18 0a10 	vmov	r0, s16
 801c262:	4631      	mov	r1, r6
 801c264:	f7ff f9da 	bl	801b61c <quorem>
 801c268:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c26c:	9b01      	ldr	r3, [sp, #4]
 801c26e:	f805 ab01 	strb.w	sl, [r5], #1
 801c272:	1aea      	subs	r2, r5, r3
 801c274:	9b02      	ldr	r3, [sp, #8]
 801c276:	4293      	cmp	r3, r2
 801c278:	dd09      	ble.n	801c28e <_dtoa_r+0xb56>
 801c27a:	ee18 1a10 	vmov	r1, s16
 801c27e:	2300      	movs	r3, #0
 801c280:	220a      	movs	r2, #10
 801c282:	4620      	mov	r0, r4
 801c284:	f000 fad4 	bl	801c830 <__multadd>
 801c288:	ee08 0a10 	vmov	s16, r0
 801c28c:	e7e7      	b.n	801c25e <_dtoa_r+0xb26>
 801c28e:	9b02      	ldr	r3, [sp, #8]
 801c290:	2b00      	cmp	r3, #0
 801c292:	bfc8      	it	gt
 801c294:	461d      	movgt	r5, r3
 801c296:	9b01      	ldr	r3, [sp, #4]
 801c298:	bfd8      	it	le
 801c29a:	2501      	movle	r5, #1
 801c29c:	441d      	add	r5, r3
 801c29e:	f04f 0800 	mov.w	r8, #0
 801c2a2:	ee18 1a10 	vmov	r1, s16
 801c2a6:	2201      	movs	r2, #1
 801c2a8:	4620      	mov	r0, r4
 801c2aa:	f000 fc71 	bl	801cb90 <__lshift>
 801c2ae:	4631      	mov	r1, r6
 801c2b0:	ee08 0a10 	vmov	s16, r0
 801c2b4:	f000 fcdc 	bl	801cc70 <__mcmp>
 801c2b8:	2800      	cmp	r0, #0
 801c2ba:	dc91      	bgt.n	801c1e0 <_dtoa_r+0xaa8>
 801c2bc:	d102      	bne.n	801c2c4 <_dtoa_r+0xb8c>
 801c2be:	f01a 0f01 	tst.w	sl, #1
 801c2c2:	d18d      	bne.n	801c1e0 <_dtoa_r+0xaa8>
 801c2c4:	462b      	mov	r3, r5
 801c2c6:	461d      	mov	r5, r3
 801c2c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c2cc:	2a30      	cmp	r2, #48	; 0x30
 801c2ce:	d0fa      	beq.n	801c2c6 <_dtoa_r+0xb8e>
 801c2d0:	e6d7      	b.n	801c082 <_dtoa_r+0x94a>
 801c2d2:	9a01      	ldr	r2, [sp, #4]
 801c2d4:	429a      	cmp	r2, r3
 801c2d6:	d184      	bne.n	801c1e2 <_dtoa_r+0xaaa>
 801c2d8:	9b00      	ldr	r3, [sp, #0]
 801c2da:	3301      	adds	r3, #1
 801c2dc:	9300      	str	r3, [sp, #0]
 801c2de:	2331      	movs	r3, #49	; 0x31
 801c2e0:	7013      	strb	r3, [r2, #0]
 801c2e2:	e6ce      	b.n	801c082 <_dtoa_r+0x94a>
 801c2e4:	4b09      	ldr	r3, [pc, #36]	; (801c30c <_dtoa_r+0xbd4>)
 801c2e6:	f7ff ba95 	b.w	801b814 <_dtoa_r+0xdc>
 801c2ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	f47f aa6e 	bne.w	801b7ce <_dtoa_r+0x96>
 801c2f2:	4b07      	ldr	r3, [pc, #28]	; (801c310 <_dtoa_r+0xbd8>)
 801c2f4:	f7ff ba8e 	b.w	801b814 <_dtoa_r+0xdc>
 801c2f8:	9b02      	ldr	r3, [sp, #8]
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	dcae      	bgt.n	801c25c <_dtoa_r+0xb24>
 801c2fe:	9b06      	ldr	r3, [sp, #24]
 801c300:	2b02      	cmp	r3, #2
 801c302:	f73f aea8 	bgt.w	801c056 <_dtoa_r+0x91e>
 801c306:	e7a9      	b.n	801c25c <_dtoa_r+0xb24>
 801c308:	0801db9f 	.word	0x0801db9f
 801c30c:	0801dafc 	.word	0x0801dafc
 801c310:	0801db20 	.word	0x0801db20

0801c314 <__sflush_r>:
 801c314:	898a      	ldrh	r2, [r1, #12]
 801c316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c31a:	4605      	mov	r5, r0
 801c31c:	0710      	lsls	r0, r2, #28
 801c31e:	460c      	mov	r4, r1
 801c320:	d458      	bmi.n	801c3d4 <__sflush_r+0xc0>
 801c322:	684b      	ldr	r3, [r1, #4]
 801c324:	2b00      	cmp	r3, #0
 801c326:	dc05      	bgt.n	801c334 <__sflush_r+0x20>
 801c328:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	dc02      	bgt.n	801c334 <__sflush_r+0x20>
 801c32e:	2000      	movs	r0, #0
 801c330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c334:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c336:	2e00      	cmp	r6, #0
 801c338:	d0f9      	beq.n	801c32e <__sflush_r+0x1a>
 801c33a:	2300      	movs	r3, #0
 801c33c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c340:	682f      	ldr	r7, [r5, #0]
 801c342:	602b      	str	r3, [r5, #0]
 801c344:	d032      	beq.n	801c3ac <__sflush_r+0x98>
 801c346:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c348:	89a3      	ldrh	r3, [r4, #12]
 801c34a:	075a      	lsls	r2, r3, #29
 801c34c:	d505      	bpl.n	801c35a <__sflush_r+0x46>
 801c34e:	6863      	ldr	r3, [r4, #4]
 801c350:	1ac0      	subs	r0, r0, r3
 801c352:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c354:	b10b      	cbz	r3, 801c35a <__sflush_r+0x46>
 801c356:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c358:	1ac0      	subs	r0, r0, r3
 801c35a:	2300      	movs	r3, #0
 801c35c:	4602      	mov	r2, r0
 801c35e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c360:	6a21      	ldr	r1, [r4, #32]
 801c362:	4628      	mov	r0, r5
 801c364:	47b0      	blx	r6
 801c366:	1c43      	adds	r3, r0, #1
 801c368:	89a3      	ldrh	r3, [r4, #12]
 801c36a:	d106      	bne.n	801c37a <__sflush_r+0x66>
 801c36c:	6829      	ldr	r1, [r5, #0]
 801c36e:	291d      	cmp	r1, #29
 801c370:	d82c      	bhi.n	801c3cc <__sflush_r+0xb8>
 801c372:	4a2a      	ldr	r2, [pc, #168]	; (801c41c <__sflush_r+0x108>)
 801c374:	40ca      	lsrs	r2, r1
 801c376:	07d6      	lsls	r6, r2, #31
 801c378:	d528      	bpl.n	801c3cc <__sflush_r+0xb8>
 801c37a:	2200      	movs	r2, #0
 801c37c:	6062      	str	r2, [r4, #4]
 801c37e:	04d9      	lsls	r1, r3, #19
 801c380:	6922      	ldr	r2, [r4, #16]
 801c382:	6022      	str	r2, [r4, #0]
 801c384:	d504      	bpl.n	801c390 <__sflush_r+0x7c>
 801c386:	1c42      	adds	r2, r0, #1
 801c388:	d101      	bne.n	801c38e <__sflush_r+0x7a>
 801c38a:	682b      	ldr	r3, [r5, #0]
 801c38c:	b903      	cbnz	r3, 801c390 <__sflush_r+0x7c>
 801c38e:	6560      	str	r0, [r4, #84]	; 0x54
 801c390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c392:	602f      	str	r7, [r5, #0]
 801c394:	2900      	cmp	r1, #0
 801c396:	d0ca      	beq.n	801c32e <__sflush_r+0x1a>
 801c398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c39c:	4299      	cmp	r1, r3
 801c39e:	d002      	beq.n	801c3a6 <__sflush_r+0x92>
 801c3a0:	4628      	mov	r0, r5
 801c3a2:	f000 fd7d 	bl	801cea0 <_free_r>
 801c3a6:	2000      	movs	r0, #0
 801c3a8:	6360      	str	r0, [r4, #52]	; 0x34
 801c3aa:	e7c1      	b.n	801c330 <__sflush_r+0x1c>
 801c3ac:	6a21      	ldr	r1, [r4, #32]
 801c3ae:	2301      	movs	r3, #1
 801c3b0:	4628      	mov	r0, r5
 801c3b2:	47b0      	blx	r6
 801c3b4:	1c41      	adds	r1, r0, #1
 801c3b6:	d1c7      	bne.n	801c348 <__sflush_r+0x34>
 801c3b8:	682b      	ldr	r3, [r5, #0]
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	d0c4      	beq.n	801c348 <__sflush_r+0x34>
 801c3be:	2b1d      	cmp	r3, #29
 801c3c0:	d001      	beq.n	801c3c6 <__sflush_r+0xb2>
 801c3c2:	2b16      	cmp	r3, #22
 801c3c4:	d101      	bne.n	801c3ca <__sflush_r+0xb6>
 801c3c6:	602f      	str	r7, [r5, #0]
 801c3c8:	e7b1      	b.n	801c32e <__sflush_r+0x1a>
 801c3ca:	89a3      	ldrh	r3, [r4, #12]
 801c3cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c3d0:	81a3      	strh	r3, [r4, #12]
 801c3d2:	e7ad      	b.n	801c330 <__sflush_r+0x1c>
 801c3d4:	690f      	ldr	r7, [r1, #16]
 801c3d6:	2f00      	cmp	r7, #0
 801c3d8:	d0a9      	beq.n	801c32e <__sflush_r+0x1a>
 801c3da:	0793      	lsls	r3, r2, #30
 801c3dc:	680e      	ldr	r6, [r1, #0]
 801c3de:	bf08      	it	eq
 801c3e0:	694b      	ldreq	r3, [r1, #20]
 801c3e2:	600f      	str	r7, [r1, #0]
 801c3e4:	bf18      	it	ne
 801c3e6:	2300      	movne	r3, #0
 801c3e8:	eba6 0807 	sub.w	r8, r6, r7
 801c3ec:	608b      	str	r3, [r1, #8]
 801c3ee:	f1b8 0f00 	cmp.w	r8, #0
 801c3f2:	dd9c      	ble.n	801c32e <__sflush_r+0x1a>
 801c3f4:	6a21      	ldr	r1, [r4, #32]
 801c3f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c3f8:	4643      	mov	r3, r8
 801c3fa:	463a      	mov	r2, r7
 801c3fc:	4628      	mov	r0, r5
 801c3fe:	47b0      	blx	r6
 801c400:	2800      	cmp	r0, #0
 801c402:	dc06      	bgt.n	801c412 <__sflush_r+0xfe>
 801c404:	89a3      	ldrh	r3, [r4, #12]
 801c406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c40a:	81a3      	strh	r3, [r4, #12]
 801c40c:	f04f 30ff 	mov.w	r0, #4294967295
 801c410:	e78e      	b.n	801c330 <__sflush_r+0x1c>
 801c412:	4407      	add	r7, r0
 801c414:	eba8 0800 	sub.w	r8, r8, r0
 801c418:	e7e9      	b.n	801c3ee <__sflush_r+0xda>
 801c41a:	bf00      	nop
 801c41c:	20400001 	.word	0x20400001

0801c420 <_fflush_r>:
 801c420:	b538      	push	{r3, r4, r5, lr}
 801c422:	690b      	ldr	r3, [r1, #16]
 801c424:	4605      	mov	r5, r0
 801c426:	460c      	mov	r4, r1
 801c428:	b913      	cbnz	r3, 801c430 <_fflush_r+0x10>
 801c42a:	2500      	movs	r5, #0
 801c42c:	4628      	mov	r0, r5
 801c42e:	bd38      	pop	{r3, r4, r5, pc}
 801c430:	b118      	cbz	r0, 801c43a <_fflush_r+0x1a>
 801c432:	6983      	ldr	r3, [r0, #24]
 801c434:	b90b      	cbnz	r3, 801c43a <_fflush_r+0x1a>
 801c436:	f000 f887 	bl	801c548 <__sinit>
 801c43a:	4b14      	ldr	r3, [pc, #80]	; (801c48c <_fflush_r+0x6c>)
 801c43c:	429c      	cmp	r4, r3
 801c43e:	d11b      	bne.n	801c478 <_fflush_r+0x58>
 801c440:	686c      	ldr	r4, [r5, #4]
 801c442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c446:	2b00      	cmp	r3, #0
 801c448:	d0ef      	beq.n	801c42a <_fflush_r+0xa>
 801c44a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c44c:	07d0      	lsls	r0, r2, #31
 801c44e:	d404      	bmi.n	801c45a <_fflush_r+0x3a>
 801c450:	0599      	lsls	r1, r3, #22
 801c452:	d402      	bmi.n	801c45a <_fflush_r+0x3a>
 801c454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c456:	f000 f91a 	bl	801c68e <__retarget_lock_acquire_recursive>
 801c45a:	4628      	mov	r0, r5
 801c45c:	4621      	mov	r1, r4
 801c45e:	f7ff ff59 	bl	801c314 <__sflush_r>
 801c462:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c464:	07da      	lsls	r2, r3, #31
 801c466:	4605      	mov	r5, r0
 801c468:	d4e0      	bmi.n	801c42c <_fflush_r+0xc>
 801c46a:	89a3      	ldrh	r3, [r4, #12]
 801c46c:	059b      	lsls	r3, r3, #22
 801c46e:	d4dd      	bmi.n	801c42c <_fflush_r+0xc>
 801c470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c472:	f000 f90d 	bl	801c690 <__retarget_lock_release_recursive>
 801c476:	e7d9      	b.n	801c42c <_fflush_r+0xc>
 801c478:	4b05      	ldr	r3, [pc, #20]	; (801c490 <_fflush_r+0x70>)
 801c47a:	429c      	cmp	r4, r3
 801c47c:	d101      	bne.n	801c482 <_fflush_r+0x62>
 801c47e:	68ac      	ldr	r4, [r5, #8]
 801c480:	e7df      	b.n	801c442 <_fflush_r+0x22>
 801c482:	4b04      	ldr	r3, [pc, #16]	; (801c494 <_fflush_r+0x74>)
 801c484:	429c      	cmp	r4, r3
 801c486:	bf08      	it	eq
 801c488:	68ec      	ldreq	r4, [r5, #12]
 801c48a:	e7da      	b.n	801c442 <_fflush_r+0x22>
 801c48c:	0801dbd0 	.word	0x0801dbd0
 801c490:	0801dbf0 	.word	0x0801dbf0
 801c494:	0801dbb0 	.word	0x0801dbb0

0801c498 <std>:
 801c498:	2300      	movs	r3, #0
 801c49a:	b510      	push	{r4, lr}
 801c49c:	4604      	mov	r4, r0
 801c49e:	e9c0 3300 	strd	r3, r3, [r0]
 801c4a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c4a6:	6083      	str	r3, [r0, #8]
 801c4a8:	8181      	strh	r1, [r0, #12]
 801c4aa:	6643      	str	r3, [r0, #100]	; 0x64
 801c4ac:	81c2      	strh	r2, [r0, #14]
 801c4ae:	6183      	str	r3, [r0, #24]
 801c4b0:	4619      	mov	r1, r3
 801c4b2:	2208      	movs	r2, #8
 801c4b4:	305c      	adds	r0, #92	; 0x5c
 801c4b6:	f7fe fac7 	bl	801aa48 <memset>
 801c4ba:	4b05      	ldr	r3, [pc, #20]	; (801c4d0 <std+0x38>)
 801c4bc:	6263      	str	r3, [r4, #36]	; 0x24
 801c4be:	4b05      	ldr	r3, [pc, #20]	; (801c4d4 <std+0x3c>)
 801c4c0:	62a3      	str	r3, [r4, #40]	; 0x28
 801c4c2:	4b05      	ldr	r3, [pc, #20]	; (801c4d8 <std+0x40>)
 801c4c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c4c6:	4b05      	ldr	r3, [pc, #20]	; (801c4dc <std+0x44>)
 801c4c8:	6224      	str	r4, [r4, #32]
 801c4ca:	6323      	str	r3, [r4, #48]	; 0x30
 801c4cc:	bd10      	pop	{r4, pc}
 801c4ce:	bf00      	nop
 801c4d0:	0801d3c5 	.word	0x0801d3c5
 801c4d4:	0801d3e7 	.word	0x0801d3e7
 801c4d8:	0801d41f 	.word	0x0801d41f
 801c4dc:	0801d443 	.word	0x0801d443

0801c4e0 <_cleanup_r>:
 801c4e0:	4901      	ldr	r1, [pc, #4]	; (801c4e8 <_cleanup_r+0x8>)
 801c4e2:	f000 b8af 	b.w	801c644 <_fwalk_reent>
 801c4e6:	bf00      	nop
 801c4e8:	0801c421 	.word	0x0801c421

0801c4ec <__sfmoreglue>:
 801c4ec:	b570      	push	{r4, r5, r6, lr}
 801c4ee:	2268      	movs	r2, #104	; 0x68
 801c4f0:	1e4d      	subs	r5, r1, #1
 801c4f2:	4355      	muls	r5, r2
 801c4f4:	460e      	mov	r6, r1
 801c4f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c4fa:	f000 fd3d 	bl	801cf78 <_malloc_r>
 801c4fe:	4604      	mov	r4, r0
 801c500:	b140      	cbz	r0, 801c514 <__sfmoreglue+0x28>
 801c502:	2100      	movs	r1, #0
 801c504:	e9c0 1600 	strd	r1, r6, [r0]
 801c508:	300c      	adds	r0, #12
 801c50a:	60a0      	str	r0, [r4, #8]
 801c50c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c510:	f7fe fa9a 	bl	801aa48 <memset>
 801c514:	4620      	mov	r0, r4
 801c516:	bd70      	pop	{r4, r5, r6, pc}

0801c518 <__sfp_lock_acquire>:
 801c518:	4801      	ldr	r0, [pc, #4]	; (801c520 <__sfp_lock_acquire+0x8>)
 801c51a:	f000 b8b8 	b.w	801c68e <__retarget_lock_acquire_recursive>
 801c51e:	bf00      	nop
 801c520:	20008825 	.word	0x20008825

0801c524 <__sfp_lock_release>:
 801c524:	4801      	ldr	r0, [pc, #4]	; (801c52c <__sfp_lock_release+0x8>)
 801c526:	f000 b8b3 	b.w	801c690 <__retarget_lock_release_recursive>
 801c52a:	bf00      	nop
 801c52c:	20008825 	.word	0x20008825

0801c530 <__sinit_lock_acquire>:
 801c530:	4801      	ldr	r0, [pc, #4]	; (801c538 <__sinit_lock_acquire+0x8>)
 801c532:	f000 b8ac 	b.w	801c68e <__retarget_lock_acquire_recursive>
 801c536:	bf00      	nop
 801c538:	20008826 	.word	0x20008826

0801c53c <__sinit_lock_release>:
 801c53c:	4801      	ldr	r0, [pc, #4]	; (801c544 <__sinit_lock_release+0x8>)
 801c53e:	f000 b8a7 	b.w	801c690 <__retarget_lock_release_recursive>
 801c542:	bf00      	nop
 801c544:	20008826 	.word	0x20008826

0801c548 <__sinit>:
 801c548:	b510      	push	{r4, lr}
 801c54a:	4604      	mov	r4, r0
 801c54c:	f7ff fff0 	bl	801c530 <__sinit_lock_acquire>
 801c550:	69a3      	ldr	r3, [r4, #24]
 801c552:	b11b      	cbz	r3, 801c55c <__sinit+0x14>
 801c554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c558:	f7ff bff0 	b.w	801c53c <__sinit_lock_release>
 801c55c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c560:	6523      	str	r3, [r4, #80]	; 0x50
 801c562:	4b13      	ldr	r3, [pc, #76]	; (801c5b0 <__sinit+0x68>)
 801c564:	4a13      	ldr	r2, [pc, #76]	; (801c5b4 <__sinit+0x6c>)
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	62a2      	str	r2, [r4, #40]	; 0x28
 801c56a:	42a3      	cmp	r3, r4
 801c56c:	bf04      	itt	eq
 801c56e:	2301      	moveq	r3, #1
 801c570:	61a3      	streq	r3, [r4, #24]
 801c572:	4620      	mov	r0, r4
 801c574:	f000 f820 	bl	801c5b8 <__sfp>
 801c578:	6060      	str	r0, [r4, #4]
 801c57a:	4620      	mov	r0, r4
 801c57c:	f000 f81c 	bl	801c5b8 <__sfp>
 801c580:	60a0      	str	r0, [r4, #8]
 801c582:	4620      	mov	r0, r4
 801c584:	f000 f818 	bl	801c5b8 <__sfp>
 801c588:	2200      	movs	r2, #0
 801c58a:	60e0      	str	r0, [r4, #12]
 801c58c:	2104      	movs	r1, #4
 801c58e:	6860      	ldr	r0, [r4, #4]
 801c590:	f7ff ff82 	bl	801c498 <std>
 801c594:	68a0      	ldr	r0, [r4, #8]
 801c596:	2201      	movs	r2, #1
 801c598:	2109      	movs	r1, #9
 801c59a:	f7ff ff7d 	bl	801c498 <std>
 801c59e:	68e0      	ldr	r0, [r4, #12]
 801c5a0:	2202      	movs	r2, #2
 801c5a2:	2112      	movs	r1, #18
 801c5a4:	f7ff ff78 	bl	801c498 <std>
 801c5a8:	2301      	movs	r3, #1
 801c5aa:	61a3      	str	r3, [r4, #24]
 801c5ac:	e7d2      	b.n	801c554 <__sinit+0xc>
 801c5ae:	bf00      	nop
 801c5b0:	0801dae8 	.word	0x0801dae8
 801c5b4:	0801c4e1 	.word	0x0801c4e1

0801c5b8 <__sfp>:
 801c5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5ba:	4607      	mov	r7, r0
 801c5bc:	f7ff ffac 	bl	801c518 <__sfp_lock_acquire>
 801c5c0:	4b1e      	ldr	r3, [pc, #120]	; (801c63c <__sfp+0x84>)
 801c5c2:	681e      	ldr	r6, [r3, #0]
 801c5c4:	69b3      	ldr	r3, [r6, #24]
 801c5c6:	b913      	cbnz	r3, 801c5ce <__sfp+0x16>
 801c5c8:	4630      	mov	r0, r6
 801c5ca:	f7ff ffbd 	bl	801c548 <__sinit>
 801c5ce:	3648      	adds	r6, #72	; 0x48
 801c5d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c5d4:	3b01      	subs	r3, #1
 801c5d6:	d503      	bpl.n	801c5e0 <__sfp+0x28>
 801c5d8:	6833      	ldr	r3, [r6, #0]
 801c5da:	b30b      	cbz	r3, 801c620 <__sfp+0x68>
 801c5dc:	6836      	ldr	r6, [r6, #0]
 801c5de:	e7f7      	b.n	801c5d0 <__sfp+0x18>
 801c5e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c5e4:	b9d5      	cbnz	r5, 801c61c <__sfp+0x64>
 801c5e6:	4b16      	ldr	r3, [pc, #88]	; (801c640 <__sfp+0x88>)
 801c5e8:	60e3      	str	r3, [r4, #12]
 801c5ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c5ee:	6665      	str	r5, [r4, #100]	; 0x64
 801c5f0:	f000 f84c 	bl	801c68c <__retarget_lock_init_recursive>
 801c5f4:	f7ff ff96 	bl	801c524 <__sfp_lock_release>
 801c5f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c5fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c600:	6025      	str	r5, [r4, #0]
 801c602:	61a5      	str	r5, [r4, #24]
 801c604:	2208      	movs	r2, #8
 801c606:	4629      	mov	r1, r5
 801c608:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c60c:	f7fe fa1c 	bl	801aa48 <memset>
 801c610:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c614:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c618:	4620      	mov	r0, r4
 801c61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c61c:	3468      	adds	r4, #104	; 0x68
 801c61e:	e7d9      	b.n	801c5d4 <__sfp+0x1c>
 801c620:	2104      	movs	r1, #4
 801c622:	4638      	mov	r0, r7
 801c624:	f7ff ff62 	bl	801c4ec <__sfmoreglue>
 801c628:	4604      	mov	r4, r0
 801c62a:	6030      	str	r0, [r6, #0]
 801c62c:	2800      	cmp	r0, #0
 801c62e:	d1d5      	bne.n	801c5dc <__sfp+0x24>
 801c630:	f7ff ff78 	bl	801c524 <__sfp_lock_release>
 801c634:	230c      	movs	r3, #12
 801c636:	603b      	str	r3, [r7, #0]
 801c638:	e7ee      	b.n	801c618 <__sfp+0x60>
 801c63a:	bf00      	nop
 801c63c:	0801dae8 	.word	0x0801dae8
 801c640:	ffff0001 	.word	0xffff0001

0801c644 <_fwalk_reent>:
 801c644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c648:	4606      	mov	r6, r0
 801c64a:	4688      	mov	r8, r1
 801c64c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c650:	2700      	movs	r7, #0
 801c652:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c656:	f1b9 0901 	subs.w	r9, r9, #1
 801c65a:	d505      	bpl.n	801c668 <_fwalk_reent+0x24>
 801c65c:	6824      	ldr	r4, [r4, #0]
 801c65e:	2c00      	cmp	r4, #0
 801c660:	d1f7      	bne.n	801c652 <_fwalk_reent+0xe>
 801c662:	4638      	mov	r0, r7
 801c664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c668:	89ab      	ldrh	r3, [r5, #12]
 801c66a:	2b01      	cmp	r3, #1
 801c66c:	d907      	bls.n	801c67e <_fwalk_reent+0x3a>
 801c66e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c672:	3301      	adds	r3, #1
 801c674:	d003      	beq.n	801c67e <_fwalk_reent+0x3a>
 801c676:	4629      	mov	r1, r5
 801c678:	4630      	mov	r0, r6
 801c67a:	47c0      	blx	r8
 801c67c:	4307      	orrs	r7, r0
 801c67e:	3568      	adds	r5, #104	; 0x68
 801c680:	e7e9      	b.n	801c656 <_fwalk_reent+0x12>
	...

0801c684 <_localeconv_r>:
 801c684:	4800      	ldr	r0, [pc, #0]	; (801c688 <_localeconv_r+0x4>)
 801c686:	4770      	bx	lr
 801c688:	200001d0 	.word	0x200001d0

0801c68c <__retarget_lock_init_recursive>:
 801c68c:	4770      	bx	lr

0801c68e <__retarget_lock_acquire_recursive>:
 801c68e:	4770      	bx	lr

0801c690 <__retarget_lock_release_recursive>:
 801c690:	4770      	bx	lr

0801c692 <__swhatbuf_r>:
 801c692:	b570      	push	{r4, r5, r6, lr}
 801c694:	460e      	mov	r6, r1
 801c696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c69a:	2900      	cmp	r1, #0
 801c69c:	b096      	sub	sp, #88	; 0x58
 801c69e:	4614      	mov	r4, r2
 801c6a0:	461d      	mov	r5, r3
 801c6a2:	da08      	bge.n	801c6b6 <__swhatbuf_r+0x24>
 801c6a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c6a8:	2200      	movs	r2, #0
 801c6aa:	602a      	str	r2, [r5, #0]
 801c6ac:	061a      	lsls	r2, r3, #24
 801c6ae:	d410      	bmi.n	801c6d2 <__swhatbuf_r+0x40>
 801c6b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c6b4:	e00e      	b.n	801c6d4 <__swhatbuf_r+0x42>
 801c6b6:	466a      	mov	r2, sp
 801c6b8:	f000 ff1a 	bl	801d4f0 <_fstat_r>
 801c6bc:	2800      	cmp	r0, #0
 801c6be:	dbf1      	blt.n	801c6a4 <__swhatbuf_r+0x12>
 801c6c0:	9a01      	ldr	r2, [sp, #4]
 801c6c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c6c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c6ca:	425a      	negs	r2, r3
 801c6cc:	415a      	adcs	r2, r3
 801c6ce:	602a      	str	r2, [r5, #0]
 801c6d0:	e7ee      	b.n	801c6b0 <__swhatbuf_r+0x1e>
 801c6d2:	2340      	movs	r3, #64	; 0x40
 801c6d4:	2000      	movs	r0, #0
 801c6d6:	6023      	str	r3, [r4, #0]
 801c6d8:	b016      	add	sp, #88	; 0x58
 801c6da:	bd70      	pop	{r4, r5, r6, pc}

0801c6dc <__smakebuf_r>:
 801c6dc:	898b      	ldrh	r3, [r1, #12]
 801c6de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c6e0:	079d      	lsls	r5, r3, #30
 801c6e2:	4606      	mov	r6, r0
 801c6e4:	460c      	mov	r4, r1
 801c6e6:	d507      	bpl.n	801c6f8 <__smakebuf_r+0x1c>
 801c6e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c6ec:	6023      	str	r3, [r4, #0]
 801c6ee:	6123      	str	r3, [r4, #16]
 801c6f0:	2301      	movs	r3, #1
 801c6f2:	6163      	str	r3, [r4, #20]
 801c6f4:	b002      	add	sp, #8
 801c6f6:	bd70      	pop	{r4, r5, r6, pc}
 801c6f8:	ab01      	add	r3, sp, #4
 801c6fa:	466a      	mov	r2, sp
 801c6fc:	f7ff ffc9 	bl	801c692 <__swhatbuf_r>
 801c700:	9900      	ldr	r1, [sp, #0]
 801c702:	4605      	mov	r5, r0
 801c704:	4630      	mov	r0, r6
 801c706:	f000 fc37 	bl	801cf78 <_malloc_r>
 801c70a:	b948      	cbnz	r0, 801c720 <__smakebuf_r+0x44>
 801c70c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c710:	059a      	lsls	r2, r3, #22
 801c712:	d4ef      	bmi.n	801c6f4 <__smakebuf_r+0x18>
 801c714:	f023 0303 	bic.w	r3, r3, #3
 801c718:	f043 0302 	orr.w	r3, r3, #2
 801c71c:	81a3      	strh	r3, [r4, #12]
 801c71e:	e7e3      	b.n	801c6e8 <__smakebuf_r+0xc>
 801c720:	4b0d      	ldr	r3, [pc, #52]	; (801c758 <__smakebuf_r+0x7c>)
 801c722:	62b3      	str	r3, [r6, #40]	; 0x28
 801c724:	89a3      	ldrh	r3, [r4, #12]
 801c726:	6020      	str	r0, [r4, #0]
 801c728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c72c:	81a3      	strh	r3, [r4, #12]
 801c72e:	9b00      	ldr	r3, [sp, #0]
 801c730:	6163      	str	r3, [r4, #20]
 801c732:	9b01      	ldr	r3, [sp, #4]
 801c734:	6120      	str	r0, [r4, #16]
 801c736:	b15b      	cbz	r3, 801c750 <__smakebuf_r+0x74>
 801c738:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c73c:	4630      	mov	r0, r6
 801c73e:	f000 fee9 	bl	801d514 <_isatty_r>
 801c742:	b128      	cbz	r0, 801c750 <__smakebuf_r+0x74>
 801c744:	89a3      	ldrh	r3, [r4, #12]
 801c746:	f023 0303 	bic.w	r3, r3, #3
 801c74a:	f043 0301 	orr.w	r3, r3, #1
 801c74e:	81a3      	strh	r3, [r4, #12]
 801c750:	89a0      	ldrh	r0, [r4, #12]
 801c752:	4305      	orrs	r5, r0
 801c754:	81a5      	strh	r5, [r4, #12]
 801c756:	e7cd      	b.n	801c6f4 <__smakebuf_r+0x18>
 801c758:	0801c4e1 	.word	0x0801c4e1

0801c75c <malloc>:
 801c75c:	4b02      	ldr	r3, [pc, #8]	; (801c768 <malloc+0xc>)
 801c75e:	4601      	mov	r1, r0
 801c760:	6818      	ldr	r0, [r3, #0]
 801c762:	f000 bc09 	b.w	801cf78 <_malloc_r>
 801c766:	bf00      	nop
 801c768:	2000007c 	.word	0x2000007c

0801c76c <_Balloc>:
 801c76c:	b570      	push	{r4, r5, r6, lr}
 801c76e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c770:	4604      	mov	r4, r0
 801c772:	460d      	mov	r5, r1
 801c774:	b976      	cbnz	r6, 801c794 <_Balloc+0x28>
 801c776:	2010      	movs	r0, #16
 801c778:	f7ff fff0 	bl	801c75c <malloc>
 801c77c:	4602      	mov	r2, r0
 801c77e:	6260      	str	r0, [r4, #36]	; 0x24
 801c780:	b920      	cbnz	r0, 801c78c <_Balloc+0x20>
 801c782:	4b18      	ldr	r3, [pc, #96]	; (801c7e4 <_Balloc+0x78>)
 801c784:	4818      	ldr	r0, [pc, #96]	; (801c7e8 <_Balloc+0x7c>)
 801c786:	2166      	movs	r1, #102	; 0x66
 801c788:	f000 fe72 	bl	801d470 <__assert_func>
 801c78c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c790:	6006      	str	r6, [r0, #0]
 801c792:	60c6      	str	r6, [r0, #12]
 801c794:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c796:	68f3      	ldr	r3, [r6, #12]
 801c798:	b183      	cbz	r3, 801c7bc <_Balloc+0x50>
 801c79a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c79c:	68db      	ldr	r3, [r3, #12]
 801c79e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c7a2:	b9b8      	cbnz	r0, 801c7d4 <_Balloc+0x68>
 801c7a4:	2101      	movs	r1, #1
 801c7a6:	fa01 f605 	lsl.w	r6, r1, r5
 801c7aa:	1d72      	adds	r2, r6, #5
 801c7ac:	0092      	lsls	r2, r2, #2
 801c7ae:	4620      	mov	r0, r4
 801c7b0:	f000 fb60 	bl	801ce74 <_calloc_r>
 801c7b4:	b160      	cbz	r0, 801c7d0 <_Balloc+0x64>
 801c7b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c7ba:	e00e      	b.n	801c7da <_Balloc+0x6e>
 801c7bc:	2221      	movs	r2, #33	; 0x21
 801c7be:	2104      	movs	r1, #4
 801c7c0:	4620      	mov	r0, r4
 801c7c2:	f000 fb57 	bl	801ce74 <_calloc_r>
 801c7c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c7c8:	60f0      	str	r0, [r6, #12]
 801c7ca:	68db      	ldr	r3, [r3, #12]
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d1e4      	bne.n	801c79a <_Balloc+0x2e>
 801c7d0:	2000      	movs	r0, #0
 801c7d2:	bd70      	pop	{r4, r5, r6, pc}
 801c7d4:	6802      	ldr	r2, [r0, #0]
 801c7d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c7da:	2300      	movs	r3, #0
 801c7dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c7e0:	e7f7      	b.n	801c7d2 <_Balloc+0x66>
 801c7e2:	bf00      	nop
 801c7e4:	0801db2d 	.word	0x0801db2d
 801c7e8:	0801dc10 	.word	0x0801dc10

0801c7ec <_Bfree>:
 801c7ec:	b570      	push	{r4, r5, r6, lr}
 801c7ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c7f0:	4605      	mov	r5, r0
 801c7f2:	460c      	mov	r4, r1
 801c7f4:	b976      	cbnz	r6, 801c814 <_Bfree+0x28>
 801c7f6:	2010      	movs	r0, #16
 801c7f8:	f7ff ffb0 	bl	801c75c <malloc>
 801c7fc:	4602      	mov	r2, r0
 801c7fe:	6268      	str	r0, [r5, #36]	; 0x24
 801c800:	b920      	cbnz	r0, 801c80c <_Bfree+0x20>
 801c802:	4b09      	ldr	r3, [pc, #36]	; (801c828 <_Bfree+0x3c>)
 801c804:	4809      	ldr	r0, [pc, #36]	; (801c82c <_Bfree+0x40>)
 801c806:	218a      	movs	r1, #138	; 0x8a
 801c808:	f000 fe32 	bl	801d470 <__assert_func>
 801c80c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c810:	6006      	str	r6, [r0, #0]
 801c812:	60c6      	str	r6, [r0, #12]
 801c814:	b13c      	cbz	r4, 801c826 <_Bfree+0x3a>
 801c816:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c818:	6862      	ldr	r2, [r4, #4]
 801c81a:	68db      	ldr	r3, [r3, #12]
 801c81c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c820:	6021      	str	r1, [r4, #0]
 801c822:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c826:	bd70      	pop	{r4, r5, r6, pc}
 801c828:	0801db2d 	.word	0x0801db2d
 801c82c:	0801dc10 	.word	0x0801dc10

0801c830 <__multadd>:
 801c830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c834:	690d      	ldr	r5, [r1, #16]
 801c836:	4607      	mov	r7, r0
 801c838:	460c      	mov	r4, r1
 801c83a:	461e      	mov	r6, r3
 801c83c:	f101 0c14 	add.w	ip, r1, #20
 801c840:	2000      	movs	r0, #0
 801c842:	f8dc 3000 	ldr.w	r3, [ip]
 801c846:	b299      	uxth	r1, r3
 801c848:	fb02 6101 	mla	r1, r2, r1, r6
 801c84c:	0c1e      	lsrs	r6, r3, #16
 801c84e:	0c0b      	lsrs	r3, r1, #16
 801c850:	fb02 3306 	mla	r3, r2, r6, r3
 801c854:	b289      	uxth	r1, r1
 801c856:	3001      	adds	r0, #1
 801c858:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c85c:	4285      	cmp	r5, r0
 801c85e:	f84c 1b04 	str.w	r1, [ip], #4
 801c862:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c866:	dcec      	bgt.n	801c842 <__multadd+0x12>
 801c868:	b30e      	cbz	r6, 801c8ae <__multadd+0x7e>
 801c86a:	68a3      	ldr	r3, [r4, #8]
 801c86c:	42ab      	cmp	r3, r5
 801c86e:	dc19      	bgt.n	801c8a4 <__multadd+0x74>
 801c870:	6861      	ldr	r1, [r4, #4]
 801c872:	4638      	mov	r0, r7
 801c874:	3101      	adds	r1, #1
 801c876:	f7ff ff79 	bl	801c76c <_Balloc>
 801c87a:	4680      	mov	r8, r0
 801c87c:	b928      	cbnz	r0, 801c88a <__multadd+0x5a>
 801c87e:	4602      	mov	r2, r0
 801c880:	4b0c      	ldr	r3, [pc, #48]	; (801c8b4 <__multadd+0x84>)
 801c882:	480d      	ldr	r0, [pc, #52]	; (801c8b8 <__multadd+0x88>)
 801c884:	21b5      	movs	r1, #181	; 0xb5
 801c886:	f000 fdf3 	bl	801d470 <__assert_func>
 801c88a:	6922      	ldr	r2, [r4, #16]
 801c88c:	3202      	adds	r2, #2
 801c88e:	f104 010c 	add.w	r1, r4, #12
 801c892:	0092      	lsls	r2, r2, #2
 801c894:	300c      	adds	r0, #12
 801c896:	f7fe f8c9 	bl	801aa2c <memcpy>
 801c89a:	4621      	mov	r1, r4
 801c89c:	4638      	mov	r0, r7
 801c89e:	f7ff ffa5 	bl	801c7ec <_Bfree>
 801c8a2:	4644      	mov	r4, r8
 801c8a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c8a8:	3501      	adds	r5, #1
 801c8aa:	615e      	str	r6, [r3, #20]
 801c8ac:	6125      	str	r5, [r4, #16]
 801c8ae:	4620      	mov	r0, r4
 801c8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8b4:	0801db9f 	.word	0x0801db9f
 801c8b8:	0801dc10 	.word	0x0801dc10

0801c8bc <__hi0bits>:
 801c8bc:	0c03      	lsrs	r3, r0, #16
 801c8be:	041b      	lsls	r3, r3, #16
 801c8c0:	b9d3      	cbnz	r3, 801c8f8 <__hi0bits+0x3c>
 801c8c2:	0400      	lsls	r0, r0, #16
 801c8c4:	2310      	movs	r3, #16
 801c8c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c8ca:	bf04      	itt	eq
 801c8cc:	0200      	lsleq	r0, r0, #8
 801c8ce:	3308      	addeq	r3, #8
 801c8d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c8d4:	bf04      	itt	eq
 801c8d6:	0100      	lsleq	r0, r0, #4
 801c8d8:	3304      	addeq	r3, #4
 801c8da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c8de:	bf04      	itt	eq
 801c8e0:	0080      	lsleq	r0, r0, #2
 801c8e2:	3302      	addeq	r3, #2
 801c8e4:	2800      	cmp	r0, #0
 801c8e6:	db05      	blt.n	801c8f4 <__hi0bits+0x38>
 801c8e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c8ec:	f103 0301 	add.w	r3, r3, #1
 801c8f0:	bf08      	it	eq
 801c8f2:	2320      	moveq	r3, #32
 801c8f4:	4618      	mov	r0, r3
 801c8f6:	4770      	bx	lr
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	e7e4      	b.n	801c8c6 <__hi0bits+0xa>

0801c8fc <__lo0bits>:
 801c8fc:	6803      	ldr	r3, [r0, #0]
 801c8fe:	f013 0207 	ands.w	r2, r3, #7
 801c902:	4601      	mov	r1, r0
 801c904:	d00b      	beq.n	801c91e <__lo0bits+0x22>
 801c906:	07da      	lsls	r2, r3, #31
 801c908:	d423      	bmi.n	801c952 <__lo0bits+0x56>
 801c90a:	0798      	lsls	r0, r3, #30
 801c90c:	bf49      	itett	mi
 801c90e:	085b      	lsrmi	r3, r3, #1
 801c910:	089b      	lsrpl	r3, r3, #2
 801c912:	2001      	movmi	r0, #1
 801c914:	600b      	strmi	r3, [r1, #0]
 801c916:	bf5c      	itt	pl
 801c918:	600b      	strpl	r3, [r1, #0]
 801c91a:	2002      	movpl	r0, #2
 801c91c:	4770      	bx	lr
 801c91e:	b298      	uxth	r0, r3
 801c920:	b9a8      	cbnz	r0, 801c94e <__lo0bits+0x52>
 801c922:	0c1b      	lsrs	r3, r3, #16
 801c924:	2010      	movs	r0, #16
 801c926:	b2da      	uxtb	r2, r3
 801c928:	b90a      	cbnz	r2, 801c92e <__lo0bits+0x32>
 801c92a:	3008      	adds	r0, #8
 801c92c:	0a1b      	lsrs	r3, r3, #8
 801c92e:	071a      	lsls	r2, r3, #28
 801c930:	bf04      	itt	eq
 801c932:	091b      	lsreq	r3, r3, #4
 801c934:	3004      	addeq	r0, #4
 801c936:	079a      	lsls	r2, r3, #30
 801c938:	bf04      	itt	eq
 801c93a:	089b      	lsreq	r3, r3, #2
 801c93c:	3002      	addeq	r0, #2
 801c93e:	07da      	lsls	r2, r3, #31
 801c940:	d403      	bmi.n	801c94a <__lo0bits+0x4e>
 801c942:	085b      	lsrs	r3, r3, #1
 801c944:	f100 0001 	add.w	r0, r0, #1
 801c948:	d005      	beq.n	801c956 <__lo0bits+0x5a>
 801c94a:	600b      	str	r3, [r1, #0]
 801c94c:	4770      	bx	lr
 801c94e:	4610      	mov	r0, r2
 801c950:	e7e9      	b.n	801c926 <__lo0bits+0x2a>
 801c952:	2000      	movs	r0, #0
 801c954:	4770      	bx	lr
 801c956:	2020      	movs	r0, #32
 801c958:	4770      	bx	lr
	...

0801c95c <__i2b>:
 801c95c:	b510      	push	{r4, lr}
 801c95e:	460c      	mov	r4, r1
 801c960:	2101      	movs	r1, #1
 801c962:	f7ff ff03 	bl	801c76c <_Balloc>
 801c966:	4602      	mov	r2, r0
 801c968:	b928      	cbnz	r0, 801c976 <__i2b+0x1a>
 801c96a:	4b05      	ldr	r3, [pc, #20]	; (801c980 <__i2b+0x24>)
 801c96c:	4805      	ldr	r0, [pc, #20]	; (801c984 <__i2b+0x28>)
 801c96e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801c972:	f000 fd7d 	bl	801d470 <__assert_func>
 801c976:	2301      	movs	r3, #1
 801c978:	6144      	str	r4, [r0, #20]
 801c97a:	6103      	str	r3, [r0, #16]
 801c97c:	bd10      	pop	{r4, pc}
 801c97e:	bf00      	nop
 801c980:	0801db9f 	.word	0x0801db9f
 801c984:	0801dc10 	.word	0x0801dc10

0801c988 <__multiply>:
 801c988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c98c:	4691      	mov	r9, r2
 801c98e:	690a      	ldr	r2, [r1, #16]
 801c990:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c994:	429a      	cmp	r2, r3
 801c996:	bfb8      	it	lt
 801c998:	460b      	movlt	r3, r1
 801c99a:	460c      	mov	r4, r1
 801c99c:	bfbc      	itt	lt
 801c99e:	464c      	movlt	r4, r9
 801c9a0:	4699      	movlt	r9, r3
 801c9a2:	6927      	ldr	r7, [r4, #16]
 801c9a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c9a8:	68a3      	ldr	r3, [r4, #8]
 801c9aa:	6861      	ldr	r1, [r4, #4]
 801c9ac:	eb07 060a 	add.w	r6, r7, sl
 801c9b0:	42b3      	cmp	r3, r6
 801c9b2:	b085      	sub	sp, #20
 801c9b4:	bfb8      	it	lt
 801c9b6:	3101      	addlt	r1, #1
 801c9b8:	f7ff fed8 	bl	801c76c <_Balloc>
 801c9bc:	b930      	cbnz	r0, 801c9cc <__multiply+0x44>
 801c9be:	4602      	mov	r2, r0
 801c9c0:	4b44      	ldr	r3, [pc, #272]	; (801cad4 <__multiply+0x14c>)
 801c9c2:	4845      	ldr	r0, [pc, #276]	; (801cad8 <__multiply+0x150>)
 801c9c4:	f240 115d 	movw	r1, #349	; 0x15d
 801c9c8:	f000 fd52 	bl	801d470 <__assert_func>
 801c9cc:	f100 0514 	add.w	r5, r0, #20
 801c9d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c9d4:	462b      	mov	r3, r5
 801c9d6:	2200      	movs	r2, #0
 801c9d8:	4543      	cmp	r3, r8
 801c9da:	d321      	bcc.n	801ca20 <__multiply+0x98>
 801c9dc:	f104 0314 	add.w	r3, r4, #20
 801c9e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c9e4:	f109 0314 	add.w	r3, r9, #20
 801c9e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c9ec:	9202      	str	r2, [sp, #8]
 801c9ee:	1b3a      	subs	r2, r7, r4
 801c9f0:	3a15      	subs	r2, #21
 801c9f2:	f022 0203 	bic.w	r2, r2, #3
 801c9f6:	3204      	adds	r2, #4
 801c9f8:	f104 0115 	add.w	r1, r4, #21
 801c9fc:	428f      	cmp	r7, r1
 801c9fe:	bf38      	it	cc
 801ca00:	2204      	movcc	r2, #4
 801ca02:	9201      	str	r2, [sp, #4]
 801ca04:	9a02      	ldr	r2, [sp, #8]
 801ca06:	9303      	str	r3, [sp, #12]
 801ca08:	429a      	cmp	r2, r3
 801ca0a:	d80c      	bhi.n	801ca26 <__multiply+0x9e>
 801ca0c:	2e00      	cmp	r6, #0
 801ca0e:	dd03      	ble.n	801ca18 <__multiply+0x90>
 801ca10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d05a      	beq.n	801cace <__multiply+0x146>
 801ca18:	6106      	str	r6, [r0, #16]
 801ca1a:	b005      	add	sp, #20
 801ca1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca20:	f843 2b04 	str.w	r2, [r3], #4
 801ca24:	e7d8      	b.n	801c9d8 <__multiply+0x50>
 801ca26:	f8b3 a000 	ldrh.w	sl, [r3]
 801ca2a:	f1ba 0f00 	cmp.w	sl, #0
 801ca2e:	d024      	beq.n	801ca7a <__multiply+0xf2>
 801ca30:	f104 0e14 	add.w	lr, r4, #20
 801ca34:	46a9      	mov	r9, r5
 801ca36:	f04f 0c00 	mov.w	ip, #0
 801ca3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801ca3e:	f8d9 1000 	ldr.w	r1, [r9]
 801ca42:	fa1f fb82 	uxth.w	fp, r2
 801ca46:	b289      	uxth	r1, r1
 801ca48:	fb0a 110b 	mla	r1, sl, fp, r1
 801ca4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801ca50:	f8d9 2000 	ldr.w	r2, [r9]
 801ca54:	4461      	add	r1, ip
 801ca56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ca5a:	fb0a c20b 	mla	r2, sl, fp, ip
 801ca5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ca62:	b289      	uxth	r1, r1
 801ca64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ca68:	4577      	cmp	r7, lr
 801ca6a:	f849 1b04 	str.w	r1, [r9], #4
 801ca6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ca72:	d8e2      	bhi.n	801ca3a <__multiply+0xb2>
 801ca74:	9a01      	ldr	r2, [sp, #4]
 801ca76:	f845 c002 	str.w	ip, [r5, r2]
 801ca7a:	9a03      	ldr	r2, [sp, #12]
 801ca7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ca80:	3304      	adds	r3, #4
 801ca82:	f1b9 0f00 	cmp.w	r9, #0
 801ca86:	d020      	beq.n	801caca <__multiply+0x142>
 801ca88:	6829      	ldr	r1, [r5, #0]
 801ca8a:	f104 0c14 	add.w	ip, r4, #20
 801ca8e:	46ae      	mov	lr, r5
 801ca90:	f04f 0a00 	mov.w	sl, #0
 801ca94:	f8bc b000 	ldrh.w	fp, [ip]
 801ca98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ca9c:	fb09 220b 	mla	r2, r9, fp, r2
 801caa0:	4492      	add	sl, r2
 801caa2:	b289      	uxth	r1, r1
 801caa4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801caa8:	f84e 1b04 	str.w	r1, [lr], #4
 801caac:	f85c 2b04 	ldr.w	r2, [ip], #4
 801cab0:	f8be 1000 	ldrh.w	r1, [lr]
 801cab4:	0c12      	lsrs	r2, r2, #16
 801cab6:	fb09 1102 	mla	r1, r9, r2, r1
 801caba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801cabe:	4567      	cmp	r7, ip
 801cac0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801cac4:	d8e6      	bhi.n	801ca94 <__multiply+0x10c>
 801cac6:	9a01      	ldr	r2, [sp, #4]
 801cac8:	50a9      	str	r1, [r5, r2]
 801caca:	3504      	adds	r5, #4
 801cacc:	e79a      	b.n	801ca04 <__multiply+0x7c>
 801cace:	3e01      	subs	r6, #1
 801cad0:	e79c      	b.n	801ca0c <__multiply+0x84>
 801cad2:	bf00      	nop
 801cad4:	0801db9f 	.word	0x0801db9f
 801cad8:	0801dc10 	.word	0x0801dc10

0801cadc <__pow5mult>:
 801cadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cae0:	4615      	mov	r5, r2
 801cae2:	f012 0203 	ands.w	r2, r2, #3
 801cae6:	4606      	mov	r6, r0
 801cae8:	460f      	mov	r7, r1
 801caea:	d007      	beq.n	801cafc <__pow5mult+0x20>
 801caec:	4c25      	ldr	r4, [pc, #148]	; (801cb84 <__pow5mult+0xa8>)
 801caee:	3a01      	subs	r2, #1
 801caf0:	2300      	movs	r3, #0
 801caf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801caf6:	f7ff fe9b 	bl	801c830 <__multadd>
 801cafa:	4607      	mov	r7, r0
 801cafc:	10ad      	asrs	r5, r5, #2
 801cafe:	d03d      	beq.n	801cb7c <__pow5mult+0xa0>
 801cb00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801cb02:	b97c      	cbnz	r4, 801cb24 <__pow5mult+0x48>
 801cb04:	2010      	movs	r0, #16
 801cb06:	f7ff fe29 	bl	801c75c <malloc>
 801cb0a:	4602      	mov	r2, r0
 801cb0c:	6270      	str	r0, [r6, #36]	; 0x24
 801cb0e:	b928      	cbnz	r0, 801cb1c <__pow5mult+0x40>
 801cb10:	4b1d      	ldr	r3, [pc, #116]	; (801cb88 <__pow5mult+0xac>)
 801cb12:	481e      	ldr	r0, [pc, #120]	; (801cb8c <__pow5mult+0xb0>)
 801cb14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801cb18:	f000 fcaa 	bl	801d470 <__assert_func>
 801cb1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cb20:	6004      	str	r4, [r0, #0]
 801cb22:	60c4      	str	r4, [r0, #12]
 801cb24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801cb28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cb2c:	b94c      	cbnz	r4, 801cb42 <__pow5mult+0x66>
 801cb2e:	f240 2171 	movw	r1, #625	; 0x271
 801cb32:	4630      	mov	r0, r6
 801cb34:	f7ff ff12 	bl	801c95c <__i2b>
 801cb38:	2300      	movs	r3, #0
 801cb3a:	f8c8 0008 	str.w	r0, [r8, #8]
 801cb3e:	4604      	mov	r4, r0
 801cb40:	6003      	str	r3, [r0, #0]
 801cb42:	f04f 0900 	mov.w	r9, #0
 801cb46:	07eb      	lsls	r3, r5, #31
 801cb48:	d50a      	bpl.n	801cb60 <__pow5mult+0x84>
 801cb4a:	4639      	mov	r1, r7
 801cb4c:	4622      	mov	r2, r4
 801cb4e:	4630      	mov	r0, r6
 801cb50:	f7ff ff1a 	bl	801c988 <__multiply>
 801cb54:	4639      	mov	r1, r7
 801cb56:	4680      	mov	r8, r0
 801cb58:	4630      	mov	r0, r6
 801cb5a:	f7ff fe47 	bl	801c7ec <_Bfree>
 801cb5e:	4647      	mov	r7, r8
 801cb60:	106d      	asrs	r5, r5, #1
 801cb62:	d00b      	beq.n	801cb7c <__pow5mult+0xa0>
 801cb64:	6820      	ldr	r0, [r4, #0]
 801cb66:	b938      	cbnz	r0, 801cb78 <__pow5mult+0x9c>
 801cb68:	4622      	mov	r2, r4
 801cb6a:	4621      	mov	r1, r4
 801cb6c:	4630      	mov	r0, r6
 801cb6e:	f7ff ff0b 	bl	801c988 <__multiply>
 801cb72:	6020      	str	r0, [r4, #0]
 801cb74:	f8c0 9000 	str.w	r9, [r0]
 801cb78:	4604      	mov	r4, r0
 801cb7a:	e7e4      	b.n	801cb46 <__pow5mult+0x6a>
 801cb7c:	4638      	mov	r0, r7
 801cb7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cb82:	bf00      	nop
 801cb84:	0801dd60 	.word	0x0801dd60
 801cb88:	0801db2d 	.word	0x0801db2d
 801cb8c:	0801dc10 	.word	0x0801dc10

0801cb90 <__lshift>:
 801cb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb94:	460c      	mov	r4, r1
 801cb96:	6849      	ldr	r1, [r1, #4]
 801cb98:	6923      	ldr	r3, [r4, #16]
 801cb9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cb9e:	68a3      	ldr	r3, [r4, #8]
 801cba0:	4607      	mov	r7, r0
 801cba2:	4691      	mov	r9, r2
 801cba4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cba8:	f108 0601 	add.w	r6, r8, #1
 801cbac:	42b3      	cmp	r3, r6
 801cbae:	db0b      	blt.n	801cbc8 <__lshift+0x38>
 801cbb0:	4638      	mov	r0, r7
 801cbb2:	f7ff fddb 	bl	801c76c <_Balloc>
 801cbb6:	4605      	mov	r5, r0
 801cbb8:	b948      	cbnz	r0, 801cbce <__lshift+0x3e>
 801cbba:	4602      	mov	r2, r0
 801cbbc:	4b2a      	ldr	r3, [pc, #168]	; (801cc68 <__lshift+0xd8>)
 801cbbe:	482b      	ldr	r0, [pc, #172]	; (801cc6c <__lshift+0xdc>)
 801cbc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 801cbc4:	f000 fc54 	bl	801d470 <__assert_func>
 801cbc8:	3101      	adds	r1, #1
 801cbca:	005b      	lsls	r3, r3, #1
 801cbcc:	e7ee      	b.n	801cbac <__lshift+0x1c>
 801cbce:	2300      	movs	r3, #0
 801cbd0:	f100 0114 	add.w	r1, r0, #20
 801cbd4:	f100 0210 	add.w	r2, r0, #16
 801cbd8:	4618      	mov	r0, r3
 801cbda:	4553      	cmp	r3, sl
 801cbdc:	db37      	blt.n	801cc4e <__lshift+0xbe>
 801cbde:	6920      	ldr	r0, [r4, #16]
 801cbe0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cbe4:	f104 0314 	add.w	r3, r4, #20
 801cbe8:	f019 091f 	ands.w	r9, r9, #31
 801cbec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cbf0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801cbf4:	d02f      	beq.n	801cc56 <__lshift+0xc6>
 801cbf6:	f1c9 0e20 	rsb	lr, r9, #32
 801cbfa:	468a      	mov	sl, r1
 801cbfc:	f04f 0c00 	mov.w	ip, #0
 801cc00:	681a      	ldr	r2, [r3, #0]
 801cc02:	fa02 f209 	lsl.w	r2, r2, r9
 801cc06:	ea42 020c 	orr.w	r2, r2, ip
 801cc0a:	f84a 2b04 	str.w	r2, [sl], #4
 801cc0e:	f853 2b04 	ldr.w	r2, [r3], #4
 801cc12:	4298      	cmp	r0, r3
 801cc14:	fa22 fc0e 	lsr.w	ip, r2, lr
 801cc18:	d8f2      	bhi.n	801cc00 <__lshift+0x70>
 801cc1a:	1b03      	subs	r3, r0, r4
 801cc1c:	3b15      	subs	r3, #21
 801cc1e:	f023 0303 	bic.w	r3, r3, #3
 801cc22:	3304      	adds	r3, #4
 801cc24:	f104 0215 	add.w	r2, r4, #21
 801cc28:	4290      	cmp	r0, r2
 801cc2a:	bf38      	it	cc
 801cc2c:	2304      	movcc	r3, #4
 801cc2e:	f841 c003 	str.w	ip, [r1, r3]
 801cc32:	f1bc 0f00 	cmp.w	ip, #0
 801cc36:	d001      	beq.n	801cc3c <__lshift+0xac>
 801cc38:	f108 0602 	add.w	r6, r8, #2
 801cc3c:	3e01      	subs	r6, #1
 801cc3e:	4638      	mov	r0, r7
 801cc40:	612e      	str	r6, [r5, #16]
 801cc42:	4621      	mov	r1, r4
 801cc44:	f7ff fdd2 	bl	801c7ec <_Bfree>
 801cc48:	4628      	mov	r0, r5
 801cc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc4e:	f842 0f04 	str.w	r0, [r2, #4]!
 801cc52:	3301      	adds	r3, #1
 801cc54:	e7c1      	b.n	801cbda <__lshift+0x4a>
 801cc56:	3904      	subs	r1, #4
 801cc58:	f853 2b04 	ldr.w	r2, [r3], #4
 801cc5c:	f841 2f04 	str.w	r2, [r1, #4]!
 801cc60:	4298      	cmp	r0, r3
 801cc62:	d8f9      	bhi.n	801cc58 <__lshift+0xc8>
 801cc64:	e7ea      	b.n	801cc3c <__lshift+0xac>
 801cc66:	bf00      	nop
 801cc68:	0801db9f 	.word	0x0801db9f
 801cc6c:	0801dc10 	.word	0x0801dc10

0801cc70 <__mcmp>:
 801cc70:	b530      	push	{r4, r5, lr}
 801cc72:	6902      	ldr	r2, [r0, #16]
 801cc74:	690c      	ldr	r4, [r1, #16]
 801cc76:	1b12      	subs	r2, r2, r4
 801cc78:	d10e      	bne.n	801cc98 <__mcmp+0x28>
 801cc7a:	f100 0314 	add.w	r3, r0, #20
 801cc7e:	3114      	adds	r1, #20
 801cc80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801cc84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801cc88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801cc8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801cc90:	42a5      	cmp	r5, r4
 801cc92:	d003      	beq.n	801cc9c <__mcmp+0x2c>
 801cc94:	d305      	bcc.n	801cca2 <__mcmp+0x32>
 801cc96:	2201      	movs	r2, #1
 801cc98:	4610      	mov	r0, r2
 801cc9a:	bd30      	pop	{r4, r5, pc}
 801cc9c:	4283      	cmp	r3, r0
 801cc9e:	d3f3      	bcc.n	801cc88 <__mcmp+0x18>
 801cca0:	e7fa      	b.n	801cc98 <__mcmp+0x28>
 801cca2:	f04f 32ff 	mov.w	r2, #4294967295
 801cca6:	e7f7      	b.n	801cc98 <__mcmp+0x28>

0801cca8 <__mdiff>:
 801cca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccac:	460c      	mov	r4, r1
 801ccae:	4606      	mov	r6, r0
 801ccb0:	4611      	mov	r1, r2
 801ccb2:	4620      	mov	r0, r4
 801ccb4:	4690      	mov	r8, r2
 801ccb6:	f7ff ffdb 	bl	801cc70 <__mcmp>
 801ccba:	1e05      	subs	r5, r0, #0
 801ccbc:	d110      	bne.n	801cce0 <__mdiff+0x38>
 801ccbe:	4629      	mov	r1, r5
 801ccc0:	4630      	mov	r0, r6
 801ccc2:	f7ff fd53 	bl	801c76c <_Balloc>
 801ccc6:	b930      	cbnz	r0, 801ccd6 <__mdiff+0x2e>
 801ccc8:	4b3a      	ldr	r3, [pc, #232]	; (801cdb4 <__mdiff+0x10c>)
 801ccca:	4602      	mov	r2, r0
 801cccc:	f240 2132 	movw	r1, #562	; 0x232
 801ccd0:	4839      	ldr	r0, [pc, #228]	; (801cdb8 <__mdiff+0x110>)
 801ccd2:	f000 fbcd 	bl	801d470 <__assert_func>
 801ccd6:	2301      	movs	r3, #1
 801ccd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ccdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cce0:	bfa4      	itt	ge
 801cce2:	4643      	movge	r3, r8
 801cce4:	46a0      	movge	r8, r4
 801cce6:	4630      	mov	r0, r6
 801cce8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ccec:	bfa6      	itte	ge
 801ccee:	461c      	movge	r4, r3
 801ccf0:	2500      	movge	r5, #0
 801ccf2:	2501      	movlt	r5, #1
 801ccf4:	f7ff fd3a 	bl	801c76c <_Balloc>
 801ccf8:	b920      	cbnz	r0, 801cd04 <__mdiff+0x5c>
 801ccfa:	4b2e      	ldr	r3, [pc, #184]	; (801cdb4 <__mdiff+0x10c>)
 801ccfc:	4602      	mov	r2, r0
 801ccfe:	f44f 7110 	mov.w	r1, #576	; 0x240
 801cd02:	e7e5      	b.n	801ccd0 <__mdiff+0x28>
 801cd04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801cd08:	6926      	ldr	r6, [r4, #16]
 801cd0a:	60c5      	str	r5, [r0, #12]
 801cd0c:	f104 0914 	add.w	r9, r4, #20
 801cd10:	f108 0514 	add.w	r5, r8, #20
 801cd14:	f100 0e14 	add.w	lr, r0, #20
 801cd18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801cd1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801cd20:	f108 0210 	add.w	r2, r8, #16
 801cd24:	46f2      	mov	sl, lr
 801cd26:	2100      	movs	r1, #0
 801cd28:	f859 3b04 	ldr.w	r3, [r9], #4
 801cd2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801cd30:	fa1f f883 	uxth.w	r8, r3
 801cd34:	fa11 f18b 	uxtah	r1, r1, fp
 801cd38:	0c1b      	lsrs	r3, r3, #16
 801cd3a:	eba1 0808 	sub.w	r8, r1, r8
 801cd3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801cd42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801cd46:	fa1f f888 	uxth.w	r8, r8
 801cd4a:	1419      	asrs	r1, r3, #16
 801cd4c:	454e      	cmp	r6, r9
 801cd4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801cd52:	f84a 3b04 	str.w	r3, [sl], #4
 801cd56:	d8e7      	bhi.n	801cd28 <__mdiff+0x80>
 801cd58:	1b33      	subs	r3, r6, r4
 801cd5a:	3b15      	subs	r3, #21
 801cd5c:	f023 0303 	bic.w	r3, r3, #3
 801cd60:	3304      	adds	r3, #4
 801cd62:	3415      	adds	r4, #21
 801cd64:	42a6      	cmp	r6, r4
 801cd66:	bf38      	it	cc
 801cd68:	2304      	movcc	r3, #4
 801cd6a:	441d      	add	r5, r3
 801cd6c:	4473      	add	r3, lr
 801cd6e:	469e      	mov	lr, r3
 801cd70:	462e      	mov	r6, r5
 801cd72:	4566      	cmp	r6, ip
 801cd74:	d30e      	bcc.n	801cd94 <__mdiff+0xec>
 801cd76:	f10c 0203 	add.w	r2, ip, #3
 801cd7a:	1b52      	subs	r2, r2, r5
 801cd7c:	f022 0203 	bic.w	r2, r2, #3
 801cd80:	3d03      	subs	r5, #3
 801cd82:	45ac      	cmp	ip, r5
 801cd84:	bf38      	it	cc
 801cd86:	2200      	movcc	r2, #0
 801cd88:	441a      	add	r2, r3
 801cd8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801cd8e:	b17b      	cbz	r3, 801cdb0 <__mdiff+0x108>
 801cd90:	6107      	str	r7, [r0, #16]
 801cd92:	e7a3      	b.n	801ccdc <__mdiff+0x34>
 801cd94:	f856 8b04 	ldr.w	r8, [r6], #4
 801cd98:	fa11 f288 	uxtah	r2, r1, r8
 801cd9c:	1414      	asrs	r4, r2, #16
 801cd9e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801cda2:	b292      	uxth	r2, r2
 801cda4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801cda8:	f84e 2b04 	str.w	r2, [lr], #4
 801cdac:	1421      	asrs	r1, r4, #16
 801cdae:	e7e0      	b.n	801cd72 <__mdiff+0xca>
 801cdb0:	3f01      	subs	r7, #1
 801cdb2:	e7ea      	b.n	801cd8a <__mdiff+0xe2>
 801cdb4:	0801db9f 	.word	0x0801db9f
 801cdb8:	0801dc10 	.word	0x0801dc10

0801cdbc <__d2b>:
 801cdbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cdc0:	4689      	mov	r9, r1
 801cdc2:	2101      	movs	r1, #1
 801cdc4:	ec57 6b10 	vmov	r6, r7, d0
 801cdc8:	4690      	mov	r8, r2
 801cdca:	f7ff fccf 	bl	801c76c <_Balloc>
 801cdce:	4604      	mov	r4, r0
 801cdd0:	b930      	cbnz	r0, 801cde0 <__d2b+0x24>
 801cdd2:	4602      	mov	r2, r0
 801cdd4:	4b25      	ldr	r3, [pc, #148]	; (801ce6c <__d2b+0xb0>)
 801cdd6:	4826      	ldr	r0, [pc, #152]	; (801ce70 <__d2b+0xb4>)
 801cdd8:	f240 310a 	movw	r1, #778	; 0x30a
 801cddc:	f000 fb48 	bl	801d470 <__assert_func>
 801cde0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801cde4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cde8:	bb35      	cbnz	r5, 801ce38 <__d2b+0x7c>
 801cdea:	2e00      	cmp	r6, #0
 801cdec:	9301      	str	r3, [sp, #4]
 801cdee:	d028      	beq.n	801ce42 <__d2b+0x86>
 801cdf0:	4668      	mov	r0, sp
 801cdf2:	9600      	str	r6, [sp, #0]
 801cdf4:	f7ff fd82 	bl	801c8fc <__lo0bits>
 801cdf8:	9900      	ldr	r1, [sp, #0]
 801cdfa:	b300      	cbz	r0, 801ce3e <__d2b+0x82>
 801cdfc:	9a01      	ldr	r2, [sp, #4]
 801cdfe:	f1c0 0320 	rsb	r3, r0, #32
 801ce02:	fa02 f303 	lsl.w	r3, r2, r3
 801ce06:	430b      	orrs	r3, r1
 801ce08:	40c2      	lsrs	r2, r0
 801ce0a:	6163      	str	r3, [r4, #20]
 801ce0c:	9201      	str	r2, [sp, #4]
 801ce0e:	9b01      	ldr	r3, [sp, #4]
 801ce10:	61a3      	str	r3, [r4, #24]
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	bf14      	ite	ne
 801ce16:	2202      	movne	r2, #2
 801ce18:	2201      	moveq	r2, #1
 801ce1a:	6122      	str	r2, [r4, #16]
 801ce1c:	b1d5      	cbz	r5, 801ce54 <__d2b+0x98>
 801ce1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801ce22:	4405      	add	r5, r0
 801ce24:	f8c9 5000 	str.w	r5, [r9]
 801ce28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801ce2c:	f8c8 0000 	str.w	r0, [r8]
 801ce30:	4620      	mov	r0, r4
 801ce32:	b003      	add	sp, #12
 801ce34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ce38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ce3c:	e7d5      	b.n	801cdea <__d2b+0x2e>
 801ce3e:	6161      	str	r1, [r4, #20]
 801ce40:	e7e5      	b.n	801ce0e <__d2b+0x52>
 801ce42:	a801      	add	r0, sp, #4
 801ce44:	f7ff fd5a 	bl	801c8fc <__lo0bits>
 801ce48:	9b01      	ldr	r3, [sp, #4]
 801ce4a:	6163      	str	r3, [r4, #20]
 801ce4c:	2201      	movs	r2, #1
 801ce4e:	6122      	str	r2, [r4, #16]
 801ce50:	3020      	adds	r0, #32
 801ce52:	e7e3      	b.n	801ce1c <__d2b+0x60>
 801ce54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ce58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ce5c:	f8c9 0000 	str.w	r0, [r9]
 801ce60:	6918      	ldr	r0, [r3, #16]
 801ce62:	f7ff fd2b 	bl	801c8bc <__hi0bits>
 801ce66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ce6a:	e7df      	b.n	801ce2c <__d2b+0x70>
 801ce6c:	0801db9f 	.word	0x0801db9f
 801ce70:	0801dc10 	.word	0x0801dc10

0801ce74 <_calloc_r>:
 801ce74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ce76:	fba1 2402 	umull	r2, r4, r1, r2
 801ce7a:	b94c      	cbnz	r4, 801ce90 <_calloc_r+0x1c>
 801ce7c:	4611      	mov	r1, r2
 801ce7e:	9201      	str	r2, [sp, #4]
 801ce80:	f000 f87a 	bl	801cf78 <_malloc_r>
 801ce84:	9a01      	ldr	r2, [sp, #4]
 801ce86:	4605      	mov	r5, r0
 801ce88:	b930      	cbnz	r0, 801ce98 <_calloc_r+0x24>
 801ce8a:	4628      	mov	r0, r5
 801ce8c:	b003      	add	sp, #12
 801ce8e:	bd30      	pop	{r4, r5, pc}
 801ce90:	220c      	movs	r2, #12
 801ce92:	6002      	str	r2, [r0, #0]
 801ce94:	2500      	movs	r5, #0
 801ce96:	e7f8      	b.n	801ce8a <_calloc_r+0x16>
 801ce98:	4621      	mov	r1, r4
 801ce9a:	f7fd fdd5 	bl	801aa48 <memset>
 801ce9e:	e7f4      	b.n	801ce8a <_calloc_r+0x16>

0801cea0 <_free_r>:
 801cea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cea2:	2900      	cmp	r1, #0
 801cea4:	d044      	beq.n	801cf30 <_free_r+0x90>
 801cea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ceaa:	9001      	str	r0, [sp, #4]
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	f1a1 0404 	sub.w	r4, r1, #4
 801ceb2:	bfb8      	it	lt
 801ceb4:	18e4      	addlt	r4, r4, r3
 801ceb6:	f000 fb61 	bl	801d57c <__malloc_lock>
 801ceba:	4a1e      	ldr	r2, [pc, #120]	; (801cf34 <_free_r+0x94>)
 801cebc:	9801      	ldr	r0, [sp, #4]
 801cebe:	6813      	ldr	r3, [r2, #0]
 801cec0:	b933      	cbnz	r3, 801ced0 <_free_r+0x30>
 801cec2:	6063      	str	r3, [r4, #4]
 801cec4:	6014      	str	r4, [r2, #0]
 801cec6:	b003      	add	sp, #12
 801cec8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cecc:	f000 bb5c 	b.w	801d588 <__malloc_unlock>
 801ced0:	42a3      	cmp	r3, r4
 801ced2:	d908      	bls.n	801cee6 <_free_r+0x46>
 801ced4:	6825      	ldr	r5, [r4, #0]
 801ced6:	1961      	adds	r1, r4, r5
 801ced8:	428b      	cmp	r3, r1
 801ceda:	bf01      	itttt	eq
 801cedc:	6819      	ldreq	r1, [r3, #0]
 801cede:	685b      	ldreq	r3, [r3, #4]
 801cee0:	1949      	addeq	r1, r1, r5
 801cee2:	6021      	streq	r1, [r4, #0]
 801cee4:	e7ed      	b.n	801cec2 <_free_r+0x22>
 801cee6:	461a      	mov	r2, r3
 801cee8:	685b      	ldr	r3, [r3, #4]
 801ceea:	b10b      	cbz	r3, 801cef0 <_free_r+0x50>
 801ceec:	42a3      	cmp	r3, r4
 801ceee:	d9fa      	bls.n	801cee6 <_free_r+0x46>
 801cef0:	6811      	ldr	r1, [r2, #0]
 801cef2:	1855      	adds	r5, r2, r1
 801cef4:	42a5      	cmp	r5, r4
 801cef6:	d10b      	bne.n	801cf10 <_free_r+0x70>
 801cef8:	6824      	ldr	r4, [r4, #0]
 801cefa:	4421      	add	r1, r4
 801cefc:	1854      	adds	r4, r2, r1
 801cefe:	42a3      	cmp	r3, r4
 801cf00:	6011      	str	r1, [r2, #0]
 801cf02:	d1e0      	bne.n	801cec6 <_free_r+0x26>
 801cf04:	681c      	ldr	r4, [r3, #0]
 801cf06:	685b      	ldr	r3, [r3, #4]
 801cf08:	6053      	str	r3, [r2, #4]
 801cf0a:	4421      	add	r1, r4
 801cf0c:	6011      	str	r1, [r2, #0]
 801cf0e:	e7da      	b.n	801cec6 <_free_r+0x26>
 801cf10:	d902      	bls.n	801cf18 <_free_r+0x78>
 801cf12:	230c      	movs	r3, #12
 801cf14:	6003      	str	r3, [r0, #0]
 801cf16:	e7d6      	b.n	801cec6 <_free_r+0x26>
 801cf18:	6825      	ldr	r5, [r4, #0]
 801cf1a:	1961      	adds	r1, r4, r5
 801cf1c:	428b      	cmp	r3, r1
 801cf1e:	bf04      	itt	eq
 801cf20:	6819      	ldreq	r1, [r3, #0]
 801cf22:	685b      	ldreq	r3, [r3, #4]
 801cf24:	6063      	str	r3, [r4, #4]
 801cf26:	bf04      	itt	eq
 801cf28:	1949      	addeq	r1, r1, r5
 801cf2a:	6021      	streq	r1, [r4, #0]
 801cf2c:	6054      	str	r4, [r2, #4]
 801cf2e:	e7ca      	b.n	801cec6 <_free_r+0x26>
 801cf30:	b003      	add	sp, #12
 801cf32:	bd30      	pop	{r4, r5, pc}
 801cf34:	20008828 	.word	0x20008828

0801cf38 <sbrk_aligned>:
 801cf38:	b570      	push	{r4, r5, r6, lr}
 801cf3a:	4e0e      	ldr	r6, [pc, #56]	; (801cf74 <sbrk_aligned+0x3c>)
 801cf3c:	460c      	mov	r4, r1
 801cf3e:	6831      	ldr	r1, [r6, #0]
 801cf40:	4605      	mov	r5, r0
 801cf42:	b911      	cbnz	r1, 801cf4a <sbrk_aligned+0x12>
 801cf44:	f000 fa2e 	bl	801d3a4 <_sbrk_r>
 801cf48:	6030      	str	r0, [r6, #0]
 801cf4a:	4621      	mov	r1, r4
 801cf4c:	4628      	mov	r0, r5
 801cf4e:	f000 fa29 	bl	801d3a4 <_sbrk_r>
 801cf52:	1c43      	adds	r3, r0, #1
 801cf54:	d00a      	beq.n	801cf6c <sbrk_aligned+0x34>
 801cf56:	1cc4      	adds	r4, r0, #3
 801cf58:	f024 0403 	bic.w	r4, r4, #3
 801cf5c:	42a0      	cmp	r0, r4
 801cf5e:	d007      	beq.n	801cf70 <sbrk_aligned+0x38>
 801cf60:	1a21      	subs	r1, r4, r0
 801cf62:	4628      	mov	r0, r5
 801cf64:	f000 fa1e 	bl	801d3a4 <_sbrk_r>
 801cf68:	3001      	adds	r0, #1
 801cf6a:	d101      	bne.n	801cf70 <sbrk_aligned+0x38>
 801cf6c:	f04f 34ff 	mov.w	r4, #4294967295
 801cf70:	4620      	mov	r0, r4
 801cf72:	bd70      	pop	{r4, r5, r6, pc}
 801cf74:	2000882c 	.word	0x2000882c

0801cf78 <_malloc_r>:
 801cf78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf7c:	1ccd      	adds	r5, r1, #3
 801cf7e:	f025 0503 	bic.w	r5, r5, #3
 801cf82:	3508      	adds	r5, #8
 801cf84:	2d0c      	cmp	r5, #12
 801cf86:	bf38      	it	cc
 801cf88:	250c      	movcc	r5, #12
 801cf8a:	2d00      	cmp	r5, #0
 801cf8c:	4607      	mov	r7, r0
 801cf8e:	db01      	blt.n	801cf94 <_malloc_r+0x1c>
 801cf90:	42a9      	cmp	r1, r5
 801cf92:	d905      	bls.n	801cfa0 <_malloc_r+0x28>
 801cf94:	230c      	movs	r3, #12
 801cf96:	603b      	str	r3, [r7, #0]
 801cf98:	2600      	movs	r6, #0
 801cf9a:	4630      	mov	r0, r6
 801cf9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cfa0:	4e2e      	ldr	r6, [pc, #184]	; (801d05c <_malloc_r+0xe4>)
 801cfa2:	f000 faeb 	bl	801d57c <__malloc_lock>
 801cfa6:	6833      	ldr	r3, [r6, #0]
 801cfa8:	461c      	mov	r4, r3
 801cfaa:	bb34      	cbnz	r4, 801cffa <_malloc_r+0x82>
 801cfac:	4629      	mov	r1, r5
 801cfae:	4638      	mov	r0, r7
 801cfb0:	f7ff ffc2 	bl	801cf38 <sbrk_aligned>
 801cfb4:	1c43      	adds	r3, r0, #1
 801cfb6:	4604      	mov	r4, r0
 801cfb8:	d14d      	bne.n	801d056 <_malloc_r+0xde>
 801cfba:	6834      	ldr	r4, [r6, #0]
 801cfbc:	4626      	mov	r6, r4
 801cfbe:	2e00      	cmp	r6, #0
 801cfc0:	d140      	bne.n	801d044 <_malloc_r+0xcc>
 801cfc2:	6823      	ldr	r3, [r4, #0]
 801cfc4:	4631      	mov	r1, r6
 801cfc6:	4638      	mov	r0, r7
 801cfc8:	eb04 0803 	add.w	r8, r4, r3
 801cfcc:	f000 f9ea 	bl	801d3a4 <_sbrk_r>
 801cfd0:	4580      	cmp	r8, r0
 801cfd2:	d13a      	bne.n	801d04a <_malloc_r+0xd2>
 801cfd4:	6821      	ldr	r1, [r4, #0]
 801cfd6:	3503      	adds	r5, #3
 801cfd8:	1a6d      	subs	r5, r5, r1
 801cfda:	f025 0503 	bic.w	r5, r5, #3
 801cfde:	3508      	adds	r5, #8
 801cfe0:	2d0c      	cmp	r5, #12
 801cfe2:	bf38      	it	cc
 801cfe4:	250c      	movcc	r5, #12
 801cfe6:	4629      	mov	r1, r5
 801cfe8:	4638      	mov	r0, r7
 801cfea:	f7ff ffa5 	bl	801cf38 <sbrk_aligned>
 801cfee:	3001      	adds	r0, #1
 801cff0:	d02b      	beq.n	801d04a <_malloc_r+0xd2>
 801cff2:	6823      	ldr	r3, [r4, #0]
 801cff4:	442b      	add	r3, r5
 801cff6:	6023      	str	r3, [r4, #0]
 801cff8:	e00e      	b.n	801d018 <_malloc_r+0xa0>
 801cffa:	6822      	ldr	r2, [r4, #0]
 801cffc:	1b52      	subs	r2, r2, r5
 801cffe:	d41e      	bmi.n	801d03e <_malloc_r+0xc6>
 801d000:	2a0b      	cmp	r2, #11
 801d002:	d916      	bls.n	801d032 <_malloc_r+0xba>
 801d004:	1961      	adds	r1, r4, r5
 801d006:	42a3      	cmp	r3, r4
 801d008:	6025      	str	r5, [r4, #0]
 801d00a:	bf18      	it	ne
 801d00c:	6059      	strne	r1, [r3, #4]
 801d00e:	6863      	ldr	r3, [r4, #4]
 801d010:	bf08      	it	eq
 801d012:	6031      	streq	r1, [r6, #0]
 801d014:	5162      	str	r2, [r4, r5]
 801d016:	604b      	str	r3, [r1, #4]
 801d018:	4638      	mov	r0, r7
 801d01a:	f104 060b 	add.w	r6, r4, #11
 801d01e:	f000 fab3 	bl	801d588 <__malloc_unlock>
 801d022:	f026 0607 	bic.w	r6, r6, #7
 801d026:	1d23      	adds	r3, r4, #4
 801d028:	1af2      	subs	r2, r6, r3
 801d02a:	d0b6      	beq.n	801cf9a <_malloc_r+0x22>
 801d02c:	1b9b      	subs	r3, r3, r6
 801d02e:	50a3      	str	r3, [r4, r2]
 801d030:	e7b3      	b.n	801cf9a <_malloc_r+0x22>
 801d032:	6862      	ldr	r2, [r4, #4]
 801d034:	42a3      	cmp	r3, r4
 801d036:	bf0c      	ite	eq
 801d038:	6032      	streq	r2, [r6, #0]
 801d03a:	605a      	strne	r2, [r3, #4]
 801d03c:	e7ec      	b.n	801d018 <_malloc_r+0xa0>
 801d03e:	4623      	mov	r3, r4
 801d040:	6864      	ldr	r4, [r4, #4]
 801d042:	e7b2      	b.n	801cfaa <_malloc_r+0x32>
 801d044:	4634      	mov	r4, r6
 801d046:	6876      	ldr	r6, [r6, #4]
 801d048:	e7b9      	b.n	801cfbe <_malloc_r+0x46>
 801d04a:	230c      	movs	r3, #12
 801d04c:	603b      	str	r3, [r7, #0]
 801d04e:	4638      	mov	r0, r7
 801d050:	f000 fa9a 	bl	801d588 <__malloc_unlock>
 801d054:	e7a1      	b.n	801cf9a <_malloc_r+0x22>
 801d056:	6025      	str	r5, [r4, #0]
 801d058:	e7de      	b.n	801d018 <_malloc_r+0xa0>
 801d05a:	bf00      	nop
 801d05c:	20008828 	.word	0x20008828

0801d060 <__sfputc_r>:
 801d060:	6893      	ldr	r3, [r2, #8]
 801d062:	3b01      	subs	r3, #1
 801d064:	2b00      	cmp	r3, #0
 801d066:	b410      	push	{r4}
 801d068:	6093      	str	r3, [r2, #8]
 801d06a:	da08      	bge.n	801d07e <__sfputc_r+0x1e>
 801d06c:	6994      	ldr	r4, [r2, #24]
 801d06e:	42a3      	cmp	r3, r4
 801d070:	db01      	blt.n	801d076 <__sfputc_r+0x16>
 801d072:	290a      	cmp	r1, #10
 801d074:	d103      	bne.n	801d07e <__sfputc_r+0x1e>
 801d076:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d07a:	f7fe ba0f 	b.w	801b49c <__swbuf_r>
 801d07e:	6813      	ldr	r3, [r2, #0]
 801d080:	1c58      	adds	r0, r3, #1
 801d082:	6010      	str	r0, [r2, #0]
 801d084:	7019      	strb	r1, [r3, #0]
 801d086:	4608      	mov	r0, r1
 801d088:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d08c:	4770      	bx	lr

0801d08e <__sfputs_r>:
 801d08e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d090:	4606      	mov	r6, r0
 801d092:	460f      	mov	r7, r1
 801d094:	4614      	mov	r4, r2
 801d096:	18d5      	adds	r5, r2, r3
 801d098:	42ac      	cmp	r4, r5
 801d09a:	d101      	bne.n	801d0a0 <__sfputs_r+0x12>
 801d09c:	2000      	movs	r0, #0
 801d09e:	e007      	b.n	801d0b0 <__sfputs_r+0x22>
 801d0a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d0a4:	463a      	mov	r2, r7
 801d0a6:	4630      	mov	r0, r6
 801d0a8:	f7ff ffda 	bl	801d060 <__sfputc_r>
 801d0ac:	1c43      	adds	r3, r0, #1
 801d0ae:	d1f3      	bne.n	801d098 <__sfputs_r+0xa>
 801d0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d0b4 <_vfiprintf_r>:
 801d0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0b8:	460d      	mov	r5, r1
 801d0ba:	b09d      	sub	sp, #116	; 0x74
 801d0bc:	4614      	mov	r4, r2
 801d0be:	4698      	mov	r8, r3
 801d0c0:	4606      	mov	r6, r0
 801d0c2:	b118      	cbz	r0, 801d0cc <_vfiprintf_r+0x18>
 801d0c4:	6983      	ldr	r3, [r0, #24]
 801d0c6:	b90b      	cbnz	r3, 801d0cc <_vfiprintf_r+0x18>
 801d0c8:	f7ff fa3e 	bl	801c548 <__sinit>
 801d0cc:	4b89      	ldr	r3, [pc, #548]	; (801d2f4 <_vfiprintf_r+0x240>)
 801d0ce:	429d      	cmp	r5, r3
 801d0d0:	d11b      	bne.n	801d10a <_vfiprintf_r+0x56>
 801d0d2:	6875      	ldr	r5, [r6, #4]
 801d0d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d0d6:	07d9      	lsls	r1, r3, #31
 801d0d8:	d405      	bmi.n	801d0e6 <_vfiprintf_r+0x32>
 801d0da:	89ab      	ldrh	r3, [r5, #12]
 801d0dc:	059a      	lsls	r2, r3, #22
 801d0de:	d402      	bmi.n	801d0e6 <_vfiprintf_r+0x32>
 801d0e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d0e2:	f7ff fad4 	bl	801c68e <__retarget_lock_acquire_recursive>
 801d0e6:	89ab      	ldrh	r3, [r5, #12]
 801d0e8:	071b      	lsls	r3, r3, #28
 801d0ea:	d501      	bpl.n	801d0f0 <_vfiprintf_r+0x3c>
 801d0ec:	692b      	ldr	r3, [r5, #16]
 801d0ee:	b9eb      	cbnz	r3, 801d12c <_vfiprintf_r+0x78>
 801d0f0:	4629      	mov	r1, r5
 801d0f2:	4630      	mov	r0, r6
 801d0f4:	f7fe fa24 	bl	801b540 <__swsetup_r>
 801d0f8:	b1c0      	cbz	r0, 801d12c <_vfiprintf_r+0x78>
 801d0fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d0fc:	07dc      	lsls	r4, r3, #31
 801d0fe:	d50e      	bpl.n	801d11e <_vfiprintf_r+0x6a>
 801d100:	f04f 30ff 	mov.w	r0, #4294967295
 801d104:	b01d      	add	sp, #116	; 0x74
 801d106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d10a:	4b7b      	ldr	r3, [pc, #492]	; (801d2f8 <_vfiprintf_r+0x244>)
 801d10c:	429d      	cmp	r5, r3
 801d10e:	d101      	bne.n	801d114 <_vfiprintf_r+0x60>
 801d110:	68b5      	ldr	r5, [r6, #8]
 801d112:	e7df      	b.n	801d0d4 <_vfiprintf_r+0x20>
 801d114:	4b79      	ldr	r3, [pc, #484]	; (801d2fc <_vfiprintf_r+0x248>)
 801d116:	429d      	cmp	r5, r3
 801d118:	bf08      	it	eq
 801d11a:	68f5      	ldreq	r5, [r6, #12]
 801d11c:	e7da      	b.n	801d0d4 <_vfiprintf_r+0x20>
 801d11e:	89ab      	ldrh	r3, [r5, #12]
 801d120:	0598      	lsls	r0, r3, #22
 801d122:	d4ed      	bmi.n	801d100 <_vfiprintf_r+0x4c>
 801d124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d126:	f7ff fab3 	bl	801c690 <__retarget_lock_release_recursive>
 801d12a:	e7e9      	b.n	801d100 <_vfiprintf_r+0x4c>
 801d12c:	2300      	movs	r3, #0
 801d12e:	9309      	str	r3, [sp, #36]	; 0x24
 801d130:	2320      	movs	r3, #32
 801d132:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d136:	f8cd 800c 	str.w	r8, [sp, #12]
 801d13a:	2330      	movs	r3, #48	; 0x30
 801d13c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d300 <_vfiprintf_r+0x24c>
 801d140:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d144:	f04f 0901 	mov.w	r9, #1
 801d148:	4623      	mov	r3, r4
 801d14a:	469a      	mov	sl, r3
 801d14c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d150:	b10a      	cbz	r2, 801d156 <_vfiprintf_r+0xa2>
 801d152:	2a25      	cmp	r2, #37	; 0x25
 801d154:	d1f9      	bne.n	801d14a <_vfiprintf_r+0x96>
 801d156:	ebba 0b04 	subs.w	fp, sl, r4
 801d15a:	d00b      	beq.n	801d174 <_vfiprintf_r+0xc0>
 801d15c:	465b      	mov	r3, fp
 801d15e:	4622      	mov	r2, r4
 801d160:	4629      	mov	r1, r5
 801d162:	4630      	mov	r0, r6
 801d164:	f7ff ff93 	bl	801d08e <__sfputs_r>
 801d168:	3001      	adds	r0, #1
 801d16a:	f000 80aa 	beq.w	801d2c2 <_vfiprintf_r+0x20e>
 801d16e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d170:	445a      	add	r2, fp
 801d172:	9209      	str	r2, [sp, #36]	; 0x24
 801d174:	f89a 3000 	ldrb.w	r3, [sl]
 801d178:	2b00      	cmp	r3, #0
 801d17a:	f000 80a2 	beq.w	801d2c2 <_vfiprintf_r+0x20e>
 801d17e:	2300      	movs	r3, #0
 801d180:	f04f 32ff 	mov.w	r2, #4294967295
 801d184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d188:	f10a 0a01 	add.w	sl, sl, #1
 801d18c:	9304      	str	r3, [sp, #16]
 801d18e:	9307      	str	r3, [sp, #28]
 801d190:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d194:	931a      	str	r3, [sp, #104]	; 0x68
 801d196:	4654      	mov	r4, sl
 801d198:	2205      	movs	r2, #5
 801d19a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d19e:	4858      	ldr	r0, [pc, #352]	; (801d300 <_vfiprintf_r+0x24c>)
 801d1a0:	f7e2 fff6 	bl	8000190 <memchr>
 801d1a4:	9a04      	ldr	r2, [sp, #16]
 801d1a6:	b9d8      	cbnz	r0, 801d1e0 <_vfiprintf_r+0x12c>
 801d1a8:	06d1      	lsls	r1, r2, #27
 801d1aa:	bf44      	itt	mi
 801d1ac:	2320      	movmi	r3, #32
 801d1ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d1b2:	0713      	lsls	r3, r2, #28
 801d1b4:	bf44      	itt	mi
 801d1b6:	232b      	movmi	r3, #43	; 0x2b
 801d1b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d1bc:	f89a 3000 	ldrb.w	r3, [sl]
 801d1c0:	2b2a      	cmp	r3, #42	; 0x2a
 801d1c2:	d015      	beq.n	801d1f0 <_vfiprintf_r+0x13c>
 801d1c4:	9a07      	ldr	r2, [sp, #28]
 801d1c6:	4654      	mov	r4, sl
 801d1c8:	2000      	movs	r0, #0
 801d1ca:	f04f 0c0a 	mov.w	ip, #10
 801d1ce:	4621      	mov	r1, r4
 801d1d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d1d4:	3b30      	subs	r3, #48	; 0x30
 801d1d6:	2b09      	cmp	r3, #9
 801d1d8:	d94e      	bls.n	801d278 <_vfiprintf_r+0x1c4>
 801d1da:	b1b0      	cbz	r0, 801d20a <_vfiprintf_r+0x156>
 801d1dc:	9207      	str	r2, [sp, #28]
 801d1de:	e014      	b.n	801d20a <_vfiprintf_r+0x156>
 801d1e0:	eba0 0308 	sub.w	r3, r0, r8
 801d1e4:	fa09 f303 	lsl.w	r3, r9, r3
 801d1e8:	4313      	orrs	r3, r2
 801d1ea:	9304      	str	r3, [sp, #16]
 801d1ec:	46a2      	mov	sl, r4
 801d1ee:	e7d2      	b.n	801d196 <_vfiprintf_r+0xe2>
 801d1f0:	9b03      	ldr	r3, [sp, #12]
 801d1f2:	1d19      	adds	r1, r3, #4
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	9103      	str	r1, [sp, #12]
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	bfbb      	ittet	lt
 801d1fc:	425b      	neglt	r3, r3
 801d1fe:	f042 0202 	orrlt.w	r2, r2, #2
 801d202:	9307      	strge	r3, [sp, #28]
 801d204:	9307      	strlt	r3, [sp, #28]
 801d206:	bfb8      	it	lt
 801d208:	9204      	strlt	r2, [sp, #16]
 801d20a:	7823      	ldrb	r3, [r4, #0]
 801d20c:	2b2e      	cmp	r3, #46	; 0x2e
 801d20e:	d10c      	bne.n	801d22a <_vfiprintf_r+0x176>
 801d210:	7863      	ldrb	r3, [r4, #1]
 801d212:	2b2a      	cmp	r3, #42	; 0x2a
 801d214:	d135      	bne.n	801d282 <_vfiprintf_r+0x1ce>
 801d216:	9b03      	ldr	r3, [sp, #12]
 801d218:	1d1a      	adds	r2, r3, #4
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	9203      	str	r2, [sp, #12]
 801d21e:	2b00      	cmp	r3, #0
 801d220:	bfb8      	it	lt
 801d222:	f04f 33ff 	movlt.w	r3, #4294967295
 801d226:	3402      	adds	r4, #2
 801d228:	9305      	str	r3, [sp, #20]
 801d22a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d310 <_vfiprintf_r+0x25c>
 801d22e:	7821      	ldrb	r1, [r4, #0]
 801d230:	2203      	movs	r2, #3
 801d232:	4650      	mov	r0, sl
 801d234:	f7e2 ffac 	bl	8000190 <memchr>
 801d238:	b140      	cbz	r0, 801d24c <_vfiprintf_r+0x198>
 801d23a:	2340      	movs	r3, #64	; 0x40
 801d23c:	eba0 000a 	sub.w	r0, r0, sl
 801d240:	fa03 f000 	lsl.w	r0, r3, r0
 801d244:	9b04      	ldr	r3, [sp, #16]
 801d246:	4303      	orrs	r3, r0
 801d248:	3401      	adds	r4, #1
 801d24a:	9304      	str	r3, [sp, #16]
 801d24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d250:	482c      	ldr	r0, [pc, #176]	; (801d304 <_vfiprintf_r+0x250>)
 801d252:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d256:	2206      	movs	r2, #6
 801d258:	f7e2 ff9a 	bl	8000190 <memchr>
 801d25c:	2800      	cmp	r0, #0
 801d25e:	d03f      	beq.n	801d2e0 <_vfiprintf_r+0x22c>
 801d260:	4b29      	ldr	r3, [pc, #164]	; (801d308 <_vfiprintf_r+0x254>)
 801d262:	bb1b      	cbnz	r3, 801d2ac <_vfiprintf_r+0x1f8>
 801d264:	9b03      	ldr	r3, [sp, #12]
 801d266:	3307      	adds	r3, #7
 801d268:	f023 0307 	bic.w	r3, r3, #7
 801d26c:	3308      	adds	r3, #8
 801d26e:	9303      	str	r3, [sp, #12]
 801d270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d272:	443b      	add	r3, r7
 801d274:	9309      	str	r3, [sp, #36]	; 0x24
 801d276:	e767      	b.n	801d148 <_vfiprintf_r+0x94>
 801d278:	fb0c 3202 	mla	r2, ip, r2, r3
 801d27c:	460c      	mov	r4, r1
 801d27e:	2001      	movs	r0, #1
 801d280:	e7a5      	b.n	801d1ce <_vfiprintf_r+0x11a>
 801d282:	2300      	movs	r3, #0
 801d284:	3401      	adds	r4, #1
 801d286:	9305      	str	r3, [sp, #20]
 801d288:	4619      	mov	r1, r3
 801d28a:	f04f 0c0a 	mov.w	ip, #10
 801d28e:	4620      	mov	r0, r4
 801d290:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d294:	3a30      	subs	r2, #48	; 0x30
 801d296:	2a09      	cmp	r2, #9
 801d298:	d903      	bls.n	801d2a2 <_vfiprintf_r+0x1ee>
 801d29a:	2b00      	cmp	r3, #0
 801d29c:	d0c5      	beq.n	801d22a <_vfiprintf_r+0x176>
 801d29e:	9105      	str	r1, [sp, #20]
 801d2a0:	e7c3      	b.n	801d22a <_vfiprintf_r+0x176>
 801d2a2:	fb0c 2101 	mla	r1, ip, r1, r2
 801d2a6:	4604      	mov	r4, r0
 801d2a8:	2301      	movs	r3, #1
 801d2aa:	e7f0      	b.n	801d28e <_vfiprintf_r+0x1da>
 801d2ac:	ab03      	add	r3, sp, #12
 801d2ae:	9300      	str	r3, [sp, #0]
 801d2b0:	462a      	mov	r2, r5
 801d2b2:	4b16      	ldr	r3, [pc, #88]	; (801d30c <_vfiprintf_r+0x258>)
 801d2b4:	a904      	add	r1, sp, #16
 801d2b6:	4630      	mov	r0, r6
 801d2b8:	f7fd fc6e 	bl	801ab98 <_printf_float>
 801d2bc:	4607      	mov	r7, r0
 801d2be:	1c78      	adds	r0, r7, #1
 801d2c0:	d1d6      	bne.n	801d270 <_vfiprintf_r+0x1bc>
 801d2c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d2c4:	07d9      	lsls	r1, r3, #31
 801d2c6:	d405      	bmi.n	801d2d4 <_vfiprintf_r+0x220>
 801d2c8:	89ab      	ldrh	r3, [r5, #12]
 801d2ca:	059a      	lsls	r2, r3, #22
 801d2cc:	d402      	bmi.n	801d2d4 <_vfiprintf_r+0x220>
 801d2ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d2d0:	f7ff f9de 	bl	801c690 <__retarget_lock_release_recursive>
 801d2d4:	89ab      	ldrh	r3, [r5, #12]
 801d2d6:	065b      	lsls	r3, r3, #25
 801d2d8:	f53f af12 	bmi.w	801d100 <_vfiprintf_r+0x4c>
 801d2dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d2de:	e711      	b.n	801d104 <_vfiprintf_r+0x50>
 801d2e0:	ab03      	add	r3, sp, #12
 801d2e2:	9300      	str	r3, [sp, #0]
 801d2e4:	462a      	mov	r2, r5
 801d2e6:	4b09      	ldr	r3, [pc, #36]	; (801d30c <_vfiprintf_r+0x258>)
 801d2e8:	a904      	add	r1, sp, #16
 801d2ea:	4630      	mov	r0, r6
 801d2ec:	f7fd fef8 	bl	801b0e0 <_printf_i>
 801d2f0:	e7e4      	b.n	801d2bc <_vfiprintf_r+0x208>
 801d2f2:	bf00      	nop
 801d2f4:	0801dbd0 	.word	0x0801dbd0
 801d2f8:	0801dbf0 	.word	0x0801dbf0
 801d2fc:	0801dbb0 	.word	0x0801dbb0
 801d300:	0801dd6c 	.word	0x0801dd6c
 801d304:	0801dd76 	.word	0x0801dd76
 801d308:	0801ab99 	.word	0x0801ab99
 801d30c:	0801d08f 	.word	0x0801d08f
 801d310:	0801dd72 	.word	0x0801dd72

0801d314 <_putc_r>:
 801d314:	b570      	push	{r4, r5, r6, lr}
 801d316:	460d      	mov	r5, r1
 801d318:	4614      	mov	r4, r2
 801d31a:	4606      	mov	r6, r0
 801d31c:	b118      	cbz	r0, 801d326 <_putc_r+0x12>
 801d31e:	6983      	ldr	r3, [r0, #24]
 801d320:	b90b      	cbnz	r3, 801d326 <_putc_r+0x12>
 801d322:	f7ff f911 	bl	801c548 <__sinit>
 801d326:	4b1c      	ldr	r3, [pc, #112]	; (801d398 <_putc_r+0x84>)
 801d328:	429c      	cmp	r4, r3
 801d32a:	d124      	bne.n	801d376 <_putc_r+0x62>
 801d32c:	6874      	ldr	r4, [r6, #4]
 801d32e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d330:	07d8      	lsls	r0, r3, #31
 801d332:	d405      	bmi.n	801d340 <_putc_r+0x2c>
 801d334:	89a3      	ldrh	r3, [r4, #12]
 801d336:	0599      	lsls	r1, r3, #22
 801d338:	d402      	bmi.n	801d340 <_putc_r+0x2c>
 801d33a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d33c:	f7ff f9a7 	bl	801c68e <__retarget_lock_acquire_recursive>
 801d340:	68a3      	ldr	r3, [r4, #8]
 801d342:	3b01      	subs	r3, #1
 801d344:	2b00      	cmp	r3, #0
 801d346:	60a3      	str	r3, [r4, #8]
 801d348:	da05      	bge.n	801d356 <_putc_r+0x42>
 801d34a:	69a2      	ldr	r2, [r4, #24]
 801d34c:	4293      	cmp	r3, r2
 801d34e:	db1c      	blt.n	801d38a <_putc_r+0x76>
 801d350:	b2eb      	uxtb	r3, r5
 801d352:	2b0a      	cmp	r3, #10
 801d354:	d019      	beq.n	801d38a <_putc_r+0x76>
 801d356:	6823      	ldr	r3, [r4, #0]
 801d358:	1c5a      	adds	r2, r3, #1
 801d35a:	6022      	str	r2, [r4, #0]
 801d35c:	701d      	strb	r5, [r3, #0]
 801d35e:	b2ed      	uxtb	r5, r5
 801d360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d362:	07da      	lsls	r2, r3, #31
 801d364:	d405      	bmi.n	801d372 <_putc_r+0x5e>
 801d366:	89a3      	ldrh	r3, [r4, #12]
 801d368:	059b      	lsls	r3, r3, #22
 801d36a:	d402      	bmi.n	801d372 <_putc_r+0x5e>
 801d36c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d36e:	f7ff f98f 	bl	801c690 <__retarget_lock_release_recursive>
 801d372:	4628      	mov	r0, r5
 801d374:	bd70      	pop	{r4, r5, r6, pc}
 801d376:	4b09      	ldr	r3, [pc, #36]	; (801d39c <_putc_r+0x88>)
 801d378:	429c      	cmp	r4, r3
 801d37a:	d101      	bne.n	801d380 <_putc_r+0x6c>
 801d37c:	68b4      	ldr	r4, [r6, #8]
 801d37e:	e7d6      	b.n	801d32e <_putc_r+0x1a>
 801d380:	4b07      	ldr	r3, [pc, #28]	; (801d3a0 <_putc_r+0x8c>)
 801d382:	429c      	cmp	r4, r3
 801d384:	bf08      	it	eq
 801d386:	68f4      	ldreq	r4, [r6, #12]
 801d388:	e7d1      	b.n	801d32e <_putc_r+0x1a>
 801d38a:	4629      	mov	r1, r5
 801d38c:	4622      	mov	r2, r4
 801d38e:	4630      	mov	r0, r6
 801d390:	f7fe f884 	bl	801b49c <__swbuf_r>
 801d394:	4605      	mov	r5, r0
 801d396:	e7e3      	b.n	801d360 <_putc_r+0x4c>
 801d398:	0801dbd0 	.word	0x0801dbd0
 801d39c:	0801dbf0 	.word	0x0801dbf0
 801d3a0:	0801dbb0 	.word	0x0801dbb0

0801d3a4 <_sbrk_r>:
 801d3a4:	b538      	push	{r3, r4, r5, lr}
 801d3a6:	4d06      	ldr	r5, [pc, #24]	; (801d3c0 <_sbrk_r+0x1c>)
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	4604      	mov	r4, r0
 801d3ac:	4608      	mov	r0, r1
 801d3ae:	602b      	str	r3, [r5, #0]
 801d3b0:	f7e4 fdf2 	bl	8001f98 <_sbrk>
 801d3b4:	1c43      	adds	r3, r0, #1
 801d3b6:	d102      	bne.n	801d3be <_sbrk_r+0x1a>
 801d3b8:	682b      	ldr	r3, [r5, #0]
 801d3ba:	b103      	cbz	r3, 801d3be <_sbrk_r+0x1a>
 801d3bc:	6023      	str	r3, [r4, #0]
 801d3be:	bd38      	pop	{r3, r4, r5, pc}
 801d3c0:	20008830 	.word	0x20008830

0801d3c4 <__sread>:
 801d3c4:	b510      	push	{r4, lr}
 801d3c6:	460c      	mov	r4, r1
 801d3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d3cc:	f000 f8e2 	bl	801d594 <_read_r>
 801d3d0:	2800      	cmp	r0, #0
 801d3d2:	bfab      	itete	ge
 801d3d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d3d6:	89a3      	ldrhlt	r3, [r4, #12]
 801d3d8:	181b      	addge	r3, r3, r0
 801d3da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d3de:	bfac      	ite	ge
 801d3e0:	6563      	strge	r3, [r4, #84]	; 0x54
 801d3e2:	81a3      	strhlt	r3, [r4, #12]
 801d3e4:	bd10      	pop	{r4, pc}

0801d3e6 <__swrite>:
 801d3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d3ea:	461f      	mov	r7, r3
 801d3ec:	898b      	ldrh	r3, [r1, #12]
 801d3ee:	05db      	lsls	r3, r3, #23
 801d3f0:	4605      	mov	r5, r0
 801d3f2:	460c      	mov	r4, r1
 801d3f4:	4616      	mov	r6, r2
 801d3f6:	d505      	bpl.n	801d404 <__swrite+0x1e>
 801d3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d3fc:	2302      	movs	r3, #2
 801d3fe:	2200      	movs	r2, #0
 801d400:	f000 f898 	bl	801d534 <_lseek_r>
 801d404:	89a3      	ldrh	r3, [r4, #12]
 801d406:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d40a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d40e:	81a3      	strh	r3, [r4, #12]
 801d410:	4632      	mov	r2, r6
 801d412:	463b      	mov	r3, r7
 801d414:	4628      	mov	r0, r5
 801d416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d41a:	f000 b817 	b.w	801d44c <_write_r>

0801d41e <__sseek>:
 801d41e:	b510      	push	{r4, lr}
 801d420:	460c      	mov	r4, r1
 801d422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d426:	f000 f885 	bl	801d534 <_lseek_r>
 801d42a:	1c43      	adds	r3, r0, #1
 801d42c:	89a3      	ldrh	r3, [r4, #12]
 801d42e:	bf15      	itete	ne
 801d430:	6560      	strne	r0, [r4, #84]	; 0x54
 801d432:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d436:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d43a:	81a3      	strheq	r3, [r4, #12]
 801d43c:	bf18      	it	ne
 801d43e:	81a3      	strhne	r3, [r4, #12]
 801d440:	bd10      	pop	{r4, pc}

0801d442 <__sclose>:
 801d442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d446:	f000 b831 	b.w	801d4ac <_close_r>
	...

0801d44c <_write_r>:
 801d44c:	b538      	push	{r3, r4, r5, lr}
 801d44e:	4d07      	ldr	r5, [pc, #28]	; (801d46c <_write_r+0x20>)
 801d450:	4604      	mov	r4, r0
 801d452:	4608      	mov	r0, r1
 801d454:	4611      	mov	r1, r2
 801d456:	2200      	movs	r2, #0
 801d458:	602a      	str	r2, [r5, #0]
 801d45a:	461a      	mov	r2, r3
 801d45c:	f7e4 f851 	bl	8001502 <_write>
 801d460:	1c43      	adds	r3, r0, #1
 801d462:	d102      	bne.n	801d46a <_write_r+0x1e>
 801d464:	682b      	ldr	r3, [r5, #0]
 801d466:	b103      	cbz	r3, 801d46a <_write_r+0x1e>
 801d468:	6023      	str	r3, [r4, #0]
 801d46a:	bd38      	pop	{r3, r4, r5, pc}
 801d46c:	20008830 	.word	0x20008830

0801d470 <__assert_func>:
 801d470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d472:	4614      	mov	r4, r2
 801d474:	461a      	mov	r2, r3
 801d476:	4b09      	ldr	r3, [pc, #36]	; (801d49c <__assert_func+0x2c>)
 801d478:	681b      	ldr	r3, [r3, #0]
 801d47a:	4605      	mov	r5, r0
 801d47c:	68d8      	ldr	r0, [r3, #12]
 801d47e:	b14c      	cbz	r4, 801d494 <__assert_func+0x24>
 801d480:	4b07      	ldr	r3, [pc, #28]	; (801d4a0 <__assert_func+0x30>)
 801d482:	9100      	str	r1, [sp, #0]
 801d484:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d488:	4906      	ldr	r1, [pc, #24]	; (801d4a4 <__assert_func+0x34>)
 801d48a:	462b      	mov	r3, r5
 801d48c:	f000 f81e 	bl	801d4cc <fiprintf>
 801d490:	f000 f89f 	bl	801d5d2 <abort>
 801d494:	4b04      	ldr	r3, [pc, #16]	; (801d4a8 <__assert_func+0x38>)
 801d496:	461c      	mov	r4, r3
 801d498:	e7f3      	b.n	801d482 <__assert_func+0x12>
 801d49a:	bf00      	nop
 801d49c:	2000007c 	.word	0x2000007c
 801d4a0:	0801dd7d 	.word	0x0801dd7d
 801d4a4:	0801dd8a 	.word	0x0801dd8a
 801d4a8:	0801ddb8 	.word	0x0801ddb8

0801d4ac <_close_r>:
 801d4ac:	b538      	push	{r3, r4, r5, lr}
 801d4ae:	4d06      	ldr	r5, [pc, #24]	; (801d4c8 <_close_r+0x1c>)
 801d4b0:	2300      	movs	r3, #0
 801d4b2:	4604      	mov	r4, r0
 801d4b4:	4608      	mov	r0, r1
 801d4b6:	602b      	str	r3, [r5, #0]
 801d4b8:	f7e4 fd39 	bl	8001f2e <_close>
 801d4bc:	1c43      	adds	r3, r0, #1
 801d4be:	d102      	bne.n	801d4c6 <_close_r+0x1a>
 801d4c0:	682b      	ldr	r3, [r5, #0]
 801d4c2:	b103      	cbz	r3, 801d4c6 <_close_r+0x1a>
 801d4c4:	6023      	str	r3, [r4, #0]
 801d4c6:	bd38      	pop	{r3, r4, r5, pc}
 801d4c8:	20008830 	.word	0x20008830

0801d4cc <fiprintf>:
 801d4cc:	b40e      	push	{r1, r2, r3}
 801d4ce:	b503      	push	{r0, r1, lr}
 801d4d0:	4601      	mov	r1, r0
 801d4d2:	ab03      	add	r3, sp, #12
 801d4d4:	4805      	ldr	r0, [pc, #20]	; (801d4ec <fiprintf+0x20>)
 801d4d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d4da:	6800      	ldr	r0, [r0, #0]
 801d4dc:	9301      	str	r3, [sp, #4]
 801d4de:	f7ff fde9 	bl	801d0b4 <_vfiprintf_r>
 801d4e2:	b002      	add	sp, #8
 801d4e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d4e8:	b003      	add	sp, #12
 801d4ea:	4770      	bx	lr
 801d4ec:	2000007c 	.word	0x2000007c

0801d4f0 <_fstat_r>:
 801d4f0:	b538      	push	{r3, r4, r5, lr}
 801d4f2:	4d07      	ldr	r5, [pc, #28]	; (801d510 <_fstat_r+0x20>)
 801d4f4:	2300      	movs	r3, #0
 801d4f6:	4604      	mov	r4, r0
 801d4f8:	4608      	mov	r0, r1
 801d4fa:	4611      	mov	r1, r2
 801d4fc:	602b      	str	r3, [r5, #0]
 801d4fe:	f7e4 fd22 	bl	8001f46 <_fstat>
 801d502:	1c43      	adds	r3, r0, #1
 801d504:	d102      	bne.n	801d50c <_fstat_r+0x1c>
 801d506:	682b      	ldr	r3, [r5, #0]
 801d508:	b103      	cbz	r3, 801d50c <_fstat_r+0x1c>
 801d50a:	6023      	str	r3, [r4, #0]
 801d50c:	bd38      	pop	{r3, r4, r5, pc}
 801d50e:	bf00      	nop
 801d510:	20008830 	.word	0x20008830

0801d514 <_isatty_r>:
 801d514:	b538      	push	{r3, r4, r5, lr}
 801d516:	4d06      	ldr	r5, [pc, #24]	; (801d530 <_isatty_r+0x1c>)
 801d518:	2300      	movs	r3, #0
 801d51a:	4604      	mov	r4, r0
 801d51c:	4608      	mov	r0, r1
 801d51e:	602b      	str	r3, [r5, #0]
 801d520:	f7e4 fd21 	bl	8001f66 <_isatty>
 801d524:	1c43      	adds	r3, r0, #1
 801d526:	d102      	bne.n	801d52e <_isatty_r+0x1a>
 801d528:	682b      	ldr	r3, [r5, #0]
 801d52a:	b103      	cbz	r3, 801d52e <_isatty_r+0x1a>
 801d52c:	6023      	str	r3, [r4, #0]
 801d52e:	bd38      	pop	{r3, r4, r5, pc}
 801d530:	20008830 	.word	0x20008830

0801d534 <_lseek_r>:
 801d534:	b538      	push	{r3, r4, r5, lr}
 801d536:	4d07      	ldr	r5, [pc, #28]	; (801d554 <_lseek_r+0x20>)
 801d538:	4604      	mov	r4, r0
 801d53a:	4608      	mov	r0, r1
 801d53c:	4611      	mov	r1, r2
 801d53e:	2200      	movs	r2, #0
 801d540:	602a      	str	r2, [r5, #0]
 801d542:	461a      	mov	r2, r3
 801d544:	f7e4 fd1a 	bl	8001f7c <_lseek>
 801d548:	1c43      	adds	r3, r0, #1
 801d54a:	d102      	bne.n	801d552 <_lseek_r+0x1e>
 801d54c:	682b      	ldr	r3, [r5, #0]
 801d54e:	b103      	cbz	r3, 801d552 <_lseek_r+0x1e>
 801d550:	6023      	str	r3, [r4, #0]
 801d552:	bd38      	pop	{r3, r4, r5, pc}
 801d554:	20008830 	.word	0x20008830

0801d558 <__ascii_mbtowc>:
 801d558:	b082      	sub	sp, #8
 801d55a:	b901      	cbnz	r1, 801d55e <__ascii_mbtowc+0x6>
 801d55c:	a901      	add	r1, sp, #4
 801d55e:	b142      	cbz	r2, 801d572 <__ascii_mbtowc+0x1a>
 801d560:	b14b      	cbz	r3, 801d576 <__ascii_mbtowc+0x1e>
 801d562:	7813      	ldrb	r3, [r2, #0]
 801d564:	600b      	str	r3, [r1, #0]
 801d566:	7812      	ldrb	r2, [r2, #0]
 801d568:	1e10      	subs	r0, r2, #0
 801d56a:	bf18      	it	ne
 801d56c:	2001      	movne	r0, #1
 801d56e:	b002      	add	sp, #8
 801d570:	4770      	bx	lr
 801d572:	4610      	mov	r0, r2
 801d574:	e7fb      	b.n	801d56e <__ascii_mbtowc+0x16>
 801d576:	f06f 0001 	mvn.w	r0, #1
 801d57a:	e7f8      	b.n	801d56e <__ascii_mbtowc+0x16>

0801d57c <__malloc_lock>:
 801d57c:	4801      	ldr	r0, [pc, #4]	; (801d584 <__malloc_lock+0x8>)
 801d57e:	f7ff b886 	b.w	801c68e <__retarget_lock_acquire_recursive>
 801d582:	bf00      	nop
 801d584:	20008824 	.word	0x20008824

0801d588 <__malloc_unlock>:
 801d588:	4801      	ldr	r0, [pc, #4]	; (801d590 <__malloc_unlock+0x8>)
 801d58a:	f7ff b881 	b.w	801c690 <__retarget_lock_release_recursive>
 801d58e:	bf00      	nop
 801d590:	20008824 	.word	0x20008824

0801d594 <_read_r>:
 801d594:	b538      	push	{r3, r4, r5, lr}
 801d596:	4d07      	ldr	r5, [pc, #28]	; (801d5b4 <_read_r+0x20>)
 801d598:	4604      	mov	r4, r0
 801d59a:	4608      	mov	r0, r1
 801d59c:	4611      	mov	r1, r2
 801d59e:	2200      	movs	r2, #0
 801d5a0:	602a      	str	r2, [r5, #0]
 801d5a2:	461a      	mov	r2, r3
 801d5a4:	f7e4 fca6 	bl	8001ef4 <_read>
 801d5a8:	1c43      	adds	r3, r0, #1
 801d5aa:	d102      	bne.n	801d5b2 <_read_r+0x1e>
 801d5ac:	682b      	ldr	r3, [r5, #0]
 801d5ae:	b103      	cbz	r3, 801d5b2 <_read_r+0x1e>
 801d5b0:	6023      	str	r3, [r4, #0]
 801d5b2:	bd38      	pop	{r3, r4, r5, pc}
 801d5b4:	20008830 	.word	0x20008830

0801d5b8 <__ascii_wctomb>:
 801d5b8:	b149      	cbz	r1, 801d5ce <__ascii_wctomb+0x16>
 801d5ba:	2aff      	cmp	r2, #255	; 0xff
 801d5bc:	bf85      	ittet	hi
 801d5be:	238a      	movhi	r3, #138	; 0x8a
 801d5c0:	6003      	strhi	r3, [r0, #0]
 801d5c2:	700a      	strbls	r2, [r1, #0]
 801d5c4:	f04f 30ff 	movhi.w	r0, #4294967295
 801d5c8:	bf98      	it	ls
 801d5ca:	2001      	movls	r0, #1
 801d5cc:	4770      	bx	lr
 801d5ce:	4608      	mov	r0, r1
 801d5d0:	4770      	bx	lr

0801d5d2 <abort>:
 801d5d2:	b508      	push	{r3, lr}
 801d5d4:	2006      	movs	r0, #6
 801d5d6:	f000 f82b 	bl	801d630 <raise>
 801d5da:	2001      	movs	r0, #1
 801d5dc:	f7e4 fc80 	bl	8001ee0 <_exit>

0801d5e0 <_raise_r>:
 801d5e0:	291f      	cmp	r1, #31
 801d5e2:	b538      	push	{r3, r4, r5, lr}
 801d5e4:	4604      	mov	r4, r0
 801d5e6:	460d      	mov	r5, r1
 801d5e8:	d904      	bls.n	801d5f4 <_raise_r+0x14>
 801d5ea:	2316      	movs	r3, #22
 801d5ec:	6003      	str	r3, [r0, #0]
 801d5ee:	f04f 30ff 	mov.w	r0, #4294967295
 801d5f2:	bd38      	pop	{r3, r4, r5, pc}
 801d5f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d5f6:	b112      	cbz	r2, 801d5fe <_raise_r+0x1e>
 801d5f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d5fc:	b94b      	cbnz	r3, 801d612 <_raise_r+0x32>
 801d5fe:	4620      	mov	r0, r4
 801d600:	f000 f830 	bl	801d664 <_getpid_r>
 801d604:	462a      	mov	r2, r5
 801d606:	4601      	mov	r1, r0
 801d608:	4620      	mov	r0, r4
 801d60a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d60e:	f000 b817 	b.w	801d640 <_kill_r>
 801d612:	2b01      	cmp	r3, #1
 801d614:	d00a      	beq.n	801d62c <_raise_r+0x4c>
 801d616:	1c59      	adds	r1, r3, #1
 801d618:	d103      	bne.n	801d622 <_raise_r+0x42>
 801d61a:	2316      	movs	r3, #22
 801d61c:	6003      	str	r3, [r0, #0]
 801d61e:	2001      	movs	r0, #1
 801d620:	e7e7      	b.n	801d5f2 <_raise_r+0x12>
 801d622:	2400      	movs	r4, #0
 801d624:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d628:	4628      	mov	r0, r5
 801d62a:	4798      	blx	r3
 801d62c:	2000      	movs	r0, #0
 801d62e:	e7e0      	b.n	801d5f2 <_raise_r+0x12>

0801d630 <raise>:
 801d630:	4b02      	ldr	r3, [pc, #8]	; (801d63c <raise+0xc>)
 801d632:	4601      	mov	r1, r0
 801d634:	6818      	ldr	r0, [r3, #0]
 801d636:	f7ff bfd3 	b.w	801d5e0 <_raise_r>
 801d63a:	bf00      	nop
 801d63c:	2000007c 	.word	0x2000007c

0801d640 <_kill_r>:
 801d640:	b538      	push	{r3, r4, r5, lr}
 801d642:	4d07      	ldr	r5, [pc, #28]	; (801d660 <_kill_r+0x20>)
 801d644:	2300      	movs	r3, #0
 801d646:	4604      	mov	r4, r0
 801d648:	4608      	mov	r0, r1
 801d64a:	4611      	mov	r1, r2
 801d64c:	602b      	str	r3, [r5, #0]
 801d64e:	f7e4 fc37 	bl	8001ec0 <_kill>
 801d652:	1c43      	adds	r3, r0, #1
 801d654:	d102      	bne.n	801d65c <_kill_r+0x1c>
 801d656:	682b      	ldr	r3, [r5, #0]
 801d658:	b103      	cbz	r3, 801d65c <_kill_r+0x1c>
 801d65a:	6023      	str	r3, [r4, #0]
 801d65c:	bd38      	pop	{r3, r4, r5, pc}
 801d65e:	bf00      	nop
 801d660:	20008830 	.word	0x20008830

0801d664 <_getpid_r>:
 801d664:	f7e4 bc24 	b.w	8001eb0 <_getpid>

0801d668 <_init>:
 801d668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d66a:	bf00      	nop
 801d66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d66e:	bc08      	pop	{r3}
 801d670:	469e      	mov	lr, r3
 801d672:	4770      	bx	lr

0801d674 <_fini>:
 801d674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d676:	bf00      	nop
 801d678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d67a:	bc08      	pop	{r3}
 801d67c:	469e      	mov	lr, r3
 801d67e:	4770      	bx	lr
