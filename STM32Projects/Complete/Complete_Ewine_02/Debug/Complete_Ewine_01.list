
Complete_Ewine_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d740  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  0801d880  0801d880  0002d880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e13c  0801e13c  0002e13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e144  0801e144  0002e144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e148  0801e148  0002e148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000240  20000008  0801e14c  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008614  20000248  0801e38c  00030248  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2000885c  0801e38c  0003885c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 10 .debug_info   00066e86  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000741d  00000000  00000000  000970fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003418  00000000  00000000  0009e520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000030f0  00000000  00000000  000a1938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030130  00000000  00000000  000a4a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003d7bc  00000000  00000000  000d4b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011afe3  00000000  00000000  00112314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022d2f7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000f110  00000000  00000000  0022d348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000248 	.word	0x20000248
 800015c:	00000000 	.word	0x00000000
 8000160:	0801d868 	.word	0x0801d868

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000024c 	.word	0x2000024c
 800017c:	0801d868 	.word	0x0801d868

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_ldivmod>:
 8000b58:	b97b      	cbnz	r3, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5a:	b972      	cbnz	r2, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bfbe      	ittt	lt
 8000b60:	2000      	movlt	r0, #0
 8000b62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b66:	e006      	blt.n	8000b76 <__aeabi_ldivmod+0x1e>
 8000b68:	bf08      	it	eq
 8000b6a:	2800      	cmpeq	r0, #0
 8000b6c:	bf1c      	itt	ne
 8000b6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b72:	f04f 30ff 	movne.w	r0, #4294967295
 8000b76:	f000 b9bf 	b.w	8000ef8 <__aeabi_idiv0>
 8000b7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b82:	2900      	cmp	r1, #0
 8000b84:	db09      	blt.n	8000b9a <__aeabi_ldivmod+0x42>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db1a      	blt.n	8000bc0 <__aeabi_ldivmod+0x68>
 8000b8a:	f000 f84d 	bl	8000c28 <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4770      	bx	lr
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db1b      	blt.n	8000bdc <__aeabi_ldivmod+0x84>
 8000ba4:	f000 f840 	bl	8000c28 <__udivmoddi4>
 8000ba8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb0:	b004      	add	sp, #16
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	4252      	negs	r2, r2
 8000bba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bbe:	4770      	bx	lr
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bc6:	f000 f82f 	bl	8000c28 <__udivmoddi4>
 8000bca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd2:	b004      	add	sp, #16
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bda:	4770      	bx	lr
 8000bdc:	4252      	negs	r2, r2
 8000bde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be2:	f000 f821 	bl	8000c28 <__udivmoddi4>
 8000be6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bee:	b004      	add	sp, #16
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MLX_IR_Init>:

/* Private function prototypes -----------------------------------------------*/
static void MLX_90614_AmbiantTemperature_Process(void);

void MLX_IR_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END IR_Init_PreTreatment */

  /* Initialize the peripherals and the IR components */

	if(mlx90614_init() == true)printf(" ****** Initialization MLX90614 OK ****** \n");
 8000f00:	f000 fd60 	bl	80019c4 <mlx90614_init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <MLX_IR_Init+0x16>
 8000f0a:	4810      	ldr	r0, [pc, #64]	; (8000f4c <MLX_IR_Init+0x50>)
 8000f0c:	f01a fbac 	bl	801b668 <puts>
 8000f10:	e002      	b.n	8000f18 <MLX_IR_Init+0x1c>
	else printf("Initialization Failed ! \n");
 8000f12:	480f      	ldr	r0, [pc, #60]	; (8000f50 <MLX_IR_Init+0x54>)
 8000f14:	f01a fba8 	bl	801b668 <puts>

  /* USER CODE BEGIN IR_Init_PostTreatment */
	mlx90614.configReg.DualIRSensor = 0;
 8000f18:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <MLX_IR_Init+0x58>)
 8000f1a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8000f1e:	f36f 1386 	bfc	r3, #6, #1
 8000f22:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	mlx90614.configReg.SelectObjAmb = 1;
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <MLX_IR_Init+0x58>)
 8000f28:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	f361 1305 	bfi	r3, r1, #4, #2
 8000f32:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	mlx90614.configReg.FIR = 4;
 8000f36:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <MLX_IR_Init+0x58>)
 8000f38:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	f361 0302 	bfi	r3, r1, #0, #3
 8000f42:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
  /* USER CODE END IR_Init_PostTreatment */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	0801d880 	.word	0x0801d880
 8000f50:	0801d8ac 	.word	0x0801d8ac
 8000f54:	20000304 	.word	0x20000304

08000f58 <MLX_IR_Process>:

void MLX_IR_Process(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IR_Process_PreTreatment */

  /* USER CODE END IR_Process_PreTreatment */

	printf("\n\n ****** Start MLX90614 Test ****** \n\n");
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MLX_IR_Process+0x18>)
 8000f5e:	f01a fb83 	bl	801b668 <puts>
	MLX_90614_AmbiantTemperature_Process();
 8000f62:	f000 f809 	bl	8000f78 <MLX_90614_AmbiantTemperature_Process>
	printf("\n\n ****** End MLX90614 Test ****** \n\n");
 8000f66:	4803      	ldr	r0, [pc, #12]	; (8000f74 <MLX_IR_Process+0x1c>)
 8000f68:	f01a fb7e 	bl	801b668 <puts>

  /* USER CODE BEGIN IR_Process_PostTreatment */

  /* USER CODE END IR_Process_PostTreatment */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	0801d8c8 	.word	0x0801d8c8
 8000f74:	0801d8f0 	.word	0x0801d8f0

08000f78 <MLX_90614_AmbiantTemperature_Process>:

static void MLX_90614_AmbiantTemperature_Process(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
  for(int i = 1 ; i < 10 ; i++ ){
 8000f7e:	2301      	movs	r3, #1
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	e022      	b.n	8000fca <MLX_90614_AmbiantTemperature_Process+0x52>
	  printf("loop %d start\n",i);
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4815      	ldr	r0, [pc, #84]	; (8000fdc <MLX_90614_AmbiantTemperature_Process+0x64>)
 8000f88:	f01a fad2 	bl	801b530 <iprintf>

	  if ( mlx90614_getAmbient(&temp) == true ) printf("getAmbient OK : %0.2f *C\n", temp);
 8000f8c:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <MLX_90614_AmbiantTemperature_Process+0x68>)
 8000f8e:	f000 fe23 	bl	8001bd8 <mlx90614_getAmbient>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00a      	beq.n	8000fae <MLX_90614_AmbiantTemperature_Process+0x36>
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MLX_90614_AmbiantTemperature_Process+0x68>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff faab 	bl	80004f8 <__aeabi_f2d>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	480f      	ldr	r0, [pc, #60]	; (8000fe4 <MLX_90614_AmbiantTemperature_Process+0x6c>)
 8000fa8:	f01a fac2 	bl	801b530 <iprintf>
 8000fac:	e002      	b.n	8000fb4 <MLX_90614_AmbiantTemperature_Process+0x3c>
	  else printf("Failed to read ambient temperature\n");
 8000fae:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <MLX_90614_AmbiantTemperature_Process+0x70>)
 8000fb0:	f01a fb5a 	bl	801b668 <puts>

	  printf("loop %d end\n",i);
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	480d      	ldr	r0, [pc, #52]	; (8000fec <MLX_90614_AmbiantTemperature_Process+0x74>)
 8000fb8:	f01a faba 	bl	801b530 <iprintf>
	  HAL_Delay(1500);
 8000fbc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000fc0:	f015 fb18 	bl	80165f4 <HAL_Delay>
  for(int i = 1 ; i < 10 ; i++ ){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b09      	cmp	r3, #9
 8000fce:	ddd9      	ble.n	8000f84 <MLX_90614_AmbiantTemperature_Process+0xc>
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	0801d918 	.word	0x0801d918
 8000fe0:	20000264 	.word	0x20000264
 8000fe4:	0801d928 	.word	0x0801d928
 8000fe8:	0801d944 	.word	0x0801d944
 8000fec:	0801d968 	.word	0x0801d968

08000ff0 <VL_TOF_Init>:
static void VL_53L1A2_SimpleRanging_Process_R(void);
static void VL_53L1A2_SimpleRanging_Process_L(void);
static void print_result(RANGING_SENSOR_Result_t *Result);

void VL_TOF_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  VL_53L1A2_SimpleRanging_Init_C();
 8000ff4:	f000 f838 	bl	8001068 <VL_53L1A2_SimpleRanging_Init_C>
  VL_53L1A2_SimpleRanging_Init_R();
 8000ff8:	f000 f852 	bl	80010a0 <VL_53L1A2_SimpleRanging_Init_R>
  VL_53L1A2_SimpleRanging_Init_L();
 8000ffc:	f000 f86c 	bl	80010d8 <VL_53L1A2_SimpleRanging_Init_L>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <VL_TOF_Process>:

/*
 * LM background task
 */
void VL_TOF_Process(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */
  printf("\n\n ****** Start TOF Test ****** \n\n");
 8001008:	480f      	ldr	r0, [pc, #60]	; (8001048 <VL_TOF_Process+0x44>)
 800100a:	f01a fb2d 	bl	801b668 <puts>
  /* USER CODE END TOF_Process_PreTreatment */
  printf("\n ---- start TOF Center ---- \n");
 800100e:	480f      	ldr	r0, [pc, #60]	; (800104c <VL_TOF_Process+0x48>)
 8001010:	f01a fb2a 	bl	801b668 <puts>
  VL_53L1A2_SimpleRanging_Process_C();
 8001014:	f000 f87c 	bl	8001110 <VL_53L1A2_SimpleRanging_Process_C>
  printf("\n ---- end TOF Center ---- \n");
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <VL_TOF_Process+0x4c>)
 800101a:	f01a fb25 	bl	801b668 <puts>

  printf("\n ---- start TOF Right ---- \n");
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <VL_TOF_Process+0x50>)
 8001020:	f01a fb22 	bl	801b668 <puts>
  VL_53L1A2_SimpleRanging_Process_R();
 8001024:	f000 f8d2 	bl	80011cc <VL_53L1A2_SimpleRanging_Process_R>
  printf("\n ---- end TOF Right ---- \n");
 8001028:	480b      	ldr	r0, [pc, #44]	; (8001058 <VL_TOF_Process+0x54>)
 800102a:	f01a fb1d 	bl	801b668 <puts>

  printf("\n ---- start TOF Left ---- \n");
 800102e:	480b      	ldr	r0, [pc, #44]	; (800105c <VL_TOF_Process+0x58>)
 8001030:	f01a fb1a 	bl	801b668 <puts>
  VL_53L1A2_SimpleRanging_Process_L();
 8001034:	f000 f928 	bl	8001288 <VL_53L1A2_SimpleRanging_Process_L>
  printf("\n ---- end TOF Left ---- \n");
 8001038:	4809      	ldr	r0, [pc, #36]	; (8001060 <VL_TOF_Process+0x5c>)
 800103a:	f01a fb15 	bl	801b668 <puts>

  /* USER CODE BEGIN TOF_Process_PostTreatment */
  printf("\n\n ****** End TOF Test ****** \n\n");
 800103e:	4809      	ldr	r0, [pc, #36]	; (8001064 <VL_TOF_Process+0x60>)
 8001040:	f01a fb12 	bl	801b668 <puts>
  /* USER CODE END TOF_Process_PostTreatment */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	0801d978 	.word	0x0801d978
 800104c:	0801d99c 	.word	0x0801d99c
 8001050:	0801d9bc 	.word	0x0801d9bc
 8001054:	0801d9d8 	.word	0x0801d9d8
 8001058:	0801d9f8 	.word	0x0801d9f8
 800105c:	0801da14 	.word	0x0801da14
 8001060:	0801da30 	.word	0x0801da30
 8001064:	0801da4c 	.word	0x0801da4c

08001068 <VL_53L1A2_SimpleRanging_Init_C>:

static void VL_53L1A2_SimpleRanging_Init_C(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusCenter = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_CENTER);
 800106c:	2001      	movs	r0, #1
 800106e:	f001 fcb3 	bl	80029d8 <VL53L1A2_RANGING_SENSOR_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <VL_53L1A2_SimpleRanging_Init_C+0x2c>)
 8001076:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusCenter != BSP_ERROR_NONE)
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <VL_53L1A2_SimpleRanging_Init_C+0x2c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <VL_53L1A2_SimpleRanging_Init_C+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <VL_53L1A2_SimpleRanging_Init_C+0x30>)
 8001082:	f01a faf1 	bl	801b668 <puts>
    while(1);
 8001086:	e7fe      	b.n	8001086 <VL_53L1A2_SimpleRanging_Init_C+0x1e>
  }
  printf(" ****** Initialization TOF CENTER OK ****** \n");
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <VL_53L1A2_SimpleRanging_Init_C+0x34>)
 800108a:	f01a faed 	bl	801b668 <puts>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200002a4 	.word	0x200002a4
 8001098:	0801da6c 	.word	0x0801da6c
 800109c:	0801da90 	.word	0x0801da90

080010a0 <VL_53L1A2_SimpleRanging_Init_R>:
static void VL_53L1A2_SimpleRanging_Init_R(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusRight = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_RIGHT);
 80010a4:	2002      	movs	r0, #2
 80010a6:	f001 fc97 	bl	80029d8 <VL53L1A2_RANGING_SENSOR_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <VL_53L1A2_SimpleRanging_Init_R+0x2c>)
 80010ae:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusRight != BSP_ERROR_NONE)
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <VL_53L1A2_SimpleRanging_Init_R+0x2c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <VL_53L1A2_SimpleRanging_Init_R+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <VL_53L1A2_SimpleRanging_Init_R+0x30>)
 80010ba:	f01a fad5 	bl	801b668 <puts>
    while(1);
 80010be:	e7fe      	b.n	80010be <VL_53L1A2_SimpleRanging_Init_R+0x1e>
  }
  printf(" ****** Initialization TOF RIGHT OK ****** \n");
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <VL_53L1A2_SimpleRanging_Init_R+0x34>)
 80010c2:	f01a fad1 	bl	801b668 <puts>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200002a8 	.word	0x200002a8
 80010d0:	0801da6c 	.word	0x0801da6c
 80010d4:	0801dac0 	.word	0x0801dac0

080010d8 <VL_53L1A2_SimpleRanging_Init_L>:
static void VL_53L1A2_SimpleRanging_Init_L(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusLeft = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_LEFT);
 80010dc:	2000      	movs	r0, #0
 80010de:	f001 fc7b 	bl	80029d8 <VL53L1A2_RANGING_SENSOR_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <VL_53L1A2_SimpleRanging_Init_L+0x2c>)
 80010e6:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusLeft != BSP_ERROR_NONE)
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <VL_53L1A2_SimpleRanging_Init_L+0x2c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <VL_53L1A2_SimpleRanging_Init_L+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <VL_53L1A2_SimpleRanging_Init_L+0x30>)
 80010f2:	f01a fab9 	bl	801b668 <puts>
    while(1);
 80010f6:	e7fe      	b.n	80010f6 <VL_53L1A2_SimpleRanging_Init_L+0x1e>
  }
  printf(" ****** Initialization TOF LEFT OK ****** \n");
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <VL_53L1A2_SimpleRanging_Init_L+0x34>)
 80010fa:	f01a fab5 	bl	801b668 <puts>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200002ac 	.word	0x200002ac
 8001108:	0801da6c 	.word	0x0801da6c
 800110c:	0801daec 	.word	0x0801daec

08001110 <VL_53L1A2_SimpleRanging_Process_C>:

static void VL_53L1A2_SimpleRanging_Process_C(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b094      	sub	sp, #80	; 0x50
 8001114:	af00      	add	r7, sp, #0
  uint32_t Id_Center;
  RANGING_SENSOR_Result_t Result_Center;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_CENTER, &Id_Center);
 8001116:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800111a:	4619      	mov	r1, r3
 800111c:	2001      	movs	r0, #1
 800111e:	f001 fc81 	bl	8002a24 <VL53L1A2_RANGING_SENSOR_ReadID>

  // sensor configuration
  ProfileCenter.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]
  ProfileCenter.TimingBudget = TIMING_BUDGET;
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 800112a:	221e      	movs	r2, #30
 800112c:	605a      	str	r2, [r3, #4]
  ProfileCenter.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  ProfileCenter.EnableAmbient = 0; // Enable: 1, Disable: 0
 8001134:	4b21      	ldr	r3, [pc, #132]	; (80011bc <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  ProfileCenter.EnableSignal = 0; // Enable: 1, Disable: 0
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]

  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_CENTER, &ProfileCenter);
 8001140:	491e      	ldr	r1, [pc, #120]	; (80011bc <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 8001142:	2001      	movs	r0, #1
 8001144:	f001 fc96 	bl	8002a74 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

  statusCenter = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8001148:	2101      	movs	r1, #1
 800114a:	2001      	movs	r0, #1
 800114c:	f001 fce2 	bl	8002b14 <VL53L1A2_RANGING_SENSOR_Start>
 8001150:	4603      	mov	r3, r0
 8001152:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 8001154:	6013      	str	r3, [r2, #0]

  if (statusCenter != BSP_ERROR_NONE)
 8001156:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <VL_53L1A2_SimpleRanging_Process_C+0x56>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Center failed\n");
 800115e:	4819      	ldr	r0, [pc, #100]	; (80011c4 <VL_53L1A2_SimpleRanging_Process_C+0xb4>)
 8001160:	f01a fa82 	bl	801b668 <puts>
    while(1);
 8001164:	e7fe      	b.n	8001164 <VL_53L1A2_SimpleRanging_Process_C+0x54>
  }
/*
  while (1)
  {*/
  for(int i = 1 ; i < 6 ; i++){
 8001166:	2301      	movs	r3, #1
 8001168:	64fb      	str	r3, [r7, #76]	; 0x4c
 800116a:	e01a      	b.n	80011a2 <VL_53L1A2_SimpleRanging_Process_C+0x92>
    /* repetition mode */
    statusCenter = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_CENTER, &Result_Center);
 800116c:	463b      	mov	r3, r7
 800116e:	4619      	mov	r1, r3
 8001170:	2001      	movs	r0, #1
 8001172:	f001 fca7 	bl	8002ac4 <VL53L1A2_RANGING_SENSOR_GetDistance>
 8001176:	4603      	mov	r3, r0
 8001178:	4a11      	ldr	r2, [pc, #68]	; (80011c0 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 800117a:	6013      	str	r3, [r2, #0]

    if (statusCenter == BSP_ERROR_NONE)
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d107      	bne.n	8001194 <VL_53L1A2_SimpleRanging_Process_C+0x84>
    {
      printf("\n CENTER %d\n",i);
 8001184:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001186:	4810      	ldr	r0, [pc, #64]	; (80011c8 <VL_53L1A2_SimpleRanging_Process_C+0xb8>)
 8001188:	f01a f9d2 	bl	801b530 <iprintf>
      print_result(&Result_Center);
 800118c:	463b      	mov	r3, r7
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f8d8 	bl	8001344 <print_result>
    }

    HAL_Delay(1500);
 8001194:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001198:	f015 fa2c 	bl	80165f4 <HAL_Delay>
  for(int i = 1 ; i < 6 ; i++){
 800119c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800119e:	3301      	adds	r3, #1
 80011a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011a4:	2b05      	cmp	r3, #5
 80011a6:	dde1      	ble.n	800116c <VL_53L1A2_SimpleRanging_Process_C+0x5c>
  }
  statusCenter = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_CENTER);
 80011a8:	2001      	movs	r0, #1
 80011aa:	f001 fcdb 	bl	8002b64 <VL53L1A2_RANGING_SENSOR_Stop>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a03      	ldr	r2, [pc, #12]	; (80011c0 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	3750      	adds	r7, #80	; 0x50
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000268 	.word	0x20000268
 80011c0:	200002a4 	.word	0x200002a4
 80011c4:	0801db18 	.word	0x0801db18
 80011c8:	0801db44 	.word	0x0801db44

080011cc <VL_53L1A2_SimpleRanging_Process_R>:

static void VL_53L1A2_SimpleRanging_Process_R(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b094      	sub	sp, #80	; 0x50
 80011d0:	af00      	add	r7, sp, #0
  uint32_t Id_Right;
  RANGING_SENSOR_Result_t Result_Right;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_RIGHT, &Id_Right);
 80011d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011d6:	4619      	mov	r1, r3
 80011d8:	2002      	movs	r0, #2
 80011da:	f001 fc23 	bl	8002a24 <VL53L1A2_RANGING_SENSOR_ReadID>

  // sensor configuration
  ProfileRight.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
  ProfileRight.TimingBudget = TIMING_BUDGET;
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80011e6:	221e      	movs	r2, #30
 80011e8:	605a      	str	r2, [r3, #4]
  ProfileRight.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  ProfileRight.EnableAmbient = 0; // Enable: 1, Disable: 0
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  ProfileRight.EnableSignal = 0; // Enable: 1, Disable: 0
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]

  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_RIGHT, &ProfileRight);
 80011fc:	491e      	ldr	r1, [pc, #120]	; (8001278 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80011fe:	2002      	movs	r0, #2
 8001200:	f001 fc38 	bl	8002a74 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

  statusRight = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_RIGHT, RS_MODE_BLOCKING_CONTINUOUS);
 8001204:	2101      	movs	r1, #1
 8001206:	2002      	movs	r0, #2
 8001208:	f001 fc84 	bl	8002b14 <VL53L1A2_RANGING_SENSOR_Start>
 800120c:	4603      	mov	r3, r0
 800120e:	4a1b      	ldr	r2, [pc, #108]	; (800127c <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 8001210:	6013      	str	r3, [r2, #0]

  if (statusRight != BSP_ERROR_NONE)
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <VL_53L1A2_SimpleRanging_Process_R+0x56>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Right failed\n");
 800121a:	4819      	ldr	r0, [pc, #100]	; (8001280 <VL_53L1A2_SimpleRanging_Process_R+0xb4>)
 800121c:	f01a fa24 	bl	801b668 <puts>
    while(1);
 8001220:	e7fe      	b.n	8001220 <VL_53L1A2_SimpleRanging_Process_R+0x54>
  }
/*
  while (1)
  {*/
  for(int i = 1 ; i < 6 ; i++){
 8001222:	2301      	movs	r3, #1
 8001224:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001226:	e01a      	b.n	800125e <VL_53L1A2_SimpleRanging_Process_R+0x92>
    /* repetition mode */
    statusRight = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_RIGHT, &Result_Right);
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	2002      	movs	r0, #2
 800122e:	f001 fc49 	bl	8002ac4 <VL53L1A2_RANGING_SENSOR_GetDistance>
 8001232:	4603      	mov	r3, r0
 8001234:	4a11      	ldr	r2, [pc, #68]	; (800127c <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 8001236:	6013      	str	r3, [r2, #0]

    if (statusRight == BSP_ERROR_NONE)
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d107      	bne.n	8001250 <VL_53L1A2_SimpleRanging_Process_R+0x84>
    {
      printf("\n RIGHT %d\n",i);
 8001240:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001242:	4810      	ldr	r0, [pc, #64]	; (8001284 <VL_53L1A2_SimpleRanging_Process_R+0xb8>)
 8001244:	f01a f974 	bl	801b530 <iprintf>
      print_result(&Result_Right);
 8001248:	463b      	mov	r3, r7
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f87a 	bl	8001344 <print_result>
    }

    HAL_Delay(1500);
 8001250:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001254:	f015 f9ce 	bl	80165f4 <HAL_Delay>
  for(int i = 1 ; i < 6 ; i++){
 8001258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800125a:	3301      	adds	r3, #1
 800125c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800125e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001260:	2b05      	cmp	r3, #5
 8001262:	dde1      	ble.n	8001228 <VL_53L1A2_SimpleRanging_Process_R+0x5c>

  }
  statusRight = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_RIGHT);
 8001264:	2002      	movs	r0, #2
 8001266:	f001 fc7d 	bl	8002b64 <VL53L1A2_RANGING_SENSOR_Stop>
 800126a:	4603      	mov	r3, r0
 800126c:	4a03      	ldr	r2, [pc, #12]	; (800127c <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	3750      	adds	r7, #80	; 0x50
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000027c 	.word	0x2000027c
 800127c:	200002a8 	.word	0x200002a8
 8001280:	0801db54 	.word	0x0801db54
 8001284:	0801db80 	.word	0x0801db80

08001288 <VL_53L1A2_SimpleRanging_Process_L>:
static void VL_53L1A2_SimpleRanging_Process_L(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b094      	sub	sp, #80	; 0x50
 800128c:	af00      	add	r7, sp, #0
  uint32_t Id_Left;
  RANGING_SENSOR_Result_t Result_Left;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_LEFT, &Id_Left);
 800128e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001292:	4619      	mov	r1, r3
 8001294:	2000      	movs	r0, #0
 8001296:	f001 fbc5 	bl	8002a24 <VL53L1A2_RANGING_SENSOR_ReadID>

  // sensor configuration
  ProfileLeft.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 800129c:	2201      	movs	r2, #1
 800129e:	601a      	str	r2, [r3, #0]
  ProfileLeft.TimingBudget = TIMING_BUDGET;
 80012a0:	4b24      	ldr	r3, [pc, #144]	; (8001334 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 80012a2:	221e      	movs	r2, #30
 80012a4:	605a      	str	r2, [r3, #4]
  ProfileLeft.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  ProfileLeft.EnableAmbient = 0; // Enable: 1, Disable: 0
 80012ac:	4b21      	ldr	r3, [pc, #132]	; (8001334 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  ProfileLeft.EnableSignal = 0; // Enable: 1, Disable: 0
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]

  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_LEFT, &ProfileLeft);
 80012b8:	491e      	ldr	r1, [pc, #120]	; (8001334 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 80012ba:	2000      	movs	r0, #0
 80012bc:	f001 fbda 	bl	8002a74 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

  statusLeft = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_LEFT, RS_MODE_BLOCKING_CONTINUOUS);
 80012c0:	2101      	movs	r1, #1
 80012c2:	2000      	movs	r0, #0
 80012c4:	f001 fc26 	bl	8002b14 <VL53L1A2_RANGING_SENSOR_Start>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a1b      	ldr	r2, [pc, #108]	; (8001338 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 80012cc:	6013      	str	r3, [r2, #0]

  if (statusLeft != BSP_ERROR_NONE)
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <VL_53L1A2_SimpleRanging_Process_L+0x56>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Left failed\n");
 80012d6:	4819      	ldr	r0, [pc, #100]	; (800133c <VL_53L1A2_SimpleRanging_Process_L+0xb4>)
 80012d8:	f01a f9c6 	bl	801b668 <puts>
    while(1);
 80012dc:	e7fe      	b.n	80012dc <VL_53L1A2_SimpleRanging_Process_L+0x54>
  }
/*
  while (1)
  {*/
  for(int i = 1 ; i < 6 ; i++){
 80012de:	2301      	movs	r3, #1
 80012e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012e2:	e01a      	b.n	800131a <VL_53L1A2_SimpleRanging_Process_L+0x92>
    /* repetition mode */
    statusLeft = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_LEFT, &Result_Left);
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	2000      	movs	r0, #0
 80012ea:	f001 fbeb 	bl	8002ac4 <VL53L1A2_RANGING_SENSOR_GetDistance>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4a11      	ldr	r2, [pc, #68]	; (8001338 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 80012f2:	6013      	str	r3, [r2, #0]

    if (statusLeft == BSP_ERROR_NONE)
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d107      	bne.n	800130c <VL_53L1A2_SimpleRanging_Process_L+0x84>
    {
      printf("\n LEFT %d\n",i);
 80012fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80012fe:	4810      	ldr	r0, [pc, #64]	; (8001340 <VL_53L1A2_SimpleRanging_Process_L+0xb8>)
 8001300:	f01a f916 	bl	801b530 <iprintf>
      print_result(&Result_Left);
 8001304:	463b      	mov	r3, r7
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f81c 	bl	8001344 <print_result>
    }

    HAL_Delay(1500);
 800130c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001310:	f015 f970 	bl	80165f4 <HAL_Delay>
  for(int i = 1 ; i < 6 ; i++){
 8001314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001316:	3301      	adds	r3, #1
 8001318:	64fb      	str	r3, [r7, #76]	; 0x4c
 800131a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800131c:	2b05      	cmp	r3, #5
 800131e:	dde1      	ble.n	80012e4 <VL_53L1A2_SimpleRanging_Process_L+0x5c>

  }
  statusLeft = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_LEFT);
 8001320:	2000      	movs	r0, #0
 8001322:	f001 fc1f 	bl	8002b64 <VL53L1A2_RANGING_SENSOR_Stop>
 8001326:	4603      	mov	r3, r0
 8001328:	4a03      	ldr	r2, [pc, #12]	; (8001338 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	3750      	adds	r7, #80	; 0x50
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000290 	.word	0x20000290
 8001338:	200002ac 	.word	0x200002ac
 800133c:	0801db8c 	.word	0x0801db8c
 8001340:	0801dbb8 	.word	0x0801dbb8

08001344 <print_result>:

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint8_t i, j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e03f      	b.n	80013d2 <print_result+0x8e>
  {
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	3304      	adds	r3, #4
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	4820      	ldr	r0, [pc, #128]	; (80013e8 <print_result+0xa4>)
 8001368:	f01a f8e2 	bl	801b530 <iprintf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 800136c:	2300      	movs	r3, #0
 800136e:	73bb      	strb	r3, [r7, #14]
 8001370:	e020      	b.n	80013b4 <print_result+0x70>
    {
      printf("\n |---> ");
 8001372:	481e      	ldr	r0, [pc, #120]	; (80013ec <print_result+0xa8>)
 8001374:	f01a f8dc 	bl	801b530 <iprintf>
      printf("Status = %ld, Distance = %5ld mm ",
        (long)Result->ZoneResult[i].Status[j],
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	7bb8      	ldrb	r0, [r7, #14]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	4413      	add	r3, r2
 8001384:	4403      	add	r3, r0
 8001386:	3304      	adds	r3, #4
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	440b      	add	r3, r1
 800138c:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 800138e:	461c      	mov	r4, r3
        (long)Result->ZoneResult[i].Distance[j]);
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	7bb8      	ldrb	r0, [r7, #14]
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	4413      	add	r3, r2
 800139c:	4403      	add	r3, r0
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80013a4:	461a      	mov	r2, r3
 80013a6:	4621      	mov	r1, r4
 80013a8:	4811      	ldr	r0, [pc, #68]	; (80013f0 <print_result+0xac>)
 80013aa:	f01a f8c1 	bl	801b530 <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	3301      	adds	r3, #1
 80013b2:	73bb      	strb	r3, [r7, #14]
 80013b4:	7bb9      	ldrb	r1, [r7, #14]
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	4413      	add	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4403      	add	r3, r0
 80013c4:	3304      	adds	r3, #4
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4299      	cmp	r1, r3
 80013ca:	d3d2      	bcc.n	8001372 <print_result+0x2e>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	3301      	adds	r3, #1
 80013d0:	73fb      	strb	r3, [r7, #15]
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0bc      	beq.n	8001352 <print_result+0xe>
    }
  }
  printf ("\n");
 80013d8:	200a      	movs	r0, #10
 80013da:	f01a f8c1 	bl	801b560 <putchar>
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	0801dbc4 	.word	0x0801dbc4
 80013ec:	0801dbd4 	.word	0x0801dbd4
 80013f0:	0801dbe0 	.word	0x0801dbe0

080013f4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001400:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001402:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4313      	orrs	r3, r2
 800140a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800140c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001410:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4013      	ands	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001418:	68fb      	ldr	r3, [r7, #12]
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143c:	2004      	movs	r0, #4
 800143e:	f7ff ffd9 	bl	80013f4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	2002      	movs	r0, #2
 8001444:	f7ff ffd6 	bl	80013f4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	2001      	movs	r0, #1
 800144a:	f7ff ffd3 	bl	80013f4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144e:	2008      	movs	r0, #8
 8001450:	f7ff ffd0 	bl	80013f4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	2123      	movs	r1, #35	; 0x23
 8001458:	4814      	ldr	r0, [pc, #80]	; (80014ac <MX_GPIO_Init+0x84>)
 800145a:	f015 fc35 	bl	8016cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800145e:	2310      	movs	r3, #16
 8001460:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	4619      	mov	r1, r3
 800146e:	4810      	ldr	r0, [pc, #64]	; (80014b0 <MX_GPIO_Init+0x88>)
 8001470:	f015 f9c4 	bl	80167fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001474:	2323      	movs	r3, #35	; 0x23
 8001476:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	4619      	mov	r1, r3
 8001488:	4808      	ldr	r0, [pc, #32]	; (80014ac <MX_GPIO_Init+0x84>)
 800148a:	f015 f9b7 	bl	80167fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800148e:	2303      	movs	r3, #3
 8001490:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_GPIO_Init+0x8c>)
 80014a0:	f015 f9ac 	bl	80167fc <HAL_GPIO_Init>

}
 80014a4:	bf00      	nop
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	48000400 	.word	0x48000400
 80014b0:	48000800 	.word	0x48000800
 80014b4:	48000c00 	.word	0x48000c00

080014b8 <LL_AHB2_GRP1_EnableClock>:
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4013      	ands	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014dc:	68fb      	ldr	r3, [r7, #12]
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b085      	sub	sp, #20
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4313      	orrs	r3, r2
 8001500:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001506:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4013      	ands	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001528:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	43db      	mvns	r3, r3
 800152e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001532:	4013      	ands	r3, r2
 8001534:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <MX_I2C3_Init+0x74>)
 800154a:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <MX_I2C3_Init+0x78>)
 800154c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <MX_I2C3_Init+0x74>)
 8001550:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <MX_I2C3_Init+0x7c>)
 8001552:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <MX_I2C3_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <MX_I2C3_Init+0x74>)
 800155c:	2201      	movs	r2, #1
 800155e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <MX_I2C3_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_I2C3_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_I2C3_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_I2C3_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_I2C3_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800157e:	480e      	ldr	r0, [pc, #56]	; (80015b8 <MX_I2C3_Init+0x74>)
 8001580:	f015 fbba 	bl	8016cf8 <HAL_I2C_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800158a:	f000 f997 	bl	80018bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800158e:	2100      	movs	r1, #0
 8001590:	4809      	ldr	r0, [pc, #36]	; (80015b8 <MX_I2C3_Init+0x74>)
 8001592:	f016 fb61 	bl	8017c58 <HAL_I2CEx_ConfigAnalogFilter>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800159c:	f000 f98e 	bl	80018bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015a0:	2100      	movs	r1, #0
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_I2C3_Init+0x74>)
 80015a4:	f016 fba3 	bl	8017cee <HAL_I2CEx_ConfigDigitalFilter>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80015ae:	f000 f985 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200002b0 	.word	0x200002b0
 80015bc:	40005c00 	.word	0x40005c00
 80015c0:	00707cbb 	.word	0x00707cbb

080015c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b09c      	sub	sp, #112	; 0x70
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2250      	movs	r2, #80	; 0x50
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f019 fb31 	bl	801ac4c <memset>
  if(i2cHandle->Instance==I2C3)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a16      	ldr	r2, [pc, #88]	; (8001648 <HAL_I2C_MspInit+0x84>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d125      	bne.n	8001640 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80015f4:	2308      	movs	r3, #8
 80015f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80015f8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	4618      	mov	r0, r3
 8001604:	f018 f854 	bl	80196b0 <HAL_RCCEx_PeriphCLKConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800160e:	f000 f955 	bl	80018bc <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	2004      	movs	r0, #4
 8001614:	f7ff ff50 	bl	80014b8 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001618:	2303      	movs	r3, #3
 800161a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161c:	2312      	movs	r3, #18
 800161e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001628:	2304      	movs	r3, #4
 800162a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <HAL_I2C_MspInit+0x88>)
 8001634:	f015 f8e2 	bl	80167fc <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001638:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800163c:	f7ff ff55 	bl	80014ea <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001640:	bf00      	nop
 8001642:	3770      	adds	r7, #112	; 0x70
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40005c00 	.word	0x40005c00
 800164c:	48000800 	.word	0x48000800

08001650 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a09      	ldr	r2, [pc, #36]	; (8001684 <HAL_I2C_MspDeInit+0x34>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d10b      	bne.n	800167a <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001662:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001666:	f7ff ff59 	bl	800151c <LL_APB1_GRP1_DisableClock>

    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800166a:	2101      	movs	r1, #1
 800166c:	4806      	ldr	r0, [pc, #24]	; (8001688 <HAL_I2C_MspDeInit+0x38>)
 800166e:	f015 fa35 	bl	8016adc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 8001672:	2102      	movs	r1, #2
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <HAL_I2C_MspDeInit+0x38>)
 8001676:	f015 fa31 	bl	8016adc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40005c00 	.word	0x40005c00
 8001688:	48000800 	.word	0x48000800

0800168c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001694:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001698:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80016a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80016ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00b      	beq.n	80016cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80016b4:	e000      	b.n	80016b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80016b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80016b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f9      	beq.n	80016b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80016c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80016cc:	687b      	ldr	r3, [r7, #4]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80016e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ea:	f023 0218 	bic.w	r2, r3, #24
 80016ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e009      	b.n	800172c <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60ba      	str	r2, [r7, #8]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ffb3 	bl	800168c <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	dbf1      	blt.n	8001718 <_write+0x12>
}
return len;
 8001734:	687b      	ldr	r3, [r7, #4]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001742:	f014 ff0b 	bl	801655c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001746:	f000 f813 	bl	8001770 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800174a:	f000 f887 	bl	800185c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174e:	f7ff fe6b 	bl	8001428 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001752:	f000 fddd 	bl	8002310 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001756:	f000 fea1 	bl	800249c <MX_USB_PCD_Init>
  MX_I2C3_Init();
 800175a:	f7ff fef3 	bl	8001544 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  //Tof Initialization
  VL_TOF_Init();
 800175e:	f7ff fc47 	bl	8000ff0 <VL_TOF_Init>
  //mlx90614 Initialization
  MLX_IR_Init();
 8001762:	f7ff fbcb 	bl	8000efc <MLX_IR_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  VL_TOF_Process();
 8001766:	f7ff fc4d 	bl	8001004 <VL_TOF_Process>
	  MLX_IR_Process();
 800176a:	f7ff fbf5 	bl	8000f58 <MLX_IR_Process>
  {
 800176e:	e7fa      	b.n	8001766 <main+0x28>

08001770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b09a      	sub	sp, #104	; 0x68
 8001774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001776:	f107 0320 	add.w	r3, r7, #32
 800177a:	2248      	movs	r2, #72	; 0x48
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f019 fa64 	bl	801ac4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]
 8001792:	615a      	str	r2, [r3, #20]
 8001794:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017a4:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f023 0303 	bic.w	r3, r3, #3
 80017b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017ba:	f016 fbe7 	bl	8017f8c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff ff8b 	bl	80016da <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c4:	4b24      	ldr	r3, [pc, #144]	; (8001858 <SystemClock_Config+0xe8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017cc:	4a22      	ldr	r2, [pc, #136]	; (8001858 <SystemClock_Config+0xe8>)
 80017ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b20      	ldr	r3, [pc, #128]	; (8001858 <SystemClock_Config+0xe8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80017e0:	2327      	movs	r3, #39	; 0x27
 80017e2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017ea:	2301      	movs	r3, #1
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017f4:	2301      	movs	r3, #1
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f8:	2340      	movs	r3, #64	; 0x40
 80017fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80017fc:	2300      	movs	r3, #0
 80017fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001800:	2360      	movs	r3, #96	; 0x60
 8001802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001804:	2300      	movs	r3, #0
 8001806:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001808:	f107 0320 	add.w	r3, r7, #32
 800180c:	4618      	mov	r0, r3
 800180e:	f016 ff5d 	bl	80186cc <HAL_RCC_OscConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001818:	f000 f850 	bl	80018bc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800181c:	236f      	movs	r3, #111	; 0x6f
 800181e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001820:	2302      	movs	r3, #2
 8001822:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2101      	movs	r1, #1
 800183c:	4618      	mov	r0, r3
 800183e:	f017 fab9 	bl	8018db4 <HAL_RCC_ClockConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001848:	f000 f838 	bl	80018bc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800184c:	f018 f8a6 	bl	801999c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001850:	bf00      	nop
 8001852:	3768      	adds	r7, #104	; 0x68
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	58000400 	.word	0x58000400

0800185c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b094      	sub	sp, #80	; 0x50
 8001860:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001862:	463b      	mov	r3, r7
 8001864:	2250      	movs	r2, #80	; 0x50
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f019 f9ef 	bl	801ac4c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800186e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001872:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001874:	2300      	movs	r3, #0
 8001876:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001878:	2300      	movs	r3, #0
 800187a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187c:	463b      	mov	r3, r7
 800187e:	4618      	mov	r0, r3
 8001880:	f017 ff16 	bl	80196b0 <HAL_RCCEx_PeriphCLKConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800188a:	f000 f817 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800188e:	bf00      	nop
 8001890:	3750      	adds	r7, #80	; 0x50
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d101      	bne.n	80018ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018aa:	f014 fe77 	bl	801659c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40014800 	.word	0x40014800

080018bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <Error_Handler+0x8>
	...

080018c8 <mlx90614_read16>:
  }
  return crc;
}
//###################################################################################################
bool mlx90614_read16(uint8_t address, int16_t *data)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af04      	add	r7, sp, #16
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
  uint8_t d[3];
  if(HAL_I2C_Mem_Read(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	2364      	movs	r3, #100	; 0x64
 80018da:	9302      	str	r3, [sp, #8]
 80018dc:	2303      	movs	r3, #3
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2301      	movs	r3, #1
 80018e8:	21b4      	movs	r1, #180	; 0xb4
 80018ea:	480b      	ldr	r0, [pc, #44]	; (8001918 <mlx90614_read16+0x50>)
 80018ec:	f015 fcac 	bl	8017248 <HAL_I2C_Mem_Read>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <mlx90614_read16+0x32>
    return false;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e009      	b.n	800190e <mlx90614_read16+0x46>
  *data = d[0] | (d[1] << 8);
 80018fa:	7b3b      	ldrb	r3, [r7, #12]
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	7b7b      	ldrb	r3, [r7, #13]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	b21b      	sxth	r3, r3
 8001904:	4313      	orrs	r3, r2
 8001906:	b21a      	sxth	r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	801a      	strh	r2, [r3, #0]
  return true;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200002b0 	.word	0x200002b0

0800191c <mlx90614_calcTemperature>:
	}
	return rawTemp;
}
//###################################################################################################
float mlx90614_calcTemperature(int16_t rawTemp)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	80fb      	strh	r3, [r7, #6]
	float retTemp;
	if(mlx90614.unit == MLX90614_UNIT_RAW)
 8001926:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <mlx90614_calcTemperature+0x94>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d108      	bne.n	8001940 <mlx90614_calcTemperature+0x24>
	{
		retTemp = (float) rawTemp;
 800192e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193a:	edc7 7a03 	vstr	s15, [r7, #12]
 800193e:	e02e      	b.n	800199e <mlx90614_calcTemperature+0x82>
	}
	else
	{
		retTemp = (float)(rawTemp) * 0.02f;
 8001940:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001944:	ee07 3a90 	vmov	s15, r3
 8001948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800194c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80019b4 <mlx90614_calcTemperature+0x98>
 8001950:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001954:	edc7 7a03 	vstr	s15, [r7, #12]
    if(mlx90614.unit != MLX90614_UNIT_K)
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <mlx90614_calcTemperature+0x94>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d01e      	beq.n	800199e <mlx90614_calcTemperature+0x82>
		{
			retTemp -= 273.15f;
 8001960:	edd7 7a03 	vldr	s15, [r7, #12]
 8001964:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80019b8 <mlx90614_calcTemperature+0x9c>
 8001968:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800196c:	edc7 7a03 	vstr	s15, [r7, #12]
/*
			if(obj == true){
				retTemp = retTemp * 0.26f;
			}
*/
			if(mlx90614.unit == MLX90614_UNIT_F)
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <mlx90614_calcTemperature+0x94>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d112      	bne.n	800199e <mlx90614_calcTemperature+0x82>
			{
				retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 8001978:	edd7 7a03 	vldr	s15, [r7, #12]
 800197c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001980:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001984:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001988:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800198c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80019bc <mlx90614_calcTemperature+0xa0>
 8001990:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001994:	edc7 7a03 	vstr	s15, [r7, #12]
				printf("Convertion Farenheight Done ! \n");
 8001998:	4809      	ldr	r0, [pc, #36]	; (80019c0 <mlx90614_calcTemperature+0xa4>)
 800199a:	f019 fe65 	bl	801b668 <puts>

			}
		}
	}
	return retTemp;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	ee07 3a90 	vmov	s15, r3
}
 80019a4:	eeb0 0a67 	vmov.f32	s0, s15
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000304 	.word	0x20000304
 80019b4:	3ca3d70a 	.word	0x3ca3d70a
 80019b8:	43889333 	.word	0x43889333
 80019bc:	42000000 	.word	0x42000000
 80019c0:	0801dc04 	.word	0x0801dc04

080019c4 <mlx90614_init>:
//###################################################################################################
bool mlx90614_init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  memset(&mlx90614, 0, sizeof(mlx90614));
 80019c8:	2234      	movs	r2, #52	; 0x34
 80019ca:	2100      	movs	r1, #0
 80019cc:	4821      	ldr	r0, [pc, #132]	; (8001a54 <mlx90614_init+0x90>)
 80019ce:	f019 f93d 	bl	801ac4c <memset>
  mlx90614.unit = MLX90614_UNIT_C;
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <mlx90614_init+0x90>)
 80019d4:	2202      	movs	r2, #2
 80019d6:	701a      	strb	r2, [r3, #0]
  if(HAL_I2C_IsDeviceReady(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 1, 100) != HAL_OK)
 80019d8:	2364      	movs	r3, #100	; 0x64
 80019da:	2201      	movs	r2, #1
 80019dc:	21b4      	movs	r1, #180	; 0xb4
 80019de:	481e      	ldr	r0, [pc, #120]	; (8001a58 <mlx90614_init+0x94>)
 80019e0:	f015 fd4c 	bl	801747c <HAL_I2C_IsDeviceReady>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <mlx90614_init+0x2a>
    return false;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e030      	b.n	8001a50 <mlx90614_init+0x8c>
  mlx90614_read16(MLX90614_REGISTER_CONFIG, (int16_t*)&mlx90614.configReg);
 80019ee:	491b      	ldr	r1, [pc, #108]	; (8001a5c <mlx90614_init+0x98>)
 80019f0:	2025      	movs	r0, #37	; 0x25
 80019f2:	f7ff ff69 	bl	80018c8 <mlx90614_read16>
  if(mlx90614_readID(NULL) == false)
 80019f6:	2000      	movs	r0, #0
 80019f8:	f000 f832 	bl	8001a60 <mlx90614_readID>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f083 0301 	eor.w	r3, r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <mlx90614_init+0x48>
    return false;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e021      	b.n	8001a50 <mlx90614_init+0x8c>
  if(mlx90614_getEmissivity(NULL) == false)
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f000 f861 	bl	8001ad4 <mlx90614_getEmissivity>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f083 0301 	eor.w	r3, r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <mlx90614_init+0x5e>
    return false;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e016      	b.n	8001a50 <mlx90614_init+0x8c>
  if(mlx90614_getMax(NULL) == false)
 8001a22:	2000      	movs	r0, #0
 8001a24:	f000 f890 	bl	8001b48 <mlx90614_getMax>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f083 0301 	eor.w	r3, r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <mlx90614_init+0x74>
    return false;
 8001a34:	2300      	movs	r3, #0
 8001a36:	e00b      	b.n	8001a50 <mlx90614_init+0x8c>
  if(mlx90614_getMin(NULL) == false)
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f000 f8a9 	bl	8001b90 <mlx90614_getMin>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f083 0301 	eor.w	r3, r3, #1
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <mlx90614_init+0x8a>
    return false;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <mlx90614_init+0x8c>

  return true;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000304 	.word	0x20000304
 8001a58:	200002b0 	.word	0x200002b0
 8001a5c:	20000334 	.word	0x20000334

08001a60 <mlx90614_readID>:
{
  mlx90614.unit = MLX90614_UNIT_;
}
//###################################################################################################
bool mlx90614_readID(int16_t *id)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; i++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e028      	b.n	8001ac0 <mlx90614_readID+0x60>
	{
		int16_t temp = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	817b      	strh	r3, [r7, #10]
		if (!mlx90614_read16(MLX90614_REGISTER_ID0 + i, &temp))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	333c      	adds	r3, #60	; 0x3c
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	f107 020a 	add.w	r2, r7, #10
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff21 	bl	80018c8 <mlx90614_read16>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f083 0301 	eor.w	r3, r3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <mlx90614_readID+0x36>
			return false;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e018      	b.n	8001ac8 <mlx90614_readID+0x68>
		if(id != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <mlx90614_readID+0x4a>
			id[i] = (uint16_t)temp;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001aa8:	801a      	strh	r2, [r3, #0]
		mlx90614.id[i] = (uint16_t)temp;
 8001aaa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001aae:	b299      	uxth	r1, r3
 8001ab0:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <mlx90614_readID+0x70>)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3314      	adds	r3, #20
 8001ab6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<4; i++)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3301      	adds	r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	ddd3      	ble.n	8001a6e <mlx90614_readID+0xe>
	}
	return true;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000304 	.word	0x20000304

08001ad4 <mlx90614_getEmissivity>:
//###################################################################################################
bool mlx90614_getEmissivity(float *emissivity)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_KE, &mlx90614.rawEmissivity))
 8001adc:	4917      	ldr	r1, [pc, #92]	; (8001b3c <mlx90614_getEmissivity+0x68>)
 8001ade:	2024      	movs	r0, #36	; 0x24
 8001ae0:	f7ff fef2 	bl	80018c8 <mlx90614_read16>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d022      	beq.n	8001b30 <mlx90614_getEmissivity+0x5c>
	{
    mlx90614.emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <mlx90614_getEmissivity+0x6c>)
 8001aec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001afa:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001b44 <mlx90614_getEmissivity+0x70>
 8001afe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <mlx90614_getEmissivity+0x6c>)
 8001b04:	edc3 7a04 	vstr	s15, [r3, #16]
		if(emissivity != NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00e      	beq.n	8001b2c <mlx90614_getEmissivity+0x58>
      *emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <mlx90614_getEmissivity+0x6c>)
 8001b10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b1e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001b44 <mlx90614_getEmissivity+0x70>
 8001b22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <mlx90614_getEmissivity+0x5e>
	}
	return false;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000306 	.word	0x20000306
 8001b40:	20000304 	.word	0x20000304
 8001b44:	477fff00 	.word	0x477fff00

08001b48 <mlx90614_getMax>:
	mlx90614.rawMin = mlx90614_calcRawTemp(minTemp);
	return mlx90614_write16(MLX90614_REGISTER_TOMIN, mlx90614.rawMin);
}
//###################################################################################################
bool mlx90614_getMax(float *maxTemp)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMAX, &mlx90614.rawMax))
 8001b50:	490d      	ldr	r1, [pc, #52]	; (8001b88 <mlx90614_getMax+0x40>)
 8001b52:	2020      	movs	r0, #32
 8001b54:	f7ff feb8 	bl	80018c8 <mlx90614_read16>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00e      	beq.n	8001b7c <mlx90614_getMax+0x34>
	{
    if(maxTemp != NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d009      	beq.n	8001b78 <mlx90614_getMax+0x30>
      *maxTemp = mlx90614.rawMax;
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <mlx90614_getMax+0x44>)
 8001b66:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b6a:	ee07 3a90 	vmov	s15, r3
 8001b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <mlx90614_getMax+0x36>
	}
	return false;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000030e 	.word	0x2000030e
 8001b8c:	20000304 	.word	0x20000304

08001b90 <mlx90614_getMin>:
//###################################################################################################
bool mlx90614_getMin(float *minTemp)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMIN, &mlx90614.rawMin))
 8001b98:	490d      	ldr	r1, [pc, #52]	; (8001bd0 <mlx90614_getMin+0x40>)
 8001b9a:	2021      	movs	r0, #33	; 0x21
 8001b9c:	f7ff fe94 	bl	80018c8 <mlx90614_read16>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00e      	beq.n	8001bc4 <mlx90614_getMin+0x34>
	{
    if(minTemp != NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d009      	beq.n	8001bc0 <mlx90614_getMin+0x30>
      *minTemp = mlx90614.rawMin;
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <mlx90614_getMin+0x44>)
 8001bae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <mlx90614_getMin+0x36>
	}
	return false;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000310 	.word	0x20000310
 8001bd4:	20000304 	.word	0x20000304

08001bd8 <mlx90614_getAmbient>:
//###################################################################################################
bool mlx90614_getAmbient(float *ambientTemp)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	if (mlx90614_read16(MLX90614_REGISTER_TA, &mlx90614.rawAmbient))
 8001be0:	490d      	ldr	r1, [pc, #52]	; (8001c18 <mlx90614_getAmbient+0x40>)
 8001be2:	2006      	movs	r0, #6
 8001be4:	f7ff fe70 	bl	80018c8 <mlx90614_read16>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00f      	beq.n	8001c0e <mlx90614_getAmbient+0x36>
	{
    if(ambientTemp != NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00a      	beq.n	8001c0a <mlx90614_getAmbient+0x32>
      *ambientTemp = mlx90614_calcTemperature(mlx90614.rawAmbient);
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <mlx90614_getAmbient+0x44>)
 8001bf6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fe8e 	bl	800191c <mlx90614_calcTemperature>
 8001c00:	eef0 7a40 	vmov.f32	s15, s0
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <mlx90614_getAmbient+0x38>
	}
	return false;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000308 	.word	0x20000308
 8001c1c:	20000304 	.word	0x20000304

08001c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b085      	sub	sp, #20
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	; 0x30
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	201a      	movs	r0, #26
 8001c76:	f014 fd99 	bl	80167ac <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001c7a:	201a      	movs	r0, #26
 8001c7c:	f014 fdb0 	bl	80167e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001c80:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001c84:	f7ff ffd3 	bl	8001c2e <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c88:	f107 0208 	add.w	r2, r7, #8
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f017 fa7a 	bl	801918c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c98:	f017 fa62 	bl	8019160 <HAL_RCC_GetPCLK2Freq>
 8001c9c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca0:	4a12      	ldr	r2, [pc, #72]	; (8001cec <HAL_InitTick+0x8c>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	0c9b      	lsrs	r3, r3, #18
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_InitTick+0x90>)
 8001cae:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <HAL_InitTick+0x94>)
 8001cb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <HAL_InitTick+0x90>)
 8001cb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cb8:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001cba:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <HAL_InitTick+0x90>)
 8001cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cbe:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_InitTick+0x90>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_InitTick+0x90>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001ccc:	4808      	ldr	r0, [pc, #32]	; (8001cf0 <HAL_InitTick+0x90>)
 8001cce:	f017 ff7c 	bl	8019bca <HAL_TIM_Base_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d104      	bne.n	8001ce2 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <HAL_InitTick+0x90>)
 8001cda:	f017 ffd7 	bl	8019c8c <HAL_TIM_Base_Start_IT>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	e000      	b.n	8001ce4 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3730      	adds	r7, #48	; 0x30
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	431bde83 	.word	0x431bde83
 8001cf0:	20000338 	.word	0x20000338
 8001cf4:	40014800 	.word	0x40014800

08001cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <NMI_Handler+0x4>

08001cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <HardFault_Handler+0x4>

08001d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <MemManage_Handler+0x4>

08001d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <BusFault_Handler+0x4>

08001d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <UsageFault_Handler+0x4>

08001d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001d56:	f017 ffe7 	bl	8019d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000338 	.word	0x20000338

08001d64 <LL_AHB2_GRP1_EnableClock>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d88:	68fb      	ldr	r3, [r7, #12]
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <LL_APB1_GRP1_EnableClock>:
{
 8001d96:	b480      	push	{r7}
 8001d98:	b085      	sub	sp, #20
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001da4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4013      	ands	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_APB1_GRP1_DisableClock>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dde:	4013      	ands	r3, r2
 8001de0:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <BSP_I2C1_Init+0x70>)
 8001dfc:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <BSP_I2C1_Init+0x74>)
 8001dfe:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <BSP_I2C1_Init+0x78>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	4918      	ldr	r1, [pc, #96]	; (8001e68 <BSP_I2C1_Init+0x78>)
 8001e08:	600a      	str	r2, [r1, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d122      	bne.n	8001e54 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001e0e:	4814      	ldr	r0, [pc, #80]	; (8001e60 <BSP_I2C1_Init+0x70>)
 8001e10:	f015 fc3b 	bl	801768a <HAL_I2C_GetState>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d11c      	bne.n	8001e54 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001e1a:	4811      	ldr	r0, [pc, #68]	; (8001e60 <BSP_I2C1_Init+0x70>)
 8001e1c:	f000 f8ee 	bl	8001ffc <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d116      	bne.n	8001e54 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001e26:	480e      	ldr	r0, [pc, #56]	; (8001e60 <BSP_I2C1_Init+0x70>)
 8001e28:	f000 f8a4 	bl	8001f74 <MX_I2C1_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001e32:	f06f 0307 	mvn.w	r3, #7
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	e00c      	b.n	8001e54 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4808      	ldr	r0, [pc, #32]	; (8001e60 <BSP_I2C1_Init+0x70>)
 8001e3e:	f015 ff0b 	bl	8017c58 <HAL_I2CEx_ConfigAnalogFilter>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001e48:	f06f 0307 	mvn.w	r3, #7
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	e001      	b.n	8001e54 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001e54:	687b      	ldr	r3, [r7, #4]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000384 	.word	0x20000384
 8001e64:	40005400 	.word	0x40005400
 8001e68:	200003d8 	.word	0x200003d8

08001e6c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <BSP_I2C1_DeInit+0x48>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d014      	beq.n	8001ea8 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <BSP_I2C1_DeInit+0x48>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <BSP_I2C1_DeInit+0x48>)
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <BSP_I2C1_DeInit+0x48>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10b      	bne.n	8001ea8 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001e90:	4809      	ldr	r0, [pc, #36]	; (8001eb8 <BSP_I2C1_DeInit+0x4c>)
 8001e92:	f000 f8f7 	bl	8002084 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001e96:	4808      	ldr	r0, [pc, #32]	; (8001eb8 <BSP_I2C1_DeInit+0x4c>)
 8001e98:	f014 ffbd 	bl	8016e16 <HAL_I2C_DeInit>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001ea2:	f06f 0307 	mvn.w	r3, #7
 8001ea6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001ea8:	687b      	ldr	r3, [r7, #4]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200003d8 	.word	0x200003d8
 8001eb8:	20000384 	.word	0x20000384

08001ebc <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	80fb      	strh	r3, [r7, #6]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001ed0:	88bb      	ldrh	r3, [r7, #4]
 8001ed2:	88f9      	ldrh	r1, [r7, #6]
 8001ed4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ed8:	9200      	str	r2, [sp, #0]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	480b      	ldr	r0, [pc, #44]	; (8001f0c <BSP_I2C1_Send+0x50>)
 8001ede:	f014 ffc9 	bl	8016e74 <HAL_I2C_Master_Transmit>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00c      	beq.n	8001f02 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001ee8:	4808      	ldr	r0, [pc, #32]	; (8001f0c <BSP_I2C1_Send+0x50>)
 8001eea:	f015 fbdc 	bl	80176a6 <HAL_I2C_GetError>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d003      	beq.n	8001efc <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001ef4:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e002      	b.n	8001f02 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001efc:	f06f 0303 	mvn.w	r3, #3
 8001f00:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001f02:	68fb      	ldr	r3, [r7, #12]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000384 	.word	0x20000384

08001f10 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	4603      	mov	r3, r0
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	80fb      	strh	r3, [r7, #6]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001f24:	88bb      	ldrh	r3, [r7, #4]
 8001f26:	88f9      	ldrh	r1, [r7, #6]
 8001f28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f2c:	9200      	str	r2, [sp, #0]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	480b      	ldr	r0, [pc, #44]	; (8001f60 <BSP_I2C1_Recv+0x50>)
 8001f32:	f015 f893 	bl	801705c <HAL_I2C_Master_Receive>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00c      	beq.n	8001f56 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001f3c:	4808      	ldr	r0, [pc, #32]	; (8001f60 <BSP_I2C1_Recv+0x50>)
 8001f3e:	f015 fbb2 	bl	80176a6 <HAL_I2C_GetError>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d003      	beq.n	8001f50 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001f48:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	e002      	b.n	8001f56 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001f50:	f06f 0303 	mvn.w	r3, #3
 8001f54:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000384 	.word	0x20000384

08001f64 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001f68:	f014 fb2c 	bl	80165c4 <HAL_GetTick>
 8001f6c:	4603      	mov	r3, r0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a1c      	ldr	r2, [pc, #112]	; (8001ff4 <MX_I2C1_Init+0x80>)
 8001f84:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a1b      	ldr	r2, [pc, #108]	; (8001ff8 <MX_I2C1_Init+0x84>)
 8001f8a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f014 fe9e 	bl	8016cf8 <HAL_I2C_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f015 fe45 	bl	8017c58 <HAL_I2CEx_ConfigAnalogFilter>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001fd8:	2100      	movs	r1, #0
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f015 fe87 	bl	8017cee <HAL_I2CEx_ConfigDigitalFilter>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40005400 	.word	0x40005400
 8001ff8:	00707cbb 	.word	0x00707cbb

08001ffc <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b09c      	sub	sp, #112	; 0x70
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	2250      	movs	r2, #80	; 0x50
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f018 fe1d 	bl	801ac4c <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002012:	2304      	movs	r3, #4
 8002014:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002016:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	4618      	mov	r0, r3
 8002022:	f017 fb45 	bl	80196b0 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	2002      	movs	r0, #2
 8002028:	f7ff fe9c 	bl	8001d64 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800202c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002030:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002032:	2312      	movs	r3, #18
 8002034:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800203e:	2304      	movs	r3, #4
 8002040:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002042:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002046:	4619      	mov	r1, r3
 8002048:	480d      	ldr	r0, [pc, #52]	; (8002080 <I2C1_MspInit+0x84>)
 800204a:	f014 fbd7 	bl	80167fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800204e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002052:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002054:	2312      	movs	r3, #18
 8002056:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002060:	2304      	movs	r3, #4
 8002062:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002064:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002068:	4619      	mov	r1, r3
 800206a:	4805      	ldr	r0, [pc, #20]	; (8002080 <I2C1_MspInit+0x84>)
 800206c:	f014 fbc6 	bl	80167fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002070:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002074:	f7ff fe8f 	bl	8001d96 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002078:	bf00      	nop
 800207a:	3770      	adds	r7, #112	; 0x70
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	48000400 	.word	0x48000400

08002084 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800208c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002090:	f7ff fe9a 	bl	8001dc8 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002098:	4805      	ldr	r0, [pc, #20]	; (80020b0 <I2C1_MspDeInit+0x2c>)
 800209a:	f014 fd1f 	bl	8016adc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800209e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020a2:	4803      	ldr	r0, [pc, #12]	; (80020b0 <I2C1_MspDeInit+0x2c>)
 80020a4:	f014 fd1a 	bl	8016adc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	48000400 	.word	0x48000400

080020b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return 1;
 80020b8:	2301      	movs	r3, #1
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <_kill>:

int _kill(int pid, int sig)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ce:	f018 fd85 	bl	801abdc <__errno>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2216      	movs	r2, #22
 80020d6:	601a      	str	r2, [r3, #0]
  return -1;
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_exit>:

void _exit (int status)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020ec:	f04f 31ff 	mov.w	r1, #4294967295
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff ffe7 	bl	80020c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020f6:	e7fe      	b.n	80020f6 <_exit+0x12>

080020f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	e00a      	b.n	8002120 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800210a:	f3af 8000 	nop.w
 800210e:	4601      	mov	r1, r0
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	60ba      	str	r2, [r7, #8]
 8002116:	b2ca      	uxtb	r2, r1
 8002118:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	3301      	adds	r3, #1
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	429a      	cmp	r2, r3
 8002126:	dbf0      	blt.n	800210a <_read+0x12>
  }

  return len;
 8002128:	687b      	ldr	r3, [r7, #4]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800215a:	605a      	str	r2, [r3, #4]
  return 0;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <_isatty>:

int _isatty(int file)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <_sbrk+0x5c>)
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <_sbrk+0x60>)
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b0:	4b13      	ldr	r3, [pc, #76]	; (8002200 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <_sbrk+0x64>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <_sbrk+0x68>)
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d207      	bcs.n	80021dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021cc:	f018 fd06 	bl	801abdc <__errno>
 80021d0:	4603      	mov	r3, r0
 80021d2:	220c      	movs	r2, #12
 80021d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
 80021da:	e009      	b.n	80021f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021dc:	4b08      	ldr	r3, [pc, #32]	; (8002200 <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	4a05      	ldr	r2, [pc, #20]	; (8002200 <_sbrk+0x64>)
 80021ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20030000 	.word	0x20030000
 80021fc:	00000400 	.word	0x00000400
 8002200:	200003dc 	.word	0x200003dc
 8002204:	20008860 	.word	0x20008860

08002208 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800220c:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <SystemInit+0x98>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	4a23      	ldr	r2, [pc, #140]	; (80022a0 <SystemInit+0x98>)
 8002214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800221c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800222c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002230:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002234:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002240:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <SystemInit+0x9c>)
 8002242:	4013      	ands	r3, r2
 8002244:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002252:	f023 0305 	bic.w	r3, r3, #5
 8002256:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800225a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800226e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002272:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <SystemInit+0xa0>)
 8002274:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227a:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <SystemInit+0xa0>)
 800227c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800227e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800228e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002292:	2200      	movs	r2, #0
 8002294:	619a      	str	r2, [r3, #24]
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00
 80022a4:	faf6fefb 	.word	0xfaf6fefb
 80022a8:	22041000 	.word	0x22041000

080022ac <LL_AHB2_GRP1_EnableClock>:
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80022b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80022c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4013      	ands	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022d0:	68fb      	ldr	r3, [r7, #12]
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <LL_APB2_GRP1_EnableClock>:
{
 80022de:	b480      	push	{r7}
 80022e0:	b085      	sub	sp, #20
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80022e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4013      	ands	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002302:	68fb      	ldr	r3, [r7, #12]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002314:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <MX_USART1_UART_Init+0x94>)
 8002316:	4a24      	ldr	r2, [pc, #144]	; (80023a8 <MX_USART1_UART_Init+0x98>)
 8002318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800231a:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <MX_USART1_UART_Init+0x94>)
 800231c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <MX_USART1_UART_Init+0x94>)
 8002324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002328:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800232a:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <MX_USART1_UART_Init+0x94>)
 800232c:	2200      	movs	r2, #0
 800232e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002330:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <MX_USART1_UART_Init+0x94>)
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002336:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <MX_USART1_UART_Init+0x94>)
 8002338:	220c      	movs	r2, #12
 800233a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <MX_USART1_UART_Init+0x94>)
 800233e:	2200      	movs	r2, #0
 8002340:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002342:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <MX_USART1_UART_Init+0x94>)
 8002344:	2200      	movs	r2, #0
 8002346:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <MX_USART1_UART_Init+0x94>)
 800234a:	2200      	movs	r2, #0
 800234c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <MX_USART1_UART_Init+0x94>)
 8002350:	2200      	movs	r2, #0
 8002352:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <MX_USART1_UART_Init+0x94>)
 8002356:	2200      	movs	r2, #0
 8002358:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800235a:	4812      	ldr	r0, [pc, #72]	; (80023a4 <MX_USART1_UART_Init+0x94>)
 800235c:	f017 fece 	bl	801a0fc <HAL_UART_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002366:	f7ff faa9 	bl	80018bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800236a:	2100      	movs	r1, #0
 800236c:	480d      	ldr	r0, [pc, #52]	; (80023a4 <MX_USART1_UART_Init+0x94>)
 800236e:	f018 fb2e 	bl	801a9ce <HAL_UARTEx_SetTxFifoThreshold>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002378:	f7ff faa0 	bl	80018bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800237c:	2100      	movs	r1, #0
 800237e:	4809      	ldr	r0, [pc, #36]	; (80023a4 <MX_USART1_UART_Init+0x94>)
 8002380:	f018 fb63 	bl	801aa4a <HAL_UARTEx_SetRxFifoThreshold>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800238a:	f7ff fa97 	bl	80018bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800238e:	4805      	ldr	r0, [pc, #20]	; (80023a4 <MX_USART1_UART_Init+0x94>)
 8002390:	f018 fae4 	bl	801a95c <HAL_UARTEx_DisableFifoMode>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800239a:	f7ff fa8f 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200003e0 	.word	0x200003e0
 80023a8:	40013800 	.word	0x40013800

080023ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b09c      	sub	sp, #112	; 0x70
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023c4:	f107 030c 	add.w	r3, r7, #12
 80023c8:	2250      	movs	r2, #80	; 0x50
 80023ca:	2100      	movs	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f018 fc3d 	bl	801ac4c <memset>
  if(uartHandle->Instance==USART1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a16      	ldr	r2, [pc, #88]	; (8002430 <HAL_UART_MspInit+0x84>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d124      	bne.n	8002426 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023dc:	2301      	movs	r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023e0:	2300      	movs	r3, #0
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023e4:	f107 030c 	add.w	r3, r7, #12
 80023e8:	4618      	mov	r0, r3
 80023ea:	f017 f961 	bl	80196b0 <HAL_RCCEx_PeriphCLKConfig>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023f4:	f7ff fa62 	bl	80018bc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023fc:	f7ff ff6f 	bl	80022de <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002400:	2002      	movs	r0, #2
 8002402:	f7ff ff53 	bl	80022ac <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002406:	23c0      	movs	r3, #192	; 0xc0
 8002408:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800240e:	2301      	movs	r3, #1
 8002410:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002412:	2300      	movs	r3, #0
 8002414:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002416:	2307      	movs	r3, #7
 8002418:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800241e:	4619      	mov	r1, r3
 8002420:	4804      	ldr	r0, [pc, #16]	; (8002434 <HAL_UART_MspInit+0x88>)
 8002422:	f014 f9eb 	bl	80167fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002426:	bf00      	nop
 8002428:	3770      	adds	r7, #112	; 0x70
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40013800 	.word	0x40013800
 8002434:	48000400 	.word	0x48000400

08002438 <LL_AHB2_GRP1_EnableClock>:
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002444:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002446:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4313      	orrs	r3, r2
 800244e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002454:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4013      	ands	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800245c:	68fb      	ldr	r3, [r7, #12]
}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <LL_APB1_GRP1_EnableClock>:
{
 800246a:	b480      	push	{r7}
 800246c:	b085      	sub	sp, #20
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002476:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002478:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4313      	orrs	r3, r2
 8002480:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002486:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4013      	ands	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800248e:	68fb      	ldr	r3, [r7, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80024a0:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <MX_USB_PCD_Init+0x48>)
 80024a2:	4a11      	ldr	r2, [pc, #68]	; (80024e8 <MX_USB_PCD_Init+0x4c>)
 80024a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80024a6:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <MX_USB_PCD_Init+0x48>)
 80024a8:	2208      	movs	r2, #8
 80024aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80024ac:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <MX_USB_PCD_Init+0x48>)
 80024ae:	2202      	movs	r2, #2
 80024b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <MX_USB_PCD_Init+0x48>)
 80024b4:	2202      	movs	r2, #2
 80024b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80024b8:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <MX_USB_PCD_Init+0x48>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <MX_USB_PCD_Init+0x48>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80024c4:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <MX_USB_PCD_Init+0x48>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <MX_USB_PCD_Init+0x48>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80024d0:	4804      	ldr	r0, [pc, #16]	; (80024e4 <MX_USB_PCD_Init+0x48>)
 80024d2:	f015 fc58 	bl	8017d86 <HAL_PCD_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80024dc:	f7ff f9ee 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000474 	.word	0x20000474
 80024e8:	40006800 	.word	0x40006800

080024ec <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b09c      	sub	sp, #112	; 0x70
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002504:	f107 030c 	add.w	r3, r7, #12
 8002508:	2250      	movs	r2, #80	; 0x50
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f018 fb9d 	bl	801ac4c <memset>
  if(pcdHandle->Instance==USB)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1f      	ldr	r2, [pc, #124]	; (8002594 <HAL_PCD_MspInit+0xa8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d136      	bne.n	800258a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800251c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002520:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002522:	2318      	movs	r3, #24
 8002524:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800252a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800252c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002530:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002532:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002536:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002538:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800253c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800253e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002542:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002544:	f107 030c 	add.w	r3, r7, #12
 8002548:	4618      	mov	r0, r3
 800254a:	f017 f8b1 	bl	80196b0 <HAL_RCCEx_PeriphCLKConfig>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8002554:	f7ff f9b2 	bl	80018bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002558:	2001      	movs	r0, #1
 800255a:	f7ff ff6d 	bl	8002438 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800255e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002562:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	2302      	movs	r3, #2
 8002566:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	2300      	movs	r3, #0
 800256e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002570:	230a      	movs	r3, #10
 8002572:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002574:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002578:	4619      	mov	r1, r3
 800257a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800257e:	f014 f93d 	bl	80167fc <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002582:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002586:	f7ff ff70 	bl	800246a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800258a:	bf00      	nop
 800258c:	3770      	adds	r7, #112	; 0x70
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40006800 	.word	0x40006800

08002598 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002598:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800259a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259c:	3304      	adds	r3, #4

0800259e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800259e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025a0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80025a2:	d3f9      	bcc.n	8002598 <CopyDataInit>
  bx lr
 80025a4:	4770      	bx	lr

080025a6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80025a6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80025a8:	3004      	adds	r0, #4

080025aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80025aa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80025ac:	d3fb      	bcc.n	80025a6 <FillZerobss>
  bx lr
 80025ae:	4770      	bx	lr

080025b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025b0:	480c      	ldr	r0, [pc, #48]	; (80025e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025b4:	f7ff fe28 	bl	8002208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80025b8:	480b      	ldr	r0, [pc, #44]	; (80025e8 <LoopForever+0x6>)
 80025ba:	490c      	ldr	r1, [pc, #48]	; (80025ec <LoopForever+0xa>)
 80025bc:	4a0c      	ldr	r2, [pc, #48]	; (80025f0 <LoopForever+0xe>)
 80025be:	2300      	movs	r3, #0
 80025c0:	f7ff ffed 	bl	800259e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80025c4:	480b      	ldr	r0, [pc, #44]	; (80025f4 <LoopForever+0x12>)
 80025c6:	490c      	ldr	r1, [pc, #48]	; (80025f8 <LoopForever+0x16>)
 80025c8:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <LoopForever+0x1a>)
 80025ca:	2300      	movs	r3, #0
 80025cc:	f7ff ffe7 	bl	800259e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80025d0:	480b      	ldr	r0, [pc, #44]	; (8002600 <LoopForever+0x1e>)
 80025d2:	490c      	ldr	r1, [pc, #48]	; (8002604 <LoopForever+0x22>)
 80025d4:	2300      	movs	r3, #0
 80025d6:	f7ff ffe8 	bl	80025aa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025da:	f018 fb05 	bl	801abe8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80025de:	f7ff f8ae 	bl	800173e <main>

080025e2 <LoopForever>:

LoopForever:
  b LoopForever
 80025e2:	e7fe      	b.n	80025e2 <LoopForever>
  ldr   r0, =_estack
 80025e4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80025e8:	20000008 	.word	0x20000008
 80025ec:	20000248 	.word	0x20000248
 80025f0:	0801e14c 	.word	0x0801e14c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80025f4:	20030000 	.word	0x20030000
 80025f8:	20030000 	.word	0x20030000
 80025fc:	0801e38c 	.word	0x0801e38c
  INIT_BSS _sbss, _ebss
 8002600:	20000248 	.word	0x20000248
 8002604:	2000885c 	.word	0x2000885c

08002608 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002608:	e7fe      	b.n	8002608 <ADC1_IRQHandler>

0800260a <LL_AHB2_GRP1_EnableClock>:
{
 800260a:	b480      	push	{r7}
 800260c:	b085      	sub	sp, #20
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002618:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4313      	orrs	r3, r2
 8002620:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4013      	ands	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800262e:	68fb      	ldr	r3, [r7, #12]
}
 8002630:	bf00      	nop
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <VL53L1A2_Init>:
  * @brief Initialize X-NUCLEO-53L1A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L1A2_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
  int32_t status = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 8002646:	4b36      	ldr	r3, [pc, #216]	; (8002720 <VL53L1A2_Init+0xe4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	4934      	ldr	r1, [pc, #208]	; (8002720 <VL53L1A2_Init+0xe4>)
 800264e:	600a      	str	r2, [r1, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d154      	bne.n	80026fe <VL53L1A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 8002654:	f000 f8d4 	bl	8002800 <_I2cFailRecover>
 8002658:	4602      	mov	r2, r0
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4313      	orrs	r3, r2
 800265e:	607b      	str	r3, [r7, #4]
    status |= VL53L1A2_I2C_Init();
 8002660:	f7ff fbc6 	bl	8001df0 <BSP_I2C1_Init>
 8002664:	4602      	mov	r2, r0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4313      	orrs	r3, r2
 800266a:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d147      	bne.n	8002702 <VL53L1A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 8002672:	463a      	mov	r2, r7
 8002674:	2302      	movs	r3, #2
 8002676:	2100      	movs	r1, #0
 8002678:	2086      	movs	r0, #134	; 0x86
 800267a:	f000 f953 	bl	8002924 <_ExpanderRd>
 800267e:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d13f      	bne.n	8002706 <VL53L1A2_Init+0xca>
 8002686:	783b      	ldrb	r3, [r7, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d13c      	bne.n	8002706 <VL53L1A2_Init+0xca>
 800268c:	787b      	ldrb	r3, [r7, #1]
 800268e:	2b16      	cmp	r3, #22
 8002690:	d139      	bne.n	8002706 <VL53L1A2_Init+0xca>
	  {
      VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 8002692:	463a      	mov	r2, r7
 8002694:	2302      	movs	r3, #2
 8002696:	2100      	movs	r1, #0
 8002698:	2084      	movs	r0, #132	; 0x84
 800269a:	f000 f943 	bl	8002924 <_ExpanderRd>
 800269e:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d131      	bne.n	800270a <VL53L1A2_Init+0xce>
 80026a6:	783b      	ldrb	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d12e      	bne.n	800270a <VL53L1A2_Init+0xce>
 80026ac:	787b      	ldrb	r3, [r7, #1]
 80026ae:	2b16      	cmp	r3, #22
 80026b0:	d12b      	bne.n	800270a <VL53L1A2_Init+0xce>
	  {
		  VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 80026b2:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <VL53L1A2_Init+0xe8>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 80026b8:	23ff      	movs	r3, #255	; 0xff
 80026ba:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 80026bc:	23ff      	movs	r3, #255	; 0xff
 80026be:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 80026c0:	463a      	mov	r2, r7
 80026c2:	2302      	movs	r3, #2
 80026c4:	2114      	movs	r1, #20
 80026c6:	2086      	movs	r0, #134	; 0x86
 80026c8:	f000 f95e 	bl	8002988 <_ExpanderWR>
 80026cc:	6078      	str	r0, [r7, #4]

	  if (status)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d11c      	bne.n	800270e <VL53L1A2_Init+0xd2>
	  {
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 80026d4:	23ff      	movs	r3, #255	; 0xff
 80026d6:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 80026d8:	23bf      	movs	r3, #191	; 0xbf
 80026da:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 80026dc:	463a      	mov	r2, r7
 80026de:	2302      	movs	r3, #2
 80026e0:	2114      	movs	r1, #20
 80026e2:	2084      	movs	r0, #132	; 0x84
 80026e4:	f000 f950 	bl	8002988 <_ExpanderWR>
 80026e8:	6078      	str	r0, [r7, #4]

	  if (status)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d110      	bne.n	8002712 <VL53L1A2_Init+0xd6>
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <VL53L1A2_Init+0xe8>)
 80026f2:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 80026f6:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 80026f8:	f000 f8f4 	bl	80028e4 <_ExpandersSetAllIO>
 80026fc:	6078      	str	r0, [r7, #4]
	  {
		VL53L1A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 80026fe:	bf00      	nop
 8002700:	e008      	b.n	8002714 <VL53L1A2_Init+0xd8>
      goto done_err;
 8002702:	bf00      	nop
 8002704:	e006      	b.n	8002714 <VL53L1A2_Init+0xd8>
      goto done_err;
 8002706:	bf00      	nop
 8002708:	e004      	b.n	8002714 <VL53L1A2_Init+0xd8>
		  goto done_err;
 800270a:	bf00      	nop
 800270c:	e002      	b.n	8002714 <VL53L1A2_Init+0xd8>
		goto done_err;
 800270e:	bf00      	nop
 8002710:	e000      	b.n	8002714 <VL53L1A2_Init+0xd8>
		goto done_err;
 8002712:	bf00      	nop
  return status;
 8002714:	687b      	ldr	r3, [r7, #4]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000768 	.word	0x20000768
 8002724:	2000076c 	.word	0x2000076c

08002728 <VL53L1A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L1A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L1A2_ResetId(uint8_t DevNo, uint8_t state)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	460a      	mov	r2, r1
 8002732:	71fb      	strb	r3, [r7, #7]
 8002734:	4613      	mov	r3, r2
 8002736:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d037      	beq.n	80027ae <VL53L1A2_ResetId+0x86>
 800273e:	2b02      	cmp	r3, #2
 8002740:	dc4e      	bgt.n	80027e0 <VL53L1A2_ResetId+0xb8>
 8002742:	2b00      	cmp	r3, #0
 8002744:	d01a      	beq.n	800277c <VL53L1A2_ResetId+0x54>
 8002746:	2b01      	cmp	r3, #1
 8002748:	d14a      	bne.n	80027e0 <VL53L1A2_ResetId+0xb8>
  {
    case VL53L1A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 800274a:	4b2a      	ldr	r3, [pc, #168]	; (80027f4 <VL53L1A2_ResetId+0xcc>)
 800274c:	78db      	ldrb	r3, [r3, #3]
 800274e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4b27      	ldr	r3, [pc, #156]	; (80027f4 <VL53L1A2_ResetId+0xcc>)
 8002756:	70da      	strb	r2, [r3, #3]

      if (state)
 8002758:	79bb      	ldrb	r3, [r7, #6]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d006      	beq.n	800276c <VL53L1A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 800275e:	4b25      	ldr	r3, [pc, #148]	; (80027f4 <VL53L1A2_ResetId+0xcc>)
 8002760:	78db      	ldrb	r3, [r3, #3]
 8002762:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002766:	b2da      	uxtb	r2, r3
 8002768:	4b22      	ldr	r3, [pc, #136]	; (80027f4 <VL53L1A2_ResetId+0xcc>)
 800276a:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 800276c:	2301      	movs	r3, #1
 800276e:	4a22      	ldr	r2, [pc, #136]	; (80027f8 <VL53L1A2_ResetId+0xd0>)
 8002770:	2113      	movs	r1, #19
 8002772:	2084      	movs	r0, #132	; 0x84
 8002774:	f000 f908 	bl	8002988 <_ExpanderWR>
 8002778:	60f8      	str	r0, [r7, #12]
      break;
 800277a:	e035      	b.n	80027e8 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <VL53L1A2_ResetId+0xcc>)
 800277e:	785b      	ldrb	r3, [r3, #1]
 8002780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <VL53L1A2_ResetId+0xcc>)
 8002788:	705a      	strb	r2, [r3, #1]

      if (state)
 800278a:	79bb      	ldrb	r3, [r7, #6]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d006      	beq.n	800279e <VL53L1A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 8002790:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <VL53L1A2_ResetId+0xcc>)
 8002792:	785b      	ldrb	r3, [r3, #1]
 8002794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <VL53L1A2_ResetId+0xcc>)
 800279c:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800279e:	2301      	movs	r3, #1
 80027a0:	4a16      	ldr	r2, [pc, #88]	; (80027fc <VL53L1A2_ResetId+0xd4>)
 80027a2:	2113      	movs	r1, #19
 80027a4:	2086      	movs	r0, #134	; 0x86
 80027a6:	f000 f8ef 	bl	8002988 <_ExpanderWR>
 80027aa:	60f8      	str	r0, [r7, #12]
      break;
 80027ac:	e01c      	b.n	80027e8 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <VL53L1A2_ResetId+0xcc>)
 80027b0:	785b      	ldrb	r3, [r3, #1]
 80027b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <VL53L1A2_ResetId+0xcc>)
 80027ba:	705a      	strb	r2, [r3, #1]

      if (state)
 80027bc:	79bb      	ldrb	r3, [r7, #6]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d006      	beq.n	80027d0 <VL53L1A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <VL53L1A2_ResetId+0xcc>)
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <VL53L1A2_ResetId+0xcc>)
 80027ce:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80027d0:	2301      	movs	r3, #1
 80027d2:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <VL53L1A2_ResetId+0xd4>)
 80027d4:	2113      	movs	r1, #19
 80027d6:	2086      	movs	r0, #134	; 0x86
 80027d8:	f000 f8d6 	bl	8002988 <_ExpanderWR>
 80027dc:	60f8      	str	r0, [r7, #12]
      break;
 80027de:	e003      	b.n	80027e8 <VL53L1A2_ResetId+0xc0>

    default:
      VL53L1A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
 80027e4:	60fb      	str	r3, [r7, #12]
      goto done;
 80027e6:	e000      	b.n	80027ea <VL53L1A2_ResetId+0xc2>
  if (status)
  {
    VL53L1A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 80027e8:	bf00      	nop
  return status;
 80027ea:	68fb      	ldr	r3, [r7, #12]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	2000076c 	.word	0x2000076c
 80027f8:	2000076f 	.word	0x2000076f
 80027fc:	2000076d 	.word	0x2000076d

08002800 <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	75bb      	strb	r3, [r7, #22]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 800280a:	4b34      	ldr	r3, [pc, #208]	; (80028dc <_I2cFailRecover+0xdc>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 8002812:	2300      	movs	r3, #0
 8002814:	e05e      	b.n	80028d4 <_I2cFailRecover+0xd4>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	2002      	movs	r0, #2
 8002818:	f7ff fef7 	bl	800260a <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SCL_GPIO_PIN;
 800281c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002820:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002822:	2311      	movs	r3, #17
 8002824:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002826:	2301      	movs	r3, #1
 8002828:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 800282a:	463b      	mov	r3, r7
 800282c:	4619      	mov	r1, r3
 800282e:	482c      	ldr	r0, [pc, #176]	; (80028e0 <_I2cFailRecover+0xe0>)
 8002830:	f013 ffe4 	bl	80167fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SDA_GPIO_PIN;
 8002834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002838:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800283a:	2311      	movs	r3, #17
 800283c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800283e:	2301      	movs	r3, #1
 8002840:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002842:	463b      	mov	r3, r7
 8002844:	4619      	mov	r1, r3
 8002846:	4826      	ldr	r0, [pc, #152]	; (80028e0 <_I2cFailRecover+0xe0>)
 8002848:	f013 ffd8 	bl	80167fc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 800284c:	2201      	movs	r2, #1
 800284e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002852:	4823      	ldr	r0, [pc, #140]	; (80028e0 <_I2cFailRecover+0xe0>)
 8002854:	f014 fa38 	bl	8016cc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 8002858:	2201      	movs	r2, #1
 800285a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800285e:	4820      	ldr	r0, [pc, #128]	; (80028e0 <_I2cFailRecover+0xe0>)
 8002860:	f014 fa32 	bl	8016cc8 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8002864:	2300      	movs	r3, #0
 8002866:	75fb      	strb	r3, [r7, #23]
 8002868:	e014      	b.n	8002894 <_I2cFailRecover+0x94>
    {
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 800286a:	2200      	movs	r2, #0
 800286c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002870:	481b      	ldr	r0, [pc, #108]	; (80028e0 <_I2cFailRecover+0xe0>)
 8002872:	f014 fa29 	bl	8016cc8 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8002876:	2001      	movs	r0, #1
 8002878:	f013 febc 	bl	80165f4 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 800287c:	2201      	movs	r2, #1
 800287e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002882:	4817      	ldr	r0, [pc, #92]	; (80028e0 <_I2cFailRecover+0xe0>)
 8002884:	f014 fa20 	bl	8016cc8 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8002888:	2001      	movs	r0, #1
 800288a:	f013 feb3 	bl	80165f4 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	3301      	adds	r3, #1
 8002892:	75fb      	strb	r3, [r7, #23]
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	2b09      	cmp	r3, #9
 8002898:	d9e7      	bls.n	800286a <_I2cFailRecover+0x6a>
    }
    retry_cnt++;
 800289a:	7dbb      	ldrb	r3, [r7, #22]
 800289c:	3301      	adds	r3, #1
 800289e:	75bb      	strb	r3, [r7, #22]
  } while ((HAL_GPIO_ReadPin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 80028a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028a4:	480e      	ldr	r0, [pc, #56]	; (80028e0 <_I2cFailRecover+0xe0>)
 80028a6:	f014 f9f7 	bl	8016c98 <HAL_GPIO_ReadPin>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <_I2cFailRecover+0xb6>
 80028b0:	7dbb      	ldrb	r3, [r7, #22]
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d9d6      	bls.n	8002864 <_I2cFailRecover+0x64>

  if (HAL_GPIO_ReadPin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 80028b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028ba:	4809      	ldr	r0, [pc, #36]	; (80028e0 <_I2cFailRecover+0xe0>)
 80028bc:	f014 f9ec 	bl	8016c98 <HAL_GPIO_ReadPin>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d102      	bne.n	80028cc <_I2cFailRecover+0xcc>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 80028c6:	f06f 0304 	mvn.w	r3, #4
 80028ca:	e003      	b.n	80028d4 <_I2cFailRecover+0xd4>
  }

  is_already_init = 1U;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <_I2cFailRecover+0xdc>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20000770 	.word	0x20000770
 80028e0:	48000400 	.word	0x48000400

080028e4 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 80028ea:	2302      	movs	r3, #2
 80028ec:	4a0b      	ldr	r2, [pc, #44]	; (800291c <_ExpandersSetAllIO+0x38>)
 80028ee:	2112      	movs	r1, #18
 80028f0:	2086      	movs	r0, #134	; 0x86
 80028f2:	f000 f849 	bl	8002988 <_ExpanderWR>
 80028f6:	6078      	str	r0, [r7, #4]

  if (status)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d107      	bne.n	800290e <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 80028fe:	2302      	movs	r3, #2
 8002900:	4a07      	ldr	r2, [pc, #28]	; (8002920 <_ExpandersSetAllIO+0x3c>)
 8002902:	2112      	movs	r1, #18
 8002904:	2084      	movs	r0, #132	; 0x84
 8002906:	f000 f83f 	bl	8002988 <_ExpanderWR>
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	e000      	b.n	8002910 <_ExpandersSetAllIO+0x2c>
    goto done_err;
 800290e:	bf00      	nop

done_err:
  return status;
 8002910:	687b      	ldr	r3, [r7, #4]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	2000076c 	.word	0x2000076c
 8002920:	2000076e 	.word	0x2000076e

08002924 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	74fb      	strb	r3, [r7, #19]
  VL53L1A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	b299      	uxth	r1, r3
 800293c:	f107 0213 	add.w	r2, r7, #19
 8002940:	2364      	movs	r3, #100	; 0x64
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	2301      	movs	r3, #1
 8002946:	480f      	ldr	r0, [pc, #60]	; (8002984 <_ExpanderRd+0x60>)
 8002948:	f014 fa94 	bl	8016e74 <HAL_I2C_Master_Transmit>
 800294c:	4603      	mov	r3, r0
 800294e:	617b      	str	r3, [r7, #20]

    if (status)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d110      	bne.n	8002978 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L1A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	b299      	uxth	r1, r3
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b29a      	uxth	r2, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2064      	movs	r0, #100	; 0x64
 8002962:	fb00 f303 	mul.w	r3, r0, r3
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	4613      	mov	r3, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4805      	ldr	r0, [pc, #20]	; (8002984 <_ExpanderRd+0x60>)
 800296e:	f014 fb75 	bl	801705c <HAL_I2C_Master_Receive>
 8002972:	4603      	mov	r3, r0
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	e000      	b.n	800297a <_ExpanderRd+0x56>
      break;
 8002978:	bf00      	nop
  } while (0);

  VL53L1A2_PutI2cBus();

  return status;
 800297a:	697b      	ldr	r3, [r7, #20]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000384 	.word	0x20000384

08002988 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08c      	sub	sp, #48	; 0x30
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 800299c:	f107 0314 	add.w	r3, r7, #20
 80029a0:	3301      	adds	r3, #1
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f018 f942 	bl	801ac30 <memcpy>

  VL53L1A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	b299      	uxth	r1, r3
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3301      	adds	r3, #1
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	f107 0214 	add.w	r2, r7, #20
 80029bc:	2064      	movs	r0, #100	; 0x64
 80029be:	9000      	str	r0, [sp, #0]
 80029c0:	4804      	ldr	r0, [pc, #16]	; (80029d4 <_ExpanderWR+0x4c>)
 80029c2:	f014 fa57 	bl	8016e74 <HAL_I2C_Master_Transmit>
 80029c6:	4603      	mov	r3, r0
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L1A2_PutI2cBus();

  return status;
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3728      	adds	r7, #40	; 0x28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20000384 	.word	0x20000384

080029d8 <VL53L1A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d903      	bls.n	80029ee <VL53L1A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80029e6:	f06f 0301 	mvn.w	r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	e014      	b.n	8002a18 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L1A2_Init() != 0)
 80029ee:	f7ff fe25 	bl	800263c <VL53L1A2_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <VL53L1A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80029f8:	f06f 0303 	mvn.w	r3, #3
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	e00b      	b.n	8002a18 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 8002a00:	2101      	movs	r1, #1
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f8d4 	bl	8002bb0 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8002a08:	2100      	movs	r1, #0
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f8d0 	bl	8002bb0 <VL53L1A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L1CB_Probe(Instance);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f90d 	bl	8002c30 <VL53L1CB_Probe>
 8002a16:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002a18:	68fb      	ldr	r3, [r7, #12]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <VL53L1A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d903      	bls.n	8002a3c <VL53L1A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a34:	f06f 0301 	mvn.w	r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	e012      	b.n	8002a62 <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ReadID(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <VL53L1A2_RANGING_SENSOR_ReadID+0x48>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	490b      	ldr	r1, [pc, #44]	; (8002a70 <VL53L1A2_RANGING_SENSOR_ReadID+0x4c>)
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a4a:	6839      	ldr	r1, [r7, #0]
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4798      	blx	r3
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	da03      	bge.n	8002a5e <VL53L1A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a56:	f06f 0304 	mvn.w	r3, #4
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	e001      	b.n	8002a62 <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002a62:	68fb      	ldr	r3, [r7, #12]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000780 	.word	0x20000780
 8002a70:	20000774 	.word	0x20000774

08002a74 <VL53L1A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d903      	bls.n	8002a8c <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a84:	f06f 0301 	mvn.w	r3, #1
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	e012      	b.n	8002ab2 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x48>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	490b      	ldr	r1, [pc, #44]	; (8002ac0 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a9a:	6839      	ldr	r1, [r7, #0]
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4798      	blx	r3
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	da03      	bge.n	8002aae <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002aa6:	f06f 0304 	mvn.w	r3, #4
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	e001      	b.n	8002ab2 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000780 	.word	0x20000780
 8002ac0:	20000774 	.word	0x20000774

08002ac4 <VL53L1A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d903      	bls.n	8002adc <VL53L1A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ad4:	f06f 0301 	mvn.w	r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	e012      	b.n	8002b02 <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->GetDistance(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <VL53L1A2_RANGING_SENSOR_GetDistance+0x48>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	490b      	ldr	r1, [pc, #44]	; (8002b10 <VL53L1A2_RANGING_SENSOR_GetDistance+0x4c>)
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002aea:	6839      	ldr	r1, [r7, #0]
 8002aec:	4610      	mov	r0, r2
 8002aee:	4798      	blx	r3
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	da03      	bge.n	8002afe <VL53L1A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002af6:	f06f 0304 	mvn.w	r3, #4
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e001      	b.n	8002b02 <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002b02:	68fb      	ldr	r3, [r7, #12]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000780 	.word	0x20000780
 8002b10:	20000774 	.word	0x20000774

08002b14 <VL53L1A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d903      	bls.n	8002b2c <VL53L1A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002b24:	f06f 0301 	mvn.w	r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	e012      	b.n	8002b52 <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Start(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <VL53L1A2_RANGING_SENSOR_Start+0x48>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	490b      	ldr	r1, [pc, #44]	; (8002b60 <VL53L1A2_RANGING_SENSOR_Start+0x4c>)
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002b3a:	6839      	ldr	r1, [r7, #0]
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4798      	blx	r3
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	da03      	bge.n	8002b4e <VL53L1A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b46:	f06f 0304 	mvn.w	r3, #4
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	e001      	b.n	8002b52 <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002b52:	68fb      	ldr	r3, [r7, #12]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000780 	.word	0x20000780
 8002b60:	20000774 	.word	0x20000774

08002b64 <VL53L1A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d903      	bls.n	8002b7a <VL53L1A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002b72:	f06f 0301 	mvn.w	r3, #1
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	e011      	b.n	8002b9e <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Stop(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <VL53L1A2_RANGING_SENSOR_Stop+0x44>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	490a      	ldr	r1, [pc, #40]	; (8002bac <VL53L1A2_RANGING_SENSOR_Stop+0x48>)
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4798      	blx	r3
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	da03      	bge.n	8002b9a <VL53L1A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b92:	f06f 0304 	mvn.w	r3, #4
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	e001      	b.n	8002b9e <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000780 	.word	0x20000780
 8002bac:	20000774 	.word	0x20000774

08002bb0 <VL53L1A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d903      	bls.n	8002bc8 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002bc0:	f06f 0301 	mvn.w	r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	e02e      	b.n	8002c26 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d112      	bne.n	8002bf4 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 1) < 0)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fda7 	bl	8002728 <VL53L1A2_ResetId>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	da03      	bge.n	8002be8 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002be0:	f06f 0303 	mvn.w	r3, #3
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	e01e      	b.n	8002c26 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8002be8:	2002      	movs	r0, #2
 8002bea:	f013 fd03 	bl	80165f4 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	e018      	b.n	8002c26 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d112      	bne.n	8002c20 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 0) < 0)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fd91 	bl	8002728 <VL53L1A2_ResetId>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	da03      	bge.n	8002c14 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002c0c:	f06f 0303 	mvn.w	r3, #3
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	e008      	b.n	8002c26 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8002c14:	2002      	movs	r0, #2
 8002c16:	f013 fced 	bl	80165f4 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	e002      	b.n	8002c26 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002c20:	f06f 0301 	mvn.w	r3, #1
 8002c24:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002c26:	68fb      	ldr	r3, [r7, #12]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <VL53L1CB_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L1CB_Probe(uint32_t Instance)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	; 0x28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  VL53L1CB_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L1CB_Object_t   VL53L1CBObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L1CB_ADDRESS;
 8002c38:	2352      	movs	r3, #82	; 0x52
 8002c3a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L1A2_I2C_Init;
 8002c3c:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <VL53L1CB_Probe+0xf0>)
 8002c3e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L1A2_I2C_DeInit;
 8002c40:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <VL53L1CB_Probe+0xf4>)
 8002c42:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L1A2_I2C_WriteReg;
 8002c44:	4b38      	ldr	r3, [pc, #224]	; (8002d28 <VL53L1CB_Probe+0xf8>)
 8002c46:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L1A2_I2C_ReadReg;
 8002c48:	4b38      	ldr	r3, [pc, #224]	; (8002d2c <VL53L1CB_Probe+0xfc>)
 8002c4a:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L1A2_GetTick;
 8002c4c:	4b38      	ldr	r3, [pc, #224]	; (8002d30 <VL53L1CB_Probe+0x100>)
 8002c4e:	623b      	str	r3, [r7, #32]

  if (VL53L1CB_RegisterBusIO(&(VL53L1CBObj[Instance]), &IOCtx) != VL53L1CB_OK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f642 2290 	movw	r2, #10896	; 0x2a90
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	4a36      	ldr	r2, [pc, #216]	; (8002d34 <VL53L1CB_Probe+0x104>)
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f107 020c 	add.w	r2, r7, #12
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f013 f824 	bl	8015cb2 <VL53L1CB_RegisterBusIO>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <VL53L1CB_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c70:	f06f 0304 	mvn.w	r3, #4
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
 8002c76:	e04d      	b.n	8002d14 <VL53L1CB_Probe+0xe4>
  }
  else if (VL53L1CB_ReadID(&(VL53L1CBObj[Instance]), &id) != VL53L1CB_OK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f642 2290 	movw	r2, #10896	; 0x2a90
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	4a2c      	ldr	r2, [pc, #176]	; (8002d34 <VL53L1CB_Probe+0x104>)
 8002c84:	4413      	add	r3, r2
 8002c86:	f107 0208 	add.w	r2, r7, #8
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f013 f8cc 	bl	8015e2a <VL53L1CB_ReadID>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <VL53L1CB_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c98:	f06f 0304 	mvn.w	r3, #4
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9e:	e039      	b.n	8002d14 <VL53L1CB_Probe+0xe4>
  }
  else
  {
    if (id != VL53L1CB_ID)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f64e 22cc 	movw	r2, #60108	; 0xeacc
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d003      	beq.n	8002cb2 <VL53L1CB_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002caa:	f06f 0306 	mvn.w	r3, #6
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb0:	e030      	b.n	8002d14 <VL53L1CB_Probe+0xe4>
    }
    else
    {
      VL53L1A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L1CB_RANGING_SENSOR_Driver;
 8002cb2:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <VL53L1CB_Probe+0x108>)
 8002cb4:	4a21      	ldr	r2, [pc, #132]	; (8002d3c <VL53L1CB_Probe+0x10c>)
 8002cb6:	601a      	str	r2, [r3, #0]
      VL53L1A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L1CBObj[Instance]);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f642 2290 	movw	r2, #10896	; 0x2a90
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <VL53L1CB_Probe+0x104>)
 8002cc4:	441a      	add	r2, r3
 8002cc6:	491e      	ldr	r1, [pc, #120]	; (8002d40 <VL53L1CB_Probe+0x110>)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L1A2_RANGING_SENSOR_Drv->Init(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) != VL53L1CB_OK)
 8002cce:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <VL53L1CB_Probe+0x108>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	491a      	ldr	r1, [pc, #104]	; (8002d40 <VL53L1CB_Probe+0x110>)
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4798      	blx	r3
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <VL53L1CB_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002ce6:	f06f 0304 	mvn.w	r3, #4
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
 8002cec:	e012      	b.n	8002d14 <VL53L1CB_Probe+0xe4>
      }
      else if (VL53L1A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L1A2_RANGING_SENSOR_CompObj[Instance], &VL53L1A2_RANGING_SENSOR_Cap) != VL53L1CB_OK)
 8002cee:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <VL53L1CB_Probe+0x108>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4912      	ldr	r1, [pc, #72]	; (8002d40 <VL53L1CB_Probe+0x110>)
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002cfc:	4911      	ldr	r1, [pc, #68]	; (8002d44 <VL53L1CB_Probe+0x114>)
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4798      	blx	r3
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <VL53L1CB_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002d08:	f06f 0304 	mvn.w	r3, #4
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0e:	e001      	b.n	8002d14 <VL53L1CB_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3728      	adds	r7, #40	; 0x28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	08001df1 	.word	0x08001df1
 8002d24:	08001e6d 	.word	0x08001e6d
 8002d28:	08001ebd 	.word	0x08001ebd
 8002d2c:	08001f11 	.word	0x08001f11
 8002d30:	08001f65 	.word	0x08001f65
 8002d34:	20000798 	.word	0x20000798
 8002d38:	20000780 	.word	0x20000780
 8002d3c:	20000038 	.word	0x20000038
 8002d40:	20000774 	.word	0x20000774
 8002d44:	20000784 	.word	0x20000784

08002d48 <CheckValidRectRoi>:

}


static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8002d54:	793b      	ldrb	r3, [r7, #4]
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	d808      	bhi.n	8002d6c <CheckValidRectRoi+0x24>
 8002d5a:	797b      	ldrb	r3, [r7, #5]
 8002d5c:	2b0f      	cmp	r3, #15
 8002d5e:	d805      	bhi.n	8002d6c <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8002d60:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8002d62:	2b0f      	cmp	r3, #15
 8002d64:	d802      	bhi.n	8002d6c <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	2b0f      	cmp	r3, #15
 8002d6a:	d901      	bls.n	8002d70 <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002d6c:	23fc      	movs	r3, #252	; 0xfc
 8002d6e:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8002d70:	793a      	ldrb	r2, [r7, #4]
 8002d72:	79bb      	ldrb	r3, [r7, #6]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d803      	bhi.n	8002d80 <CheckValidRectRoi+0x38>
 8002d78:	797a      	ldrb	r2, [r7, #5]
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d201      	bcs.n	8002d84 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002d80:	23fc      	movs	r3, #252	; 0xfc
 8002d82:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <VL53L1_SetDeviceAddress>:




VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002da0:	2300      	movs	r3, #0
 8002da2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3318      	adds	r3, #24
 8002da8:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8002db0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	085b      	lsrs	r3, r3, #1
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	2101      	movs	r1, #1
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f012 fd7d 	bl	80158bc <VL53L1_WrByte>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	085b      	lsrs	r3, r3, #1
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8002dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8002df6:	2101      	movs	r1, #1
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f002 fc56 	bl	80056aa <VL53L1_data_init>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8002e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10b      	bne.n	8002e22 <VL53L1_DataInit+0x40>
		pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3318      	adds	r3, #24
 8002e0e:	60bb      	str	r3, [r7, #8]
		memset(&pdev->per_vcsel_cal_data, 0,
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8002e16:	3308      	adds	r3, #8
 8002e18:	220c      	movs	r2, #12
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f017 ff15 	bl	801ac4c <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53L1_ERROR_NONE)
 8002e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d105      	bne.n	8002e36 <VL53L1_DataInit+0x54>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002e36:	2300      	movs	r3, #0
 8002e38:	73bb      	strb	r3, [r7, #14]
 8002e3a:	e012      	b.n	8002e62 <VL53L1_DataInit+0x80>
		if (Status == VL53L1_ERROR_NONE)
 8002e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d112      	bne.n	8002e6a <VL53L1_DataInit+0x88>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8002e44:	7bbb      	ldrb	r3, [r7, #14]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	2201      	movs	r2, #1
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fc90 	bl	8003772 <VL53L1_SetLimitCheckEnable>
 8002e52:	4603      	mov	r3, r0
 8002e54:	461a      	mov	r2, r3
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002e5c:	7bbb      	ldrb	r3, [r7, #14]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	73bb      	strb	r3, [r7, #14]
 8002e62:	7bbb      	ldrb	r3, [r7, #14]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d9e9      	bls.n	8002e3c <VL53L1_DataInit+0x5a>
 8002e68:	e000      	b.n	8002e6c <VL53L1_DataInit+0x8a>
		else
			break;
 8002e6a:	bf00      	nop

	}


	if (Status == VL53L1_ERROR_NONE) {
 8002e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <VL53L1_DataInit+0x9e>
		Status = VL53L1_set_dmax_mode(Dev,
 8002e74:	2102      	movs	r1, #2
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f005 faef 	bl	800845a <VL53L1_set_dmax_mode>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	73fb      	strb	r3, [r7, #15]
				VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8002e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7bba      	ldrb	r2, [r7, #14]
 8002eac:	76da      	strb	r2, [r3, #27]

	Status = VL53L1_SetPresetMode(Dev,
 8002eae:	2101      	movs	r1, #1
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f947 	bl	8003144 <VL53L1_SetPresetMode>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_RANGING);
	VL53L1_SetDistanceMode(Dev,
 8002eba:	2102      	movs	r1, #2
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f98b 	bl	80031d8 <VL53L1_SetDistanceMode>
			VL53L1_DISTANCEMODE_MEDIUM);
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	VL53L1_SmudgeCorrectionEnable(Dev,
 8002ece:	2100      	movs	r1, #0
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f001 fe69 	bl	8004ba8 <VL53L1_SmudgeCorrectionEnable>
			VL53L1_SMUDGE_CORRECTION_NONE);

	LOG_FUNCTION_END(Status);
	return Status;
 8002ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8002eee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f011 ffa1 	bl	8014e3a <VL53L1_poll_for_boot_completion>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8002efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <ComputeDevicePresetMode>:

static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	; 0x24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	603a      	str	r2, [r7, #0]
 8002f12:	71fb      	strb	r3, [r7, #7]
 8002f14:	460b      	mov	r3, r1
 8002f16:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	77fb      	strb	r3, [r7, #31]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8002f1c:	4a48      	ldr	r2, [pc, #288]	; (8003040 <ComputeDevicePresetMode+0x138>)
 8002f1e:	f107 0318 	add.w	r3, r7, #24
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	4611      	mov	r1, r2
 8002f26:	8019      	strh	r1, [r3, #0]
 8002f28:	3302      	adds	r3, #2
 8002f2a:	0c12      	lsrs	r2, r2, #16
 8002f2c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes RangingModes[3] = {
 8002f2e:	4a45      	ldr	r2, [pc, #276]	; (8003044 <ComputeDevicePresetMode+0x13c>)
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	4611      	mov	r1, r2
 8002f38:	8019      	strh	r1, [r3, #0]
 8002f3a:	3302      	adds	r3, #2
 8002f3c:	0c12      	lsrs	r2, r2, #16
 8002f3e:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	VL53L1_DevicePresetModes ScanningModes[3] = {
 8002f40:	4a41      	ldr	r2, [pc, #260]	; (8003048 <ComputeDevicePresetMode+0x140>)
 8002f42:	f107 0310 	add.w	r3, r7, #16
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	4611      	mov	r1, r2
 8002f4a:	8019      	strh	r1, [r3, #0]
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	0c12      	lsrs	r2, r2, #16
 8002f50:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE};

	VL53L1_DevicePresetModes TimedModes[3] = {
 8002f52:	4a3e      	ldr	r2, [pc, #248]	; (800304c <ComputeDevicePresetMode+0x144>)
 8002f54:	f107 030c 	add.w	r3, r7, #12
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	8019      	strh	r1, [r3, #0]
 8002f5e:	3302      	adds	r3, #2
 8002f60:	0c12      	lsrs	r2, r2, #16
 8002f62:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8002f64:	4a3a      	ldr	r2, [pc, #232]	; (8003050 <ComputeDevicePresetMode+0x148>)
 8002f66:	f107 0308 	add.w	r3, r7, #8
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	8019      	strh	r1, [r3, #0]
 8002f70:	3302      	adds	r3, #2
 8002f72:	0c12      	lsrs	r2, r2, #16
 8002f74:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8002f7c:	79bb      	ldrb	r3, [r7, #6]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d002      	beq.n	8002f88 <ComputeDevicePresetMode+0x80>
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d003      	beq.n	8002f8e <ComputeDevicePresetMode+0x86>
 8002f86:	e005      	b.n	8002f94 <ComputeDevicePresetMode+0x8c>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	77bb      	strb	r3, [r7, #30]
		break;
 8002f8c:	e004      	b.n	8002f98 <ComputeDevicePresetMode+0x90>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	77bb      	strb	r3, [r7, #30]
		break;
 8002f92:	e001      	b.n	8002f98 <ComputeDevicePresetMode+0x90>
	default:
		DistIdx = 2;
 8002f94:	2302      	movs	r3, #2
 8002f96:	77bb      	strb	r3, [r7, #30]
	}

	switch (PresetMode) {
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d845      	bhi.n	800302c <ComputeDevicePresetMode+0x124>
 8002fa0:	a201      	add	r2, pc, #4	; (adr r2, 8002fa8 <ComputeDevicePresetMode+0xa0>)
 8002fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa6:	bf00      	nop
 8002fa8:	08002fdd 	.word	0x08002fdd
 8002fac:	08002fed 	.word	0x08002fed
 8002fb0:	08002ffd 	.word	0x08002ffd
 8002fb4:	08002fcd 	.word	0x08002fcd
 8002fb8:	0800302d 	.word	0x0800302d
 8002fbc:	0800302d 	.word	0x0800302d
 8002fc0:	0800301d 	.word	0x0800301d
 8002fc4:	0800300d 	.word	0x0800300d
 8002fc8:	08003025 	.word	0x08003025
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8002fcc:	7fbb      	ldrb	r3, [r7, #30]
 8002fce:	3320      	adds	r3, #32
 8002fd0:	443b      	add	r3, r7
 8002fd2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	701a      	strb	r2, [r3, #0]
		break;
 8002fda:	e029      	b.n	8003030 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_RANGING:
		*pDevicePresetMode = RangingModes[DistIdx];
 8002fdc:	7fbb      	ldrb	r3, [r7, #30]
 8002fde:	3320      	adds	r3, #32
 8002fe0:	443b      	add	r3, r7
 8002fe2:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	701a      	strb	r2, [r3, #0]
		break;
 8002fea:	e021      	b.n	8003030 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		*pDevicePresetMode = ScanningModes[DistIdx];
 8002fec:	7fbb      	ldrb	r3, [r7, #30]
 8002fee:	3320      	adds	r3, #32
 8002ff0:	443b      	add	r3, r7
 8002ff2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	701a      	strb	r2, [r3, #0]
		break;
 8002ffa:	e019      	b.n	8003030 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8002ffc:	7fbb      	ldrb	r3, [r7, #30]
 8002ffe:	3320      	adds	r3, #32
 8003000:	443b      	add	r3, r7
 8003002:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	701a      	strb	r2, [r3, #0]
		break;
 800300a:	e011      	b.n	8003030 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 800300c:	7fbb      	ldrb	r3, [r7, #30]
 800300e:	3320      	adds	r3, #32
 8003010:	443b      	add	r3, r7
 8003012:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	701a      	strb	r2, [r3, #0]
		break;
 800301a:	e009      	b.n	8003030 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_OLT:
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2211      	movs	r2, #17
 8003020:	701a      	strb	r2, [r3, #0]
		break;
 8003022:	e005      	b.n	8003030 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
		*pDevicePresetMode =
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2227      	movs	r2, #39	; 0x27
 8003028:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE;
		break;
 800302a:	e001      	b.n	8003030 <ComputeDevicePresetMode+0x128>

	default:

		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800302c:	23f8      	movs	r3, #248	; 0xf8
 800302e:	77fb      	strb	r3, [r7, #31]
	}

	return Status;
 8003030:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3724      	adds	r7, #36	; 0x24
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	0801dc50 	.word	0x0801dc50
 8003044:	0801dc54 	.word	0x0801dc54
 8003048:	0801dc58 	.word	0x0801dc58
 800304c:	0801dc5c 	.word	0x0801dc5c
 8003050:	0801dc60 	.word	0x0801dc60

08003054 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8003054:	b5b0      	push	{r4, r5, r7, lr}
 8003056:	b08e      	sub	sp, #56	; 0x38
 8003058:	af04      	add	r7, sp, #16
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	72fb      	strb	r3, [r7, #11]
 8003062:	4613      	mov	r3, r2
 8003064:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003066:	2300      	movs	r3, #0
 8003068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800307c:	7afb      	ldrb	r3, [r7, #11]
 800307e:	2b03      	cmp	r3, #3
 8003080:	d002      	beq.n	8003088 <SetPresetMode+0x34>
 8003082:	7afb      	ldrb	r3, [r7, #11]
 8003084:	2b08      	cmp	r3, #8
 8003086:	d103      	bne.n	8003090 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8003088:	2340      	movs	r3, #64	; 0x40
 800308a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800308e:	e002      	b.n	8003096 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8003090:	2320      	movs	r3, #32
 8003092:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8003096:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800309a:	7ab9      	ldrb	r1, [r7, #10]
 800309c:	7afb      	ldrb	r3, [r7, #11]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ff32 	bl	8002f08 <ComputeDevicePresetMode>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 80030aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d112      	bne.n	80030d8 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 80030b2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80030b6:	f107 001c 	add.w	r0, r7, #28
 80030ba:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80030be:	f107 0314 	add.w	r3, r7, #20
 80030c2:	9301      	str	r3, [sp, #4]
 80030c4:	f107 0318 	add.w	r3, r7, #24
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	4603      	mov	r3, r0
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f002 ffaf 	bl	8006030 <VL53L1_get_preset_mode_timing_cfg>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 80030d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d112      	bne.n	8003106 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 80030e0:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80030e4:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 80030e6:	69fd      	ldr	r5, [r7, #28]
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	9102      	str	r1, [sp, #8]
 80030f0:	9201      	str	r2, [sp, #4]
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	462b      	mov	r3, r5
 80030f6:	4622      	mov	r2, r4
 80030f8:	4601      	mov	r1, r0
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f003 f8ee 	bl	80062dc <VL53L1_set_preset_mode>
 8003100:	4603      	mov	r3, r0
 8003102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8003106:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003114:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8003116:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <SetPresetMode+0xd8>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003124:	461a      	mov	r2, r3
 8003126:	7afb      	ldrb	r3, [r7, #11]
 8003128:	f882 3a6c 	strb.w	r3, [r2, #2668]	; 0xa6c

	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	LOG_FUNCTION_END(Status);
	return Status;
 8003138:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800313c:	4618      	mov	r0, r3
 800313e:	3728      	adds	r7, #40	; 0x28
 8003140:	46bd      	mov	sp, r7
 8003142:	bdb0      	pop	{r4, r5, r7, pc}

08003144 <VL53L1_SetPresetMode>:


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003154:	2303      	movs	r3, #3
 8003156:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);


	Status = VL53L1_low_power_auto_data_init(Dev);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f00c f94a 	bl	800f3f2 <VL53L1_low_power_auto_data_init>
 800315e:	4603      	mov	r3, r0
 8003160:	73fb      	strb	r3, [r7, #15]

	if (PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE)
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	2b09      	cmp	r3, #9
 8003166:	d101      	bne.n	800316c <VL53L1_SetPresetMode+0x28>
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8003168:	2301      	movs	r3, #1
 800316a:	73bb      	strb	r3, [r7, #14]
	Status = SetPresetMode(Dev,
 800316c:	7bba      	ldrb	r2, [r7, #14]
 800316e:	78f9      	ldrb	r1, [r7, #3]
 8003170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ff6d 	bl	8003054 <SetPresetMode>
 800317a:	4603      	mov	r3, r0
 800317c:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800317e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d117      	bne.n	80031b6 <VL53L1_SetPresetMode+0x72>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	2b04      	cmp	r3, #4
 800318a:	d005      	beq.n	8003198 <VL53L1_SetPresetMode+0x54>
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	2b03      	cmp	r3, #3
 8003190:	d002      	beq.n	8003198 <VL53L1_SetPresetMode+0x54>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	2b08      	cmp	r3, #8
 8003196:	d107      	bne.n	80031a8 <VL53L1_SetPresetMode+0x64>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8003198:	f24a 0128 	movw	r1, #41000	; 0xa028
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f8a9 	bl	80032f4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80031a2:	4603      	mov	r3, r0
 80031a4:	73fb      	strb	r3, [r7, #15]
 80031a6:	e006      	b.n	80031b6 <VL53L1_SetPresetMode+0x72>
				Dev, 41000);
		else

			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80031a8:	f248 2135 	movw	r1, #33333	; 0x8235
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f8a1 	bl	80032f4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80031b2:	4603      	mov	r3, r0
 80031b4:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80031b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <VL53L1_SetPresetMode+0x88>

		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 80031be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fa68 	bl	8003698 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 80031c8:	4603      	mov	r3, r0
 80031ca:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80031cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b0a2      	sub	sp, #136	; 0x88
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t MmTimeoutUs = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t PhaseCalTimeoutUs = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	677b      	str	r3, [r7, #116]	; 0x74
	VL53L1_zone_config_t zone_config;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80031fc:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8003200:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86



	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 8003204:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003208:	2b09      	cmp	r3, #9
 800320a:	d105      	bne.n	8003218 <VL53L1_SetDistanceMode+0x40>
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d002      	beq.n	8003218 <VL53L1_SetDistanceMode+0x40>
		(DistanceMode != VL53L1_DISTANCEMODE_SHORT))
		return VL53L1_ERROR_INVALID_PARAMS;
 8003212:	f06f 0303 	mvn.w	r3, #3
 8003216:	e069      	b.n	80032ec <VL53L1_SetDistanceMode+0x114>
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d008      	beq.n	8003230 <VL53L1_SetDistanceMode+0x58>
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d005      	beq.n	8003230 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	2b03      	cmp	r3, #3
 8003228:	d002      	beq.n	8003230 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800322a:	f06f 0303 	mvn.w	r3, #3
 800322e:	e05d      	b.n	80032ec <VL53L1_SetDistanceMode+0x114>

	if (Status == VL53L1_ERROR_NONE)
 8003230:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8003234:	2b00      	cmp	r3, #0
 8003236:	d108      	bne.n	800324a <VL53L1_SetDistanceMode+0x72>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 8003238:	f107 0308 	add.w	r3, r7, #8
 800323c:	4619      	mov	r1, r3
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f002 fede 	bl	8006000 <VL53L1_get_zone_config>
 8003244:	4603      	mov	r3, r0
 8003246:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8003252:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10b      	bne.n	8003272 <VL53L1_SetDistanceMode+0x9a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800325a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800325e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003262:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f002 fd8a 	bl	8005d80 <VL53L1_get_timeouts_us>
 800326c:	4603      	mov	r3, r0
 800326e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8003272:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <VL53L1_SetDistanceMode+0xb8>
		Status = SetPresetMode(Dev,
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 8003280:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff fee5 	bl	8003054 <SetPresetMode>
 800328a:	4603      	mov	r3, r0
 800328c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8003290:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8003294:	2b00      	cmp	r3, #0
 8003296:	d106      	bne.n	80032a6 <VL53L1_SetDistanceMode+0xce>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800329e:	461a      	mov	r2, r3
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	f882 3a6e 	strb.w	r3, [r2, #2670]	; 0xa6e
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80032a6:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10f      	bne.n	80032ce <VL53L1_SetDistanceMode+0xf6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80032ae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80032b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80032b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f002 fd2a 	bl	8005d0e <VL53L1_set_timeouts_us>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 80032c0:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <VL53L1_SetDistanceMode+0xf6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 80032c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 80032ce:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d108      	bne.n	80032e8 <VL53L1_SetDistanceMode+0x110>
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 80032d6:	f107 0308 	add.w	r3, r7, #8
 80032da:	4619      	mov	r1, r3
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f002 fe4c 	bl	8005f7a <VL53L1_set_zone_config>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	LOG_FUNCTION_END(Status);
	return Status;
 80032e8:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3788      	adds	r7, #136	; 0x88
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08c      	sub	sp, #48	; 0x30
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80032fe:	2300      	movs	r3, #0
 8003300:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8003318:	4b75      	ldr	r3, [pc, #468]	; (80034f0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1fc>)
 800331a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	4a75      	ldr	r2, [pc, #468]	; (80034f4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x200>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d902      	bls.n	800332a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003324:	23fc      	movs	r3, #252	; 0xfc
 8003326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800332a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003332:	f107 031a 	add.w	r3, r7, #26
 8003336:	461a      	mov	r2, r3
 8003338:	2105      	movs	r1, #5
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fb9a 	bl	8003a74 <VL53L1_GetSequenceStepEnable>
 8003340:	4603      	mov	r3, r0
 8003342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003346:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800334e:	f107 0319 	add.w	r3, r7, #25
 8003352:	461a      	mov	r2, r3
 8003354:	2106      	movs	r1, #6
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fb8c 	bl	8003a74 <VL53L1_GetSequenceStepEnable>
 800335c:	4603      	mov	r3, r0
 800335e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8003362:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10b      	bne.n	8003382 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 800336a:	f107 0314 	add.w	r3, r7, #20
 800336e:	f107 0210 	add.w	r2, r7, #16
 8003372:	f107 010c 	add.w	r1, r7, #12
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f002 fd02 	bl	8005d80 <VL53L1_get_timeouts_us>
 800337c:	4603      	mov	r3, r0
 800337e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8003382:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003386:	2b00      	cmp	r3, #0
 8003388:	f040 80a0 	bne.w	80034cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
		PresetMode = VL53L1DevDataGet(Dev,
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003392:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8003396:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 800339c:	2301      	movs	r3, #1
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 80033a0:	7efb      	ldrb	r3, [r7, #27]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d861      	bhi.n	800346c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
 80033a8:	a201      	add	r2, pc, #4	; (adr r2, 80033b0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbc>)
 80033aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ae:	bf00      	nop
 80033b0:	08003455 	.word	0x08003455
 80033b4:	08003455 	.word	0x08003455
 80033b8:	080033f1 	.word	0x080033f1
 80033bc:	080033d5 	.word	0x080033d5
 80033c0:	0800346d 	.word	0x0800346d
 80033c4:	0800346d 	.word	0x0800346d
 80033c8:	08003461 	.word	0x08003461
 80033cc:	08003417 	.word	0x08003417
 80033d0:	08003455 	.word	0x08003455
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80033d4:	7ebb      	ldrb	r3, [r7, #26]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d002      	beq.n	80033e0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 80033da:	7e7b      	ldrb	r3, [r7, #25]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d103      	bne.n	80033e8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
				TimingGuard = 5000;
 80033e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80033e4:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 80033e6:	e044      	b.n	8003472 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
				TimingGuard = 1000;
 80033e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80033ee:	e040      	b.n	8003472 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80033f6:	7ebb      	ldrb	r3, [r7, #26]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d002      	beq.n	8003402 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10e>
 80033fc:	7e7b      	ldrb	r3, [r7, #25]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d103      	bne.n	800340a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x116>
				TimingGuard = 26600;
 8003402:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
 8003408:	e002      	b.n	8003410 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
			else
				TimingGuard = 21600;
 800340a:	f245 4360 	movw	r3, #21600	; 0x5460
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8003410:	2302      	movs	r3, #2
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8003414:	e02d      	b.n	8003472 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800341c:	23f5      	movs	r3, #245	; 0xf5
 800341e:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8003420:	f107 0308 	add.w	r3, r7, #8
 8003424:	461a      	mov	r2, r3
 8003426:	f248 0188 	movw	r1, #32904	; 0x8088
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f005 f88c 	bl	8008548 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	dd07      	ble.n	8003446 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x152>
				vhv += vhv_loops *
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	22f5      	movs	r2, #245	; 0xf5
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	461a      	mov	r2, r3
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	4413      	add	r3, r2
 8003444:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800344e:	2302      	movs	r3, #2
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8003452:	e00e      	b.n	8003472 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			TimingGuard = 1700;
 8003454:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8003458:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 6;
 800345a:	2306      	movs	r3, #6
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800345e:	e008      	b.n	8003472 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_OLT:
			TimingGuard = MmTimeoutUs + 5000;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003466:	3308      	adds	r3, #8
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800346a:	e002      	b.n	8003472 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800346c:	23f8      	movs	r3, #248	; 0xf8
 800346e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	429a      	cmp	r2, r3
 8003478:	d803      	bhi.n	8003482 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800347a:	23fc      	movs	r3, #252	; 0xfc
 800347c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003480:	e003      	b.n	800348a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003486:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8003488:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 800348a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800348e:	2b00      	cmp	r3, #0
 8003490:	d11c      	bne.n	80034cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	429a      	cmp	r2, r3
 8003498:	d203      	bcs.n	80034a2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ae>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800349a:	23fc      	movs	r3, #252	; 0xfc
 800349c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80034a0:	e00d      	b.n	80034be <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ca>
			else {
				TimingBudget /= divisor;
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034aa:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 80034ac:	68f9      	ldr	r1, [r7, #12]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f002 fc2b 	bl	8005d0e <VL53L1_set_timeouts_us>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 80034be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
				VL53L1DevDataSet(Dev,
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 80034cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d106      	bne.n	80034e2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ee>
		VL53L1DevDataSet(Dev,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80034da:	461a      	mov	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	f8c2 3a70 	str.w	r3, [r2, #2672]	; 0xa70
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80034e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3730      	adds	r7, #48	; 0x30
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	00086470 	.word	0x00086470
 80034f4:	00989680 	.word	0x00989680

080034f8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08c      	sub	sp, #48	; 0x30
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003502:	2300      	movs	r3, #0
 8003504:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8003526:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800352e:	f107 031b 	add.w	r3, r7, #27
 8003532:	461a      	mov	r2, r3
 8003534:	2105      	movs	r1, #5
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fa9c 	bl	8003a74 <VL53L1_GetSequenceStepEnable>
 800353c:	4603      	mov	r3, r0
 800353e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8003542:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003546:	2b00      	cmp	r3, #0
 8003548:	d109      	bne.n	800355e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800354a:	f107 031a 	add.w	r3, r7, #26
 800354e:	461a      	mov	r2, r3
 8003550:	2106      	movs	r1, #6
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fa8e 	bl	8003a74 <VL53L1_GetSequenceStepEnable>
 8003558:	4603      	mov	r3, r0
 800355a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800355e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10b      	bne.n	800357e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8003566:	f107 0310 	add.w	r3, r7, #16
 800356a:	f107 0214 	add.w	r2, r7, #20
 800356e:	f107 010c 	add.w	r1, r7, #12
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f002 fc04 	bl	8005d80 <VL53L1_get_timeouts_us>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800357e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003582:	2b00      	cmp	r3, #0
 8003584:	d179      	bne.n	800367a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800358c:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8003590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8003594:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003598:	3b01      	subs	r3, #1
 800359a:	2b08      	cmp	r3, #8
 800359c:	d869      	bhi.n	8003672 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x17a>
 800359e:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xac>)
 80035a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a4:	08003651 	.word	0x08003651
 80035a8:	08003651 	.word	0x08003651
 80035ac:	080035eb 	.word	0x080035eb
 80035b0:	080035c9 	.word	0x080035c9
 80035b4:	08003673 	.word	0x08003673
 80035b8:	08003673 	.word	0x08003673
 80035bc:	08003663 	.word	0x08003663
 80035c0:	08003613 	.word	0x08003613
 80035c4:	08003651 	.word	0x08003651
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80035c8:	7efb      	ldrb	r3, [r7, #27]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d002      	beq.n	80035d4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
 80035ce:	7ebb      	ldrb	r3, [r7, #26]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80035da:	3308      	adds	r3, #8
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 80035de:	e04d      	b.n	800367c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80035e8:	e048      	b.n	800367c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80035ea:	7efb      	ldrb	r3, [r7, #27]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d002      	beq.n	80035f6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xfe>
 80035f0:	7ebb      	ldrb	r3, [r7, #26]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d106      	bne.n	8003604 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x10c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 80035fc:	3334      	adds	r3, #52	; 0x34
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8003602:	e03b      	b.n	800367c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800360a:	3330      	adds	r3, #48	; 0x30
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003610:	e034      	b.n	800367c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8003612:	23f5      	movs	r3, #245	; 0xf5
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8003616:	f107 0308 	add.w	r3, r7, #8
 800361a:	461a      	mov	r2, r3
 800361c:	f248 0188 	movw	r1, #32904	; 0x8088
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f004 ff91 	bl	8008548 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	dd07      	ble.n	800363c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x144>
				vhv += vhv_loops *
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	22f5      	movs	r2, #245	; 0xf5
 8003630:	fb02 f303 	mul.w	r3, r2, r3
 8003634:	461a      	mov	r2, r3
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	4413      	add	r3, r2
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8003642:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800364e:	e015      	b.n	800367c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003660:	e00c      	b.n	800367c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_OLT:
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	4413      	add	r3, r2
 8003668:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800366c:	3308      	adds	r3, #8
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003670:	e004      	b.n	800367c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003672:	23f8      	movs	r3, #248	; 0xf8
 8003674:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003678:	e000      	b.n	800367c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		}
	}
 800367a:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 800367c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x192>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003688:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800368a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800368e:	4618      	mov	r0, r3
 8003690:	3730      	adds	r7, #48	; 0x30
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop

08003698 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");


	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	019b      	lsls	r3, r3, #6
 80036ae:	4a09      	ldr	r2, [pc, #36]	; (80036d4 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 80036b0:	fba2 2303 	umull	r2, r3, r2, r3
 80036b4:	099b      	lsrs	r3, r3, #6
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4413      	add	r3, r2
 80036ba:	60bb      	str	r3, [r7, #8]

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f002 facc 	bl	8005c5c <VL53L1_set_inter_measurement_period_ms>
 80036c4:	4603      	mov	r3, r0
 80036c6:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 80036c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	10624dd3 	.word	0x10624dd3

080036d8 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 80036e6:	f107 0308 	add.w	r3, r7, #8
 80036ea:	4619      	mov	r1, r3
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f002 fae3 	bl	8005cb8 <VL53L1_get_inter_measurement_period_ms>
 80036f2:	4603      	mov	r3, r0
 80036f4:	73fb      	strb	r3, [r7, #15]

	adjustedIMP -= (adjustedIMP * 64) / 1000;
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	019b      	lsls	r3, r3, #6
 80036fc:	4907      	ldr	r1, [pc, #28]	; (800371c <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 80036fe:	fba1 1303 	umull	r1, r3, r1, r3
 8003702:	099b      	lsrs	r3, r3, #6
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 800370e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	10624dd3 	.word	0x10624dd3

08003720 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	460b      	mov	r3, r1
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800372e:	2300      	movs	r3, #0
 8003730:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8003732:	897b      	ldrh	r3, [r7, #10]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <SetLimitValue+0x1e>
 8003738:	2b01      	cmp	r3, #1
 800373a:	d009      	beq.n	8003750 <SetLimitValue+0x30>
 800373c:	e011      	b.n	8003762 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	0b9b      	lsrs	r3, r3, #14
 8003742:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8003744:	8abb      	ldrh	r3, [r7, #20]
 8003746:	4619      	mov	r1, r3
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f003 f988 	bl	8006a5e <VL53L1_set_lite_sigma_threshold>
		break;
 800374e:	e00a      	b.n	8003766 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	0a5b      	lsrs	r3, r3, #9
 8003754:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8003756:	8abb      	ldrh	r3, [r7, #20]
 8003758:	4619      	mov	r1, r3
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f003 f9ad 	bl	8006aba <VL53L1_set_lite_min_count_rate>
		break;
 8003760:	e001      	b.n	8003766 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003762:	23fc      	movs	r3, #252	; 0xfc
 8003764:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003766:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	460b      	mov	r3, r1
 800377c:	807b      	strh	r3, [r7, #2]
 800377e:	4613      	mov	r3, r2
 8003780:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800378a:	887b      	ldrh	r3, [r7, #2]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d902      	bls.n	8003796 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003790:	23fc      	movs	r3, #252	; 0xfc
 8003792:	73fb      	strb	r3, [r7, #15]
 8003794:	e015      	b.n	80037c2 <VL53L1_SetLimitCheckEnable+0x50>
	} else {

		if (LimitCheckEnable == 0)
 8003796:	787b      	ldrb	r3, [r7, #1]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	e007      	b.n	80037b2 <VL53L1_SetLimitCheckEnable+0x40>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80037a2:	887b      	ldrh	r3, [r7, #2]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 80037b2:	887b      	ldrh	r3, [r7, #2]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	4619      	mov	r1, r3
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff ffb1 	bl	8003720 <SetLimitValue>
 80037be:	4603      	mov	r3, r0
 80037c0:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 80037c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10e      	bne.n	80037e8 <VL53L1_SetLimitCheckEnable+0x76>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80037ca:	787b      	ldrb	r3, [r7, #1]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf14      	ite	ne
 80037d0:	2301      	movne	r3, #1
 80037d2:	2300      	moveq	r3, #0
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	887b      	ldrh	r3, [r7, #2]
 80037d8:	4611      	mov	r1, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80037e2:	3334      	adds	r3, #52	; 0x34
 80037e4:	460a      	mov	r2, r1
 80037e6:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 80037e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	460b      	mov	r3, r1
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003802:	2300      	movs	r3, #0
 8003804:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003806:	897b      	ldrh	r3, [r7, #10]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d905      	bls.n	8003818 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800380c:	23fc      	movs	r3, #252	; 0xfc
 800380e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	e00a      	b.n	800382e <VL53L1_GetLimitCheckEnable+0x3a>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003818:	897b      	ldrh	r3, [r7, #10]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4413      	add	r3, r2
 800381e:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8003822:	3334      	adds	r3, #52	; 0x34
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	7dba      	ldrb	r2, [r7, #22]
 800382c:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800382e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003832:	4618      	mov	r0, r3
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b088      	sub	sp, #32
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	460b      	mov	r3, r1
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800384c:	2300      	movs	r3, #0
 800384e:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8003854:	897b      	ldrh	r3, [r7, #10]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <VL53L1_GetLimitCheckValue+0x22>
 800385a:	2b01      	cmp	r3, #1
 800385c:	d00c      	beq.n	8003878 <VL53L1_GetLimitCheckValue+0x3a>
 800385e:	e017      	b.n	8003890 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8003860:	f107 0314 	add.w	r3, r7, #20
 8003864:	4619      	mov	r1, r3
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f003 f8e2 	bl	8006a30 <VL53L1_get_lite_sigma_threshold>
 800386c:	4603      	mov	r3, r0
 800386e:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8003870:	8abb      	ldrh	r3, [r7, #20]
 8003872:	039b      	lsls	r3, r3, #14
 8003874:	61bb      	str	r3, [r7, #24]
		break;
 8003876:	e00d      	b.n	8003894 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8003878:	f107 0316 	add.w	r3, r7, #22
 800387c:	4619      	mov	r1, r3
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f003 f904 	bl	8006a8c <VL53L1_get_lite_min_count_rate>
 8003884:	4603      	mov	r3, r0
 8003886:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8003888:	8afb      	ldrh	r3, [r7, #22]
 800388a:	025b      	lsls	r3, r3, #9
 800388c:	61bb      	str	r3, [r7, #24]
		break;
 800388e:	e001      	b.n	8003894 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003890:	23fc      	movs	r3, #252	; 0xfc
 8003892:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003894:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d129      	bne.n	80038f0 <VL53L1_GetLimitCheckValue+0xb2>

		if (TempFix1616 == 0) {
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d113      	bne.n	80038ca <VL53L1_GetLimitCheckValue+0x8c>

			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 80038a2:	897b      	ldrh	r3, [r7, #10]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80038b8:	897b      	ldrh	r3, [r7, #10]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80038c2:	3334      	adds	r3, #52	; 0x34
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
 80038c8:	e012      	b.n	80038f0 <VL53L1_GetLimitCheckValue+0xb2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80038d0:	897b      	ldrh	r3, [r7, #10]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80038e0:	897b      	ldrh	r3, [r7, #10]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80038ea:	3334      	adds	r3, #52	; 0x34
 80038ec:	2201      	movs	r2, #1
 80038ee:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 80038f0:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3720      	adds	r7, #32
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <VL53L1_SetROI>:
	return Status;
}

VL53L1_Error VL53L1_SetROI(VL53L1_DEV Dev,
		VL53L1_RoiConfig_t *pRoiConfig)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b0a0      	sub	sp, #128	; 0x80
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003906:	2300      	movs	r3, #0
 8003908:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	VL53L1_PresetModes PresetMode;
	uint8_t MaxNumberOfROI = 1;
 800390c:	2301      	movs	r3, #1
 800390e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t  width, height;

	LOG_FUNCTION_START("");


	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003918:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 800391c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c


	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 8003920:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8003924:	2b02      	cmp	r3, #2
 8003926:	d102      	bne.n	800392e <VL53L1_SetROI+0x32>
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 8003928:	2310      	movs	r3, #16
 800392a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8003936:	429a      	cmp	r2, r3
 8003938:	d303      	bcc.n	8003942 <VL53L1_SetROI+0x46>
			(pRoiConfig->NumberOfRoi < 1))
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	781b      	ldrb	r3, [r3, #0]
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <VL53L1_SetROI+0x4c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003942:	23fc      	movs	r3, #252	; 0xfc
 8003944:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (Status == VL53L1_ERROR_NONE) {
 8003948:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 800394c:	2b00      	cmp	r3, #0
 800394e:	d17e      	bne.n	8003a4e <VL53L1_SetROI+0x152>


		zone_cfg.max_zones = MaxNumberOfROI;
 8003950:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003954:	733b      	strb	r3, [r7, #12]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	3b01      	subs	r3, #1
 800395c:	b2db      	uxtb	r3, r3
 800395e:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8003960:	2300      	movs	r3, #0
 8003962:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8003966:	e06a      	b.n	8003a3e <VL53L1_SetROI+0x142>
			CurrROI = pRoiConfig->UserRois[i];
 8003968:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	f107 0208 	add.w	r2, r7, #8
 8003976:	3301      	adds	r3, #1
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	6010      	str	r0, [r2, #0]

			Status = CheckValidRectRoi(CurrROI);
 800397c:	68b8      	ldr	r0, [r7, #8]
 800397e:	f7ff f9e3 	bl	8002d48 <CheckValidRectRoi>
 8003982:	4603      	mov	r3, r0
 8003984:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (Status != VL53L1_ERROR_NONE)
 8003988:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 800398c:	2b00      	cmp	r3, #0
 800398e:	d15d      	bne.n	8003a4c <VL53L1_SetROI+0x150>
				break;

			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 8003990:	7abb      	ldrb	r3, [r7, #10]
 8003992:	461a      	mov	r2, r3
 8003994:	7a3b      	ldrb	r3, [r7, #8]
 8003996:	4413      	add	r3, r2
 8003998:	3301      	adds	r3, #1
					/ 2;
 800399a:	0fda      	lsrs	r2, r3, #31
 800399c:	4413      	add	r3, r2
 800399e:	105b      	asrs	r3, r3, #1
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 80039a0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 80039a4:	7a7b      	ldrb	r3, [r7, #9]
 80039a6:	461a      	mov	r2, r3
 80039a8:	7afb      	ldrb	r3, [r7, #11]
 80039aa:	4413      	add	r3, r2
 80039ac:	3301      	adds	r3, #1
					/ 2;
 80039ae:	0fda      	lsrs	r2, r3, #31
 80039b0:	4413      	add	r3, r2
 80039b2:	105b      	asrs	r3, r3, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 80039b4:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 80039b8:	7aba      	ldrb	r2, [r7, #10]
 80039ba:	7a3b      	ldrb	r3, [r7, #8]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 80039c2:	7a7a      	ldrb	r2, [r7, #9]
 80039c4:	7afb      	ldrb	r3, [r7, #11]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			if ((width < 3) || (height < 3)) {
 80039cc:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d903      	bls.n	80039dc <VL53L1_SetROI+0xe0>
 80039d4:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d803      	bhi.n	80039e4 <VL53L1_SetROI+0xe8>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 80039dc:	23fc      	movs	r3, #252	; 0xfc
 80039de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 80039e2:	e034      	b.n	8003a4e <VL53L1_SetROI+0x152>
			}
			zone_cfg.user_zones[i].x_centre = x_centre;
 80039e4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80039e8:	3306      	adds	r3, #6
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	3380      	adds	r3, #128	; 0x80
 80039ee:	443b      	add	r3, r7
 80039f0:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 80039f4:	f803 2c70 	strb.w	r2, [r3, #-112]
			zone_cfg.user_zones[i].y_centre = y_centre;
 80039f8:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80039fc:	3306      	adds	r3, #6
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	3380      	adds	r3, #128	; 0x80
 8003a02:	443b      	add	r3, r7
 8003a04:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8003a08:	f803 2c6f 	strb.w	r2, [r3, #-111]
			zone_cfg.user_zones[i].width = width;
 8003a0c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8003a10:	3306      	adds	r3, #6
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	3380      	adds	r3, #128	; 0x80
 8003a16:	443b      	add	r3, r7
 8003a18:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 8003a1c:	f803 2c6e 	strb.w	r2, [r3, #-110]
			zone_cfg.user_zones[i].height = height;
 8003a20:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8003a24:	3306      	adds	r3, #6
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	3380      	adds	r3, #128	; 0x80
 8003a2a:	443b      	add	r3, r7
 8003a2c:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8003a30:	f803 2c6d 	strb.w	r2, [r3, #-109]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8003a34:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8003a38:	3301      	adds	r3, #1
 8003a3a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d38e      	bcc.n	8003968 <VL53L1_SetROI+0x6c>
 8003a4a:	e000      	b.n	8003a4e <VL53L1_SetROI+0x152>
				break;
 8003a4c:	bf00      	nop
		}
	}

	if (Status == VL53L1_ERROR_NONE)
 8003a4e:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <VL53L1_SetROI+0x16c>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 8003a56:	f107 030c 	add.w	r3, r7, #12
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f002 fa8c 	bl	8005f7a <VL53L1_set_zone_config>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	LOG_FUNCTION_END(Status);
	return Status;
 8003a68:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3780      	adds	r7, #128	; 0x80
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8003a86:	7afb      	ldrb	r3, [r7, #11]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f002 f9e3 	bl	8005e58 <VL53L1_get_sequence_config_bit>
 8003a92:	4603      	mov	r3, r0
 8003a94:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8003a96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <VL53L1_StartMeasurement>:




VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	77fb      	strb	r3, [r7, #31]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;
	uint8_t i;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3318      	adds	r3, #24
 8003ab4:	61bb      	str	r3, [r7, #24]


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	7edb      	ldrb	r3, [r3, #27]
 8003aba:	75fb      	strb	r3, [r7, #23]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
 8003abe:	2b40      	cmp	r3, #64	; 0x40
 8003ac0:	d002      	beq.n	8003ac8 <VL53L1_StartMeasurement+0x24>
		VL53L1_load_patch(Dev);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f001 fc8e 	bl	80053e4 <VL53L1_load_patch>
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8003ac8:	2300      	movs	r3, #0
 8003aca:	77bb      	strb	r3, [r7, #30]
 8003acc:	e01a      	b.n	8003b04 <VL53L1_StartMeasurement+0x60>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8003ace:	7fbb      	ldrb	r3, [r7, #30]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003ad6:	330c      	adds	r3, #12
 8003ad8:	2100      	movs	r1, #0
 8003ada:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8003ade:	7fbb      	ldrb	r3, [r7, #30]
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003ae8:	3320      	adds	r3, #32
 8003aea:	22ff      	movs	r2, #255	; 0xff
 8003aec:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8003aee:	7fbb      	ldrb	r3, [r7, #30]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003af8:	3324      	adds	r3, #36	; 0x24
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8003afe:	7fbb      	ldrb	r3, [r7, #30]
 8003b00:	3301      	adds	r3, #1
 8003b02:	77bb      	strb	r3, [r7, #30]
 8003b04:	7fbb      	ldrb	r3, [r7, #30]
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d9e1      	bls.n	8003ace <VL53L1_StartMeasurement+0x2a>
	}
	pdev->PreviousStreamCount = 0;
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	pdev->PreviousRangeActiveResults = 0;
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b28:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 8003b2c:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 8003b2e:	7dbb      	ldrb	r3, [r7, #22]
 8003b30:	2b63      	cmp	r3, #99	; 0x63
 8003b32:	dc12      	bgt.n	8003b5a <VL53L1_StartMeasurement+0xb6>
 8003b34:	2b62      	cmp	r3, #98	; 0x62
 8003b36:	da0d      	bge.n	8003b54 <VL53L1_StartMeasurement+0xb0>
 8003b38:	2b05      	cmp	r3, #5
 8003b3a:	dc0e      	bgt.n	8003b5a <VL53L1_StartMeasurement+0xb6>
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	da09      	bge.n	8003b54 <VL53L1_StartMeasurement+0xb0>
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	dc02      	bgt.n	8003b4a <VL53L1_StartMeasurement+0xa6>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	da05      	bge.n	8003b54 <VL53L1_StartMeasurement+0xb0>
 8003b48:	e007      	b.n	8003b5a <VL53L1_StartMeasurement+0xb6>
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d105      	bne.n	8003b5a <VL53L1_StartMeasurement+0xb6>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	77fb      	strb	r3, [r7, #31]
		break;
 8003b52:	e004      	b.n	8003b5e <VL53L1_StartMeasurement+0xba>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8003b54:	23f2      	movs	r3, #242	; 0xf2
 8003b56:	77fb      	strb	r3, [r7, #31]
		break;
 8003b58:	e001      	b.n	8003b5e <VL53L1_StartMeasurement+0xba>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8003b5a:	23fd      	movs	r3, #253	; 0xfd
 8003b5c:	77fb      	strb	r3, [r7, #31]
	}


	if ((Status == VL53L1_ERROR_NONE) &&
 8003b5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d11f      	bne.n	8003ba6 <VL53L1_StartMeasurement+0x102>
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
 8003b68:	2b40      	cmp	r3, #64	; 0x40
 8003b6a:	d11c      	bne.n	8003ba6 <VL53L1_StartMeasurement+0x102>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003b6c:	f107 0310 	add.w	r3, r7, #16
 8003b70:	4619      	mov	r1, r3
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff fcc0 	bl	80034f8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	757b      	strb	r3, [r7, #21]
				&MTBus);

		MTBus /= 1000;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	4a18      	ldr	r2, [pc, #96]	; (8003be0 <VL53L1_StartMeasurement+0x13c>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	099b      	lsrs	r3, r3, #6
 8003b86:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003b88:	f107 030c 	add.w	r3, r7, #12
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff fda2 	bl	80036d8 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8003b94:	4603      	mov	r3, r0
 8003b96:	757b      	strb	r3, [r7, #21]
				&IMPms);

		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1d1a      	adds	r2, r3, #4
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d901      	bls.n	8003ba6 <VL53L1_StartMeasurement+0x102>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8003ba2:	23fc      	movs	r3, #252	; 0xfc
 8003ba4:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE)
 8003ba6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d107      	bne.n	8003bbe <VL53L1_StartMeasurement+0x11a>
		Status = VL53L1_init_and_start_range(
 8003bae:	7dfb      	ldrb	r3, [r7, #23]
 8003bb0:	2206      	movs	r2, #6
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f002 ff97 	bl	8006ae8 <VL53L1_init_and_start_range>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	77fb      	strb	r3, [r7, #31]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);


	if (Status == VL53L1_ERROR_NONE)
 8003bbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d105      	bne.n	8003bd2 <VL53L1_StartMeasurement+0x12e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003bcc:	2204      	movs	r2, #4
 8003bce:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	LOG_FUNCTION_END(Status);
	return Status;
 8003bd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	10624dd3 	.word	0x10624dd3

08003be4 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f003 fa47 	bl	8007084 <VL53L1_stop_range>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	73fb      	strb	r3, [r7, #15]
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	7edb      	ldrb	r3, [r3, #27]
 8003bfe:	73bb      	strb	r3, [r7, #14]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8003c00:	7bbb      	ldrb	r3, [r7, #14]
 8003c02:	2b40      	cmp	r3, #64	; 0x40
 8003c04:	d002      	beq.n	8003c0c <VL53L1_StopMeasurement+0x28>
		VL53L1_unload_patch(Dev);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f001 fd1a 	bl	8005640 <VL53L1_unload_patch>

	if (Status == VL53L1_ERROR_NONE)
 8003c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d105      	bne.n	8003c20 <VL53L1_StopMeasurement+0x3c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	LOG_FUNCTION_END(Status);
	return Status;
 8003c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003c34:	2300      	movs	r3, #0
 8003c36:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	7edb      	ldrb	r3, [r3, #27]
 8003c3c:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8003c3e:	7bbb      	ldrb	r3, [r7, #14]
 8003c40:	4619      	mov	r1, r3
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f003 ff4b 	bl	8007ade <VL53L1_clear_interrupt_and_enable_next_range>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8003c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8003c66:	6839      	ldr	r1, [r7, #0]
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f011 f8ac 	bl	8014dc6 <VL53L1_is_new_data_ready>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8003c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <GenNewPresetMode>:
}

static void GenNewPresetMode(int16_t RefRange,
		VL53L1_DistanceModes InternalDistanceMode,
		VL53L1_DistanceModes *pNewDistanceMode)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	4603      	mov	r3, r0
 8003c86:	603a      	str	r2, [r7, #0]
 8003c88:	80fb      	strh	r3, [r7, #6]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	717b      	strb	r3, [r7, #5]
	uint16_t HRLI = 600;
 8003c8e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8003c92:	81fb      	strh	r3, [r7, #14]
	uint16_t HRLH = 700;
 8003c94:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8003c98:	81bb      	strh	r3, [r7, #12]
	uint16_t MRLI = 1400;
 8003c9a:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8003c9e:	817b      	strh	r3, [r7, #10]
	uint16_t MRLH = 1500;
 8003ca0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003ca4:	813b      	strh	r3, [r7, #8]

	switch (InternalDistanceMode) {
 8003ca6:	797b      	ldrb	r3, [r7, #5]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d002      	beq.n	8003cb2 <GenNewPresetMode+0x34>
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d012      	beq.n	8003cd6 <GenNewPresetMode+0x58>
 8003cb0:	e023      	b.n	8003cfa <GenNewPresetMode+0x7c>
	case VL53L1_DISTANCEMODE_SHORT:

		if (RefRange > MRLH)
 8003cb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cb6:	893b      	ldrh	r3, [r7, #8]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	dd03      	ble.n	8003cc4 <GenNewPresetMode+0x46>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	701a      	strb	r2, [r3, #0]
		else if (RefRange > HRLH)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8003cc2:	e02c      	b.n	8003d1e <GenNewPresetMode+0xa0>
		else if (RefRange > HRLH)
 8003cc4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cc8:	89bb      	ldrh	r3, [r7, #12]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	dd27      	ble.n	8003d1e <GenNewPresetMode+0xa0>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	701a      	strb	r2, [r3, #0]
		break;
 8003cd4:	e023      	b.n	8003d1e <GenNewPresetMode+0xa0>
	case VL53L1_DISTANCEMODE_MEDIUM:

		if (RefRange > MRLH)
 8003cd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cda:	893b      	ldrh	r3, [r7, #8]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	dd03      	ble.n	8003ce8 <GenNewPresetMode+0x6a>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	701a      	strb	r2, [r3, #0]
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
 8003ce6:	e01c      	b.n	8003d22 <GenNewPresetMode+0xa4>
		else if (RefRange < HRLI)
 8003ce8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cec:	89fb      	ldrh	r3, [r7, #14]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	da17      	bge.n	8003d22 <GenNewPresetMode+0xa4>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
		break;
 8003cf8:	e013      	b.n	8003d22 <GenNewPresetMode+0xa4>
	default:

		if (RefRange < HRLI)
 8003cfa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cfe:	89fb      	ldrh	r3, [r7, #14]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	da03      	bge.n	8003d0c <GenNewPresetMode+0x8e>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2201      	movs	r2, #1
 8003d08:	701a      	strb	r2, [r3, #0]
		else if (RefRange < MRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8003d0a:	e00c      	b.n	8003d26 <GenNewPresetMode+0xa8>
		else if (RefRange < MRLI)
 8003d0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d10:	897b      	ldrh	r3, [r7, #10]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	da07      	bge.n	8003d26 <GenNewPresetMode+0xa8>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2202      	movs	r2, #2
 8003d1a:	701a      	strb	r2, [r3, #0]
		break;
 8003d1c:	e003      	b.n	8003d26 <GenNewPresetMode+0xa8>
		break;
 8003d1e:	bf00      	nop
 8003d20:	e002      	b.n	8003d28 <GenNewPresetMode+0xaa>
		break;
 8003d22:	bf00      	nop
 8003d24:	e000      	b.n	8003d28 <GenNewPresetMode+0xaa>
		break;
 8003d26:	bf00      	nop
	}
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <CheckAndChangeDistanceMode>:
static void CheckAndChangeDistanceMode(VL53L1_DEV Dev,
		VL53L1_TargetRangeData_t *pRangeData,
		int16_t Ambient100DmaxMm,
		VL53L1_DistanceModes *pNewDistanceMode
)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	80fb      	strh	r3, [r7, #6]
	VL53L1_DistanceModes DistanceMode;
	uint8_t RangeStatus = pRangeData->RangeStatus;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	7ddb      	ldrb	r3, [r3, #23]
 8003d48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DmaxValid;
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 8003d4c:	4b28      	ldr	r3, [pc, #160]	; (8003df0 <CheckAndChangeDistanceMode+0xbc>)
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	623b      	str	r3, [r7, #32]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3318      	adds	r3, #24
 8003d56:	61fb      	str	r3, [r7, #28]
	int32_t  tmpint32;


	switch (RangeStatus) {
 8003d58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d5c:	2bff      	cmp	r3, #255	; 0xff
 8003d5e:	d042      	beq.n	8003de6 <CheckAndChangeDistanceMode+0xb2>
 8003d60:	2bff      	cmp	r3, #255	; 0xff
 8003d62:	dc07      	bgt.n	8003d74 <CheckAndChangeDistanceMode+0x40>
 8003d64:	2b07      	cmp	r3, #7
 8003d66:	dc02      	bgt.n	8003d6e <CheckAndChangeDistanceMode+0x3a>
 8003d68:	2b06      	cmp	r3, #6
 8003d6a:	da3c      	bge.n	8003de6 <CheckAndChangeDistanceMode+0xb2>
	case VL53L1_RANGESTATUS_SYNCRONISATION_INT:
	case VL53L1_RANGESTATUS_NONE:
		return;
	default:

		break;
 8003d6c:	e002      	b.n	8003d74 <CheckAndChangeDistanceMode+0x40>
 8003d6e:	3b0a      	subs	r3, #10
	switch (RangeStatus) {
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d938      	bls.n	8003de6 <CheckAndChangeDistanceMode+0xb2>
		break;
 8003d74:	bf00      	nop
	}

	DmaxValid = 1;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tmpint32 = pdev->hist_data.VL53L1_p_004;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8003d82:	61bb      	str	r3, [r7, #24]
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	db03      	blt.n	8003d94 <CheckAndChangeDistanceMode+0x60>
 8003d8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d102      	bne.n	8003d9a <CheckAndChangeDistanceMode+0x66>
		DmaxValid = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	DistanceMode = VL53L1DevDataGet(Dev,
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003da0:	f893 3a6e 	ldrb.w	r3, [r3, #2670]	; 0xa6e
 8003da4:	75fb      	strb	r3, [r7, #23]
			CurrentParameters.DistanceMode);

	*pNewDistanceMode = DistanceMode;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	7dfa      	ldrb	r2, [r7, #23]
 8003daa:	701a      	strb	r2, [r3, #0]

	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8003dac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d108      	bne.n	8003dc6 <CheckAndChangeDistanceMode+0x92>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003dba:	7df9      	ldrb	r1, [r7, #23]
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff ff5d 	bl	8003c7e <GenNewPresetMode>
 8003dc4:	e010      	b.n	8003de8 <CheckAndChangeDistanceMode+0xb4>
				DistanceMode, pNewDistanceMode);
	else {
		if (DmaxValid)
 8003dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <CheckAndChangeDistanceMode+0xaa>
			GenNewPresetMode(Ambient100DmaxMm,
 8003dce:	7df9      	ldrb	r1, [r7, #23]
 8003dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff ff51 	bl	8003c7e <GenNewPresetMode>
 8003ddc:	e004      	b.n	8003de8 <CheckAndChangeDistanceMode+0xb4>
					DistanceMode, pNewDistanceMode);
		else
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2203      	movs	r2, #3
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	e000      	b.n	8003de8 <CheckAndChangeDistanceMode+0xb4>
		return;
 8003de6:	bf00      	nop
	}
}
 8003de8:	3728      	adds	r7, #40	; 0x28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	2000000c 	.word	0x2000000c

08003df4 <ComputeRQL>:

static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b08d      	sub	sp, #52	; 0x34
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	603a      	str	r2, [r7, #0]
 8003dfe:	71fb      	strb	r3, [r7, #7]
 8003e00:	460b      	mov	r3, r1
 8003e02:	71bb      	strb	r3, [r7, #6]
	int16_t T_Wide = 150;
 8003e04:	2396      	movs	r3, #150	; 0x96
 8003e06:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t SRL = 300;
 8003e08:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003e0c:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t SRAS = 30;
 8003e0e:	231e      	movs	r3, #30
 8003e10:	843b      	strh	r3, [r7, #32]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587;
 8003e12:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <ComputeRQL+0x104>)
 8003e14:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157;
 8003e16:	4b39      	ldr	r3, [pc, #228]	; (8003efc <ComputeRQL+0x108>)
 8003e18:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;
 8003e1a:	f641 139a 	movw	r3, #6554	; 0x199a
 8003e1e:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d103      	bne.n	8003e2e <ComputeRQL+0x3a>
		returnvalue = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e2c:	e05b      	b.n	8003ee6 <ComputeRQL+0xf2>
	else if (((presults_data->max_range_mm -
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8003e34:	461a      	mov	r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
	else if (((presults_data->max_range_mm -
 8003e3c:	1ad2      	subs	r2, r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8003e3e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	else if (((presults_data->max_range_mm -
 8003e42:	429a      	cmp	r2, r3
 8003e44:	da02      	bge.n	8003e4c <ComputeRQL+0x58>
			presults_data->min_range_mm) >= T_Wide) ||
 8003e46:	79bb      	ldrb	r3, [r7, #6]
 8003e48:	2b07      	cmp	r3, #7
 8003e4a:	d103      	bne.n	8003e54 <ComputeRQL+0x60>
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
 8003e4c:	2332      	movs	r3, #50	; 0x32
 8003e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e52:	e048      	b.n	8003ee6 <ComputeRQL+0xf2>
	else {
		if (presults_data->median_range_mm < SRL)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8003e5a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	dd03      	ble.n	8003e6a <ComputeRQL+0x76>
			RAS = SRAS * 65536;
 8003e62:	8c3b      	ldrh	r3, [r7, #32]
 8003e64:	041b      	lsls	r3, r3, #16
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e68:	e007      	b.n	8003e7a <ComputeRQL+0x86>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8003e70:	461a      	mov	r2, r3
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	fb02 f303 	mul.w	r3, r2, r3
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c


		if (RAS != 0) {
 8003e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d020      	beq.n	8003ec2 <ComputeRQL+0xce>
			partial = (GGm * presults_data->VL53L1_p_005);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003e84:	461a      	mov	r2, r3
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	fb02 f303 	mul.w	r3, r2, r3
 8003e8c:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8003e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4413      	add	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d804      	bhi.n	8003eba <ComputeRQL+0xc6>
				SRQL = GI - partial;
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eb8:	e006      	b.n	8003ec8 <ComputeRQL+0xd4>
			else
				SRQL = 50 * 65536;
 8003eba:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8003ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ec0:	e002      	b.n	8003ec8 <ComputeRQL+0xd4>
		} else
			SRQL = 100 * 65536;
 8003ec2:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8003ec6:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	0c1b      	lsrs	r3, r3, #16
 8003ecc:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	2b32      	cmp	r3, #50	; 0x32
 8003ed2:	d905      	bls.n	8003ee0 <ComputeRQL+0xec>
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	2b64      	cmp	r3, #100	; 0x64
 8003ed8:	bf28      	it	cs
 8003eda:	2364      	movcs	r3, #100	; 0x64
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	e000      	b.n	8003ee2 <ComputeRQL+0xee>
 8003ee0:	2332      	movs	r3, #50	; 0x32
 8003ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8003ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3734      	adds	r7, #52	; 0x34
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	0075b333 	.word	0x0075b333
 8003efc:	0030cccd 	.word	0x0030cccd

08003f00 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	3b04      	subs	r3, #4
 8003f0e:	2b0f      	cmp	r3, #15
 8003f10:	d83d      	bhi.n	8003f8e <ConvertStatusLite+0x8e>
 8003f12:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <ConvertStatusLite+0x18>)
 8003f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f18:	08003f6b 	.word	0x08003f6b
 8003f1c:	08003f65 	.word	0x08003f65
 8003f20:	08003f71 	.word	0x08003f71
 8003f24:	08003f77 	.word	0x08003f77
 8003f28:	08003f83 	.word	0x08003f83
 8003f2c:	08003f89 	.word	0x08003f89
 8003f30:	08003f8f 	.word	0x08003f8f
 8003f34:	08003f8f 	.word	0x08003f8f
 8003f38:	08003f7d 	.word	0x08003f7d
 8003f3c:	08003f8f 	.word	0x08003f8f
 8003f40:	08003f8f 	.word	0x08003f8f
 8003f44:	08003f8f 	.word	0x08003f8f
 8003f48:	08003f8f 	.word	0x08003f8f
 8003f4c:	08003f8f 	.word	0x08003f8f
 8003f50:	08003f59 	.word	0x08003f59
 8003f54:	08003f5f 	.word	0x08003f5f
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8003f58:	230a      	movs	r3, #10
 8003f5a:	73fb      	strb	r3, [r7, #15]
		break;
 8003f5c:	e019      	b.n	8003f92 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8003f5e:	2306      	movs	r3, #6
 8003f60:	73fb      	strb	r3, [r7, #15]
		break;
 8003f62:	e016      	b.n	8003f92 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8003f64:	2304      	movs	r3, #4
 8003f66:	73fb      	strb	r3, [r7, #15]
		break;
 8003f68:	e013      	b.n	8003f92 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	73fb      	strb	r3, [r7, #15]
		break;
 8003f6e:	e010      	b.n	8003f92 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8003f70:	2301      	movs	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
		break;
 8003f74:	e00d      	b.n	8003f92 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8003f76:	2307      	movs	r3, #7
 8003f78:	73fb      	strb	r3, [r7, #15]
		break;
 8003f7a:	e00a      	b.n	8003f92 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8003f7c:	2309      	movs	r3, #9
 8003f7e:	73fb      	strb	r3, [r7, #15]
		break;
 8003f80:	e007      	b.n	8003f92 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8003f82:	2303      	movs	r3, #3
 8003f84:	73fb      	strb	r3, [r7, #15]
		break;
 8003f86:	e004      	b.n	8003f92 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]
		break;
 8003f8c:	e001      	b.n	8003f92 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8003f8e:	23ff      	movs	r3, #255	; 0xff
 8003f90:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <ConvertStatusHisto>:


static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	3b05      	subs	r3, #5
 8003fae:	2b12      	cmp	r3, #18
 8003fb0:	d840      	bhi.n	8004034 <ConvertStatusHisto+0x94>
 8003fb2:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <ConvertStatusHisto+0x18>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08004005 	.word	0x08004005
 8003fbc:	0800400b 	.word	0x0800400b
 8003fc0:	08004017 	.word	0x08004017
 8003fc4:	08004035 	.word	0x08004035
 8003fc8:	0800402f 	.word	0x0800402f
 8003fcc:	08004035 	.word	0x08004035
 8003fd0:	08004035 	.word	0x08004035
 8003fd4:	08004035 	.word	0x08004035
 8003fd8:	08004035 	.word	0x08004035
 8003fdc:	08004035 	.word	0x08004035
 8003fe0:	08004035 	.word	0x08004035
 8003fe4:	08004035 	.word	0x08004035
 8003fe8:	08004035 	.word	0x08004035
 8003fec:	08004035 	.word	0x08004035
 8003ff0:	08004011 	.word	0x08004011
 8003ff4:	08004023 	.word	0x08004023
 8003ff8:	08004035 	.word	0x08004035
 8003ffc:	08004029 	.word	0x08004029
 8004000:	0800401d 	.word	0x0800401d
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8004004:	2304      	movs	r3, #4
 8004006:	73fb      	strb	r3, [r7, #15]
		break;
 8004008:	e016      	b.n	8004038 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800400a:	2301      	movs	r3, #1
 800400c:	73fb      	strb	r3, [r7, #15]
		break;
 800400e:	e013      	b.n	8004038 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8004010:	2306      	movs	r3, #6
 8004012:	73fb      	strb	r3, [r7, #15]
		break;
 8004014:	e010      	b.n	8004038 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8004016:	2307      	movs	r3, #7
 8004018:	73fb      	strb	r3, [r7, #15]
		break;
 800401a:	e00d      	b.n	8004038 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 800401c:	230c      	movs	r3, #12
 800401e:	73fb      	strb	r3, [r7, #15]
		break;
 8004020:	e00a      	b.n	8004038 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8004022:	2307      	movs	r3, #7
 8004024:	73fb      	strb	r3, [r7, #15]
		break;
 8004026:	e007      	b.n	8004038 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8004028:	230b      	movs	r3, #11
 800402a:	73fb      	strb	r3, [r7, #15]
		break;
 800402c:	e004      	b.n	8004038 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800402e:	2300      	movs	r3, #0
 8004030:	73fb      	strb	r3, [r7, #15]
		break;
 8004032:	e001      	b.n	8004038 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8004034:	23ff      	movs	r3, #255	; 0xff
 8004036:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8004038:	7bfb      	ldrb	r3, [r7, #15]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop

08004048 <SetTargetData>:

static VL53L1_Error SetTargetData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53L1_range_data_t *presults_data,
	VL53L1_TargetRangeData_t *pRangeData)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b092      	sub	sp, #72	; 0x48
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	4608      	mov	r0, r1
 8004052:	4611      	mov	r1, r2
 8004054:	461a      	mov	r2, r3
 8004056:	4603      	mov	r3, r0
 8004058:	70fb      	strb	r3, [r7, #3]
 800405a:	460b      	mov	r3, r1
 800405c:	70bb      	strb	r3, [r7, #2]
 800405e:	4613      	mov	r3, r2
 8004060:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004062:	2300      	movs	r3, #0
 8004064:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	VL53L1_LLDriverData_t *pdev =
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3318      	adds	r3, #24
 800406c:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_tuning_parm_storage_t *tp =
 800406e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004070:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8004074:	63bb      	str	r3, [r7, #56]	; 0x38
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	VL53L1_PresetModes PresetMode;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;
	int32_t TuningMinValidSignal;
	FixPoint1616_t MinValidSignal;

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800407a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800407c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8004088:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff feaf 	bl	8003df4 <ComputeRQL>
 8004096:	4603      	mov	r3, r0
 8004098:	461a      	mov	r2, r3
 800409a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800409c:	701a      	strb	r2, [r3, #0]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800409e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80040a2:	025b      	lsls	r3, r3, #9
 80040a4:	633b      	str	r3, [r7, #48]	; 0x30
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 80040a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040aa:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80040ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ae:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80040b0:	025b      	lsls	r3, r3, #9
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 80040b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b8:	60da      	str	r2, [r3, #12]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80040ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040bc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80040be:	025b      	lsls	r3, r3, #9
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);

	pRangeData->SigmaMilliMeter = TempFix1616;
 80040c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c6:	611a      	str	r2, [r3, #16]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80040c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ca:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80040ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040d0:	829a      	strh	r2, [r3, #20]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 80040d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d4:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80040d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040da:	805a      	strh	r2, [r3, #2]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 80040dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040de:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 80040e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e4:	809a      	strh	r2, [r3, #4]

	pRangeData->RangeFractionalPart = 0;
 80040e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e8:	2200      	movs	r2, #0
 80040ea:	759a      	strb	r2, [r3, #22]


	switch (device_status) {
 80040ec:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80040f0:	2b11      	cmp	r3, #17
 80040f2:	d009      	beq.n	8004108 <SetTargetData+0xc0>
 80040f4:	2b11      	cmp	r3, #17
 80040f6:	dc0f      	bgt.n	8004118 <SetTargetData+0xd0>
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	dc02      	bgt.n	8004102 <SetTargetData+0xba>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	dc03      	bgt.n	8004108 <SetTargetData+0xc0>
 8004100:	e00a      	b.n	8004118 <SetTargetData+0xd0>
 8004102:	2b0d      	cmp	r3, #13
 8004104:	d004      	beq.n	8004110 <SetTargetData+0xc8>
 8004106:	e007      	b.n	8004118 <SetTargetData+0xd0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8004108:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800410a:	2205      	movs	r2, #5
 800410c:	75da      	strb	r2, [r3, #23]
		break;
 800410e:	e006      	b.n	800411e <SetTargetData+0xd6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8004110:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004112:	220d      	movs	r2, #13
 8004114:	75da      	strb	r2, [r3, #23]
		break;
 8004116:	e002      	b.n	800411e <SetTargetData+0xd6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8004118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800411a:	2200      	movs	r2, #0
 800411c:	75da      	strb	r2, [r3, #23]
	}


	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800411e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004120:	7ddb      	ldrb	r3, [r3, #23]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d117      	bne.n	8004156 <SetTargetData+0x10e>
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d114      	bne.n	8004156 <SetTargetData+0x10e>
		(active_results == 0)) {
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 800412c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800412e:	22ff      	movs	r2, #255	; 0xff
 8004130:	75da      	strb	r2, [r3, #23]
		pRangeData->SignalRateRtnMegaCps = 0;
 8004132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004134:	2200      	movs	r2, #0
 8004136:	609a      	str	r2, [r3, #8]
		pRangeData->SigmaMilliMeter = 0;
 8004138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800413a:	2200      	movs	r2, #0
 800413c:	611a      	str	r2, [r3, #16]
		pRangeData->RangeMilliMeter = 8191;
 800413e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004140:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8004144:	829a      	strh	r2, [r3, #20]
		pRangeData->RangeMaxMilliMeter = 8191;
 8004146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004148:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800414c:	805a      	strh	r2, [r3, #2]
		pRangeData->RangeMinMilliMeter = 8191;
 800414e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004150:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8004154:	809a      	strh	r2, [r3, #4]
	}


	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8004156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004158:	7ddb      	ldrb	r3, [r3, #23]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d125      	bne.n	80041aa <SetTargetData+0x162>
		PresetMode = VL53L1DevDataGet(Dev,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004164:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8004168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				CurrentParameters.PresetMode);
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 800416c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004170:	2b02      	cmp	r3, #2
 8004172:	d007      	beq.n	8004184 <SetTargetData+0x13c>
 8004174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004178:	2b01      	cmp	r3, #1
 800417a:	d003      	beq.n	8004184 <SetTargetData+0x13c>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 800417c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004180:	2b09      	cmp	r3, #9
 8004182:	d109      	bne.n	8004198 <SetTargetData+0x150>
			(PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE))
			pRangeData->RangeStatus =
				ConvertStatusHisto(FilteredRangeStatus);
 8004184:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff ff09 	bl	8003fa0 <ConvertStatusHisto>
 800418e:	4603      	mov	r3, r0
 8004190:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8004192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004194:	75da      	strb	r2, [r3, #23]
 8004196:	e008      	b.n	80041aa <SetTargetData+0x162>
		else
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8004198:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff feaf 	bl	8003f00 <ConvertStatusLite>
 80041a2:	4603      	mov	r3, r0
 80041a4:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 80041a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041a8:	75da      	strb	r2, [r3, #23]
	}


	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80041aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80041ae:	025b      	lsls	r3, r3, #9
 80041b0:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80041b8:	461a      	mov	r2, r3
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80041c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80041c4:	025b      	lsls	r3, r3, #9
 80041c6:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80041ce:	461a      	mov	r2, r3
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	f8c2 3a84 	str.w	r3, [r2, #2692]	; 0xa84
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);



	VL53L1_GetLimitCheckValue(Dev,
 80041d6:	f107 0310 	add.w	r3, r7, #16
 80041da:	461a      	mov	r2, r3
 80041dc:	2100      	movs	r1, #0
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff fb2d 	bl	800383e <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 80041e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80041e8:	2b06      	cmp	r3, #6
 80041ea:	bf0c      	ite	eq
 80041ec:	2301      	moveq	r3, #1
 80041ee:	2300      	movne	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 80041f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_GetLimitCheckEnable(Dev,
 80041f6:	f107 0315 	add.w	r3, r7, #21
 80041fa:	461a      	mov	r2, r3
 80041fc:	2100      	movs	r1, #0
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff faf8 	bl	80037f4 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8004204:	7d7b      	ldrb	r3, [r7, #21]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d105      	bne.n	8004216 <SetTargetData+0x1ce>
 800420a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <SetTargetData+0x1ce>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <SetTargetData+0x1d0>
 8004216:	2300      	movs	r3, #0
 8004218:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004222:	461a      	mov	r2, r3
 8004224:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004228:	f882 3a76 	strb.w	r3, [r2, #2678]	; 0xa76
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);


	VL53L1_GetLimitCheckValue(Dev,
 800422c:	f107 0310 	add.w	r3, r7, #16
 8004230:	461a      	mov	r2, r3
 8004232:	2101      	movs	r1, #1
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff fb02 	bl	800383e <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800423a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800423e:	2b04      	cmp	r3, #4
 8004240:	bf0c      	ite	eq
 8004242:	2301      	moveq	r3, #1
 8004244:	2300      	movne	r3, #0
 8004246:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8004248:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	VL53L1_GetLimitCheckEnable(Dev,
 800424c:	f107 0315 	add.w	r3, r7, #21
 8004250:	461a      	mov	r2, r3
 8004252:	2101      	movs	r1, #1
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff facd 	bl	80037f4 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800425a:	7d7b      	ldrb	r3, [r7, #21]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d105      	bne.n	800426c <SetTargetData+0x224>
 8004260:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <SetTargetData+0x224>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <SetTargetData+0x226>
 800426c:	2300      	movs	r3, #0
 800426e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004278:	461a      	mov	r2, r3
 800427a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800427e:	f882 3a77 	strb.w	r3, [r2, #2679]	; 0xa77
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8004282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004284:	8a9b      	ldrh	r3, [r3, #20]
 8004286:	847b      	strh	r3, [r7, #34]	; 0x22
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8004288:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800428a:	7ddb      	ldrb	r3, [r3, #23]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d110      	bne.n	80042b2 <SetTargetData+0x26a>
 8004290:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004294:	2b00      	cmp	r3, #0
 8004296:	da0c      	bge.n	80042b2 <SetTargetData+0x26a>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8004298:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800429c:	4ba3      	ldr	r3, [pc, #652]	; (800452c <SetTargetData+0x4e4>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	da03      	bge.n	80042ac <SetTargetData+0x264>
			pRangeData->RangeStatus =
 80042a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042a6:	220e      	movs	r2, #14
 80042a8:	75da      	strb	r2, [r3, #23]
 80042aa:	e002      	b.n	80042b2 <SetTargetData+0x26a>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 80042ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042ae:	2200      	movs	r2, #0
 80042b0:	829a      	strh	r2, [r3, #20]
	}


	VL53L1_get_tuning_parm(Dev,
 80042b2:	f107 0308 	add.w	r3, r7, #8
 80042b6:	461a      	mov	r2, r3
 80042b8:	f248 01be 	movw	r1, #32958	; 0x80be
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f004 f943 	bl	8008548 <VL53L1_get_tuning_parm>
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS,
		&TuningMinValidSignal);
	MinValidSignal = (FixPoint1616_t)TuningMinValidSignal;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	61fb      	str	r3, [r7, #28]
	if ((iteration > 0) &&
 80042c6:	787b      	ldrb	r3, [r7, #1]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00b      	beq.n	80042e4 <SetTargetData+0x29c>
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 80042cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042ce:	7ddb      	ldrb	r3, [r3, #23]
	if ((iteration > 0) &&
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d107      	bne.n	80042e4 <SetTargetData+0x29c>
		(pRangeData->SignalRateRtnMegaCps < MinValidSignal))
 80042d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042d6:	689b      	ldr	r3, [r3, #8]
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d902      	bls.n	80042e4 <SetTargetData+0x29c>
		pRangeData->RangeStatus =
 80042de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042e0:	220c      	movs	r2, #12
 80042e2:	75da      	strb	r2, [r3, #23]
			VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;




	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 80042e4:	f107 030c 	add.w	r3, r7, #12
 80042e8:	461a      	mov	r2, r3
 80042ea:	f248 0191 	movw	r1, #32913	; 0x8091
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f004 f92a 	bl	8008548 <VL53L1_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 80042f4:	78bb      	ldrb	r3, [r7, #2]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	76fb      	strb	r3, [r7, #27]
	uwr_status = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8004302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004304:	8a9b      	ldrh	r3, [r3, #20]
 8004306:	833b      	strh	r3, [r7, #24]
	AddOffset = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	pRangeData->ExtendedRange = 0;
 800430e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004310:	2200      	movs	r2, #0
 8004312:	761a      	strb	r2, [r3, #24]

	if ((active_results != 1) ||
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d106      	bne.n	8004328 <SetTargetData+0x2e0>
		(pdev->PreviousRangeActiveResults != 1))
 800431a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800431c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004320:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
	if ((active_results != 1) ||
 8004324:	2b01      	cmp	r3, #1
 8004326:	d001      	beq.n	800432c <SetTargetData+0x2e4>
		ExtendedRangeEnabled = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8250 	beq.w	80047d4 <SetTargetData+0x78c>
		(pRangeData->RangeStatus ==
 8004334:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004336:	7ddb      	ldrb	r3, [r3, #23]
	if (ExtendedRangeEnabled &&
 8004338:	2b07      	cmp	r3, #7
 800433a:	d004      	beq.n	8004346 <SetTargetData+0x2fe>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 800433c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800433e:	7ddb      	ldrb	r3, [r3, #23]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8004340:	2b04      	cmp	r3, #4
 8004342:	f040 8247 	bne.w	80047d4 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8004346:	787b      	ldrb	r3, [r7, #1]
 8004348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800434a:	4413      	add	r3, r2
 800434c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004350:	3320      	adds	r3, #32
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b07      	cmp	r3, #7
 8004356:	d01c      	beq.n	8004392 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8004358:	787b      	ldrb	r3, [r7, #1]
 800435a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800435c:	4413      	add	r3, r2
 800435e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004362:	3320      	adds	r3, #32
 8004364:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8004366:	2b04      	cmp	r3, #4
 8004368:	d013      	beq.n	8004392 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 800436a:	787b      	ldrb	r3, [r7, #1]
 800436c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800436e:	4413      	add	r3, r2
 8004370:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004374:	3320      	adds	r3, #32
 8004376:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8004378:	2b00      	cmp	r3, #0
 800437a:	f040 822b 	bne.w	80047d4 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 800437e:	787b      	ldrb	r3, [r7, #1]
 8004380:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004382:	4413      	add	r3, r2
 8004384:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004388:	3324      	adds	r3, #36	; 0x24
 800438a:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_RANGE_VALID &&
 800438c:	2b01      	cmp	r3, #1
 800438e:	f040 8221 	bne.w	80047d4 <SetTargetData+0x78c>
	{
		if (((pdev->PreviousStreamCount) ==
 8004392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004394:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004398:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800439c:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 800439e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a0:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 80043a4:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d00c      	beq.n	80043c4 <SetTargetData+0x37c>
		|| ((pdev->PreviousStreamCount) ==
 80043aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80043b0:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80043b4:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 80043b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b8:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 80043bc:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 80043be:	429a      	cmp	r2, r3
 80043c0:	f040 81dc 	bne.w	800477c <SetTargetData+0x734>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 80043c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043c6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80043ca:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 80043cc:	787b      	ldrb	r3, [r7, #1]
 80043ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043d0:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80043d4:	330c      	adds	r3, #12
 80043d6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80043da:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	b29b      	uxth	r3, r3
 80043e0:	82fb      	strh	r3, [r7, #22]

		uwr_status = 1;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		switch (pdev->preset_mode) {
 80043e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ea:	785b      	ldrb	r3, [r3, #1]
 80043ec:	2b21      	cmp	r3, #33	; 0x21
 80043ee:	d008      	beq.n	8004402 <SetTargetData+0x3ba>
 80043f0:	2b21      	cmp	r3, #33	; 0x21
 80043f2:	f300 81bf 	bgt.w	8004774 <SetTargetData+0x72c>
 80043f6:	2b1b      	cmp	r3, #27
 80043f8:	f000 8113 	beq.w	8004622 <SetTargetData+0x5da>
 80043fc:	2b1e      	cmp	r3, #30
 80043fe:	d004      	beq.n	800440a <SetTargetData+0x3c2>
 8004400:	e1b8      	b.n	8004774 <SetTargetData+0x72c>
			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8004408:	e1b9      	b.n	800477e <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8004410:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004414:	429a      	cmp	r2, r3
 8004416:	dd0f      	ble.n	8004438 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8004418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441a:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800441e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004422:	429a      	cmp	r2, r3
 8004424:	da08      	bge.n	8004438 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8004426:	7efb      	ldrb	r3, [r7, #27]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d105      	bne.n	8004438 <SetTargetData+0x3f0>
					sequency == 1) {
					AddOffset =
 800442c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8004432:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004436:	e0f3      	b.n	8004620 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8004438:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443e:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8004442:	425b      	negs	r3, r3
 8004444:	429a      	cmp	r2, r3
 8004446:	da10      	bge.n	800446a <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8004448:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800444c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444e:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 8004452:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8004454:	429a      	cmp	r2, r3
 8004456:	dd08      	ble.n	800446a <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8004458:	7efb      	ldrb	r3, [r7, #27]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d105      	bne.n	800446a <SetTargetData+0x422>
					sequency == 0) {
					AddOffset =
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004460:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8004464:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004468:	e0da      	b.n	8004620 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 800446a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446c:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8004470:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004474:	429a      	cmp	r2, r3
 8004476:	dd0f      	ble.n	8004498 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8004478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447a:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 800447e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004482:	429a      	cmp	r2, r3
 8004484:	da08      	bge.n	8004498 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8004486:	7efb      	ldrb	r3, [r7, #27]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d105      	bne.n	8004498 <SetTargetData+0x450>
					sequency == 0) {
					AddOffset =
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8004492:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004496:	e0c3      	b.n	8004620 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8004498:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449e:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80044a2:	425b      	negs	r3, r3
 80044a4:	429a      	cmp	r2, r3
 80044a6:	da10      	bge.n	80044ca <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80044a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80044ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ae:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 80044b2:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80044b4:	429a      	cmp	r2, r3
 80044b6:	dd08      	ble.n	80044ca <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80044b8:	7efb      	ldrb	r3, [r7, #27]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d105      	bne.n	80044ca <SetTargetData+0x482>
					sequency == 1) {
					AddOffset =
 80044be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80044c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80044c8:	e0aa      	b.n	8004620 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044cc:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 80044d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	dd0f      	ble.n	80044f8 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80044d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044da:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80044de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	da08      	bge.n	80044f8 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80044e6:	7efb      	ldrb	r3, [r7, #27]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d105      	bne.n	80044f8 <SetTargetData+0x4b0>
					sequency == 1) {
					AddOffset =
 80044ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ee:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80044f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80044f6:	e093      	b.n	8004620 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 80044f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80044fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fe:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8004502:	425b      	negs	r3, r3
 8004504:	429a      	cmp	r2, r3
 8004506:	da13      	bge.n	8004530 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8004508:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8004512:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8004514:	429a      	cmp	r2, r3
 8004516:	dd0b      	ble.n	8004530 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8004518:	7efb      	ldrb	r3, [r7, #27]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d108      	bne.n	8004530 <SetTargetData+0x4e8>
					sequency == 0) {
					AddOffset =
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8004524:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004528:	e07a      	b.n	8004620 <SetTargetData+0x5d8>
 800452a:	bf00      	nop
 800452c:	2000000c 	.word	0x2000000c
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8004530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004532:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8004536:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800453a:	429a      	cmp	r2, r3
 800453c:	dd0f      	ble.n	800455e <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 800453e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004540:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8004544:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004548:	429a      	cmp	r2, r3
 800454a:	da08      	bge.n	800455e <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 800454c:	7efb      	ldrb	r3, [r7, #27]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d105      	bne.n	800455e <SetTargetData+0x516>
					sequency == 0) {
					AddOffset =
 8004552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004554:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8004558:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800455c:	e060      	b.n	8004620 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800455e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8004568:	425b      	negs	r3, r3
 800456a:	429a      	cmp	r2, r3
 800456c:	da10      	bge.n	8004590 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800456e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004574:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8004578:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800457a:	429a      	cmp	r2, r3
 800457c:	dd08      	ble.n	8004590 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800457e:	7efb      	ldrb	r3, [r7, #27]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d105      	bne.n	8004590 <SetTargetData+0x548>
					sequency == 1) {
					AddOffset =
 8004584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004586:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800458a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800458e:	e047      	b.n	8004620 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8004590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004592:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8004596:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800459a:	429a      	cmp	r2, r3
 800459c:	da0c      	bge.n	80045b8 <SetTargetData+0x570>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80045a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	dd05      	ble.n	80045b8 <SetTargetData+0x570>
					AddOffset =
 80045ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ae:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 80045b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80045b6:	e033      	b.n	8004620 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_5_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 80045be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	dd0f      	ble.n	80045e6 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 80045c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c8:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 80045cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	da08      	bge.n	80045e6 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 80045d4:	7efb      	ldrb	r3, [r7, #27]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d105      	bne.n	80045e6 <SetTargetData+0x59e>
					sequency == 1) {
					AddOffset =
 80045da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045dc:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80045e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80045e4:	e01c      	b.n	8004620 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 80045e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80045ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ec:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 80045f0:	425b      	negs	r3, r3
 80045f2:	429a      	cmp	r2, r3
 80045f4:	da10      	bge.n	8004618 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 80045f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fc:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 8004600:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8004602:	429a      	cmp	r2, r3
 8004604:	dd08      	ble.n	8004618 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8004606:	7efb      	ldrb	r3, [r7, #27]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d105      	bne.n	8004618 <SetTargetData+0x5d0>
					sequency == 0) {
					AddOffset =
 800460c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8004612:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004616:	e003      	b.n	8004620 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangea;
				}
				else
					uwr_status = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800461e:	e0ae      	b.n	800477e <SetTargetData+0x736>
 8004620:	e0ad      	b.n	800477e <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8004622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004624:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8004628:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800462c:	429a      	cmp	r2, r3
 800462e:	dd0f      	ble.n	8004650 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8004630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004632:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8004636:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800463a:	429a      	cmp	r2, r3
 800463c:	da08      	bge.n	8004650 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 800463e:	7efb      	ldrb	r3, [r7, #27]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d105      	bne.n	8004650 <SetTargetData+0x608>
					sequency == 0) {
					AddOffset =
 8004644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004646:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800464a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800464e:	e090      	b.n	8004772 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8004650:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004656:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 800465a:	425b      	negs	r3, r3
 800465c:	429a      	cmp	r2, r3
 800465e:	da10      	bge.n	8004682 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8004660:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004666:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 800466a:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 800466c:	429a      	cmp	r2, r3
 800466e:	dd08      	ble.n	8004682 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8004670:	7efb      	ldrb	r3, [r7, #27]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d105      	bne.n	8004682 <SetTargetData+0x63a>
					sequency == 1) {
					AddOffset =
 8004676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004678:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 800467c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004680:	e077      	b.n	8004772 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8004688:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800468c:	429a      	cmp	r2, r3
 800468e:	dd0f      	ble.n	80046b0 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8004690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004692:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8004696:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800469a:	429a      	cmp	r2, r3
 800469c:	da08      	bge.n	80046b0 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800469e:	7efb      	ldrb	r3, [r7, #27]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d105      	bne.n	80046b0 <SetTargetData+0x668>
					sequency == 1) {
					AddOffset =
 80046a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a6:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 80046aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80046ae:	e060      	b.n	8004772 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80046b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80046b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b6:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 80046ba:	425b      	negs	r3, r3
 80046bc:	429a      	cmp	r2, r3
 80046be:	da10      	bge.n	80046e2 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80046c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80046c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c6:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 80046ca:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80046cc:	429a      	cmp	r2, r3
 80046ce:	dd08      	ble.n	80046e2 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80046d0:	7efb      	ldrb	r3, [r7, #27]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d105      	bne.n	80046e2 <SetTargetData+0x69a>
					sequency == 0) {
					AddOffset =
 80046d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d8:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 80046dc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80046e0:	e047      	b.n	8004772 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80046e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e4:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 80046e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	da0c      	bge.n	800470a <SetTargetData+0x6c2>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 80046f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f2:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80046f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	dd05      	ble.n	800470a <SetTargetData+0x6c2>
					AddOffset =
 80046fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004700:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 8004704:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004708:	e033      	b.n	8004772 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 800470a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470c:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8004710:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004714:	429a      	cmp	r2, r3
 8004716:	dd0f      	ble.n	8004738 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8004718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471a:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 800471e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004722:	429a      	cmp	r2, r3
 8004724:	da08      	bge.n	8004738 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8004726:	7efb      	ldrb	r3, [r7, #27]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d105      	bne.n	8004738 <SetTargetData+0x6f0>
					sequency == 1) {
					AddOffset =
 800472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472e:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8004732:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004736:	e01c      	b.n	8004772 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8004738:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473e:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8004742:	425b      	negs	r3, r3
 8004744:	429a      	cmp	r2, r3
 8004746:	da10      	bge.n	800476a <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8004748:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800474c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474e:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 8004752:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8004754:	429a      	cmp	r2, r3
 8004756:	dd08      	ble.n	800476a <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8004758:	7efb      	ldrb	r3, [r7, #27]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d105      	bne.n	800476a <SetTargetData+0x722>
					sequency == 0) {
					AddOffset =
 800475e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004760:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 8004764:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004768:	e003      	b.n	8004772 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangea;
				}
				else
					uwr_status = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8004770:	e005      	b.n	800477e <SetTargetData+0x736>
 8004772:	e004      	b.n	800477e <SetTargetData+0x736>

			default:
				uwr_status = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800477a:	e000      	b.n	800477e <SetTargetData+0x736>
			}
		}
 800477c:	bf00      	nop

		if (uwr_status) {
 800477e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004782:	2b00      	cmp	r3, #0
 8004784:	d026      	beq.n	80047d4 <SetTargetData+0x78c>
			pRangeData->RangeMilliMeter += AddOffset;
 8004786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004788:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800478c:	b29a      	uxth	r2, r3
 800478e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004792:	4413      	add	r3, r2
 8004794:	b29b      	uxth	r3, r3
 8004796:	b21a      	sxth	r2, r3
 8004798:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800479a:	829a      	strh	r2, [r3, #20]
			pRangeData->RangeMinMilliMeter += AddOffset;
 800479c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800479e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80047a8:	4413      	add	r3, r2
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	b21a      	sxth	r2, r3
 80047ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047b0:	809a      	strh	r2, [r3, #4]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 80047b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80047be:	4413      	add	r3, r2
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	b21a      	sxth	r2, r3
 80047c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047c6:	805a      	strh	r2, [r3, #2]
			pRangeData->ExtendedRange = 1;
 80047c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047ca:	2201      	movs	r2, #1
 80047cc:	761a      	strb	r2, [r3, #24]
			pRangeData->RangeStatus = 0;
 80047ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047d0:	2200      	movs	r2, #0
 80047d2:	75da      	strb	r2, [r3, #23]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 80047d4:	787b      	ldrb	r3, [r7, #1]
 80047d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047d8:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80047dc:	330c      	adds	r3, #12
 80047de:	8b39      	ldrh	r1, [r7, #24]
 80047e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 80047e4:	787b      	ldrb	r3, [r7, #1]
 80047e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047e8:	7dd1      	ldrb	r1, [r2, #23]
 80047ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80047f2:	3320      	adds	r3, #32
 80047f4:	460a      	mov	r2, r1
 80047f6:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 80047f8:	787b      	ldrb	r3, [r7, #1]
 80047fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047fc:	7e11      	ldrb	r1, [r2, #24]
 80047fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004800:	4413      	add	r3, r2
 8004802:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004806:	3324      	adds	r3, #36	; 0x24
 8004808:	460a      	mov	r2, r1
 800480a:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 800480c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004812:	461a      	mov	r2, r3
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	f882 30e8 	strb.w	r3, [r2, #232]	; 0xe8

	return Status;
 800481a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800481e:	4618      	mov	r0, r3
 8004820:	3748      	adds	r7, #72	; 0x48
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop

08004828 <SetMeasurementData>:
}

static VL53L1_Error SetMeasurementData(VL53L1_DEV Dev,
	VL53L1_range_results_t *presults,
	VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b091      	sub	sp, #68	; 0x44
 800482c:	af04      	add	r7, sp, #16
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	3318      	adds	r3, #24
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;
	uint8_t iteration;
	VL53L1_TargetRangeData_t *pRangeData;
	VL53L1_range_data_t *presults_data;
	int16_t dmax_min;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800483a:	2300      	movs	r3, #0
 800483c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t Furthest_idx = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	int16_t Furthest_range = 0;
 8004846:	2300      	movs	r3, #0
 8004848:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t ActiveResults, amb_idx;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	7c9a      	ldrb	r2, [r3, #18]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	719a      	strb	r2, [r3, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	789a      	ldrb	r2, [r3, #2]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004872:	4293      	cmp	r3, r2
 8004874:	bfa8      	it	ge
 8004876:	4613      	movge	r3, r2
 8004878:	847b      	strh	r3, [r7, #34]	; 0x22
			presults->VL53L1_p_007[DMAX_REFLECTANCE_IDX]);
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800487e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c


	pMultiRangingData->TimeStamp = 0;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	78da      	ldrb	r2, [r3, #3]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	711a      	strb	r2, [r3, #4]

	pMultiRangingData->RecommendedDistanceMode =
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004896:	f893 2a6e 	ldrb.w	r2, [r3, #2670]	; 0xa6e
	pMultiRangingData->RecommendedDistanceMode =
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	ActiveResults = presults->active_results;
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	7c9b      	ldrb	r3, [r3, #18]
 80048a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (ActiveResults < 1)
 80048a8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d103      	bne.n	80048b8 <SetMeasurementData+0x90>

		iteration = 1;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80048b6:	e003      	b.n	80048c0 <SetMeasurementData+0x98>
	else
		iteration = ActiveResults;
 80048b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80048bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < iteration; i++) {
 80048c0:	2300      	movs	r3, #0
 80048c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80048c6:	e048      	b.n	800495a <SetMeasurementData+0x132>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 80048c8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80048cc:	4613      	mov	r3, r2
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	1a9b      	subs	r3, r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	3308      	adds	r3, #8
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	4413      	add	r3, r2
 80048da:	61fb      	str	r3, [r7, #28]

		presults_data = &(presults->VL53L1_p_002[i]);
 80048dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048e0:	224c      	movs	r2, #76	; 0x4c
 80048e2:	fb02 f303 	mul.w	r3, r2, r3
 80048e6:	3310      	adds	r3, #16
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	4413      	add	r3, r2
 80048ec:	3304      	adds	r3, #4
 80048ee:	617b      	str	r3, [r7, #20]
		if (Status == VL53L1_ERROR_NONE)
 80048f0:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d114      	bne.n	8004922 <SetMeasurementData+0xfa>
			Status = SetTargetData(Dev, ActiveResults,
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	7918      	ldrb	r0, [r3, #4]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	7c1b      	ldrb	r3, [r3, #16]
 8004900:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8004904:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	9202      	str	r2, [sp, #8]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	9201      	str	r2, [sp, #4]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	4623      	mov	r3, r4
 8004914:	4602      	mov	r2, r0
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f7ff fb96 	bl	8004048 <SetTargetData>
 800491c:	4603      	mov	r3, r0
 800491e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53L1_p_006;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	7ddb      	ldrb	r3, [r3, #23]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10d      	bne.n	8004950 <SetMeasurementData+0x128>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800493a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800493e:	429a      	cmp	r2, r3
 8004940:	da06      	bge.n	8004950 <SetMeasurementData+0x128>
			Furthest_range = pRangeData->RangeMilliMeter;
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	8a9b      	ldrh	r3, [r3, #20]
 8004946:	857b      	strh	r3, [r7, #42]	; 0x2a
			Furthest_idx = i;
 8004948:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800494c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	for (i = 0; i < iteration; i++) {
 8004950:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004954:	3301      	adds	r3, #1
 8004956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800495a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800495e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004962:	429a      	cmp	r2, r3
 8004964:	d3b0      	bcc.n	80048c8 <SetMeasurementData+0xa0>
		}
	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	f893 2483 	ldrb.w	r2, [r3, #1155]	; 0x483
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004972:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8004976:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800497a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800497e:	e01f      	b.n	80049c0 <SetMeasurementData+0x198>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8004980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004986:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800498a:	330c      	adds	r3, #12
 800498c:	2100      	movs	r1, #0
 800498e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8004992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004998:	4413      	add	r3, r2
 800499a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800499e:	3320      	adds	r3, #32
 80049a0:	22ff      	movs	r2, #255	; 0xff
 80049a2:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 80049a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80049b0:	3324      	adds	r3, #36	; 0x24
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80049b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049ba:	3301      	adds	r3, #1
 80049bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80049c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d9db      	bls.n	8004980 <SetMeasurementData+0x158>
	}

	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 80049c8:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d11b      	bne.n	8004a08 <SetMeasurementData+0x1e0>
 80049d0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d017      	beq.n	8004a08 <SetMeasurementData+0x1e0>
		pRangeData = &(pMultiRangingData->RangeData[Furthest_idx]);
 80049d8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80049dc:	4613      	mov	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	3308      	adds	r3, #8
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	4413      	add	r3, r2
 80049ea:	61fb      	str	r3, [r7, #28]
		amb_idx = VL53L1_MAX_AMBIENT_DMAX_VALUES-1;
 80049ec:	2304      	movs	r3, #4
 80049ee:	76fb      	strb	r3, [r7, #27]
		CheckAndChangeDistanceMode(Dev, pRangeData,
 80049f0:	7efb      	ldrb	r3, [r7, #27]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	4413      	add	r3, r2
 80049f8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	337e      	adds	r3, #126	; 0x7e
 8004a00:	69f9      	ldr	r1, [r7, #28]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f7ff f996 	bl	8003d34 <CheckAndChangeDistanceMode>
			presults->VL53L1_p_007[amb_idx],
			&pMultiRangingData->RecommendedDistanceMode);
	}

	return Status;
 8004a08:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3734      	adds	r7, #52	; 0x34
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd90      	pop	{r4, r7, pc}

08004a14 <VL53L1_GetMultiRangingData>:

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3318      	adds	r3, #24
 8004a26:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8004a2e:	3308      	adds	r3, #8
 8004a30:	60fb      	str	r3, [r7, #12]
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8004a32:	2280      	movs	r2, #128	; 0x80
 8004a34:	21ff      	movs	r1, #255	; 0xff
 8004a36:	6838      	ldr	r0, [r7, #0]
 8004a38:	f016 f908 	bl	801ac4c <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	2102      	movs	r1, #2
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f002 fc2e 	bl	80072a2 <VL53L1_get_device_results>
 8004a46:	4603      	mov	r3, r0
 8004a48:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 8004a4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d118      	bne.n	8004a84 <VL53L1_GetMultiRangingData+0x70>
		switch (presults->rd_device_state) {
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	785b      	ldrb	r3, [r3, #1]
 8004a56:	2b07      	cmp	r3, #7
 8004a58:	d002      	beq.n	8004a60 <VL53L1_GetMultiRangingData+0x4c>
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d004      	beq.n	8004a68 <VL53L1_GetMultiRangingData+0x54>
 8004a5e:	e007      	b.n	8004a70 <VL53L1_GetMultiRangingData+0x5c>
		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pMultiRangingData->RoiStatus =
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2201      	movs	r2, #1
 8004a64:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_NOT_LAST;
			break;
 8004a66:	e006      	b.n	8004a76 <VL53L1_GetMultiRangingData+0x62>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_LAST;
			break;
 8004a6e:	e002      	b.n	8004a76 <VL53L1_GetMultiRangingData+0x62>
		default:
			pMultiRangingData->RoiStatus =
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_NOT_VALID;
		}

		Status = SetMeasurementData(Dev,
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	68f9      	ldr	r1, [r7, #12]
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff fed4 	bl	8004828 <SetMeasurementData>
 8004a80:	4603      	mov	r3, r0
 8004a82:	75fb      	strb	r3, [r7, #23]
					pMultiRangingData);

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b090      	sub	sp, #64	; 0x40
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]

	SUPPRESS_UNUSED_WARNING(Dev);

	LOG_FUNCTION_START("");
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8004a9e:	f240 3305 	movw	r3, #773	; 0x305
 8004aa2:	81bb      	strh	r3, [r7, #12]
	VL53L1_customer_nvm_managed_t *pc;
	VL53L1_PresetModes PresetMode;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3318      	adds	r3, #24
 8004aa8:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aac:	3348      	adds	r3, #72	; 0x48
 8004aae:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53L1_ERROR_NONE) {
 8004ab0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d11c      	bne.n	8004af2 <VL53L1_PerformRefSpadManagement+0x62>
		PresetMode = VL53L1DevDataGet(Dev,
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004abe:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8004ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.PresetMode);
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 8004ac6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8004aca:	4619      	mov	r1, r3
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f8e3 	bl	8004c98 <VL53L1_run_ref_spad_char>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L1_ERROR_NONE)
 8004ad8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d108      	bne.n	8004af2 <VL53L1_PerformRefSpadManagement+0x62>
			Status = VL53L1_SetPresetMode(Dev, PresetMode);
 8004ae0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fe fb2c 	bl	8003144 <VL53L1_SetPresetMode>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8004af2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004af6:	f113 0f1d 	cmn.w	r3, #29
 8004afa:	d14e      	bne.n	8004b9a <VL53L1_PerformRefSpadManagement+0x10a>

		Status = VL53L1_read_nvm_raw_data(Dev,
 8004afc:	f107 0310 	add.w	r3, r7, #16
 8004b00:	2206      	movs	r2, #6
 8004b02:	2128      	movs	r1, #40	; 0x28
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f00e fbf6 	bl	80132f6 <VL53L1_read_nvm_raw_data>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53L1_ERROR_NONE)
 8004b10:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d109      	bne.n	8004b2c <VL53L1_PerformRefSpadManagement+0x9c>
			Status = VL53L1_WriteMulti(Dev,
 8004b18:	f107 020c 	add.w	r2, r7, #12
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	2114      	movs	r1, #20
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f010 fe5f 	bl	80157e4 <VL53L1_WriteMulti>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53L1_ERROR_NONE) {
 8004b2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d105      	bne.n	8004b40 <VL53L1_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8004b34:	7b3a      	ldrb	r2, [r7, #12]
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b38:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 8004b3a:	7b7a      	ldrb	r2, [r7, #13]
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3e:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8004b40:	f107 0310 	add.w	r3, r7, #16
 8004b44:	3310      	adds	r3, #16
 8004b46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (Status == VL53L1_ERROR_NONE)
 8004b48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d108      	bne.n	8004b62 <VL53L1_PerformRefSpadManagement+0xd2>
			Status = VL53L1_WriteMulti(Dev,
 8004b50:	2306      	movs	r3, #6
 8004b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b54:	210d      	movs	r1, #13
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f010 fe44 	bl	80157e4 <VL53L1_WriteMulti>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53L1_ERROR_NONE) {
 8004b62:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d117      	bne.n	8004b9a <VL53L1_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	781a      	ldrb	r2, [r3, #0]
 8004b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b70:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	785a      	ldrb	r2, [r3, #1]
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b78:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 8004b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7c:	789a      	ldrb	r2, [r3, #2]
 8004b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b80:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8004b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b84:	78da      	ldrb	r2, [r3, #3]
 8004b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b88:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8c:	791a      	ldrb	r2, [r3, #4]
 8004b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b90:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8004b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b94:	795a      	ldrb	r2, [r3, #5]
 8004b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b98:	715a      	strb	r2, [r3, #5]
	}

#endif

	LOG_FUNCTION_END(Status);
	return Status;
 8004b9a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3740      	adds	r7, #64	; 0x40
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <VL53L1_SmudgeCorrectionEnable>:

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	73fb      	strb	r3, [r7, #15]
	VL53L1_Error s1 = VL53L1_ERROR_NONE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	73bb      	strb	r3, [r7, #14]
	VL53L1_Error s2 = VL53L1_ERROR_NONE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	737b      	strb	r3, [r7, #13]
	VL53L1_Error s3 = VL53L1_ERROR_NONE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d84a      	bhi.n	8004c60 <VL53L1_SmudgeCorrectionEnable+0xb8>
 8004bca:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <VL53L1_SmudgeCorrectionEnable+0x28>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004be1 	.word	0x08004be1
 8004bd4:	08004c01 	.word	0x08004c01
 8004bd8:	08004c21 	.word	0x08004c21
 8004bdc:	08004c41 	.word	0x08004c41
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f004 fbee 	bl	80093c2 <VL53L1_dynamic_xtalk_correction_disable>
 8004be6:	4603      	mov	r3, r0
 8004be8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f004 fc17 	bl	800941e <VL53L1_dynamic_xtalk_correction_apply_disable>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f004 fc40 	bl	800947a <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	733b      	strb	r3, [r7, #12]
		break;
 8004bfe:	e032      	b.n	8004c66 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f004 fbc7 	bl	8009394 <VL53L1_dynamic_xtalk_correction_enable>
 8004c06:	4603      	mov	r3, r0
 8004c08:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f004 fbf0 	bl	80093f0 <VL53L1_dynamic_xtalk_correction_apply_enable>
 8004c10:	4603      	mov	r3, r0
 8004c12:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f004 fc30 	bl	800947a <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	733b      	strb	r3, [r7, #12]
		break;
 8004c1e:	e022      	b.n	8004c66 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f004 fbb7 	bl	8009394 <VL53L1_dynamic_xtalk_correction_enable>
 8004c26:	4603      	mov	r3, r0
 8004c28:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f004 fbe0 	bl	80093f0 <VL53L1_dynamic_xtalk_correction_apply_enable>
 8004c30:	4603      	mov	r3, r0
 8004c32:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f004 fc09 	bl	800944c <VL53L1_dynamic_xtalk_correction_single_apply_enable>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	733b      	strb	r3, [r7, #12]
		break;
 8004c3e:	e012      	b.n	8004c66 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f004 fba7 	bl	8009394 <VL53L1_dynamic_xtalk_correction_enable>
 8004c46:	4603      	mov	r3, r0
 8004c48:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f004 fbe7 	bl	800941e <VL53L1_dynamic_xtalk_correction_apply_disable>
 8004c50:	4603      	mov	r3, r0
 8004c52:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f004 fc10 	bl	800947a <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	733b      	strb	r3, [r7, #12]
		break;
 8004c5e:	e002      	b.n	8004c66 <VL53L1_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004c60:	23fc      	movs	r3, #252	; 0xfc
 8004c62:	73fb      	strb	r3, [r7, #15]
		break;
 8004c64:	bf00      	nop
	}

	if (Status == VL53L1_ERROR_NONE) {
 8004c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10d      	bne.n	8004c8a <VL53L1_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8004c6e:	7bbb      	ldrb	r3, [r7, #14]
 8004c70:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8004c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <VL53L1_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8004c7a:	7b7b      	ldrb	r3, [r7, #13]
 8004c7c:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8004c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <VL53L1_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8004c86:	7b3b      	ldrb	r3, [r7, #12]
 8004c88:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop

08004c98 <VL53L1_run_ref_spad_char>:


VL53L1_Error VL53L1_run_ref_spad_char(
	VL53L1_DEV        Dev,
	VL53L1_Error     *pcal_status)
{
 8004c98:	b5b0      	push	{r4, r5, r7, lr}
 8004c9a:	b08c      	sub	sp, #48	; 0x30
 8004c9c:	af04      	add	r7, sp, #16
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	3318      	adds	r3, #24
 8004caa:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53L1_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8004cb2:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8004cb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d104      	bne.n	8004cc6 <VL53L1_run_ref_spad_char+0x2e>
		status = VL53L1_enable_powerforce(Dev);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f007 fc99 	bl	800c5f4 <VL53L1_enable_powerforce>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8004cc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d117      	bne.n	8004cfe <VL53L1_run_ref_spad_char+0x66>
		status =
		VL53L1_set_ref_spad_char_config(
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	7858      	ldrb	r0, [r3, #1]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	685c      	ldr	r4, [r3, #4]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	891d      	ldrh	r5, [r3, #8]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	899b      	ldrh	r3, [r3, #12]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	8952      	ldrh	r2, [r2, #10]
 8004ce2:	69b9      	ldr	r1, [r7, #24]
 8004ce4:	f8b1 1322 	ldrh.w	r1, [r1, #802]	; 0x322
 8004ce8:	9102      	str	r1, [sp, #8]
 8004cea:	9201      	str	r2, [sp, #4]
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	462b      	mov	r3, r5
 8004cf0:	4622      	mov	r2, r4
 8004cf2:	4601      	mov	r1, r0
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f009 fbda 	bl	800e4ae <VL53L1_set_ref_spad_char_config>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53L1_ERROR_NONE)
 8004cfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d107      	bne.n	8004d16 <VL53L1_run_ref_spad_char+0x7e>
		status = VL53L1_run_device_test(
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f891 	bl	8004e34 <VL53L1_run_device_test>
 8004d12:	4603      	mov	r3, r0
 8004d14:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53L1_ERROR_NONE)
 8004d16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d108      	bne.n	8004d30 <VL53L1_run_ref_spad_char+0x98>
		status =
		VL53L1_ReadMulti(
 8004d1e:	f107 020c 	add.w	r2, r7, #12
 8004d22:	2302      	movs	r3, #2
 8004d24:	21d9      	movs	r1, #217	; 0xd9
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f010 fd92 	bl	8015850 <VL53L1_ReadMulti>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53L1_ERROR_NONE) {
 8004d30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10b      	bne.n	8004d50 <VL53L1_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8004d38:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d40:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8004d44:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d4c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
	}



	if (status == VL53L1_ERROR_NONE)
 8004d50:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d108      	bne.n	8004d6a <VL53L1_run_ref_spad_char+0xd2>
		status =
			VL53L1_WriteMulti(
 8004d58:	f107 020c 	add.w	r2, r7, #12
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	2114      	movs	r1, #20
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f010 fd3f 	bl	80157e4 <VL53L1_WriteMulti>
 8004d66:	4603      	mov	r3, r0
 8004d68:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8004d6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d107      	bne.n	8004d82 <VL53L1_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8004d72:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8004d7a:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53L1_ERROR_NONE)
 8004d82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d108      	bne.n	8004d9c <VL53L1_run_ref_spad_char+0x104>
		status =
			VL53L1_ReadMulti(
 8004d8a:	f107 020c 	add.w	r2, r7, #12
 8004d8e:	2306      	movs	r3, #6
 8004d90:	21ac      	movs	r1, #172	; 0xac
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f010 fd5c 	bl	8015850 <VL53L1_ReadMulti>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53L1_ERROR_NONE)
 8004d9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d108      	bne.n	8004db6 <VL53L1_run_ref_spad_char+0x11e>
		status =
			VL53L1_WriteMulti(
 8004da4:	f107 020c 	add.w	r2, r7, #12
 8004da8:	2306      	movs	r3, #6
 8004daa:	210d      	movs	r1, #13
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f010 fd19 	bl	80157e4 <VL53L1_WriteMulti>
 8004db2:	4603      	mov	r3, r0
 8004db4:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53L1_ERROR_NONE) {
 8004db6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d117      	bne.n	8004dee <VL53L1_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8004dbe:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8004dc6:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8004dce:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8004dd6:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8004dde:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8004de6:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53L1_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53L1_ERROR_NONE) {
 8004dee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d114      	bne.n	8004e20 <VL53L1_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8004dfc:	2b10      	cmp	r3, #16
 8004dfe:	d00c      	beq.n	8004e1a <VL53L1_run_ref_spad_char+0x182>
 8004e00:	2b10      	cmp	r3, #16
 8004e02:	dc0e      	bgt.n	8004e22 <VL53L1_run_ref_spad_char+0x18a>
 8004e04:	2b0e      	cmp	r3, #14
 8004e06:	d002      	beq.n	8004e0e <VL53L1_run_ref_spad_char+0x176>
 8004e08:	2b0f      	cmp	r3, #15
 8004e0a:	d003      	beq.n	8004e14 <VL53L1_run_ref_spad_char+0x17c>
 8004e0c:	e009      	b.n	8004e22 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8004e0e:	23e4      	movs	r3, #228	; 0xe4
 8004e10:	77fb      	strb	r3, [r7, #31]
			break;
 8004e12:	e006      	b.n	8004e22 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8004e14:	23e3      	movs	r3, #227	; 0xe3
 8004e16:	77fb      	strb	r3, [r7, #31]
			break;
 8004e18:	e003      	b.n	8004e22 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8004e1a:	23e2      	movs	r3, #226	; 0xe2
 8004e1c:	77fb      	strb	r3, [r7, #31]
			break;
 8004e1e:	e000      	b.n	8004e22 <VL53L1_run_ref_spad_char+0x18a>
		}
	}
 8004e20:	bf00      	nop



	*pcal_status = status;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	7ffa      	ldrb	r2, [r7, #31]
 8004e26:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8004e28:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3720      	adds	r7, #32
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bdb0      	pop	{r4, r5, r7, pc}

08004e34 <VL53L1_run_device_test>:


VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004e40:	2300      	movs	r3, #0
 8004e42:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3318      	adds	r3, #24
 8004e48:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8004e4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d108      	bne.n	8004e68 <VL53L1_run_device_test+0x34>
		status =
			VL53L1_RdByte(
 8004e56:	f107 030b 	add.w	r3, r7, #11
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	2130      	movs	r1, #48	; 0x30
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f010 fd88 	bl	8015974 <VL53L1_RdByte>
 8004e64:	4603      	mov	r3, r0
 8004e66:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 8004e68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d103      	bne.n	8004e78 <VL53L1_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8004e70:	7afa      	ldrb	r2, [r7, #11]
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e


	if (status == VL53L1_ERROR_NONE)
 8004e78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d106      	bne.n	8004e8e <VL53L1_run_device_test+0x5a>
		status = VL53L1_start_test(
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	4619      	mov	r1, r3
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f007 fb39 	bl	800c4fc <VL53L1_start_test>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53L1_ERROR_NONE)
 8004e8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d104      	bne.n	8004ea0 <VL53L1_run_device_test+0x6c>
		status = VL53L1_wait_for_test_completion(Dev);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f00f ff5c 	bl	8014d54 <VL53L1_wait_for_test_completion>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8004ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d108      	bne.n	8004eba <VL53L1_run_device_test+0x86>
		status =
			VL53L1_ReadMulti(
 8004ea8:	f107 020c 	add.w	r2, r7, #12
 8004eac:	2302      	movs	r3, #2
 8004eae:	2189      	movs	r1, #137	; 0x89
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f010 fccd 	bl	8015850 <VL53L1_ReadMulti>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8004eba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d107      	bne.n	8004ed2 <VL53L1_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8004ec2:	7b3a      	ldrb	r2, [r7, #12]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		pdev->sys_results.result__report_status = comms_buffer[1];
 8004eca:	7b7a      	ldrb	r2, [r7, #13]
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
	}



	pdev->sys_results.result__range_status &=
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8004ed8:	f003 031f 	and.w	r3, r3, #31
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 8004ee4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d108      	bne.n	8004efe <VL53L1_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53L1_ERROR_NONE)
 8004eec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d104      	bne.n	8004efe <VL53L1_run_device_test+0xca>
			status = VL53L1_clear_interrupt(Dev);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f007 fba1 	bl	800c63c <VL53L1_clear_interrupt>
 8004efa:	4603      	mov	r3, r0
 8004efc:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53L1_ERROR_NONE)
 8004efe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d105      	bne.n	8004f12 <VL53L1_run_device_test+0xde>
		status =
			VL53L1_start_test(
 8004f06:	2100      	movs	r1, #0
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f007 faf7 	bl	800c4fc <VL53L1_start_test>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8004f12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <select_offset_per_vcsel>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53L1_MAX_I2C_XFER_SIZE 256

static VL53L1_Error select_offset_per_vcsel(VL53L1_LLDriverData_t *pdev,
		int16_t *poffset) {
 8004f1e:	b480      	push	{r7}
 8004f20:	b085      	sub	sp, #20
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	785b      	ldrb	r3, [r3, #1]
 8004f30:	2b21      	cmp	r3, #33	; 0x21
 8004f32:	d006      	beq.n	8004f42 <select_offset_per_vcsel+0x24>
 8004f34:	2b21      	cmp	r3, #33	; 0x21
 8004f36:	dc2b      	bgt.n	8004f90 <select_offset_per_vcsel+0x72>
 8004f38:	2b1b      	cmp	r3, #27
 8004f3a:	d01c      	beq.n	8004f76 <select_offset_per_vcsel+0x58>
 8004f3c:	2b1e      	cmp	r3, #30
 8004f3e:	d00d      	beq.n	8004f5c <select_offset_per_vcsel+0x3e>
 8004f40:	e026      	b.n	8004f90 <select_offset_per_vcsel+0x72>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f48:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	; 0xc48
 8004f4c:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f54:	f8b3 3c4a 	ldrh.w	r3, [r3, #3146]	; 0xc4a
 8004f58:	817b      	strh	r3, [r7, #10]
		break;
 8004f5a:	e02b      	b.n	8004fb4 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f62:	f8b3 3c4c 	ldrh.w	r3, [r3, #3148]	; 0xc4c
 8004f66:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f6e:	f8b3 3c4e 	ldrh.w	r3, [r3, #3150]	; 0xc4e
 8004f72:	817b      	strh	r3, [r7, #10]
		break;
 8004f74:	e01e      	b.n	8004fb4 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f7c:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8004f80:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f88:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8004f8c:	817b      	strh	r3, [r7, #10]
		break;
 8004f8e:	e011      	b.n	8004fb4 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f96:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8004f9a:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa2:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8004fa6:	817b      	strh	r3, [r7, #10]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004fa8:	23fc      	movs	r3, #252	; 0xfc
 8004faa:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	801a      	strh	r2, [r3, #0]
		break;
 8004fb2:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004fba:	727b      	strb	r3, [r7, #9]
	if (status == VL53L1_ERROR_NONE)
 8004fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10b      	bne.n	8004fdc <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8004fc4:	7a7b      	ldrb	r3, [r7, #9]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <select_offset_per_vcsel+0xb6>
 8004fce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004fd2:	e001      	b.n	8004fd8 <select_offset_per_vcsel+0xba>
 8004fd4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	8013      	strh	r3, [r2, #0]

	return status;
 8004fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <vl53l1_diff_histo_stddev>:

static void vl53l1_diff_histo_stddev(VL53L1_LLDriverData_t *pdev,
	VL53L1_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8004fec:	b490      	push	{r4, r7}
 8004fee:	b08a      	sub	sp, #40	; 0x28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	71fb      	strb	r3, [r7, #7]
 8004ffe:	4613      	mov	r3, r2
 8005000:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8005006:	2300      	movs	r3, #0
 8005008:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8005012:	2300      	movs	r3, #0
 8005014:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	b29b      	uxth	r3, r3
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800501e:	e021      	b.n	8005064 <vl53l1_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8005020:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	461a      	mov	r2, r3
 800502c:	0052      	lsls	r2, r2, #1
 800502e:	441a      	add	r2, r3
 8005030:	00d3      	lsls	r3, r2, #3
 8005032:	461a      	mov	r2, r3
 8005034:	460b      	mov	r3, r1
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	440b      	add	r3, r1
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	4413      	add	r3, r2
 800503e:	4423      	add	r3, r4
 8005040:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8005044:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8005048:	6a3a      	ldr	r2, [r7, #32]
 800504a:	4413      	add	r3, r2
 800504c:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 800504e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	3206      	adds	r2, #6
 8005054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 800505e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005060:	3301      	adds	r3, #1
 8005062:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005064:	79bb      	ldrb	r3, [r7, #6]
 8005066:	b29b      	uxth	r3, r3
 8005068:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800506a:	429a      	cmp	r2, r3
 800506c:	d3d8      	bcc.n	8005020 <vl53l1_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d047      	beq.n	8005104 <vl53l1_diff_histo_stddev+0x118>
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d044      	beq.n	8005104 <vl53l1_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	b29b      	uxth	r3, r3
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005082:	e03a      	b.n	80050fa <vl53l1_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8005084:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	461a      	mov	r2, r3
 8005090:	0052      	lsls	r2, r2, #1
 8005092:	441a      	add	r2, r3
 8005094:	00d3      	lsls	r3, r2, #3
 8005096:	461a      	mov	r2, r3
 8005098:	460b      	mov	r3, r1
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	440b      	add	r3, r1
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	4413      	add	r3, r2
 80050a2:	4423      	add	r3, r4
 80050a4:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80050a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80050ac:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050b4:	fb03 f202 	mul.w	r2, r3, r2
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80050be:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 80050c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	3206      	adds	r2, #6
 80050c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050ce:	fb03 f202 	mul.w	r2, r3, r2
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80050d8:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 80050da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	69b9      	ldr	r1, [r7, #24]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 80050e4:	69b8      	ldr	r0, [r7, #24]
 80050e6:	6979      	ldr	r1, [r7, #20]
 80050e8:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 80050ea:	fb01 f303 	mul.w	r3, r1, r3
 80050ee:	441a      	add	r2, r3
 80050f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f2:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 80050f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050f6:	3301      	adds	r3, #1
 80050f8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80050fa:	79bb      	ldrb	r3, [r7, #6]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005100:	429a      	cmp	r2, r3
 8005102:	d3bf      	bcc.n	8005084 <vl53l1_diff_histo_stddev+0x98>
	}
}
 8005104:	bf00      	nop
 8005106:	3728      	adds	r7, #40	; 0x28
 8005108:	46bd      	mov	sp, r7
 800510a:	bc90      	pop	{r4, r7}
 800510c:	4770      	bx	lr

0800510e <vl53l1_histo_merge>:

static void vl53l1_histo_merge(VL53L1_DEV Dev,
		VL53L1_histogram_bin_data_t *pdata) {
 800510e:	b5b0      	push	{r4, r5, r7, lr}
 8005110:	b08c      	sub	sp, #48	; 0x30
 8005112:	af02      	add	r7, sp, #8
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev =
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3318      	adds	r3, #24
 800511c:	61fb      	str	r3, [r7, #28]
			VL53L1DevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 800511e:	2300      	movs	r3, #0
 8005120:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 800512c:	2300      	movs	r3, #0
 800512e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 8005132:	2300      	movs	r3, #0
 8005134:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800513e:	2318      	movs	r3, #24
 8005140:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8005142:	f107 0314 	add.w	r3, r7, #20
 8005146:	461a      	mov	r2, r3
 8005148:	f248 018f 	movw	r1, #32911	; 0x808f
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f003 f9fb 	bl	8008548 <VL53L1_get_tuning_parm>
			&TuningBinRecSize);

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8005152:	f107 0310 	add.w	r3, r7, #16
 8005156:	461a      	mov	r2, r3
 8005158:	f248 018e 	movw	r1, #32910	; 0x808e
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f003 f9f3 	bl	8008548 <VL53L1_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005168:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 800516c:	2b00      	cmp	r3, #0
 800516e:	f040 811b 	bne.w	80053a8 <vl53l1_histo_merge+0x29a>

		timing = 1 - pdata->result__stream_count % 2;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 800518c:	7efb      	ldrb	r3, [r7, #27]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	b2db      	uxtb	r3, r3
 8005192:	7eba      	ldrb	r2, [r7, #26]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800519e:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d008      	beq.n	80051b8 <vl53l1_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ac:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80051b0:	3b01      	subs	r3, #1
 80051b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b6:	e004      	b.n	80051c2 <vl53l1_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 80051c2:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80051c6:	7efb      	ldrb	r3, [r7, #27]
 80051c8:	69f8      	ldr	r0, [r7, #28]
 80051ca:	461a      	mov	r2, r3
 80051cc:	0052      	lsls	r2, r2, #1
 80051ce:	441a      	add	r2, r3
 80051d0:	0153      	lsls	r3, r2, #5
 80051d2:	461a      	mov	r2, r3
 80051d4:	460b      	mov	r3, r1
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	440b      	add	r3, r1
 80051da:	019b      	lsls	r3, r3, #6
 80051dc:	4413      	add	r3, r2
 80051de:	4403      	add	r3, r0
 80051e0:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 80051e4:	3308      	adds	r3, #8
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	dd0c      	ble.n	8005206 <vl53l1_histo_merge+0xf8>
			vl53l1_diff_histo_stddev(pdev, pdata,
 80051ec:	7e79      	ldrb	r1, [r7, #25]
 80051ee:	7efa      	ldrb	r2, [r7, #27]
 80051f0:	f107 030c 	add.w	r3, r7, #12
 80051f4:	9301      	str	r3, [sp, #4]
 80051f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	460b      	mov	r3, r1
 80051fe:	6839      	ldr	r1, [r7, #0]
 8005200:	69f8      	ldr	r0, [r7, #28]
 8005202:	f7ff fef3 	bl	8004fec <vl53l1_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	429a      	cmp	r2, r3
 800520c:	db23      	blt.n	8005256 <vl53l1_histo_merge+0x148>
			memset(pdev->multi_bins_rec, 0,
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8005214:	3318      	adds	r3, #24
 8005216:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f015 fd15 	bl	801ac4c <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

			recom_been_reset = 1;
 800522e:	2301      	movs	r3, #1
 8005230:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8005234:	7efb      	ldrb	r3, [r7, #27]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <vl53l1_histo_merge+0x13a>
				pdev->pos_before_next_recom =
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005240:	2206      	movs	r2, #6
 8005242:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8005246:	e034      	b.n	80052b2 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800524e:	2207      	movs	r2, #7
 8005250:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8005254:	e02d      	b.n	80052b2 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800525c:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8005260:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8005262:	2300      	movs	r3, #0
 8005264:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005268:	e01e      	b.n	80052a8 <vl53l1_histo_merge+0x19a>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 800526a:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 800526e:	7e39      	ldrb	r1, [r7, #24]
 8005270:	7efb      	ldrb	r3, [r7, #27]
 8005272:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	3006      	adds	r0, #6
 800527a:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 800527e:	69f8      	ldr	r0, [r7, #28]
 8005280:	461a      	mov	r2, r3
 8005282:	0052      	lsls	r2, r2, #1
 8005284:	441a      	add	r2, r3
 8005286:	00d3      	lsls	r3, r2, #3
 8005288:	461a      	mov	r2, r3
 800528a:	460b      	mov	r3, r1
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	440b      	add	r3, r1
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	4413      	add	r3, r2
 8005294:	442b      	add	r3, r5
 8005296:	f203 7316 	addw	r3, r3, #1814	; 0x716
 800529a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 800529e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80052a2:	3301      	adds	r3, #1
 80052a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80052a8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80052ac:	7ebb      	ldrb	r3, [r7, #26]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d3db      	bcc.n	800526a <vl53l1_histo_merge+0x15c>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b8:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80052bc:	461a      	mov	r2, r3
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d109      	bne.n	80052da <vl53l1_histo_merge+0x1cc>
 80052c6:	7efb      	ldrb	r3, [r7, #27]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d106      	bne.n	80052da <vl53l1_histo_merge+0x1cc>
			pdev->bin_rec_pos = 0;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
 80052d8:	e00e      	b.n	80052f8 <vl53l1_histo_merge+0x1ea>
		else if (timing == 1)
 80052da:	7efb      	ldrb	r3, [r7, #27]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d10b      	bne.n	80052f8 <vl53l1_histo_merge+0x1ea>
			pdev->bin_rec_pos++;
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e6:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80052ea:	3301      	adds	r3, #1
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f4:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 80052f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d102      	bne.n	8005306 <vl53l1_histo_merge+0x1f8>
 8005300:	7efb      	ldrb	r3, [r7, #27]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d069      	beq.n	80053da <vl53l1_histo_merge+0x2cc>
			 (pdev->pos_before_next_recom == 0)) {
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530c:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8005310:	2b00      	cmp	r3, #0
 8005312:	d162      	bne.n	80053da <vl53l1_histo_merge+0x2cc>

			for (bin = 0; bin < BuffSize; bin++)
 8005314:	2300      	movs	r3, #0
 8005316:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005318:	e008      	b.n	800532c <vl53l1_histo_merge+0x21e>
				pdata->bin_data[bin] = 0;
 800531a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	3206      	adds	r2, #6
 8005320:	2100      	movs	r1, #0
 8005322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8005326:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005328:	3301      	adds	r3, #1
 800532a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800532c:	7ebb      	ldrb	r3, [r7, #26]
 800532e:	b29b      	uxth	r3, r3
 8005330:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005332:	429a      	cmp	r2, r3
 8005334:	d3f1      	bcc.n	800531a <vl53l1_histo_merge+0x20c>

			for (bin = 0; bin < BuffSize; bin++)
 8005336:	2300      	movs	r3, #0
 8005338:	84fb      	strh	r3, [r7, #38]	; 0x26
 800533a:	e02f      	b.n	800539c <vl53l1_histo_merge+0x28e>
				for (i = 0; i < TuningBinRecSize; i++)
 800533c:	2300      	movs	r3, #0
 800533e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005342:	e023      	b.n	800538c <vl53l1_histo_merge+0x27e>
					pdata->bin_data[bin] +=
 8005344:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	3206      	adds	r2, #6
 800534a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 800534e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8005352:	7efb      	ldrb	r3, [r7, #27]
 8005354:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8005356:	69fc      	ldr	r4, [r7, #28]
 8005358:	461a      	mov	r2, r3
 800535a:	0052      	lsls	r2, r2, #1
 800535c:	441a      	add	r2, r3
 800535e:	00d3      	lsls	r3, r2, #3
 8005360:	461a      	mov	r2, r3
 8005362:	460b      	mov	r3, r1
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	440b      	add	r3, r1
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	4413      	add	r3, r2
 800536c:	442b      	add	r3, r5
 800536e:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8005372:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8005376:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005378:	18c1      	adds	r1, r0, r3
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	3206      	adds	r2, #6
 800537e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8005382:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005386:	3301      	adds	r3, #1
 8005388:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800538c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	429a      	cmp	r2, r3
 8005394:	dbd6      	blt.n	8005344 <vl53l1_histo_merge+0x236>
			for (bin = 0; bin < BuffSize; bin++)
 8005396:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005398:	3301      	adds	r3, #1
 800539a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800539c:	7ebb      	ldrb	r3, [r7, #26]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d3ca      	bcc.n	800533c <vl53l1_histo_merge+0x22e>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 80053a6:	e018      	b.n	80053da <vl53l1_histo_merge+0x2cc>
		pdev->pos_before_next_recom--;
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ae:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053bc:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
		if (pdev->pos_before_next_recom == 255)
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053c6:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 80053ca:	2bff      	cmp	r3, #255	; 0xff
 80053cc:	d105      	bne.n	80053da <vl53l1_histo_merge+0x2cc>
			pdev->pos_before_next_recom = 0;
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
}
 80053da:	bf00      	nop
 80053dc:	3728      	adds	r7, #40	; 0x28
 80053de:	46bd      	mov	sp, r7
 80053e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080053e4 <VL53L1_load_patch>:

VL53L1_Error VL53L1_load_patch(
	VL53L1_DEV Dev) {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b0c6      	sub	sp, #280	; 0x118
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80053ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80053f2:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80053f4:	2300      	movs	r3, #0
 80053f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8005400:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10b      	bne.n	8005420 <VL53L1_load_patch+0x3c>
		status = VL53L1_WrByte(Dev,
 8005408:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800540c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005410:	2200      	movs	r2, #0
 8005412:	2185      	movs	r1, #133	; 0x85
 8005414:	6818      	ldr	r0, [r3, #0]
 8005416:	f010 fa51 	bl	80158bc <VL53L1_WrByte>
 800541a:	4603      	mov	r3, r0
 800541c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8005420:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8005424:	2b00      	cmp	r3, #0
 8005426:	d106      	bne.n	8005436 <VL53L1_load_patch+0x52>
		VL53L1_enable_powerforce(Dev);
 8005428:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800542c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	f007 f8df 	bl	800c5f4 <VL53L1_enable_powerforce>

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 8005436:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800543a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800543e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005442:	f248 018c 	movw	r1, #32908	; 0x808c
 8005446:	6818      	ldr	r0, [r3, #0]
 8005448:	f003 f87e 	bl	8008548 <VL53L1_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 800544c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005450:	2b03      	cmp	r3, #3
 8005452:	d81b      	bhi.n	800548c <VL53L1_load_patch+0xa8>
 8005454:	a201      	add	r2, pc, #4	; (adr r2, 800545c <VL53L1_load_patch+0x78>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	0800546d 	.word	0x0800546d
 8005460:	08005475 	.word	0x08005475
 8005464:	0800547d 	.word	0x0800547d
 8005468:	08005485 	.word	0x08005485
	case 0:
		patch_power = 0x00;
 800546c:	2300      	movs	r3, #0
 800546e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8005472:	e00e      	b.n	8005492 <VL53L1_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 8005474:	2310      	movs	r3, #16
 8005476:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800547a:	e00a      	b.n	8005492 <VL53L1_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 800547c:	2320      	movs	r3, #32
 800547e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8005482:	e006      	b.n	8005492 <VL53L1_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 8005484:	2340      	movs	r3, #64	; 0x40
 8005486:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800548a:	e002      	b.n	8005492 <VL53L1_load_patch+0xae>
	default:
		patch_power = 0x00;
 800548c:	2300      	movs	r3, #0
 800548e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53L1_ERROR_NONE) {
 8005492:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8005496:	2b00      	cmp	r3, #0
 8005498:	d134      	bne.n	8005504 <VL53L1_load_patch+0x120>

		comms_buffer[0] = 0x29;
 800549a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800549e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054a2:	2229      	movs	r2, #41	; 0x29
 80054a4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80054a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80054aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054ae:	22c9      	movs	r2, #201	; 0xc9
 80054b0:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 80054b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80054b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054ba:	220e      	movs	r2, #14
 80054bc:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 80054be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80054c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054c6:	2240      	movs	r2, #64	; 0x40
 80054c8:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 80054ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80054ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054d2:	2228      	movs	r2, #40	; 0x28
 80054d4:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 80054d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80054e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054e4:	715a      	strb	r2, [r3, #5]

		status = VL53L1_WriteMulti(Dev,
 80054e6:	f107 020c 	add.w	r2, r7, #12
 80054ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80054ee:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80054f2:	2306      	movs	r3, #6
 80054f4:	f240 4176 	movw	r1, #1142	; 0x476
 80054f8:	6800      	ldr	r0, [r0, #0]
 80054fa:	f010 f973 	bl	80157e4 <VL53L1_WriteMulti>
 80054fe:	4603      	mov	r3, r0
 8005500:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8005504:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8005508:	2b00      	cmp	r3, #0
 800550a:	d132      	bne.n	8005572 <VL53L1_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 800550c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005510:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005514:	2203      	movs	r2, #3
 8005516:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8005518:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800551c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005520:	226d      	movs	r2, #109	; 0x6d
 8005522:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8005524:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005528:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800552c:	2203      	movs	r2, #3
 800552e:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8005530:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005534:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005538:	226f      	movs	r2, #111	; 0x6f
 800553a:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800553c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005540:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005544:	2207      	movs	r2, #7
 8005546:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8005548:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800554c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005550:	2229      	movs	r2, #41	; 0x29
 8005552:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(Dev,
 8005554:	f107 020c 	add.w	r2, r7, #12
 8005558:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800555c:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8005560:	2306      	movs	r3, #6
 8005562:	f240 4196 	movw	r1, #1174	; 0x496
 8005566:	6800      	ldr	r0, [r0, #0]
 8005568:	f010 f93c 	bl	80157e4 <VL53L1_WriteMulti>
 800556c:	4603      	mov	r3, r0
 800556e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8005572:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8005576:	2b00      	cmp	r3, #0
 8005578:	d11a      	bne.n	80055b0 <VL53L1_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 800557a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800557e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8005586:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800558a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800558e:	2207      	movs	r2, #7
 8005590:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 8005592:	f107 020c 	add.w	r2, r7, #12
 8005596:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800559a:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800559e:	2302      	movs	r3, #2
 80055a0:	f240 4172 	movw	r1, #1138	; 0x472
 80055a4:	6800      	ldr	r0, [r0, #0]
 80055a6:	f010 f91d 	bl	80157e4 <VL53L1_WriteMulti>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE) {
 80055b0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d11a      	bne.n	80055ee <VL53L1_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 80055b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80055bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80055c0:	2200      	movs	r2, #0
 80055c2:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80055c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80055c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80055cc:	2207      	movs	r2, #7
 80055ce:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 80055d0:	f107 020c 	add.w	r2, r7, #12
 80055d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80055d8:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80055dc:	2302      	movs	r3, #2
 80055de:	f240 4174 	movw	r1, #1140	; 0x474
 80055e2:	6800      	ldr	r0, [r0, #0]
 80055e4:	f010 f8fe 	bl	80157e4 <VL53L1_WriteMulti>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE)
 80055ee:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10c      	bne.n	8005610 <VL53L1_load_patch+0x22c>
		status = VL53L1_WrByte(Dev,
 80055f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80055fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80055fe:	2201      	movs	r2, #1
 8005600:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	f010 f959 	bl	80158bc <VL53L1_WrByte>
 800560a:	4603      	mov	r3, r0
 800560c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__CTRL, 0x01);

	if (status == VL53L1_ERROR_NONE)
 8005610:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10b      	bne.n	8005630 <VL53L1_load_patch+0x24c>
		status = VL53L1_WrByte(Dev,
 8005618:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800561c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005620:	2201      	movs	r2, #1
 8005622:	2185      	movs	r1, #133	; 0x85
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	f010 f949 	bl	80158bc <VL53L1_WrByte>
 800562a:	4603      	mov	r3, r0
 800562c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8005630:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8005634:	4618      	mov	r0, r3
 8005636:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop

08005640 <VL53L1_unload_patch>:

VL53L1_Error VL53L1_unload_patch(
	VL53L1_DEV Dev) {
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005648:	2300      	movs	r3, #0
 800564a:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800564c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d106      	bne.n	8005662 <VL53L1_unload_patch+0x22>
		status = VL53L1_WrByte(Dev,
 8005654:	2200      	movs	r2, #0
 8005656:	2185      	movs	r1, #133	; 0x85
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f010 f92f 	bl	80158bc <VL53L1_WrByte>
 800565e:	4603      	mov	r3, r0
 8005660:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8005662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d102      	bne.n	8005670 <VL53L1_unload_patch+0x30>
		VL53L1_disable_powerforce(Dev);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f006 ffd4 	bl	800c618 <VL53L1_disable_powerforce>

	if (status == VL53L1_ERROR_NONE)
 8005670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d107      	bne.n	8005688 <VL53L1_unload_patch+0x48>
		status = VL53L1_WrByte(Dev,
 8005678:	2200      	movs	r2, #0
 800567a:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f010 f91c 	bl	80158bc <VL53L1_WrByte>
 8005684:	4603      	mov	r3, r0
 8005686:	73fb      	strb	r3, [r7, #15]
		VL53L1_PATCH__CTRL, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8005688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <VL53L1_unload_patch+0x5e>
		status = VL53L1_WrByte(Dev,
 8005690:	2201      	movs	r2, #1
 8005692:	2185      	movs	r1, #133	; 0x85
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f010 f911 	bl	80158bc <VL53L1_WrByte>
 800569a:	4603      	mov	r3, r0
 800569c:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800569e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 80056aa:	b5b0      	push	{r4, r5, r7, lr}
 80056ac:	b08a      	sub	sp, #40	; 0x28
 80056ae:	af04      	add	r7, sp, #16
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	460b      	mov	r3, r1
 80056b4:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t    *pdev =
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3318      	adds	r3, #24
 80056be:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80056c6:	3308      	adds	r3, #8
 80056c8:	60fb      	str	r3, [r7, #12]



	VL53L1_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53L1_init_ll_driver_state(
 80056ce:	2162      	movs	r1, #98	; 0x62
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f006 f810 	bl	800b6f6 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2204      	movs	r2, #4
 80056da:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2210      	movs	r2, #16
 80056e6:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80056f2:	2300      	movs	r3, #0
 80056f4:	75bb      	strb	r3, [r7, #22]
 80056f6:	e01b      	b.n	8005730 <VL53L1_data_init+0x86>
		pobjects = &(pres->zone_results.VL53L1_p_002[i]);
 80056f8:	7dba      	ldrb	r2, [r7, #22]
 80056fa:	4613      	mov	r3, r2
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4413      	add	r3, r2
 800570a:	3308      	adds	r3, #8
 800570c:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53L1_p_020 = 0;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2200      	movs	r2, #0
 8005712:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53L1_p_021  = 0;
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2200      	movs	r2, #0
 8005718:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53L1_p_014          = 0;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2200      	movs	r2, #0
 800571e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800572a:	7dbb      	ldrb	r3, [r7, #22]
 800572c:	3301      	adds	r3, #1
 800572e:	75bb      	strb	r3, [r7, #22]
 8005730:	7dbb      	ldrb	r3, [r7, #22]
 8005732:	2b0f      	cmp	r3, #15
 8005734:	d9e0      	bls.n	80056f8 <VL53L1_data_init+0x4e>
				VL53L1_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2210      	movs	r2, #16
 800573a:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2210      	movs	r2, #16
 800574a:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8005756:	2300      	movs	r3, #0
 8005758:	75bb      	strb	r3, [r7, #22]
 800575a:	e039      	b.n	80057d0 <VL53L1_data_init+0x126>
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 800575c:	7dba      	ldrb	r2, [r7, #22]
 800575e:	68f9      	ldr	r1, [r7, #12]
 8005760:	4613      	mov	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	1a9b      	subs	r3, r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 8005772:	7dba      	ldrb	r2, [r7, #22]
 8005774:	68f9      	ldr	r1, [r7, #12]
 8005776:	4613      	mov	r3, r2
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	1a9b      	subs	r3, r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	440b      	add	r3, r1
 8005780:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 8005788:	7dba      	ldrb	r2, [r7, #22]
 800578a:	68f9      	ldr	r1, [r7, #12]
 800578c:	4613      	mov	r3, r2
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	1a9b      	subs	r3, r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].median_range_mm = 0;
 800579e:	7dba      	ldrb	r2, [r7, #22]
 80057a0:	68f9      	ldr	r1, [r7, #12]
 80057a2:	4613      	mov	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	1a9b      	subs	r3, r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 80057b4:	7dba      	ldrb	r2, [r7, #22]
 80057b6:	68f9      	ldr	r1, [r7, #12]
 80057b8:	4613      	mov	r3, r2
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	1a9b      	subs	r3, r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	440b      	add	r3, r1
 80057c2:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80057ca:	7dbb      	ldrb	r3, [r7, #22]
 80057cc:	3301      	adds	r3, #1
 80057ce:	75bb      	strb	r3, [r7, #22]
 80057d0:	7dbb      	ldrb	r3, [r7, #22]
 80057d2:	2b0f      	cmp	r3, #15
 80057d4:	d9c2      	bls.n	800575c <VL53L1_data_init+0xb2>
	}

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2200      	movs	r2, #0
 80057da:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2201      	movs	r2, #1
 80057e0:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = VL53L1_DEVICEZONEPRESET_NONE;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2200      	movs	r2, #0
 80057e6:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2200      	movs	r2, #0
 80057ec:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2201      	movs	r2, #1
 80057f2:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	2201      	movs	r2, #1
 80057f8:	715a      	strb	r2, [r3, #5]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	2201      	movs	r2, #1
 80057fe:	719a      	strb	r2, [r3, #6]
		VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005806:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800580e:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8005816:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	2264      	movs	r2, #100	; 0x64
 800581c:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005824:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005834:	2203      	movs	r2, #3
 8005836:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	pdev->offset_results.active_results = 0;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327



	pdev->gain_cal.standard_ranging_gain_factor =
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f240 72db 	movw	r2, #2011	; 0x7db
 800584c:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8005856:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53L1_init_version(Dev);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f005 ff2e 	bl	800b6bc <VL53L1_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8005866:	3318      	adds	r3, #24
 8005868:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800586c:	2100      	movs	r1, #0
 800586e:	4618      	mov	r0, r3
 8005870:	f015 f9ec 	bl	801ac4c <memset>
	pdev->bin_rec_pos = 0;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
	pdev->pos_before_next_recom = 0;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55



	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 800588c:	78fb      	ldrb	r3, [r7, #3]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d008      	beq.n	80058a4 <VL53L1_data_init+0x1fa>
 8005892:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d104      	bne.n	80058a4 <VL53L1_data_init+0x1fa>
		status = VL53L1_read_p2p_data(Dev);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f8b8 	bl	8005a10 <VL53L1_read_p2p_data>
 80058a0:	4603      	mov	r3, r0
 80058a2:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 80058a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d107      	bne.n	80058bc <VL53L1_data_init+0x212>
		status = VL53L1_init_refspadchar_config_struct(
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80058b2:	4618      	mov	r0, r3
 80058b4:	f003 fdf8 	bl	80094a8 <VL53L1_init_refspadchar_config_struct>
 80058b8:	4603      	mov	r3, r0
 80058ba:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53L1_ERROR_NONE)
 80058bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d107      	bne.n	80058d4 <VL53L1_data_init+0x22a>
		status = VL53L1_init_ssc_config_struct(
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80058ca:	4618      	mov	r0, r3
 80058cc:	f003 fe10 	bl	80094f0 <VL53L1_init_ssc_config_struct>
 80058d0:	4603      	mov	r3, r0
 80058d2:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53L1_ERROR_NONE)
 80058d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10b      	bne.n	80058f4 <VL53L1_data_init+0x24a>
		status = VL53L1_init_xtalk_config_struct(
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80058e8:	4619      	mov	r1, r3
 80058ea:	4610      	mov	r0, r2
 80058ec:	f003 fe21 	bl	8009532 <VL53L1_init_xtalk_config_struct>
 80058f0:	4603      	mov	r3, r0
 80058f2:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53L1_ERROR_NONE)
 80058f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d107      	bne.n	800590c <VL53L1_data_init+0x262>
		status = VL53L1_init_xtalk_extract_config_struct(
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8005902:	4618      	mov	r0, r3
 8005904:	f003 fe89 	bl	800961a <VL53L1_init_xtalk_extract_config_struct>
 8005908:	4603      	mov	r3, r0
 800590a:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53L1_ERROR_NONE)
 800590c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d107      	bne.n	8005924 <VL53L1_data_init+0x27a>
		status = VL53L1_init_offset_cal_config_struct(
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800591a:	4618      	mov	r0, r3
 800591c:	f003 feac 	bl	8009678 <VL53L1_init_offset_cal_config_struct>
 8005920:	4603      	mov	r3, r0
 8005922:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8005924:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d107      	bne.n	800593c <VL53L1_data_init+0x292>
		status = VL53L1_init_zone_cal_config_struct(
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8005932:	4618      	mov	r0, r3
 8005934:	f003 fec7 	bl	80096c6 <VL53L1_init_zone_cal_config_struct>
 8005938:	4603      	mov	r3, r0
 800593a:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53L1_ERROR_NONE)
 800593c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10b      	bne.n	800595c <VL53L1_data_init+0x2b2>
		status = VL53L1_init_hist_post_process_config_struct(
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005950:	4619      	mov	r1, r3
 8005952:	4610      	mov	r0, r2
 8005954:	f003 fedb 	bl	800970e <VL53L1_init_hist_post_process_config_struct>
 8005958:	4603      	mov	r3, r0
 800595a:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53L1_ERROR_NONE)
 800595c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d107      	bne.n	8005974 <VL53L1_data_init+0x2ca>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800596a:	4618      	mov	r0, r3
 800596c:	f004 f8f6 	bl	8009b5c <VL53L1_init_hist_gen3_dmax_config_struct>
 8005970:	4603      	mov	r3, r0
 8005972:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53L1_ERROR_NONE)
 8005974:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d107      	bne.n	800598c <VL53L1_data_init+0x2e2>
		status = VL53L1_init_tuning_parm_storage_struct(
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005982:	4618      	mov	r0, r3
 8005984:	f003 ff32 	bl	80097ec <VL53L1_init_tuning_parm_storage_struct>
 8005988:	4603      	mov	r3, r0
 800598a:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53L1_ERROR_NONE)
 800598c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d116      	bne.n	80059c2 <VL53L1_data_init+0x318>
		status = VL53L1_set_preset_mode(
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	7858      	ldrb	r0, [r3, #1]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	8b1c      	ldrh	r4, [r3, #24]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	689d      	ldr	r5, [r3, #8]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	6912      	ldr	r2, [r2, #16]
 80059a8:	6939      	ldr	r1, [r7, #16]
 80059aa:	6949      	ldr	r1, [r1, #20]
 80059ac:	9102      	str	r1, [sp, #8]
 80059ae:	9201      	str	r2, [sp, #4]
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	462b      	mov	r3, r5
 80059b4:	4622      	mov	r2, r4
 80059b6:	4601      	mov	r1, r0
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fc8f 	bl	80062dc <VL53L1_set_preset_mode>
 80059be:	4603      	mov	r3, r0
 80059c0:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53L1_init_histogram_bin_data_struct(
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80059c8:	461a      	mov	r2, r3
 80059ca:	2118      	movs	r1, #24
 80059cc:	2000      	movs	r0, #0
 80059ce:	f00a fa90 	bl	800fef2 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53L1_init_histogram_bin_data_struct(
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80059d8:	461a      	mov	r2, r3
 80059da:	2118      	movs	r1, #24
 80059dc:	2000      	movs	r0, #0
 80059de:	f00a fa88 	bl	800fef2 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53L1_init_xtalk_bin_data_struct(
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 80059e8:	461a      	mov	r2, r3
 80059ea:	210c      	movs	r1, #12
 80059ec:	2000      	movs	r0, #0
 80059ee:	f006 fc26 	bl	800c23e <VL53L1_init_xtalk_bin_data_struct>
			VL53L1_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53L1_xtalk_cal_data_init(
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f009 fcd2 	bl	800f39c <VL53L1_xtalk_cal_data_init>
			Dev
			);



	VL53L1_dynamic_xtalk_correction_data_init(
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f009 fbd1 	bl	800f1a0 <VL53L1_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53L1_low_power_auto_data_init(
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f009 fcf7 	bl	800f3f2 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8005a04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bdb0      	pop	{r4, r5, r7, pc}

08005a10 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8005a10:	b590      	push	{r4, r7, lr}
 8005a12:	b091      	sub	sp, #68	; 0x44
 8005a14:	af04      	add	r7, sp, #16
 8005a16:	6078      	str	r0, [r7, #4]



	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3318      	adds	r3, #24
 8005a22:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	3348      	adds	r3, #72	; 0x48
 8005a30:	623b      	str	r3, [r7, #32]
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	339c      	adds	r3, #156	; 0x9c
 8005a36:	61fb      	str	r3, [r7, #28]

	VL53L1_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8005a38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d109      	bne.n	8005a54 <VL53L1_read_p2p_data+0x44>
		status = VL53L1_get_static_nvm_managed(
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8005a46:	4619      	mov	r1, r3
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f00d fdd1 	bl	80135f0 <VL53L1_get_static_nvm_managed>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8005a54:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d108      	bne.n	8005a6e <VL53L1_read_p2p_data+0x5e>
		status = VL53L1_get_customer_nvm_managed(
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	3348      	adds	r3, #72	; 0x48
 8005a60:	4619      	mov	r1, r3
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f00d ff02 	bl	801386c <VL53L1_get_customer_nvm_managed>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8005a6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d117      	bne.n	8005aa6 <VL53L1_read_p2p_data+0x96>

		status = VL53L1_get_nvm_copy_data(
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	f203 33d6 	addw	r3, r3, #982	; 0x3d6
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f00e fdda 	bl	8014638 <VL53L1_get_nvm_copy_data>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53L1_ERROR_NONE)
 8005a8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d109      	bne.n	8005aa6 <VL53L1_read_p2p_data+0x96>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	f006 f921 	bl	800bce8 <VL53L1_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53L1_ERROR_NONE) {
 8005aa6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10e      	bne.n	8005acc <VL53L1_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	895b      	ldrh	r3, [r3, #10]
 8005ab2:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53L1_ERROR_NONE)
 8005acc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d108      	bne.n	8005ae6 <VL53L1_read_p2p_data+0xd6>
		status =
			VL53L1_read_nvm_optical_centre(
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	33c0      	adds	r3, #192	; 0xc0
 8005ad8:	4619      	mov	r1, r3
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f00d fc3c 	bl	8013358 <VL53L1_read_nvm_optical_centre>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53L1_ERROR_NONE)
 8005ae6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d108      	bne.n	8005b00 <VL53L1_read_p2p_data+0xf0>
		status =
			VL53L1_read_nvm_cal_peak_rate_map(
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	3360      	adds	r3, #96	; 0x60
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f00d fc52 	bl	801339e <VL53L1_read_nvm_cal_peak_rate_map>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53L1_ERROR_NONE) {
 8005b00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d12d      	bne.n	8005b64 <VL53L1_read_p2p_data+0x154>

		status =
			VL53L1_read_nvm_additional_offset_cal_data(
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	339c      	adds	r3, #156	; 0x9c
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f00d fc6b 	bl	80133ea <VL53L1_read_nvm_additional_offset_cal_data>
 8005b14:	4603      	mov	r3, r0
 8005b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	889b      	ldrh	r3, [r3, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d120      	bne.n	8005b64 <VL53L1_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d11c      	bne.n	8005b64 <VL53L1_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	2280      	movs	r2, #128	; 0x80
 8005b2e:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005b36:	80da      	strh	r2, [r3, #6]



			VL53L1_calc_mm_effective_spads(
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	f893 0406 	ldrb.w	r0, [r3, #1030]	; 0x406
 8005b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b40:	f893 4407 	ldrb.w	r4, [r3, #1031]	; 0x407
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b46:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	69f9      	ldr	r1, [r7, #28]
 8005b4e:	3102      	adds	r1, #2
 8005b50:	9103      	str	r1, [sp, #12]
 8005b52:	9202      	str	r2, [sp, #8]
 8005b54:	2238      	movs	r2, #56	; 0x38
 8005b56:	9201      	str	r2, [sp, #4]
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	23ff      	movs	r3, #255	; 0xff
 8005b5c:	22c7      	movs	r2, #199	; 0xc7
 8005b5e:	4621      	mov	r1, r4
 8005b60:	f008 f934 	bl	800ddcc <VL53L1_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53L1_ERROR_NONE) {
 8005b64:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d12f      	bne.n	8005bcc <VL53L1_read_p2p_data+0x1bc>

		status =
			VL53L1_read_nvm_fmt_range_results_data(
 8005b6c:	f107 030c 	add.w	r3, r7, #12
 8005b70:	461a      	mov	r2, r3
 8005b72:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f00d fc5a 	bl	8013430 <VL53L1_read_nvm_fmt_range_results_data>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53L1_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53L1_ERROR_NONE) {
 8005b82:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d120      	bne.n	8005bcc <VL53L1_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8005b8a:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8005b92:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8005b9a:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d006      	beq.n	8005bba <VL53L1_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8005bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb4:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8005bb8:	e003      	b.n	8005bc2 <VL53L1_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8005bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbc:	2214      	movs	r2, #20
 8005bbe:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bc8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53L1_ERROR_NONE)
 8005bcc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10b      	bne.n	8005bec <VL53L1_read_p2p_data+0x1dc>
		status =
			VL53L1_RdWord(
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005bda:	3308      	adds	r3, #8
 8005bdc:	461a      	mov	r2, r3
 8005bde:	21de      	movs	r1, #222	; 0xde
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f00f fefb 	bl	80159dc <VL53L1_RdWord>
 8005be6:	4603      	mov	r3, r0
 8005be8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L1_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8005bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf6:	d204      	bcs.n	8005c02 <VL53L1_read_p2p_data+0x1f2>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8005bfe:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	}



	if (status == VL53L1_ERROR_NONE)
 8005c02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d108      	bne.n	8005c1c <VL53L1_read_p2p_data+0x20c>
		status =
			VL53L1_get_mode_mitigation_roi(
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	33bc      	adds	r3, #188	; 0xbc
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f97d 	bl	8005f10 <VL53L1_get_mode_mitigation_roi>
 8005c16:	4603      	mov	r3, r0
 8005c18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d114      	bne.n	8005c50 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10f      	bne.n	8005c50 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8005c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c42:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8005c50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3734      	adds	r7, #52	; 0x34
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd90      	pop	{r4, r7, pc}

08005c5c <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005c66:	2300      	movs	r3, #0
 8005c68:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3318      	adds	r3, #24
 8005c6e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c76:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <VL53L1_set_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005c7e:	23f1      	movs	r3, #241	; 0xf1
 8005c80:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8005c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10e      	bne.n	8005ca8 <VL53L1_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c96:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8005c9a:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	}

	LOG_FUNCTION_END(status);

	return status;
 8005ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3318      	adds	r3, #24
 8005cca:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cd2:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <VL53L1_get_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005cda:	23f1      	movs	r3, #241	; 0xf1
 8005cdc:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8005cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <VL53L1_get_inter_measurement_period_ms+0x46>
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cf2:	f8b2 23a8 	ldrh.w	r2, [r2, #936]	; 0x3a8
			pdev->tim_cfg.system__intermeasurement_period /
 8005cf6:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms =
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8005cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b088      	sub	sp, #32
 8005d12:	af02      	add	r7, sp, #8
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	607a      	str	r2, [r7, #4]
 8005d1a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3318      	adds	r3, #24
 8005d24:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <VL53L1_set_timeouts_us+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005d30:	23f1      	movs	r3, #241	; 0xf1
 8005d32:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8005d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d11b      	bne.n	8005d74 <VL53L1_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	611a      	str	r2, [r3, #16]

		status =
		VL53L1_calc_timeout_register_values(
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f8b3 1322 	ldrh.w	r1, [r3, #802]	; 0x322
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f203 3362 	addw	r3, r3, #866	; 0x362
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	f502 725e 	add.w	r2, r2, #888	; 0x378
 8005d60:	9201      	str	r2, [sp, #4]
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	460b      	mov	r3, r1
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	6879      	ldr	r1, [r7, #4]
 8005d6a:	68b8      	ldr	r0, [r7, #8]
 8005d6c:	f006 fe0b 	bl	800c986 <VL53L1_calc_timeout_register_values>
 8005d70:	4603      	mov	r3, r0
 8005d72:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8005d74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3318      	adds	r3, #24
 8005d96:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <VL53L1_get_timeouts_us+0x2e>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005daa:	23f1      	movs	r3, #241	; 0xf1
 8005dac:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8005dae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d14a      	bne.n	8005e4c <VL53L1_get_timeouts_us+0xcc>


		macro_period_us =
			VL53L1_calc_macro_period_us(
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	f006 fc56 	bl	800c676 <VL53L1_calc_macro_period_us>
 8005dca:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
			VL53L1_calc_timeout_us(
 8005dd2:	6979      	ldr	r1, [r7, #20]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f006 fd14 	bl	800c802 <VL53L1_calc_timeout_us>
 8005dda:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
		timeout_encoded =
 8005de6:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8005de8:	8a7b      	ldrh	r3, [r7, #18]
 8005dea:	021b      	lsls	r3, r3, #8
 8005dec:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 8005df4:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8005df6:	4413      	add	r3, r2
 8005df8:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8005dfa:	8a7b      	ldrh	r3, [r7, #18]
 8005dfc:	6979      	ldr	r1, [r7, #20]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f006 fd66 	bl	800c8d0 <VL53L1_calc_decoded_timeout_us>
 8005e04:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
		timeout_encoded =
 8005e10:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8005e12:	8a7b      	ldrh	r3, [r7, #18]
 8005e14:	021b      	lsls	r3, r3, #8
 8005e16:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	f893 337d 	ldrb.w	r3, [r3, #893]	; 0x37d
 8005e1e:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8005e20:	4413      	add	r3, r2
 8005e22:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8005e24:	8a7b      	ldrh	r3, [r7, #18]
 8005e26:	6979      	ldr	r1, [r7, #20]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f006 fd51 	bl	800c8d0 <VL53L1_calc_decoded_timeout_us>
 8005e2e:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8005e4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3720      	adds	r7, #32
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	460b      	mov	r3, r1
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3318      	adds	r3, #24
 8005e6e:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8005e70:	2301      	movs	r3, #1
 8005e72:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8005e74:	7afb      	ldrb	r3, [r7, #11]
 8005e76:	2b07      	cmp	r3, #7
 8005e78:	d81c      	bhi.n	8005eb4 <VL53L1_get_sequence_config_bit+0x5c>

		if (bit_id > 0)
 8005e7a:	7afb      	ldrb	r3, [r7, #11]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d004      	beq.n	8005e8a <VL53L1_get_sequence_config_bit+0x32>
			bit_mask  = 0x01 << bit_id;
 8005e80:	7afb      	ldrb	r3, [r7, #11]
 8005e82:	2201      	movs	r2, #1
 8005e84:	fa02 f303 	lsl.w	r3, r2, r3
 8005e88:	75bb      	strb	r3, [r7, #22]

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f893 23a1 	ldrb.w	r2, [r3, #929]	; 0x3a1
		*pvalue =
 8005e90:	7dbb      	ldrb	r3, [r7, #22]
 8005e92:	4013      	ands	r3, r2
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0)
 8005e9a:	7afb      	ldrb	r3, [r7, #11]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00b      	beq.n	8005eb8 <VL53L1_get_sequence_config_bit+0x60>
			*pvalue  = *pvalue >> bit_id;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	7afb      	ldrb	r3, [r7, #11]
 8005ea8:	fa42 f303 	asr.w	r3, r2, r3
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	701a      	strb	r2, [r3, #0]
 8005eb2:	e001      	b.n	8005eb8 <VL53L1_get_sequence_config_bit+0x60>

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005eb4:	23fc      	movs	r3, #252	; 0xfc
 8005eb6:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8005eb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3318      	adds	r3, #24
 8005eda:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	7858      	ldrb	r0, [r3, #1]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	7819      	ldrb	r1, [r3, #0]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f203 339f 	addw	r3, r3, #927	; 0x39f
 8005eea:	461a      	mov	r2, r3
 8005eec:	f007 fdeb 	bl	800dac6 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	7898      	ldrb	r0, [r3, #2]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	78d9      	ldrb	r1, [r3, #3]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8005efe:	461a      	mov	r2, r3
 8005f00:	f007 fe20 	bl	800db44 <VL53L1_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8005f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3318      	adds	r3, #24
 8005f22:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8005f36:	f107 020e 	add.w	r2, r7, #14
 8005f3a:	f107 010d 	add.w	r1, r7, #13
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f00a f880 	bl	8010044 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8005f44:	7bba      	ldrb	r2, [r7, #14]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8005f4a:	7b7a      	ldrb	r2, [r7, #13]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8005f56:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	091b      	lsrs	r3, r3, #4
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	f003 030f 	and.w	r3, r3, #15
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8005f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005f84:	2300      	movs	r3, #0
 8005f86:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3318      	adds	r3, #24
 8005f8c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	331c      	adds	r3, #28
 8005f98:	2240      	movs	r2, #64	; 0x40
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	f014 fe48 	bl	801ac30 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781a      	ldrb	r2, [r3, #0]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	785a      	ldrb	r2, [r3, #1]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	33c2      	adds	r3, #194	; 0xc2
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f00f fbce 	bl	801575a <VL53L1_init_zone_config_histogram_bins>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	785b      	ldrb	r3, [r3, #1]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d104      	bne.n	8005fd4 <VL53L1_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8005fd2:	e00f      	b.n	8005ff4 <VL53L1_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	785b      	ldrb	r3, [r3, #1]
 8005fd8:	2b0f      	cmp	r3, #15
 8005fda:	d807      	bhi.n	8005fec <VL53L1_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8005fea:	e003      	b.n	8005ff4 <VL53L1_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2211      	movs	r2, #17
 8005ff0:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
				VL53L1_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8005ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800600a:	2300      	movs	r3, #0
 800600c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3318      	adds	r3, #24
 8006012:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	33c2      	adds	r3, #194	; 0xc2
 8006018:	226c      	movs	r2, #108	; 0x6c
 800601a:	4619      	mov	r1, r3
 800601c:	6838      	ldr	r0, [r7, #0]
 800601e:	f014 fe07 	bl	801ac30 <memcpy>

	LOG_FUNCTION_END(status);

	return status;
 8006022:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	607a      	str	r2, [r7, #4]
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	460b      	mov	r3, r1
 800603e:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006040:	2300      	movs	r3, #0
 8006042:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3318      	adds	r3, #24
 8006048:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800604a:	7afb      	ldrb	r3, [r7, #11]
 800604c:	3b01      	subs	r3, #1
 800604e:	2b26      	cmp	r3, #38	; 0x26
 8006050:	f200 8139 	bhi.w	80062c6 <VL53L1_get_preset_mode_timing_cfg+0x296>
 8006054:	a201      	add	r2, pc, #4	; (adr r2, 800605c <VL53L1_get_preset_mode_timing_cfg+0x2c>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	080060f9 	.word	0x080060f9
 8006060:	080060f9 	.word	0x080060f9
 8006064:	080060f9 	.word	0x080060f9
 8006068:	080060f9 	.word	0x080060f9
 800606c:	080060f9 	.word	0x080060f9
 8006070:	08006123 	.word	0x08006123
 8006074:	08006123 	.word	0x08006123
 8006078:	08006123 	.word	0x08006123
 800607c:	080062c7 	.word	0x080062c7
 8006080:	080062c7 	.word	0x080062c7
 8006084:	08006177 	.word	0x08006177
 8006088:	0800621f 	.word	0x0800621f
 800608c:	08006177 	.word	0x08006177
 8006090:	080062c7 	.word	0x080062c7
 8006094:	080062c7 	.word	0x080062c7
 8006098:	080062c7 	.word	0x080062c7
 800609c:	080060f9 	.word	0x080060f9
 80060a0:	08006123 	.word	0x08006123
 80060a4:	08006177 	.word	0x08006177
 80060a8:	08006177 	.word	0x08006177
 80060ac:	08006177 	.word	0x08006177
 80060b0:	08006177 	.word	0x08006177
 80060b4:	08006177 	.word	0x08006177
 80060b8:	080061a1 	.word	0x080061a1
 80060bc:	080061cb 	.word	0x080061cb
 80060c0:	080061f5 	.word	0x080061f5
 80060c4:	08006177 	.word	0x08006177
 80060c8:	08006177 	.word	0x08006177
 80060cc:	08006177 	.word	0x08006177
 80060d0:	08006249 	.word	0x08006249
 80060d4:	08006249 	.word	0x08006249
 80060d8:	08006249 	.word	0x08006249
 80060dc:	08006273 	.word	0x08006273
 80060e0:	08006273 	.word	0x08006273
 80060e4:	08006273 	.word	0x08006273
 80060e8:	0800614d 	.word	0x0800614d
 80060ec:	0800614d 	.word	0x0800614d
 80060f0:	0800614d 	.word	0x0800614d
 80060f4:	0800629d 	.word	0x0800629d
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
		*pdss_config__target_total_rate_mcps =
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*pphasecal_config_timeout_us =
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
		*pmm_config_timeout_us =
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
		*prange_config_timeout_us =
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	601a      	str	r2, [r3, #0]
	break;
 8006120:	e0d4      	b.n	80062cc <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
		*pmm_config_timeout_us =
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
		*prange_config_timeout_us =
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	601a      	str	r2, [r3, #0]
	break;
 800614a:	e0bf      	b.n	80062cc <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
		*pmm_config_timeout_us =
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		*prange_config_timeout_us =
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	601a      	str	r2, [r3, #0]
	break;
 8006174:	e0aa      	b.n	80062cc <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	601a      	str	r2, [r3, #0]

	break;
 800619e:	e095      	b.n	80062cc <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
		*pphasecal_config_timeout_us =
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	601a      	str	r2, [r3, #0]
	break;
 80061c8:	e080      	b.n	80062cc <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
		*pphasecal_config_timeout_us =
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	601a      	str	r2, [r3, #0]
	break;
 80061f2:	e06b      	b.n	80062cc <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
		*pphasecal_config_timeout_us =
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	601a      	str	r2, [r3, #0]
	break;
 800621c:	e056      	b.n	80062cc <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	601a      	str	r2, [r3, #0]
	break;
 8006246:	e041      	b.n	80062cc <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	601a      	str	r2, [r3, #0]
	break;
 8006270:	e02c      	b.n	80062cc <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	601a      	str	r2, [r3, #0]
	break;
 800629a:	e017      	b.n	80062cc <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
		*pdss_config__target_total_rate_mcps =
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	601a      	str	r2, [r3, #0]
	break;
 80062c4:	e002      	b.n	80062cc <VL53L1_get_preset_mode_timing_cfg+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80062c6:	23fc      	movs	r3, #252	; 0xfc
 80062c8:	75fb      	strb	r3, [r7, #23]
		break;
 80062ca:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80062cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b098      	sub	sp, #96	; 0x60
 80062e0:	af06      	add	r7, sp, #24
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	607b      	str	r3, [r7, #4]
 80062e6:	460b      	mov	r3, r1
 80062e8:	72fb      	strb	r3, [r7, #11]
 80062ea:	4613      	mov	r3, r2
 80062ec:	813b      	strh	r3, [r7, #8]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80062ee:	2300      	movs	r3, #0
 80062f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53L1_LLDriverData_t *pdev =
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	3318      	adds	r3, #24
 80062f8:	643b      	str	r3, [r7, #64]	; 0x40
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006300:	3308      	adds	r3, #8
 8006302:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_hist_post_process_config_t *phistpostprocess =
 8006304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006306:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800630a:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800630c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630e:	f203 3342 	addw	r3, r3, #834	; 0x342
 8006312:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8006314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006316:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800631a:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800631c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800631e:	f203 3362 	addw	r3, r3, #866	; 0x362
 8006322:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8006324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006326:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800632a:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800632c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800632e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8006334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006336:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800633a:	623b      	str	r3, [r7, #32]
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 800633c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800633e:	33c2      	adds	r3, #194	; 0xc2
 8006340:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8006342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006344:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8006348:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800634a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800634c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8006350:	3318      	adds	r3, #24
 8006352:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8006354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006356:	7afa      	ldrb	r2, [r7, #11]
 8006358:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800635a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800635c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800635e:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8006360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006362:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006364:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8006366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006368:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800636a:	615a      	str	r2, [r3, #20]



	VL53L1_init_ll_driver_state(
 800636c:	2103      	movs	r1, #3
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f005 f9c1 	bl	800b6f6 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8006374:	7afb      	ldrb	r3, [r7, #11]
 8006376:	3b01      	subs	r3, #1
 8006378:	2b26      	cmp	r3, #38	; 0x26
 800637a:	f200 8321 	bhi.w	80069c0 <VL53L1_set_preset_mode+0x6e4>
 800637e:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <VL53L1_set_preset_mode+0xa8>)
 8006380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006384:	08006421 	.word	0x08006421
 8006388:	08006445 	.word	0x08006445
 800638c:	08006469 	.word	0x08006469
 8006390:	0800648d 	.word	0x0800648d
 8006394:	080064b1 	.word	0x080064b1
 8006398:	080064d5 	.word	0x080064d5
 800639c:	080064f9 	.word	0x080064f9
 80063a0:	0800651d 	.word	0x0800651d
 80063a4:	080069c1 	.word	0x080069c1
 80063a8:	080069c1 	.word	0x080069c1
 80063ac:	08006541 	.word	0x08006541
 80063b0:	080066a9 	.word	0x080066a9
 80063b4:	08006839 	.word	0x08006839
 80063b8:	08006861 	.word	0x08006861
 80063bc:	08006889 	.word	0x08006889
 80063c0:	080068b1 	.word	0x080068b1
 80063c4:	080068d9 	.word	0x080068d9
 80063c8:	080068fd 	.word	0x080068fd
 80063cc:	08006681 	.word	0x08006681
 80063d0:	08006569 	.word	0x08006569
 80063d4:	08006591 	.word	0x08006591
 80063d8:	080065b9 	.word	0x080065b9
 80063dc:	080065e1 	.word	0x080065e1
 80063e0:	08006609 	.word	0x08006609
 80063e4:	08006631 	.word	0x08006631
 80063e8:	08006659 	.word	0x08006659
 80063ec:	080066d1 	.word	0x080066d1
 80063f0:	080066f9 	.word	0x080066f9
 80063f4:	08006721 	.word	0x08006721
 80063f8:	08006749 	.word	0x08006749
 80063fc:	08006771 	.word	0x08006771
 8006400:	08006799 	.word	0x08006799
 8006404:	080067c1 	.word	0x080067c1
 8006408:	080067e9 	.word	0x080067e9
 800640c:	08006811 	.word	0x08006811
 8006410:	08006921 	.word	0x08006921
 8006414:	08006949 	.word	0x08006949
 8006418:	08006971 	.word	0x08006971
 800641c:	08006999 	.word	0x08006999

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	9303      	str	r3, [sp, #12]
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	9302      	str	r3, [sp, #8]
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006436:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006438:	f003 fbc6 	bl	8009bc8 <VL53L1_preset_mode_standard_ranging>
 800643c:	4603      	mov	r3, r0
 800643e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006442:	e2c1      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	9303      	str	r3, [sp, #12]
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	9302      	str	r3, [sp, #8]
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800645a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800645c:	f003 fd2d 	bl	8009eba <VL53L1_preset_mode_standard_ranging_short_range>
 8006460:	4603      	mov	r3, r0
 8006462:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006466:	e2af      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	9303      	str	r3, [sp, #12]
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	9302      	str	r3, [sp, #8]
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	9301      	str	r3, [sp, #4]
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800647c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800647e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006480:	f003 fd60 	bl	8009f44 <VL53L1_preset_mode_standard_ranging_long_range>
 8006484:	4603      	mov	r3, r0
 8006486:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800648a:	e29d      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	9303      	str	r3, [sp, #12]
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	9302      	str	r3, [sp, #8]
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80064a4:	f003 fd93 	bl	8009fce <VL53L1_preset_mode_standard_ranging_mm1_cal>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80064ae:	e28b      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	9303      	str	r3, [sp, #12]
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	9302      	str	r3, [sp, #8]
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	9301      	str	r3, [sp, #4]
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80064c8:	f003 fdaa 	bl	800a020 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 80064cc:	4603      	mov	r3, r0
 80064ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80064d2:	e279      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	9303      	str	r3, [sp, #12]
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	9302      	str	r3, [sp, #8]
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80064ec:	f003 fdc1 	bl	800a072 <VL53L1_preset_mode_timed_ranging>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80064f6:	e267      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	9303      	str	r3, [sp, #12]
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	9302      	str	r3, [sp, #8]
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	9301      	str	r3, [sp, #4]
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800650c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800650e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006510:	f003 fded 	bl	800a0ee <VL53L1_preset_mode_timed_ranging_short_range>
 8006514:	4603      	mov	r3, r0
 8006516:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800651a:	e255      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	9303      	str	r3, [sp, #12]
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	9302      	str	r3, [sp, #8]
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006530:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006532:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006534:	f003 fe19 	bl	800a16a <VL53L1_preset_mode_timed_ranging_long_range>
 8006538:	4603      	mov	r3, r0
 800653a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800653e:	e243      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING:
		status = VL53L1_preset_mode_histogram_ranging(
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	9304      	str	r3, [sp, #16]
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	9303      	str	r3, [sp, #12]
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	9302      	str	r3, [sp, #8]
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006558:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800655a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800655c:	f003 fefb 	bl	800a356 <VL53L1_preset_mode_histogram_ranging>
 8006560:	4603      	mov	r3, r0
 8006562:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006566:	e22f      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM1:
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	9304      	str	r3, [sp, #16]
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	9303      	str	r3, [sp, #12]
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	9302      	str	r3, [sp, #8]
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006580:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006582:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006584:	f003 ff7c 	bl	800a480 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 8006588:	4603      	mov	r3, r0
 800658a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800658e:	e21b      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM2:
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	9304      	str	r3, [sp, #16]
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	9303      	str	r3, [sp, #12]
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	9302      	str	r3, [sp, #8]
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065ac:	f003 ffcc 	bl	800a548 <VL53L1_preset_mode_histogram_ranging_with_mm2>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80065b6:	e207      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	9304      	str	r3, [sp, #16]
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	9303      	str	r3, [sp, #12]
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	9302      	str	r3, [sp, #8]
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	9301      	str	r3, [sp, #4]
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065d4:	f003 ffe0 	bl	800a598 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 80065d8:	4603      	mov	r3, r0
 80065da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80065de:	e1f3      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	9304      	str	r3, [sp, #16]
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	9303      	str	r3, [sp, #12]
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	9302      	str	r3, [sp, #8]
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	9301      	str	r3, [sp, #4]
 80065f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065fc:	f004 f830 	bl	800a660 <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 8006600:	4603      	mov	r3, r0
 8006602:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006606:	e1df      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		status = VL53L1_preset_mode_histogram_multizone(
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	9304      	str	r3, [sp, #16]
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	9303      	str	r3, [sp, #12]
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	9302      	str	r3, [sp, #8]
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	9301      	str	r3, [sp, #4]
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006620:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006622:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006624:	f004 fe25 	bl	800b272 <VL53L1_preset_mode_histogram_multizone>
 8006628:	4603      	mov	r3, r0
 800662a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800662e:	e1cb      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	9304      	str	r3, [sp, #16]
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	9303      	str	r3, [sp, #12]
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	9302      	str	r3, [sp, #8]
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006648:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800664a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800664c:	f004 fe63 	bl	800b316 <VL53L1_preset_mode_histogram_multizone_short_range>
 8006650:	4603      	mov	r3, r0
 8006652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006656:	e1b7      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	9304      	str	r3, [sp, #16]
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	9303      	str	r3, [sp, #12]
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	9302      	str	r3, [sp, #8]
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	9301      	str	r3, [sp, #4]
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006670:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006672:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006674:	f004 fea1 	bl	800b3ba <VL53L1_preset_mode_histogram_multizone_long_range>
 8006678:	4603      	mov	r3, r0
 800667a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800667e:	e1a3      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_REF_ARRAY:
		status = VL53L1_preset_mode_histogram_ranging_ref(
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	9304      	str	r3, [sp, #16]
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	9303      	str	r3, [sp, #12]
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	9302      	str	r3, [sp, #8]
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	9301      	str	r3, [sp, #4]
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006698:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800669a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800669c:	f004 ffde 	bl	800b65c <VL53L1_preset_mode_histogram_ranging_ref>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80066a6:	e18f      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	9304      	str	r3, [sp, #16]
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	9303      	str	r3, [sp, #12]
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	9302      	str	r3, [sp, #8]
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	9301      	str	r3, [sp, #4]
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066c4:	f003 fff4 	bl	800a6b0 <VL53L1_preset_mode_histogram_ranging_short_timing>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80066ce:	e17b      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_long_range(
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	9304      	str	r3, [sp, #16]
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	9303      	str	r3, [sp, #12]
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	9302      	str	r3, [sp, #8]
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	9301      	str	r3, [sp, #4]
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066ec:	f004 f86c 	bl	800a7c8 <VL53L1_preset_mode_histogram_long_range>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80066f6:	e167      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	9304      	str	r3, [sp, #16]
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	9303      	str	r3, [sp, #12]
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	9302      	str	r3, [sp, #8]
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006710:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006712:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006714:	f004 f8f6 	bl	800a904 <VL53L1_preset_mode_histogram_long_range_mm1>
 8006718:	4603      	mov	r3, r0
 800671a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800671e:	e153      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	9304      	str	r3, [sp, #16]
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	9303      	str	r3, [sp, #12]
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	9302      	str	r3, [sp, #8]
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	9301      	str	r3, [sp, #4]
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006738:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800673a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800673c:	f004 f943 	bl	800a9c6 <VL53L1_preset_mode_histogram_long_range_mm2>
 8006740:	4603      	mov	r3, r0
 8006742:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006746:	e13f      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53L1_preset_mode_histogram_medium_range(
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	9304      	str	r3, [sp, #16]
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	9303      	str	r3, [sp, #12]
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	9302      	str	r3, [sp, #8]
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	9301      	str	r3, [sp, #4]
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006760:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006762:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006764:	f004 f957 	bl	800aa16 <VL53L1_preset_mode_histogram_medium_range>
 8006768:	4603      	mov	r3, r0
 800676a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800676e:	e12b      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	9304      	str	r3, [sp, #16]
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	9303      	str	r3, [sp, #12]
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	9302      	str	r3, [sp, #8]
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	9301      	str	r3, [sp, #4]
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006788:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800678a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800678c:	f004 f9e1 	bl	800ab52 <VL53L1_preset_mode_histogram_medium_range_mm1>
 8006790:	4603      	mov	r3, r0
 8006792:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006796:	e117      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	9304      	str	r3, [sp, #16]
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	9303      	str	r3, [sp, #12]
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	9302      	str	r3, [sp, #8]
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	9301      	str	r3, [sp, #4]
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067b4:	f004 fa2e 	bl	800ac14 <VL53L1_preset_mode_histogram_medium_range_mm2>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80067be:	e103      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_short_range(
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	9304      	str	r3, [sp, #16]
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	9303      	str	r3, [sp, #12]
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	9302      	str	r3, [sp, #8]
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	9301      	str	r3, [sp, #4]
 80067d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067dc:	f004 fa42 	bl	800ac64 <VL53L1_preset_mode_histogram_short_range>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80067e6:	e0ef      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	9304      	str	r3, [sp, #16]
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	9303      	str	r3, [sp, #12]
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	9302      	str	r3, [sp, #8]
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	9301      	str	r3, [sp, #4]
 80067f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006800:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006802:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006804:	f004 fb4c 	bl	800aea0 <VL53L1_preset_mode_histogram_short_range_mm1>
 8006808:	4603      	mov	r3, r0
 800680a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800680e:	e0db      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	9304      	str	r3, [sp, #16]
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	9303      	str	r3, [sp, #12]
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	9302      	str	r3, [sp, #8]
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	9301      	str	r3, [sp, #4]
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006828:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800682a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800682c:	f004 fb99 	bl	800af62 <VL53L1_preset_mode_histogram_short_range_mm2>
 8006830:	4603      	mov	r3, r0
 8006832:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006836:	e0c7      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		status = VL53L1_preset_mode_histogram_characterisation(
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	9304      	str	r3, [sp, #16]
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	9303      	str	r3, [sp, #12]
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	9302      	str	r3, [sp, #8]
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006850:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006852:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006854:	f004 fbad 	bl	800afb2 <VL53L1_preset_mode_histogram_characterisation>
 8006858:	4603      	mov	r3, r0
 800685a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800685e:	e0b3      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_PLANAR:
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	9304      	str	r3, [sp, #16]
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	9303      	str	r3, [sp, #12]
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	9302      	str	r3, [sp, #8]
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	9301      	str	r3, [sp, #4]
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006878:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800687a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800687c:	f004 fbca 	bl	800b014 <VL53L1_preset_mode_histogram_xtalk_planar>
 8006880:	4603      	mov	r3, r0
 8006882:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8006886:	e09f      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM1:
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	9304      	str	r3, [sp, #16]
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	9303      	str	r3, [sp, #12]
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	9302      	str	r3, [sp, #8]
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	9301      	str	r3, [sp, #4]
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068a4:	f004 fc2d 	bl	800b102 <VL53L1_preset_mode_histogram_xtalk_mm1>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80068ae:	e08b      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM2:
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	9304      	str	r3, [sp, #16]
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	9303      	str	r3, [sp, #12]
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	9302      	str	r3, [sp, #8]
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	9301      	str	r3, [sp, #4]
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068cc:	f004 fcad 	bl	800b22a <VL53L1_preset_mode_histogram_xtalk_mm2>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80068d6:	e077      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	9303      	str	r3, [sp, #12]
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	9302      	str	r3, [sp, #8]
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80068f0:	f004 fdb5 	bl	800b45e <VL53L1_preset_mode_olt>
 80068f4:	4603      	mov	r3, r0
 80068f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80068fa:	e065      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	9303      	str	r3, [sp, #12]
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	9302      	str	r3, [sp, #8]
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	9301      	str	r3, [sp, #4]
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006910:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006912:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006914:	f003 fce5 	bl	800a2e2 <VL53L1_preset_mode_singleshot_ranging>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800691e:	e053      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	9304      	str	r3, [sp, #16]
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	9303      	str	r3, [sp, #12]
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	9302      	str	r3, [sp, #8]
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	9301      	str	r3, [sp, #4]
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006938:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800693a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800693c:	f003 fc7d 	bl	800a23a <VL53L1_preset_mode_low_power_auto_short_ranging>
 8006940:	4603      	mov	r3, r0
 8006942:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8006946:	e03f      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	9304      	str	r3, [sp, #16]
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	9303      	str	r3, [sp, #12]
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	9302      	str	r3, [sp, #8]
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	9301      	str	r3, [sp, #4]
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006960:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006962:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006964:	f003 fc3f 	bl	800a1e6 <VL53L1_preset_mode_low_power_auto_ranging>
 8006968:	4603      	mov	r3, r0
 800696a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 800696e:	e02b      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	9304      	str	r3, [sp, #16]
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	9303      	str	r3, [sp, #12]
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	9302      	str	r3, [sp, #8]
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	9301      	str	r3, [sp, #4]
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006988:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800698a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800698c:	f003 fc7f 	bl	800a28e <VL53L1_preset_mode_low_power_auto_long_ranging>
 8006990:	4603      	mov	r3, r0
 8006992:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8006996:	e017      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>


	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_special_histogram_short_range(
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	9304      	str	r3, [sp, #16]
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	9303      	str	r3, [sp, #12]
 80069a0:	6a3b      	ldr	r3, [r7, #32]
 80069a2:	9302      	str	r3, [sp, #8]
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80069b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80069b4:	f004 f9f4 	bl	800ada0 <VL53L1_preset_mode_special_histogram_short_range>
 80069b8:	4603      	mov	r3, r0
 80069ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
	break;
 80069be:	e003      	b.n	80069c8 <VL53L1_set_preset_mode+0x6ec>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80069c0:	23fc      	movs	r3, #252	; 0xfc
 80069c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
 80069c6:	bf00      	nop

	}



	if (status == VL53L1_ERROR_NONE) {
 80069c8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d105      	bne.n	80069dc <VL53L1_set_preset_mode+0x700>

		pstatic->dss_config__target_total_rate_mcps =
 80069d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d2:	893a      	ldrh	r2, [r7, #8]
 80069d4:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 80069d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069d8:	893a      	ldrh	r2, [r7, #8]
 80069da:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53L1_ERROR_NONE)
 80069dc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d108      	bne.n	80069f6 <VL53L1_set_preset_mode+0x71a>
		status =
			VL53L1_set_timeouts_us(
 80069e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f7ff f98f 	bl	8005d0e <VL53L1_set_timeouts_us>
 80069f0:	4603      	mov	r3, r0
 80069f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 80069f6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <VL53L1_set_preset_mode+0x730>
		status =
			VL53L1_set_inter_measurement_period_ms(
 80069fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f7ff f92b 	bl	8005c5c <VL53L1_set_inter_measurement_period_ms>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8006a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a0e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8006a12:	3301      	adds	r3, #1
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a18:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4610      	mov	r0, r2
 8006a20:	f005 fa82 	bl	800bf28 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8006a24:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3748      	adds	r7, #72	; 0x48
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3318      	adds	r3, #24
 8006a42:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f8b3 2382 	ldrh.w	r2, [r3, #898]	; 0x382
	*plite_sigma =
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b085      	sub	sp, #20
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	460b      	mov	r3, r1
 8006a68:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3318      	adds	r3, #24
 8006a72:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	887a      	ldrh	r2, [r7, #2]
 8006a78:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382

	LOG_FUNCTION_END(status);

	return status;
 8006a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a96:	2300      	movs	r3, #0
 8006a98:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	3318      	adds	r3, #24
 8006a9e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f8b3 2384 	ldrh.w	r2, [r3, #900]	; 0x384
	*plite_mincountrate =
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b085      	sub	sp, #20
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3318      	adds	r3, #24
 8006ace:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	887a      	ldrh	r2, [r7, #2]
 8006ad4:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8006ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b0d2      	sub	sp, #328	; 0x148
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006af2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006af6:	6018      	str	r0, [r3, #0]
 8006af8:	4608      	mov	r0, r1
 8006afa:	4611      	mov	r1, r2
 8006afc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b00:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8006b04:	4602      	mov	r2, r0
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b0c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006b10:	460a      	mov	r2, r1
 8006b12:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006b14:	2300      	movs	r3, #0
 8006b16:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006b1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3318      	adds	r3, #24
 8006b26:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53L1_LLDriverResults_t  *pres =
 8006b2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006b38:	3308      	adds	r3, #8
 8006b3a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8006b3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b42:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8006b46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8006b4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b4e:	3348      	adds	r3, #72	; 0x48
 8006b50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8006b54:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b58:	f203 3342 	addw	r3, r3, #834	; 0x342
 8006b5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8006b60:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b64:	f203 3362 	addw	r3, r3, #866	; 0x362
 8006b68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8006b6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b70:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8006b74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8006b78:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b7c:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006b80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8006b84:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b88:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8006b8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8006b90:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b94:	332c      	adds	r3, #44	; 0x2c
 8006b96:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8006b9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b9e:	3348      	adds	r3, #72	; 0x48
 8006ba0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8006ba4:	f107 030c 	add.w	r3, r7, #12
 8006ba8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8006bac:	2300      	movs	r3, #0
 8006bae:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8006bc4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006bc8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006bcc:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 8006bd0:	7812      	ldrb	r2, [r2, #0]
 8006bd2:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8006bd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006bd8:	791b      	ldrb	r3, [r3, #4]
 8006bda:	b25b      	sxtb	r3, r3
 8006bdc:	f003 030f 	and.w	r3, r3, #15
 8006be0:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8006be2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006be6:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8006bea:	f993 3000 	ldrsb.w	r3, [r3]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	b25b      	sxtb	r3, r3
 8006bf2:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8006bf4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006bf8:	711a      	strb	r2, [r3, #4]


	status =
		VL53L1_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8006bfa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006bfe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53L1_set_user_zone(
 8006c02:	3336      	adds	r3, #54	; 0x36
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8006c0a:	4413      	add	r3, r2
 8006c0c:	1d9a      	adds	r2, r3, #6
 8006c0e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c12:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006c16:	4611      	mov	r1, r2
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	f7ff f955 	bl	8005ec8 <VL53L1_set_user_zone>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8006c24:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c28:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d019      	beq.n	8006c64 <VL53L1_init_and_start_range+0x17c>
		status =
		VL53L1_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id])
 8006c30:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c34:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006c38:	461a      	mov	r2, r3
		VL53L1_set_zone_dss_config(
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006c46:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8006c4a:	4413      	add	r3, r2
 8006c4c:	1c9a      	adds	r2, r3, #2
 8006c4e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c52:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006c56:	4611      	mov	r1, r2
 8006c58:	6818      	ldr	r0, [r3, #0]
 8006c5a:	f001 fbd7 	bl	800840c <VL53L1_set_zone_dss_config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8006c64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c68:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8006c6c:	f003 0302 	and.w	r3, r3, #2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10d      	bne.n	8006c90 <VL53L1_init_and_start_range+0x1a8>
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8006c74:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c78:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d107      	bne.n	8006c90 <VL53L1_init_and_start_range+0x1a8>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8006c80:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c84:	f8b3 22e8 	ldrh.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8006c88:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c8c:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8006c90:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c98:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8006c9c:	2bff      	cmp	r3, #255	; 0xff
 8006c9e:	d106      	bne.n	8006cae <VL53L1_init_and_start_range+0x1c6>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8006ca0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006cae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb6:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d139      	bne.n	8006d32 <VL53L1_init_and_start_range+0x24a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8006cbe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc6:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d131      	bne.n	8006d32 <VL53L1_init_and_start_range+0x24a>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8006cce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006cd2:	f893 2364 	ldrb.w	r2, [r3, #868]	; 0x364
		pdev->low_power_auto_data.saved_interrupt_config =
 8006cd6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cde:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8006ce2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364

		if ((pdev->dyn_cfg.system__sequence_config & (
 8006cec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006cf0:	f893 33a1 	ldrb.w	r3, [r3, #929]	; 0x3a1
 8006cf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d109      	bne.n	8006d10 <VL53L1_init_and_start_range+0x228>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8006cfc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006d00:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006d04:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8006d06:	b21a      	sxth	r2, r3
 8006d08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006d0c:	825a      	strh	r2, [r3, #18]
 8006d0e:	e003      	b.n	8006d18 <VL53L1_init_and_start_range+0x230>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8006d10:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006d14:	2200      	movs	r2, #0
 8006d16:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8006d18:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d1c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d805      	bhi.n	8006d32 <VL53L1_init_and_start_range+0x24a>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8006d26:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d2a:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006d2e:	2205      	movs	r2, #5
 8006d30:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006d32:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d3a:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d117      	bne.n	8006d72 <VL53L1_init_and_start_range+0x28a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8006d42:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d4a:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d10f      	bne.n	8006d72 <VL53L1_init_and_start_range+0x28a>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8006d52:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d5a:	f893 243b 	ldrb.w	r2, [r3, #1083]	; 0x43b
		pdev->gen_cfg.system__interrupt_config_gpio =
 8006d5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006d62:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364


		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8006d66:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d6a:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006d6e:	2206      	movs	r2, #6
 8006d70:	701a      	strb	r2, [r3, #0]





	if (status == VL53L1_ERROR_NONE)
 8006d72:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d109      	bne.n	8006d8e <VL53L1_init_and_start_range+0x2a6>
		status = VL53L1_save_cfg_data(Dev);
 8006d7a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d7e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006d82:	6818      	ldr	r0, [r3, #0]
 8006d84:	f007 f98c 	bl	800e0a0 <VL53L1_save_cfg_data>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8006d8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d92:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	2b05      	cmp	r3, #5
 8006d9c:	d826      	bhi.n	8006dec <VL53L1_init_and_start_range+0x304>
 8006d9e:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <VL53L1_init_and_start_range+0x2bc>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006de5 	.word	0x08006de5
 8006da8:	08006ddd 	.word	0x08006ddd
 8006dac:	08006dd5 	.word	0x08006dd5
 8006db0:	08006dcd 	.word	0x08006dcd
 8006db4:	08006dc5 	.word	0x08006dc5
 8006db8:	08006dbd 	.word	0x08006dbd
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006dc2:	e017      	b.n	8006df4 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8006dc4:	230d      	movs	r3, #13
 8006dc6:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006dca:	e013      	b.n	8006df4 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8006dcc:	2324      	movs	r3, #36	; 0x24
 8006dce:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006dd2:	e00f      	b.n	8006df4 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8006dd4:	2344      	movs	r3, #68	; 0x44
 8006dd6:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006dda:	e00b      	b.n	8006df4 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8006ddc:	235a      	movs	r3, #90	; 0x5a
 8006dde:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006de2:	e007      	b.n	8006df4 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8006de4:	2371      	movs	r3, #113	; 0x71
 8006de6:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006dea:	e003      	b.n	8006df4 <VL53L1_init_and_start_range+0x30c>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8006dec:	2383      	movs	r3, #131	; 0x83
 8006dee:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8006df2:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8006df4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006df8:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8006dfc:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8006e00:	f107 030c 	add.w	r3, r7, #12
 8006e04:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006e0e:	e00b      	b.n	8006e28 <VL53L1_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8006e10:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8006e1e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006e22:	3301      	adds	r3, #1
 8006e24:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006e28:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8006e2c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d3ed      	bcc.n	8006e10 <VL53L1_init_and_start_range+0x328>



	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8006e34:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e38:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b05      	cmp	r3, #5
 8006e40:	d917      	bls.n	8006e72 <VL53L1_init_and_start_range+0x38a>
 8006e42:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d113      	bne.n	8006e72 <VL53L1_init_and_start_range+0x38a>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006e4a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006e4e:	f1c3 0301 	rsb	r3, r3, #1
 8006e52:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006e56:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8006e5a:	f107 020c 	add.w	r2, r7, #12
 8006e5e:	4413      	add	r3, r2
 8006e60:	461a      	mov	r2, r3
 8006e62:	210b      	movs	r1, #11
 8006e64:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8006e68:	f00c fb0d 	bl	8013486 <VL53L1_i2c_encode_static_nvm_managed>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8006e72:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e76:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d917      	bls.n	8006eb0 <VL53L1_init_and_start_range+0x3c8>
 8006e80:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d113      	bne.n	8006eb0 <VL53L1_init_and_start_range+0x3c8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006e88:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006e8c:	f1c3 030d 	rsb	r3, r3, #13
 8006e90:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006e94:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8006e98:	f107 020c 	add.w	r2, r7, #12
 8006e9c:	4413      	add	r3, r2
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	2117      	movs	r1, #23
 8006ea2:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8006ea6:	f00c fbca 	bl	801363e <VL53L1_i2c_encode_customer_nvm_managed>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8006eb0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006eb4:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	d917      	bls.n	8006eee <VL53L1_init_and_start_range+0x406>
 8006ebe:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d113      	bne.n	8006eee <VL53L1_init_and_start_range+0x406>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006ec6:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006eca:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8006ece:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006ed2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8006ed6:	f107 020c 	add.w	r2, r7, #12
 8006eda:	4413      	add	r3, r2
 8006edc:	461a      	mov	r2, r3
 8006ede:	2120      	movs	r1, #32
 8006ee0:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8006ee4:	f00c fce9 	bl	80138ba <VL53L1_i2c_encode_static_config>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8006eee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ef2:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d917      	bls.n	8006f2c <VL53L1_init_and_start_range+0x444>
 8006efc:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d113      	bne.n	8006f2c <VL53L1_init_and_start_range+0x444>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006f04:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006f08:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8006f0c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006f10:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8006f14:	f107 020c 	add.w	r2, r7, #12
 8006f18:	4413      	add	r3, r2
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	2116      	movs	r1, #22
 8006f1e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8006f22:	f00c fdad 	bl	8013a80 <VL53L1_i2c_encode_general_config>
 8006f26:	4603      	mov	r3, r0
 8006f28:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8006f2c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f30:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d917      	bls.n	8006f6a <VL53L1_init_and_start_range+0x482>
 8006f3a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d113      	bne.n	8006f6a <VL53L1_init_and_start_range+0x482>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006f42:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006f46:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8006f4a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006f4e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 8006f52:	f107 020c 	add.w	r2, r7, #12
 8006f56:	4413      	add	r3, r2
 8006f58:	461a      	mov	r2, r3
 8006f5a:	2117      	movs	r1, #23
 8006f5c:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8006f60:	f00c fe12 	bl	8013b88 <VL53L1_i2c_encode_timing_config>
 8006f64:	4603      	mov	r3, r0
 8006f66:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8006f6a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f6e:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d036      	beq.n	8006fe6 <VL53L1_init_and_start_range+0x4fe>
 8006f78:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d132      	bne.n	8006fe6 <VL53L1_init_and_start_range+0x4fe>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006f80:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006f84:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8006f88:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8006f8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f90:	791b      	ldrb	r3, [r3, #4]
 8006f92:	f003 0320 	and.w	r3, r3, #32
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d017      	beq.n	8006fca <VL53L1_init_and_start_range+0x4e2>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8006f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f9e:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8006fa0:	f043 0301 	orr.w	r3, r3, #1
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006faa:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8006fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fb0:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8006fb2:	f043 0301 	orr.w	r3, r3, #1
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fbc:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8006fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc2:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8006fc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fc8:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006fca:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8006fce:	f107 020c 	add.w	r2, r7, #12
 8006fd2:	4413      	add	r3, r2
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	2112      	movs	r1, #18
 8006fd8:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8006fdc:	f00c fe56 	bl	8013c8c <VL53L1_i2c_encode_dynamic_config>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53L1_ERROR_NONE) {
 8006fe6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d113      	bne.n	8007016 <VL53L1_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 8006fee:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006ff2:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8006ff6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006ffa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 8006ffe:	f107 020c 	add.w	r2, r7, #12
 8007002:	4413      	add	r3, r2
 8007004:	461a      	mov	r2, r3
 8007006:	2105      	movs	r1, #5
 8007008:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800700c:	f00c fec3 	bl	8013d96 <VL53L1_i2c_encode_system_control>
 8007010:	4603      	mov	r3, r0
 8007012:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53L1_ERROR_NONE) {
 8007016:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10f      	bne.n	800703e <VL53L1_init_and_start_range+0x556>
		status =
			VL53L1_WriteMulti(
 800701e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8007022:	f107 020c 	add.w	r2, r7, #12
 8007026:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 800702a:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800702e:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 8007032:	6800      	ldr	r0, [r0, #0]
 8007034:	f00e fbd6 	bl	80157e4 <VL53L1_WriteMulti>
 8007038:	4603      	mov	r3, r0
 800703a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53L1_ERROR_NONE)
 800703e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8007042:	2b00      	cmp	r3, #0
 8007044:	d109      	bne.n	800705a <VL53L1_init_and_start_range+0x572>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8007046:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800704a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	f004 fb82 	bl	800b758 <VL53L1_update_ll_driver_rd_state>
 8007054:	4603      	mov	r3, r0
 8007056:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53L1_ERROR_NONE)
 800705a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800705e:	2b00      	cmp	r3, #0
 8007060:	d109      	bne.n	8007076 <VL53L1_init_and_start_range+0x58e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8007062:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007066:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800706a:	6818      	ldr	r0, [r3, #0]
 800706c:	f004 fd15 	bl	800ba9a <VL53L1_update_ll_driver_cfg_state>
 8007070:	4603      	mov	r3, r0
 8007072:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8007076:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800707a:	4618      	mov	r0, r3
 800707c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800708c:	2300      	movs	r3, #0
 800708e:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev =
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	3318      	adds	r3, #24
 8007094:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800709c:	3308      	adds	r3, #8
 800709e:	60fb      	str	r3, [r7, #12]
			VL53L1DevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 80070a6:	b25b      	sxtb	r3, r3
 80070a8:	f003 030f 	and.w	r3, r3, #15
 80070ac:	b25b      	sxtb	r3, r3
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80070ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070b2:	b25b      	sxtb	r3, r3
 80070b4:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f00c fea1 	bl	8013e0c <VL53L1_set_system_control>
 80070ca:	4603      	mov	r3, r0
 80070cc:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53L1_init_ll_driver_state(
 80070e0:	2103      	movs	r1, #3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f004 fb07 	bl	800b6f6 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 80070ee:	3301      	adds	r3, #1
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80070f8:	4619      	mov	r1, r3
 80070fa:	4610      	mov	r0, r2
 80070fc:	f004 ff14 	bl	800bf28 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f004 ff46 	bl	800bf92 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800710c:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8007110:	2b01      	cmp	r3, #1
 8007112:	d102      	bne.n	800711a <VL53L1_stop_range+0x96>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f008 f9b4 	bl	800f482 <VL53L1_low_power_auto_data_stop_range>

	return status;
 800711a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b0c8      	sub	sp, #288	; 0x120
 800712a:	af00      	add	r7, sp, #0
 800712c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007130:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007134:	6018      	str	r0, [r3, #0]
 8007136:	460a      	mov	r2, r1
 8007138:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800713c:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8007140:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007142:	2300      	movs	r3, #0
 8007144:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007148:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800714c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3318      	adds	r3, #24
 8007154:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8007158:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800715c:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8007160:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8007164:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007168:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800716c:	331c      	adds	r3, #28
 800716e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8007172:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007176:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800717a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800717e:	2388      	movs	r3, #136	; 0x88
 8007180:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8007184:	2300      	movs	r3, #0
 8007186:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8007190:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007194:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d008      	beq.n	80071b0 <VL53L1_get_measurement_results+0x8a>
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d10d      	bne.n	80071be <VL53L1_get_measurement_results+0x98>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 80071a2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80071a6:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 80071aa:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80071ae:	e00a      	b.n	80071c6 <VL53L1_get_measurement_results+0xa0>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 80071b0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80071b4:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 80071b8:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80071bc:	e003      	b.n	80071c6 <VL53L1_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 80071be:	232c      	movs	r3, #44	; 0x2c
 80071c0:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80071c4:	bf00      	nop
	}



	if (status == VL53L1_ERROR_NONE)
 80071c6:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10f      	bne.n	80071ee <VL53L1_get_measurement_results+0xc8>
		status =
			VL53L1_ReadMulti(
 80071ce:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80071d2:	f107 0208 	add.w	r2, r7, #8
 80071d6:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 80071da:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80071de:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 80071e2:	6800      	ldr	r0, [r0, #0]
 80071e4:	f00e fb34 	bl	8015850 <VL53L1_ReadMulti>
 80071e8:	4603      	mov	r3, r0
 80071ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 80071ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80071f2:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d917      	bls.n	800722c <VL53L1_get_measurement_results+0x106>
 80071fc:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8007200:	2b00      	cmp	r3, #0
 8007202:	d113      	bne.n	800722c <VL53L1_get_measurement_results+0x106>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8007204:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8007208:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800720c:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8007210:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 8007214:	f107 0208 	add.w	r2, r7, #8
 8007218:	4413      	add	r3, r2
 800721a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800721e:	4619      	mov	r1, r3
 8007220:	2038      	movs	r0, #56	; 0x38
 8007222:	f00c ff71 	bl	8014108 <VL53L1_i2c_decode_debug_results>
 8007226:	4603      	mov	r3, r0
 8007228:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800722c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007230:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d017      	beq.n	800726a <VL53L1_get_measurement_results+0x144>
 800723a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800723e:	2b00      	cmp	r3, #0
 8007240:	d113      	bne.n	800726a <VL53L1_get_measurement_results+0x144>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8007242:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8007246:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800724a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800724e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 8007252:	f107 0208 	add.w	r2, r7, #8
 8007256:	4413      	add	r3, r2
 8007258:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800725c:	4619      	mov	r1, r3
 800725e:	2021      	movs	r0, #33	; 0x21
 8007260:	f00c fef1 	bl	8014046 <VL53L1_i2c_decode_core_results>
 8007264:	4603      	mov	r3, r0
 8007266:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800726a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800726e:	2b00      	cmp	r3, #0
 8007270:	d110      	bne.n	8007294 <VL53L1_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8007278:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800727c:	f107 0208 	add.w	r2, r7, #8
 8007280:	4413      	add	r3, r2
 8007282:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007286:	4619      	mov	r1, r3
 8007288:	202c      	movs	r0, #44	; 0x2c
 800728a:	f00c fde6 	bl	8013e5a <VL53L1_i2c_decode_system_results>
 800728e:	4603      	mov	r3, r0
 8007290:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8007294:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8007298:	4618      	mov	r0, r3
 800729a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 80072a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a6:	b0a0      	sub	sp, #128	; 0x80
 80072a8:	af06      	add	r7, sp, #24
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	460b      	mov	r3, r1
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80072b2:	2300      	movs	r3, #0
 80072b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53L1_LLDriverData_t *pdev =
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3318      	adds	r3, #24
 80072bc:	663b      	str	r3, [r7, #96]	; 0x60
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80072c4:	3308      	adds	r3, #8
 80072c6:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults =
 80072c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ca:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53L1_zone_objects_t    *pobjects =
 80072cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ce:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80072d2:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53L1_p_002[0]);
	VL53L1_ll_driver_state_t *pstate   =
 80072d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072d6:	332c      	adds	r3, #44	; 0x2c
 80072d8:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53L1_zone_config_t     *pzone_cfg =
 80072da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072dc:	33c2      	adds	r3, #194	; 0xc2
 80072de:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53L1_zone_hist_info_t  *phist_info =
 80072e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072e2:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80072e6:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53L1_p_002[0]);

	VL53L1_dmax_calibration_data_t   dmax_cal;
	VL53L1_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 80072e8:	f107 0314 	add.w	r3, r7, #20
 80072ec:	647b      	str	r3, [r7, #68]	; 0x44
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80072ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072f0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80072f4:	643b      	str	r3, [r7, #64]	; 0x40
	VL53L1_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 80072f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072f8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80072fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53L1_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 80072fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007300:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8007304:	3318      	adds	r3, #24
 8007306:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8007308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800730a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800730e:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8007310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007312:	3348      	adds	r3, #72	; 0x48
 8007314:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_zone_histograms_t *pZH = &(pres->zone_hists);
 8007316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007318:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 800731c:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 800731e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007320:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8007324:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t merge_enabled;
	VL53L1_range_data_t *pdata;

	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8007326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007328:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800732c:	2b01      	cmp	r3, #1
 800732e:	d108      	bne.n	8007342 <VL53L1_get_device_results+0xa0>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007336:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800733a:	2b01      	cmp	r3, #1
 800733c:	d101      	bne.n	8007342 <VL53L1_get_device_results+0xa0>
 800733e:	2301      	movs	r3, #1
 8007340:	e000      	b.n	8007344 <VL53L1_get_device_results+0xa2>
 8007342:	2300      	movs	r3, #0
 8007344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 VL53L1_PRESETMODE_RANGING);

	if ((pdev->sys_ctrl.system__mode_start &
 8007348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800734a:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 82a9 	beq.w	80078aa <VL53L1_get_device_results+0x608>
		 VL53L1_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53L1_get_histogram_bin_data(
 8007358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800735a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800735e:	4619      	mov	r1, r3
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 fbd7 	bl	8007b14 <VL53L1_get_histogram_bin_data>
 8007366:	4603      	mov	r3, r0
 8007368:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53L1_ERROR_NONE &&
 800736c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007370:	2b00      	cmp	r3, #0
 8007372:	d118      	bne.n	80073a6 <VL53L1_get_device_results+0x104>
			pHD->number_of_ambient_bins == 0) {
 8007374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007376:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53L1_ERROR_NONE &&
 8007378:	2b00      	cmp	r3, #0
 800737a:	d114      	bne.n	80073a6 <VL53L1_get_device_results+0x104>
			zid = pdev->ll_state.rd_zone_id;
 800737c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800737e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007382:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
			&(pZH->VL53L1_p_002[zid]),
 8007386:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
 800738a:	011b      	lsls	r3, r3, #4
 800738c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800738e:	4413      	add	r3, r2
 8007390:	1d1a      	adds	r2, r3, #4
 8007392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007394:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007398:	4619      	mov	r1, r3
 800739a:	4610      	mov	r0, r2
 800739c:	f005 fb6c 	bl	800ca78 <VL53L1_hist_copy_and_scale_ambient_info>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53L1_ERROR_NONE)
 80073a6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f040 8220 	bne.w	80077f0 <VL53L1_get_device_results+0x54e>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80073b0:	f107 0313 	add.w	r3, r7, #19
 80073b4:	4619      	mov	r1, r3
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f008 f91a 	bl	800f5f0 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 80073bc:	7cfb      	ldrb	r3, [r7, #19]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <VL53L1_get_device_results+0x124>
			histo_merge_nb = 1;
 80073c2:	2301      	movs	r3, #1
 80073c4:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 80073c6:	7cfb      	ldrb	r3, [r7, #19]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (merge_enabled)
 80073ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d007      	beq.n	80073e6 <VL53L1_get_device_results+0x144>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 80073d6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80073da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073dc:	3202      	adds	r2, #2
 80073de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80073e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e4:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 80073e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073e8:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 80073ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ee:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 80073f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80073fa:	4619      	mov	r1, r3
 80073fc:	4610      	mov	r0, r2
 80073fe:	f005 fa41 	bl	800c884 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 8007402:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8007404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007406:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800740e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007410:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8007412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007414:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8007418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800741a:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 800741c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800741e:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 8007420:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007422:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8007426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007428:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 800742a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800742c:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8007430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007432:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8007434:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007436:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 800743a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800743c:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8007440:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007442:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8007446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007448:	f893 2375 	ldrb.w	r2, [r3, #885]	; 0x375
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 800744c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800744e:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8007452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007454:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8007458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800745a:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 800745c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800745e:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8007462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007464:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8007466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007468:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 800746a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800746c:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 800746e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007470:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8007472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007474:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53L1_copy_rtn_good_spads_to_buffer(
 8007476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007478:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 800747c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800747e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8007482:	4619      	mov	r1, r3
 8007484:	4610      	mov	r0, r2
 8007486:	f004 fc2f 	bl	800bce8 <VL53L1_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 800748a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800748c:	795b      	ldrb	r3, [r3, #5]
 800748e:	2b03      	cmp	r3, #3
 8007490:	d048      	beq.n	8007524 <VL53L1_get_device_results+0x282>
 8007492:	2b03      	cmp	r3, #3
 8007494:	dc56      	bgt.n	8007544 <VL53L1_get_device_results+0x2a2>
 8007496:	2b01      	cmp	r3, #1
 8007498:	d002      	beq.n	80074a0 <VL53L1_get_device_results+0x1fe>
 800749a:	2b02      	cmp	r3, #2
 800749c:	d02e      	beq.n	80074fc <VL53L1_get_device_results+0x25a>
 800749e:	e051      	b.n	8007544 <VL53L1_get_device_results+0x2a2>

		case VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 80074a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074a2:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
 80074a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			VL53L1_hist_combine_mm1_mm2_offsets(
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 80074b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074b8:	f893 e406 	ldrb.w	lr, [r3, #1030]	; 0x406
 80074bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074be:	f893 8407 	ldrb.w	r8, [r3, #1031]	; 0x407
 80074c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c4:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80074c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074ca:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 80074ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80074d0:	319c      	adds	r1, #156	; 0x9c
 80074d2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80074d4:	f500 7007 	add.w	r0, r0, #540	; 0x21c
 80074d8:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 80074dc:	b2a4      	uxth	r4, r4
 80074de:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 80074e0:	351c      	adds	r5, #28
 80074e2:	9505      	str	r5, [sp, #20]
 80074e4:	9404      	str	r4, [sp, #16]
 80074e6:	9003      	str	r0, [sp, #12]
 80074e8:	9102      	str	r1, [sp, #8]
 80074ea:	9201      	str	r2, [sp, #4]
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	4643      	mov	r3, r8
 80074f0:	4672      	mov	r2, lr
 80074f2:	4661      	mov	r1, ip
 80074f4:	4630      	mov	r0, r6
 80074f6:	f006 fa36 	bl	800d966 <VL53L1_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 80074fa:	e027      	b.n	800754c <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_ZONE_OFFSETS:
			zid = pdev->ll_state.rd_zone_id;
 80074fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007502:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			pHP->range_offset_mm = (int16_t)(
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 8007506:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800750a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800750c:	4613      	mov	r3, r2
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	1a9b      	subs	r3, r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	440b      	add	r3, r1
 8007516:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800751a:	681b      	ldr	r3, [r3, #0]
			pHP->range_offset_mm = (int16_t)(
 800751c:	b21a      	sxth	r2, r3
 800751e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007520:	839a      	strh	r2, [r3, #28]
		break;
 8007522:	e013      	b.n	800754c <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8007524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007526:	331c      	adds	r3, #28
 8007528:	4619      	mov	r1, r3
 800752a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800752c:	f7fd fcf7 	bl	8004f1e <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 8007530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007532:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8007536:	b29b      	uxth	r3, r3
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	b29b      	uxth	r3, r3
 800753c:	b21a      	sxth	r2, r3
 800753e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007540:	839a      	strh	r2, [r3, #28]
		break;
 8007542:	e003      	b.n	800754c <VL53L1_get_device_results+0x2aa>
		default:
			pHP->range_offset_mm = 0;
 8007544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007546:	2200      	movs	r2, #0
 8007548:	839a      	strh	r2, [r3, #28]
		break;
 800754a:	bf00      	nop

		}



		if (status != VL53L1_ERROR_NONE)
 800754c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007550:	2b00      	cmp	r3, #0
 8007552:	f040 814f 	bne.w	80077f4 <VL53L1_get_device_results+0x552>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53L1_calc_max_effective_spads(
 8007556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007558:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 800755c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755e:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 8007562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007564:	f503 7207 	add.w	r2, r3, #540	; 0x21c
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8007568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800756a:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
		VL53L1_calc_max_effective_spads(
 800756e:	b29c      	uxth	r4, r3
 8007570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007572:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	4623      	mov	r3, r4
 800757a:	f006 fb99 	bl	800dcb0 <VL53L1_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53L1_get_dmax_calibration_data(
 800757e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007580:	7999      	ldrb	r1, [r3, #6]
 8007582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007584:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8007588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 ff7b 	bl	8008486 <VL53L1_get_dmax_calibration_data>
 8007590:	4603      	mov	r3, r0
 8007592:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				pdev->ll_state.rd_zone_id,
				pdmax_cal);



		if (status != VL53L1_ERROR_NONE)
 8007596:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800759a:	2b00      	cmp	r3, #0
 800759c:	f040 812c 	bne.w	80077f8 <VL53L1_get_device_results+0x556>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_ipp_hist_process_data(
 80075a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075a2:	f503 7526 	add.w	r5, r3, #664	; 0x298
 80075a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075a8:	f503 7616 	add.w	r6, r3, #600	; 0x258
 80075ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075ae:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 80075b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075b4:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 80075b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075ba:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80075be:	3308      	adds	r3, #8
				pdev->wArea2,
 80075c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075c2:	f502 52d2 	add.w	r2, r2, #6720	; 0x1a40
 80075c6:	3208      	adds	r2, #8
		status = VL53L1_ipp_hist_process_data(
 80075c8:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80075ca:	9405      	str	r4, [sp, #20]
 80075cc:	f107 0413 	add.w	r4, r7, #19
 80075d0:	9404      	str	r4, [sp, #16]
 80075d2:	9203      	str	r2, [sp, #12]
 80075d4:	9302      	str	r3, [sp, #8]
 80075d6:	9001      	str	r0, [sp, #4]
 80075d8:	9100      	str	r1, [sp, #0]
 80075da:	4633      	mov	r3, r6
 80075dc:	462a      	mov	r2, r5
 80075de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f00e fb45 	bl	8015c70 <VL53L1_ipp_hist_process_data>
 80075e6:	4603      	mov	r3, r0
 80075e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((merge_enabled) && (histo_merge_nb > 1))
 80075ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d050      	beq.n	8007696 <VL53L1_get_device_results+0x3f4>
 80075f4:	7cfb      	ldrb	r3, [r7, #19]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d94d      	bls.n	8007696 <VL53L1_get_device_results+0x3f4>
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80075fa:	2300      	movs	r3, #0
 80075fc:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8007600:	e045      	b.n	800768e <VL53L1_get_device_results+0x3ec>
			pdata = &(presults->VL53L1_p_002[i]);
 8007602:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007606:	224c      	movs	r2, #76	; 0x4c
 8007608:	fb02 f303 	mul.w	r3, r2, r3
 800760c:	3310      	adds	r3, #16
 800760e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007610:	4413      	add	r3, r2
 8007612:	3304      	adds	r3, #4
 8007614:	623b      	str	r3, [r7, #32]
			pdata->VL53L1_p_020 /= histo_merge_nb;
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	7cfa      	ldrb	r2, [r7, #19]
 800761c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53L1_p_021 /= histo_merge_nb;
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007628:	7cfa      	ldrb	r2, [r7, #19]
 800762a:	fbb3 f2f2 	udiv	r2, r3, r2
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 /= histo_merge_nb;
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007636:	7cfa      	ldrb	r2, [r7, #19]
 8007638:	fb93 f2f2 	sdiv	r2, r3, r2
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007644:	461a      	mov	r2, r3
 8007646:	7cfb      	ldrb	r3, [r7, #19]
 8007648:	fb92 f3f3 	sdiv	r3, r2, r3
 800764c:	b29a      	uxth	r2, r3
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007656:	461a      	mov	r2, r3
 8007658:	7cfb      	ldrb	r3, [r7, #19]
 800765a:	fb92 f3f3 	sdiv	r3, r2, r3
 800765e:	b29a      	uxth	r2, r3
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007668:	461a      	mov	r2, r3
 800766a:	7cfb      	ldrb	r3, [r7, #19]
 800766c:	fb92 f3f3 	sdiv	r3, r2, r3
 8007670:	b29a      	uxth	r2, r3
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_012 /= histo_merge_nb;
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	7cfa      	ldrb	r2, [r7, #19]
 800767c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8007684:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007688:	3301      	adds	r3, #1
 800768a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800768e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007692:	2b03      	cmp	r3, #3
 8007694:	d9b5      	bls.n	8007602 <VL53L1_get_device_results+0x360>
		}


		if (status != VL53L1_ERROR_NONE)
 8007696:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800769a:	2b00      	cmp	r3, #0
 800769c:	f040 80ae 	bne.w	80077fc <VL53L1_get_device_results+0x55a>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_hist_wrap_dmax(
 80076a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076a2:	f503 7016 	add.w	r0, r3, #600	; 0x258
 80076a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076a8:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 80076ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076ae:	330e      	adds	r3, #14
 80076b0:	461a      	mov	r2, r3
 80076b2:	f006 f922 	bl	800d8fa <VL53L1_hist_wrap_dmax>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53L1_ERROR_NONE)
 80076bc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f040 809d 	bne.w	8007800 <VL53L1_get_device_results+0x55e>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80076c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 80076d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 80076d4:	011b      	lsls	r3, r3, #4
 80076d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076d8:	4413      	add	r3, r2
 80076da:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 80076dc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 80076e0:	4613      	mov	r3, r2
 80076e2:	011b      	lsls	r3, r3, #4
 80076e4:	4413      	add	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80076ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076ee:	4413      	add	r3, r2
 80076f0:	f103 0208 	add.w	r2, r3, #8
 80076f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f005 fc1d 	bl	800cf36 <VL53L1_hist_phase_consistency_check>
 80076fc:	4603      	mov	r3, r0
 80076fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53L1_ERROR_NONE)
 8007702:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007706:	2b00      	cmp	r3, #0
 8007708:	d17c      	bne.n	8007804 <VL53L1_get_device_results+0x562>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 800770a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800770c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007710:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8007714:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8007718:	011b      	lsls	r3, r3, #4
 800771a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800771c:	4413      	add	r3, r2
 800771e:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 8007720:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8007724:	4613      	mov	r3, r2
 8007726:	011b      	lsls	r3, r3, #4
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8007730:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007732:	4413      	add	r3, r2
 8007734:	f103 0208 	add.w	r2, r3, #8
 8007738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800773a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f006 f883 	bl	800d84a <VL53L1_hist_xmonitor_consistency_check>
 8007744:	4603      	mov	r3, r0
 8007746:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53L1_ERROR_NONE)
 800774a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800774e:	2b00      	cmp	r3, #0
 8007750:	d15a      	bne.n	8007808 <VL53L1_get_device_results+0x566>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 8007752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007754:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007758:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 800775c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775e:	2210      	movs	r2, #16
 8007760:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 8007762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007764:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007768:	3301      	adds	r3, #1
 800776a:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 800776c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776e:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8007770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007772:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007776:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8007778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800777a:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 800777e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007782:	429a      	cmp	r2, r3
 8007784:	d222      	bcs.n	80077cc <VL53L1_get_device_results+0x52a>

			phist_info =
			&(pZH->VL53L1_p_002[zid]);
 8007786:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			phist_info =
 800778a:	011b      	lsls	r3, r3, #4
 800778c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800778e:	4413      	add	r3, r2
 8007790:	3304      	adds	r3, #4
 8007792:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8007794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007796:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8007798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800779a:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 800779c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779e:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 80077a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077a2:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 80077a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a6:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 80077aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ac:	805a      	strh	r2, [r3, #2]

			phist_info->VL53L1_p_009 =
				pHD->VL53L1_p_009;
 80077ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b0:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53L1_p_009 =
 80077b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077b6:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 80077b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 80077be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077c0:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 80077c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 80077c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ca:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53L1_ERROR_NONE)
 80077cc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d11b      	bne.n	800780c <VL53L1_get_device_results+0x56a>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_hist_copy_results_to_sys_and_core(
 80077d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077d6:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 80077da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077dc:	f203 32aa 	addw	r2, r3, #938	; 0x3aa
 80077e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077e2:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80077e6:	331c      	adds	r3, #28
 80077e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077ea:	f006 fbbe 	bl	800df6a <VL53L1_hist_copy_results_to_sys_and_core>
 80077ee:	e00e      	b.n	800780e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80077f0:	bf00      	nop
 80077f2:	e00c      	b.n	800780e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80077f4:	bf00      	nop
 80077f6:	e00a      	b.n	800780e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80077f8:	bf00      	nop
 80077fa:	e008      	b.n	800780e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80077fc:	bf00      	nop
 80077fe:	e006      	b.n	800780e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8007800:	bf00      	nop
 8007802:	e004      	b.n	800780e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8007804:	bf00      	nop
 8007806:	e002      	b.n	800780e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8007808:	bf00      	nop
 800780a:	e000      	b.n	800780e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800780c:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 800780e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007810:	785b      	ldrb	r3, [r3, #1]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d036      	beq.n	8007884 <VL53L1_get_device_results+0x5e2>
			if (pstate->rd_device_state !=
 8007816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007818:	79db      	ldrb	r3, [r3, #7]
 800781a:	2b06      	cmp	r3, #6
 800781c:	d00a      	beq.n	8007834 <VL53L1_get_device_results+0x592>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53L1_ERROR_NONE) {
 800781e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <VL53L1_get_device_results+0x592>
					status = VL53L1_dynamic_zone_update(
 8007826:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f006 fc73 	bl	800e114 <VL53L1_dynamic_zone_update>
 800782e:	4603      	mov	r3, r0
 8007830:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8007834:	2300      	movs	r3, #0
 8007836:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800783a:	e015      	b.n	8007868 <VL53L1_get_device_results+0x5c6>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 800783c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800783e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 8007842:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <VL53L1_get_device_results+0x5ac>
 800784a:	2103      	movs	r1, #3
 800784c:	e000      	b.n	8007850 <VL53L1_get_device_results+0x5ae>
 800784e:	2101      	movs	r1, #1
 8007850:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007856:	4413      	add	r3, r2
 8007858:	460a      	mov	r2, r1
 800785a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800785e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007862:	3301      	adds	r3, #1
 8007864:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8007868:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800786c:	2b0f      	cmp	r3, #15
 800786e:	d9e5      	bls.n	800783c <VL53L1_get_device_results+0x59a>
					VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53L1_ERROR_NONE)
 8007870:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007874:	2b00      	cmp	r3, #0
 8007876:	d105      	bne.n	8007884 <VL53L1_get_device_results+0x5e2>
				status = VL53L1_multizone_hist_bins_update(Dev);
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f006 fcc6 	bl	800e20a <VL53L1_multizone_hist_bins_update>
 800787e:	4603      	mov	r3, r0
 8007880:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53L1_ERROR_NONE)
 8007884:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007888:	2b00      	cmp	r3, #0
 800788a:	d105      	bne.n	8007898 <VL53L1_get_device_results+0x5f6>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f007 f9d3 	bl	800ec38 <VL53L1_dynamic_xtalk_correction_corrector>
 8007892:	4603      	mov	r3, r0
 8007894:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53L1_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (merge_enabled)
 8007898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800789c:	2b00      	cmp	r3, #0
 800789e:	d043      	beq.n	8007928 <VL53L1_get_device_results+0x686>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 80078a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a2:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80078a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	e03e      	b.n	8007928 <VL53L1_get_device_results+0x686>
	} else {

		if (status == VL53L1_ERROR_NONE)
 80078aa:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d107      	bne.n	80078c2 <VL53L1_get_device_results+0x620>
			status = VL53L1_get_measurement_results(
 80078b2:	7afb      	ldrb	r3, [r7, #11]
 80078b4:	4619      	mov	r1, r3
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f7ff fc35 	bl	8007126 <VL53L1_get_measurement_results>
 80078bc:	4603      	mov	r3, r0
 80078be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53L1_ERROR_NONE)
 80078c2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10d      	bne.n	80078e6 <VL53L1_get_device_results+0x644>
			VL53L1_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 80078ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078cc:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53L1_copy_sys_and_core_results_to_range_results(
 80078d0:	4618      	mov	r0, r3
 80078d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078d4:	f203 31aa 	addw	r1, r3, #938	; 0x3aa
 80078d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078da:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 80078de:	321c      	adds	r2, #28
 80078e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078e2:	f000 fc1f 	bl	8008124 <VL53L1_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	785b      	ldrb	r3, [r3, #1]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d11c      	bne.n	8007928 <VL53L1_get_device_results+0x686>

			if ((status == VL53L1_ERROR_NONE) &&
 80078ee:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10d      	bne.n	8007912 <VL53L1_get_device_results+0x670>
				(pL->low_power_auto_range_count == 0)) {
 80078f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f8:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53L1_ERROR_NONE) &&
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d109      	bne.n	8007912 <VL53L1_get_device_results+0x670>

				status =
				VL53L1_low_power_auto_setup_manual_calibration(
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f007 fe24 	bl	800f54c <VL53L1_low_power_auto_setup_manual_calibration>
 8007904:	4603      	mov	r3, r0
 8007906:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 800790a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790c:	2201      	movs	r2, #1
 800790e:	709a      	strb	r2, [r3, #2]
 8007910:	e00a      	b.n	8007928 <VL53L1_get_device_results+0x686>
			} else if ((status == VL53L1_ERROR_NONE) &&
 8007912:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007916:	2b00      	cmp	r3, #0
 8007918:	d106      	bne.n	8007928 <VL53L1_get_device_results+0x686>
				(pL->low_power_auto_range_count == 1)) {
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53L1_ERROR_NONE) &&
 800791e:	2b01      	cmp	r3, #1
 8007920:	d102      	bne.n	8007928 <VL53L1_get_device_results+0x686>
				pL->low_power_auto_range_count = 2;
 8007922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007924:	2202      	movs	r2, #2
 8007926:	709a      	strb	r2, [r3, #2]
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8007928:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800792a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800792e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007930:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8007932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007934:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8007938:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800793a:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 800793c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800793e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8007942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007944:	709a      	strb	r2, [r3, #2]

	if (status == VL53L1_ERROR_NONE) {
 8007946:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800794a:	2b00      	cmp	r3, #0
 800794c:	f040 80b0 	bne.w	8007ab0 <VL53L1_get_device_results+0x80e>


		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 8007950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007952:	2210      	movs	r2, #16
 8007954:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8007958:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800795a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800795e:	3301      	adds	r3, #1
 8007960:	b2da      	uxtb	r2, r3
 8007962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007964:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 8007968:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800796a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800796e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		if (zid < pres->zone_results.max_zones) {
 8007972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007974:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8007978:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800797c:	429a      	cmp	r2, r3
 800797e:	f080 8097 	bcs.w	8007ab0 <VL53L1_get_device_results+0x80e>

			pobjects =
			&(pres->zone_results.VL53L1_p_002[zid]);
 8007982:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
			pobjects =
 8007986:	4613      	mov	r3, r2
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8007992:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007994:	4413      	add	r3, r2
 8007996:	3308      	adds	r3, #8
 8007998:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 800799a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800799c:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 800799e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079a0:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 80079a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079a4:	785a      	ldrb	r2, [r3, #1]
 80079a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079a8:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 80079aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079ac:	789a      	ldrb	r2, [r3, #2]
 80079ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079b0:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 80079b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079b4:	78da      	ldrb	r2, [r3, #3]
 80079b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079b8:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53L1_p_020 =
				presults->xmonitor.VL53L1_p_020;
 80079ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079bc:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53L1_p_020 =
 80079c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079c2:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53L1_p_021 =
				presults->xmonitor.VL53L1_p_021;
 80079c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079c6:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53L1_p_021 =
 80079ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079cc:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53L1_p_014 =
				presults->xmonitor.VL53L1_p_014;
 80079ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079d0:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53L1_p_014 =
 80079d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 80079da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079dc:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 80079e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 80079e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079e8:	7c5a      	ldrb	r2, [r3, #17]
 80079ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079ec:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 80079ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079f0:	7c9a      	ldrb	r2, [r3, #18]
 80079f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079f4:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 80079f6:	2300      	movs	r3, #0
 80079f8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80079fc:	e052      	b.n	8007aa4 <VL53L1_get_device_results+0x802>
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
					presults->VL53L1_p_002[i].VL53L1_p_020;
 80079fe:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8007a02:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_020;
 8007a06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a08:	204c      	movs	r0, #76	; 0x4c
 8007a0a:	fb00 f303 	mul.w	r3, r0, r3
 8007a0e:	440b      	add	r3, r1
 8007a10:	3338      	adds	r3, #56	; 0x38
 8007a12:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8007a14:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007a16:	4613      	mov	r3, r2
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	4413      	add	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4403      	add	r3, r0
 8007a20:	3308      	adds	r3, #8
 8007a22:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8007a24:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8007a28:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8007a2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a2e:	204c      	movs	r0, #76	; 0x4c
 8007a30:	fb00 f303 	mul.w	r3, r0, r3
 8007a34:	440b      	add	r3, r1
 8007a36:	333c      	adds	r3, #60	; 0x3c
 8007a38:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8007a3a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	4413      	add	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4403      	add	r3, r0
 8007a46:	330c      	adds	r3, #12
 8007a48:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
					presults->VL53L1_p_002[i].VL53L1_p_014;
 8007a4a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 8007a4e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_014;
 8007a52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a54:	204c      	movs	r0, #76	; 0x4c
 8007a56:	fb00 f303 	mul.w	r3, r0, r3
 8007a5a:	440b      	add	r3, r1
 8007a5c:	3354      	adds	r3, #84	; 0x54
 8007a5e:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 8007a60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a62:	4613      	mov	r3, r2
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	4413      	add	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	440b      	add	r3, r1
 8007a6c:	3310      	adds	r3, #16
 8007a6e:	4602      	mov	r2, r0
 8007a70:	801a      	strh	r2, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
					presults->VL53L1_p_002[i].range_status;
 8007a72:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].range_status =
 8007a76:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].range_status;
 8007a7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a7c:	204c      	movs	r0, #76	; 0x4c
 8007a7e:	fb00 f303 	mul.w	r3, r0, r3
 8007a82:	440b      	add	r3, r1
 8007a84:	335e      	adds	r3, #94	; 0x5e
 8007a86:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
 8007a88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	4413      	add	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	440b      	add	r3, r1
 8007a94:	3312      	adds	r3, #18
 8007a96:	4602      	mov	r2, r0
 8007a98:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8007a9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8007aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007aa6:	7c9b      	ldrb	r3, [r3, #18]
 8007aa8:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d3a6      	bcc.n	80079fe <VL53L1_get_device_results+0x75c>
		}
	}



	memcpy(
 8007ab0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8007ab4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f013 f8ba 	bl	801ac30 <memcpy>
		presults,
		sizeof(VL53L1_range_results_t));



	if (status == VL53L1_ERROR_NONE)
 8007abc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d105      	bne.n	8007ad0 <VL53L1_get_device_results+0x82e>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f003 ff35 	bl	800b934 <VL53L1_check_ll_driver_rd_state>
 8007aca:	4603      	mov	r3, r0
 8007acc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8007ad0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3768      	adds	r7, #104	; 0x68
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007ade <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b084      	sub	sp, #16
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	70fb      	strb	r3, [r7, #3]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007aea:	2300      	movs	r3, #0
 8007aec:	73fb      	strb	r3, [r7, #15]





	if (status == VL53L1_ERROR_NONE)
 8007aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d107      	bne.n	8007b06 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8007af6:	78fb      	ldrb	r3, [r7, #3]
 8007af8:	2203      	movs	r2, #3
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f7fe fff3 	bl	8006ae8 <VL53L1_init_and_start_range>
 8007b02:	4603      	mov	r3, r0
 8007b04:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8007b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <VL53L1_get_histogram_bin_data>:


VL53L1_Error VL53L1_get_histogram_bin_data(
		VL53L1_DEV                   Dev,
		VL53L1_histogram_bin_data_t *pdata)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b0d2      	sub	sp, #328	; 0x148
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007b1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007b22:	6018      	str	r0, [r3, #0]
 8007b24:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007b28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007b2c:	6019      	str	r1, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev =
 8007b34:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007b38:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3318      	adds	r3, #24
 8007b40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8007b44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007b48:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007b52:	3308      	adds	r3, #8
 8007b54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53L1_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8007b58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b5c:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8007b60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8007b64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b68:	f203 3342 	addw	r3, r3, #834	; 0x342
 8007b6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8007b70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b74:	f203 3362 	addw	r3, r3, #866	; 0x362
 8007b78:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8007b7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b80:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8007b84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_range_results_t        *presults  = &(pres->range_results);
 8007b88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53L1_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8007b90:	f107 030c 	add.w	r3, r7, #12
 8007b94:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 8007baa:	2300      	movs	r3, #0
 8007bac:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint32_t   pll_period_us            = 0;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t    i                        = 0;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	int32_t    hist_merge				= 0;
 8007bc2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007bc6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8007bce:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10d      	bne.n	8007bf2 <VL53L1_get_histogram_bin_data+0xde>
		status = VL53L1_ReadMulti(
 8007bd6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007bda:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8007bde:	2353      	movs	r3, #83	; 0x53
 8007be0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8007be4:	2188      	movs	r1, #136	; 0x88
 8007be6:	6800      	ldr	r0, [r0, #0]
 8007be8:	f00d fe32 	bl	8015850 <VL53L1_ReadMulti>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53L1_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8007bf2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007bf6:	781a      	ldrb	r2, [r3, #0]
 8007bf8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007bfc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8007c06:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007c0a:	785a      	ldrb	r2, [r3, #1]
 8007c0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8007c1a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007c1e:	789a      	ldrb	r2, [r3, #2]
 8007c20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c24:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8007c2e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007c32:	78da      	ldrb	r2, [r3, #3]
 8007c34:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 8007c42:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007c46:	3304      	adds	r3, #4
 8007c48:	4619      	mov	r1, r3
 8007c4a:	2002      	movs	r0, #2
 8007c4c:	f004 fb75 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8007c50:	4603      	mov	r3, r0
 8007c52:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8007c54:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c58:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8007c62:	234e      	movs	r3, #78	; 0x4e
 8007c64:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8007c68:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007c6c:	f107 020c 	add.w	r2, r7, #12
 8007c70:	4413      	add	r3, r2
 8007c72:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8007c76:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007c7a:	2002      	movs	r0, #2
 8007c7c:	f004 fb5d 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8007c80:	4603      	mov	r3, r0
 8007c82:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8007c84:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c88:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8007c92:	2350      	movs	r3, #80	; 0x50
 8007c94:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__VCSEL_START -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8007c98:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007c9c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007ca0:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8007ca4:	5cd2      	ldrb	r2, [r2, r3]
 8007ca6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007caa:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8007cb4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007cb8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8007cc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cca:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8007cce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007cd2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8007cdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce4:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2



	i2c_buffer_offset_bytes =
 8007ce8:	2351      	movs	r3, #81	; 0x51
 8007cea:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8007cee:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007cf2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007cf6:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8007cfa:	5cd3      	ldrb	r3, [r2, r3]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8007d02:	2352      	movs	r3, #82	; 0x52
 8007d04:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8007d08:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007d0c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007d10:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8007d14:	5cd2      	ldrb	r2, [r2, r3]
 8007d16:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8007d20:	234d      	movs	r3, #77	; 0x4d
 8007d22:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8007d26:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007d2a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007d2e:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8007d32:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8007d36:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8007d38:	2306      	movs	r3, #6
 8007d3a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_0_2 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8007d3e:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8007d42:	f107 020c 	add.w	r2, r7, #12
 8007d46:	4413      	add	r3, r2
 8007d48:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8007d52:	e01a      	b.n	8007d8a <VL53L1_get_histogram_bin_data+0x276>
		pdata->bin_data[bin] =
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8007d54:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007d58:	2003      	movs	r0, #3
 8007d5a:	f004 fb8d 	bl	800c478 <VL53L1_i2c_decode_uint32_t>
 8007d5e:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8007d60:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8007d64:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8007d66:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007d6a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3206      	adds	r2, #6
 8007d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8007d76:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007d7a:	3303      	adds	r3, #3
 8007d7c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8007d80:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8007d84:	3301      	adds	r3, #1
 8007d86:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8007d8a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8007d8e:	2b17      	cmp	r3, #23
 8007d90:	d9e0      	bls.n	8007d54 <VL53L1_get_histogram_bin_data+0x240>
	}

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 8007d92:	f107 0208 	add.w	r2, r7, #8
 8007d96:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007d9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007d9e:	f248 018d 	movw	r1, #32909	; 0x808d
 8007da2:	6818      	ldr	r0, [r3, #0]
 8007da4:	f000 fbd0 	bl	8008548 <VL53L1_get_tuning_parm>
			&hist_merge);

	if (pdata->result__stream_count == 0) {
 8007da8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007dac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d118      	bne.n	8007dec <VL53L1_get_histogram_bin_data+0x2d8>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8007dba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007dbe:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8007dc2:	3318      	adds	r3, #24
 8007dc4:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8007dc8:	2100      	movs	r1, #0
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f012 ff3e 	bl	801ac4c <memset>
		pdev->bin_rec_pos = 0;
 8007dd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
		pdev->pos_before_next_recom = 0;
 8007dde:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
	}

	if (hist_merge == 1)
 8007dec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007df0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d10b      	bne.n	8007e12 <VL53L1_get_histogram_bin_data+0x2fe>
		vl53l1_histo_merge(Dev, pdata);
 8007dfa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007dfe:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8007e02:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e06:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007e0a:	6811      	ldr	r1, [r2, #0]
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	f7fd f97e 	bl	800510e <vl53l1_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8007e12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007e16:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8007e1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e1e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	709a      	strb	r2, [r3, #2]
	pdata->VL53L1_p_022               = 0;
 8007e26:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e2a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2200      	movs	r2, #0
 8007e32:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023             = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8007e34:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2218      	movs	r2, #24
 8007e40:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8007e42:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e46:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2218      	movs	r2, #24
 8007e4e:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8007e50:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007e54:	78da      	ldrb	r2, [r3, #3]
 8007e56:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e5a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8007e64:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007e68:	799b      	ldrb	r3, [r3, #6]
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	011b      	lsls	r3, r3, #4
 8007e6e:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8007e70:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e74:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 8007e7e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e82:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8007e8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e90:	7c1b      	ldrb	r3, [r3, #16]
 8007e92:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8007e94:	4413      	add	r3, r2
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e9c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53L1_p_019 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8007ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eaa:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53L1_p_019 =
 8007eac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007eb0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 8007eba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007ebe:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8007ec2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007ec6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007eca:	6811      	ldr	r1, [r2, #0]
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	f004 fed4 	bl	800cc7a <VL53L1_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8007ed2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007ed6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d117      	bne.n	8007f0e <VL53L1_get_histogram_bin_data+0x3fa>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8007ede:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007ee2:	791b      	ldrb	r3, [r3, #4]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	021b      	lsls	r3, r3, #8
 8007ee8:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8007eea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007eee:	795b      	ldrb	r3, [r3, #5]
 8007ef0:	b29b      	uxth	r3, r3
		encoded_timeout =
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 8007ef8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007efc:	799a      	ldrb	r2, [r3, #6]
 8007efe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007f02:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8007f0c:	e016      	b.n	8007f3c <VL53L1_get_histogram_bin_data+0x428>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8007f0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007f12:	79db      	ldrb	r3, [r3, #7]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	021b      	lsls	r3, r3, #8
 8007f18:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8007f1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007f1e:	7a1b      	ldrb	r3, [r3, #8]
 8007f20:	b29b      	uxth	r3, r3
		encoded_timeout =
 8007f22:	4413      	add	r3, r2
 8007f24:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 8007f28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007f2c:	7a5a      	ldrb	r2, [r3, #9]
 8007f2e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007f32:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8007f3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007f40:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2200      	movs	r2, #0
 8007f48:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8007f50:	e01f      	b.n	8007f92 <VL53L1_get_histogram_bin_data+0x47e>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8007f52:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8007f56:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007f5a:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8007f5e:	6812      	ldr	r2, [r2, #0]
 8007f60:	4413      	add	r3, r2
 8007f62:	7b1b      	ldrb	r3, [r3, #12]
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	2b07      	cmp	r3, #7
 8007f6a:	d10d      	bne.n	8007f88 <VL53L1_get_histogram_bin_data+0x474>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8007f6c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007f70:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	7adb      	ldrb	r3, [r3, #11]
 8007f78:	3304      	adds	r3, #4
 8007f7a:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8007f7c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007f80:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8007f88:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8007f92:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8007f96:	2b05      	cmp	r3, #5
 8007f98:	d9db      	bls.n	8007f52 <VL53L1_get_histogram_bin_data+0x43e>
	}

	pdata->total_periods_elapsed =
		VL53L1_decode_timeout(encoded_timeout);
 8007f9a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f004 fcdb 	bl	800c95a <VL53L1_decode_timeout>
 8007fa4:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8007fa6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007faa:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 8007fb4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007fb8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f007 fb54 	bl	800f670 <VL53L1_calc_pll_period_us>
 8007fc8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8007fcc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007fd0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fda:	3301      	adds	r3, #1
 8007fdc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8007fe0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007fe4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53L1_duration_maths(
 8007fee:	4619      	mov	r1, r3
 8007ff0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ff8:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8007ffc:	f007 fb4f 	bl	800f69e <VL53L1_duration_maths>
 8008000:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8008002:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008006:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8008010:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008014:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2200      	movs	r2, #0
 800801c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53L1_hist_calc_zero_distance_phase(pdata);
 8008020:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008024:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008028:	6818      	ldr	r0, [r3, #0]
 800802a:	f007 fc5e 	bl	800f8ea <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 800802e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008032:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008036:	6818      	ldr	r0, [r3, #0]
 8008038:	f008 f875 	bl	8010126 <VL53L1_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 800803c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008040:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008044:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008048:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8008050:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008054:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8008058:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800805c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 8008064:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008068:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	789b      	ldrb	r3, [r3, #2]
 8008070:	461a      	mov	r2, r3
 8008072:	4613      	mov	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	005b      	lsls	r3, r3, #1
 800807a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800807e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008082:	4413      	add	r3, r2
 8008084:	3302      	adds	r3, #2
 8008086:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 800808a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800808e:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8008090:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008094:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 800809e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080a2:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 80080a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80080a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 80080b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80080b6:	2200      	movs	r2, #0
 80080b8:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 80080ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80080be:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80080c8:	f003 031f 	and.w	r3, r3, #31
 80080cc:	2b11      	cmp	r3, #17
 80080ce:	bf8c      	ite	hi
 80080d0:	2201      	movhi	r2, #1
 80080d2:	2200      	movls	r2, #0
 80080d4:	b2d2      	uxtb	r2, r2
 80080d6:	2a00      	cmp	r2, #0
 80080d8:	d11b      	bne.n	8008112 <VL53L1_get_histogram_bin_data+0x5fe>
 80080da:	2201      	movs	r2, #1
 80080dc:	409a      	lsls	r2, r3
 80080de:	4b10      	ldr	r3, [pc, #64]	; (8008120 <VL53L1_get_histogram_bin_data+0x60c>)
 80080e0:	4013      	ands	r3, r2
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	bf14      	ite	ne
 80080e6:	2301      	movne	r3, #1
 80080e8:	2300      	moveq	r3, #0
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d010      	beq.n	8008112 <VL53L1_get_histogram_bin_data+0x5fe>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 80080f0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80080f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80080fe:	f003 031f 	and.w	r3, r3, #31
 8008102:	b2da      	uxtb	r2, r3
 8008104:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008108:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53L1_ERROR_RANGE_ERROR;
 800810a:	23fa      	movs	r3, #250	; 0xfa
 800810c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8008110:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8008112:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8008116:	4618      	mov	r0, r3
 8008118:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	0002200e 	.word	0x0002200e

08008124 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8008124:	b480      	push	{r7}
 8008126:	b08b      	sub	sp, #44	; 0x2c
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 800813c:	2300      	movs	r3, #0
 800813e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2200      	movs	r2, #0
 8008144:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	78da      	ldrb	r2, [r3, #3]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2200      	movs	r2, #0
 8008152:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	2204      	movs	r2, #4
 8008158:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2201      	movs	r2, #1
 800815e:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	8a1b      	ldrh	r3, [r3, #16]
 8008164:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	8a9b      	ldrh	r3, [r3, #20]
 800816a:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	8a5b      	ldrh	r3, [r3, #18]
 8008170:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8008172:	2300      	movs	r3, #0
 8008174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008178:	e00b      	b.n	8008192 <VL53L1_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53L1_p_007[i] = 0;
 800817a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	005b      	lsls	r3, r3, #1
 8008182:	4413      	add	r3, r2
 8008184:	2200      	movs	r2, #0
 8008186:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8008188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800818c:	3301      	adds	r3, #1
 800818e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008196:	2b04      	cmp	r3, #4
 8008198:	d9ef      	bls.n	800817a <VL53L1_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53L1_p_002[0]);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	3314      	adds	r3, #20
 800819e:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 80081a0:	2300      	movs	r3, #0
 80081a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80081a6:	e0fe      	b.n	80083a6 <VL53L1_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80081ae:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	2200      	movs	r2, #0
 80081b4:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	78db      	ldrb	r3, [r3, #3]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10a      	bne.n	80081d4 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	785b      	ldrb	r3, [r3, #1]
 80081c2:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 80081c6:	2b09      	cmp	r3, #9
 80081c8:	d104      	bne.n	80081d4 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 80081ca:	6a3b      	ldr	r3, [r7, #32]
 80081cc:	2213      	movs	r2, #19
 80081ce:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80081d2:	e007      	b.n	80081e4 <VL53L1_copy_sys_and_core_results_to_range_results+0xc0>
				VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	f003 031f 	and.w	r3, r3, #31
 80081dc:	b2da      	uxtb	r2, r3
			pdata->range_status =
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53L1_p_015 = 0;
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	2200      	movs	r2, #0
 80081e8:	721a      	strb	r2, [r3, #8]
		pdata->VL53L1_p_022    = 0;
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	2200      	movs	r2, #0
 80081ee:	725a      	strb	r2, [r3, #9]
		pdata->VL53L1_p_025   = 0;
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	2200      	movs	r2, #0
 80081f4:	729a      	strb	r2, [r3, #10]
		pdata->VL53L1_p_026     = 0;
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	2200      	movs	r2, #0
 80081fa:	72da      	strb	r2, [r3, #11]
		pdata->VL53L1_p_016   = 0;
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	2200      	movs	r2, #0
 8008200:	731a      	strb	r2, [r3, #12]
		pdata->VL53L1_p_027    = 0;
 8008202:	6a3b      	ldr	r3, [r7, #32]
 8008204:	2200      	movs	r2, #0
 8008206:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8008208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <VL53L1_copy_sys_and_core_results_to_range_results+0xf2>
 8008210:	2b01      	cmp	r3, #1
 8008212:	d05c      	beq.n	80082ce <VL53L1_copy_sys_and_core_results_to_range_results+0x1aa>
 8008214:	e0a8      	b.n	8008368 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	789b      	ldrb	r3, [r3, #2]
 800821a:	2b07      	cmp	r3, #7
 800821c:	d103      	bne.n	8008226 <VL53L1_copy_sys_and_core_results_to_range_results+0x102>
				VL53L1_DEVICEREPORTSTATUS_MM1)
				pdata->VL53L1_p_006 =
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	8a7a      	ldrh	r2, [r7, #18]
 8008222:	82da      	strh	r2, [r3, #22]
 8008224:	e00b      	b.n	800823e <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	789b      	ldrb	r3, [r3, #2]
 800822a:	2b08      	cmp	r3, #8
 800822c:	d103      	bne.n	8008236 <VL53L1_copy_sys_and_core_results_to_range_results+0x112>
					VL53L1_DEVICEREPORTSTATUS_MM2)
				pdata->VL53L1_p_006 =
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	8aba      	ldrh	r2, [r7, #20]
 8008232:	82da      	strh	r2, [r3, #22]
 8008234:	e003      	b.n	800823e <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd0;
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53L1_p_006 =
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	8afa      	ldrh	r2, [r7, #22]
 8008242:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8008250:	6a3b      	ldr	r3, [r7, #32]
 8008252:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	895b      	ldrh	r3, [r3, #10]
 8008258:	015b      	lsls	r3, r3, #5
 800825a:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008262:	d302      	bcc.n	800826a <VL53L1_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8008264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008268:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	b29a      	uxth	r2, r3
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd0;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53L1_p_014 =
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8008280:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	fb02 f303 	mul.w	r3, r2, r3
 800828a:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008292:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	2b00      	cmp	r3, #0
 8008298:	da01      	bge.n	800829e <VL53L1_copy_sys_and_core_results_to_range_results+0x17a>
 800829a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800829e:	12db      	asrs	r3, r3, #11
 80082a0:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	b21a      	sxth	r2, r3
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd0;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685a      	ldr	r2, [r3, #4]
			pdata->VL53L1_p_021 =
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd0;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	689a      	ldr	r2, [r3, #8]
			pdata->VL53L1_p_013 =
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd0;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681a      	ldr	r2, [r3, #0]
			pdata->VL53L1_p_020 =
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 80082cc:	e04c      	b.n	8008368 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd1;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53L1_p_006 =
 80082d2:	6a3b      	ldr	r3, [r7, #32]
 80082d4:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 80082de:	6a3b      	ldr	r3, [r7, #32]
 80082e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082e4:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	8bdb      	ldrh	r3, [r3, #30]
 80082f2:	015b      	lsls	r3, r3, #5
 80082f4:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082fc:	d302      	bcc.n	8008304 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 80082fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008302:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	b29a      	uxth	r2, r3
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd1;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53L1_p_014 =
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 800831a:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	fb02 f303 	mul.w	r3, r2, r3
 8008324:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800832c:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	2b00      	cmp	r3, #0
 8008332:	da01      	bge.n	8008338 <VL53L1_copy_sys_and_core_results_to_range_results+0x214>
 8008334:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8008338:	12db      	asrs	r3, r3, #11
 800833a:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	b21a      	sxth	r2, r3
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd1;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	695a      	ldr	r2, [r3, #20]
			pdata->VL53L1_p_021 =
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd1;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699a      	ldr	r2, [r3, #24]
			pdata->VL53L1_p_013 =
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd1;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	691a      	ldr	r2, [r3, #16]
			pdata->VL53L1_p_020 =
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8008366:	bf00      	nop
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8008390:	6a3b      	ldr	r3, [r7, #32]
 8008392:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	334c      	adds	r3, #76	; 0x4c
 800839a:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 800839c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083a0:	3301      	adds	r3, #1
 80083a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80083a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	f67f aefc 	bls.w	80081a8 <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	2200      	movs	r2, #0
 80083b4:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	785b      	ldrb	r3, [r3, #1]
 80083ba:	f003 031f 	and.w	r3, r3, #31
 80083be:	2b11      	cmp	r3, #17
 80083c0:	bf8c      	ite	hi
 80083c2:	2201      	movhi	r2, #1
 80083c4:	2200      	movls	r2, #0
 80083c6:	b2d2      	uxtb	r2, r2
 80083c8:	2a00      	cmp	r2, #0
 80083ca:	d116      	bne.n	80083fa <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
 80083cc:	2201      	movs	r2, #1
 80083ce:	409a      	lsls	r2, r3
 80083d0:	4b0d      	ldr	r3, [pc, #52]	; (8008408 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e4>)
 80083d2:	4013      	ands	r3, r2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	bf14      	ite	ne
 80083d8:	2301      	movne	r3, #1
 80083da:	2300      	moveq	r3, #0
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00b      	beq.n	80083fa <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	785b      	ldrb	r3, [r3, #1]
 80083e6:	f003 031f 	and.w	r3, r3, #31
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53L1_p_002[0].range_status =
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53L1_DEVICEERROR_NOUPDATE;
	break;
 80083f8:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 80083fa:	bf00      	nop
 80083fc:	372c      	adds	r7, #44	; 0x2c
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	0002200e 	.word	0x0002200e

0800840c <VL53L1_set_zone_dss_config>:


VL53L1_Error VL53L1_set_zone_dss_config(
	VL53L1_DEV                      Dev,
	VL53L1_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008416:	2300      	movs	r3, #0
 8008418:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	3318      	adds	r3, #24
 800841e:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	332c      	adds	r3, #44	; 0x2c
 8008424:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b05      	cmp	r3, #5
 800842c:	d109      	bne.n	8008442 <VL53L1_set_zone_dss_config+0x36>
		VL53L1_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2202      	movs	r2, #2
 8008432:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
 8008440:	e003      	b.n	800844a <VL53L1_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 800844a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800844e:	4618      	mov	r0, r3
 8008450:	371c      	adds	r7, #28
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <VL53L1_set_dmax_mode>:


VL53L1_Error VL53L1_set_dmax_mode(
	VL53L1_DEV               Dev,
	VL53L1_DeviceDmaxMode    dmax_mode)
{
 800845a:	b480      	push	{r7}
 800845c:	b085      	sub	sp, #20
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	460b      	mov	r3, r1
 8008464:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008466:	2300      	movs	r3, #0
 8008468:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	3318      	adds	r3, #24
 800846e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	78fa      	ldrb	r2, [r7, #3]
 8008474:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8008476:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <VL53L1_get_dmax_calibration_data>:
VL53L1_Error VL53L1_get_dmax_calibration_data(
	VL53L1_DEV                      Dev,
	VL53L1_DeviceDmaxMode           dmax_mode,
	uint8_t                         zone_id,
	VL53L1_dmax_calibration_data_t *pdmax_cal)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b088      	sub	sp, #32
 800848a:	af00      	add	r7, sp, #0
 800848c:	60f8      	str	r0, [r7, #12]
 800848e:	607b      	str	r3, [r7, #4]
 8008490:	460b      	mov	r3, r1
 8008492:	72fb      	strb	r3, [r7, #11]
 8008494:	4613      	mov	r3, r2
 8008496:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008498:	2300      	movs	r3, #0
 800849a:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t    *pdev =
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	3318      	adds	r3, #24
 80084a0:	61bb      	str	r3, [r7, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80084a8:	3308      	adds	r3, #8
 80084aa:	617b      	str	r3, [r7, #20]
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 80084ac:	7afb      	ldrb	r3, [r7, #11]
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	d006      	beq.n	80084c0 <VL53L1_get_dmax_calibration_data+0x3a>
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	dc3e      	bgt.n	8008534 <VL53L1_get_dmax_calibration_data+0xae>
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d034      	beq.n	8008524 <VL53L1_get_dmax_calibration_data+0x9e>
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d02a      	beq.n	8008514 <VL53L1_get_dmax_calibration_data+0x8e>
 80084be:	e039      	b.n	8008534 <VL53L1_get_dmax_calibration_data+0xae>

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 80084c0:	7aba      	ldrb	r2, [r7, #10]
 80084c2:	6979      	ldr	r1, [r7, #20]
 80084c4:	4613      	mov	r3, r2
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	1a9b      	subs	r3, r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	440b      	add	r3, r1
 80084ce:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	b29a      	uxth	r2, r3
		pdmax_cal->ref__actual_effective_spads =
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	801a      	strh	r2, [r3, #0]
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 80084da:	7aba      	ldrb	r2, [r7, #10]
 80084dc:	6979      	ldr	r1, [r7, #20]
 80084de:	4613      	mov	r3, r2
 80084e0:	00db      	lsls	r3, r3, #3
 80084e2:	1a9b      	subs	r3, r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	440b      	add	r3, r1
 80084e8:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	b29a      	uxth	r2, r3
		pdmax_cal->ref__peak_signal_count_rate_mcps =
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
		pres->zone_cal.cal_distance_mm;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f9b3 3792 	ldrsh.w	r3, [r3, #1938]	; 0x792
 80084fa:	b29a      	uxth	r2, r3
		pdmax_cal->ref__distance_mm =
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	809a      	strh	r2, [r3, #4]
		pdmax_cal->ref_reflectance_pc =
		pres->zone_cal.cal_reflectance_pc;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	f8b3 2794 	ldrh.w	r2, [r3, #1940]	; 0x794
		pdmax_cal->ref_reflectance_pc =
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	80da      	strh	r2, [r3, #6]
		pdmax_cal->coverglass_transmission = 0x0100;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008510:	811a      	strh	r2, [r3, #8]
	break;
 8008512:	e012      	b.n	800853a <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8008518:	220a      	movs	r2, #10
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f012 fb87 	bl	801ac30 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 8008522:	e00a      	b.n	800853a <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8008528:	220a      	movs	r2, #10
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f012 fb7f 	bl	801ac30 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 8008532:	e002      	b.n	800853a <VL53L1_get_dmax_calibration_data+0xb4>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008534:	23fc      	movs	r3, #252	; 0xfc
 8008536:	77fb      	strb	r3, [r7, #31]
	break;
 8008538:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800853a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3720      	adds	r7, #32
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
	...

08008548 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8008548:	b480      	push	{r7}
 800854a:	b089      	sub	sp, #36	; 0x24
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	460b      	mov	r3, r1
 8008552:	607a      	str	r2, [r7, #4]
 8008554:	817b      	strh	r3, [r7, #10]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008556:	2300      	movs	r3, #0
 8008558:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	3318      	adds	r3, #24
 800855e:	61bb      	str	r3, [r7, #24]
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8008566:	617b      	str	r3, [r7, #20]
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800856e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8008570:	897b      	ldrh	r3, [r7, #10]
 8008572:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8008576:	2bbe      	cmp	r3, #190	; 0xbe
 8008578:	f200 86fc 	bhi.w	8009374 <VL53L1_get_tuning_parm+0xe2c>
 800857c:	a201      	add	r2, pc, #4	; (adr r2, 8008584 <VL53L1_get_tuning_parm+0x3c>)
 800857e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008582:	bf00      	nop
 8008584:	08008881 	.word	0x08008881
 8008588:	08008891 	.word	0x08008891
 800858c:	080088a1 	.word	0x080088a1
 8008590:	080088b1 	.word	0x080088b1
 8008594:	080088bf 	.word	0x080088bf
 8008598:	080088cd 	.word	0x080088cd
 800859c:	080088db 	.word	0x080088db
 80085a0:	080088e9 	.word	0x080088e9
 80085a4:	080088f7 	.word	0x080088f7
 80085a8:	08008905 	.word	0x08008905
 80085ac:	08008913 	.word	0x08008913
 80085b0:	0800891f 	.word	0x0800891f
 80085b4:	0800892d 	.word	0x0800892d
 80085b8:	0800893b 	.word	0x0800893b
 80085bc:	08008947 	.word	0x08008947
 80085c0:	08008955 	.word	0x08008955
 80085c4:	08008963 	.word	0x08008963
 80085c8:	08008973 	.word	0x08008973
 80085cc:	08008983 	.word	0x08008983
 80085d0:	08008991 	.word	0x08008991
 80085d4:	080089a1 	.word	0x080089a1
 80085d8:	080089af 	.word	0x080089af
 80085dc:	080089bf 	.word	0x080089bf
 80085e0:	080089cf 	.word	0x080089cf
 80085e4:	080089df 	.word	0x080089df
 80085e8:	080089ef 	.word	0x080089ef
 80085ec:	080089ff 	.word	0x080089ff
 80085f0:	08008a0f 	.word	0x08008a0f
 80085f4:	08008a1f 	.word	0x08008a1f
 80085f8:	08008a2f 	.word	0x08008a2f
 80085fc:	08008a3f 	.word	0x08008a3f
 8008600:	08008a4d 	.word	0x08008a4d
 8008604:	08008a5d 	.word	0x08008a5d
 8008608:	08008a6d 	.word	0x08008a6d
 800860c:	08008a7d 	.word	0x08008a7d
 8008610:	08008a8d 	.word	0x08008a8d
 8008614:	08008a9d 	.word	0x08008a9d
 8008618:	08008aad 	.word	0x08008aad
 800861c:	08008abd 	.word	0x08008abd
 8008620:	08008acd 	.word	0x08008acd
 8008624:	08008add 	.word	0x08008add
 8008628:	08008aed 	.word	0x08008aed
 800862c:	08008afd 	.word	0x08008afd
 8008630:	08008b0d 	.word	0x08008b0d
 8008634:	08008b1d 	.word	0x08008b1d
 8008638:	08008b2d 	.word	0x08008b2d
 800863c:	08008b3d 	.word	0x08008b3d
 8008640:	08008b4d 	.word	0x08008b4d
 8008644:	08008b5d 	.word	0x08008b5d
 8008648:	08008b6d 	.word	0x08008b6d
 800864c:	08008b7d 	.word	0x08008b7d
 8008650:	08008b8b 	.word	0x08008b8b
 8008654:	08008b99 	.word	0x08008b99
 8008658:	08008ba7 	.word	0x08008ba7
 800865c:	08008bb5 	.word	0x08008bb5
 8008660:	08008bc3 	.word	0x08008bc3
 8008664:	08008bd1 	.word	0x08008bd1
 8008668:	08008bdf 	.word	0x08008bdf
 800866c:	08008bed 	.word	0x08008bed
 8008670:	08008bfb 	.word	0x08008bfb
 8008674:	08008c09 	.word	0x08008c09
 8008678:	08008c17 	.word	0x08008c17
 800867c:	08008c25 	.word	0x08008c25
 8008680:	08008c33 	.word	0x08008c33
 8008684:	08008c41 	.word	0x08008c41
 8008688:	08008c4f 	.word	0x08008c4f
 800868c:	08008c5d 	.word	0x08008c5d
 8008690:	08008c6b 	.word	0x08008c6b
 8008694:	08008c79 	.word	0x08008c79
 8008698:	08008c87 	.word	0x08008c87
 800869c:	08008c95 	.word	0x08008c95
 80086a0:	08008ca3 	.word	0x08008ca3
 80086a4:	08008cb1 	.word	0x08008cb1
 80086a8:	08008cbf 	.word	0x08008cbf
 80086ac:	08008ccb 	.word	0x08008ccb
 80086b0:	08008cd9 	.word	0x08008cd9
 80086b4:	08008ce7 	.word	0x08008ce7
 80086b8:	08008cf3 	.word	0x08008cf3
 80086bc:	08008cff 	.word	0x08008cff
 80086c0:	08008d0b 	.word	0x08008d0b
 80086c4:	08008d17 	.word	0x08008d17
 80086c8:	08008d23 	.word	0x08008d23
 80086cc:	08008d2f 	.word	0x08008d2f
 80086d0:	08008d3d 	.word	0x08008d3d
 80086d4:	08008d4b 	.word	0x08008d4b
 80086d8:	08008d59 	.word	0x08008d59
 80086dc:	08008d67 	.word	0x08008d67
 80086e0:	08008d75 	.word	0x08008d75
 80086e4:	08008d83 	.word	0x08008d83
 80086e8:	08008d91 	.word	0x08008d91
 80086ec:	08008d9f 	.word	0x08008d9f
 80086f0:	08008dad 	.word	0x08008dad
 80086f4:	08008dbb 	.word	0x08008dbb
 80086f8:	08008dc9 	.word	0x08008dc9
 80086fc:	08008dd7 	.word	0x08008dd7
 8008700:	08008de5 	.word	0x08008de5
 8008704:	08008df3 	.word	0x08008df3
 8008708:	08008e01 	.word	0x08008e01
 800870c:	08008e0f 	.word	0x08008e0f
 8008710:	08008e1d 	.word	0x08008e1d
 8008714:	08008e2b 	.word	0x08008e2b
 8008718:	08008e39 	.word	0x08008e39
 800871c:	08008e47 	.word	0x08008e47
 8008720:	08008e55 	.word	0x08008e55
 8008724:	08008e63 	.word	0x08008e63
 8008728:	08008e71 	.word	0x08008e71
 800872c:	08008e7f 	.word	0x08008e7f
 8008730:	08008e8d 	.word	0x08008e8d
 8008734:	08008e9b 	.word	0x08008e9b
 8008738:	08008ea9 	.word	0x08008ea9
 800873c:	08008eb7 	.word	0x08008eb7
 8008740:	08008ec5 	.word	0x08008ec5
 8008744:	08008ed3 	.word	0x08008ed3
 8008748:	08008ee1 	.word	0x08008ee1
 800874c:	08008eef 	.word	0x08008eef
 8008750:	08008efd 	.word	0x08008efd
 8008754:	08008f0b 	.word	0x08008f0b
 8008758:	08008f19 	.word	0x08008f19
 800875c:	08008f27 	.word	0x08008f27
 8008760:	08008f39 	.word	0x08008f39
 8008764:	08008f4b 	.word	0x08008f4b
 8008768:	08008f5d 	.word	0x08008f5d
 800876c:	08008f6f 	.word	0x08008f6f
 8008770:	08008f81 	.word	0x08008f81
 8008774:	08008f93 	.word	0x08008f93
 8008778:	08008fa5 	.word	0x08008fa5
 800877c:	08008fb7 	.word	0x08008fb7
 8008780:	08008fc9 	.word	0x08008fc9
 8008784:	08008fdb 	.word	0x08008fdb
 8008788:	08008fed 	.word	0x08008fed
 800878c:	08008fff 	.word	0x08008fff
 8008790:	08009011 	.word	0x08009011
 8008794:	08009023 	.word	0x08009023
 8008798:	08009035 	.word	0x08009035
 800879c:	08009047 	.word	0x08009047
 80087a0:	08009059 	.word	0x08009059
 80087a4:	0800906b 	.word	0x0800906b
 80087a8:	0800907d 	.word	0x0800907d
 80087ac:	0800908b 	.word	0x0800908b
 80087b0:	08009099 	.word	0x08009099
 80087b4:	080090a7 	.word	0x080090a7
 80087b8:	080090b5 	.word	0x080090b5
 80087bc:	080090c3 	.word	0x080090c3
 80087c0:	080090d1 	.word	0x080090d1
 80087c4:	080090df 	.word	0x080090df
 80087c8:	080090f1 	.word	0x080090f1
 80087cc:	080090ff 	.word	0x080090ff
 80087d0:	0800910d 	.word	0x0800910d
 80087d4:	0800911b 	.word	0x0800911b
 80087d8:	08009129 	.word	0x08009129
 80087dc:	08009137 	.word	0x08009137
 80087e0:	08009145 	.word	0x08009145
 80087e4:	08009153 	.word	0x08009153
 80087e8:	08009161 	.word	0x08009161
 80087ec:	0800916f 	.word	0x0800916f
 80087f0:	0800917d 	.word	0x0800917d
 80087f4:	0800918b 	.word	0x0800918b
 80087f8:	08009199 	.word	0x08009199
 80087fc:	080091a7 	.word	0x080091a7
 8008800:	080091b5 	.word	0x080091b5
 8008804:	080091c3 	.word	0x080091c3
 8008808:	080091d1 	.word	0x080091d1
 800880c:	080091df 	.word	0x080091df
 8008810:	080091ed 	.word	0x080091ed
 8008814:	080091fb 	.word	0x080091fb
 8008818:	08009209 	.word	0x08009209
 800881c:	08009217 	.word	0x08009217
 8008820:	08009225 	.word	0x08009225
 8008824:	08009233 	.word	0x08009233
 8008828:	08009241 	.word	0x08009241
 800882c:	0800924f 	.word	0x0800924f
 8008830:	0800925d 	.word	0x0800925d
 8008834:	0800926b 	.word	0x0800926b
 8008838:	08009279 	.word	0x08009279
 800883c:	08009287 	.word	0x08009287
 8008840:	08009295 	.word	0x08009295
 8008844:	080092a3 	.word	0x080092a3
 8008848:	080092b1 	.word	0x080092b1
 800884c:	080092bf 	.word	0x080092bf
 8008850:	080092cd 	.word	0x080092cd
 8008854:	080092db 	.word	0x080092db
 8008858:	080092e9 	.word	0x080092e9
 800885c:	080092f7 	.word	0x080092f7
 8008860:	08009305 	.word	0x08009305
 8008864:	08009313 	.word	0x08009313
 8008868:	08009321 	.word	0x08009321
 800886c:	0800932f 	.word	0x0800932f
 8008870:	0800933d 	.word	0x0800933d
 8008874:	0800934b 	.word	0x0800934b
 8008878:	08009359 	.word	0x08009359
 800887c:	08009367 	.word	0x08009367

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 8008886:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	601a      	str	r2, [r3, #0]
	break;
 800888c:	f000 bd79 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 8008896:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	601a      	str	r2, [r3, #0]
	break;
 800889c:	f000 bd71 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 80088a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	601a      	str	r2, [r3, #0]
	break;
 80088ac:	f000 bd69 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	601a      	str	r2, [r3, #0]
	break;
 80088ba:	f000 bd62 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	785b      	ldrb	r3, [r3, #1]
 80088c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	601a      	str	r2, [r3, #0]
	break;
 80088c8:	f000 bd5b 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	789b      	ldrb	r3, [r3, #2]
 80088d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	601a      	str	r2, [r3, #0]
	break;
 80088d6:	f000 bd54 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	78db      	ldrb	r3, [r3, #3]
 80088de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	601a      	str	r2, [r3, #0]
	break;
 80088e4:	f000 bd4d 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	791b      	ldrb	r3, [r3, #4]
 80088ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	601a      	str	r2, [r3, #0]
	break;
 80088f2:	f000 bd46 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	795b      	ldrb	r3, [r3, #5]
 80088fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	601a      	str	r2, [r3, #0]
	break;
 8008900:	f000 bd3f 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	799b      	ldrb	r3, [r3, #6]
 8008908:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	601a      	str	r2, [r3, #0]
	break;
 800890e:	f000 bd38 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	601a      	str	r2, [r3, #0]
	break;
 800891a:	f000 bd32 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	891b      	ldrh	r3, [r3, #8]
 8008922:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	601a      	str	r2, [r3, #0]
	break;
 8008928:	f000 bd2b 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	8a1b      	ldrh	r3, [r3, #16]
 8008930:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	601a      	str	r2, [r3, #0]
	break;
 8008936:	f000 bd24 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	601a      	str	r2, [r3, #0]
	break;
 8008942:	f000 bd1e 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	7e1b      	ldrb	r3, [r3, #24]
 800894a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	601a      	str	r2, [r3, #0]
	break;
 8008950:	f000 bd17 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	8b5b      	ldrh	r3, [r3, #26]
 8008958:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	601a      	str	r2, [r3, #0]
	break;
 800895e:	f000 bd10 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8008968:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	601a      	str	r2, [r3, #0]
	break;
 800896e:	f000 bd08 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008978:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	601a      	str	r2, [r3, #0]
	break;
 800897e:	f000 bd00 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008986:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	601a      	str	r2, [r3, #0]
	break;
 800898c:	f000 bcf9 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008996:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	601a      	str	r2, [r3, #0]
	break;
 800899c:	f000 bcf1 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80089a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	601a      	str	r2, [r3, #0]
	break;
 80089aa:	f000 bcea 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80089b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	601a      	str	r2, [r3, #0]
	break;
 80089ba:	f000 bce2 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 80089c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	601a      	str	r2, [r3, #0]
	break;
 80089ca:	f000 bcda 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80089d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	601a      	str	r2, [r3, #0]
	break;
 80089da:	f000 bcd2 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80089e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	601a      	str	r2, [r3, #0]
	break;
 80089ea:	f000 bcca 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80089f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	601a      	str	r2, [r3, #0]
	break;
 80089fa:	f000 bcc2 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8008a04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	601a      	str	r2, [r3, #0]
	break;
 8008a0a:	f000 bcba 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	f9b3 32ea 	ldrsh.w	r3, [r3, #746]	; 0x2ea
		*ptuning_parm_value = (int32_t)(
 8008a14:	461a      	mov	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	601a      	str	r2, [r3, #0]
	break;
 8008a1a:	f000 bcb2 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	f9b3 32ec 	ldrsh.w	r3, [r3, #748]	; 0x2ec
		*ptuning_parm_value = (int32_t)(
 8008a24:	461a      	mov	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	601a      	str	r2, [r3, #0]
	break;
 8008a2a:	f000 bcaa 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8008a34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	601a      	str	r2, [r3, #0]
	break;
 8008a3a:	f000 bca2 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	601a      	str	r2, [r3, #0]
	break;
 8008a48:	f000 bc9b 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
		*ptuning_parm_value = (int32_t)(
 8008a52:	461a      	mov	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	601a      	str	r2, [r3, #0]
	break;
 8008a58:	f000 bc93 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	601a      	str	r2, [r3, #0]
	break;
 8008a68:	f000 bc8b 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	f9b3 32e2 	ldrsh.w	r3, [r3, #738]	; 0x2e2
 8008a72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	601a      	str	r2, [r3, #0]
	break;
 8008a78:	f000 bc83 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8008a82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	601a      	str	r2, [r3, #0]
	break;
 8008a88:	f000 bc7b 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8008a92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	601a      	str	r2, [r3, #0]
	break;
 8008a98:	f000 bc73 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8008aa2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	601a      	str	r2, [r3, #0]
	break;
 8008aa8:	f000 bc6b 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8008ab2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	601a      	str	r2, [r3, #0]
	break;
 8008ab8:	f000 bc63 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 8008ac2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	601a      	str	r2, [r3, #0]
	break;
 8008ac8:	f000 bc5b 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 8008ad2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	601a      	str	r2, [r3, #0]
	break;
 8008ad8:	f000 bc53 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8008ae2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	601a      	str	r2, [r3, #0]
	break;
 8008ae8:	f000 bc4b 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 8008af2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	601a      	str	r2, [r3, #0]
	break;
 8008af8:	f000 bc43 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 8008b02:	461a      	mov	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	601a      	str	r2, [r3, #0]
	break;
 8008b08:	f000 bc3b 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8008b12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	601a      	str	r2, [r3, #0]
	break;
 8008b18:	f000 bc33 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 8008b22:	461a      	mov	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	601a      	str	r2, [r3, #0]
	break;
 8008b28:	f000 bc2b 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8008b32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	601a      	str	r2, [r3, #0]
	break;
 8008b38:	f000 bc23 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 8008b42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	601a      	str	r2, [r3, #0]
	break;
 8008b48:	f000 bc1b 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 8008b52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	601a      	str	r2, [r3, #0]
	break;
 8008b58:	f000 bc13 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8008b62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	601a      	str	r2, [r3, #0]
	break;
 8008b68:	f000 bc0b 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 8008b72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	601a      	str	r2, [r3, #0]
	break;
 8008b78:	f000 bc03 	b.w	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8008b82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	601a      	str	r2, [r3, #0]
	break;
 8008b88:	e3fb      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 8008b90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	601a      	str	r2, [r3, #0]
	break;
 8008b96:	e3f4      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	f9b3 32e4 	ldrsh.w	r3, [r3, #740]	; 0x2e4
 8008b9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	601a      	str	r2, [r3, #0]
	break;
 8008ba4:	e3ed      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8008bac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	601a      	str	r2, [r3, #0]
	break;
 8008bb2:	e3e6      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8008bba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	601a      	str	r2, [r3, #0]
	break;
 8008bc0:	e3df      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8008bc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	601a      	str	r2, [r3, #0]
	break;
 8008bce:	e3d8      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8008bd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	601a      	str	r2, [r3, #0]
	break;
 8008bdc:	e3d1      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8008be4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	601a      	str	r2, [r3, #0]
	break;
 8008bea:	e3ca      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8008bf2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	601a      	str	r2, [r3, #0]
	break;
 8008bf8:	e3c3      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8008c00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	601a      	str	r2, [r3, #0]
	break;
 8008c06:	e3bc      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8008c0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	601a      	str	r2, [r3, #0]
	break;
 8008c14:	e3b5      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	; 0x2a4
 8008c1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	601a      	str	r2, [r3, #0]
	break;
 8008c22:	e3ae      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	; 0x2a6
 8008c2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	601a      	str	r2, [r3, #0]
	break;
 8008c30:	e3a7      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 8008c38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	601a      	str	r2, [r3, #0]
	break;
 8008c3e:	e3a0      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 8008c46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	601a      	str	r2, [r3, #0]
	break;
 8008c4c:	e399      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8008c54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	601a      	str	r2, [r3, #0]
	break;
 8008c5a:	e392      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008c62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	601a      	str	r2, [r3, #0]
	break;
 8008c68:	e38b      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8008c70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	601a      	str	r2, [r3, #0]
	break;
 8008c76:	e384      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 8008c7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	601a      	str	r2, [r3, #0]
	break;
 8008c84:	e37d      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8008c8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	601a      	str	r2, [r3, #0]
	break;
 8008c92:	e376      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 8008c9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	601a      	str	r2, [r3, #0]
	break;
 8008ca0:	e36f      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8008ca8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	601a      	str	r2, [r3, #0]
	break;
 8008cae:	e368      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8008cb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	601a      	str	r2, [r3, #0]
	break;
 8008cbc:	e361      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	7c1b      	ldrb	r3, [r3, #16]
 8008cc2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	601a      	str	r2, [r3, #0]
	break;
 8008cc8:	e35b      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008cd0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	601a      	str	r2, [r3, #0]
	break;
 8008cd6:	e354      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008cde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	601a      	str	r2, [r3, #0]
	break;
 8008ce4:	e34d      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	881b      	ldrh	r3, [r3, #0]
 8008cea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	601a      	str	r2, [r3, #0]
	break;
 8008cf0:	e347      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	601a      	str	r2, [r3, #0]
	break;
 8008cfc:	e341      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	8adb      	ldrh	r3, [r3, #22]
 8008d02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	601a      	str	r2, [r3, #0]
	break;
 8008d08:	e33b      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	8b1b      	ldrh	r3, [r3, #24]
 8008d0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	601a      	str	r2, [r3, #0]
	break;
 8008d14:	e335      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	601a      	str	r2, [r3, #0]
	break;
 8008d20:	e32f      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	601a      	str	r2, [r3, #0]
	break;
 8008d2c:	e329      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	f8b3 32f4 	ldrh.w	r3, [r3, #756]	; 0x2f4
 8008d34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	601a      	str	r2, [r3, #0]
	break;
 8008d3a:	e322      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8008d42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	601a      	str	r2, [r3, #0]
	break;
 8008d48:	e31b      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	601a      	str	r2, [r3, #0]
	break;
 8008d56:	e314      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8008d5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	601a      	str	r2, [r3, #0]
	break;
 8008d64:	e30d      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 8008d6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	601a      	str	r2, [r3, #0]
	break;
 8008d72:	e306      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8008d7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	601a      	str	r2, [r3, #0]
	break;
 8008d80:	e2ff      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 8008d88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	601a      	str	r2, [r3, #0]
	break;
 8008d8e:	e2f8      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 8008d96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	601a      	str	r2, [r3, #0]
	break;
 8008d9c:	e2f1      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 8008da4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	601a      	str	r2, [r3, #0]
	break;
 8008daa:	e2ea      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8008db2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	601a      	str	r2, [r3, #0]
	break;
 8008db8:	e2e3      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	f8b3 3318 	ldrh.w	r3, [r3, #792]	; 0x318
 8008dc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	601a      	str	r2, [r3, #0]
	break;
 8008dc6:	e2dc      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8008dce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	601a      	str	r2, [r3, #0]
	break;
 8008dd4:	e2d5      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	f8b3 331a 	ldrh.w	r3, [r3, #794]	; 0x31a
 8008ddc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	601a      	str	r2, [r3, #0]
	break;
 8008de2:	e2ce      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 8008dea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	601a      	str	r2, [r3, #0]
	break;
 8008df0:	e2c7      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
 8008df8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	601a      	str	r2, [r3, #0]
	break;
 8008dfe:	e2c0      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	f8b3 3254 	ldrh.w	r3, [r3, #596]	; 0x254
 8008e06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	601a      	str	r2, [r3, #0]
	break;
 8008e0c:	e2b9      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 8008e14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	601a      	str	r2, [r3, #0]
	break;
 8008e1a:	e2b2      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8008e22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	601a      	str	r2, [r3, #0]
	break;
 8008e28:	e2ab      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8008e30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	601a      	str	r2, [r3, #0]
	break;
 8008e36:	e2a4      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 8008e3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	601a      	str	r2, [r3, #0]
	break;
 8008e44:	e29d      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8008e4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	601a      	str	r2, [r3, #0]
	break;
 8008e52:	e296      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8008e5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	601a      	str	r2, [r3, #0]
	break;
 8008e60:	e28f      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8008e68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	601a      	str	r2, [r3, #0]
	break;
 8008e6e:	e288      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008e76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	601a      	str	r2, [r3, #0]
	break;
 8008e7c:	e281      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8008e84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	601a      	str	r2, [r3, #0]
	break;
 8008e8a:	e27a      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8008e92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	601a      	str	r2, [r3, #0]
	break;
 8008e98:	e273      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8008ea0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	601a      	str	r2, [r3, #0]
	break;
 8008ea6:	e26c      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8008eae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	601a      	str	r2, [r3, #0]
	break;
 8008eb4:	e265      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8008ebc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	601a      	str	r2, [r3, #0]
	break;
 8008ec2:	e25e      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8008eca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	601a      	str	r2, [r3, #0]
	break;
 8008ed0:	e257      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8008ed8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	601a      	str	r2, [r3, #0]
	break;
 8008ede:	e250      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8008ee6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	601a      	str	r2, [r3, #0]
	break;
 8008eec:	e249      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8008ef4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	601a      	str	r2, [r3, #0]
	break;
 8008efa:	e242      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8008f02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	601a      	str	r2, [r3, #0]
	break;
 8008f08:	e23b      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8008f10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	601a      	str	r2, [r3, #0]
	break;
 8008f16:	e234      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8008f1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	601a      	str	r2, [r3, #0]
	break;
 8008f24:	e22d      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f2c:	f8b3 33dc 	ldrh.w	r3, [r3, #988]	; 0x3dc
 8008f30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	601a      	str	r2, [r3, #0]
	break;
 8008f36:	e224      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f3e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	601a      	str	r2, [r3, #0]
	break;
 8008f48:	e21b      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f50:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8008f54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	601a      	str	r2, [r3, #0]
	break;
 8008f5a:	e212      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f62:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008f66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	601a      	str	r2, [r3, #0]
	break;
 8008f6c:	e209      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f74:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8008f78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	601a      	str	r2, [r3, #0]
	break;
 8008f7e:	e200      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f86:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8008f8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	601a      	str	r2, [r3, #0]
	break;
 8008f90:	e1f7      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f98:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 8008f9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	601a      	str	r2, [r3, #0]
	break;
 8008fa2:	e1ee      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008faa:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8008fae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	601a      	str	r2, [r3, #0]
	break;
 8008fb4:	e1e5      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fbc:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8008fc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	601a      	str	r2, [r3, #0]
	break;
 8008fc6:	e1dc      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fce:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
 8008fd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	601a      	str	r2, [r3, #0]
	break;
 8008fd8:	e1d3      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fe0:	f9b3 3404 	ldrsh.w	r3, [r3, #1028]	; 0x404
 8008fe4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	601a      	str	r2, [r3, #0]
	break;
 8008fea:	e1ca      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ff2:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8008ff6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	601a      	str	r2, [r3, #0]
	break;
 8008ffc:	e1c1      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009004:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 8009008:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	601a      	str	r2, [r3, #0]
	break;
 800900e:	e1b8      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009016:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
		*ptuning_parm_value = (int32_t)(
 800901a:	461a      	mov	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	601a      	str	r2, [r3, #0]
	break;
 8009020:	e1af      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009028:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800902c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	601a      	str	r2, [r3, #0]
	break;
 8009032:	e1a6      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800903a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800903e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	601a      	str	r2, [r3, #0]
	break;
 8009044:	e19d      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800904c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009050:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	601a      	str	r2, [r3, #0]
	break;
 8009056:	e194      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800905e:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 8009062:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	601a      	str	r2, [r3, #0]
	break;
 8009068:	e18b      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009070:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8009074:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	601a      	str	r2, [r3, #0]
	break;
 800907a:	e182      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8009082:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	601a      	str	r2, [r3, #0]
	break;
 8009088:	e17b      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8009090:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	601a      	str	r2, [r3, #0]
	break;
 8009096:	e174      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800909e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	601a      	str	r2, [r3, #0]
	break;
 80090a4:	e16d      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80090ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	601a      	str	r2, [r3, #0]
	break;
 80090b2:	e166      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 80090ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	601a      	str	r2, [r3, #0]
	break;
 80090c0:	e15f      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80090c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	601a      	str	r2, [r3, #0]
	break;
 80090ce:	e158      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 80090d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	601a      	str	r2, [r3, #0]
	break;
 80090dc:	e151      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090e4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80090e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	601a      	str	r2, [r3, #0]
	break;
 80090ee:	e148      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 80090f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	601a      	str	r2, [r3, #0]
	break;
 80090fc:	e141      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 8009104:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	601a      	str	r2, [r3, #0]
	break;
 800910a:	e13a      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 8009112:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	601a      	str	r2, [r3, #0]
	break;
 8009118:	e133      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 8009120:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	601a      	str	r2, [r3, #0]
	break;
 8009126:	e12c      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 800912e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	601a      	str	r2, [r3, #0]
	break;
 8009134:	e125      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 800913c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	601a      	str	r2, [r3, #0]
	break;
 8009142:	e11e      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 800914a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	601a      	str	r2, [r3, #0]
	break;
 8009150:	e117      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 8009158:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	601a      	str	r2, [r3, #0]
	break;
 800915e:	e110      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 8009166:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	601a      	str	r2, [r3, #0]
	break;
 800916c:	e109      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 8009174:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	601a      	str	r2, [r3, #0]
	break;
 800917a:	e102      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 8009182:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	601a      	str	r2, [r3, #0]
	break;
 8009188:	e0fb      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 8009190:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	601a      	str	r2, [r3, #0]
	break;
 8009196:	e0f4      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 800919e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	601a      	str	r2, [r3, #0]
	break;
 80091a4:	e0ed      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 80091ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	601a      	str	r2, [r3, #0]
	break;
 80091b2:	e0e6      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 80091ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	601a      	str	r2, [r3, #0]
	break;
 80091c0:	e0df      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 80091c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	601a      	str	r2, [r3, #0]
	break;
 80091ce:	e0d8      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 80091d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	601a      	str	r2, [r3, #0]
	break;
 80091dc:	e0d1      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 80091e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	601a      	str	r2, [r3, #0]
	break;
 80091ea:	e0ca      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 80091f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	601a      	str	r2, [r3, #0]
	break;
 80091f8:	e0c3      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 8009200:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	601a      	str	r2, [r3, #0]
	break;
 8009206:	e0bc      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 800920e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	601a      	str	r2, [r3, #0]
	break;
 8009214:	e0b5      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 800921c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	601a      	str	r2, [r3, #0]
	break;
 8009222:	e0ae      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 800922a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	601a      	str	r2, [r3, #0]
	break;
 8009230:	e0a7      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 8009238:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	601a      	str	r2, [r3, #0]
	break;
 800923e:	e0a0      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 8009246:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	601a      	str	r2, [r3, #0]
	break;
 800924c:	e099      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 8009254:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	601a      	str	r2, [r3, #0]
	break;
 800925a:	e092      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 8009262:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	601a      	str	r2, [r3, #0]
	break;
 8009268:	e08b      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 8009270:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	601a      	str	r2, [r3, #0]
	break;
 8009276:	e084      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 800927e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	601a      	str	r2, [r3, #0]
	break;
 8009284:	e07d      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 800928c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	601a      	str	r2, [r3, #0]
	break;
 8009292:	e076      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 800929a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	601a      	str	r2, [r3, #0]
	break;
 80092a0:	e06f      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 80092a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	601a      	str	r2, [r3, #0]
	break;
 80092ae:	e068      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 80092b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	601a      	str	r2, [r3, #0]
	break;
 80092bc:	e061      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 80092c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	601a      	str	r2, [r3, #0]
	break;
 80092ca:	e05a      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 80092d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	601a      	str	r2, [r3, #0]
	break;
 80092d8:	e053      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 80092e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	601a      	str	r2, [r3, #0]
	break;
 80092e6:	e04c      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 80092ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	601a      	str	r2, [r3, #0]
	break;
 80092f4:	e045      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 80092fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	601a      	str	r2, [r3, #0]
	break;
 8009302:	e03e      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 800930a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	601a      	str	r2, [r3, #0]
	break;
 8009310:	e037      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 8009318:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	601a      	str	r2, [r3, #0]
	break;
 800931e:	e030      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 8009326:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	601a      	str	r2, [r3, #0]
	break;
 800932c:	e029      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	f9b3 320e 	ldrsh.w	r3, [r3, #526]	; 0x20e
 8009334:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	601a      	str	r2, [r3, #0]
	break;
 800933a:	e022      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	f9b3 3210 	ldrsh.w	r3, [r3, #528]	; 0x210
 8009342:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	601a      	str	r2, [r3, #0]
	break;
 8009348:	e01b      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	f9b3 3212 	ldrsh.w	r3, [r3, #530]	; 0x212
 8009350:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	601a      	str	r2, [r3, #0]
	break;
 8009356:	e014      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	f9b3 3214 	ldrsh.w	r3, [r3, #532]	; 0x214
 800935e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	601a      	str	r2, [r3, #0]
	break;
 8009364:	e00d      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_min_signal_secondary_targets;
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800936c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	601a      	str	r2, [r3, #0]
	break;
 8009372:	e006      	b.n	8009382 <VL53L1_get_tuning_parm+0xe3a>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800937a:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800937c:	23fc      	movs	r3, #252	; 0xfc
 800937e:	77fb      	strb	r3, [r7, #31]
	break;
 8009380:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8009382:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3724      	adds	r7, #36	; 0x24
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop

08009394 <VL53L1_dynamic_xtalk_correction_enable>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_enable(
	VL53L1_DEV                          Dev
	)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3318      	adds	r3, #24
 80093a4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ac:	2201      	movs	r2, #1
 80093ae:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 80093b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3714      	adds	r7, #20
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <VL53L1_dynamic_xtalk_correction_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_disable(
	VL53L1_DEV                          Dev
	)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b085      	sub	sp, #20
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093ca:	2300      	movs	r3, #0
 80093cc:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	3318      	adds	r3, #24
 80093d2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 80093e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <VL53L1_dynamic_xtalk_correction_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	3318      	adds	r3, #24
 8009400:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009408:	2201      	movs	r2, #1
 800940a:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 800940e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <VL53L1_dynamic_xtalk_correction_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 800941e:	b480      	push	{r7}
 8009420:	b085      	sub	sp, #20
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009426:	2300      	movs	r3, #0
 8009428:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	3318      	adds	r3, #24
 800942e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009436:	2200      	movs	r2, #0
 8009438:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 800943c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3714      	adds	r7, #20
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009454:	2300      	movs	r3, #0
 8009456:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3318      	adds	r3, #24
 800945c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009464:	2201      	movs	r2, #1
 8009466:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 800946a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 800947a:	b480      	push	{r7}
 800947c:	b085      	sub	sp, #20
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009482:	2300      	movs	r3, #0
 8009484:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	3318      	adds	r3, #24
 800948a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009492:	2200      	movs	r2, #0
 8009494:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 8009498:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <VL53L1_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094b0:	2300      	movs	r3, #0
 80094b2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2208      	movs	r2, #8
 80094b8:	701a      	strb	r2, [r3, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	220b      	movs	r2, #11
 80094be:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094c6:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80094ce:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80094d6:	815a      	strh	r2, [r3, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80094de:	819a      	strh	r2, [r3, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80094e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <VL53L1_init_ssc_config_struct>:


VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	701a      	strb	r2, [r3, #0]


	pdata->VL53L1_p_009 =
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2212      	movs	r2, #18
 8009506:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	220f      	movs	r2, #15
 800950c:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2202      	movs	r2, #2
 8009512:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800951a:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	220c      	movs	r2, #12
 8009520:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8009522:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800953c:	2300      	movs	r3, #0
 800953e:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	895b      	ldrh	r3, [r3, #10]
 8009544:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	895b      	ldrh	r3, [r3, #10]
 8009562:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009582:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	2200      	movs	r2, #0
 8009588:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	2240      	movs	r2, #64	; 0x40
 800958e:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10d      	bne.n	80095b4 <VL53L1_init_xtalk_config_struct+0x82>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d108      	bne.n	80095b4 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d103      	bne.n	80095b4 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	2200      	movs	r2, #0
 80095b0:	741a      	strb	r2, [r3, #16]
 80095b2:	e002      	b.n	80095ba <VL53L1_init_xtalk_config_struct+0x88>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	2201      	movs	r2, #1
 80095b8:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 80095ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d114      	bne.n	80095ec <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d110      	bne.n	80095ec <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53L1_calc_range_ignore_threshold(
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	6818      	ldr	r0, [r3, #0]
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	7d9b      	ldrb	r3, [r3, #22]
 80095de:	f003 f879 	bl	800c6d4 <VL53L1_calc_range_ignore_threshold>
 80095e2:	4603      	mov	r3, r0
 80095e4:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	831a      	strh	r2, [r3, #24]
 80095ea:	e002      	b.n	80095f2 <VL53L1_init_xtalk_config_struct+0xc0>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	2200      	movs	r2, #0
 80095f0:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	f64f 72ce 	movw	r2, #65486	; 0xffce
 80095f8:	835a      	strh	r2, [r3, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2232      	movs	r2, #50	; 0x32
 80095fe:	839a      	strh	r2, [r3, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8009606:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	228c      	movs	r2, #140	; 0x8c
 800960c:	841a      	strh	r2, [r3, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800960e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <VL53L1_init_xtalk_extract_config_struct>:

VL53L1_Error VL53L1_init_xtalk_extract_config_struct(
	VL53L1_xtalkextract_config_t   *pdata)
{
 800961a:	b480      	push	{r7}
 800961c:	b085      	sub	sp, #20
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009622:	2300      	movs	r3, #0
 8009624:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800962c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009634:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2207      	movs	r2, #7
 800963a:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8009642:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f242 7210 	movw	r2, #10000	; 0x2710
 800964a:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f64f 72ba 	movw	r2, #65466	; 0xffba
 8009652:	825a      	strh	r2, [r3, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2246      	movs	r2, #70	; 0x46
 8009658:	829a      	strh	r2, [r3, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8009660:	82da      	strh	r2, [r3, #22]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	228c      	movs	r2, #140	; 0x8c
 8009666:	831a      	strh	r2, [r3, #24]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8009668:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <VL53L1_init_offset_cal_config_struct>:


VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009680:	2300      	movs	r3, #0
 8009682:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800968a:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8009692:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800969a:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80096a2:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2208      	movs	r2, #8
 80096a8:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2228      	movs	r2, #40	; 0x28
 80096ae:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2209      	movs	r2, #9
 80096b4:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80096b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3714      	adds	r7, #20
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <VL53L1_init_zone_cal_config_struct>:

VL53L1_Error VL53L1_init_zone_cal_config_struct(
	VL53L1_zonecal_config_t   *pdata)
{
 80096c6:	b480      	push	{r7}
 80096c8:	b085      	sub	sp, #20
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80096ce:	2300      	movs	r3, #0
 80096d0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80096d8:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f643 2298 	movw	r2, #15000	; 0x3a98
 80096e0:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096e8:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80096f0:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2210      	movs	r2, #16
 80096f6:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2208      	movs	r2, #8
 80096fc:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80096fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <VL53L1_init_hist_post_process_config_struct>:


VL53L1_Error VL53L1_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53L1_hist_post_process_config_t   *pdata)
{
 800970e:	b480      	push	{r7}
 8009710:	b085      	sub	sp, #20
 8009712:	af00      	add	r7, sp, #0
 8009714:	4603      	mov	r3, r0
 8009716:	6039      	str	r1, [r7, #0]
 8009718:	71fb      	strb	r3, [r7, #7]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800971a:	2300      	movs	r3, #0
 800971c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	2204      	movs	r2, #4
 8009722:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	2201      	movs	r2, #1
 8009728:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	2201      	movs	r2, #1
 800972e:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	2202      	movs	r2, #2
 8009734:	70da      	strb	r2, [r3, #3]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	2201      	movs	r2, #1
 800973a:	711a      	strb	r2, [r3, #4]
			VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2250      	movs	r2, #80	; 0x50
 8009740:	715a      	strb	r2, [r3, #5]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	2270      	movs	r2, #112	; 0x70
 8009746:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	f241 023d 	movw	r2, #4157	; 0x103d
 800974e:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	2210      	movs	r2, #16
 8009754:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2232      	movs	r2, #50	; 0x32
 800975a:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	2264      	movs	r2, #100	; 0x64
 8009760:	615a      	str	r2, [r3, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2201      	movs	r2, #1
 8009766:	761a      	strb	r2, [r3, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	22a0      	movs	r2, #160	; 0xa0
 800976c:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2200      	movs	r2, #0
 8009772:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	f240 72c3 	movw	r2, #1987	; 0x7c3
 800977a:	83da      	strh	r2, [r3, #30]
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2208      	movs	r2, #8
 8009780:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	2288      	movs	r2, #136	; 0x88
 8009788:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	2208      	movs	r2, #8
 8009790:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097a2:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	22fa      	movs	r2, #250	; 0xfa
 80097a8:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	79fa      	ldrb	r2, [r7, #7]
 80097ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	f64f 72ce 	movw	r2, #65486	; 0xffce
 80097b8:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	2232      	movs	r2, #50	; 0x32
 80097be:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80097c6:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	228c      	movs	r2, #140	; 0x8c
 80097cc:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2250      	movs	r2, #80	; 0x50
 80097d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2232      	movs	r2, #50	; 0x32
 80097da:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 80097dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <VL53L1_init_tuning_parm_storage_struct>:
}


VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80097f4:	2300      	movs	r3, #0
 80097f6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	220e      	movs	r2, #14
 8009802:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f642 7294 	movw	r2, #12180	; 0x2f94
 800980a:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	220e      	movs	r2, #14
 8009810:	719a      	strb	r2, [r3, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	220a      	movs	r2, #10
 8009816:	71da      	strb	r2, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2206      	movs	r2, #6
 800981c:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	220e      	movs	r2, #14
 8009822:	725a      	strb	r2, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	220a      	movs	r2, #10
 8009828:	729a      	strb	r2, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2206      	movs	r2, #6
 800982e:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2209      	movs	r2, #9
 8009834:	731a      	strb	r2, [r3, #12]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2205      	movs	r2, #5
 800983a:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2203      	movs	r2, #3
 8009840:	739a      	strb	r2, [r3, #14]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2206      	movs	r2, #6
 8009846:	73da      	strb	r2, [r3, #15]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2206      	movs	r2, #6
 800984c:	741a      	strb	r2, [r3, #16]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2206      	movs	r2, #6
 8009852:	745a      	strb	r2, [r3, #17]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2202      	movs	r2, #2
 8009858:	749a      	strb	r2, [r3, #18]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2221      	movs	r2, #33	; 0x21
 800985e:	74da      	strb	r2, [r3, #19]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	223c      	movs	r2, #60	; 0x3c
 8009870:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	223c      	movs	r2, #60	; 0x3c
 8009876:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	223c      	movs	r2, #60	; 0x3c
 800987c:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2280      	movs	r2, #128	; 0x80
 8009882:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2280      	movs	r2, #128	; 0x80
 8009888:	841a      	strh	r2, [r3, #32]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2280      	movs	r2, #128	; 0x80
 800988e:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2208      	movs	r2, #8
 8009894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2210      	movs	r2, #16
 800989c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2202      	movs	r2, #2
 80098ac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2202      	movs	r2, #2
 80098bc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80098ce:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80098d6:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80098de:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80098e6:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098ee:	639a      	str	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f643 2298 	movw	r2, #15000	; 0x3a98
 80098f6:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f242 3228 	movw	r2, #9000	; 0x2328
 80098fe:	641a      	str	r2, [r3, #64]	; 0x40
	VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f241 7270 	movw	r2, #6000	; 0x1770
 8009906:	645a      	str	r2, [r3, #68]	; 0x44
	VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800990e:	649a      	str	r2, [r3, #72]	; 0x48
	VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f242 3228 	movw	r2, #9000	; 0x2328
 8009916:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f241 7270 	movw	r2, #6000	; 0x1770
 800991e:	651a      	str	r2, [r3, #80]	; 0x50
		VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009926:	655a      	str	r2, [r3, #84]	; 0x54
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800992e:	659a      	str	r2, [r3, #88]	; 0x58
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009936:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800993e:	661a      	str	r2, [r3, #96]	; 0x60
			VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009946:	665a      	str	r2, [r3, #100]	; 0x64
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f24f 6218 	movw	r2, #63000	; 0xf618
 800994e:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009956:	671a      	str	r2, [r3, #112]	; 0x70
		VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800995e:	675a      	str	r2, [r3, #116]	; 0x74
			VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8009966:	679a      	str	r2, [r3, #120]	; 0x78
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	669a      	str	r2, [r3, #104]	; 0x68
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009974:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800997c:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53L1_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f242 7210 	movw	r2, #10000	; 0x2710
 8009994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2206      	movs	r2, #6
 800999c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	pdata->tp_uwr_enable =
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53L1_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80099ae:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f640 22be 	movw	r2, #2750	; 0xabe
 80099b8:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	22fa      	movs	r2, #250	; 0xfa
 80099c0:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80099ca:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80099d4:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80099de:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80099e8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80099f2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f64f 7238 	movw	r2, #65336	; 0xff38
 80099fc:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	22c8      	movs	r2, #200	; 0xc8
 8009a04:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_z_6_min =
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	22fa      	movs	r2, #250	; 0xfa
 8009a0c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN_DEFAULT;
	pdata->tp_uwr_med_z_6_max =
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8009a16:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f640 1206 	movw	r2, #2310	; 0x906
 8009a20:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f640 1206 	movw	r2, #2310	; 0x906
 8009a32:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f640 421c 	movw	r2, #3100	; 0xc1c
 8009a3c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8009a46:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f640 421c 	movw	r2, #3100	; 0xc1c
 8009a50:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8009a5a:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f641 022e 	movw	r2, #6190	; 0x182e
 8009a64:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangea =
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f641 3230 	movw	r2, #6960	; 0x1b30
 8009a7e:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f641 022e 	movw	r2, #6190	; 0x182e
 8009a88:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	22fa      	movs	r2, #250	; 0xfa
 8009a90:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8009a9a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8009aa4:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f241 1294 	movw	r2, #4500	; 0x1194
 8009aae:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f64f 7238 	movw	r2, #65336	; 0xff38
 8009ab8:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	22c8      	movs	r2, #200	; 0xc8
 8009ac0:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f640 3222 	movw	r2, #2850	; 0xb22
 8009aca:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f640 42e4 	movw	r2, #3300	; 0xce4
 8009ad4:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f640 721e 	movw	r2, #3870	; 0xf1e
 8009aee:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f241 222a 	movw	r2, #4650	; 0x122a
 8009af8:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f640 720a 	movw	r2, #3850	; 0xf0a
 8009b02:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f641 6214 	movw	r2, #7700	; 0x1e14
 8009b24:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8009b2e:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_min_signal_secondary_targets =
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f641 1288 	movw	r2, #6536	; 0x1988
 8009b48:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS_DEFAULT;
	LOG_FUNCTION_END(status);

	return status;
 8009b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <VL53L1_init_hist_gen3_dmax_config_struct>:


VL53L1_Error VL53L1_init_hist_gen3_dmax_config_struct(
	VL53L1_hist_gen3_dmax_config_t   *pdata)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b64:	2300      	movs	r3, #0
 8009b66:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009b6e:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2238      	movs	r2, #56	; 0x38
 8009b74:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2220      	movs	r2, #32
 8009b7a:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2270      	movs	r2, #112	; 0x70
 8009b80:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2210      	movs	r2, #16
 8009b86:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2264      	movs	r2, #100	; 0x64
 8009b8c:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b94:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	220f      	movs	r2, #15
 8009b9a:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2234      	movs	r2, #52	; 0x34
 8009ba0:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	22c8      	movs	r2, #200	; 0xc8
 8009ba6:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009bae:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009bb6:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8009bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b087      	sub	sp, #28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
 8009bd4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8009be0:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2211      	movs	r2, #17
 8009c22:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2202      	movs	r2, #2
 8009c28:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2202      	movs	r2, #2
 8009c34:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2208      	movs	r2, #8
 8009c3a:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8009c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8009c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c58:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2201      	movs	r2, #1
 8009c64:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	22ff      	movs	r2, #255	; 0xff
 8009c7c:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8009c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c80:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8009c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c88:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2200      	movs	r2, #0
 8009c98:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2220      	movs	r2, #32
 8009cb0:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	220b      	movs	r2, #11
 8009cb6:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cba:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	220d      	movs	r2, #13
 8009cca:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8009ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cce:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8009cf2:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2238      	movs	r2, #56	; 0x38
 8009cfe:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	22ff      	movs	r2, #255	; 0xff
 8009d04:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	221a      	movs	r2, #26
 8009d16:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2220      	movs	r2, #32
 8009d22:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	2201      	movs	r2, #1
 8009d28:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	22cc      	movs	r2, #204	; 0xcc
 8009d2e:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	220b      	movs	r2, #11
 8009d34:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	22f5      	movs	r2, #245	; 0xf5
 8009d40:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	2209      	movs	r2, #9
 8009d46:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8009d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4a:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8009d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d52:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	2208      	movs	r2, #8
 8009d5c:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2278      	movs	r2, #120	; 0x78
 8009d62:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	2200      	movs	r2, #0
 8009d68:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	2207      	movs	r2, #7
 8009d74:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	2221      	movs	r2, #33	; 0x21
 8009d7a:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	2243      	movs	r2, #67	; 0x43
 8009d80:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	2210      	movs	r2, #16
 8009d86:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2232      	movs	r2, #50	; 0x32
 8009d8c:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2254      	movs	r2, #84	; 0x54
 8009d92:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	2207      	movs	r2, #7
 8009d98:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2221      	movs	r2, #33	; 0x21
 8009d9e:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2243      	movs	r2, #67	; 0x43
 8009da4:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	2210      	movs	r2, #16
 8009daa:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	2202      	movs	r2, #2
 8009db0:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	2243      	movs	r2, #67	; 0x43
 8009db6:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2205      	movs	r2, #5
 8009dbc:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	2207      	movs	r2, #7
 8009dc8:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2221      	movs	r2, #33	; 0x21
 8009dce:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2243      	movs	r2, #67	; 0x43
 8009dd4:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	2210      	movs	r2, #16
 8009dda:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	2232      	movs	r2, #50	; 0x32
 8009de0:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	2254      	movs	r2, #84	; 0x54
 8009de6:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009dee:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009df6:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 8009dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e00:	2210      	movs	r2, #16
 8009e02:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8009e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e06:	2200      	movs	r2, #0
 8009e08:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8009e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0c:	220f      	movs	r2, #15
 8009e0e:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8009e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e12:	220f      	movs	r2, #15
 8009e14:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8009e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e18:	2208      	movs	r2, #8
 8009e1a:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8009e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1e:	2208      	movs	r2, #8
 8009e20:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8009e22:	6a3b      	ldr	r3, [r7, #32]
 8009e24:	2201      	movs	r2, #1
 8009e26:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8009e28:	6a3b      	ldr	r3, [r7, #32]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8009e2e:	6a3b      	ldr	r3, [r7, #32]
 8009e30:	2200      	movs	r2, #0
 8009e32:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	2200      	movs	r2, #0
 8009e38:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8009e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8009e40:	6a3b      	ldr	r3, [r7, #32]
 8009e42:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	220b      	movs	r2, #11
 8009e48:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	2209      	movs	r2, #9
 8009e4e:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8009e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e52:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8009e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5a:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	2201      	movs	r2, #1
 8009e64:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8009e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e68:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 8009e6c:	6a3b      	ldr	r3, [r7, #32]
 8009e6e:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8009e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e72:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8009e76:	6a3b      	ldr	r3, [r7, #32]
 8009e78:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8009e7a:	6a3b      	ldr	r3, [r7, #32]
 8009e7c:	22c7      	movs	r2, #199	; 0xc7
 8009e7e:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8009e80:	6a3b      	ldr	r3, [r7, #32]
 8009e82:	22ff      	movs	r2, #255	; 0xff
 8009e84:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	22db      	movs	r2, #219	; 0xdb
 8009e8a:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8009e8c:	6a3b      	ldr	r3, [r7, #32]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8009e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e94:	2200      	movs	r2, #0
 8009e96:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8009e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea6:	2221      	movs	r2, #33	; 0x21
 8009ea8:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD |
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8009eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	371c      	adds	r7, #28
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b08a      	sub	sp, #40	; 0x28
 8009ebe:	af04      	add	r7, sp, #16
 8009ec0:	60f8      	str	r0, [r7, #12]
 8009ec2:	60b9      	str	r1, [r7, #8]
 8009ec4:	607a      	str	r2, [r7, #4]
 8009ec6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ece:	9303      	str	r3, [sp, #12]
 8009ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed2:	9302      	str	r3, [sp, #8]
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	9301      	str	r3, [sp, #4]
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	68b9      	ldr	r1, [r7, #8]
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f7ff fe70 	bl	8009bc8 <VL53L1_preset_mode_standard_ranging>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009eec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d121      	bne.n	8009f38 <VL53L1_preset_mode_standard_ranging_short_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x07;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2207      	movs	r2, #7
 8009ef8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	2205      	movs	r2, #5
 8009efe:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8009f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f02:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__sigma_thresh                  =
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8009f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	2208      	movs	r2, #8
 8009f14:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	2238      	movs	r2, #56	; 0x38
 8009f1a:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x07;
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	2207      	movs	r2, #7
 8009f20:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	2205      	movs	r2, #5
 8009f26:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8009f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2a:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8009f2c:	6a3b      	ldr	r3, [r7, #32]
 8009f2e:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8009f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f32:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8009f38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3718      	adds	r7, #24
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b08a      	sub	sp, #40	; 0x28
 8009f48:	af04      	add	r7, sp, #16
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	607a      	str	r2, [r7, #4]
 8009f50:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009f52:	2300      	movs	r3, #0
 8009f54:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f58:	9303      	str	r3, [sp, #12]
 8009f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5c:	9302      	str	r3, [sp, #8]
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f60:	9301      	str	r3, [sp, #4]
 8009f62:	6a3b      	ldr	r3, [r7, #32]
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	68b9      	ldr	r1, [r7, #8]
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f7ff fe2b 	bl	8009bc8 <VL53L1_preset_mode_standard_ranging>
 8009f72:	4603      	mov	r3, r0
 8009f74:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009f76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d121      	bne.n	8009fc2 <VL53L1_preset_mode_standard_ranging_long_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x0F;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	220f      	movs	r2, #15
 8009f82:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	220d      	movs	r2, #13
 8009f88:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8009f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8c:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__sigma_thresh                  =
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8009f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f94:	8bda      	ldrh	r2, [r3, #30]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	2208      	movs	r2, #8
 8009f9e:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	22b8      	movs	r2, #184	; 0xb8
 8009fa4:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x0F;
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	220f      	movs	r2, #15
 8009faa:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	220d      	movs	r2, #13
 8009fb0:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8009fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb4:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8009fb6:	6a3b      	ldr	r3, [r7, #32]
 8009fb8:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8009fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbc:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8009fbe:	6a3b      	ldr	r3, [r7, #32]
 8009fc0:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8009fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3718      	adds	r7, #24
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b08a      	sub	sp, #40	; 0x28
 8009fd2:	af04      	add	r7, sp, #16
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	60b9      	str	r1, [r7, #8]
 8009fd8:	607a      	str	r2, [r7, #4]
 8009fda:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe2:	9303      	str	r3, [sp, #12]
 8009fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe6:	9302      	str	r3, [sp, #8]
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fea:	9301      	str	r3, [sp, #4]
 8009fec:	6a3b      	ldr	r3, [r7, #32]
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	68b9      	ldr	r1, [r7, #8]
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f7ff fde6 	bl	8009bc8 <VL53L1_preset_mode_standard_ranging>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a000:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d105      	bne.n	800a014 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2202      	movs	r2, #2
 800a00c:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 800a00e:	6a3b      	ldr	r3, [r7, #32]
 800a010:	223b      	movs	r2, #59	; 0x3b
 800a012:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a014:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b08a      	sub	sp, #40	; 0x28
 800a024:	af04      	add	r7, sp, #16
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
 800a02c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a02e:	2300      	movs	r3, #0
 800a030:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800a032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a034:	9303      	str	r3, [sp, #12]
 800a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a038:	9302      	str	r3, [sp, #8]
 800a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	6a3b      	ldr	r3, [r7, #32]
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	68b9      	ldr	r1, [r7, #8]
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f7ff fdbd 	bl	8009bc8 <VL53L1_preset_mode_standard_ranging>
 800a04e:	4603      	mov	r3, r0
 800a050:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a052:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d105      	bne.n	800a066 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2202      	movs	r2, #2
 800a05e:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	225b      	movs	r2, #91	; 0x5b
 800a064:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a066:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b08a      	sub	sp, #40	; 0x28
 800a076:	af04      	add	r7, sp, #16
 800a078:	60f8      	str	r0, [r7, #12]
 800a07a:	60b9      	str	r1, [r7, #8]
 800a07c:	607a      	str	r2, [r7, #4]
 800a07e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a080:	2300      	movs	r3, #0
 800a082:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	9303      	str	r3, [sp, #12]
 800a088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08a:	9302      	str	r3, [sp, #8]
 800a08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	6a3b      	ldr	r3, [r7, #32]
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	68b9      	ldr	r1, [r7, #8]
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f7ff fd94 	bl	8009bc8 <VL53L1_preset_mode_standard_ranging>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a0a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d11a      	bne.n	800a0e2 <VL53L1_preset_mode_timed_ranging+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	749a      	strb	r2, [r3, #18]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	22b1      	movs	r2, #177	; 0xb1
 800a0bc:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	22d4      	movs	r2, #212	; 0xd4
 800a0c8:	721a      	strb	r2, [r3, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a0d0:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800a0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	2240      	movs	r2, #64	; 0x40
 800a0e0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a0e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3718      	adds	r7, #24
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b08a      	sub	sp, #40	; 0x28
 800a0f2:	af04      	add	r7, sp, #16
 800a0f4:	60f8      	str	r0, [r7, #12]
 800a0f6:	60b9      	str	r1, [r7, #8]
 800a0f8:	607a      	str	r2, [r7, #4]
 800a0fa:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 800a100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a102:	9303      	str	r3, [sp, #12]
 800a104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a106:	9302      	str	r3, [sp, #8]
 800a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10a:	9301      	str	r3, [sp, #4]
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	68b9      	ldr	r1, [r7, #8]
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f7ff fecf 	bl	8009eba <VL53L1_preset_mode_standard_ranging_short_range>
 800a11c:	4603      	mov	r3, r0
 800a11e:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a120:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d11a      	bne.n	800a15e <VL53L1_preset_mode_timed_ranging_short_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800a128:	6a3b      	ldr	r3, [r7, #32]
 800a12a:	2200      	movs	r2, #0
 800a12c:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	2201      	movs	r2, #1
 800a132:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	2284      	movs	r2, #132	; 0x84
 800a138:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	2201      	movs	r2, #1
 800a13e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	22b1      	movs	r2, #177	; 0xb1
 800a144:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a14c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800a14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a150:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15a:	2240      	movs	r2, #64	; 0x40
 800a15c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a15e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b08a      	sub	sp, #40	; 0x28
 800a16e:	af04      	add	r7, sp, #16
 800a170:	60f8      	str	r0, [r7, #12]
 800a172:	60b9      	str	r1, [r7, #8]
 800a174:	607a      	str	r2, [r7, #4]
 800a176:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a178:	2300      	movs	r3, #0
 800a17a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 800a17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17e:	9303      	str	r3, [sp, #12]
 800a180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a182:	9302      	str	r3, [sp, #8]
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	9301      	str	r3, [sp, #4]
 800a188:	6a3b      	ldr	r3, [r7, #32]
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	68b9      	ldr	r1, [r7, #8]
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f7ff fed6 	bl	8009f44 <VL53L1_preset_mode_standard_ranging_long_range>
 800a198:	4603      	mov	r3, r0
 800a19a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a19c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d11a      	bne.n	800a1da <VL53L1_preset_mode_timed_ranging_long_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800a1a4:	6a3b      	ldr	r3, [r7, #32]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2297      	movs	r2, #151	; 0x97
 800a1b4:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	22b1      	movs	r2, #177	; 0xb1
 800a1c0:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a1c8:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800a1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1cc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	2240      	movs	r2, #64	; 0x40
 800a1d8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a1da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3718      	adds	r7, #24
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b08a      	sub	sp, #40	; 0x28
 800a1ea:	af04      	add	r7, sp, #16
 800a1ec:	60f8      	str	r0, [r7, #12]
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	607a      	str	r2, [r7, #4]
 800a1f2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 800a1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fa:	9303      	str	r3, [sp, #12]
 800a1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fe:	9302      	str	r3, [sp, #8]
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	9301      	str	r3, [sp, #4]
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	68b9      	ldr	r1, [r7, #8]
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f7ff ff2f 	bl	800a072 <VL53L1_preset_mode_timed_ranging>
 800a214:	4603      	mov	r3, r0
 800a216:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a218:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d106      	bne.n	800a22e <VL53L1_preset_mode_low_power_auto_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800a220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a222:	6a39      	ldr	r1, [r7, #32]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f005 f978 	bl	800f51a <VL53L1_config_low_power_auto_mode>
 800a22a:	4603      	mov	r3, r0
 800a22c:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a22e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3718      	adds	r7, #24
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b08a      	sub	sp, #40	; 0x28
 800a23e:	af04      	add	r7, sp, #16
 800a240:	60f8      	str	r0, [r7, #12]
 800a242:	60b9      	str	r1, [r7, #8]
 800a244:	607a      	str	r2, [r7, #4]
 800a246:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a248:	2300      	movs	r3, #0
 800a24a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 800a24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24e:	9303      	str	r3, [sp, #12]
 800a250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a252:	9302      	str	r3, [sp, #8]
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	9301      	str	r3, [sp, #4]
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	68b9      	ldr	r1, [r7, #8]
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7ff ff43 	bl	800a0ee <VL53L1_preset_mode_timed_ranging_short_range>
 800a268:	4603      	mov	r3, r0
 800a26a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a26c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d106      	bne.n	800a282 <VL53L1_preset_mode_low_power_auto_short_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800a274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a276:	6a39      	ldr	r1, [r7, #32]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f005 f94e 	bl	800f51a <VL53L1_config_low_power_auto_mode>
 800a27e:	4603      	mov	r3, r0
 800a280:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a282:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3718      	adds	r7, #24
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800a28e:	b580      	push	{r7, lr}
 800a290:	b08a      	sub	sp, #40	; 0x28
 800a292:	af04      	add	r7, sp, #16
 800a294:	60f8      	str	r0, [r7, #12]
 800a296:	60b9      	str	r1, [r7, #8]
 800a298:	607a      	str	r2, [r7, #4]
 800a29a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a29c:	2300      	movs	r3, #0
 800a29e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 800a2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a2:	9303      	str	r3, [sp, #12]
 800a2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a6:	9302      	str	r3, [sp, #8]
 800a2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2aa:	9301      	str	r3, [sp, #4]
 800a2ac:	6a3b      	ldr	r3, [r7, #32]
 800a2ae:	9300      	str	r3, [sp, #0]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	68b9      	ldr	r1, [r7, #8]
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f7ff ff57 	bl	800a16a <VL53L1_preset_mode_timed_ranging_long_range>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a2c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d106      	bne.n	800a2d6 <VL53L1_preset_mode_low_power_auto_long_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800a2c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2ca:	6a39      	ldr	r1, [r7, #32]
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f005 f924 	bl	800f51a <VL53L1_config_low_power_auto_mode>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a2d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3718      	adds	r7, #24
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b08a      	sub	sp, #40	; 0x28
 800a2e6:	af04      	add	r7, sp, #16
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	60b9      	str	r1, [r7, #8]
 800a2ec:	607a      	str	r2, [r7, #4]
 800a2ee:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800a2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f6:	9303      	str	r3, [sp, #12]
 800a2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fa:	9302      	str	r3, [sp, #8]
 800a2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fe:	9301      	str	r3, [sp, #4]
 800a300:	6a3b      	ldr	r3, [r7, #32]
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	68b9      	ldr	r1, [r7, #8]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f7ff fc5c 	bl	8009bc8 <VL53L1_preset_mode_standard_ranging>
 800a310:	4603      	mov	r3, r0
 800a312:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a314:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d116      	bne.n	800a34a <VL53L1_preset_mode_singleshot_ranging+0x68>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	2200      	movs	r2, #0
 800a320:	749a      	strb	r2, [r3, #18]




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2200      	movs	r2, #0
 800a326:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	22b1      	movs	r2, #177	; 0xb1
 800a32c:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2200      	movs	r2, #0
 800a332:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	22d4      	movs	r2, #212	; 0xd4
 800a338:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800a33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800a340:	6a3b      	ldr	r3, [r7, #32]
 800a342:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	2210      	movs	r2, #16
 800a348:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a34a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3718      	adds	r7, #24
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <VL53L1_preset_mode_histogram_ranging>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b090      	sub	sp, #64	; 0x40
 800a35a:	af0a      	add	r7, sp, #40	; 0x28
 800a35c:	60f8      	str	r0, [r7, #12]
 800a35e:	60b9      	str	r1, [r7, #8]
 800a360:	607a      	str	r2, [r7, #4]
 800a362:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a364:	2300      	movs	r3, #0
 800a366:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_standard_ranging(
 800a368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36a:	9303      	str	r3, [sp, #12]
 800a36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36e:	9302      	str	r3, [sp, #8]
 800a370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a372:	9301      	str	r3, [sp, #4]
 800a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	6879      	ldr	r1, [r7, #4]
 800a37e:	68b8      	ldr	r0, [r7, #8]
 800a380:	f7ff fc22 	bl	8009bc8 <VL53L1_preset_mode_standard_ranging>
 800a384:	4603      	mov	r3, r0
 800a386:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a388:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d171      	bne.n	800a474 <VL53L1_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800a396:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	9308      	str	r3, [sp, #32]
 800a39c:	2305      	movs	r3, #5
 800a39e:	9307      	str	r3, [sp, #28]
 800a3a0:	2304      	movs	r3, #4
 800a3a2:	9306      	str	r3, [sp, #24]
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	9305      	str	r3, [sp, #20]
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	9304      	str	r3, [sp, #16]
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	9303      	str	r3, [sp, #12]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	9302      	str	r3, [sp, #8]
 800a3b4:	2304      	movs	r3, #4
 800a3b6:	9301      	str	r3, [sp, #4]
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	9300      	str	r3, [sp, #0]
 800a3bc:	2302      	movs	r3, #2
 800a3be:	2201      	movs	r2, #1
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	2007      	movs	r0, #7
 800a3c4:	f001 fe1b 	bl	800bffe <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ca:	3302      	adds	r3, #2
 800a3cc:	9308      	str	r3, [sp, #32]
 800a3ce:	2305      	movs	r3, #5
 800a3d0:	9307      	str	r3, [sp, #28]
 800a3d2:	2304      	movs	r3, #4
 800a3d4:	9306      	str	r3, [sp, #24]
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	9305      	str	r3, [sp, #20]
 800a3da:	2302      	movs	r3, #2
 800a3dc:	9304      	str	r3, [sp, #16]
 800a3de:	2301      	movs	r3, #1
 800a3e0:	9303      	str	r3, [sp, #12]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	9302      	str	r3, [sp, #8]
 800a3e6:	2304      	movs	r3, #4
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	2007      	movs	r0, #7
 800a3f6:	f001 fe92 	bl	800c11e <VL53L1_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	2209      	movs	r2, #9
 800a3fe:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 800a400:	6a3b      	ldr	r3, [r7, #32]
 800a402:	220b      	movs	r2, #11
 800a404:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	2209      	movs	r2, #9
 800a40a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40e:	220b      	movs	r2, #11
 800a410:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800a412:	6a3b      	ldr	r3, [r7, #32]
 800a414:	2200      	movs	r2, #0
 800a416:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 800a418:	6a3b      	ldr	r3, [r7, #32]
 800a41a:	2220      	movs	r2, #32
 800a41c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800a41e:	6a3b      	ldr	r3, [r7, #32]
 800a420:	2200      	movs	r2, #0
 800a422:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 800a424:	6a3b      	ldr	r3, [r7, #32]
 800a426:	221a      	movs	r2, #26
 800a428:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a42a:	6a3b      	ldr	r3, [r7, #32]
 800a42c:	2200      	movs	r2, #0
 800a42e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 800a430:	6a3b      	ldr	r3, [r7, #32]
 800a432:	2228      	movs	r2, #40	; 0x28
 800a434:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	2200      	movs	r2, #0
 800a43a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 800a43c:	6a3b      	ldr	r3, [r7, #32]
 800a43e:	2221      	movs	r2, #33	; 0x21
 800a440:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	22f5      	movs	r2, #245	; 0xf5
 800a446:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2208      	movs	r2, #8
 800a44c:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2288      	movs	r2, #136	; 0x88
 800a454:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	6a3b      	ldr	r3, [r7, #32]
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	68b9      	ldr	r1, [r7, #8]
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f001 f821 	bl	800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	229b      	movs	r2, #155	; 0x9b
 800a46c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800a46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a470:	2226      	movs	r2, #38	; 0x26
 800a472:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a474:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <VL53L1_preset_mode_histogram_ranging_with_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b090      	sub	sp, #64	; 0x40
 800a484:	af0a      	add	r7, sp, #40	; 0x28
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
 800a48c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a48e:	2300      	movs	r3, #0
 800a490:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a494:	9304      	str	r3, [sp, #16]
 800a496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a498:	9303      	str	r3, [sp, #12]
 800a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49c:	9302      	str	r3, [sp, #8]
 800a49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a0:	9301      	str	r3, [sp, #4]
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	68b9      	ldr	r1, [r7, #8]
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	f7ff ff52 	bl	800a356 <VL53L1_preset_mode_histogram_ranging>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a4b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d13e      	bne.n	800a53c <VL53L1_preset_mode_histogram_ranging_with_mm1+0xbc>



		VL53L1_init_histogram_config_structure(
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	9308      	str	r3, [sp, #32]
 800a4c2:	2305      	movs	r3, #5
 800a4c4:	9307      	str	r3, [sp, #28]
 800a4c6:	2304      	movs	r3, #4
 800a4c8:	9306      	str	r3, [sp, #24]
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	9305      	str	r3, [sp, #20]
 800a4ce:	230a      	movs	r3, #10
 800a4d0:	9304      	str	r3, [sp, #16]
 800a4d2:	2309      	movs	r3, #9
 800a4d4:	9303      	str	r3, [sp, #12]
 800a4d6:	2308      	movs	r3, #8
 800a4d8:	9302      	str	r3, [sp, #8]
 800a4da:	2304      	movs	r3, #4
 800a4dc:	9301      	str	r3, [sp, #4]
 800a4de:	2303      	movs	r3, #3
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	2302      	movs	r3, #2
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	2007      	movs	r0, #7
 800a4ea:	f001 fd88 	bl	800bffe <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f0:	3302      	adds	r3, #2
 800a4f2:	9308      	str	r3, [sp, #32]
 800a4f4:	2305      	movs	r3, #5
 800a4f6:	9307      	str	r3, [sp, #28]
 800a4f8:	2304      	movs	r3, #4
 800a4fa:	9306      	str	r3, [sp, #24]
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	9305      	str	r3, [sp, #20]
 800a500:	230a      	movs	r3, #10
 800a502:	9304      	str	r3, [sp, #16]
 800a504:	2309      	movs	r3, #9
 800a506:	9303      	str	r3, [sp, #12]
 800a508:	2308      	movs	r3, #8
 800a50a:	9302      	str	r3, [sp, #8]
 800a50c:	2304      	movs	r3, #4
 800a50e:	9301      	str	r3, [sp, #4]
 800a510:	2303      	movs	r3, #3
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	2302      	movs	r3, #2
 800a516:	2201      	movs	r2, #1
 800a518:	2100      	movs	r1, #0
 800a51a:	2007      	movs	r0, #7
 800a51c:	f001 fdff 	bl	800c11e <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	6a3b      	ldr	r3, [r7, #32]
 800a526:	683a      	ldr	r2, [r7, #0]
 800a528:	68b9      	ldr	r1, [r7, #8]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 ffbd 	bl	800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800a530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a532:	22bb      	movs	r2, #187	; 0xbb
 800a534:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN |
				VL53L1_SEQUENCE_RANGE_EN;



		psystem->system__mode_start =
 800a536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a538:	2226      	movs	r2, #38	; 0x26
 800a53a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a53c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a540:	4618      	mov	r0, r3
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <VL53L1_preset_mode_histogram_ranging_with_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b08c      	sub	sp, #48	; 0x30
 800a54c:	af06      	add	r7, sp, #24
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
 800a554:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a556:	2300      	movs	r3, #0
 800a558:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 800a55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55c:	9304      	str	r3, [sp, #16]
 800a55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a560:	9303      	str	r3, [sp, #12]
 800a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a564:	9302      	str	r3, [sp, #8]
 800a566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a568:	9301      	str	r3, [sp, #4]
 800a56a:	6a3b      	ldr	r3, [r7, #32]
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	68b9      	ldr	r1, [r7, #8]
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f7ff ff83 	bl	800a480 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 800a57a:	4603      	mov	r3, r0
 800a57c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a57e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d102      	bne.n	800a58c <VL53L1_preset_mode_histogram_ranging_with_mm2+0x44>



		pdynamic->system__sequence_config =
 800a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a588:	22db      	movs	r2, #219	; 0xdb
 800a58a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a58c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a590:	4618      	mov	r0, r3
 800a592:	3718      	adds	r7, #24
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b090      	sub	sp, #64	; 0x40
 800a59c:	af0a      	add	r7, sp, #40	; 0x28
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
 800a5a4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ac:	9304      	str	r3, [sp, #16]
 800a5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b0:	9303      	str	r3, [sp, #12]
 800a5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b4:	9302      	str	r3, [sp, #8]
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b8:	9301      	str	r3, [sp, #4]
 800a5ba:	6a3b      	ldr	r3, [r7, #32]
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	68b9      	ldr	r1, [r7, #8]
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f7ff fec6 	bl	800a356 <VL53L1_preset_mode_histogram_ranging>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a5ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d13e      	bne.n	800a654 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0xbc>



		VL53L1_init_histogram_config_structure(
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	9308      	str	r3, [sp, #32]
 800a5da:	230d      	movs	r3, #13
 800a5dc:	9307      	str	r3, [sp, #28]
 800a5de:	230c      	movs	r3, #12
 800a5e0:	9306      	str	r3, [sp, #24]
 800a5e2:	230b      	movs	r3, #11
 800a5e4:	9305      	str	r3, [sp, #20]
 800a5e6:	230a      	movs	r3, #10
 800a5e8:	9304      	str	r3, [sp, #16]
 800a5ea:	2309      	movs	r3, #9
 800a5ec:	9303      	str	r3, [sp, #12]
 800a5ee:	2308      	movs	r3, #8
 800a5f0:	9302      	str	r3, [sp, #8]
 800a5f2:	230c      	movs	r3, #12
 800a5f4:	9301      	str	r3, [sp, #4]
 800a5f6:	230b      	movs	r3, #11
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	230a      	movs	r3, #10
 800a5fc:	2209      	movs	r2, #9
 800a5fe:	2108      	movs	r1, #8
 800a600:	2007      	movs	r0, #7
 800a602:	f001 fcfc 	bl	800bffe <VL53L1_init_histogram_config_structure>
				  7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a608:	3302      	adds	r3, #2
 800a60a:	9308      	str	r3, [sp, #32]
 800a60c:	230d      	movs	r3, #13
 800a60e:	9307      	str	r3, [sp, #28]
 800a610:	230c      	movs	r3, #12
 800a612:	9306      	str	r3, [sp, #24]
 800a614:	230b      	movs	r3, #11
 800a616:	9305      	str	r3, [sp, #20]
 800a618:	230a      	movs	r3, #10
 800a61a:	9304      	str	r3, [sp, #16]
 800a61c:	2309      	movs	r3, #9
 800a61e:	9303      	str	r3, [sp, #12]
 800a620:	2308      	movs	r3, #8
 800a622:	9302      	str	r3, [sp, #8]
 800a624:	230c      	movs	r3, #12
 800a626:	9301      	str	r3, [sp, #4]
 800a628:	230b      	movs	r3, #11
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	230a      	movs	r3, #10
 800a62e:	2209      	movs	r2, #9
 800a630:	2108      	movs	r1, #8
 800a632:	2007      	movs	r0, #7
 800a634:	f001 fd73 	bl	800c11e <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	6a3b      	ldr	r3, [r7, #32]
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	68b9      	ldr	r1, [r7, #8]
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 ff31 	bl	800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pgeneral->dss_config__roi_mode_control =
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	2202      	movs	r2, #2
 800a64c:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;



		pdynamic->system__sequence_config =
 800a64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a650:	22bb      	movs	r2, #187	; 0xbb
 800a652:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800a654:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3718      	adds	r7, #24
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b08c      	sub	sp, #48	; 0x30
 800a664:	af06      	add	r7, sp, #24
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
 800a66c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a66e:	2300      	movs	r3, #0
 800a670:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 800a672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a674:	9304      	str	r3, [sp, #16]
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	9303      	str	r3, [sp, #12]
 800a67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67c:	9302      	str	r3, [sp, #8]
 800a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a680:	9301      	str	r3, [sp, #4]
 800a682:	6a3b      	ldr	r3, [r7, #32]
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	68b9      	ldr	r1, [r7, #8]
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f7ff ff83 	bl	800a598 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 800a692:	4603      	mov	r3, r0
 800a694:	75fb      	strb	r3, [r7, #23]
				pdynamic,
				psystem,
				ptuning_parms,
				pzone_cfg);

	if (status == VL53L1_ERROR_NONE) {
 800a696:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d102      	bne.n	800a6a4 <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x44>



		pdynamic->system__sequence_config =
 800a69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a0:	22db      	movs	r2, #219	; 0xdb
 800a6a2:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800a6a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3718      	adds	r7, #24
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <VL53L1_preset_mode_histogram_ranging_short_timing>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b090      	sub	sp, #64	; 0x40
 800a6b4:	af0a      	add	r7, sp, #40	; 0x28
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
 800a6bc:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c4:	9304      	str	r3, [sp, #16]
 800a6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c8:	9303      	str	r3, [sp, #12]
 800a6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6cc:	9302      	str	r3, [sp, #8]
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d0:	9301      	str	r3, [sp, #4]
 800a6d2:	6a3b      	ldr	r3, [r7, #32]
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	68b9      	ldr	r1, [r7, #8]
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f7ff fe3a 	bl	800a356 <VL53L1_preset_mode_histogram_ranging>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a6e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d166      	bne.n	800a7bc <VL53L1_preset_mode_histogram_ranging_short_timing+0x10c>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800a6f4:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	9308      	str	r3, [sp, #32]
 800a6fa:	2304      	movs	r3, #4
 800a6fc:	9307      	str	r3, [sp, #28]
 800a6fe:	2303      	movs	r3, #3
 800a700:	9306      	str	r3, [sp, #24]
 800a702:	2302      	movs	r3, #2
 800a704:	9305      	str	r3, [sp, #20]
 800a706:	2301      	movs	r3, #1
 800a708:	9304      	str	r3, [sp, #16]
 800a70a:	2300      	movs	r3, #0
 800a70c:	9303      	str	r3, [sp, #12]
 800a70e:	2307      	movs	r3, #7
 800a710:	9302      	str	r3, [sp, #8]
 800a712:	2304      	movs	r3, #4
 800a714:	9301      	str	r3, [sp, #4]
 800a716:	2303      	movs	r3, #3
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	2302      	movs	r3, #2
 800a71c:	2201      	movs	r2, #1
 800a71e:	2100      	movs	r1, #0
 800a720:	2007      	movs	r0, #7
 800a722:	f001 fc6c 	bl	800bffe <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				7, 0, 1, 2, 3, 4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a728:	3302      	adds	r3, #2
 800a72a:	9308      	str	r3, [sp, #32]
 800a72c:	2304      	movs	r3, #4
 800a72e:	9307      	str	r3, [sp, #28]
 800a730:	2303      	movs	r3, #3
 800a732:	9306      	str	r3, [sp, #24]
 800a734:	2302      	movs	r3, #2
 800a736:	9305      	str	r3, [sp, #20]
 800a738:	2301      	movs	r3, #1
 800a73a:	9304      	str	r3, [sp, #16]
 800a73c:	2300      	movs	r3, #0
 800a73e:	9303      	str	r3, [sp, #12]
 800a740:	2307      	movs	r3, #7
 800a742:	9302      	str	r3, [sp, #8]
 800a744:	2304      	movs	r3, #4
 800a746:	9301      	str	r3, [sp, #4]
 800a748:	2303      	movs	r3, #3
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	2302      	movs	r3, #2
 800a74e:	2201      	movs	r2, #1
 800a750:	2100      	movs	r1, #0
 800a752:	2007      	movs	r0, #7
 800a754:	f001 fce3 	bl	800c11e <VL53L1_init_histogram_multizone_config_structure>
				7, 0, 1, 2, 3, 4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	6a3b      	ldr	r3, [r7, #32]
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	68b9      	ldr	r1, [r7, #8]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fea1 	bl	800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x04;
 800a768:	6a3b      	ldr	r3, [r7, #32]
 800a76a:	2204      	movs	r2, #4
 800a76c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	2203      	movs	r2, #3
 800a772:	725a      	strb	r2, [r3, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800a774:	6a3b      	ldr	r3, [r7, #32]
 800a776:	2200      	movs	r2, #0
 800a778:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x42;
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	2242      	movs	r2, #66	; 0x42
 800a77e:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800a780:	6a3b      	ldr	r3, [r7, #32]
 800a782:	2200      	movs	r2, #0
 800a784:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x42;
 800a786:	6a3b      	ldr	r3, [r7, #32]
 800a788:	2242      	movs	r2, #66	; 0x42
 800a78a:	70da      	strb	r2, [r3, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a78c:	6a3b      	ldr	r3, [r7, #32]
 800a78e:	2200      	movs	r2, #0
 800a790:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x52;
 800a792:	6a3b      	ldr	r3, [r7, #32]
 800a794:	2252      	movs	r2, #82	; 0x52
 800a796:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a798:	6a3b      	ldr	r3, [r7, #32]
 800a79a:	2200      	movs	r2, #0
 800a79c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	2266      	movs	r2, #102	; 0x66
 800a7a2:	721a      	strb	r2, [r3, #8]

		pgeneral->cal_config__vcsel_start = 0x04;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	2204      	movs	r2, #4
 800a7a8:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	22a4      	movs	r2, #164	; 0xa4
 800a7ae:	71da      	strb	r2, [r3, #7]



		pdynamic->system__sequence_config =
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b2:	229b      	movs	r2, #155	; 0x9b
 800a7b4:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800a7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b8:	2226      	movs	r2, #38	; 0x26
 800a7ba:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a7bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3718      	adds	r7, #24
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <VL53L1_preset_mode_histogram_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b090      	sub	sp, #64	; 0x40
 800a7cc:	af0a      	add	r7, sp, #40	; 0x28
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
 800a7d4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	9304      	str	r3, [sp, #16]
 800a7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e0:	9303      	str	r3, [sp, #12]
 800a7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e4:	9302      	str	r3, [sp, #8]
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	9301      	str	r3, [sp, #4]
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	68b9      	ldr	r1, [r7, #8]
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f7ff fdae 	bl	800a356 <VL53L1_preset_mode_histogram_ranging>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a7fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d178      	bne.n	800a8f8 <VL53L1_preset_mode_histogram_long_range+0x130>





		VL53L1_init_histogram_config_structure(
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	9308      	str	r3, [sp, #32]
 800a80a:	2305      	movs	r3, #5
 800a80c:	9307      	str	r3, [sp, #28]
 800a80e:	2304      	movs	r3, #4
 800a810:	9306      	str	r3, [sp, #24]
 800a812:	2303      	movs	r3, #3
 800a814:	9305      	str	r3, [sp, #20]
 800a816:	2302      	movs	r3, #2
 800a818:	9304      	str	r3, [sp, #16]
 800a81a:	2301      	movs	r3, #1
 800a81c:	9303      	str	r3, [sp, #12]
 800a81e:	2300      	movs	r3, #0
 800a820:	9302      	str	r3, [sp, #8]
 800a822:	2304      	movs	r3, #4
 800a824:	9301      	str	r3, [sp, #4]
 800a826:	2303      	movs	r3, #3
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	2302      	movs	r3, #2
 800a82c:	2201      	movs	r2, #1
 800a82e:	2100      	movs	r1, #0
 800a830:	2007      	movs	r0, #7
 800a832:	f001 fbe4 	bl	800bffe <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	3302      	adds	r3, #2
 800a83a:	9308      	str	r3, [sp, #32]
 800a83c:	2305      	movs	r3, #5
 800a83e:	9307      	str	r3, [sp, #28]
 800a840:	2304      	movs	r3, #4
 800a842:	9306      	str	r3, [sp, #24]
 800a844:	2303      	movs	r3, #3
 800a846:	9305      	str	r3, [sp, #20]
 800a848:	2302      	movs	r3, #2
 800a84a:	9304      	str	r3, [sp, #16]
 800a84c:	2301      	movs	r3, #1
 800a84e:	9303      	str	r3, [sp, #12]
 800a850:	2300      	movs	r3, #0
 800a852:	9302      	str	r3, [sp, #8]
 800a854:	2304      	movs	r3, #4
 800a856:	9301      	str	r3, [sp, #4]
 800a858:	2303      	movs	r3, #3
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	2302      	movs	r3, #2
 800a85e:	2201      	movs	r2, #1
 800a860:	2100      	movs	r1, #0
 800a862:	2007      	movs	r0, #7
 800a864:	f001 fc5b 	bl	800c11e <VL53L1_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	6a3b      	ldr	r3, [r7, #32]
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	68b9      	ldr	r1, [r7, #8]
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fe19 	bl	800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800a878:	6a3b      	ldr	r3, [r7, #32]
 800a87a:	2209      	movs	r2, #9
 800a87c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 800a87e:	6a3b      	ldr	r3, [r7, #32]
 800a880:	220b      	movs	r2, #11
 800a882:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800a884:	6a3b      	ldr	r3, [r7, #32]
 800a886:	2200      	movs	r2, #0
 800a888:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800a88a:	6a3b      	ldr	r3, [r7, #32]
 800a88c:	2221      	movs	r2, #33	; 0x21
 800a88e:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	2200      	movs	r2, #0
 800a894:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 800a896:	6a3b      	ldr	r3, [r7, #32]
 800a898:	221b      	movs	r2, #27
 800a89a:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a89c:	6a3b      	ldr	r3, [r7, #32]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800a8a2:	6a3b      	ldr	r3, [r7, #32]
 800a8a4:	2229      	movs	r2, #41	; 0x29
 800a8a6:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a8a8:	6a3b      	ldr	r3, [r7, #32]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800a8ae:	6a3b      	ldr	r3, [r7, #32]
 800a8b0:	2222      	movs	r2, #34	; 0x22
 800a8b2:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	2209      	movs	r2, #9
 800a8b8:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	22f5      	movs	r2, #245	; 0xf5
 800a8be:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c2:	2209      	movs	r2, #9
 800a8c4:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c8:	220b      	movs	r2, #11
 800a8ca:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 800a8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ce:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d2:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 800a8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d6:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8da:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2208      	movs	r2, #8
 800a8e0:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2288      	movs	r2, #136	; 0x88
 800a8e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	229b      	movs	r2, #155	; 0x9b
 800a8f0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800a8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f4:	2226      	movs	r2, #38	; 0x26
 800a8f6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a8f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3718      	adds	r7, #24
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <VL53L1_preset_mode_histogram_long_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b090      	sub	sp, #64	; 0x40
 800a908:	af0a      	add	r7, sp, #40	; 0x28
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
 800a910:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a912:	2300      	movs	r3, #0
 800a914:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800a916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a918:	9304      	str	r3, [sp, #16]
 800a91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91c:	9303      	str	r3, [sp, #12]
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	9302      	str	r3, [sp, #8]
 800a922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a924:	9301      	str	r3, [sp, #4]
 800a926:	6a3b      	ldr	r3, [r7, #32]
 800a928:	9300      	str	r3, [sp, #0]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	68b9      	ldr	r1, [r7, #8]
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f7ff ff49 	bl	800a7c8 <VL53L1_preset_mode_histogram_long_range>
 800a936:	4603      	mov	r3, r0
 800a938:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a93a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d13b      	bne.n	800a9ba <VL53L1_preset_mode_histogram_long_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	9308      	str	r3, [sp, #32]
 800a946:	2305      	movs	r3, #5
 800a948:	9307      	str	r3, [sp, #28]
 800a94a:	2304      	movs	r3, #4
 800a94c:	9306      	str	r3, [sp, #24]
 800a94e:	2303      	movs	r3, #3
 800a950:	9305      	str	r3, [sp, #20]
 800a952:	230a      	movs	r3, #10
 800a954:	9304      	str	r3, [sp, #16]
 800a956:	2309      	movs	r3, #9
 800a958:	9303      	str	r3, [sp, #12]
 800a95a:	2308      	movs	r3, #8
 800a95c:	9302      	str	r3, [sp, #8]
 800a95e:	2304      	movs	r3, #4
 800a960:	9301      	str	r3, [sp, #4]
 800a962:	2303      	movs	r3, #3
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	2302      	movs	r3, #2
 800a968:	2201      	movs	r2, #1
 800a96a:	2100      	movs	r1, #0
 800a96c:	2007      	movs	r0, #7
 800a96e:	f001 fb46 	bl	800bffe <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	3302      	adds	r3, #2
 800a976:	9308      	str	r3, [sp, #32]
 800a978:	2305      	movs	r3, #5
 800a97a:	9307      	str	r3, [sp, #28]
 800a97c:	2304      	movs	r3, #4
 800a97e:	9306      	str	r3, [sp, #24]
 800a980:	2303      	movs	r3, #3
 800a982:	9305      	str	r3, [sp, #20]
 800a984:	230a      	movs	r3, #10
 800a986:	9304      	str	r3, [sp, #16]
 800a988:	2309      	movs	r3, #9
 800a98a:	9303      	str	r3, [sp, #12]
 800a98c:	2308      	movs	r3, #8
 800a98e:	9302      	str	r3, [sp, #8]
 800a990:	2304      	movs	r3, #4
 800a992:	9301      	str	r3, [sp, #4]
 800a994:	2303      	movs	r3, #3
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	2302      	movs	r3, #2
 800a99a:	2201      	movs	r2, #1
 800a99c:	2100      	movs	r1, #0
 800a99e:	2007      	movs	r0, #7
 800a9a0:	f001 fbbd 	bl	800c11e <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	6a3b      	ldr	r3, [r7, #32]
 800a9aa:	683a      	ldr	r2, [r7, #0]
 800a9ac:	68b9      	ldr	r1, [r7, #8]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fd7b 	bl	800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b6:	22bb      	movs	r2, #187	; 0xbb
 800a9b8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a9ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3718      	adds	r7, #24
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <VL53L1_preset_mode_histogram_long_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t      *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b08c      	sub	sp, #48	; 0x30
 800a9ca:	af06      	add	r7, sp, #24
 800a9cc:	60f8      	str	r0, [r7, #12]
 800a9ce:	60b9      	str	r1, [r7, #8]
 800a9d0:	607a      	str	r2, [r7, #4]
 800a9d2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range_mm1(
 800a9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9da:	9304      	str	r3, [sp, #16]
 800a9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9de:	9303      	str	r3, [sp, #12]
 800a9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e2:	9302      	str	r3, [sp, #8]
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e6:	9301      	str	r3, [sp, #4]
 800a9e8:	6a3b      	ldr	r3, [r7, #32]
 800a9ea:	9300      	str	r3, [sp, #0]
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	68b9      	ldr	r1, [r7, #8]
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f7ff ff86 	bl	800a904 <VL53L1_preset_mode_histogram_long_range_mm1>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a9fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d102      	bne.n	800aa0a <VL53L1_preset_mode_histogram_long_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	22db      	movs	r2, #219	; 0xdb
 800aa08:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800aa0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3718      	adds	r7, #24
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <VL53L1_preset_mode_histogram_medium_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b090      	sub	sp, #64	; 0x40
 800aa1a:	af0a      	add	r7, sp, #40	; 0x28
 800aa1c:	60f8      	str	r0, [r7, #12]
 800aa1e:	60b9      	str	r1, [r7, #8]
 800aa20:	607a      	str	r2, [r7, #4]
 800aa22:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800aa24:	2300      	movs	r3, #0
 800aa26:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800aa28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2a:	9304      	str	r3, [sp, #16]
 800aa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2e:	9303      	str	r3, [sp, #12]
 800aa30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa32:	9302      	str	r3, [sp, #8]
 800aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	6a3b      	ldr	r3, [r7, #32]
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	68b9      	ldr	r1, [r7, #8]
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f7ff fc87 	bl	800a356 <VL53L1_preset_mode_histogram_ranging>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800aa4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d178      	bne.n	800ab46 <VL53L1_preset_mode_histogram_medium_range+0x130>





		VL53L1_init_histogram_config_structure(
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	9308      	str	r3, [sp, #32]
 800aa58:	2303      	movs	r3, #3
 800aa5a:	9307      	str	r3, [sp, #28]
 800aa5c:	2302      	movs	r3, #2
 800aa5e:	9306      	str	r3, [sp, #24]
 800aa60:	2301      	movs	r3, #1
 800aa62:	9305      	str	r3, [sp, #20]
 800aa64:	2302      	movs	r3, #2
 800aa66:	9304      	str	r3, [sp, #16]
 800aa68:	2301      	movs	r3, #1
 800aa6a:	9303      	str	r3, [sp, #12]
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	9302      	str	r3, [sp, #8]
 800aa70:	2302      	movs	r3, #2
 800aa72:	9301      	str	r3, [sp, #4]
 800aa74:	2302      	movs	r3, #2
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	2301      	movs	r3, #1
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	2007      	movs	r0, #7
 800aa80:	f001 fabd 	bl	800bffe <VL53L1_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800aa84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa86:	3302      	adds	r3, #2
 800aa88:	9308      	str	r3, [sp, #32]
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	9307      	str	r3, [sp, #28]
 800aa8e:	2302      	movs	r3, #2
 800aa90:	9306      	str	r3, [sp, #24]
 800aa92:	2301      	movs	r3, #1
 800aa94:	9305      	str	r3, [sp, #20]
 800aa96:	2302      	movs	r3, #2
 800aa98:	9304      	str	r3, [sp, #16]
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	9303      	str	r3, [sp, #12]
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	9302      	str	r3, [sp, #8]
 800aaa2:	2302      	movs	r3, #2
 800aaa4:	9301      	str	r3, [sp, #4]
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	2301      	movs	r3, #1
 800aaac:	2201      	movs	r2, #1
 800aaae:	2100      	movs	r1, #0
 800aab0:	2007      	movs	r0, #7
 800aab2:	f001 fb34 	bl	800c11e <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab8:	9300      	str	r3, [sp, #0]
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	68b9      	ldr	r1, [r7, #8]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 fcf2 	bl	800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 800aac6:	6a3b      	ldr	r3, [r7, #32]
 800aac8:	2205      	movs	r2, #5
 800aaca:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 800aacc:	6a3b      	ldr	r3, [r7, #32]
 800aace:	2207      	movs	r2, #7
 800aad0:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800aad2:	6a3b      	ldr	r3, [r7, #32]
 800aad4:	2200      	movs	r2, #0
 800aad6:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 800aad8:	6a3b      	ldr	r3, [r7, #32]
 800aada:	2236      	movs	r2, #54	; 0x36
 800aadc:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800aade:	6a3b      	ldr	r3, [r7, #32]
 800aae0:	2200      	movs	r2, #0
 800aae2:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 800aae4:	6a3b      	ldr	r3, [r7, #32]
 800aae6:	2228      	movs	r2, #40	; 0x28
 800aae8:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800aaea:	6a3b      	ldr	r3, [r7, #32]
 800aaec:	2200      	movs	r2, #0
 800aaee:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 800aaf0:	6a3b      	ldr	r3, [r7, #32]
 800aaf2:	2244      	movs	r2, #68	; 0x44
 800aaf4:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800aaf6:	6a3b      	ldr	r3, [r7, #32]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 800aafc:	6a3b      	ldr	r3, [r7, #32]
 800aafe:	2233      	movs	r2, #51	; 0x33
 800ab00:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	2205      	movs	r2, #5
 800ab06:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	22f5      	movs	r2, #245	; 0xf5
 800ab0c:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab10:	2205      	movs	r2, #5
 800ab12:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	2207      	movs	r2, #7
 800ab18:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 800ab1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1c:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab20:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 800ab22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab24:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 800ab26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab28:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2208      	movs	r2, #8
 800ab2e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2248      	movs	r2, #72	; 0x48
 800ab36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3c:	229b      	movs	r2, #155	; 0x9b
 800ab3e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab42:	2226      	movs	r2, #38	; 0x26
 800ab44:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ab46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3718      	adds	r7, #24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <VL53L1_preset_mode_histogram_medium_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b090      	sub	sp, #64	; 0x40
 800ab56:	af0a      	add	r7, sp, #40	; 0x28
 800ab58:	60f8      	str	r0, [r7, #12]
 800ab5a:	60b9      	str	r1, [r7, #8]
 800ab5c:	607a      	str	r2, [r7, #4]
 800ab5e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ab60:	2300      	movs	r3, #0
 800ab62:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800ab64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab66:	9304      	str	r3, [sp, #16]
 800ab68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6a:	9303      	str	r3, [sp, #12]
 800ab6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6e:	9302      	str	r3, [sp, #8]
 800ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab72:	9301      	str	r3, [sp, #4]
 800ab74:	6a3b      	ldr	r3, [r7, #32]
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	68b9      	ldr	r1, [r7, #8]
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f7ff ff49 	bl	800aa16 <VL53L1_preset_mode_histogram_medium_range>
 800ab84:	4603      	mov	r3, r0
 800ab86:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800ab88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d13b      	bne.n	800ac08 <VL53L1_preset_mode_histogram_medium_range_mm1+0xb6>



		VL53L1_init_histogram_config_structure(
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	9308      	str	r3, [sp, #32]
 800ab94:	2303      	movs	r3, #3
 800ab96:	9307      	str	r3, [sp, #28]
 800ab98:	2302      	movs	r3, #2
 800ab9a:	9306      	str	r3, [sp, #24]
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	9305      	str	r3, [sp, #20]
 800aba0:	230a      	movs	r3, #10
 800aba2:	9304      	str	r3, [sp, #16]
 800aba4:	2309      	movs	r3, #9
 800aba6:	9303      	str	r3, [sp, #12]
 800aba8:	2308      	movs	r3, #8
 800abaa:	9302      	str	r3, [sp, #8]
 800abac:	2302      	movs	r3, #2
 800abae:	9301      	str	r3, [sp, #4]
 800abb0:	2302      	movs	r3, #2
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	2301      	movs	r3, #1
 800abb6:	2201      	movs	r2, #1
 800abb8:	2100      	movs	r1, #0
 800abba:	2007      	movs	r0, #7
 800abbc:	f001 fa1f 	bl	800bffe <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 1, 2, 2,
				8+0, 8+1, 8+2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800abc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc2:	3302      	adds	r3, #2
 800abc4:	9308      	str	r3, [sp, #32]
 800abc6:	2303      	movs	r3, #3
 800abc8:	9307      	str	r3, [sp, #28]
 800abca:	2302      	movs	r3, #2
 800abcc:	9306      	str	r3, [sp, #24]
 800abce:	2301      	movs	r3, #1
 800abd0:	9305      	str	r3, [sp, #20]
 800abd2:	230a      	movs	r3, #10
 800abd4:	9304      	str	r3, [sp, #16]
 800abd6:	2309      	movs	r3, #9
 800abd8:	9303      	str	r3, [sp, #12]
 800abda:	2308      	movs	r3, #8
 800abdc:	9302      	str	r3, [sp, #8]
 800abde:	2302      	movs	r3, #2
 800abe0:	9301      	str	r3, [sp, #4]
 800abe2:	2302      	movs	r3, #2
 800abe4:	9300      	str	r3, [sp, #0]
 800abe6:	2301      	movs	r3, #1
 800abe8:	2201      	movs	r2, #1
 800abea:	2100      	movs	r1, #0
 800abec:	2007      	movs	r0, #7
 800abee:	f001 fa96 	bl	800c11e <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800abf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	6a3b      	ldr	r3, [r7, #32]
 800abf8:	683a      	ldr	r2, [r7, #0]
 800abfa:	68b9      	ldr	r1, [r7, #8]
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fc54 	bl	800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800ac02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac04:	22bb      	movs	r2, #187	; 0xbb
 800ac06:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ac08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3718      	adds	r7, #24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <VL53L1_preset_mode_histogram_medium_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b08c      	sub	sp, #48	; 0x30
 800ac18:	af06      	add	r7, sp, #24
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
 800ac20:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ac22:	2300      	movs	r3, #0
 800ac24:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range_mm1(
 800ac26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac28:	9304      	str	r3, [sp, #16]
 800ac2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2c:	9303      	str	r3, [sp, #12]
 800ac2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac30:	9302      	str	r3, [sp, #8]
 800ac32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac34:	9301      	str	r3, [sp, #4]
 800ac36:	6a3b      	ldr	r3, [r7, #32]
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	68b9      	ldr	r1, [r7, #8]
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f7ff ff86 	bl	800ab52 <VL53L1_preset_mode_histogram_medium_range_mm1>
 800ac46:	4603      	mov	r3, r0
 800ac48:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800ac4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d102      	bne.n	800ac58 <VL53L1_preset_mode_histogram_medium_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800ac52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac54:	22db      	movs	r2, #219	; 0xdb
 800ac56:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ac58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3718      	adds	r7, #24
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <VL53L1_preset_mode_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b090      	sub	sp, #64	; 0x40
 800ac68:	af0a      	add	r7, sp, #40	; 0x28
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
 800ac70:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ac72:	2300      	movs	r3, #0
 800ac74:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac78:	9304      	str	r3, [sp, #16]
 800ac7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7c:	9303      	str	r3, [sp, #12]
 800ac7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac80:	9302      	str	r3, [sp, #8]
 800ac82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac84:	9301      	str	r3, [sp, #4]
 800ac86:	6a3b      	ldr	r3, [r7, #32]
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	68b9      	ldr	r1, [r7, #8]
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f7ff fb60 	bl	800a356 <VL53L1_preset_mode_histogram_ranging>
 800ac96:	4603      	mov	r3, r0
 800ac98:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800ac9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d178      	bne.n	800ad94 <VL53L1_preset_mode_histogram_short_range+0x130>





		VL53L1_init_histogram_config_structure(
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	9308      	str	r3, [sp, #32]
 800aca6:	2302      	movs	r3, #2
 800aca8:	9307      	str	r3, [sp, #28]
 800acaa:	2302      	movs	r3, #2
 800acac:	9306      	str	r3, [sp, #24]
 800acae:	2301      	movs	r3, #1
 800acb0:	9305      	str	r3, [sp, #20]
 800acb2:	2301      	movs	r3, #1
 800acb4:	9304      	str	r3, [sp, #16]
 800acb6:	2301      	movs	r3, #1
 800acb8:	9303      	str	r3, [sp, #12]
 800acba:	2300      	movs	r3, #0
 800acbc:	9302      	str	r3, [sp, #8]
 800acbe:	2301      	movs	r3, #1
 800acc0:	9301      	str	r3, [sp, #4]
 800acc2:	2301      	movs	r3, #1
 800acc4:	9300      	str	r3, [sp, #0]
 800acc6:	2301      	movs	r3, #1
 800acc8:	2200      	movs	r2, #0
 800acca:	2107      	movs	r1, #7
 800accc:	2007      	movs	r0, #7
 800acce:	f001 f996 	bl	800bffe <VL53L1_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800acd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd4:	3302      	adds	r3, #2
 800acd6:	9308      	str	r3, [sp, #32]
 800acd8:	2302      	movs	r3, #2
 800acda:	9307      	str	r3, [sp, #28]
 800acdc:	2302      	movs	r3, #2
 800acde:	9306      	str	r3, [sp, #24]
 800ace0:	2301      	movs	r3, #1
 800ace2:	9305      	str	r3, [sp, #20]
 800ace4:	2301      	movs	r3, #1
 800ace6:	9304      	str	r3, [sp, #16]
 800ace8:	2301      	movs	r3, #1
 800acea:	9303      	str	r3, [sp, #12]
 800acec:	2300      	movs	r3, #0
 800acee:	9302      	str	r3, [sp, #8]
 800acf0:	2301      	movs	r3, #1
 800acf2:	9301      	str	r3, [sp, #4]
 800acf4:	2301      	movs	r3, #1
 800acf6:	9300      	str	r3, [sp, #0]
 800acf8:	2301      	movs	r3, #1
 800acfa:	2200      	movs	r2, #0
 800acfc:	2107      	movs	r1, #7
 800acfe:	2007      	movs	r0, #7
 800ad00:	f001 fa0d 	bl	800c11e <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800ad04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	6a3b      	ldr	r3, [r7, #32]
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	68b9      	ldr	r1, [r7, #8]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fbcb 	bl	800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 800ad14:	6a3b      	ldr	r3, [r7, #32]
 800ad16:	2203      	movs	r2, #3
 800ad18:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 800ad1a:	6a3b      	ldr	r3, [r7, #32]
 800ad1c:	2205      	movs	r2, #5
 800ad1e:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800ad20:	6a3b      	ldr	r3, [r7, #32]
 800ad22:	2200      	movs	r2, #0
 800ad24:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 800ad26:	6a3b      	ldr	r3, [r7, #32]
 800ad28:	2252      	movs	r2, #82	; 0x52
 800ad2a:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800ad2c:	6a3b      	ldr	r3, [r7, #32]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 800ad32:	6a3b      	ldr	r3, [r7, #32]
 800ad34:	2237      	movs	r2, #55	; 0x37
 800ad36:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800ad38:	6a3b      	ldr	r3, [r7, #32]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 800ad3e:	6a3b      	ldr	r3, [r7, #32]
 800ad40:	2266      	movs	r2, #102	; 0x66
 800ad42:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800ad44:	6a3b      	ldr	r3, [r7, #32]
 800ad46:	2200      	movs	r2, #0
 800ad48:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	2244      	movs	r2, #68	; 0x44
 800ad4e:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	2203      	movs	r2, #3
 800ad54:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	22f5      	movs	r2, #245	; 0xf5
 800ad5a:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5e:	2203      	movs	r2, #3
 800ad60:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 800ad62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad64:	2205      	movs	r2, #5
 800ad66:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800ad68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6a:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800ad70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad72:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad76:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2208      	movs	r2, #8
 800ad7c:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2228      	movs	r2, #40	; 0x28
 800ad84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800ad88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8a:	22bb      	movs	r2, #187	; 0xbb
 800ad8c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800ad8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad90:	2226      	movs	r2, #38	; 0x26
 800ad92:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ad94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3718      	adds	r7, #24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <VL53L1_preset_mode_special_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b090      	sub	sp, #64	; 0x40
 800ada4:	af0a      	add	r7, sp, #40	; 0x28
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
 800adac:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800adae:	2300      	movs	r3, #0
 800adb0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	9304      	str	r3, [sp, #16]
 800adb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb8:	9303      	str	r3, [sp, #12]
 800adba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbc:	9302      	str	r3, [sp, #8]
 800adbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc0:	9301      	str	r3, [sp, #4]
 800adc2:	6a3b      	ldr	r3, [r7, #32]
 800adc4:	9300      	str	r3, [sp, #0]
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	68b9      	ldr	r1, [r7, #8]
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f7ff ff49 	bl	800ac64 <VL53L1_preset_mode_histogram_short_range>
 800add2:	4603      	mov	r3, r0
 800add4:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800add6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d15a      	bne.n	800ae94 <VL53L1_preset_mode_special_histogram_short_range+0xf4>





		VL53L1_init_histogram_config_structure(
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	9308      	str	r3, [sp, #32]
 800ade2:	2301      	movs	r3, #1
 800ade4:	9307      	str	r3, [sp, #28]
 800ade6:	2301      	movs	r3, #1
 800ade8:	9306      	str	r3, [sp, #24]
 800adea:	2301      	movs	r3, #1
 800adec:	9305      	str	r3, [sp, #20]
 800adee:	2300      	movs	r3, #0
 800adf0:	9304      	str	r3, [sp, #16]
 800adf2:	2300      	movs	r3, #0
 800adf4:	9303      	str	r3, [sp, #12]
 800adf6:	2300      	movs	r3, #0
 800adf8:	9302      	str	r3, [sp, #8]
 800adfa:	2301      	movs	r3, #1
 800adfc:	9301      	str	r3, [sp, #4]
 800adfe:	2301      	movs	r3, #1
 800ae00:	9300      	str	r3, [sp, #0]
 800ae02:	2300      	movs	r3, #0
 800ae04:	2200      	movs	r2, #0
 800ae06:	2107      	movs	r1, #7
 800ae08:	2007      	movs	r0, #7
 800ae0a:	f001 f8f8 	bl	800bffe <VL53L1_init_histogram_config_structure>
				7, 7, 0, 0, 1, 1,
				0, 0, 0, 1, 1, 1,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae10:	3302      	adds	r3, #2
 800ae12:	9308      	str	r3, [sp, #32]
 800ae14:	2301      	movs	r3, #1
 800ae16:	9307      	str	r3, [sp, #28]
 800ae18:	2301      	movs	r3, #1
 800ae1a:	9306      	str	r3, [sp, #24]
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	9305      	str	r3, [sp, #20]
 800ae20:	2300      	movs	r3, #0
 800ae22:	9304      	str	r3, [sp, #16]
 800ae24:	2300      	movs	r3, #0
 800ae26:	9303      	str	r3, [sp, #12]
 800ae28:	2300      	movs	r3, #0
 800ae2a:	9302      	str	r3, [sp, #8]
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	9301      	str	r3, [sp, #4]
 800ae30:	2301      	movs	r3, #1
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	2300      	movs	r3, #0
 800ae36:	2200      	movs	r2, #0
 800ae38:	2107      	movs	r1, #7
 800ae3a:	2007      	movs	r0, #7
 800ae3c:	f001 f96f 	bl	800c11e <VL53L1_init_histogram_multizone_config_structure>
				0, 0, 0, 1, 1, 1,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	9300      	str	r3, [sp, #0]
 800ae44:	6a3b      	ldr	r3, [r7, #32]
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	68b9      	ldr	r1, [r7, #8]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fb2d 	bl	800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x02;
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	2202      	movs	r2, #2
 800ae54:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 800ae56:	6a3b      	ldr	r3, [r7, #32]
 800ae58:	2203      	movs	r2, #3
 800ae5a:	725a      	strb	r2, [r3, #9]



		pgeneral->cal_config__vcsel_start = 0x00;
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__target = 0x31;
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	2231      	movs	r2, #49	; 0x31
 800ae66:	721a      	strb	r2, [r3, #8]



		pdynamic->sd_config__woi_sd0 = 0x02;
 800ae68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x03;
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae70:	2203      	movs	r2, #3
 800ae72:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800ae74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae76:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800ae7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7e:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae82:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x10;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2210      	movs	r2, #16
 800ae88:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x18;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2218      	movs	r2, #24
 800ae90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	}

	LOG_FUNCTION_END(status);

	return status;
 800ae94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3718      	adds	r7, #24
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <VL53L1_preset_mode_histogram_short_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b090      	sub	sp, #64	; 0x40
 800aea4:	af0a      	add	r7, sp, #40	; 0x28
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
 800aeac:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	9304      	str	r3, [sp, #16]
 800aeb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb8:	9303      	str	r3, [sp, #12]
 800aeba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebc:	9302      	str	r3, [sp, #8]
 800aebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec0:	9301      	str	r3, [sp, #4]
 800aec2:	6a3b      	ldr	r3, [r7, #32]
 800aec4:	9300      	str	r3, [sp, #0]
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	68b9      	ldr	r1, [r7, #8]
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f7ff fec9 	bl	800ac64 <VL53L1_preset_mode_histogram_short_range>
 800aed2:	4603      	mov	r3, r0
 800aed4:	75fb      	strb	r3, [r7, #23]
				ptuning_parms,
				pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800aed6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d13b      	bne.n	800af56 <VL53L1_preset_mode_histogram_short_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	9308      	str	r3, [sp, #32]
 800aee2:	2302      	movs	r3, #2
 800aee4:	9307      	str	r3, [sp, #28]
 800aee6:	2302      	movs	r3, #2
 800aee8:	9306      	str	r3, [sp, #24]
 800aeea:	2301      	movs	r3, #1
 800aeec:	9305      	str	r3, [sp, #20]
 800aeee:	2301      	movs	r3, #1
 800aef0:	9304      	str	r3, [sp, #16]
 800aef2:	2309      	movs	r3, #9
 800aef4:	9303      	str	r3, [sp, #12]
 800aef6:	2308      	movs	r3, #8
 800aef8:	9302      	str	r3, [sp, #8]
 800aefa:	2301      	movs	r3, #1
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	2301      	movs	r3, #1
 800af00:	9300      	str	r3, [sp, #0]
 800af02:	2301      	movs	r3, #1
 800af04:	2200      	movs	r2, #0
 800af06:	2107      	movs	r1, #7
 800af08:	2007      	movs	r0, #7
 800af0a:	f001 f878 	bl	800bffe <VL53L1_init_histogram_config_structure>
				  7,   7, 0, 1, 1, 1,
				8+0, 8+1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	3302      	adds	r3, #2
 800af12:	9308      	str	r3, [sp, #32]
 800af14:	2302      	movs	r3, #2
 800af16:	9307      	str	r3, [sp, #28]
 800af18:	2302      	movs	r3, #2
 800af1a:	9306      	str	r3, [sp, #24]
 800af1c:	2301      	movs	r3, #1
 800af1e:	9305      	str	r3, [sp, #20]
 800af20:	2301      	movs	r3, #1
 800af22:	9304      	str	r3, [sp, #16]
 800af24:	2309      	movs	r3, #9
 800af26:	9303      	str	r3, [sp, #12]
 800af28:	2308      	movs	r3, #8
 800af2a:	9302      	str	r3, [sp, #8]
 800af2c:	2301      	movs	r3, #1
 800af2e:	9301      	str	r3, [sp, #4]
 800af30:	2301      	movs	r3, #1
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	2301      	movs	r3, #1
 800af36:	2200      	movs	r2, #0
 800af38:	2107      	movs	r1, #7
 800af3a:	2007      	movs	r0, #7
 800af3c:	f001 f8ef 	bl	800c11e <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800af40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	6a3b      	ldr	r3, [r7, #32]
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	68b9      	ldr	r1, [r7, #8]
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 faad 	bl	800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	22bb      	movs	r2, #187	; 0xbb
 800af54:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800af56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3718      	adds	r7, #24
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <VL53L1_preset_mode_histogram_short_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b08c      	sub	sp, #48	; 0x30
 800af66:	af06      	add	r7, sp, #24
 800af68:	60f8      	str	r0, [r7, #12]
 800af6a:	60b9      	str	r1, [r7, #8]
 800af6c:	607a      	str	r2, [r7, #4]
 800af6e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800af70:	2300      	movs	r3, #0
 800af72:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range_mm1(
 800af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af76:	9304      	str	r3, [sp, #16]
 800af78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af7a:	9303      	str	r3, [sp, #12]
 800af7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7e:	9302      	str	r3, [sp, #8]
 800af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af82:	9301      	str	r3, [sp, #4]
 800af84:	6a3b      	ldr	r3, [r7, #32]
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	68b9      	ldr	r1, [r7, #8]
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f7ff ff86 	bl	800aea0 <VL53L1_preset_mode_histogram_short_range_mm1>
 800af94:	4603      	mov	r3, r0
 800af96:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800af98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d102      	bne.n	800afa6 <VL53L1_preset_mode_histogram_short_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa2:	22db      	movs	r2, #219	; 0xdb
 800afa4:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800afa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <VL53L1_preset_mode_histogram_characterisation>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b08c      	sub	sp, #48	; 0x30
 800afb6:	af06      	add	r7, sp, #24
 800afb8:	60f8      	str	r0, [r7, #12]
 800afba:	60b9      	str	r1, [r7, #8]
 800afbc:	607a      	str	r2, [r7, #4]
 800afbe:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800afc0:	2300      	movs	r3, #0
 800afc2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800afc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc6:	9304      	str	r3, [sp, #16]
 800afc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afca:	9303      	str	r3, [sp, #12]
 800afcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afce:	9302      	str	r3, [sp, #8]
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	9301      	str	r3, [sp, #4]
 800afd4:	6a3b      	ldr	r3, [r7, #32]
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	68b9      	ldr	r1, [r7, #8]
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	f7ff f9b9 	bl	800a356 <VL53L1_preset_mode_histogram_ranging>
 800afe4:	4603      	mov	r3, r0
 800afe6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800afe8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d10b      	bne.n	800b008 <VL53L1_preset_mode_histogram_characterisation+0x56>



		pstatic->debug__ctrl = 0x01;
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	2201      	movs	r2, #1
 800aff4:	709a      	strb	r2, [r3, #2]
		psystem->power_management__go1_power_force = 0x01;
 800aff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff8:	2201      	movs	r2, #1
 800affa:	701a      	strb	r2, [r3, #0]

		pdynamic->system__sequence_config               =
 800affc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affe:	2283      	movs	r2, #131	; 0x83
 800b000:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_VHV_EN |
				VL53L1_SEQUENCE_PHASECAL_EN |
				VL53L1_SEQUENCE_RANGE_EN;

		psystem->system__mode_start                     =
 800b002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b004:	222e      	movs	r2, #46	; 0x2e
 800b006:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b008:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3718      	adds	r7, #24
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <VL53L1_preset_mode_histogram_xtalk_planar>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b090      	sub	sp, #64	; 0x40
 800b018:	af0a      	add	r7, sp, #40	; 0x28
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	607a      	str	r2, [r7, #4]
 800b020:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b022:	2300      	movs	r3, #0
 800b024:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_multizone_long_range(
 800b026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b028:	9304      	str	r3, [sp, #16]
 800b02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02c:	9303      	str	r3, [sp, #12]
 800b02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b030:	9302      	str	r3, [sp, #8]
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	9301      	str	r3, [sp, #4]
 800b036:	6a3b      	ldr	r3, [r7, #32]
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	68b9      	ldr	r1, [r7, #8]
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f000 f9ba 	bl	800b3ba <VL53L1_preset_mode_histogram_multizone_long_range>
 800b046:	4603      	mov	r3, r0
 800b048:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b04a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d151      	bne.n	800b0f6 <VL53L1_preset_mode_histogram_xtalk_planar+0xe2>



		status =
			VL53L1_zone_preset_xtalk_planar(
 800b052:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b054:	6838      	ldr	r0, [r7, #0]
 800b056:	f00a fb1c 	bl	8015692 <VL53L1_zone_preset_xtalk_planar>
 800b05a:	4603      	mov	r3, r0
 800b05c:	75fb      	strb	r3, [r7, #23]
				pgeneral,
				pzone_cfg);



		ptiming->range_config__vcsel_period_a = 0x09;
 800b05e:	6a3b      	ldr	r3, [r7, #32]
 800b060:	2209      	movs	r2, #9
 800b062:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800b064:	6a3b      	ldr	r3, [r7, #32]
 800b066:	2209      	movs	r2, #9
 800b068:	725a      	strb	r2, [r3, #9]



		VL53L1_init_histogram_config_structure(
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	9308      	str	r3, [sp, #32]
 800b06e:	2304      	movs	r3, #4
 800b070:	9307      	str	r3, [sp, #28]
 800b072:	2303      	movs	r3, #3
 800b074:	9306      	str	r3, [sp, #24]
 800b076:	2302      	movs	r3, #2
 800b078:	9305      	str	r3, [sp, #20]
 800b07a:	2301      	movs	r3, #1
 800b07c:	9304      	str	r3, [sp, #16]
 800b07e:	2300      	movs	r3, #0
 800b080:	9303      	str	r3, [sp, #12]
 800b082:	2307      	movs	r3, #7
 800b084:	9302      	str	r3, [sp, #8]
 800b086:	2304      	movs	r3, #4
 800b088:	9301      	str	r3, [sp, #4]
 800b08a:	2303      	movs	r3, #3
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	2302      	movs	r3, #2
 800b090:	2201      	movs	r2, #1
 800b092:	2100      	movs	r1, #0
 800b094:	2007      	movs	r0, #7
 800b096:	f000 ffb2 	bl	800bffe <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			phistogram);



		VL53L1_init_histogram_multizone_config_structure(
 800b09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09c:	3302      	adds	r3, #2
 800b09e:	9308      	str	r3, [sp, #32]
 800b0a0:	2304      	movs	r3, #4
 800b0a2:	9307      	str	r3, [sp, #28]
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	9306      	str	r3, [sp, #24]
 800b0a8:	2302      	movs	r3, #2
 800b0aa:	9305      	str	r3, [sp, #20]
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	9304      	str	r3, [sp, #16]
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	9303      	str	r3, [sp, #12]
 800b0b4:	2307      	movs	r3, #7
 800b0b6:	9302      	str	r3, [sp, #8]
 800b0b8:	2304      	movs	r3, #4
 800b0ba:	9301      	str	r3, [sp, #4]
 800b0bc:	2303      	movs	r3, #3
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	2302      	movs	r3, #2
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	2007      	movs	r0, #7
 800b0c8:	f001 f829 	bl	800c11e <VL53L1_init_histogram_multizone_config_structure>
			&(pzone_cfg->multizone_hist_cfg));




		if (status == VL53L1_ERROR_NONE) {
 800b0cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d108      	bne.n	800b0e6 <VL53L1_preset_mode_histogram_xtalk_planar+0xd2>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800b0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d6:	3302      	adds	r3, #2
 800b0d8:	461a      	mov	r2, r3
 800b0da:	6879      	ldr	r1, [r7, #4]
 800b0dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0de:	f003 f97d 	bl	800e3dc <VL53L1_set_histogram_multizone_initial_bin_config>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	75fb      	strb	r3, [r7, #23]
			&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	6a3b      	ldr	r3, [r7, #32]
 800b0ec:	683a      	ldr	r2, [r7, #0]
 800b0ee:	68b9      	ldr	r1, [r7, #8]
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 f9da 	bl	800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>

	}

	LOG_FUNCTION_END(status);

	return status;
 800b0f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3718      	adds	r7, #24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <VL53L1_preset_mode_histogram_xtalk_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b090      	sub	sp, #64	; 0x40
 800b106:	af0a      	add	r7, sp, #40	; 0x28
 800b108:	60f8      	str	r0, [r7, #12]
 800b10a:	60b9      	str	r1, [r7, #8]
 800b10c:	607a      	str	r2, [r7, #4]
 800b10e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b110:	2300      	movs	r3, #0
 800b112:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800b114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b116:	9304      	str	r3, [sp, #16]
 800b118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11a:	9303      	str	r3, [sp, #12]
 800b11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11e:	9302      	str	r3, [sp, #8]
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	9301      	str	r3, [sp, #4]
 800b124:	6a3b      	ldr	r3, [r7, #32]
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	68b9      	ldr	r1, [r7, #8]
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f7ff f911 	bl	800a356 <VL53L1_preset_mode_histogram_ranging>
 800b134:	4603      	mov	r3, r0
 800b136:	75fb      	strb	r3, [r7, #23]
			pzone_cfg);




	if (status == VL53L1_ERROR_NONE) {
 800b138:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d16e      	bne.n	800b21e <VL53L1_preset_mode_histogram_xtalk_mm1+0x11c>





		VL53L1_init_histogram_config_structure(
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	9308      	str	r3, [sp, #32]
 800b144:	230c      	movs	r3, #12
 800b146:	9307      	str	r3, [sp, #28]
 800b148:	230b      	movs	r3, #11
 800b14a:	9306      	str	r3, [sp, #24]
 800b14c:	230a      	movs	r3, #10
 800b14e:	9305      	str	r3, [sp, #20]
 800b150:	2309      	movs	r3, #9
 800b152:	9304      	str	r3, [sp, #16]
 800b154:	2308      	movs	r3, #8
 800b156:	9303      	str	r3, [sp, #12]
 800b158:	230f      	movs	r3, #15
 800b15a:	9302      	str	r3, [sp, #8]
 800b15c:	230c      	movs	r3, #12
 800b15e:	9301      	str	r3, [sp, #4]
 800b160:	230b      	movs	r3, #11
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	230a      	movs	r3, #10
 800b166:	2209      	movs	r2, #9
 800b168:	2108      	movs	r1, #8
 800b16a:	200f      	movs	r0, #15
 800b16c:	f000 ff47 	bl	800bffe <VL53L1_init_histogram_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b172:	3302      	adds	r3, #2
 800b174:	9308      	str	r3, [sp, #32]
 800b176:	230c      	movs	r3, #12
 800b178:	9307      	str	r3, [sp, #28]
 800b17a:	230b      	movs	r3, #11
 800b17c:	9306      	str	r3, [sp, #24]
 800b17e:	230a      	movs	r3, #10
 800b180:	9305      	str	r3, [sp, #20]
 800b182:	2309      	movs	r3, #9
 800b184:	9304      	str	r3, [sp, #16]
 800b186:	2308      	movs	r3, #8
 800b188:	9303      	str	r3, [sp, #12]
 800b18a:	230f      	movs	r3, #15
 800b18c:	9302      	str	r3, [sp, #8]
 800b18e:	230c      	movs	r3, #12
 800b190:	9301      	str	r3, [sp, #4]
 800b192:	230b      	movs	r3, #11
 800b194:	9300      	str	r3, [sp, #0]
 800b196:	230a      	movs	r3, #10
 800b198:	2209      	movs	r2, #9
 800b19a:	2108      	movs	r1, #8
 800b19c:	200f      	movs	r0, #15
 800b19e:	f000 ffbe 	bl	800c11e <VL53L1_init_histogram_multizone_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	68b9      	ldr	r1, [r7, #8]
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 f97c 	bl	800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800b1b2:	6a3b      	ldr	r3, [r7, #32]
 800b1b4:	2209      	movs	r2, #9
 800b1b6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800b1b8:	6a3b      	ldr	r3, [r7, #32]
 800b1ba:	2209      	movs	r2, #9
 800b1bc:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800b1be:	6a3b      	ldr	r3, [r7, #32]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800b1c4:	6a3b      	ldr	r3, [r7, #32]
 800b1c6:	2221      	movs	r2, #33	; 0x21
 800b1c8:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x21;
 800b1d0:	6a3b      	ldr	r3, [r7, #32]
 800b1d2:	2221      	movs	r2, #33	; 0x21
 800b1d4:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800b1d6:	6a3b      	ldr	r3, [r7, #32]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800b1dc:	6a3b      	ldr	r3, [r7, #32]
 800b1de:	2229      	movs	r2, #41	; 0x29
 800b1e0:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800b1e2:	6a3b      	ldr	r3, [r7, #32]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 800b1e8:	6a3b      	ldr	r3, [r7, #32]
 800b1ea:	2229      	movs	r2, #41	; 0x29
 800b1ec:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	2209      	movs	r2, #9
 800b1f2:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	22f5      	movs	r2, #245	; 0xf5
 800b1f8:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800b1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fc:	2209      	movs	r2, #9
 800b1fe:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x09;
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	2209      	movs	r2, #9
 800b204:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 800b206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b208:	2209      	movs	r2, #9
 800b20a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1 = 0x06;
 800b20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20e:	2206      	movs	r2, #6
 800b210:	72da      	strb	r2, [r3, #11]

		pdynamic->system__sequence_config =
 800b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b214:	22bb      	movs	r2, #187	; 0xbb
 800b216:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800b218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21a:	2226      	movs	r2, #38	; 0x26
 800b21c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b21e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3718      	adds	r7, #24
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <VL53L1_preset_mode_histogram_xtalk_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b08c      	sub	sp, #48	; 0x30
 800b22e:	af06      	add	r7, sp, #24
 800b230:	60f8      	str	r0, [r7, #12]
 800b232:	60b9      	str	r1, [r7, #8]
 800b234:	607a      	str	r2, [r7, #4]
 800b236:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b238:	2300      	movs	r3, #0
 800b23a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_xtalk_mm1(
 800b23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23e:	9304      	str	r3, [sp, #16]
 800b240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b242:	9303      	str	r3, [sp, #12]
 800b244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b246:	9302      	str	r3, [sp, #8]
 800b248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24a:	9301      	str	r3, [sp, #4]
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	68b9      	ldr	r1, [r7, #8]
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f7ff ff53 	bl	800b102 <VL53L1_preset_mode_histogram_xtalk_mm1>
 800b25c:	4603      	mov	r3, r0
 800b25e:	75fb      	strb	r3, [r7, #23]
			psystem,
			ptuning_parms,
			pzone_cfg);


		pdynamic->system__sequence_config =
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b262:	22db      	movs	r2, #219	; 0xdb
 800b264:	745a      	strb	r2, [r3, #17]



	LOG_FUNCTION_END(status);

	return status;
 800b266:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <VL53L1_preset_mode_histogram_multizone>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b08c      	sub	sp, #48	; 0x30
 800b276:	af06      	add	r7, sp, #24
 800b278:	60f8      	str	r0, [r7, #12]
 800b27a:	60b9      	str	r1, [r7, #8]
 800b27c:	607a      	str	r2, [r7, #4]
 800b27e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b280:	2300      	movs	r3, #0
 800b282:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800b284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b286:	9304      	str	r3, [sp, #16]
 800b288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28a:	9303      	str	r3, [sp, #12]
 800b28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28e:	9302      	str	r3, [sp, #8]
 800b290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b292:	9301      	str	r3, [sp, #4]
 800b294:	6a3b      	ldr	r3, [r7, #32]
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	68b9      	ldr	r1, [r7, #8]
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	f7ff fbb9 	bl	800aa16 <VL53L1_preset_mode_histogram_medium_range>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b2a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d12c      	bne.n	800b30a <VL53L1_preset_mode_histogram_multizone+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800b2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b2:	9304      	str	r3, [sp, #16]
 800b2b4:	2307      	movs	r3, #7
 800b2b6:	9303      	str	r3, [sp, #12]
 800b2b8:	2307      	movs	r3, #7
 800b2ba:	9302      	str	r3, [sp, #8]
 800b2bc:	2302      	movs	r3, #2
 800b2be:	9301      	str	r3, [sp, #4]
 800b2c0:	2308      	movs	r3, #8
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	2304      	movs	r3, #4
 800b2c6:	2202      	movs	r2, #2
 800b2c8:	2108      	movs	r1, #8
 800b2ca:	2004      	movs	r0, #4
 800b2cc:	f00a f96c 	bl	80155a8 <VL53L1_init_zone_config_structure>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d6:	785b      	ldrb	r3, [r3, #1]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800b2e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d108      	bne.n	800b2fa <VL53L1_preset_mode_histogram_multizone+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ea:	3302      	adds	r3, #2
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	6879      	ldr	r1, [r7, #4]
 800b2f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2f2:	f003 f873 	bl	800e3dc <VL53L1_set_histogram_multizone_initial_bin_config>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	75fb      	strb	r3, [r7, #23]
				pzone_cfg,
				phistogram,
				&(pzone_cfg->multizone_hist_cfg));
		}

		VL53L1_copy_hist_cfg_to_static_cfg(
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fc:	9300      	str	r3, [sp, #0]
 800b2fe:	6a3b      	ldr	r3, [r7, #32]
 800b300:	683a      	ldr	r2, [r7, #0]
 800b302:	68b9      	ldr	r1, [r7, #8]
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 f8d0 	bl	800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b30a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3718      	adds	r7, #24
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <VL53L1_preset_mode_histogram_multizone_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b08c      	sub	sp, #48	; 0x30
 800b31a:	af06      	add	r7, sp, #24
 800b31c:	60f8      	str	r0, [r7, #12]
 800b31e:	60b9      	str	r1, [r7, #8]
 800b320:	607a      	str	r2, [r7, #4]
 800b322:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b324:	2300      	movs	r3, #0
 800b326:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800b328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32a:	9304      	str	r3, [sp, #16]
 800b32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32e:	9303      	str	r3, [sp, #12]
 800b330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b332:	9302      	str	r3, [sp, #8]
 800b334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b336:	9301      	str	r3, [sp, #4]
 800b338:	6a3b      	ldr	r3, [r7, #32]
 800b33a:	9300      	str	r3, [sp, #0]
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	68b9      	ldr	r1, [r7, #8]
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f7ff fc8e 	bl	800ac64 <VL53L1_preset_mode_histogram_short_range>
 800b348:	4603      	mov	r3, r0
 800b34a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b34c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d12c      	bne.n	800b3ae <VL53L1_preset_mode_histogram_multizone_short_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800b354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b356:	9304      	str	r3, [sp, #16]
 800b358:	2307      	movs	r3, #7
 800b35a:	9303      	str	r3, [sp, #12]
 800b35c:	2307      	movs	r3, #7
 800b35e:	9302      	str	r3, [sp, #8]
 800b360:	2302      	movs	r3, #2
 800b362:	9301      	str	r3, [sp, #4]
 800b364:	2308      	movs	r3, #8
 800b366:	9300      	str	r3, [sp, #0]
 800b368:	2304      	movs	r3, #4
 800b36a:	2202      	movs	r2, #2
 800b36c:	2108      	movs	r1, #8
 800b36e:	2004      	movs	r0, #4
 800b370:	f00a f91a 	bl	80155a8 <VL53L1_init_zone_config_structure>
 800b374:	4603      	mov	r3, r0
 800b376:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800b378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37a:	785b      	ldrb	r3, [r3, #1]
 800b37c:	3301      	adds	r3, #1
 800b37e:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800b384:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d108      	bne.n	800b39e <VL53L1_preset_mode_histogram_multizone_short_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800b38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38e:	3302      	adds	r3, #2
 800b390:	461a      	mov	r2, r3
 800b392:	6879      	ldr	r1, [r7, #4]
 800b394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b396:	f003 f821 	bl	800e3dc <VL53L1_set_histogram_multizone_initial_bin_config>
 800b39a:	4603      	mov	r3, r0
 800b39c:	75fb      	strb	r3, [r7, #23]
			);
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800b39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	6a3b      	ldr	r3, [r7, #32]
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	68b9      	ldr	r1, [r7, #8]
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 f87e 	bl	800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b3ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3718      	adds	r7, #24
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <VL53L1_preset_mode_histogram_multizone_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b08c      	sub	sp, #48	; 0x30
 800b3be:	af06      	add	r7, sp, #24
 800b3c0:	60f8      	str	r0, [r7, #12]
 800b3c2:	60b9      	str	r1, [r7, #8]
 800b3c4:	607a      	str	r2, [r7, #4]
 800b3c6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ce:	9304      	str	r3, [sp, #16]
 800b3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d2:	9303      	str	r3, [sp, #12]
 800b3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d6:	9302      	str	r3, [sp, #8]
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3da:	9301      	str	r3, [sp, #4]
 800b3dc:	6a3b      	ldr	r3, [r7, #32]
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	68b9      	ldr	r1, [r7, #8]
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	f7ff f9ee 	bl	800a7c8 <VL53L1_preset_mode_histogram_long_range>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b3f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d12c      	bne.n	800b452 <VL53L1_preset_mode_histogram_multizone_long_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800b3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fa:	9304      	str	r3, [sp, #16]
 800b3fc:	2307      	movs	r3, #7
 800b3fe:	9303      	str	r3, [sp, #12]
 800b400:	2307      	movs	r3, #7
 800b402:	9302      	str	r3, [sp, #8]
 800b404:	2302      	movs	r3, #2
 800b406:	9301      	str	r3, [sp, #4]
 800b408:	2308      	movs	r3, #8
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	2304      	movs	r3, #4
 800b40e:	2202      	movs	r2, #2
 800b410:	2108      	movs	r1, #8
 800b412:	2004      	movs	r0, #4
 800b414:	f00a f8c8 	bl	80155a8 <VL53L1_init_zone_config_structure>
 800b418:	4603      	mov	r3, r0
 800b41a:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800b41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41e:	785b      	ldrb	r3, [r3, #1]
 800b420:	3301      	adds	r3, #1
 800b422:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800b428:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d108      	bne.n	800b442 <VL53L1_preset_mode_histogram_multizone_long_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800b430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b432:	3302      	adds	r3, #2
 800b434:	461a      	mov	r2, r3
 800b436:	6879      	ldr	r1, [r7, #4]
 800b438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b43a:	f002 ffcf 	bl	800e3dc <VL53L1_set_histogram_multizone_initial_bin_config>
 800b43e:	4603      	mov	r3, r0
 800b440:	75fb      	strb	r3, [r7, #23]
				&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800b442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	6a3b      	ldr	r3, [r7, #32]
 800b448:	683a      	ldr	r2, [r7, #0]
 800b44a:	68b9      	ldr	r1, [r7, #8]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 f82c 	bl	800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>
			pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b452:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3718      	adds	r7, #24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b08a      	sub	sp, #40	; 0x28
 800b462:	af04      	add	r7, sp, #16
 800b464:	60f8      	str	r0, [r7, #12]
 800b466:	60b9      	str	r1, [r7, #8]
 800b468:	607a      	str	r2, [r7, #4]
 800b46a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b46c:	2300      	movs	r3, #0
 800b46e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b472:	9303      	str	r3, [sp, #12]
 800b474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b476:	9302      	str	r3, [sp, #8]
 800b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47a:	9301      	str	r3, [sp, #4]
 800b47c:	6a3b      	ldr	r3, [r7, #32]
 800b47e:	9300      	str	r3, [sp, #0]
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	68b9      	ldr	r1, [r7, #8]
 800b486:	68f8      	ldr	r0, [r7, #12]
 800b488:	f7fe fb9e 	bl	8009bc8 <VL53L1_preset_mode_standard_ranging>
 800b48c:	4603      	mov	r3, r0
 800b48e:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 800b490:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d102      	bne.n	800b49e <VL53L1_preset_mode_olt+0x40>

		psystem->system__stream_count_ctrl = 0x01;
 800b498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49a:	2201      	movs	r2, #1
 800b49c:	705a      	strb	r2, [r3, #1]

	LOG_FUNCTION_END(status);

	return status;
 800b49e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3718      	adds	r7, #24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 800b4aa:	b480      	push	{r7}
 800b4ac:	b085      	sub	sp, #20
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	60f8      	str	r0, [r7, #12]
 800b4b2:	60b9      	str	r1, [r7, #8]
 800b4b4:	607a      	str	r2, [r7, #4]
 800b4b6:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	79db      	ldrb	r3, [r3, #7]
 800b4ec:	b29b      	uxth	r3, r3
				<< 8)
 800b4ee:	021b      	lsls	r3, r3, #8
 800b4f0:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	7a1b      	ldrb	r3, [r3, #8]
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	4413      	add	r3, r2
 800b4fa:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	785b      	ldrb	r3, [r3, #1]
 800b534:	b29b      	uxth	r3, r3
				<< 8)
 800b536:	021b      	lsls	r3, r3, #8
 800b538:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	789b      	ldrb	r3, [r3, #2]
 800b53e:	b29b      	uxth	r3, r3
 800b540:	4413      	add	r3, r2
 800b542:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	78db      	ldrb	r3, [r3, #3]
 800b54c:	b29b      	uxth	r3, r3
				<< 8)
 800b54e:	021b      	lsls	r3, r3, #8
 800b550:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	791b      	ldrb	r3, [r3, #4]
 800b556:	b29b      	uxth	r3, r3
 800b558:	4413      	add	r3, r2
 800b55a:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 800b588:	bf00      	nop
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <VL53L1_copy_hist_bins_to_static_cfg>:

void VL53L1_copy_hist_bins_to_static_cfg(
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_timing_config_t    *ptiming)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	79db      	ldrb	r3, [r3, #7]
 800b5d4:	b29b      	uxth	r3, r3
				<< 8)
 800b5d6:	021b      	lsls	r3, r3, #8
 800b5d8:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	7a1b      	ldrb	r3, [r3, #8]
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	4413      	add	r3, r2
 800b5e2:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	785b      	ldrb	r3, [r3, #1]
 800b614:	b29b      	uxth	r3, r3
				<< 8)
 800b616:	021b      	lsls	r3, r3, #8
 800b618:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	789b      	ldrb	r3, [r3, #2]
 800b61e:	b29b      	uxth	r3, r3
 800b620:	4413      	add	r3, r2
 800b622:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	78db      	ldrb	r3, [r3, #3]
 800b62c:	b29b      	uxth	r3, r3
				<< 8)
 800b62e:	021b      	lsls	r3, r3, #8
 800b630:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	791b      	ldrb	r3, [r3, #4]
 800b636:	b29b      	uxth	r3, r3
 800b638:	4413      	add	r3, r2
 800b63a:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 800b650:	bf00      	nop
 800b652:	3714      	adds	r7, #20
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b08c      	sub	sp, #48	; 0x30
 800b660:	af06      	add	r7, sp, #24
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
 800b668:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b66a:	2300      	movs	r3, #0
 800b66c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800b66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b670:	9304      	str	r3, [sp, #16]
 800b672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b674:	9303      	str	r3, [sp, #12]
 800b676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b678:	9302      	str	r3, [sp, #8]
 800b67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67c:	9301      	str	r3, [sp, #4]
 800b67e:	6a3b      	ldr	r3, [r7, #32]
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	68b9      	ldr	r1, [r7, #8]
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f7fe fe64 	bl	800a356 <VL53L1_preset_mode_histogram_ranging>
 800b68e:	4603      	mov	r3, r0
 800b690:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b692:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d10a      	bne.n	800b6b0 <VL53L1_preset_mode_histogram_ranging_ref+0x54>



		phistogram->histogram_config__spad_array_selection = 0x01;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2201      	movs	r2, #1
 800b69e:	701a      	strb	r2, [r3, #0]



		VL53L1_copy_hist_cfg_to_static_cfg(
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	6a3b      	ldr	r3, [r7, #32]
 800b6a6:	683a      	ldr	r2, [r7, #0]
 800b6a8:	68b9      	ldr	r1, [r7, #8]
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f7ff fefd 	bl	800b4aa <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b6b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3718      	adds	r7, #24
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	3318      	adds	r3, #24
 800b6c8:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2230      	movs	r2, #48	; 0x30
 800b6de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f44f 523f 	mov.w	r2, #12224	; 0x2fc0
 800b6e8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b6ea:	bf00      	nop
 800b6ec:	3714      	adds	r7, #20
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr

0800b6f6 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b085      	sub	sp, #20
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	460b      	mov	r3, r1
 800b700:	70fb      	strb	r3, [r7, #3]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	3318      	adds	r3, #24
 800b706:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	332c      	adds	r3, #44	; 0x2c
 800b70c:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	78fa      	ldrb	r2, [r7, #3]
 800b712:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	2200      	movs	r2, #0
 800b718:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	2202      	movs	r2, #2
 800b71e:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	2200      	movs	r2, #0
 800b724:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	2200      	movs	r2, #0
 800b72a:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	78fa      	ldrb	r2, [r7, #3]
 800b730:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2200      	movs	r2, #0
 800b736:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	2202      	movs	r2, #2
 800b73c:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	2200      	movs	r2, #0
 800b742:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	2200      	movs	r2, #0
 800b748:	735a      	strb	r2, [r3, #13]

}
 800b74a:	bf00      	nop
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
	...

0800b758 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]


	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800b760:	2300      	movs	r3, #0
 800b762:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	3318      	adds	r3, #24
 800b768:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	332c      	adds	r3, #44	; 0x2c
 800b76e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800b776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d115      	bne.n	800b7aa <VL53L1_update_ll_driver_rd_state+0x52>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2203      	movs	r2, #3
 800b782:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2200      	movs	r2, #0
 800b788:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2200      	movs	r2, #0
 800b78e:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2200      	movs	r2, #0
 800b794:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2202      	movs	r2, #2
 800b79a:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	735a      	strb	r2, [r3, #13]
 800b7a8:	e0be      	b.n	800b928 <VL53L1_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	7a1b      	ldrb	r3, [r3, #8]
 800b7ae:	2bff      	cmp	r3, #255	; 0xff
 800b7b0:	d103      	bne.n	800b7ba <VL53L1_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2280      	movs	r2, #128	; 0x80
 800b7b6:	721a      	strb	r2, [r3, #8]
 800b7b8:	e005      	b.n	800b7c6 <VL53L1_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	7a1b      	ldrb	r3, [r3, #8]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	b2da      	uxtb	r2, r3
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	721a      	strb	r2, [r3, #8]


		status = VL53L1_update_internal_stream_counters(Dev,
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	7a19      	ldrb	r1, [r3, #8]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f103 0209 	add.w	r2, r3, #9
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	330a      	adds	r3, #10
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f002 fdc2 	bl	800e35e <VL53L1_update_internal_stream_counters>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	7adb      	ldrb	r3, [r3, #11]
 800b7e2:	f083 0302 	eor.w	r3, r3, #2
 800b7e6:	b2da      	uxtb	r2, r3
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	79db      	ldrb	r3, [r3, #7]
 800b7f0:	3b03      	subs	r3, #3
 800b7f2:	2b05      	cmp	r3, #5
 800b7f4:	f200 8082 	bhi.w	800b8fc <VL53L1_update_ll_driver_rd_state+0x1a4>
 800b7f8:	a201      	add	r2, pc, #4	; (adr r2, 800b800 <VL53L1_update_ll_driver_rd_state+0xa8>)
 800b7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7fe:	bf00      	nop
 800b800:	0800b819 	.word	0x0800b819
 800b804:	0800b8fd 	.word	0x0800b8fd
 800b808:	0800b8fd 	.word	0x0800b8fd
 800b80c:	0800b86b 	.word	0x0800b86b
 800b810:	0800b8a1 	.word	0x0800b8a1
 800b814:	0800b8cb 	.word	0x0800b8cb

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	f893 33a2 	ldrb.w	r3, [r3, #930]	; 0x3a2
 800b81e:	f003 0302 	and.w	r3, r3, #2
 800b822:	2b00      	cmp	r3, #0
 800b824:	dd03      	ble.n	800b82e <VL53L1_update_ll_driver_rd_state+0xd6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2206      	movs	r2, #6
 800b82a:	71da      	strb	r2, [r3, #7]
 800b82c:	e00d      	b.n	800b84a <VL53L1_update_ll_driver_rd_state+0xf2>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800b838:	429a      	cmp	r2, r3
 800b83a:	d303      	bcc.n	800b844 <VL53L1_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2208      	movs	r2, #8
 800b840:	71da      	strb	r2, [r3, #7]
 800b842:	e002      	b.n	800b84a <VL53L1_update_ll_driver_rd_state+0xf2>
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2207      	movs	r2, #7
 800b848:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2200      	movs	r2, #0
 800b84e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2200      	movs	r2, #0
 800b85a:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2200      	movs	r2, #0
 800b860:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2200      	movs	r2, #0
 800b866:	735a      	strb	r2, [r3, #13]

			break;
 800b868:	e05e      	b.n	800b928 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2200      	movs	r2, #0
 800b874:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2200      	movs	r2, #0
 800b87a:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2200      	movs	r2, #0
 800b880:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d303      	bcc.n	800b898 <VL53L1_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2208      	movs	r2, #8
 800b894:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800b896:	e047      	b.n	800b928 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2207      	movs	r2, #7
 800b89c:	71da      	strb	r2, [r3, #7]
			break;
 800b89e:	e043      	b.n	800b928 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	7b5b      	ldrb	r3, [r3, #13]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	b2da      	uxtb	r2, r3
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d303      	bcc.n	800b8c2 <VL53L1_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2208      	movs	r2, #8
 800b8be:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800b8c0:	e032      	b.n	800b928 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2207      	movs	r2, #7
 800b8c6:	71da      	strb	r2, [r3, #7]
			break;
 800b8c8:	e02e      	b.n	800b928 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	7b1b      	ldrb	r3, [r3, #12]
 800b8d4:	f083 0301 	eor.w	r3, r3, #1
 800b8d8:	b2da      	uxtb	r2, r3
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d303      	bcc.n	800b8f4 <VL53L1_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2208      	movs	r2, #8
 800b8f0:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800b8f2:	e019      	b.n	800b928 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2207      	movs	r2, #7
 800b8f8:	71da      	strb	r2, [r3, #7]
			break;
 800b8fa:	e015      	b.n	800b928 <VL53L1_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2203      	movs	r2, #3
 800b900:	71da      	strb	r2, [r3, #7]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2200      	movs	r2, #0
 800b906:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2200      	movs	r2, #0
 800b90c:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2202      	movs	r2, #2
 800b918:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2200      	movs	r2, #0
 800b91e:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	735a      	strb	r2, [r3, #13]
			break;
 800b926:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800b928:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3718      	adds	r7, #24
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800b934:	b480      	push	{r7}
 800b936:	b08d      	sub	sp, #52	; 0x34
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800b93c:	2300      	movs	r3, #0
 800b93e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t  *pdev =
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	3318      	adds	r3, #24
 800b946:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800b94e:	3308      	adds	r3, #8
 800b950:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800b952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b954:	332c      	adds	r3, #44	; 0x2c
 800b956:	623b      	str	r3, [r7, #32]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800b958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95a:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800b95e:	61fb      	str	r3, [r7, #28]
	VL53L1_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800b960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b962:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800b966:	61bb      	str	r3, [r7, #24]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800b96e:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800b970:	2300      	movs	r3, #0
 800b972:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800b974:	2300      	movs	r3, #0
 800b976:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800b978:	2300      	movs	r3, #0
 800b97a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 800b97e:	2300      	movs	r3, #0
 800b980:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800b982:	2300      	movs	r3, #0
 800b984:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800b986:	2300      	movs	r3, #0
 800b988:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800b98e:	f003 031f 	and.w	r3, r3, #31
 800b992:	74fb      	strb	r3, [r7, #19]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	78db      	ldrb	r3, [r3, #3]
 800b998:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 800b99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99c:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800b9a0:	f003 0302 	and.w	r3, r3, #2
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	bf14      	ite	ne
 800b9a8:	2301      	movne	r3, #1
 800b9aa:	2300      	moveq	r3, #0
 800b9ac:	b2db      	uxtb	r3, r3
	histogram_mode =
 800b9ae:	747b      	strb	r3, [r7, #17]
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800b9b4:	111b      	asrs	r3, r3, #4
 800b9b6:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800b9b8:	f003 0302 	and.w	r3, r3, #2
 800b9bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 800b9c0:	7c7b      	ldrb	r3, [r7, #17]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d008      	beq.n	800b9d8 <VL53L1_check_ll_driver_rd_state+0xa4>
		device_gph_id = (phist_data->result__interrupt_status &
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800b9cc:	111b      	asrs	r3, r3, #4
 800b9ce:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800b9d0:	f003 0302 	and.w	r3, r3, #2
 800b9d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800b9de:	f003 0320 	and.w	r3, r3, #32
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d04e      	beq.n	800ba84 <VL53L1_check_ll_driver_rd_state+0x150>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800b9e6:	6a3b      	ldr	r3, [r7, #32]
 800b9e8:	79db      	ldrb	r3, [r3, #7]
 800b9ea:	2b06      	cmp	r3, #6
 800b9ec:	d109      	bne.n	800ba02 <VL53L1_check_ll_driver_rd_state+0xce>
		VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800b9ee:	7c7b      	ldrb	r3, [r7, #17]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d14a      	bne.n	800ba8a <VL53L1_check_ll_driver_rd_state+0x156>
			if (device_range_status !=
 800b9f4:	7cfb      	ldrb	r3, [r7, #19]
 800b9f6:	2b12      	cmp	r3, #18
 800b9f8:	d047      	beq.n	800ba8a <VL53L1_check_ll_driver_rd_state+0x156>
			VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800b9fa:	23ef      	movs	r3, #239	; 0xef
 800b9fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ba00:	e043      	b.n	800ba8a <VL53L1_check_ll_driver_rd_state+0x156>
				VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800ba02:	6a3b      	ldr	r3, [r7, #32]
 800ba04:	7a1b      	ldrb	r3, [r3, #8]
 800ba06:	7cba      	ldrb	r2, [r7, #18]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d002      	beq.n	800ba12 <VL53L1_check_ll_driver_rd_state+0xde>
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800ba0c:	23ee      	movs	r3, #238	; 0xee
 800ba0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800ba12:	6a3b      	ldr	r3, [r7, #32]
 800ba14:	7adb      	ldrb	r3, [r3, #11]
 800ba16:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d002      	beq.n	800ba24 <VL53L1_check_ll_driver_rd_state+0xf0>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800ba1e:	23ed      	movs	r3, #237	; 0xed
 800ba20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_stream_count;
 800ba24:	6a3b      	ldr	r3, [r7, #32]
 800ba26:	7b5b      	ldrb	r3, [r3, #13]
 800ba28:	4619      	mov	r1, r3
		expected_stream_count =
 800ba2a:	697a      	ldr	r2, [r7, #20]
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	440b      	add	r3, r1
 800ba32:	005b      	lsls	r3, r3, #1
 800ba34:	4413      	add	r3, r2
 800ba36:	3302      	adds	r3, #2
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id;
 800ba3c:	6a3b      	ldr	r3, [r7, #32]
 800ba3e:	7b5b      	ldrb	r3, [r3, #13]
 800ba40:	4619      	mov	r1, r3
		expected_gph_id =
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	460b      	mov	r3, r1
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	440b      	add	r3, r1
 800ba4a:	005b      	lsls	r3, r3, #1
 800ba4c:	4413      	add	r3, r2
 800ba4e:	3303      	adds	r3, #3
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800ba54:	7c3a      	ldrb	r2, [r7, #16]
 800ba56:	7cbb      	ldrb	r3, [r7, #18]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d00a      	beq.n	800ba72 <VL53L1_check_ll_driver_rd_state+0x13e>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 800ba5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d102      	bne.n	800ba6c <VL53L1_check_ll_driver_rd_state+0x138>
 800ba66:	7cbb      	ldrb	r3, [r7, #18]
 800ba68:	2bff      	cmp	r3, #255	; 0xff
 800ba6a:	d002      	beq.n	800ba72 <VL53L1_check_ll_driver_rd_state+0x13e>
				(device_stream_count == 255)))
				status =
 800ba6c:	23ec      	movs	r3, #236	; 0xec
 800ba6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800ba72:	7bfa      	ldrb	r2, [r7, #15]
 800ba74:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d005      	beq.n	800ba88 <VL53L1_check_ll_driver_rd_state+0x154>
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800ba7c:	23eb      	movs	r3, #235	; 0xeb
 800ba7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ba82:	e002      	b.n	800ba8a <VL53L1_check_ll_driver_rd_state+0x156>
		goto ENDFUNC;
 800ba84:	bf00      	nop
 800ba86:	e000      	b.n	800ba8a <VL53L1_check_ll_driver_rd_state+0x156>

	}



ENDFUNC:
 800ba88:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800ba8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3734      	adds	r7, #52	; 0x34
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr

0800ba9a <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b088      	sub	sp, #32
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800baa2:	2300      	movs	r3, #0
 800baa4:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	3318      	adds	r3, #24
 800baaa:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800bab2:	3308      	adds	r3, #8
 800bab4:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800bab6:	69bb      	ldr	r3, [r7, #24]
 800bab8:	332c      	adds	r3, #44	; 0x2c
 800baba:	613b      	str	r3, [r7, #16]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800bac2:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800baca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d11b      	bne.n	800bb0a <VL53L1_update_ll_driver_cfg_state+0x70>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	2203      	movs	r2, #3
 800bad6:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	2200      	movs	r2, #0
 800badc:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	2200      	movs	r2, #0
 800bae2:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	2200      	movs	r2, #0
 800bae8:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	2202      	movs	r2, #2
 800baee:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	2200      	movs	r2, #0
 800baf4:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	2200      	movs	r2, #0
 800bafa:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800bafc:	2300      	movs	r3, #0
 800bafe:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800bb00:	2300      	movs	r3, #0
 800bb02:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800bb04:	2300      	movs	r3, #0
 800bb06:	773b      	strb	r3, [r7, #28]
 800bb08:	e0b1      	b.n	800bc6e <VL53L1_update_ll_driver_cfg_state+0x1d4>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	791b      	ldrb	r3, [r3, #4]
 800bb0e:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	799b      	ldrb	r3, [r3, #6]
 800bb14:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	785b      	ldrb	r3, [r3, #1]
 800bb1a:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	785b      	ldrb	r3, [r3, #1]
 800bb20:	2bff      	cmp	r3, #255	; 0xff
 800bb22:	d103      	bne.n	800bb2c <VL53L1_update_ll_driver_cfg_state+0x92>
			pstate->cfg_stream_count = 0x80;
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	2280      	movs	r2, #128	; 0x80
 800bb28:	705a      	strb	r2, [r3, #1]
 800bb2a:	e005      	b.n	800bb38 <VL53L1_update_ll_driver_cfg_state+0x9e>
		else
			pstate->cfg_stream_count++;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	785b      	ldrb	r3, [r3, #1]
 800bb30:	3301      	adds	r3, #1
 800bb32:	b2da      	uxtb	r2, r3
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	705a      	strb	r2, [r3, #1]


		status = VL53L1_update_internal_stream_counters(
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	7859      	ldrb	r1, [r3, #1]
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	1c9a      	adds	r2, r3, #2
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	3303      	adds	r3, #3
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f002 fc0a 	bl	800e35e <VL53L1_update_internal_stream_counters>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	791b      	ldrb	r3, [r3, #4]
 800bb52:	f083 0302 	eor.w	r3, r3, #2
 800bb56:	b2da      	uxtb	r2, r3
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	2b05      	cmp	r3, #5
 800bb62:	d053      	beq.n	800bc0c <VL53L1_update_ll_driver_cfg_state+0x172>
 800bb64:	2b05      	cmp	r3, #5
 800bb66:	dc69      	bgt.n	800bc3c <VL53L1_update_ll_driver_cfg_state+0x1a2>
 800bb68:	2b03      	cmp	r3, #3
 800bb6a:	d002      	beq.n	800bb72 <VL53L1_update_ll_driver_cfg_state+0xd8>
 800bb6c:	2b04      	cmp	r3, #4
 800bb6e:	d02d      	beq.n	800bbcc <VL53L1_update_ll_driver_cfg_state+0x132>
 800bb70:	e064      	b.n	800bc3c <VL53L1_update_ll_driver_cfg_state+0x1a2>

		case VL53L1_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	2201      	movs	r2, #1
 800bb76:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d909      	bls.n	800bb9a <VL53L1_update_ll_driver_cfg_state+0x100>
				pstate->cfg_zone_id = 0;
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	795b      	ldrb	r3, [r3, #5]
 800bb90:	f083 0301 	eor.w	r3, r3, #1
 800bb94:	b2da      	uxtb	r2, r3
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d106      	bne.n	800bbb8 <VL53L1_update_ll_driver_cfg_state+0x11e>
				pstate->cfg_internal_stream_count = 1;
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	2201      	movs	r2, #1
 800bbae:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	70da      	strb	r2, [r3, #3]
 800bbb6:	e005      	b.n	800bbc4 <VL53L1_update_ll_driver_cfg_state+0x12a>
			} else {
				pstate->cfg_internal_stream_count = 0;
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	2204      	movs	r2, #4
 800bbc8:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800bbca:	e050      	b.n	800bc6e <VL53L1_update_ll_driver_cfg_state+0x1d4>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	799b      	ldrb	r3, [r3, #6]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d940      	bls.n	800bc68 <VL53L1_update_ll_driver_cfg_state+0x1ce>

				pstate->cfg_zone_id = 0;
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	795b      	ldrb	r3, [r3, #5]
 800bbf0:	f083 0301 	eor.w	r3, r3, #1
 800bbf4:	b2da      	uxtb	r2, r3
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d031      	beq.n	800bc68 <VL53L1_update_ll_driver_cfg_state+0x1ce>
					pstate->cfg_device_state =
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	2205      	movs	r2, #5
 800bc08:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800bc0a:	e02d      	b.n	800bc68 <VL53L1_update_ll_driver_cfg_state+0x1ce>

		case VL53L1_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	799b      	ldrb	r3, [r3, #6]
 800bc10:	3301      	adds	r3, #1
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d922      	bls.n	800bc6c <VL53L1_update_ll_driver_cfg_state+0x1d2>
				pstate->cfg_zone_id = 0;
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	795b      	ldrb	r3, [r3, #5]
 800bc30:	f083 0301 	eor.w	r3, r3, #1
 800bc34:	b2da      	uxtb	r2, r3
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	715a      	strb	r2, [r3, #5]
			}
			break;
 800bc3a:	e017      	b.n	800bc6c <VL53L1_update_ll_driver_cfg_state+0x1d2>

		default:
			pstate->cfg_device_state =
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	2203      	movs	r2, #3
 800bc40:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	2200      	movs	r2, #0
 800bc46:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	2200      	movs	r2, #0
 800bc52:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	2202      	movs	r2, #2
 800bc58:	711a      	strb	r2, [r3, #4]
					VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	2200      	movs	r2, #0
 800bc64:	719a      	strb	r2, [r3, #6]
			break;
 800bc66:	e002      	b.n	800bc6e <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800bc68:	bf00      	nop
 800bc6a:	e000      	b.n	800bc6e <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800bc6c:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d11d      	bne.n	800bcb4 <VL53L1_update_ll_driver_cfg_state+0x21a>

		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800bc78:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800bc7a:	7f3b      	ldrb	r3, [r7, #28]
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	b2d8      	uxtb	r0, r3
 800bc80:	68f9      	ldr	r1, [r7, #12]
 800bc82:	4613      	mov	r3, r2
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	4413      	add	r3, r2
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	440b      	add	r3, r1
 800bc8c:	3302      	adds	r3, #2
 800bc8e:	4602      	mov	r2, r0
 800bc90:	701a      	strb	r2, [r3, #0]

		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	7b5b      	ldrb	r3, [r3, #13]
 800bc96:	4619      	mov	r1, r3
 800bc98:	7f7b      	ldrb	r3, [r7, #29]
 800bc9a:	f083 0302 	eor.w	r3, r3, #2
 800bc9e:	b2d8      	uxtb	r0, r3
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	460b      	mov	r3, r1
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	440b      	add	r3, r1
 800bca8:	005b      	lsls	r3, r3, #1
 800bcaa:	4413      	add	r3, r2
 800bcac:	3303      	adds	r3, #3
 800bcae:	4602      	mov	r2, r0
 800bcb0:	701a      	strb	r2, [r3, #0]
 800bcb2:	e013      	b.n	800bcdc <VL53L1_update_ll_driver_cfg_state+0x242>
			prev_cfg_gph_id ^ VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800bcb4:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800bcb6:	68f9      	ldr	r1, [r7, #12]
 800bcb8:	4613      	mov	r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	4413      	add	r3, r2
 800bcbe:	005b      	lsls	r3, r3, #1
 800bcc0:	440b      	add	r3, r1
 800bcc2:	3302      	adds	r3, #2
 800bcc4:	7f3a      	ldrb	r2, [r7, #28]
 800bcc6:	701a      	strb	r2, [r3, #0]
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 800bcc8:	7fba      	ldrb	r2, [r7, #30]
 800bcca:	68f9      	ldr	r1, [r7, #12]
 800bccc:	4613      	mov	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	4413      	add	r3, r2
 800bcd2:	005b      	lsls	r3, r3, #1
 800bcd4:	440b      	add	r3, r1
 800bcd6:	3303      	adds	r3, #3
 800bcd8:	7f7a      	ldrb	r2, [r7, #29]
 800bcda:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800bcdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3720      	adds	r7, #32
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	7c1a      	ldrb	r2, [r3, #16]
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	7c52      	ldrb	r2, [r2, #17]
 800bd02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	3302      	adds	r3, #2
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	7c92      	ldrb	r2, [r2, #18]
 800bd0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	3303      	adds	r3, #3
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	7cd2      	ldrb	r2, [r2, #19]
 800bd16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	7d12      	ldrb	r2, [r2, #20]
 800bd20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	3305      	adds	r3, #5
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	7d52      	ldrb	r2, [r2, #21]
 800bd2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	3306      	adds	r3, #6
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	7d92      	ldrb	r2, [r2, #22]
 800bd34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	3307      	adds	r3, #7
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	7dd2      	ldrb	r2, [r2, #23]
 800bd3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	3308      	adds	r3, #8
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	7e12      	ldrb	r2, [r2, #24]
 800bd48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	3309      	adds	r3, #9
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	7e52      	ldrb	r2, [r2, #25]
 800bd52:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	330a      	adds	r3, #10
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	7e92      	ldrb	r2, [r2, #26]
 800bd5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	330b      	adds	r3, #11
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	7ed2      	ldrb	r2, [r2, #27]
 800bd66:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	330c      	adds	r3, #12
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	7f12      	ldrb	r2, [r2, #28]
 800bd70:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	330d      	adds	r3, #13
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	7f52      	ldrb	r2, [r2, #29]
 800bd7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	330e      	adds	r3, #14
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	7f92      	ldrb	r2, [r2, #30]
 800bd84:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	330f      	adds	r3, #15
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	7fd2      	ldrb	r2, [r2, #31]
 800bd8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	3310      	adds	r3, #16
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	f892 2020 	ldrb.w	r2, [r2, #32]
 800bd9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	3311      	adds	r3, #17
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800bda6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	3312      	adds	r3, #18
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800bdb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	3313      	adds	r3, #19
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800bdbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	3314      	adds	r3, #20
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800bdca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	3315      	adds	r3, #21
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800bdd6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	3316      	adds	r3, #22
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800bde2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	3317      	adds	r3, #23
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800bdee:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	3318      	adds	r3, #24
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800bdfa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	3319      	adds	r3, #25
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800be06:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	331a      	adds	r3, #26
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800be12:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	331b      	adds	r3, #27
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800be1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	331c      	adds	r3, #28
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800be2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	331d      	adds	r3, #29
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800be36:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	331e      	adds	r3, #30
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800be42:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	331f      	adds	r3, #31
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800be4e:	701a      	strb	r2, [r3, #0]
}
 800be50:	bf00      	nop
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <VL53L1_init_system_results>:


void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	22ff      	movs	r2, #255	; 0xff
 800be68:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	22ff      	movs	r2, #255	; 0xff
 800be6e:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	22ff      	movs	r2, #255	; 0xff
 800be74:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	22ff      	movs	r2, #255	; 0xff
 800be7a:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be82:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be8a:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be92:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be9a:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bea2:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beaa:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beb2:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beba:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bec2:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beca:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bed2:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beda:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bee2:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beea:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bef2:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800befa:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf02:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf0a:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf12:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	22ff      	movs	r2, #255	; 0xff
 800bf18:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800bf1c:	bf00      	nop
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53L1_zone_results_t  *pdata)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	4603      	mov	r3, r0
 800bf30:	6039      	str	r1, [r7, #0]
 800bf32:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	2210      	movs	r2, #16
 800bf3c:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	79fa      	ldrb	r2, [r7, #7]
 800bf42:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 800bf44:	2300      	movs	r3, #0
 800bf46:	73fb      	strb	r3, [r7, #15]
 800bf48:	e017      	b.n	800bf7a <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53L1_p_002[z]);
 800bf4a:	7bfa      	ldrb	r2, [r7, #15]
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	011b      	lsls	r3, r3, #4
 800bf50:	4413      	add	r3, r2
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	683a      	ldr	r2, [r7, #0]
 800bf56:	4413      	add	r3, r2
 800bf58:	3304      	adds	r3, #4
 800bf5a:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	2203      	movs	r2, #3
 800bf60:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	2203      	movs	r2, #3
 800bf66:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	2204      	movs	r2, #4
 800bf6c:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	2200      	movs	r2, #0
 800bf72:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 800bf74:	7bfb      	ldrb	r3, [r7, #15]
 800bf76:	3301      	adds	r3, #1
 800bf78:	73fb      	strb	r3, [r7, #15]
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	7bfa      	ldrb	r2, [r7, #15]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d3e2      	bcc.n	800bf4a <V53L1_init_zone_results_structure+0x22>
	}
}
 800bf84:	bf00      	nop
 800bf86:	bf00      	nop
 800bf88:	3714      	adds	r7, #20
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr

0800bf92 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53L1_DEV              Dev)
{
 800bf92:	b480      	push	{r7}
 800bf94:	b087      	sub	sp, #28
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverResults_t  *pres =
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800bfa0:	3308      	adds	r3, #8
 800bfa2:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53L1_MAX_USER_ZONES;
 800bfa8:	2310      	movs	r3, #16
 800bfaa:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800bfb2:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	75fb      	strb	r3, [r7, #23]
 800bfb8:	e016      	b.n	800bfe8 <V53L1_init_zone_dss_configs+0x56>
		pdata->VL53L1_p_002[z].dss_mode =
 800bfba:	7dfa      	ldrb	r2, [r7, #23]
 800bfbc:	68b9      	ldr	r1, [r7, #8]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	4413      	add	r3, r2
 800bfc4:	005b      	lsls	r3, r3, #1
 800bfc6:	440b      	add	r3, r1
 800bfc8:	3304      	adds	r3, #4
 800bfca:	2201      	movs	r2, #1
 800bfcc:	701a      	strb	r2, [r3, #0]
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53L1_p_002[z].dss_requested_effective_spad_count = 0;
 800bfce:	7dfa      	ldrb	r2, [r7, #23]
 800bfd0:	68b9      	ldr	r1, [r7, #8]
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	4413      	add	r3, r2
 800bfd8:	005b      	lsls	r3, r3, #1
 800bfda:	440b      	add	r3, r1
 800bfdc:	3306      	adds	r3, #6
 800bfde:	2200      	movs	r2, #0
 800bfe0:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800bfe2:	7dfb      	ldrb	r3, [r7, #23]
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	75fb      	strb	r3, [r7, #23]
 800bfe8:	7dfa      	ldrb	r2, [r7, #23]
 800bfea:	7bfb      	ldrb	r3, [r7, #15]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d3e4      	bcc.n	800bfba <V53L1_init_zone_dss_configs+0x28>
	}
}
 800bff0:	bf00      	nop
 800bff2:	bf00      	nop
 800bff4:	371c      	adds	r7, #28
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800bffe:	b490      	push	{r4, r7}
 800c000:	b082      	sub	sp, #8
 800c002:	af00      	add	r7, sp, #0
 800c004:	4604      	mov	r4, r0
 800c006:	4608      	mov	r0, r1
 800c008:	4611      	mov	r1, r2
 800c00a:	461a      	mov	r2, r3
 800c00c:	4623      	mov	r3, r4
 800c00e:	71fb      	strb	r3, [r7, #7]
 800c010:	4603      	mov	r3, r0
 800c012:	71bb      	strb	r3, [r7, #6]
 800c014:	460b      	mov	r3, r1
 800c016:	717b      	strb	r3, [r7, #5]
 800c018:	4613      	mov	r3, r2
 800c01a:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800c01c:	79bb      	ldrb	r3, [r7, #6]
 800c01e:	011b      	lsls	r3, r3, #4
 800c020:	b2da      	uxtb	r2, r3
 800c022:	79fb      	ldrb	r3, [r7, #7]
 800c024:	4413      	add	r3, r2
 800c026:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800c028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02a:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800c02c:	793b      	ldrb	r3, [r7, #4]
 800c02e:	011b      	lsls	r3, r3, #4
 800c030:	b2da      	uxtb	r2, r3
 800c032:	797b      	ldrb	r3, [r7, #5]
 800c034:	4413      	add	r3, r2
 800c036:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800c038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03a:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800c03c:	7d3b      	ldrb	r3, [r7, #20]
 800c03e:	011b      	lsls	r3, r3, #4
 800c040:	b2da      	uxtb	r2, r3
 800c042:	7c3b      	ldrb	r3, [r7, #16]
 800c044:	4413      	add	r3, r2
 800c046:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04a:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800c04c:	7f3b      	ldrb	r3, [r7, #28]
 800c04e:	011b      	lsls	r3, r3, #4
 800c050:	b2da      	uxtb	r2, r3
 800c052:	7e3b      	ldrb	r3, [r7, #24]
 800c054:	4413      	add	r3, r2
 800c056:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800c058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05a:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800c05c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c060:	011b      	lsls	r3, r3, #4
 800c062:	b2da      	uxtb	r2, r3
 800c064:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c068:	4413      	add	r3, r2
 800c06a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800c06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06e:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800c070:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c074:	011b      	lsls	r3, r3, #4
 800c076:	b2da      	uxtb	r2, r3
 800c078:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c07c:	4413      	add	r3, r2
 800c07e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800c080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c082:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800c088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08a:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800c08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08e:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800c090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c092:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800c094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c096:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800c09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09e:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a2:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800c0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c0aa:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800c0ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c0b0:	011b      	lsls	r3, r3, #4
 800c0b2:	b2da      	uxtb	r2, r3
 800c0b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c0b8:	4413      	add	r3, r2
 800c0ba:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800c0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0be:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800c0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c0c6:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800c0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800c0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d0:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d4:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d8:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800c0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0dc:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800c0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e0:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e4:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800c0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e8:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800c0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ec:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f0:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800c0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f4:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800c0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f8:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800c0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fc:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800c0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c104:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800c106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c10c:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800c10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c110:	2200      	movs	r2, #0
 800c112:	701a      	strb	r2, [r3, #0]

}
 800c114:	bf00      	nop
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bc90      	pop	{r4, r7}
 800c11c:	4770      	bx	lr

0800c11e <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800c11e:	b490      	push	{r4, r7}
 800c120:	b082      	sub	sp, #8
 800c122:	af00      	add	r7, sp, #0
 800c124:	4604      	mov	r4, r0
 800c126:	4608      	mov	r0, r1
 800c128:	4611      	mov	r1, r2
 800c12a:	461a      	mov	r2, r3
 800c12c:	4623      	mov	r3, r4
 800c12e:	71fb      	strb	r3, [r7, #7]
 800c130:	4603      	mov	r3, r0
 800c132:	71bb      	strb	r3, [r7, #6]
 800c134:	460b      	mov	r3, r1
 800c136:	717b      	strb	r3, [r7, #5]
 800c138:	4613      	mov	r3, r2
 800c13a:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800c13c:	79bb      	ldrb	r3, [r7, #6]
 800c13e:	011b      	lsls	r3, r3, #4
 800c140:	b2da      	uxtb	r2, r3
 800c142:	79fb      	ldrb	r3, [r7, #7]
 800c144:	4413      	add	r3, r2
 800c146:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800c148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14a:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800c14c:	793b      	ldrb	r3, [r7, #4]
 800c14e:	011b      	lsls	r3, r3, #4
 800c150:	b2da      	uxtb	r2, r3
 800c152:	797b      	ldrb	r3, [r7, #5]
 800c154:	4413      	add	r3, r2
 800c156:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800c158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15a:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800c15c:	7d3b      	ldrb	r3, [r7, #20]
 800c15e:	011b      	lsls	r3, r3, #4
 800c160:	b2da      	uxtb	r2, r3
 800c162:	7c3b      	ldrb	r3, [r7, #16]
 800c164:	4413      	add	r3, r2
 800c166:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800c168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16a:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800c16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16e:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800c170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c172:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800c174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c176:	789a      	ldrb	r2, [r3, #2]
 800c178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17a:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800c17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17e:	78da      	ldrb	r2, [r3, #3]
 800c180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c182:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800c184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c186:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800c188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18a:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800c18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18e:	789a      	ldrb	r2, [r3, #2]
 800c190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c192:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800c194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c196:	78da      	ldrb	r2, [r3, #3]
 800c198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19a:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800c19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19e:	791a      	ldrb	r2, [r3, #4]
 800c1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a2:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c1aa:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800c1ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c1b0:	011b      	lsls	r3, r3, #4
 800c1b2:	b2da      	uxtb	r2, r3
 800c1b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c1b8:	4413      	add	r3, r2
 800c1ba:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800c1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1be:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c1c6:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800c1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800c1ce:	7f3b      	ldrb	r3, [r7, #28]
 800c1d0:	011b      	lsls	r3, r3, #4
 800c1d2:	b2da      	uxtb	r2, r3
 800c1d4:	7e3b      	ldrb	r3, [r7, #24]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800c1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1dc:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800c1de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c1e2:	011b      	lsls	r3, r3, #4
 800c1e4:	b2da      	uxtb	r2, r3
 800c1e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800c1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f0:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800c1f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c1f6:	011b      	lsls	r3, r3, #4
 800c1f8:	b2da      	uxtb	r2, r3
 800c1fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c1fe:	4413      	add	r3, r2
 800c200:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800c202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c204:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800c206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c208:	7bda      	ldrb	r2, [r3, #15]
 800c20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20c:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c210:	7c1a      	ldrb	r2, [r3, #16]
 800c212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c214:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800c216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c218:	7c5a      	ldrb	r2, [r3, #17]
 800c21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21c:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800c21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c224:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800c226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c22c:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800c22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c230:	2200      	movs	r2, #0
 800c232:	701a      	strb	r2, [r3, #0]
}
 800c234:	bf00      	nop
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bc90      	pop	{r4, r7}
 800c23c:	4770      	bx	lr

0800c23e <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 800c23e:	b480      	push	{r7}
 800c240:	b087      	sub	sp, #28
 800c242:	af00      	add	r7, sp, #0
 800c244:	60f8      	str	r0, [r7, #12]
 800c246:	460b      	mov	r3, r1
 800c248:	607a      	str	r2, [r7, #4]
 800c24a:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800c24c:	2300      	movs	r3, #0
 800c24e:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_XTALK_HISTO_BINS;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	220c      	movs	r2, #12
 800c266:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800c268:	897b      	ldrh	r3, [r7, #10]
 800c26a:	b2da      	uxtb	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_019                = 0;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800c29e:	2300      	movs	r3, #0
 800c2a0:	82fb      	strh	r3, [r7, #22]
 800c2a2:	e015      	b.n	800c2d0 <VL53L1_init_xtalk_bin_data_struct+0x92>
		if (i < VL53L1_p_024)
 800c2a4:	8afa      	ldrh	r2, [r7, #22]
 800c2a6:	897b      	ldrh	r3, [r7, #10]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d207      	bcs.n	800c2bc <VL53L1_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800c2ac:	8afb      	ldrh	r3, [r7, #22]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	3302      	adds	r3, #2
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	4413      	add	r3, r2
 800c2b6:	68fa      	ldr	r2, [r7, #12]
 800c2b8:	605a      	str	r2, [r3, #4]
 800c2ba:	e006      	b.n	800c2ca <VL53L1_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800c2bc:	8afb      	ldrh	r3, [r7, #22]
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	3302      	adds	r3, #2
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	4413      	add	r3, r2
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800c2ca:	8afb      	ldrh	r3, [r7, #22]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	82fb      	strh	r3, [r7, #22]
 800c2d0:	8afb      	ldrh	r3, [r7, #22]
 800c2d2:	2b0b      	cmp	r3, #11
 800c2d4:	d9e6      	bls.n	800c2a4 <VL53L1_init_xtalk_bin_data_struct+0x66>
	}
}
 800c2d6:	bf00      	nop
 800c2d8:	bf00      	nop
 800c2da:	371c      	adds	r7, #28
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	603a      	str	r2, [r7, #0]
 800c2ee:	80fb      	strh	r3, [r7, #6]
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53L1_p_002 = 0;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800c2fc:	88fb      	ldrh	r3, [r7, #6]
 800c2fe:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800c300:	2300      	movs	r3, #0
 800c302:	81fb      	strh	r3, [r7, #14]
 800c304:	e00e      	b.n	800c324 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800c306:	88ba      	ldrh	r2, [r7, #4]
 800c308:	89fb      	ldrh	r3, [r7, #14]
 800c30a:	1ad3      	subs	r3, r2, r3
 800c30c:	3b01      	subs	r3, #1
 800c30e:	683a      	ldr	r2, [r7, #0]
 800c310:	4413      	add	r3, r2
 800c312:	89ba      	ldrh	r2, [r7, #12]
 800c314:	b2d2      	uxtb	r2, r2
 800c316:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800c318:	89bb      	ldrh	r3, [r7, #12]
 800c31a:	0a1b      	lsrs	r3, r3, #8
 800c31c:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800c31e:	89fb      	ldrh	r3, [r7, #14]
 800c320:	3301      	adds	r3, #1
 800c322:	81fb      	strh	r3, [r7, #14]
 800c324:	89fa      	ldrh	r2, [r7, #14]
 800c326:	88bb      	ldrh	r3, [r7, #4]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d3ec      	bcc.n	800c306 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800c32c:	bf00      	nop
 800c32e:	bf00      	nop
 800c330:	3714      	adds	r7, #20
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr

0800c33a <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c33a:	b480      	push	{r7}
 800c33c:	b085      	sub	sp, #20
 800c33e:	af00      	add	r7, sp, #0
 800c340:	4603      	mov	r3, r0
 800c342:	6039      	str	r1, [r7, #0]
 800c344:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800c346:	2300      	movs	r3, #0
 800c348:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800c34a:	e00a      	b.n	800c362 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800c34c:	89fb      	ldrh	r3, [r7, #14]
 800c34e:	021b      	lsls	r3, r3, #8
 800c350:	b21a      	sxth	r2, r3
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	1c59      	adds	r1, r3, #1
 800c356:	6039      	str	r1, [r7, #0]
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	b21b      	sxth	r3, r3
 800c35c:	4313      	orrs	r3, r2
 800c35e:	b21b      	sxth	r3, r3
 800c360:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800c362:	88fb      	ldrh	r3, [r7, #6]
 800c364:	1e5a      	subs	r2, r3, #1
 800c366:	80fa      	strh	r2, [r7, #6]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1ef      	bne.n	800c34c <VL53L1_i2c_decode_uint16_t+0x12>

	return value;
 800c36c:	89fb      	ldrh	r3, [r7, #14]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3714      	adds	r7, #20
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c37a:	b480      	push	{r7}
 800c37c:	b085      	sub	sp, #20
 800c37e:	af00      	add	r7, sp, #0
 800c380:	4603      	mov	r3, r0
 800c382:	603a      	str	r2, [r7, #0]
 800c384:	80fb      	strh	r3, [r7, #6]
 800c386:	460b      	mov	r3, r1
 800c388:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800c38a:	2300      	movs	r3, #0
 800c38c:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53L1_p_002 = 0;
 800c38e:	2300      	movs	r3, #0
 800c390:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800c392:	88fb      	ldrh	r3, [r7, #6]
 800c394:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800c396:	2300      	movs	r3, #0
 800c398:	81fb      	strh	r3, [r7, #14]
 800c39a:	e00f      	b.n	800c3bc <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800c39c:	88ba      	ldrh	r2, [r7, #4]
 800c39e:	89fb      	ldrh	r3, [r7, #14]
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	3b01      	subs	r3, #1
 800c3a4:	683a      	ldr	r2, [r7, #0]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	89ba      	ldrh	r2, [r7, #12]
 800c3aa:	b2d2      	uxtb	r2, r2
 800c3ac:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800c3ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c3b2:	121b      	asrs	r3, r3, #8
 800c3b4:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800c3b6:	89fb      	ldrh	r3, [r7, #14]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	81fb      	strh	r3, [r7, #14]
 800c3bc:	89fa      	ldrh	r2, [r7, #14]
 800c3be:	88bb      	ldrh	r3, [r7, #4]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d3eb      	bcc.n	800c39c <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800c3c4:	bf00      	nop
 800c3c6:	bf00      	nop
 800c3c8:	3714      	adds	r7, #20
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr

0800c3d2 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c3d2:	b480      	push	{r7}
 800c3d4:	b085      	sub	sp, #20
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	4603      	mov	r3, r0
 800c3da:	6039      	str	r1, [r7, #0]
 800c3dc:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	b25b      	sxtb	r3, r3
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	da0e      	bge.n	800c40a <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800c3ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3f0:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800c3f2:	e00a      	b.n	800c40a <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800c3f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c3f8:	021b      	lsls	r3, r3, #8
 800c3fa:	b21a      	sxth	r2, r3
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	1c59      	adds	r1, r3, #1
 800c400:	6039      	str	r1, [r7, #0]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	b21b      	sxth	r3, r3
 800c406:	4313      	orrs	r3, r2
 800c408:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800c40a:	88fb      	ldrh	r3, [r7, #6]
 800c40c:	1e5a      	subs	r2, r3, #1
 800c40e:	80fa      	strh	r2, [r7, #6]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1ef      	bne.n	800c3f4 <VL53L1_i2c_decode_int16_t+0x22>

	return value;
 800c414:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3714      	adds	r7, #20
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c424:	b480      	push	{r7}
 800c426:	b087      	sub	sp, #28
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	460b      	mov	r3, r1
 800c42e:	607a      	str	r2, [r7, #4]
 800c430:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800c432:	2300      	movs	r3, #0
 800c434:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53L1_p_002 = 0;
 800c436:	2300      	movs	r3, #0
 800c438:	613b      	str	r3, [r7, #16]

	VL53L1_p_002 =  ip_value;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800c43e:	2300      	movs	r3, #0
 800c440:	82fb      	strh	r3, [r7, #22]
 800c442:	e00e      	b.n	800c462 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800c444:	897a      	ldrh	r2, [r7, #10]
 800c446:	8afb      	ldrh	r3, [r7, #22]
 800c448:	1ad3      	subs	r3, r2, r3
 800c44a:	3b01      	subs	r3, #1
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	4413      	add	r3, r2
 800c450:	693a      	ldr	r2, [r7, #16]
 800c452:	b2d2      	uxtb	r2, r2
 800c454:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	0a1b      	lsrs	r3, r3, #8
 800c45a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800c45c:	8afb      	ldrh	r3, [r7, #22]
 800c45e:	3301      	adds	r3, #1
 800c460:	82fb      	strh	r3, [r7, #22]
 800c462:	8afa      	ldrh	r2, [r7, #22]
 800c464:	897b      	ldrh	r3, [r7, #10]
 800c466:	429a      	cmp	r2, r3
 800c468:	d3ec      	bcc.n	800c444 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800c46a:	bf00      	nop
 800c46c:	bf00      	nop
 800c46e:	371c      	adds	r7, #28
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	4603      	mov	r3, r0
 800c480:	6039      	str	r1, [r7, #0]
 800c482:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800c484:	2300      	movs	r3, #0
 800c486:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800c488:	e007      	b.n	800c49a <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	021a      	lsls	r2, r3, #8
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	1c59      	adds	r1, r3, #1
 800c492:	6039      	str	r1, [r7, #0]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	4313      	orrs	r3, r2
 800c498:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800c49a:	88fb      	ldrh	r3, [r7, #6]
 800c49c:	1e5a      	subs	r2, r3, #1
 800c49e:	80fa      	strh	r2, [r7, #6]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d1f2      	bne.n	800c48a <VL53L1_i2c_decode_uint32_t+0x12>

	return value;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3714      	adds	r7, #20
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr

0800c4b2 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c4b2:	b480      	push	{r7}
 800c4b4:	b085      	sub	sp, #20
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	6039      	str	r1, [r7, #0]
 800c4bc:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	b25b      	sxtb	r3, r3
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	da0b      	bge.n	800c4e4 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800c4cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c4d0:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800c4d2:	e007      	b.n	800c4e4 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	021a      	lsls	r2, r3, #8
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	1c59      	adds	r1, r3, #1
 800c4dc:	6039      	str	r1, [r7, #0]
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800c4e4:	88fb      	ldrh	r3, [r7, #6]
 800c4e6:	1e5a      	subs	r2, r3, #1
 800c4e8:	80fa      	strh	r2, [r7, #6]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1f2      	bne.n	800c4d4 <VL53L1_i2c_decode_int32_t+0x22>

	return value;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3714      	adds	r7, #20
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <VL53L1_start_test>:


VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	460b      	mov	r3, r1
 800c506:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c508:	2300      	movs	r3, #0
 800c50a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) {
 800c50c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d107      	bne.n	800c524 <VL53L1_start_test+0x28>
		status = VL53L1_WrByte(
 800c514:	78fb      	ldrb	r3, [r7, #3]
 800c516:	461a      	mov	r2, r3
 800c518:	2127      	movs	r1, #39	; 0x27
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f009 f9ce 	bl	80158bc <VL53L1_WrByte>
 800c520:	4603      	mov	r3, r0
 800c522:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800c524:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3710      	adds	r7, #16
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	460b      	mov	r3, r1
 800c53a:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800c53c:	2300      	movs	r3, #0
 800c53e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	3318      	adds	r3, #24
 800c544:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	78fa      	ldrb	r2, [r7, #3]
 800c54a:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6

	status = VL53L1_WrByte(
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
 800c554:	461a      	mov	r2, r3
 800c556:	2185      	movs	r1, #133	; 0x85
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f009 f9af 	bl	80158bc <VL53L1_WrByte>
 800c55e:	4603      	mov	r3, r0
 800c560:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800c562:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b084      	sub	sp, #16
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c576:	2300      	movs	r3, #0
 800c578:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800c57a:	2101      	movs	r1, #1
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff ffd7 	bl	800c530 <VL53L1_set_firmware_enable_register>
 800c582:	4603      	mov	r3, r0
 800c584:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c586:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b084      	sub	sp, #16
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c59a:	2300      	movs	r3, #0
 800c59c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 800c59e:	2100      	movs	r1, #0
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f7ff ffc5 	bl	800c530 <VL53L1_set_firmware_enable_register>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c5aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b084      	sub	sp, #16
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
 800c5be:	460b      	mov	r3, r1
 800c5c0:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	3318      	adds	r3, #24
 800c5ca:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	78fa      	ldrb	r2, [r7, #3]
 800c5d0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

	status = VL53L1_WrByte(
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800c5da:	461a      	mov	r2, r3
 800c5dc:	2183      	movs	r1, #131	; 0x83
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f009 f96c 	bl	80158bc <VL53L1_WrByte>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800c5e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800c600:	2101      	movs	r1, #1
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7ff ffd7 	bl	800c5b6 <VL53L1_set_powerforce_register>
 800c608:	4603      	mov	r3, r0
 800c60a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c60c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c610:	4618      	mov	r0, r3
 800c612:	3710      	adds	r7, #16
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c620:	2300      	movs	r3, #0
 800c622:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 800c624:	2100      	movs	r1, #0
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f7ff ffc5 	bl	800c5b6 <VL53L1_set_powerforce_register>
 800c62c:	4603      	mov	r3, r0
 800c62e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c630:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c634:	4618      	mov	r0, r3
 800c636:	3710      	adds	r7, #16
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c644:	2300      	movs	r3, #0
 800c646:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	3318      	adds	r3, #24
 800c64c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	2201      	movs	r2, #1
 800c652:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7

	status = VL53L1_WrByte(
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 800c65c:	461a      	mov	r2, r3
 800c65e:	2186      	movs	r1, #134	; 0x86
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f009 f92b 	bl	80158bc <VL53L1_WrByte>
 800c666:	4603      	mov	r3, r0
 800c668:	73fb      	strb	r3, [r7, #15]
				VL53L1_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800c66a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b086      	sub	sp, #24
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	4603      	mov	r3, r0
 800c67e:	460a      	mov	r2, r1
 800c680:	80fb      	strh	r3, [r7, #6]
 800c682:	4613      	mov	r3, r2
 800c684:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800c686:	2300      	movs	r3, #0
 800c688:	617b      	str	r3, [r7, #20]
	uint8_t   VL53L1_p_031   = 0;
 800c68a:	2300      	movs	r3, #0
 800c68c:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800c68e:	2300      	movs	r3, #0
 800c690:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800c692:	88fb      	ldrh	r3, [r7, #6]
 800c694:	4618      	mov	r0, r3
 800c696:	f002 ffeb 	bl	800f670 <VL53L1_calc_pll_period_us>
 800c69a:	6178      	str	r0, [r7, #20]



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 800c69c:	797b      	ldrb	r3, [r7, #5]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f003 fbd6 	bl	800fe50 <VL53L1_decode_vcsel_period>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800c6a8:	697a      	ldr	r2, [r7, #20]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	00db      	lsls	r3, r3, #3
 800c6ae:	4413      	add	r3, r2
 800c6b0:	021b      	lsls	r3, r3, #8
 800c6b2:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	099b      	lsrs	r3, r3, #6
 800c6b8:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 800c6ba:	7cfa      	ldrb	r2, [r7, #19]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	fb02 f303 	mul.w	r3, r2, r3
 800c6c2:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	099b      	lsrs	r3, r3, #6
 800c6c8:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3718      	adds	r7, #24
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b089      	sub	sp, #36	; 0x24
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	4608      	mov	r0, r1
 800c6de:	4611      	mov	r1, r2
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	817b      	strh	r3, [r7, #10]
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	813b      	strh	r3, [r7, #8]
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800c6fe:	2300      	movs	r3, #0
 800c700:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	011b      	lsls	r3, r3, #4
 800c706:	4a23      	ldr	r2, [pc, #140]	; (800c794 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800c708:	fb82 1203 	smull	r1, r2, r2, r3
 800c70c:	1192      	asrs	r2, r2, #6
 800c70e:	17db      	asrs	r3, r3, #31
 800c710:	1ad3      	subs	r3, r2, r3
 800c712:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800c714:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	da03      	bge.n	800c724 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800c71c:	897b      	ldrh	r3, [r7, #10]
 800c71e:	425b      	negs	r3, r3
 800c720:	b29b      	uxth	r3, r3
 800c722:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800c724:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	da03      	bge.n	800c734 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800c72c:	893b      	ldrh	r3, [r7, #8]
 800c72e:	425b      	negs	r3, r3
 800c730:	b29b      	uxth	r3, r3
 800c732:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800c734:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800c738:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c73c:	4413      	add	r3, r2
 800c73e:	015b      	lsls	r3, r3, #5
 800c740:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	4a13      	ldr	r2, [pc, #76]	; (800c794 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800c746:	fb82 1203 	smull	r1, r2, r2, r3
 800c74a:	1192      	asrs	r2, r2, #6
 800c74c:	17db      	asrs	r3, r3, #31
 800c74e:	1ad3      	subs	r3, r2, r3
 800c750:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800c752:	697a      	ldr	r2, [r7, #20]
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	4413      	add	r3, r2
 800c758:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800c75a:	79fa      	ldrb	r2, [r7, #7]
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	fb02 f303 	mul.w	r3, r2, r3
 800c762:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	3310      	adds	r3, #16
 800c768:	2b00      	cmp	r3, #0
 800c76a:	da00      	bge.n	800c76e <VL53L1_calc_range_ignore_threshold+0x9a>
 800c76c:	331f      	adds	r3, #31
 800c76e:	115b      	asrs	r3, r3, #5
 800c770:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c778:	db03      	blt.n	800c782 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800c77a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c77e:	83fb      	strh	r3, [r7, #30]
 800c780:	e001      	b.n	800c786 <VL53L1_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800c786:	8bfb      	ldrh	r3, [r7, #30]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3724      	adds	r7, #36	; 0x24
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr
 800c794:	10624dd3 	.word	0x10624dd3

0800c798 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d102      	bne.n	800c7b2 <VL53L1_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	60fb      	str	r3, [r7, #12]
 800c7b0:	e008      	b.n	800c7c4 <VL53L1_calc_timeout_mclks+0x2c>
	else
		timeout_mclks =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	031a      	lsls	r2, r3, #12
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	085b      	lsrs	r3, r3, #1
 800c7ba:	441a      	add	r2, r3
		timeout_mclks =
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7c2:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3714      	adds	r7, #20
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr

0800c7d2 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b084      	sub	sp, #16
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
 800c7da:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800c7e4:	6839      	ldr	r1, [r7, #0]
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f7ff ffd6 	bl	800c798 <VL53L1_calc_timeout_mclks>
 800c7ec:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	f000 f887 	bl	800c902 <VL53L1_encode_timeout>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800c7f8:	897b      	ldrh	r3, [r7, #10]
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800c802:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c806:	b087      	sub	sp, #28
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800c80e:	2100      	movs	r1, #0
 800c810:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800c812:	f04f 0000 	mov.w	r0, #0
 800c816:	f04f 0100 	mov.w	r1, #0
 800c81a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800c81e:	6879      	ldr	r1, [r7, #4]
 800c820:	2000      	movs	r0, #0
 800c822:	4688      	mov	r8, r1
 800c824:	4681      	mov	r9, r0
 800c826:	6839      	ldr	r1, [r7, #0]
 800c828:	2000      	movs	r0, #0
 800c82a:	460c      	mov	r4, r1
 800c82c:	4605      	mov	r5, r0
 800c82e:	fb04 f009 	mul.w	r0, r4, r9
 800c832:	fb08 f105 	mul.w	r1, r8, r5
 800c836:	4401      	add	r1, r0
 800c838:	fba8 2304 	umull	r2, r3, r8, r4
 800c83c:	4419      	add	r1, r3
 800c83e:	460b      	mov	r3, r1
 800c840:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800c844:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800c848:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c84c:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800c850:	f143 0b00 	adc.w	fp, r3, #0
 800c854:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800c858:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c85c:	f04f 0200 	mov.w	r2, #0
 800c860:	f04f 0300 	mov.w	r3, #0
 800c864:	0b02      	lsrs	r2, r0, #12
 800c866:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c86a:	0b0b      	lsrs	r3, r1, #12
 800c86c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800c874:	697b      	ldr	r3, [r7, #20]
}
 800c876:	4618      	mov	r0, r3
 800c878:	371c      	adds	r7, #28
 800c87a:	46bd      	mov	sp, r7
 800c87c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c880:	4770      	bx	lr
	...

0800c884 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	460b      	mov	r3, r1
 800c88e:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800c890:	2300      	movs	r3, #0
 800c892:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800c894:	2300      	movs	r3, #0
 800c896:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800c898:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800c89c:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800c89e:	4413      	add	r3, r2
 800c8a0:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	da02      	bge.n	800c8ae <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	60fb      	str	r3, [r7, #12]
 800c8ac:	e005      	b.n	800c8ba <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c8b4:	db01      	blt.n	800c8ba <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800c8b6:	4b05      	ldr	r3, [pc, #20]	; (800c8cc <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 800c8b8:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800c8be:	68bb      	ldr	r3, [r7, #8]

}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3714      	adds	r7, #20
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	0003ffff 	.word	0x0003ffff

0800c8d0 <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	6039      	str	r1, [r7, #0]
 800c8da:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800c8e4:	88fb      	ldrh	r3, [r7, #6]
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f000 f837 	bl	800c95a <VL53L1_decode_timeout>
 800c8ec:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800c8ee:	6839      	ldr	r1, [r7, #0]
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f7ff ff86 	bl	800c802 <VL53L1_calc_timeout_us>
 800c8f6:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800c8f8:	68bb      	ldr	r3, [r7, #8]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3710      	adds	r7, #16
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800c902:	b480      	push	{r7}
 800c904:	b087      	sub	sp, #28
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800c90a:	2300      	movs	r3, #0
 800c90c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800c90e:	2300      	movs	r3, #0
 800c910:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c912:	2300      	movs	r3, #0
 800c914:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d017      	beq.n	800c94c <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	3b01      	subs	r3, #1
 800c920:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c922:	e005      	b.n	800c930 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	085b      	lsrs	r3, r3, #1
 800c928:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800c92a:	89fb      	ldrh	r3, [r7, #14]
 800c92c:	3301      	adds	r3, #1
 800c92e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c936:	2b00      	cmp	r3, #0
 800c938:	d1f4      	bne.n	800c924 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800c93a:	89fb      	ldrh	r3, [r7, #14]
 800c93c:	021b      	lsls	r3, r3, #8
 800c93e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	b29b      	uxth	r3, r3
 800c944:	b2db      	uxtb	r3, r3
 800c946:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800c948:	4413      	add	r3, r2
 800c94a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800c94c:	8afb      	ldrh	r3, [r7, #22]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	371c      	adds	r7, #28
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr

0800c95a <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800c95a:	b480      	push	{r7}
 800c95c:	b085      	sub	sp, #20
 800c95e:	af00      	add	r7, sp, #0
 800c960:	4603      	mov	r3, r0
 800c962:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800c964:	2300      	movs	r3, #0
 800c966:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c968:	88fb      	ldrh	r3, [r7, #6]
 800c96a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c96c:	88fa      	ldrh	r2, [r7, #6]
 800c96e:	0a12      	lsrs	r2, r2, #8
 800c970:	b292      	uxth	r2, r2
 800c972:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c974:	3301      	adds	r3, #1
 800c976:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800c978:	68fb      	ldr	r3, [r7, #12]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3714      	adds	r7, #20
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b088      	sub	sp, #32
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	60f8      	str	r0, [r7, #12]
 800c98e:	60b9      	str	r1, [r7, #8]
 800c990:	607a      	str	r2, [r7, #4]
 800c992:	807b      	strh	r3, [r7, #2]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c994:	2300      	movs	r3, #0
 800c996:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800c998:	2300      	movs	r3, #0
 800c99a:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800c99c:	2300      	movs	r3, #0
 800c99e:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800c9a4:	887b      	ldrh	r3, [r7, #2]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d102      	bne.n	800c9b0 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800c9aa:	23f1      	movs	r3, #241	; 0xf1
 800c9ac:	77fb      	strb	r3, [r7, #31]
 800c9ae:	e05d      	b.n	800ca6c <VL53L1_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 800c9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b2:	799a      	ldrb	r2, [r3, #6]
 800c9b4:	887b      	ldrh	r3, [r7, #2]
 800c9b6:	4611      	mov	r1, r2
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7ff fe5c 	bl	800c676 <VL53L1_calc_macro_period_us>
 800c9be:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800c9c0:	6979      	ldr	r1, [r7, #20]
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f7ff fee8 	bl	800c798 <VL53L1_calc_timeout_mclks>
 800c9c8:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	2bff      	cmp	r3, #255	; 0xff
 800c9ce:	d901      	bls.n	800c9d4 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800c9d0:	23ff      	movs	r3, #255	; 0xff
 800c9d2:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800c9d4:	69bb      	ldr	r3, [r7, #24]
 800c9d6:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800c9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9da:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800c9dc:	6979      	ldr	r1, [r7, #20]
 800c9de:	68b8      	ldr	r0, [r7, #8]
 800c9e0:	f7ff fef7 	bl	800c7d2 <VL53L1_calc_encoded_timeout>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c9e8:	8a7b      	ldrh	r3, [r7, #18]
 800c9ea:	0a1b      	lsrs	r3, r3, #8
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800c9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f2:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c9f4:	8a7b      	ldrh	r3, [r7, #18]
 800c9f6:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800c9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fa:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800c9fc:	6979      	ldr	r1, [r7, #20]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f7ff fee7 	bl	800c7d2 <VL53L1_calc_encoded_timeout>
 800ca04:	4603      	mov	r3, r0
 800ca06:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800ca08:	8a7b      	ldrh	r3, [r7, #18]
 800ca0a:	0a1b      	lsrs	r3, r3, #8
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800ca10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca12:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800ca14:	8a7b      	ldrh	r3, [r7, #18]
 800ca16:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800ca18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1a:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53L1_calc_macro_period_us(
 800ca1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1e:	7a5a      	ldrb	r2, [r3, #9]
 800ca20:	887b      	ldrh	r3, [r7, #2]
 800ca22:	4611      	mov	r1, r2
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7ff fe26 	bl	800c676 <VL53L1_calc_macro_period_us>
 800ca2a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800ca2c:	6979      	ldr	r1, [r7, #20]
 800ca2e:	68b8      	ldr	r0, [r7, #8]
 800ca30:	f7ff fecf 	bl	800c7d2 <VL53L1_calc_encoded_timeout>
 800ca34:	4603      	mov	r3, r0
 800ca36:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800ca38:	8a7b      	ldrh	r3, [r7, #18]
 800ca3a:	0a1b      	lsrs	r3, r3, #8
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800ca40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca42:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800ca44:	8a7b      	ldrh	r3, [r7, #18]
 800ca46:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800ca48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4a:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53L1_calc_encoded_timeout(
 800ca4c:	6979      	ldr	r1, [r7, #20]
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f7ff febf 	bl	800c7d2 <VL53L1_calc_encoded_timeout>
 800ca54:	4603      	mov	r3, r0
 800ca56:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800ca58:	8a7b      	ldrh	r3, [r7, #18]
 800ca5a:	0a1b      	lsrs	r3, r3, #8
 800ca5c:	b29b      	uxth	r3, r3
 800ca5e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800ca60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca62:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800ca64:	8a7b      	ldrh	r3, [r7, #18]
 800ca66:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800ca68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6a:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800ca6c:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3720      	adds	r7, #32
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 800ca78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca7c:	b09e      	sub	sp, #120	; 0x78
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6578      	str	r0, [r7, #84]	; 0x54
 800ca82:	6539      	str	r1, [r7, #80]	; 0x50


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ca84:	2300      	movs	r3, #0
 800ca86:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 800ca8a:	f04f 0200 	mov.w	r2, #0
 800ca8e:	f04f 0300 	mov.w	r3, #0
 800ca92:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800ca96:	f04f 0200 	mov.w	r2, #0
 800ca9a:	f04f 0300 	mov.w	r3, #0
 800ca9e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 800caa2:	f04f 0200 	mov.w	r2, #0
 800caa6:	f04f 0300 	mov.w	r3, #0
 800caaa:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800caae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cab0:	885b      	ldrh	r3, [r3, #2]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d103      	bne.n	800cabe <VL53L1_hist_copy_and_scale_ambient_info+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800cab6:	23f1      	movs	r3, #241	; 0xf1
 800cab8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800cabc:	e0d6      	b.n	800cc6c <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800cabe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cac0:	785b      	ldrb	r3, [r3, #1]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f000 80d2 	beq.w	800cc6c <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800cac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caca:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800cacc:	2b00      	cmp	r3, #0
 800cace:	f040 80cd 	bne.w	800cc6c <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800cad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cad8:	2200      	movs	r2, #0
 800cada:	643b      	str	r3, [r7, #64]	; 0x40
 800cadc:	647a      	str	r2, [r7, #68]	; 0x44
 800cade:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800cae2:	460b      	mov	r3, r1
 800cae4:	3301      	adds	r3, #1
 800cae6:	623b      	str	r3, [r7, #32]
 800cae8:	4613      	mov	r3, r2
 800caea:	f143 0300 	adc.w	r3, r3, #0
 800caee:	627b      	str	r3, [r7, #36]	; 0x24
 800caf0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800caf4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800caf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cafa:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	2200      	movs	r2, #0
 800cb02:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb04:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800cb06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb08:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	fb02 f203 	mul.w	r2, r2, r3
 800cb12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb14:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800cb18:	fb01 f303 	mul.w	r3, r1, r3
 800cb1c:	441a      	add	r2, r3
 800cb1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb20:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cb22:	fba3 4501 	umull	r4, r5, r3, r1
 800cb26:	1953      	adds	r3, r2, r5
 800cb28:	461d      	mov	r5, r3
 800cb2a:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 800cb2e:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800cb32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	2200      	movs	r2, #0
 800cb38:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb3a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cb3c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800cb40:	460b      	mov	r3, r1
 800cb42:	3301      	adds	r3, #1
 800cb44:	61bb      	str	r3, [r7, #24]
 800cb46:	4613      	mov	r3, r2
 800cb48:	f143 0300 	adc.w	r3, r3, #0
 800cb4c:	61fb      	str	r3, [r7, #28]
 800cb4e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800cb52:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800cb56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb58:	885b      	ldrh	r3, [r3, #2]
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	633b      	str	r3, [r7, #48]	; 0x30
 800cb60:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 800cb62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb64:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800cb68:	4622      	mov	r2, r4
 800cb6a:	fb02 f203 	mul.w	r2, r2, r3
 800cb6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb70:	4629      	mov	r1, r5
 800cb72:	fb01 f303 	mul.w	r3, r1, r3
 800cb76:	441a      	add	r2, r3
 800cb78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb7a:	4621      	mov	r1, r4
 800cb7c:	fba3 ab01 	umull	sl, fp, r3, r1
 800cb80:	eb02 030b 	add.w	r3, r2, fp
 800cb84:	469b      	mov	fp, r3
 800cb86:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800cb8a:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800cb8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb90:	68db      	ldr	r3, [r3, #12]
 800cb92:	17da      	asrs	r2, r3, #31
 800cb94:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb96:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 800cb98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb9a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800cb9e:	4622      	mov	r2, r4
 800cba0:	fb02 f203 	mul.w	r2, r2, r3
 800cba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cba6:	4629      	mov	r1, r5
 800cba8:	fb01 f303 	mul.w	r3, r1, r3
 800cbac:	4413      	add	r3, r2
 800cbae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cbb0:	4621      	mov	r1, r4
 800cbb2:	fba2 8901 	umull	r8, r9, r2, r1
 800cbb6:	444b      	add	r3, r9
 800cbb8:	4699      	mov	r9, r3
 800cbba:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 800cbbe:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 800cbc2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800cbc6:	0fd9      	lsrs	r1, r3, #31
 800cbc8:	2000      	movs	r0, #0
 800cbca:	6139      	str	r1, [r7, #16]
 800cbcc:	6178      	str	r0, [r7, #20]
 800cbce:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800cbd2:	4621      	mov	r1, r4
 800cbd4:	1889      	adds	r1, r1, r2
 800cbd6:	60b9      	str	r1, [r7, #8]
 800cbd8:	4629      	mov	r1, r5
 800cbda:	eb43 0101 	adc.w	r1, r3, r1
 800cbde:	60f9      	str	r1, [r7, #12]
 800cbe0:	f04f 0200 	mov.w	r2, #0
 800cbe4:	f04f 0300 	mov.w	r3, #0
 800cbe8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cbec:	4621      	mov	r1, r4
 800cbee:	084a      	lsrs	r2, r1, #1
 800cbf0:	4629      	mov	r1, r5
 800cbf2:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800cbf6:	4629      	mov	r1, r5
 800cbf8:	104b      	asrs	r3, r1, #1
 800cbfa:	4610      	mov	r0, r2
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800cc02:	1814      	adds	r4, r2, r0
 800cc04:	603c      	str	r4, [r7, #0]
 800cc06:	414b      	adcs	r3, r1
 800cc08:	607b      	str	r3, [r7, #4]
 800cc0a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800cc0e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 800cc12:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800cc16:	4313      	orrs	r3, r2
 800cc18:	d009      	beq.n	800cc2e <VL53L1_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800cc1a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800cc1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cc22:	f7f3 ff99 	bl	8000b58 <__aeabi_ldivmod>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800cc2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc32:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53L1_p_004 =
					podata->ambient_events_sum;
 800cc36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc38:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53L1_p_004 =
 800cc3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc3e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 +=
 800cc42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800cc48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc4a:	7852      	ldrb	r2, [r2, #1]
 800cc4c:	0852      	lsrs	r2, r2, #1
 800cc4e:	b2d2      	uxtb	r2, r2
			podata->VL53L1_p_004 +=
 800cc50:	441a      	add	r2, r3
 800cc52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc54:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 /=
 800cc58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800cc5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc60:	7852      	ldrb	r2, [r2, #1]
			podata->VL53L1_p_004 /=
 800cc62:	fb93 f2f2 	sdiv	r2, r3, r2
 800cc66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800cc6c:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3778      	adds	r7, #120	; 0x78
 800cc74:	46bd      	mov	sp, r7
 800cc76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cc7a <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800cc7a:	b480      	push	{r7}
 800cc7c:	b087      	sub	sp, #28
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
 800cc82:	6039      	str	r1, [r7, #0]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	3318      	adds	r3, #24
 800cc88:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800cc92:	2300      	movs	r3, #0
 800cc94:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	amb_thresh_low  = 1024 *
 800cc9c:	029b      	lsls	r3, r3, #10
 800cc9e:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	amb_thresh_high = 1024 *
 800cca6:	029b      	lsls	r3, r3, #10
 800cca8:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccb0:	f003 0301 	and.w	r3, r3, #1
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f040 8095 	bne.w	800cde4 <VL53L1_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		pdata->bin_seq[5] =
 800ccc0:	091b      	lsrs	r3, r3, #4
 800ccc2:	b2da      	uxtb	r2, r3
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800ccce:	f003 030f 	and.w	r3, r3, #15
 800ccd2:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
		pdata->bin_seq[3] =
 800ccde:	091b      	lsrs	r3, r3, #4
 800cce0:	b2da      	uxtb	r2, r3
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800ccec:	f003 030f 	and.w	r3, r3, #15
 800ccf0:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
		pdata->bin_seq[1] =
 800ccfc:	091b      	lsrs	r3, r3, #4
 800ccfe:	b2da      	uxtb	r2, r3
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800cd0a:	f003 030f 	and.w	r3, r3, #15
 800cd0e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cd1a:	68ba      	ldr	r2, [r7, #8]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	da2c      	bge.n	800cd7a <VL53L1_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			pdata->bin_seq[5] =
 800cd26:	091b      	lsrs	r3, r3, #4
 800cd28:	b2da      	uxtb	r2, r3
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			& 0x0F;
 800cd34:	f003 030f 	and.w	r3, r3, #15
 800cd38:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			pdata->bin_seq[3] =
 800cd44:	091b      	lsrs	r3, r3, #4
 800cd46:	b2da      	uxtb	r2, r3
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			& 0x0F;
 800cd52:	f003 030f 	and.w	r3, r3, #15
 800cd56:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			pdata->bin_seq[1] =
 800cd62:	091b      	lsrs	r3, r3, #4
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			& 0x0F;
 800cd70:	f003 030f 	and.w	r3, r3, #15
 800cd74:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cd80:	68fa      	ldr	r2, [r7, #12]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	f340 80c2 	ble.w	800cf0c <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[5] =
 800cd8e:	091b      	lsrs	r3, r3, #4
 800cd90:	b2da      	uxtb	r2, r3
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 800cd9c:	f003 030f 	and.w	r3, r3, #15
 800cda0:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			pdata->bin_seq[3] =
 800cdac:	091b      	lsrs	r3, r3, #4
 800cdae:	b2da      	uxtb	r2, r3
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			& 0x0F;
 800cdba:	f003 030f 	and.w	r3, r3, #15
 800cdbe:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			pdata->bin_seq[1] =
 800cdca:	091b      	lsrs	r3, r3, #4
 800cdcc:	b2da      	uxtb	r2, r3
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 800cdd8:	f003 030f 	and.w	r3, r3, #15
 800cddc:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	731a      	strb	r2, [r3, #12]
 800cde2:	e093      	b.n	800cf0c <VL53L1_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
			& 0x0F;
 800cdea:	f003 030f 	and.w	r3, r3, #15
 800cdee:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
			& 0x0F;
 800cdfa:	f003 030f 	and.w	r3, r3, #15
 800cdfe:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		pdata->bin_seq[3] =
 800ce0a:	091b      	lsrs	r3, r3, #4
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800ce18:	f003 030f 	and.w	r3, r3, #15
 800ce1c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
		pdata->bin_seq[1] =
 800ce28:	091b      	lsrs	r3, r3, #4
 800ce2a:	b2da      	uxtb	r2, r3
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
			& 0x0F;
 800ce36:	f003 030f 	and.w	r3, r3, #15
 800ce3a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ce46:	68ba      	ldr	r2, [r7, #8]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	da2c      	bge.n	800cea6 <VL53L1_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			pdata->bin_seq[5] =
 800ce52:	091b      	lsrs	r3, r3, #4
 800ce54:	b2da      	uxtb	r2, r3
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			& 0x0F;
 800ce60:	f003 030f 	and.w	r3, r3, #15
 800ce64:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			pdata->bin_seq[3] =
 800ce70:	091b      	lsrs	r3, r3, #4
 800ce72:	b2da      	uxtb	r2, r3
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			& 0x0F;
 800ce7e:	f003 030f 	and.w	r3, r3, #15
 800ce82:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			pdata->bin_seq[1] =
 800ce8e:	091b      	lsrs	r3, r3, #4
 800ce90:	b2da      	uxtb	r2, r3
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			& 0x0F;
 800ce9c:	f003 030f 	and.w	r3, r3, #15
 800cea0:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	dd2c      	ble.n	800cf0c <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[5] =
 800ceb8:	091b      	lsrs	r3, r3, #4
 800ceba:	b2da      	uxtb	r2, r3
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 800cec6:	f003 030f 	and.w	r3, r3, #15
 800ceca:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[3] =
 800ced6:	091b      	lsrs	r3, r3, #4
 800ced8:	b2da      	uxtb	r2, r3
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 800cee4:	f003 030f 	and.w	r3, r3, #15
 800cee8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[1] =
 800cef4:	091b      	lsrs	r3, r3, #4
 800cef6:	b2da      	uxtb	r2, r3
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 800cf02:	f003 030f 	and.w	r3, r3, #15
 800cf06:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	75fb      	strb	r3, [r7, #23]
 800cf10:	e007      	b.n	800cf22 <VL53L1_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800cf12:	7dfb      	ldrb	r3, [r7, #23]
 800cf14:	683a      	ldr	r2, [r7, #0]
 800cf16:	4413      	add	r3, r2
 800cf18:	2201      	movs	r2, #1
 800cf1a:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800cf1c:	7dfb      	ldrb	r3, [r7, #23]
 800cf1e:	3301      	adds	r3, #1
 800cf20:	75fb      	strb	r3, [r7, #23]
 800cf22:	7dfb      	ldrb	r3, [r7, #23]
 800cf24:	2b05      	cmp	r3, #5
 800cf26:	d9f4      	bls.n	800cf12 <VL53L1_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800cf28:	bf00      	nop
 800cf2a:	bf00      	nop
 800cf2c:	371c      	adds	r7, #28
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr

0800cf36 <VL53L1_hist_phase_consistency_check>:
VL53L1_Error  VL53L1_hist_phase_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_results_t      *prange_curr)
{
 800cf36:	b590      	push	{r4, r7, lr}
 800cf38:	b093      	sub	sp, #76	; 0x4c
 800cf3a:	af04      	add	r7, sp, #16
 800cf3c:	60f8      	str	r0, [r7, #12]
 800cf3e:	60b9      	str	r1, [r7, #8]
 800cf40:	607a      	str	r2, [r7, #4]
 800cf42:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cf44:	2300      	movs	r3, #0
 800cf46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	3318      	adds	r3, #24
 800cf4e:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800cf50:	2300      	movs	r3, #0
 800cf52:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800cf56:	2300      	movs	r3, #0
 800cf58:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800cf60:	2300      	movs	r3, #0
 800cf62:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800cf64:	2300      	movs	r3, #0
 800cf66:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53L1_DeviceError  range_status = 0;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800cf70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf72:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 800cf76:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800cf7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7c:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800cf80:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800cf82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf84:	f8b3 327e 	ldrh.w	r3, [r3, #638]	; 0x27e
 800cf88:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800cf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8c:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 800cf90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800cf94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf98:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 800cf9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cf9c:	021b      	lsls	r3, r3, #8
 800cf9e:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	785b      	ldrb	r3, [r3, #1]
 800cfa4:	2b07      	cmp	r3, #7
 800cfa6:	d006      	beq.n	800cfb6 <VL53L1_hist_phase_consistency_check+0x80>
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	785b      	ldrb	r3, [r3, #1]
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 800cfac:	2b08      	cmp	r3, #8
 800cfae:	d002      	beq.n	800cfb6 <VL53L1_hist_phase_consistency_check+0x80>
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800cfb0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cfb4:	e0ec      	b.n	800d190 <VL53L1_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800cfb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d102      	bne.n	800cfc2 <VL53L1_hist_phase_consistency_check+0x8c>
		return status;
 800cfbc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cfc0:	e0e6      	b.n	800d190 <VL53L1_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800cfc8:	e0d9      	b.n	800d17e <VL53L1_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800cfca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800cfce:	683a      	ldr	r2, [r7, #0]
 800cfd0:	214c      	movs	r1, #76	; 0x4c
 800cfd2:	fb01 f303 	mul.w	r3, r1, r3
 800cfd6:	4413      	add	r3, r2
 800cfd8:	335e      	adds	r3, #94	; 0x5e
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	2b09      	cmp	r3, #9
 800cfde:	d00b      	beq.n	800cff8 <VL53L1_hist_phase_consistency_check+0xc2>
			VL53L1_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53L1_p_002[lc].range_status ==
 800cfe0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800cfe4:	683a      	ldr	r2, [r7, #0]
 800cfe6:	214c      	movs	r1, #76	; 0x4c
 800cfe8:	fb01 f303 	mul.w	r3, r1, r3
 800cfec:	4413      	add	r3, r2
 800cfee:	335e      	adds	r3, #94	; 0x5e
 800cff0:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800cff2:	2b13      	cmp	r3, #19
 800cff4:	f040 80bd 	bne.w	800d172 <VL53L1_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	795b      	ldrb	r3, [r3, #5]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d10a      	bne.n	800d016 <VL53L1_hist_phase_consistency_check+0xe0>
			prange_curr->VL53L1_p_002[lc].range_status =
 800d000:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d004:	683a      	ldr	r2, [r7, #0]
 800d006:	214c      	movs	r1, #76	; 0x4c
 800d008:	fb01 f303 	mul.w	r3, r1, r3
 800d00c:	4413      	add	r3, r2
 800d00e:	335e      	adds	r3, #94	; 0x5e
 800d010:	2217      	movs	r2, #23
 800d012:	701a      	strb	r2, [r3, #0]
 800d014:	e009      	b.n	800d02a <VL53L1_hist_phase_consistency_check+0xf4>
			VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53L1_p_002[lc].range_status =
 800d016:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d01a:	683a      	ldr	r2, [r7, #0]
 800d01c:	214c      	movs	r1, #76	; 0x4c
 800d01e:	fb01 f303 	mul.w	r3, r1, r3
 800d022:	4413      	add	r3, r2
 800d024:	335e      	adds	r3, #94	; 0x5e
 800d026:	2207      	movs	r2, #7
 800d028:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800d02a:	2300      	movs	r3, #0
 800d02c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800d030:	e097      	b.n	800d162 <VL53L1_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800d032:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d036:	683a      	ldr	r2, [r7, #0]
 800d038:	214c      	movs	r1, #76	; 0x4c
 800d03a:	fb01 f303 	mul.w	r3, r1, r3
 800d03e:	4413      	add	r3, r2
 800d040:	3354      	adds	r3, #84	; 0x54
 800d042:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 800d044:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	4613      	mov	r3, r2
 800d04c:	005b      	lsls	r3, r3, #1
 800d04e:	4413      	add	r3, r2
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	4403      	add	r3, r0
 800d054:	3310      	adds	r3, #16
 800d056:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800d058:	4299      	cmp	r1, r3
 800d05a:	d915      	bls.n	800d088 <VL53L1_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014 -
 800d05c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d060:	683a      	ldr	r2, [r7, #0]
 800d062:	214c      	movs	r1, #76	; 0x4c
 800d064:	fb01 f303 	mul.w	r3, r1, r3
 800d068:	4413      	add	r3, r2
 800d06a:	3354      	adds	r3, #84	; 0x54
 800d06c:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014;
 800d06e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	4613      	mov	r3, r2
 800d076:	005b      	lsls	r3, r3, #1
 800d078:	4413      	add	r3, r2
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	4403      	add	r3, r0
 800d07e:	3310      	adds	r3, #16
 800d080:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800d082:	1acb      	subs	r3, r1, r3
 800d084:	867b      	strh	r3, [r7, #50]	; 0x32
 800d086:	e014      	b.n	800d0b2 <VL53L1_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53L1_p_002[p].VL53L1_p_014 -
 800d088:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800d08c:	6879      	ldr	r1, [r7, #4]
 800d08e:	4613      	mov	r3, r2
 800d090:	005b      	lsls	r3, r3, #1
 800d092:	4413      	add	r3, r2
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	440b      	add	r3, r1
 800d098:	3310      	adds	r3, #16
 800d09a:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014;
 800d09c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d0a0:	6839      	ldr	r1, [r7, #0]
 800d0a2:	204c      	movs	r0, #76	; 0x4c
 800d0a4:	fb00 f303 	mul.w	r3, r0, r3
 800d0a8:	440b      	add	r3, r1
 800d0aa:	3354      	adds	r3, #84	; 0x54
 800d0ac:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800d0ae:	1ad3      	subs	r3, r2, r3
 800d0b0:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800d0b2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800d0b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d24e      	bcs.n	800d158 <VL53L1_hist_phase_consistency_check+0x222>





				if (status == VL53L1_ERROR_NONE)
 800d0ba:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d125      	bne.n	800d10e <VL53L1_hist_phase_consistency_check+0x1d8>
					status =
					VL53L1_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53L1_p_002[p]),
 800d0c2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53L1_hist_events_consistency_check(
 800d0c6:	4613      	mov	r3, r2
 800d0c8:	005b      	lsls	r3, r3, #1
 800d0ca:	4413      	add	r3, r2
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	3308      	adds	r3, #8
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53L1_p_002[lc]),
 800d0d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_events_consistency_check(
 800d0d8:	224c      	movs	r2, #76	; 0x4c
 800d0da:	fb02 f303 	mul.w	r3, r2, r3
 800d0de:	3310      	adds	r3, #16
 800d0e0:	683a      	ldr	r2, [r7, #0]
 800d0e2:	4413      	add	r3, r2
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800d0e8:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800d0ec:	f107 0217 	add.w	r2, r7, #23
 800d0f0:	9203      	str	r2, [sp, #12]
 800d0f2:	f107 021c 	add.w	r2, r7, #28
 800d0f6:	9202      	str	r2, [sp, #8]
 800d0f8:	f107 0218 	add.w	r2, r7, #24
 800d0fc:	9201      	str	r2, [sp, #4]
 800d0fe:	9300      	str	r3, [sp, #0]
 800d100:	4623      	mov	r3, r4
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	f000 f848 	bl	800d198 <VL53L1_hist_events_consistency_check>
 800d108:	4603      	mov	r3, r0
 800d10a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53L1_ERROR_NONE &&
 800d10e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d112:	2b00      	cmp	r3, #0
 800d114:	d115      	bne.n	800d142 <VL53L1_hist_phase_consistency_check+0x20c>
					range_status ==
 800d116:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53L1_ERROR_NONE &&
 800d118:	2b09      	cmp	r3, #9
 800d11a:	d112      	bne.n	800d142 <VL53L1_hist_phase_consistency_check+0x20c>
					VL53L1_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53L1_hist_merged_pulse_check(
 800d11c:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53L1_p_002[lc]),
 800d120:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_merged_pulse_check(
 800d124:	224c      	movs	r2, #76	; 0x4c
 800d126:	fb02 f303 	mul.w	r3, r2, r3
 800d12a:	3310      	adds	r3, #16
 800d12c:	683a      	ldr	r2, [r7, #0]
 800d12e:	4413      	add	r3, r2
 800d130:	3304      	adds	r3, #4
 800d132:	f107 0217 	add.w	r2, r7, #23
 800d136:	4619      	mov	r1, r3
 800d138:	f000 fb44 	bl	800d7c4 <VL53L1_hist_merged_pulse_check>
 800d13c:	4603      	mov	r3, r0
 800d13e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53L1_p_002[lc].range_status =
 800d142:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d146:	7df8      	ldrb	r0, [r7, #23]
 800d148:	683a      	ldr	r2, [r7, #0]
 800d14a:	214c      	movs	r1, #76	; 0x4c
 800d14c:	fb01 f303 	mul.w	r3, r1, r3
 800d150:	4413      	add	r3, r2
 800d152:	335e      	adds	r3, #94	; 0x5e
 800d154:	4602      	mov	r2, r0
 800d156:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800d158:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d15c:	3301      	adds	r3, #1
 800d15e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	795b      	ldrb	r3, [r3, #5]
 800d166:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800d16a:	429a      	cmp	r2, r3
 800d16c:	f4ff af61 	bcc.w	800d032 <VL53L1_hist_phase_consistency_check+0xfc>
 800d170:	e000      	b.n	800d174 <VL53L1_hist_phase_consistency_check+0x23e>
			continue;
 800d172:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800d174:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d178:	3301      	adds	r3, #1
 800d17a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	7c9b      	ldrb	r3, [r3, #18]
 800d182:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800d186:	429a      	cmp	r2, r3
 800d188:	f4ff af1f 	bcc.w	800cfca <VL53L1_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800d18c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d190:	4618      	mov	r0, r3
 800d192:	373c      	adds	r7, #60	; 0x3c
 800d194:	46bd      	mov	sp, r7
 800d196:	bd90      	pop	{r4, r7, pc}

0800d198 <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 800d198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d19c:	b0d4      	sub	sp, #336	; 0x150
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800d1a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800d1ba:	f04f 0200 	mov.w	r2, #0
 800d1be:	f04f 0300 	mov.w	r3, #0
 800d1c2:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800d1c6:	f04f 0200 	mov.w	r2, #0
 800d1ca:	f04f 0300 	mov.w	r3, #0
 800d1ce:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800d1d2:	f04f 0200 	mov.w	r2, #0
 800d1d6:	f04f 0300 	mov.w	r3, #0
 800d1da:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800d1de:	f04f 0200 	mov.w	r2, #0
 800d1e2:	f04f 0300 	mov.w	r3, #0
 800d1e6:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800d1ea:	f04f 0200 	mov.w	r2, #0
 800d1ee:	f04f 0300 	mov.w	r3, #0
 800d1f2:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800d1f6:	f04f 0200 	mov.w	r2, #0
 800d1fa:	f04f 0300 	mov.w	r3, #0
 800d1fe:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800d202:	f04f 0200 	mov.w	r2, #0
 800d206:	f04f 0300 	mov.w	r3, #0
 800d20a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800d20e:	f04f 0200 	mov.w	r2, #0
 800d212:	f04f 0300 	mov.w	r3, #0
 800d216:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800d220:	2300      	movs	r3, #0
 800d222:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800d226:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d106      	bne.n	800d23c <VL53L1_hist_events_consistency_check+0xa4>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800d22e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800d232:	2209      	movs	r2, #9
 800d234:	701a      	strb	r2, [r3, #0]
		return status;
 800d236:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800d23a:	e2bd      	b.n	800d7b8 <VL53L1_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800d23c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d240:	689b      	ldr	r3, [r3, #8]
 800d242:	2200      	movs	r2, #0
 800d244:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d248:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800d24c:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d250:	460b      	mov	r3, r1
 800d252:	3301      	adds	r3, #1
 800d254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d258:	4613      	mov	r3, r2
 800d25a:	f143 0300 	adc.w	r3, r3, #0
 800d25e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d262:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800d266:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800d26a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d26e:	885b      	ldrh	r3, [r3, #2]
 800d270:	b29b      	uxth	r3, r3
 800d272:	2200      	movs	r2, #0
 800d274:	469a      	mov	sl, r3
 800d276:	4693      	mov	fp, r2
 800d278:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800d27c:	fb0a f203 	mul.w	r2, sl, r3
 800d280:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d284:	fb0b f303 	mul.w	r3, fp, r3
 800d288:	441a      	add	r2, r3
 800d28a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d28e:	fba3 450a 	umull	r4, r5, r3, sl
 800d292:	1953      	adds	r3, r2, r5
 800d294:	461d      	mov	r5, r3
 800d296:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800d29a:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800d29e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d2a2:	699b      	ldr	r3, [r3, #24]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d2aa:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d2ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d2ba:	4613      	mov	r3, r2
 800d2bc:	f143 0300 	adc.w	r3, r3, #0
 800d2c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d2c4:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800d2c8:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 800d2cc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d2d0:	8adb      	ldrh	r3, [r3, #22]
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d2da:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d2de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d2e2:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800d2e6:	4622      	mov	r2, r4
 800d2e8:	fb02 f203 	mul.w	r2, r2, r3
 800d2ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	fb01 f303 	mul.w	r3, r1, r3
 800d2f6:	441a      	add	r2, r3
 800d2f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d2fc:	4621      	mov	r1, r4
 800d2fe:	fba3 8901 	umull	r8, r9, r3, r1
 800d302:	eb02 0309 	add.w	r3, r2, r9
 800d306:	4699      	mov	r9, r3
 800d308:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800d30c:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800d310:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d314:	f04f 0000 	mov.w	r0, #0
 800d318:	f04f 0100 	mov.w	r1, #0
 800d31c:	0319      	lsls	r1, r3, #12
 800d31e:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800d322:	0310      	lsls	r0, r2, #12
 800d324:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	events_scaler += (tmpc/2);
 800d328:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800d32c:	0fd9      	lsrs	r1, r3, #31
 800d32e:	2000      	movs	r0, #0
 800d330:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800d334:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800d338:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800d33c:	4621      	mov	r1, r4
 800d33e:	1889      	adds	r1, r1, r2
 800d340:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800d344:	4629      	mov	r1, r5
 800d346:	eb43 0101 	adc.w	r1, r3, r1
 800d34a:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800d34e:	f04f 0200 	mov.w	r2, #0
 800d352:	f04f 0300 	mov.w	r3, #0
 800d356:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800d35a:	4621      	mov	r1, r4
 800d35c:	084a      	lsrs	r2, r1, #1
 800d35e:	4629      	mov	r1, r5
 800d360:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800d364:	4629      	mov	r1, r5
 800d366:	104b      	asrs	r3, r1, #1
 800d368:	4610      	mov	r0, r2
 800d36a:	4619      	mov	r1, r3
 800d36c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d370:	1814      	adds	r4, r2, r0
 800d372:	67bc      	str	r4, [r7, #120]	; 0x78
 800d374:	414b      	adcs	r3, r1
 800d376:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d378:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800d37c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	if (tmpc != 0)
 800d380:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800d384:	4313      	orrs	r3, r2
 800d386:	d009      	beq.n	800d39c <VL53L1_hist_events_consistency_check+0x204>
		events_scaler = do_division_s(events_scaler, tmpc);
 800d388:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800d38c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800d390:	f7f3 fbe2 	bl	8000b58 <__aeabi_ldivmod>
 800d394:	4602      	mov	r2, r0
 800d396:	460b      	mov	r3, r1
 800d398:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148

	events_scaler_sq  = events_scaler * events_scaler;
 800d39c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800d3a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d3a4:	fb03 f102 	mul.w	r1, r3, r2
 800d3a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800d3ac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d3b0:	fb02 f303 	mul.w	r3, r2, r3
 800d3b4:	18ca      	adds	r2, r1, r3
 800d3b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d3ba:	fba3 1303 	umull	r1, r3, r3, r3
 800d3be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d3c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d3cc:	18d3      	adds	r3, r2, r3
 800d3ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d3d2:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800d3d6:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800d3da:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800d3de:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d3e2:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800d3e6:	6739      	str	r1, [r7, #112]	; 0x70
 800d3e8:	f143 0300 	adc.w	r3, r3, #0
 800d3ec:	677b      	str	r3, [r7, #116]	; 0x74
 800d3ee:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800d3f2:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800d3f6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	da08      	bge.n	800d410 <VL53L1_hist_events_consistency_check+0x278>
 800d3fe:	f640 71ff 	movw	r1, #4095	; 0xfff
 800d402:	1851      	adds	r1, r2, r1
 800d404:	66b9      	str	r1, [r7, #104]	; 0x68
 800d406:	f143 0300 	adc.w	r3, r3, #0
 800d40a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d40c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d410:	f04f 0000 	mov.w	r0, #0
 800d414:	f04f 0100 	mov.w	r1, #0
 800d418:	0b10      	lsrs	r0, r2, #12
 800d41a:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800d41e:	1319      	asrs	r1, r3, #12
 800d420:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53L1_p_021;
 800d424:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d42a:	2200      	movs	r2, #0
 800d42c:	663b      	str	r3, [r7, #96]	; 0x60
 800d42e:	667a      	str	r2, [r7, #100]	; 0x64
 800d430:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800d434:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 800d438:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43e:	2200      	movs	r2, #0
 800d440:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d444:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800d448:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800d44c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800d450:	4621      	mov	r1, r4
 800d452:	1a51      	subs	r1, r2, r1
 800d454:	65b9      	str	r1, [r7, #88]	; 0x58
 800d456:	4629      	mov	r1, r5
 800d458:	eb63 0301 	sbc.w	r3, r3, r1
 800d45c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d45e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800d462:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800d466:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800d46a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d46e:	fb03 f102 	mul.w	r1, r3, r2
 800d472:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800d476:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d47a:	fb02 f303 	mul.w	r3, r2, r3
 800d47e:	4419      	add	r1, r3
 800d480:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800d484:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d488:	fba2 2303 	umull	r2, r3, r2, r3
 800d48c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d490:	4613      	mov	r3, r2
 800d492:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d49a:	18cb      	adds	r3, r1, r3
 800d49c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d4a0:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800d4a4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800d4a8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800d4ac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800d4b0:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800d4b4:	6539      	str	r1, [r7, #80]	; 0x50
 800d4b6:	f143 0300 	adc.w	r3, r3, #0
 800d4ba:	657b      	str	r3, [r7, #84]	; 0x54
 800d4bc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800d4c0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800d4c4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	da08      	bge.n	800d4de <VL53L1_hist_events_consistency_check+0x346>
 800d4cc:	f640 71ff 	movw	r1, #4095	; 0xfff
 800d4d0:	1851      	adds	r1, r2, r1
 800d4d2:	64b9      	str	r1, [r7, #72]	; 0x48
 800d4d4:	f143 0300 	adc.w	r3, r3, #0
 800d4d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d4de:	f04f 0000 	mov.w	r0, #0
 800d4e2:	f04f 0100 	mov.w	r1, #0
 800d4e6:	0b10      	lsrs	r0, r2, #12
 800d4e8:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800d4ec:	1319      	asrs	r1, r3, #12
 800d4ee:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800d4f2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d4f6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 800d4fa:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d500:	2200      	movs	r2, #0
 800d502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d506:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d50a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d50e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800d512:	4622      	mov	r2, r4
 800d514:	fb02 f203 	mul.w	r2, r2, r3
 800d518:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d51c:	4629      	mov	r1, r5
 800d51e:	fb01 f303 	mul.w	r3, r1, r3
 800d522:	441a      	add	r2, r3
 800d524:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d528:	4621      	mov	r1, r4
 800d52a:	fba3 1301 	umull	r1, r3, r3, r1
 800d52e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d532:	460b      	mov	r3, r1
 800d534:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d53c:	18d3      	adds	r3, r2, r3
 800d53e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d542:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800d546:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800d54a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800d54e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d552:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800d556:	6439      	str	r1, [r7, #64]	; 0x40
 800d558:	f143 0300 	adc.w	r3, r3, #0
 800d55c:	647b      	str	r3, [r7, #68]	; 0x44
 800d55e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d562:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800d566:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	da08      	bge.n	800d580 <VL53L1_hist_events_consistency_check+0x3e8>
 800d56e:	f640 71ff 	movw	r1, #4095	; 0xfff
 800d572:	1851      	adds	r1, r2, r1
 800d574:	63b9      	str	r1, [r7, #56]	; 0x38
 800d576:	f143 0300 	adc.w	r3, r3, #0
 800d57a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d57c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d580:	f04f 0000 	mov.w	r0, #0
 800d584:	f04f 0100 	mov.w	r1, #0
 800d588:	0b10      	lsrs	r0, r2, #12
 800d58a:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800d58e:	1319      	asrs	r1, r3, #12
 800d590:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800d594:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d598:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 800d59c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d5a8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d5ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5b0:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800d5b4:	4622      	mov	r2, r4
 800d5b6:	fb02 f203 	mul.w	r2, r2, r3
 800d5ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d5be:	4629      	mov	r1, r5
 800d5c0:	fb01 f303 	mul.w	r3, r1, r3
 800d5c4:	441a      	add	r2, r3
 800d5c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d5ca:	4621      	mov	r1, r4
 800d5cc:	fba3 1301 	umull	r1, r3, r3, r1
 800d5d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d5da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d5de:	18d3      	adds	r3, r2, r3
 800d5e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d5e4:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800d5e8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800d5ec:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800d5f0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d5f4:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800d5f8:	6339      	str	r1, [r7, #48]	; 0x30
 800d5fa:	f143 0300 	adc.w	r3, r3, #0
 800d5fe:	637b      	str	r3, [r7, #52]	; 0x34
 800d600:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d604:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800d608:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d60c:	4610      	mov	r0, r2
 800d60e:	4619      	mov	r1, r3
 800d610:	2900      	cmp	r1, #0
 800d612:	da08      	bge.n	800d626 <VL53L1_hist_events_consistency_check+0x48e>
 800d614:	f640 73ff 	movw	r3, #4095	; 0xfff
 800d618:	18c3      	adds	r3, r0, r3
 800d61a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d61c:	f141 0300 	adc.w	r3, r1, #0
 800d620:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d622:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d626:	f04f 0200 	mov.w	r2, #0
 800d62a:	f04f 0300 	mov.w	r3, #0
 800d62e:	0b02      	lsrs	r2, r0, #12
 800d630:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800d634:	130b      	asrs	r3, r1, #12
 800d636:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800d63a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d63e:	1c91      	adds	r1, r2, #2
 800d640:	6239      	str	r1, [r7, #32]
 800d642:	f143 0300 	adc.w	r3, r3, #0
 800d646:	627b      	str	r3, [r7, #36]	; 0x24
 800d648:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d64c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800d650:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d654:	2b00      	cmp	r3, #0
 800d656:	da06      	bge.n	800d666 <VL53L1_hist_events_consistency_check+0x4ce>
 800d658:	1cd1      	adds	r1, r2, #3
 800d65a:	61b9      	str	r1, [r7, #24]
 800d65c:	f143 0300 	adc.w	r3, r3, #0
 800d660:	61fb      	str	r3, [r7, #28]
 800d662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d666:	f04f 0000 	mov.w	r0, #0
 800d66a:	f04f 0100 	mov.w	r1, #0
 800d66e:	0890      	lsrs	r0, r2, #2
 800d670:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800d674:	1099      	asrs	r1, r3, #2
 800d676:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53L1_p_020;
 800d67a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d67e:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800d680:	2200      	movs	r2, #0
 800d682:	613b      	str	r3, [r7, #16]
 800d684:	617a      	str	r2, [r7, #20]
 800d686:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d68a:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800d68e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800d692:	1c91      	adds	r1, r2, #2
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	f143 0300 	adc.w	r3, r3, #0
 800d69a:	60fb      	str	r3, [r7, #12]
 800d69c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d6a0:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800d6a4:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	da06      	bge.n	800d6ba <VL53L1_hist_events_consistency_check+0x522>
 800d6ac:	1cd1      	adds	r1, r2, #3
 800d6ae:	6039      	str	r1, [r7, #0]
 800d6b0:	f143 0300 	adc.w	r3, r3, #0
 800d6b4:	607b      	str	r3, [r7, #4]
 800d6b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6ba:	f04f 0000 	mov.w	r0, #0
 800d6be:	f04f 0100 	mov.w	r1, #0
 800d6c2:	0890      	lsrs	r0, r2, #2
 800d6c4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800d6c8:	1099      	asrs	r1, r3, #2
 800d6ca:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53L1_p_021 +
 800d6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d6d2:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800d6d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53L1_p_021 +
 800d6d8:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800d6da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800d6de:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800d6e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800d6e4:	4413      	add	r3, r2
 800d6e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 800d6ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d6ee:	011b      	lsls	r3, r3, #4
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f002 f8c6 	bl	800f882 <VL53L1_isqrt>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	461a      	mov	r2, r3
	*pevents_tolerance =
 800d6fa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d6fe:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800d700:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800d70a:	fb03 f202 	mul.w	r2, r3, r2
 800d70e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d712:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800d714:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f103 0220 	add.w	r2, r3, #32
 800d71e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d722:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800d724:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	da00      	bge.n	800d730 <VL53L1_hist_events_consistency_check+0x598>
 800d72e:	333f      	adds	r3, #63	; 0x3f
 800d730:	119b      	asrs	r3, r3, #6
 800d732:	461a      	mov	r2, r3
 800d734:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d738:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53L1_p_021;
 800d73a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 800d744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	461a      	mov	r2, r3
 800d74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d750:	1a9b      	subs	r3, r3, r2
 800d752:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800d756:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d75a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d75e:	429a      	cmp	r2, r3
 800d760:	da08      	bge.n	800d774 <VL53L1_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800d762:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800d766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d76a:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800d76c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800d770:	601a      	str	r2, [r3, #0]
 800d772:	e007      	b.n	800d784 <VL53L1_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800d774:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d778:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d77c:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800d77e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800d782:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800d784:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	429a      	cmp	r2, r3
 800d792:	dd0b      	ble.n	800d7ac <VL53L1_hist_events_consistency_check+0x614>
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
 800d794:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d798:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800d79a:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d204      	bcs.n	800d7ac <VL53L1_hist_events_consistency_check+0x614>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 800d7a2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800d7a6:	2214      	movs	r2, #20
 800d7a8:	701a      	strb	r2, [r3, #0]
 800d7aa:	e003      	b.n	800d7b4 <VL53L1_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800d7ac:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800d7b0:	2209      	movs	r2, #9
 800d7b2:	701a      	strb	r2, [r3, #0]





	return status;
 800d7b4:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d7c4 <VL53L1_hist_merged_pulse_check>:

VL53L1_Error  VL53L1_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53L1_range_data_t         *pdata,
	VL53L1_DeviceError          *prange_status)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b087      	sub	sp, #28
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
 800d7d0:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	dd0b      	ble.n	800d802 <VL53L1_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	1ad3      	subs	r3, r2, r3
 800d7fc:	b29b      	uxth	r3, r3
		delta_mm =
 800d7fe:	82fb      	strh	r3, [r7, #22]
 800d800:	e00a      	b.n	800d818 <VL53L1_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800d808:	b29a      	uxth	r2, r3
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800d810:	b29b      	uxth	r3, r3
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	b29b      	uxth	r3, r3
		delta_mm =
 800d816:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800d818:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	dd09      	ble.n	800d834 <VL53L1_hist_merged_pulse_check+0x70>
 800d820:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d824:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d828:	429a      	cmp	r2, r3
 800d82a:	dd03      	ble.n	800d834 <VL53L1_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2216      	movs	r2, #22
 800d830:	701a      	strb	r2, [r3, #0]
 800d832:	e002      	b.n	800d83a <VL53L1_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2209      	movs	r2, #9
 800d838:	701a      	strb	r2, [r3, #0]

	return status;
 800d83a:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	371c      	adds	r7, #28
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr

0800d84a <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 800d84a:	b580      	push	{r7, lr}
 800d84c:	b08e      	sub	sp, #56	; 0x38
 800d84e:	af04      	add	r7, sp, #16
 800d850:	60f8      	str	r0, [r7, #12]
 800d852:	60b9      	str	r1, [r7, #8]
 800d854:	607a      	str	r2, [r7, #4]
 800d856:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d858:	2300      	movs	r3, #0
 800d85a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev =
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	3318      	adds	r3, #24
 800d862:	623b      	str	r3, [r7, #32]
		VL53L1DevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800d864:	2300      	movs	r3, #0
 800d866:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800d868:	2300      	movs	r3, #0
 800d86a:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800d86c:	6a3b      	ldr	r3, [r7, #32]
 800d86e:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 800d872:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800d874:	6a3b      	ldr	r3, [r7, #32]
 800d876:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800d87a:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800d882:	2b09      	cmp	r3, #9
 800d884:	d009      	beq.n	800d89a <VL53L1_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800d88c:	2b13      	cmp	r3, #19
 800d88e:	d004      	beq.n	800d89a <VL53L1_hist_xmonitor_consistency_check+0x50>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800d896:	2b14      	cmp	r3, #20
 800d898:	d129      	bne.n	800d8ee <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d8a0:	2b09      	cmp	r3, #9
 800d8a2:	d009      	beq.n	800d8b8 <VL53L1_hist_xmonitor_consistency_check+0x6e>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800d8aa:	2b13      	cmp	r3, #19
 800d8ac:	d004      	beq.n	800d8b8 <VL53L1_hist_xmonitor_consistency_check+0x6e>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800d8b4:	2b14      	cmp	r3, #20
 800d8b6:	d11a      	bne.n	800d8ee <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	2209      	movs	r2, #9
 800d8bc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	334a      	adds	r3, #74	; 0x4a
				VL53L1_hist_events_consistency_check(
 800d8ca:	8bb9      	ldrh	r1, [r7, #28]
 800d8cc:	7ff8      	ldrb	r0, [r7, #31]
 800d8ce:	9303      	str	r3, [sp, #12]
 800d8d0:	f107 0318 	add.w	r3, r7, #24
 800d8d4:	9302      	str	r3, [sp, #8]
 800d8d6:	f107 0314 	add.w	r3, r7, #20
 800d8da:	9301      	str	r3, [sp, #4]
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	9300      	str	r3, [sp, #0]
 800d8e0:	4613      	mov	r3, r2
 800d8e2:	68ba      	ldr	r2, [r7, #8]
 800d8e4:	f7ff fc58 	bl	800d198 <VL53L1_hist_events_consistency_check>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800d8ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3728      	adds	r7, #40	; 0x28
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}

0800d8fa <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b088      	sub	sp, #32
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	60f8      	str	r0, [r7, #12]
 800d902:	60b9      	str	r1, [r7, #8]
 800d904:	607a      	str	r2, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d906:	2300      	movs	r3, #0
 800d908:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800d90a:	2300      	movs	r3, #0
 800d90c:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800d90e:	2300      	movs	r3, #0
 800d910:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800d912:	2300      	movs	r3, #0
 800d914:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53L1_p_019 != 0) {
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d922:	2b00      	cmp	r3, #0
 800d924:	d019      	beq.n	800d95a <VL53L1_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53L1_calc_pll_period_mm(
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d92c:	4618      	mov	r0, r3
 800d92e:	f002 f90f 	bl	800fb50 <VL53L1_calc_pll_period_mm>
 800d932:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53L1_p_019);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800d93a:	021b      	lsls	r3, r3, #8
 800d93c:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	69ba      	ldr	r2, [r7, #24]
 800d942:	fb02 f303 	mul.w	r3, r2, r3
 800d946:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d94e:	0bdb      	lsrs	r3, r3, #15
 800d950:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	b21a      	sxth	r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d95a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3720      	adds	r7, #32
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <VL53L1_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53L1_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800d966:	b590      	push	{r4, r7, lr}
 800d968:	b08d      	sub	sp, #52	; 0x34
 800d96a:	af04      	add	r7, sp, #16
 800d96c:	4604      	mov	r4, r0
 800d96e:	4608      	mov	r0, r1
 800d970:	4611      	mov	r1, r2
 800d972:	461a      	mov	r2, r3
 800d974:	4623      	mov	r3, r4
 800d976:	80fb      	strh	r3, [r7, #6]
 800d978:	4603      	mov	r3, r0
 800d97a:	80bb      	strh	r3, [r7, #4]
 800d97c:	460b      	mov	r3, r1
 800d97e:	70fb      	strb	r3, [r7, #3]
 800d980:	4613      	mov	r3, r2
 800d982:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800d984:	2300      	movs	r3, #0
 800d986:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800d988:	2300      	movs	r3, #0
 800d98a:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800d98c:	2300      	movs	r3, #0
 800d98e:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800d990:	2300      	movs	r3, #0
 800d992:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800d994:	2300      	movs	r3, #0
 800d996:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800d998:	2300      	movs	r3, #0
 800d99a:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800d99c:	2300      	movs	r3, #0
 800d99e:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	613b      	str	r3, [r7, #16]



	VL53L1_calc_mm_effective_spads(
 800d9a4:	78b9      	ldrb	r1, [r7, #2]
 800d9a6:	78f8      	ldrb	r0, [r7, #3]
 800d9a8:	f107 030c 	add.w	r3, r7, #12
 800d9ac:	9303      	str	r3, [sp, #12]
 800d9ae:	f107 030e 	add.w	r3, r7, #14
 800d9b2:	9302      	str	r3, [sp, #8]
 800d9b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d9b8:	9301      	str	r3, [sp, #4]
 800d9ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9bc:	9300      	str	r3, [sp, #0]
 800d9be:	23ff      	movs	r3, #255	; 0xff
 800d9c0:	22c7      	movs	r2, #199	; 0xc7
 800d9c2:	f000 fa03 	bl	800ddcc <VL53L1_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800d9c6:	89fb      	ldrh	r3, [r7, #14]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d050      	beq.n	800da6e <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800d9cc:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d04d      	beq.n	800da6e <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;



	VL53L1_calc_mm_effective_spads(
 800d9d2:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800d9d6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800d9da:	78b9      	ldrb	r1, [r7, #2]
 800d9dc:	78f8      	ldrb	r0, [r7, #3]
 800d9de:	f107 0308 	add.w	r3, r7, #8
 800d9e2:	9303      	str	r3, [sp, #12]
 800d9e4:	f107 030a 	add.w	r3, r7, #10
 800d9e8:	9302      	str	r3, [sp, #8]
 800d9ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d9ee:	9301      	str	r3, [sp, #4]
 800d9f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9f2:	9300      	str	r3, [sp, #0]
 800d9f4:	4623      	mov	r3, r4
 800d9f6:	f000 f9e9 	bl	800ddcc <VL53L1_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800d9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9fc:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800d9fe:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800da00:	897b      	ldrh	r3, [r7, #10]
 800da02:	461a      	mov	r2, r3
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	fb02 f303 	mul.w	r3, r2, r3
 800da0a:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800da0c:	89fb      	ldrh	r3, [r7, #14]
 800da0e:	461a      	mov	r2, r3
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	fbb3 f3f2 	udiv	r3, r3, r2
 800da16:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800da18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da1a:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800da1c:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800da1e:	893b      	ldrh	r3, [r7, #8]
 800da20:	461a      	mov	r2, r3
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	fb02 f303 	mul.w	r3, r2, r3
 800da28:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800da2a:	89bb      	ldrh	r3, [r7, #12]
 800da2c:	461a      	mov	r2, r3
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	fbb3 f3f2 	udiv	r3, r3, r2
 800da34:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800da36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800da3a:	69ba      	ldr	r2, [r7, #24]
 800da3c:	fb02 f303 	mul.w	r3, r2, r3
 800da40:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800da42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800da46:	697a      	ldr	r2, [r7, #20]
 800da48:	fb02 f303 	mul.w	r3, r2, r3
 800da4c:	69fa      	ldr	r2, [r7, #28]
 800da4e:	4413      	add	r3, r2
 800da50:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800da52:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800da54:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800da56:	4413      	add	r3, r2
 800da58:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d008      	beq.n	800da72 <VL53L1_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	009a      	lsls	r2, r3, #2
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	fb92 f3f3 	sdiv	r3, r2, r3
 800da6a:	61fb      	str	r3, [r7, #28]
 800da6c:	e002      	b.n	800da74 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800da6e:	bf00      	nop
 800da70:	e000      	b.n	800da74 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800da72:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800da74:	69fb      	ldr	r3, [r7, #28]
 800da76:	b21a      	sxth	r2, r3
 800da78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da7a:	801a      	strh	r2, [r3, #0]

}
 800da7c:	bf00      	nop
 800da7e:	3724      	adds	r7, #36	; 0x24
 800da80:	46bd      	mov	sp, r7
 800da82:	bd90      	pop	{r4, r7, pc}

0800da84 <VL53L1_spad_number_to_byte_bit_index>:
void VL53L1_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800da84:	b480      	push	{r7}
 800da86:	b085      	sub	sp, #20
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60b9      	str	r1, [r7, #8]
 800da8c:	607a      	str	r2, [r7, #4]
 800da8e:	603b      	str	r3, [r7, #0]
 800da90:	4603      	mov	r3, r0
 800da92:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800da94:	7bfb      	ldrb	r3, [r7, #15]
 800da96:	08db      	lsrs	r3, r3, #3
 800da98:	b2da      	uxtb	r2, r3
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800da9e:	7bfb      	ldrb	r3, [r7, #15]
 800daa0:	f003 0307 	and.w	r3, r3, #7
 800daa4:	b2da      	uxtb	r2, r3
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	461a      	mov	r2, r3
 800dab0:	2301      	movs	r3, #1
 800dab2:	4093      	lsls	r3, r2
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	701a      	strb	r2, [r3, #0]

}
 800daba:	bf00      	nop
 800dabc:	3714      	adds	r7, #20
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr

0800dac6 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800dac6:	b480      	push	{r7}
 800dac8:	b083      	sub	sp, #12
 800daca:	af00      	add	r7, sp, #0
 800dacc:	4603      	mov	r3, r0
 800dace:	603a      	str	r2, [r7, #0]
 800dad0:	71fb      	strb	r3, [r7, #7]
 800dad2:	460b      	mov	r3, r1
 800dad4:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800dad6:	79fb      	ldrb	r3, [r7, #7]
 800dad8:	2b07      	cmp	r3, #7
 800dada:	d90a      	bls.n	800daf2 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800dadc:	79bb      	ldrb	r3, [r7, #6]
 800dade:	00db      	lsls	r3, r3, #3
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	79fb      	ldrb	r3, [r7, #7]
 800dae4:	1ad3      	subs	r3, r2, r3
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	3b71      	subs	r3, #113	; 0x71
 800daea:	b2da      	uxtb	r2, r3
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800daf0:	e00a      	b.n	800db08 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800daf2:	79bb      	ldrb	r3, [r7, #6]
 800daf4:	f1c3 030f 	rsb	r3, r3, #15
 800daf8:	b2db      	uxtb	r3, r3
 800dafa:	00db      	lsls	r3, r3, #3
 800dafc:	b2da      	uxtb	r2, r3
 800dafe:	79fb      	ldrb	r3, [r7, #7]
 800db00:	4413      	add	r3, r2
 800db02:	b2da      	uxtb	r2, r3
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	701a      	strb	r2, [r3, #0]
}
 800db08:	bf00      	nop
 800db0a:	370c      	adds	r7, #12
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr

0800db14 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800db14:	b480      	push	{r7}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
 800db1a:	4603      	mov	r3, r0
 800db1c:	60b9      	str	r1, [r7, #8]
 800db1e:	607a      	str	r2, [r7, #4]
 800db20:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800db22:	7bfb      	ldrb	r3, [r7, #15]
 800db24:	091b      	lsrs	r3, r3, #4
 800db26:	b2da      	uxtb	r2, r3
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800db2c:	7bfb      	ldrb	r3, [r7, #15]
 800db2e:	f003 030f 	and.w	r3, r3, #15
 800db32:	b2da      	uxtb	r2, r3
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	701a      	strb	r2, [r3, #0]

}
 800db38:	bf00      	nop
 800db3a:	3714      	adds	r7, #20
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr

0800db44 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800db44:	b480      	push	{r7}
 800db46:	b083      	sub	sp, #12
 800db48:	af00      	add	r7, sp, #0
 800db4a:	4603      	mov	r3, r0
 800db4c:	603a      	str	r2, [r7, #0]
 800db4e:	71fb      	strb	r3, [r7, #7]
 800db50:	460b      	mov	r3, r1
 800db52:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800db54:	79bb      	ldrb	r3, [r7, #6]
 800db56:	011b      	lsls	r3, r3, #4
 800db58:	b2da      	uxtb	r2, r3
 800db5a:	79fb      	ldrb	r3, [r7, #7]
 800db5c:	4413      	add	r3, r2
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	701a      	strb	r2, [r3, #0]

}
 800db64:	bf00      	nop
 800db66:	370c      	adds	r7, #12
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0
 800db76:	60ba      	str	r2, [r7, #8]
 800db78:	607b      	str	r3, [r7, #4]
 800db7a:	4603      	mov	r3, r0
 800db7c:	73fb      	strb	r3, [r7, #15]
 800db7e:	460b      	mov	r3, r1
 800db80:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800db82:	2300      	movs	r3, #0
 800db84:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800db86:	2300      	movs	r3, #0
 800db88:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800db8a:	2300      	movs	r3, #0
 800db8c:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800db8e:	2300      	movs	r3, #0
 800db90:	753b      	strb	r3, [r7, #20]



	VL53L1_decode_row_col(
 800db92:	f107 0217 	add.w	r2, r7, #23
 800db96:	f107 0116 	add.w	r1, r7, #22
 800db9a:	7bfb      	ldrb	r3, [r7, #15]
 800db9c:	4618      	mov	r0, r3
 800db9e:	f002 fa51 	bl	8010044 <VL53L1_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53L1_decode_zone_size(
 800dba2:	f107 0214 	add.w	r2, r7, #20
 800dba6:	f107 0115 	add.w	r1, r7, #21
 800dbaa:	7bbb      	ldrb	r3, [r7, #14]
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7ff ffb1 	bl	800db14 <VL53L1_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800dbb2:	7dfb      	ldrb	r3, [r7, #23]
 800dbb4:	b29a      	uxth	r2, r3
 800dbb6:	7d7b      	ldrb	r3, [r7, #21]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	0fd9      	lsrs	r1, r3, #31
 800dbbc:	440b      	add	r3, r1
 800dbbe:	105b      	asrs	r3, r3, #1
 800dbc0:	425b      	negs	r3, r3
 800dbc2:	b29b      	uxth	r3, r3
 800dbc4:	4413      	add	r3, r2
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	b21a      	sxth	r2, r3
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	da02      	bge.n	800dbde <VL53L1_decode_zone_limits+0x6e>
		*px_ll = 0;
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbe4:	b29a      	uxth	r2, r3
 800dbe6:	7d7b      	ldrb	r3, [r7, #21]
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	4413      	add	r3, r2
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	b21a      	sxth	r2, r3
 800dbf0:	6a3b      	ldr	r3, [r7, #32]
 800dbf2:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
 800dbf4:	6a3b      	ldr	r3, [r7, #32]
 800dbf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbfa:	2b0f      	cmp	r3, #15
 800dbfc:	dd02      	ble.n	800dc04 <VL53L1_decode_zone_limits+0x94>
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;
 800dbfe:	6a3b      	ldr	r3, [r7, #32]
 800dc00:	220f      	movs	r2, #15
 800dc02:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800dc04:	7dbb      	ldrb	r3, [r7, #22]
 800dc06:	b29a      	uxth	r2, r3
 800dc08:	7d3b      	ldrb	r3, [r7, #20]
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	0fd9      	lsrs	r1, r3, #31
 800dc0e:	440b      	add	r3, r1
 800dc10:	105b      	asrs	r3, r3, #1
 800dc12:	425b      	negs	r3, r3
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	4413      	add	r3, r2
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	b21a      	sxth	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	da02      	bge.n	800dc30 <VL53L1_decode_zone_limits+0xc0>
		*py_ll = 0;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc36:	b29a      	uxth	r2, r3
 800dc38:	7d3b      	ldrb	r3, [r7, #20]
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	4413      	add	r3, r2
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	b21a      	sxth	r2, r3
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
 800dc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc48:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc4c:	2b0f      	cmp	r3, #15
 800dc4e:	dd02      	ble.n	800dc56 <VL53L1_decode_zone_limits+0xe6>
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
 800dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc52:	220f      	movs	r2, #15
 800dc54:	801a      	strh	r2, [r3, #0]
}
 800dc56:	bf00      	nop
 800dc58:	3718      	adds	r7, #24
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <VL53L1_is_aperture_location>:


uint8_t VL53L1_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800dc5e:	b480      	push	{r7}
 800dc60:	b085      	sub	sp, #20
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	4603      	mov	r3, r0
 800dc66:	460a      	mov	r2, r1
 800dc68:	71fb      	strb	r3, [r7, #7]
 800dc6a:	4613      	mov	r3, r2
 800dc6c:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800dc72:	79fb      	ldrb	r3, [r7, #7]
 800dc74:	f003 0303 	and.w	r3, r3, #3
 800dc78:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800dc7a:	79bb      	ldrb	r3, [r7, #6]
 800dc7c:	f003 0303 	and.w	r3, r3, #3
 800dc80:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800dc82:	7bbb      	ldrb	r3, [r7, #14]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d104      	bne.n	800dc92 <VL53L1_is_aperture_location+0x34>
 800dc88:	7b7b      	ldrb	r3, [r7, #13]
 800dc8a:	2b02      	cmp	r3, #2
 800dc8c:	d101      	bne.n	800dc92 <VL53L1_is_aperture_location+0x34>
		is_aperture = 1;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800dc92:	7bbb      	ldrb	r3, [r7, #14]
 800dc94:	2b02      	cmp	r3, #2
 800dc96:	d104      	bne.n	800dca2 <VL53L1_is_aperture_location+0x44>
 800dc98:	7b7b      	ldrb	r3, [r7, #13]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d101      	bne.n	800dca2 <VL53L1_is_aperture_location+0x44>
		is_aperture = 1;
 800dc9e:	2301      	movs	r3, #1
 800dca0:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800dca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3714      	adds	r7, #20
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800dcb0:	b590      	push	{r4, r7, lr}
 800dcb2:	b08b      	sub	sp, #44	; 0x2c
 800dcb4:	af02      	add	r7, sp, #8
 800dcb6:	603a      	str	r2, [r7, #0]
 800dcb8:	461a      	mov	r2, r3
 800dcba:	4603      	mov	r3, r0
 800dcbc:	71fb      	strb	r3, [r7, #7]
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	71bb      	strb	r3, [r7, #6]
 800dcc2:	4613      	mov	r3, r2
 800dcc4:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800dcca:	2300      	movs	r3, #0
 800dccc:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800dcde:	2300      	movs	r3, #0
 800dce0:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800dce2:	2300      	movs	r3, #0
 800dce4:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800dce6:	2300      	movs	r3, #0
 800dce8:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800dcea:	2300      	movs	r3, #0
 800dcec:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	76fb      	strb	r3, [r7, #27]



	VL53L1_decode_zone_limits(
 800dcf2:	f107 0416 	add.w	r4, r7, #22
 800dcf6:	f107 0218 	add.w	r2, r7, #24
 800dcfa:	79b9      	ldrb	r1, [r7, #6]
 800dcfc:	79f8      	ldrb	r0, [r7, #7]
 800dcfe:	f107 0312 	add.w	r3, r7, #18
 800dd02:	9301      	str	r3, [sp, #4]
 800dd04:	f107 0314 	add.w	r3, r7, #20
 800dd08:	9300      	str	r3, [sp, #0]
 800dd0a:	4623      	mov	r3, r4
 800dd0c:	f7ff ff30 	bl	800db70 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800dd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd12:	2200      	movs	r2, #0
 800dd14:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800dd16:	8afb      	ldrh	r3, [r7, #22]
 800dd18:	83bb      	strh	r3, [r7, #28]
 800dd1a:	e04c      	b.n	800ddb6 <VL53L1_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800dd1c:	8b3b      	ldrh	r3, [r7, #24]
 800dd1e:	83fb      	strh	r3, [r7, #30]
 800dd20:	e03d      	b.n	800dd9e <VL53L1_calc_max_effective_spads+0xee>



			VL53L1_encode_row_col(
 800dd22:	8bbb      	ldrh	r3, [r7, #28]
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	8bfa      	ldrh	r2, [r7, #30]
 800dd28:	b2d1      	uxtb	r1, r2
 800dd2a:	f107 0211 	add.w	r2, r7, #17
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7ff fec9 	bl	800dac6 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800dd34:	7c78      	ldrb	r0, [r7, #17]
 800dd36:	f107 030e 	add.w	r3, r7, #14
 800dd3a:	f107 020f 	add.w	r2, r7, #15
 800dd3e:	f107 0110 	add.w	r1, r7, #16
 800dd42:	f7ff fe9f 	bl	800da84 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800dd46:	7c3b      	ldrb	r3, [r7, #16]
 800dd48:	461a      	mov	r2, r3
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	4413      	add	r3, r2
 800dd4e:	781a      	ldrb	r2, [r3, #0]
 800dd50:	7bbb      	ldrb	r3, [r7, #14]
 800dd52:	4013      	ands	r3, r2
 800dd54:	b2db      	uxtb	r3, r3
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d01b      	beq.n	800dd92 <VL53L1_calc_max_effective_spads+0xe2>


				is_aperture = VL53L1_is_aperture_location(
 800dd5a:	8bbb      	ldrh	r3, [r7, #28]
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	8bfa      	ldrh	r2, [r7, #30]
 800dd60:	b2d2      	uxtb	r2, r2
 800dd62:	4611      	mov	r1, r2
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7ff ff7a 	bl	800dc5e <VL53L1_is_aperture_location>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800dd6e:	7efb      	ldrb	r3, [r7, #27]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d007      	beq.n	800dd84 <VL53L1_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800dd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd76:	881a      	ldrh	r2, [r3, #0]
 800dd78:	88bb      	ldrh	r3, [r7, #4]
 800dd7a:	4413      	add	r3, r2
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd80:	801a      	strh	r2, [r3, #0]
 800dd82:	e006      	b.n	800dd92 <VL53L1_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800dd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd86:	881b      	ldrh	r3, [r3, #0]
 800dd88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800dd8c:	b29a      	uxth	r2, r3
 800dd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd90:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800dd92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	3301      	adds	r3, #1
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	83fb      	strh	r3, [r7, #30]
 800dd9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dda2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	ddbb      	ble.n	800dd22 <VL53L1_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800ddaa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ddae:	b29b      	uxth	r3, r3
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	83bb      	strh	r3, [r7, #28]
 800ddb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ddba:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	ddac      	ble.n	800dd1c <VL53L1_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800ddc2:	bf00      	nop
 800ddc4:	bf00      	nop
 800ddc6:	3724      	adds	r7, #36	; 0x24
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd90      	pop	{r4, r7, pc}

0800ddcc <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800ddcc:	b590      	push	{r4, r7, lr}
 800ddce:	b08d      	sub	sp, #52	; 0x34
 800ddd0:	af02      	add	r7, sp, #8
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	4608      	mov	r0, r1
 800ddd6:	4611      	mov	r1, r2
 800ddd8:	461a      	mov	r2, r3
 800ddda:	4623      	mov	r3, r4
 800dddc:	71fb      	strb	r3, [r7, #7]
 800ddde:	4603      	mov	r3, r0
 800dde0:	71bb      	strb	r3, [r7, #6]
 800dde2:	460b      	mov	r3, r1
 800dde4:	717b      	strb	r3, [r7, #5]
 800dde6:	4613      	mov	r3, r2
 800dde8:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800ddea:	2300      	movs	r3, #0
 800ddec:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800ddfe:	2300      	movs	r3, #0
 800de00:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800de02:	2300      	movs	r3, #0
 800de04:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800de06:	2300      	movs	r3, #0
 800de08:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800de0a:	2300      	movs	r3, #0
 800de0c:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800de0e:	2300      	movs	r3, #0
 800de10:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800de12:	2300      	movs	r3, #0
 800de14:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800de16:	2300      	movs	r3, #0
 800de18:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800de1a:	2300      	movs	r3, #0
 800de1c:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800de1e:	2300      	movs	r3, #0
 800de20:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800de22:	2300      	movs	r3, #0
 800de24:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800de28:	2300      	movs	r3, #0
 800de2a:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53L1_decode_zone_limits(
 800de2c:	f107 041c 	add.w	r4, r7, #28
 800de30:	f107 021e 	add.w	r2, r7, #30
 800de34:	79b9      	ldrb	r1, [r7, #6]
 800de36:	79f8      	ldrb	r0, [r7, #7]
 800de38:	f107 0318 	add.w	r3, r7, #24
 800de3c:	9301      	str	r3, [sp, #4]
 800de3e:	f107 031a 	add.w	r3, r7, #26
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	4623      	mov	r3, r4
 800de46:	f7ff fe93 	bl	800db70 <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 800de4a:	f107 0414 	add.w	r4, r7, #20
 800de4e:	f107 0216 	add.w	r2, r7, #22
 800de52:	7939      	ldrb	r1, [r7, #4]
 800de54:	7978      	ldrb	r0, [r7, #5]
 800de56:	f107 0310 	add.w	r3, r7, #16
 800de5a:	9301      	str	r3, [sp, #4]
 800de5c:	f107 0312 	add.w	r3, r7, #18
 800de60:	9300      	str	r3, [sp, #0]
 800de62:	4623      	mov	r3, r4
 800de64:	f7ff fe84 	bl	800db70 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800de68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de6a:	2200      	movs	r2, #0
 800de6c:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800de6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de70:	2200      	movs	r2, #0
 800de72:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800de74:	8abb      	ldrh	r3, [r7, #20]
 800de76:	84bb      	strh	r3, [r7, #36]	; 0x24
 800de78:	e06c      	b.n	800df54 <VL53L1_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800de7a:	8afb      	ldrh	r3, [r7, #22]
 800de7c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800de7e:	e05d      	b.n	800df3c <VL53L1_calc_mm_effective_spads+0x170>



			VL53L1_encode_row_col(
 800de80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de82:	b2db      	uxtb	r3, r3
 800de84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800de86:	b2d1      	uxtb	r1, r2
 800de88:	f107 020f 	add.w	r2, r7, #15
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7ff fe1a 	bl	800dac6 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800de92:	7bf8      	ldrb	r0, [r7, #15]
 800de94:	f107 030c 	add.w	r3, r7, #12
 800de98:	f107 020d 	add.w	r2, r7, #13
 800de9c:	f107 010e 	add.w	r1, r7, #14
 800dea0:	f7ff fdf0 	bl	800da84 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800dea4:	7bbb      	ldrb	r3, [r7, #14]
 800dea6:	461a      	mov	r2, r3
 800dea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deaa:	4413      	add	r3, r2
 800deac:	781a      	ldrb	r2, [r3, #0]
 800deae:	7b3b      	ldrb	r3, [r7, #12]
 800deb0:	4013      	ands	r3, r2
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d03b      	beq.n	800df30 <VL53L1_calc_mm_effective_spads+0x164>


				is_aperture = VL53L1_is_aperture_location(
 800deb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800deba:	b2db      	uxtb	r3, r3
 800debc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800debe:	b2d2      	uxtb	r2, r2
 800dec0:	4611      	mov	r1, r2
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7ff fecb 	bl	800dc5e <VL53L1_is_aperture_location>
 800dec8:	4603      	mov	r3, r0
 800deca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800dece:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d002      	beq.n	800dedc <VL53L1_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800ded6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ded8:	847b      	strh	r3, [r7, #34]	; 0x22
 800deda:	e002      	b.n	800dee2 <VL53L1_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800dedc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dee0:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800dee2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dee6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800deea:	429a      	cmp	r2, r3
 800deec:	db19      	blt.n	800df22 <VL53L1_calc_mm_effective_spads+0x156>
 800deee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800def2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800def6:	429a      	cmp	r2, r3
 800def8:	dc13      	bgt.n	800df22 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800defa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800defe:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800df02:	429a      	cmp	r2, r3
 800df04:	db0d      	blt.n	800df22 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800df06:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800df0a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800df0e:	429a      	cmp	r2, r3
 800df10:	dc07      	bgt.n	800df22 <VL53L1_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800df12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df14:	881a      	ldrh	r2, [r3, #0]
 800df16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df18:	4413      	add	r3, r2
 800df1a:	b29a      	uxth	r2, r3
 800df1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df1e:	801a      	strh	r2, [r3, #0]
 800df20:	e006      	b.n	800df30 <VL53L1_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800df22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df24:	881a      	ldrh	r2, [r3, #0]
 800df26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df28:	4413      	add	r3, r2
 800df2a:	b29a      	uxth	r2, r3
 800df2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df2e:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800df30:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800df34:	b29b      	uxth	r3, r3
 800df36:	3301      	adds	r3, #1
 800df38:	b29b      	uxth	r3, r3
 800df3a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800df3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800df40:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800df44:	429a      	cmp	r2, r3
 800df46:	dd9b      	ble.n	800de80 <VL53L1_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800df48:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	3301      	adds	r3, #1
 800df50:	b29b      	uxth	r3, r3
 800df52:	84bb      	strh	r3, [r7, #36]	; 0x24
 800df54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800df58:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800df5c:	429a      	cmp	r2, r3
 800df5e:	dd8c      	ble.n	800de7a <VL53L1_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800df60:	bf00      	nop
 800df62:	bf00      	nop
 800df64:	372c      	adds	r7, #44	; 0x2c
 800df66:	46bd      	mov	sp, r7
 800df68:	bd90      	pop	{r4, r7, pc}

0800df6a <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b086      	sub	sp, #24
 800df6e:	af00      	add	r7, sp, #0
 800df70:	60f8      	str	r0, [r7, #12]
 800df72:	60b9      	str	r1, [r7, #8]
 800df74:	607a      	str	r2, [r7, #4]
 800df76:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800df78:	2300      	movs	r3, #0
 800df7a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f7fd ff6d 	bl	800be5c <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	7c9a      	ldrb	r2, [r3, #18]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	3314      	adds	r3, #20
 800dfac:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800dfae:	2300      	movs	r3, #0
 800dfb0:	75fb      	strb	r3, [r7, #23]
 800dfb2:	e06b      	b.n	800e08c <VL53L1_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800dfb4:	7dfb      	ldrb	r3, [r7, #23]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d002      	beq.n	800dfc0 <VL53L1_hist_copy_results_to_sys_and_core+0x56>
 800dfba:	2b01      	cmp	r3, #1
 800dfbc:	d034      	beq.n	800e028 <VL53L1_hist_copy_results_to_sys_and_core+0xbe>
 800dfbe:	e05f      	b.n	800e080 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53L1_p_006;
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800dff8:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	8a9a      	ldrh	r2, [r3, #20]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53L1_p_021;
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53L1_p_013;
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53L1_p_020;
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	601a      	str	r2, [r3, #0]

			break;
 800e026:	e02b      	b.n	800e080 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53L1_p_006;
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e058:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53L1_p_021;
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53L1_p_013;
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53L1_p_020;
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	611a      	str	r2, [r3, #16]
			break;
 800e07e:	bf00      	nop
		}

		pdata++;
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	334c      	adds	r3, #76	; 0x4c
 800e084:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800e086:	7dfb      	ldrb	r3, [r7, #23]
 800e088:	3301      	adds	r3, #1
 800e08a:	75fb      	strb	r3, [r7, #23]
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	7c9b      	ldrb	r3, [r3, #18]
 800e090:	7dfa      	ldrb	r2, [r7, #23]
 800e092:	429a      	cmp	r2, r3
 800e094:	d38e      	bcc.n	800dfb4 <VL53L1_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800e096:	bf00      	nop
 800e098:	bf00      	nop
 800e09a:	3718      	adds	r7, #24
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <VL53L1_save_cfg_data>:
}


VL53L1_Error VL53L1_save_cfg_data(
	VL53L1_DEV  Dev)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b089      	sub	sp, #36	; 0x24
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	3318      	adds	r3, #24
 800e0b0:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800e0b8:	3308      	adds	r3, #8
 800e0ba:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800e0bc:	69bb      	ldr	r3, [r7, #24]
 800e0be:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800e0c2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 800e0c4:	69bb      	ldr	r3, [r7, #24]
 800e0c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e0ca:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	4413      	add	r3, r2
 800e0d2:	005b      	lsls	r3, r3, #1
 800e0d4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800e0d8:	697a      	ldr	r2, [r7, #20]
 800e0da:	4413      	add	r3, r2
 800e0dc:	3302      	adds	r3, #2
 800e0de:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800e0e0:	69bb      	ldr	r3, [r7, #24]
 800e0e2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800e0ea:	69bb      	ldr	r3, [r7, #24]
 800e0ec:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800e104:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3724      	adds	r7, #36	; 0x24
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr

0800e114 <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 800e114:	b480      	push	{r7}
 800e116:	b08b      	sub	sp, #44	; 0x2c
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e11e:	2300      	movs	r3, #0
 800e120:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	3318      	adds	r3, #24
 800e126:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800e12e:	3308      	adds	r3, #8
 800e130:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800e138:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800e13a:	69bb      	ldr	r3, [r7, #24]
 800e13c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e140:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 800e148:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800e14a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e14e:	623b      	str	r3, [r7, #32]
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 800e150:	7bfa      	ldrb	r2, [r7, #15]
 800e152:	6939      	ldr	r1, [r7, #16]
 800e154:	4613      	mov	r3, r2
 800e156:	009b      	lsls	r3, r3, #2
 800e158:	4413      	add	r3, r2
 800e15a:	005b      	lsls	r3, r3, #1
 800e15c:	440b      	add	r3, r1
 800e15e:	3306      	adds	r3, #6
 800e160:	2200      	movs	r2, #0
 800e162:	801a      	strh	r2, [r3, #0]

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e16a:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800e16c:	2301      	movs	r3, #1
 800e16e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e172:	e01a      	b.n	800e1aa <VL53L1_dynamic_zone_update+0x96>

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 800e174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e178:	683a      	ldr	r2, [r7, #0]
 800e17a:	214c      	movs	r1, #76	; 0x4c
 800e17c:	fb01 f303 	mul.w	r3, r1, r3
 800e180:	4413      	add	r3, r2
 800e182:	334a      	adds	r3, #74	; 0x4a
 800e184:	881b      	ldrh	r3, [r3, #0]
 800e186:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e188:	429a      	cmp	r2, r3
 800e18a:	d209      	bcs.n	800e1a0 <VL53L1_dynamic_zone_update+0x8c>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;
 800e18c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800e190:	683a      	ldr	r2, [r7, #0]
 800e192:	214c      	movs	r1, #76	; 0x4c
 800e194:	fb01 f303 	mul.w	r3, r1, r3
 800e198:	4413      	add	r3, r2
 800e19a:	334a      	adds	r3, #74	; 0x4a
 800e19c:	881b      	ldrh	r3, [r3, #0]
 800e19e:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800e1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	7c9b      	ldrb	r3, [r3, #18]
 800e1ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d3de      	bcc.n	800e174 <VL53L1_dynamic_zone_update+0x60>

	}

	if (max_total_rate_per_spads == 0) {
 800e1b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d103      	bne.n	800e1c4 <VL53L1_dynamic_zone_update+0xb0>

		temp = 0xFFFF;
 800e1bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1c0:	623b      	str	r3, [r7, #32]
 800e1c2:	e00e      	b.n	800e1e2 <VL53L1_dynamic_zone_update+0xce>
	} else {

		temp = target_rate << 14;
 800e1c4:	89bb      	ldrh	r3, [r7, #12]
 800e1c6:	039b      	lsls	r3, r3, #14
 800e1c8:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800e1ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1cc:	6a3a      	ldr	r2, [r7, #32]
 800e1ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1d2:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800e1d4:	6a3b      	ldr	r3, [r7, #32]
 800e1d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1da:	d302      	bcc.n	800e1e2 <VL53L1_dynamic_zone_update+0xce>
			temp = 0xFFFF;
 800e1dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1e0:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800e1e2:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800e1e4:	6a3b      	ldr	r3, [r7, #32]
 800e1e6:	b298      	uxth	r0, r3
	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800e1e8:	6939      	ldr	r1, [r7, #16]
 800e1ea:	4613      	mov	r3, r2
 800e1ec:	009b      	lsls	r3, r3, #2
 800e1ee:	4413      	add	r3, r2
 800e1f0:	005b      	lsls	r3, r3, #1
 800e1f2:	440b      	add	r3, r1
 800e1f4:	3306      	adds	r3, #6
 800e1f6:	4602      	mov	r2, r0
 800e1f8:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800e1fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	372c      	adds	r7, #44	; 0x2c
 800e202:	46bd      	mov	sp, r7
 800e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e208:	4770      	bx	lr

0800e20a <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 800e20a:	b580      	push	{r7, lr}
 800e20c:	b08a      	sub	sp, #40	; 0x28
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e212:	2300      	movs	r3, #0
 800e214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	3318      	adds	r3, #24
 800e21c:	623b      	str	r3, [r7, #32]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800e21e:	6a3b      	ldr	r3, [r7, #32]
 800e220:	332c      	adds	r3, #44	; 0x2c
 800e222:	61fb      	str	r3, [r7, #28]
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800e224:	6a3b      	ldr	r3, [r7, #32]
 800e226:	33c2      	adds	r3, #194	; 0xc2
 800e228:	61bb      	str	r3, [r7, #24]
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800e22a:	6a3b      	ldr	r3, [r7, #32]
 800e22c:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800e230:	617b      	str	r3, [r7, #20]
	VL53L1_histogram_config_t *pmulti_hist =
 800e232:	69bb      	ldr	r3, [r7, #24]
 800e234:	3302      	adds	r3, #2
 800e236:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	785b      	ldrb	r3, [r3, #1]
 800e23c:	f003 0301 	and.w	r3, r3, #1
 800e240:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800e242:	6a3b      	ldr	r3, [r7, #32]
 800e244:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e248:	461a      	mov	r2, r3
 800e24a:	69bb      	ldr	r3, [r7, #24]
 800e24c:	4413      	add	r3, r2
 800e24e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e252:	2b01      	cmp	r3, #1
 800e254:	d11e      	bne.n	800e294 <VL53L1_multizone_hist_bins_update+0x8a>
		VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800e256:	7bfb      	ldrb	r3, [r7, #15]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d10b      	bne.n	800e274 <VL53L1_multizone_hist_bins_update+0x6a>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800e274:	7bfb      	ldrb	r3, [r7, #15]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d05d      	beq.n	800e336 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	719a      	strb	r2, [r3, #6]
 800e292:	e050      	b.n	800e336 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800e294:	6a3b      	ldr	r3, [r7, #32]
 800e296:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e29a:	461a      	mov	r2, r3
 800e29c:	69bb      	ldr	r3, [r7, #24]
 800e29e:	4413      	add	r3, r2
 800e2a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e2a4:	2b02      	cmp	r3, #2
 800e2a6:	d11e      	bne.n	800e2e6 <VL53L1_multizone_hist_bins_update+0xdc>
		VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800e2a8:	7bfb      	ldrb	r3, [r7, #15]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d10b      	bne.n	800e2c6 <VL53L1_multizone_hist_bins_update+0xbc>
			trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800e2c6:	7bfb      	ldrb	r3, [r7, #15]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d034      	beq.n	800e336 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	719a      	strb	r2, [r3, #6]
 800e2e4:	e027      	b.n	800e336 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800e2e6:	6a3b      	ldr	r3, [r7, #32]
 800e2e8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e2ec:	461a      	mov	r2, r3
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e2f6:	2b03      	cmp	r3, #3
 800e2f8:	d11d      	bne.n	800e336 <VL53L1_multizone_hist_bins_update+0x12c>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800e2fa:	7bfb      	ldrb	r3, [r7, #15]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d10b      	bne.n	800e318 <VL53L1_multizone_hist_bins_update+0x10e>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800e318:	7bfb      	ldrb	r3, [r7, #15]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00b      	beq.n	800e336 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53L1_ERROR_NONE) {
 800e336:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d109      	bne.n	800e352 <VL53L1_multizone_hist_bins_update+0x148>
		VL53L1_copy_hist_bins_to_static_cfg(
 800e33e:	6a3b      	ldr	r3, [r7, #32]
 800e340:	f203 3142 	addw	r1, r3, #834	; 0x342
 800e344:	6a3b      	ldr	r3, [r7, #32]
 800e346:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800e34a:	461a      	mov	r2, r3
 800e34c:	6978      	ldr	r0, [r7, #20]
 800e34e:	f7fd f921 	bl	800b594 <VL53L1_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800e352:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e356:	4618      	mov	r0, r3
 800e358:	3728      	adds	r7, #40	; 0x28
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}

0800e35e <VL53L1_update_internal_stream_counters>:
VL53L1_Error VL53L1_update_internal_stream_counters(
	VL53L1_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800e35e:	b480      	push	{r7}
 800e360:	b089      	sub	sp, #36	; 0x24
 800e362:	af00      	add	r7, sp, #0
 800e364:	60f8      	str	r0, [r7, #12]
 800e366:	607a      	str	r2, [r7, #4]
 800e368:	603b      	str	r3, [r7, #0]
 800e36a:	460b      	mov	r3, r1
 800e36c:	72fb      	strb	r3, [r7, #11]

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e36e:	2300      	movs	r3, #0
 800e370:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53L1_LLDriverData_t  *pdev =
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	3318      	adds	r3, #24
 800e376:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800e378:	69bb      	ldr	r3, [r7, #24]
 800e37a:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800e37e:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800e380:	7dfb      	ldrb	r3, [r7, #23]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d103      	bne.n	800e38e <VL53L1_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	7afa      	ldrb	r2, [r7, #11]
 800e38a:	701a      	strb	r2, [r3, #0]
 800e38c:	e01e      	b.n	800e3cc <VL53L1_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	461a      	mov	r2, r3
 800e394:	7dfb      	ldrb	r3, [r7, #23]
 800e396:	3b01      	subs	r3, #1
 800e398:	429a      	cmp	r2, r3
 800e39a:	d111      	bne.n	800e3c0 <VL53L1_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	2bff      	cmp	r3, #255	; 0xff
 800e3a2:	d103      	bne.n	800e3ac <VL53L1_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2280      	movs	r2, #128	; 0x80
 800e3a8:	701a      	strb	r2, [r3, #0]
 800e3aa:	e005      	b.n	800e3b8 <VL53L1_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	b2da      	uxtb	r2, r3
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	701a      	strb	r2, [r3, #0]
 800e3be:	e005      	b.n	800e3cc <VL53L1_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	b2da      	uxtb	r2, r3
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800e3cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3724      	adds	r7, #36	; 0x24
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr

0800e3dc <VL53L1_set_histogram_multizone_initial_bin_config>:

VL53L1_Error VL53L1_set_histogram_multizone_initial_bin_config(
	VL53L1_zone_config_t		*pzone_cfg,
	VL53L1_histogram_config_t	*phist_cfg,
	VL53L1_histogram_config_t	*pmulti_hist)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b087      	sub	sp, #28
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	60f8      	str	r0, [r7, #12]
 800e3e4:	60b9      	str	r1, [r7, #8]
 800e3e6:	607a      	str	r2, [r7, #4]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e3f2:	2b01      	cmp	r3, #1
 800e3f4:	d118      	bne.n	800e428 <VL53L1_set_histogram_multizone_initial_bin_config+0x4c>
			VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	719a      	strb	r2, [r3, #6]
 800e426:	e03a      	b.n	800e49e <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e42e:	2b02      	cmp	r3, #2
 800e430:	d118      	bne.n	800e464 <VL53L1_set_histogram_multizone_initial_bin_config+0x88>
			VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	719a      	strb	r2, [r3, #6]
 800e462:	e01c      	b.n	800e49e <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e46a:	2b03      	cmp	r3, #3
 800e46c:	d117      	bne.n	800e49e <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	70da      	strb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	719a      	strb	r2, [r3, #6]
	}

	LOG_FUNCTION_END(status);
	return status;
 800e49e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	371c      	adds	r7, #28
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr

0800e4ae <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800e4ae:	b580      	push	{r7, lr}
 800e4b0:	b08a      	sub	sp, #40	; 0x28
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	60f8      	str	r0, [r7, #12]
 800e4b6:	607a      	str	r2, [r7, #4]
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	72fb      	strb	r3, [r7, #11]
 800e4be:	4613      	mov	r3, r2
 800e4c0:	813b      	strh	r3, [r7, #8]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	3318      	adds	r3, #24
 800e4cc:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53L1_calc_macro_period_us(
 800e4d6:	7afa      	ldrb	r2, [r7, #11]
 800e4d8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e4da:	4611      	mov	r1, r2
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7fe f8ca 	bl	800c676 <VL53L1_calc_macro_period_us>
 800e4e2:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800e4e4:	6a3b      	ldr	r3, [r7, #32]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d101      	bne.n	800e4ee <VL53L1_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	623b      	str	r3, [r7, #32]



	timeout_mclks = phasecal_timeout_us << 12;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	031b      	lsls	r3, r3, #12
 800e4f2:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800e4f4:	6a3b      	ldr	r3, [r7, #32]
 800e4f6:	085b      	lsrs	r3, r3, #1
 800e4f8:	69ba      	ldr	r2, [r7, #24]
 800e4fa:	4413      	add	r3, r2
 800e4fc:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800e4fe:	69ba      	ldr	r2, [r7, #24]
 800e500:	6a3b      	ldr	r3, [r7, #32]
 800e502:	fbb2 f3f3 	udiv	r3, r2, r3
 800e506:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	2bff      	cmp	r3, #255	; 0xff
 800e50c:	d904      	bls.n	800e518 <VL53L1_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800e50e:	69fb      	ldr	r3, [r7, #28]
 800e510:	22ff      	movs	r2, #255	; 0xff
 800e512:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800e516:	e004      	b.n	800e522 <VL53L1_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800e518:	69bb      	ldr	r3, [r7, #24]
 800e51a:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800e51c:	69fb      	ldr	r3, [r7, #28]
 800e51e:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	7afa      	ldrb	r2, [r7, #11]
 800e526:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e



	if (status == VL53L1_ERROR_NONE)
 800e52a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d10a      	bne.n	800e548 <VL53L1_set_ref_spad_char_config+0x9a>
		status =
			VL53L1_WrByte(
 800e532:	69fb      	ldr	r3, [r7, #28]
 800e534:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 800e538:	461a      	mov	r2, r3
 800e53a:	214b      	movs	r1, #75	; 0x4b
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f007 f9bd 	bl	80158bc <VL53L1_WrByte>
 800e542:	4603      	mov	r3, r0
 800e544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 800e548:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d10a      	bne.n	800e566 <VL53L1_set_ref_spad_char_config+0xb8>
		status =
			VL53L1_WrByte(
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800e556:	461a      	mov	r2, r3
 800e558:	2160      	movs	r1, #96	; 0x60
 800e55a:	68f8      	ldr	r0, [r7, #12]
 800e55c:	f007 f9ae 	bl	80158bc <VL53L1_WrByte>
 800e560:	4603      	mov	r3, r0
 800e562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800e566:	69fb      	ldr	r3, [r7, #28]
 800e568:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800e56c:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800e574:	757b      	strb	r3, [r7, #21]

	if (status == VL53L1_ERROR_NONE)
 800e576:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d109      	bne.n	800e592 <VL53L1_set_ref_spad_char_config+0xe4>
		status =
			VL53L1_WriteMulti(
 800e57e:	f107 0214 	add.w	r2, r7, #20
 800e582:	2302      	movs	r3, #2
 800e584:	2178      	movs	r1, #120	; 0x78
 800e586:	68f8      	ldr	r0, [r7, #12]
 800e588:	f007 f92c 	bl	80157e4 <VL53L1_WriteMulti>
 800e58c:	4603      	mov	r3, r0
 800e58e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	893a      	ldrh	r2, [r7, #8]
 800e596:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53L1_ERROR_NONE)
 800e59a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d108      	bne.n	800e5b4 <VL53L1_set_ref_spad_char_config+0x106>
		status =
			VL53L1_WrWord(
 800e5a2:	893b      	ldrh	r3, [r7, #8]
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	211c      	movs	r1, #28
 800e5a8:	68f8      	ldr	r0, [r7, #12]
 800e5aa:	f007 f9b1 	bl	8015910 <VL53L1_WrWord>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53L1_ERROR_NONE)
 800e5b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d108      	bne.n	800e5ce <VL53L1_set_ref_spad_char_config+0x120>
		status =
			VL53L1_WrWord(
 800e5bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e5be:	461a      	mov	r2, r3
 800e5c0:	2164      	movs	r1, #100	; 0x64
 800e5c2:	68f8      	ldr	r0, [r7, #12]
 800e5c4:	f007 f9a4 	bl	8015910 <VL53L1_WrWord>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53L1_ERROR_NONE)
 800e5ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d108      	bne.n	800e5e8 <VL53L1_set_ref_spad_char_config+0x13a>
		status =
			VL53L1_WrWord(
 800e5d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e5d8:	461a      	mov	r2, r3
 800e5da:	2166      	movs	r1, #102	; 0x66
 800e5dc:	68f8      	ldr	r0, [r7, #12]
 800e5de:	f007 f997 	bl	8015910 <VL53L1_WrWord>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800e5e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3728      	adds	r7, #40	; 0x28
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 800e5f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e5f8:	b0a2      	sub	sp, #136	; 0x88
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e5fe:	2300      	movs	r3, #0
 800e600:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e606:	3318      	adds	r3, #24
 800e608:	673b      	str	r3, [r7, #112]	; 0x70
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800e60a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e60c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800e610:	3308      	adds	r3, #8
 800e612:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53L1_smudge_corrector_config_t *pconfig =
 800e614:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e616:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800e61a:	3318      	adds	r3, #24
 800e61c:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800e61e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e620:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800e624:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
 800e626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e628:	663b      	str	r3, [r7, #96]	; 0x60
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);
 800e62a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e62c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e630:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800e632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e634:	69db      	ldr	r3, [r3, #28]
 800e636:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
 800e63a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d103      	bne.n	800e64a <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x56>
		peak_duration_us = 1000;
 800e642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e646:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	temp64a = pxmonitor->VL53L1_p_021 +
 800e64a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e64c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53L1_p_020;
 800e64e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53L1_p_021 +
 800e652:	4413      	add	r3, r2
 800e654:	2200      	movs	r2, #0
 800e656:	461c      	mov	r4, r3
 800e658:	4615      	mov	r5, r2
 800e65a:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800e65e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800e662:	4622      	mov	r2, r4
 800e664:	462b      	mov	r3, r5
 800e666:	f04f 0000 	mov.w	r0, #0
 800e66a:	f04f 0100 	mov.w	r1, #0
 800e66e:	0159      	lsls	r1, r3, #5
 800e670:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e674:	0150      	lsls	r0, r2, #5
 800e676:	4602      	mov	r2, r0
 800e678:	460b      	mov	r3, r1
 800e67a:	ebb2 0804 	subs.w	r8, r2, r4
 800e67e:	eb63 0905 	sbc.w	r9, r3, r5
 800e682:	f04f 0200 	mov.w	r2, #0
 800e686:	f04f 0300 	mov.w	r3, #0
 800e68a:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800e68e:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800e692:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800e696:	4690      	mov	r8, r2
 800e698:	4699      	mov	r9, r3
 800e69a:	eb18 0304 	adds.w	r3, r8, r4
 800e69e:	633b      	str	r3, [r7, #48]	; 0x30
 800e6a0:	eb49 0305 	adc.w	r3, r9, r5
 800e6a4:	637b      	str	r3, [r7, #52]	; 0x34
 800e6a6:	f04f 0200 	mov.w	r2, #0
 800e6aa:	f04f 0300 	mov.w	r3, #0
 800e6ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e6b2:	4629      	mov	r1, r5
 800e6b4:	00cb      	lsls	r3, r1, #3
 800e6b6:	4621      	mov	r1, r4
 800e6b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e6bc:	4621      	mov	r1, r4
 800e6be:	00ca      	lsls	r2, r1, #3
 800e6c0:	4610      	mov	r0, r2
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	643b      	str	r3, [r7, #64]	; 0x40
 800e6cc:	647a      	str	r2, [r7, #68]	; 0x44
 800e6ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e6d2:	f7f2 fa91 	bl	8000bf8 <__aeabi_uldivmod>
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	460b      	mov	r3, r1
 800e6da:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800e6de:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800e6e2:	4622      	mov	r2, r4
 800e6e4:	462b      	mov	r3, r5
 800e6e6:	f04f 0000 	mov.w	r0, #0
 800e6ea:	f04f 0100 	mov.w	r1, #0
 800e6ee:	0159      	lsls	r1, r3, #5
 800e6f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e6f4:	0150      	lsls	r0, r2, #5
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	ebb2 0a04 	subs.w	sl, r2, r4
 800e6fe:	eb63 0b05 	sbc.w	fp, r3, r5
 800e702:	f04f 0200 	mov.w	r2, #0
 800e706:	f04f 0300 	mov.w	r3, #0
 800e70a:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e70e:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800e712:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800e716:	4692      	mov	sl, r2
 800e718:	469b      	mov	fp, r3
 800e71a:	eb1a 0304 	adds.w	r3, sl, r4
 800e71e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e720:	eb4b 0305 	adc.w	r3, fp, r5
 800e724:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e726:	f04f 0200 	mov.w	r2, #0
 800e72a:	f04f 0300 	mov.w	r3, #0
 800e72e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800e732:	4629      	mov	r1, r5
 800e734:	00cb      	lsls	r3, r1, #3
 800e736:	4621      	mov	r1, r4
 800e738:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e73c:	4621      	mov	r1, r4
 800e73e:	00ca      	lsls	r2, r1, #3
 800e740:	4610      	mov	r0, r2
 800e742:	4619      	mov	r1, r3
 800e744:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e748:	2200      	movs	r2, #0
 800e74a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e74c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e74e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e752:	f7f2 fa51 	bl	8000bf8 <__aeabi_uldivmod>
 800e756:	4602      	mov	r2, r0
 800e758:	460b      	mov	r3, r1
 800e75a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 800e75e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e760:	689b      	ldr	r3, [r3, #8]
 800e762:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e764:	8ad2      	ldrh	r2, [r2, #22]
 800e766:	fb02 f303 	mul.w	r3, r2, r3
 800e76a:	2200      	movs	r2, #0
 800e76c:	623b      	str	r3, [r7, #32]
 800e76e:	627a      	str	r2, [r7, #36]	; 0x24
 800e770:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e774:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 800e778:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800e77c:	4313      	orrs	r3, r2
 800e77e:	d105      	bne.n	800e78c <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800e780:	f04f 0201 	mov.w	r2, #1
 800e784:	f04f 0300 	mov.w	r3, #0
 800e788:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 800e78c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e790:	4602      	mov	r2, r0
 800e792:	460b      	mov	r3, r1
 800e794:	f04f 0400 	mov.w	r4, #0
 800e798:	f04f 0500 	mov.w	r5, #0
 800e79c:	015d      	lsls	r5, r3, #5
 800e79e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800e7a2:	0154      	lsls	r4, r2, #5
 800e7a4:	4622      	mov	r2, r4
 800e7a6:	462b      	mov	r3, r5
 800e7a8:	1a14      	subs	r4, r2, r0
 800e7aa:	61bc      	str	r4, [r7, #24]
 800e7ac:	eb63 0301 	sbc.w	r3, r3, r1
 800e7b0:	61fb      	str	r3, [r7, #28]
 800e7b2:	f04f 0200 	mov.w	r2, #0
 800e7b6:	f04f 0300 	mov.w	r3, #0
 800e7ba:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800e7be:	464c      	mov	r4, r9
 800e7c0:	00a3      	lsls	r3, r4, #2
 800e7c2:	4644      	mov	r4, r8
 800e7c4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e7c8:	4644      	mov	r4, r8
 800e7ca:	00a2      	lsls	r2, r4, #2
 800e7cc:	4614      	mov	r4, r2
 800e7ce:	461d      	mov	r5, r3
 800e7d0:	4623      	mov	r3, r4
 800e7d2:	181b      	adds	r3, r3, r0
 800e7d4:	613b      	str	r3, [r7, #16]
 800e7d6:	462b      	mov	r3, r5
 800e7d8:	eb41 0303 	adc.w	r3, r1, r3
 800e7dc:	617b      	str	r3, [r7, #20]
 800e7de:	f04f 0200 	mov.w	r2, #0
 800e7e2:	f04f 0300 	mov.w	r3, #0
 800e7e6:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e7ea:	4629      	mov	r1, r5
 800e7ec:	02cb      	lsls	r3, r1, #11
 800e7ee:	4621      	mov	r1, r4
 800e7f0:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800e7f4:	4621      	mov	r1, r4
 800e7f6:	02ca      	lsls	r2, r1, #11
 800e7f8:	461c      	mov	r4, r3
 800e7fa:	4613      	mov	r3, r2
 800e7fc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800e800:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800e804:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e808:	f7f2 f9f6 	bl	8000bf8 <__aeabi_uldivmod>
 800e80c:	4602      	mov	r2, r0
 800e80e:	460b      	mov	r3, r1
 800e810:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 800e814:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e818:	4602      	mov	r2, r0
 800e81a:	460b      	mov	r3, r1
 800e81c:	f04f 0400 	mov.w	r4, #0
 800e820:	f04f 0500 	mov.w	r5, #0
 800e824:	015d      	lsls	r5, r3, #5
 800e826:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800e82a:	0154      	lsls	r4, r2, #5
 800e82c:	4622      	mov	r2, r4
 800e82e:	462b      	mov	r3, r5
 800e830:	1a14      	subs	r4, r2, r0
 800e832:	60bc      	str	r4, [r7, #8]
 800e834:	eb63 0301 	sbc.w	r3, r3, r1
 800e838:	60fb      	str	r3, [r7, #12]
 800e83a:	f04f 0200 	mov.w	r2, #0
 800e83e:	f04f 0300 	mov.w	r3, #0
 800e842:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800e846:	464c      	mov	r4, r9
 800e848:	00a3      	lsls	r3, r4, #2
 800e84a:	4644      	mov	r4, r8
 800e84c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e850:	4644      	mov	r4, r8
 800e852:	00a2      	lsls	r2, r4, #2
 800e854:	4614      	mov	r4, r2
 800e856:	461d      	mov	r5, r3
 800e858:	4623      	mov	r3, r4
 800e85a:	181b      	adds	r3, r3, r0
 800e85c:	603b      	str	r3, [r7, #0]
 800e85e:	462b      	mov	r3, r5
 800e860:	eb41 0303 	adc.w	r3, r1, r3
 800e864:	607b      	str	r3, [r7, #4]
 800e866:	f04f 0200 	mov.w	r2, #0
 800e86a:	f04f 0300 	mov.w	r3, #0
 800e86e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e872:	4629      	mov	r1, r5
 800e874:	02cb      	lsls	r3, r1, #11
 800e876:	4621      	mov	r1, r4
 800e878:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800e87c:	4621      	mov	r1, r4
 800e87e:	02ca      	lsls	r2, r1, #11
 800e880:	461c      	mov	r4, r3
 800e882:	4613      	mov	r3, r2
 800e884:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800e888:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800e88c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e890:	f7f2 f9b2 	bl	8000bf8 <__aeabi_uldivmod>
 800e894:	4602      	mov	r2, r0
 800e896:	460b      	mov	r3, r1
 800e898:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 800e89c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e89e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8a0:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800e8a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d802      	bhi.n	800e8b0 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800e8aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8ac:	2202      	movs	r2, #2
 800e8ae:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800e8b0:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3788      	adds	r7, #136	; 0x88
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800e8c0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53L1_smudge_corrector_config_t	*pconfig,
	VL53L1_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b096      	sub	sp, #88	; 0x58
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	607a      	str	r2, [r7, #4]
 800e8cc:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	3318      	adds	r3, #24
 800e8d8:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t histo_merge_nb;
	uint8_t i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800e8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8dc:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800e8e0:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800e8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8e4:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800e8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800e8ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8ec:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d108      	bne.n	800e906 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e8fa:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d101      	bne.n	800e906 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
 800e902:	2301      	movs	r3, #1
 800e904:	e000      	b.n	800e908 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x48>
 800e906:	2300      	movs	r3, #0
 800e908:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		 VL53L1_PRESETMODE_RANGING);


	if (add_smudge == 1) {
 800e90c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800e910:	2b01      	cmp	r3, #1
 800e912:	d107      	bne.n	800e924 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x64>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	889b      	ldrh	r3, [r3, #4]
 800e918:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	609a      	str	r2, [r3, #8]
 800e922:	e002      	b.n	800e92a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x6a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	68ba      	ldr	r2, [r7, #8]
 800e928:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800e92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92c:	689b      	ldr	r3, [r3, #8]
 800e92e:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800e930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e932:	899b      	ldrh	r3, [r3, #12]
 800e934:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800e938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93a:	89db      	ldrh	r3, [r3, #14]
 800e93c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e946:	2b00      	cmp	r3, #0
 800e948:	d004      	beq.n	800e954 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x94>
		(pconfig->scaler_calc_method == 1)) &&
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800e950:	2b01      	cmp	r3, #1
 800e952:	d125      	bne.n	800e9a0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800e954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e956:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d021      	beq.n	800e9a0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800e95c:	f107 0313 	add.w	r3, r7, #19
 800e960:	4619      	mov	r1, r3
 800e962:	68f8      	ldr	r0, [r7, #12]
 800e964:	f000 fe44 	bl	800f5f0 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800e968:	7cfb      	ldrb	r3, [r7, #19]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d101      	bne.n	800e972 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			histo_merge_nb = 1;
 800e96e:	2301      	movs	r3, #1
 800e970:	74fb      	strb	r3, [r7, #19]
		if (!merge_enabled)
 800e972:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e976:	2b00      	cmp	r3, #0
 800e978:	d103      	bne.n	800e982 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
			orig_xtalk_offset =
 800e97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	653b      	str	r3, [r7, #80]	; 0x50
 800e980:	e006      	b.n	800e990 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800e982:	7cfb      	ldrb	r3, [r7, #19]
 800e984:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800e986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e988:	3202      	adds	r2, #2
 800e98a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e98e:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800e990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e992:	889b      	ldrh	r3, [r3, #4]
 800e994:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800e998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99a:	88db      	ldrh	r3, [r3, #6]
 800e99c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d10a      	bne.n	800e9c0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 800e9aa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d106      	bne.n	800e9c0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x01;
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	795b      	ldrb	r3, [r3, #5]
 800e9b6:	f043 0301 	orr.w	r3, r3, #1
 800e9ba:	b2da      	uxtb	r2, r3
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d10a      	bne.n	800e9e0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
 800e9ca:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d106      	bne.n	800e9e0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
		pout->gradient_zero_flag |= 0x02;
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	795b      	ldrb	r3, [r3, #5]
 800e9d6:	f043 0302 	orr.w	r3, r3, #2
 800e9da:	b2da      	uxtb	r2, r3
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800e9e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d101      	bne.n	800e9ea <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x12a>
		orig_xtalk_offset = 1;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e9f0:	2b01      	cmp	r3, #1
 800e9f2:	d108      	bne.n	800ea06 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x146>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e9f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ea00:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800ea04:	e019      	b.n	800ea3a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x17a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800ea06:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ea0a:	019b      	lsls	r3, r3, #6
 800ea0c:	461a      	mov	r2, r3
 800ea0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800ea1e:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800ea20:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800ea24:	019b      	lsls	r3, r3, #6
 800ea26:	461a      	mov	r2, r3
 800ea28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea2e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800ea38:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d12a      	bne.n	800ea9a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1da>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	689b      	ldr	r3, [r3, #8]
 800ea48:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800ea4c:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800ea50:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800ea52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea54:	119b      	asrs	r3, r3, #6
 800ea56:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800ea58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea5e:	db02      	blt.n	800ea66 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1a6>
			itemp32 = 0xFFFF;
 800ea60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea64:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800ea66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea68:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	689b      	ldr	r3, [r3, #8]
 800ea72:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800ea76:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800ea7a:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800ea7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea7e:	119b      	asrs	r3, r3, #6
 800ea80:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800ea82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea88:	db02      	blt.n	800ea90 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1d0>
			itemp32 = 0xFFFF;
 800ea8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea8e:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800ea90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea92:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	81da      	strh	r2, [r3, #14]
 800ea98:	e042      	b.n	800eb20 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>
	} else if (pconfig->scaler_calc_method == 1) {
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eaa0:	2b01      	cmp	r3, #1
 800eaa2:	d13d      	bne.n	800eb20 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800eaa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eaaa:	1ad3      	subs	r3, r2, r3
 800eaac:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800eaae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	da00      	bge.n	800eab6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
 800eab4:	330f      	adds	r3, #15
 800eab6:	111b      	asrs	r3, r3, #4
 800eab8:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800eaba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800eac0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800eac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eac6:	4413      	add	r3, r2
 800eac8:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800eaca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eacc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ead0:	db02      	blt.n	800ead8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x218>
			itemp32 = 0xFFFF;
 800ead2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ead6:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800ead8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eada:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800eae4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eae6:	1ad3      	subs	r3, r2, r3
 800eae8:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800eaea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaec:	4a51      	ldr	r2, [pc, #324]	; (800ec34 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x374>)
 800eaee:	fb82 1203 	smull	r1, r2, r2, r3
 800eaf2:	1152      	asrs	r2, r2, #5
 800eaf4:	17db      	asrs	r3, r3, #31
 800eaf6:	1ad3      	subs	r3, r2, r3
 800eaf8:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800eafa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eafc:	009b      	lsls	r3, r3, #2
 800eafe:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800eb00:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800eb04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb06:	4413      	add	r3, r2
 800eb08:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800eb0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb10:	db02      	blt.n	800eb18 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x258>
			itemp32 = 0xFFFF;
 800eb12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb16:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800eb18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb1a:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	81da      	strh	r2, [r3, #14]
	}


	if (pconfig->smudge_corr_apply_enabled == 1 &&
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	785b      	ldrb	r3, [r3, #1]
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d177      	bne.n	800ec18 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
 800eb28:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	d073      	beq.n	800ec18 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
			(soft_update != 1)) {
		pout->new_xtalk_applied_flag = 1;
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	2201      	movs	r2, #1
 800eb34:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	689b      	ldr	r3, [r3, #8]
 800eb3a:	627b      	str	r3, [r7, #36]	; 0x24

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800eb3c:	f107 0313 	add.w	r3, r7, #19
 800eb40:	4619      	mov	r1, r3
 800eb42:	68f8      	ldr	r0, [r7, #12]
 800eb44:	f000 fd54 	bl	800f5f0 <VL53L1_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800eb48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb4a:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800eb4e:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800eb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb52:	3308      	adds	r3, #8
 800eb54:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 800eb56:	7cfb      	ldrb	r3, [r7, #19]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d041      	beq.n	800ebe0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800eb5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d03d      	beq.n	800ebe0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800eb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d03a      	beq.n	800ebe0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			cXtalk =
 800eb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	61fb      	str	r3, [r7, #28]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800eb70:	69fb      	ldr	r3, [r7, #28]
 800eb72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eb76:	fb03 f202 	mul.w	r2, r3, r2
 800eb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb80:	61bb      	str	r3, [r7, #24]
			if ((max ==  0)||
 800eb82:	6a3b      	ldr	r3, [r7, #32]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d004      	beq.n	800eb92 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800eb8c:	69ba      	ldr	r2, [r7, #24]
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d303      	bcc.n	800eb9a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2da>
				pout->new_xtalk_applied_flag = 0;
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	2200      	movs	r2, #0
 800eb96:	719a      	strb	r2, [r3, #6]
 800eb98:	e022      	b.n	800ebe0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			else {
				incXtalk = nXtalk / max;
 800eb9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb9c:	6a3b      	ldr	r3, [r7, #32]
 800eb9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800eba2:	617b      	str	r3, [r7, #20]
				cval = 0;
 800eba4:	2300      	movs	r3, #0
 800eba6:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800eba8:	2300      	movs	r3, #0
 800ebaa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800ebae:	e00e      	b.n	800ebce <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
					cval += incXtalk;
 800ebb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800ebb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebbc:	601a      	str	r2, [r3, #0]
					pcpo++;
 800ebbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebc0:	3304      	adds	r3, #4
 800ebc2:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800ebc4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ebc8:	3301      	adds	r3, #1
 800ebca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800ebce:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800ebd2:	6a3b      	ldr	r3, [r7, #32]
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d3ea      	bcc.n	800ebb0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2f0>
				}
				*pcpo = nXtalk;
 800ebda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebde:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	799b      	ldrb	r3, [r3, #6]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d017      	beq.n	800ec18 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800ebec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebee:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800ebf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf8:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800ec00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec02:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	789b      	ldrb	r3, [r3, #2]
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d105      	bne.n	800ec18 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

			pconfig->smudge_corr_apply_enabled = 0;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2200      	movs	r2, #0
 800ec16:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800ec18:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d002      	beq.n	800ec26 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x366>
		pout->smudge_corr_valid = 1;
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	2201      	movs	r2, #1
 800ec24:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800ec26:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3758      	adds	r7, #88	; 0x58
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}
 800ec32:	bf00      	nop
 800ec34:	66666667 	.word	0x66666667

0800ec38 <VL53L1_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53L1_Error VL53L1_dynamic_xtalk_correction_corrector(
	VL53L1_DEV                          Dev
	)
{
 800ec38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec3c:	b0a2      	sub	sp, #136	; 0x88
 800ec3e:	af02      	add	r7, sp, #8
 800ec40:	6278      	str	r0, [r7, #36]	; 0x24



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ec42:	2300      	movs	r3, #0
 800ec44:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ec48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4a:	3318      	adds	r3, #24
 800ec4c:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800ec4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec50:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800ec54:	3308      	adds	r3, #8
 800ec56:	667b      	str	r3, [r7, #100]	; 0x64
	VL53L1_smudge_corrector_config_t *pconfig =
 800ec58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec5a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ec5e:	3318      	adds	r3, #24
 800ec60:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800ec62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec64:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800ec68:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53L1_smudge_corrector_data_t *pout =
 800ec6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec6c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ec70:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53L1_range_results_t  *pR = &(pres->range_results);
 800ec72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec74:	657b      	str	r3, [r7, #84]	; 0x54
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800ec76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec78:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800ec7c:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 800ec84:	2300      	movs	r3, #0
 800ec86:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 800ec90:	2300      	movs	r3, #0
 800ec92:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 800ec96:	2300      	movs	r3, #0
 800ec98:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 800ec9a:	f04f 0200 	mov.w	r2, #0
 800ec9e:	f04f 0300 	mov.w	r3, #0
 800eca2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800eca6:	2300      	movs	r3, #0
 800eca8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 800ecac:	2300      	movs	r3, #0
 800ecae:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t merge_enabled;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800ecc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ecca:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800ecce:	2b01      	cmp	r3, #1
 800ecd0:	d108      	bne.n	800ece4 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800ecd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ecd8:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d101      	bne.n	800ece4 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
 800ece0:	2301      	movs	r3, #1
 800ece2:	e000      	b.n	800ece6 <VL53L1_dynamic_xtalk_correction_corrector+0xae>
 800ece4:	2300      	movs	r3, #0
 800ece6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 VL53L1_PRESETMODE_RANGING);

	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800ecea:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800ecee:	4619      	mov	r1, r3
 800ecf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ecf2:	f000 fc7d 	bl	800f5f0 <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 800ecf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d003      	beq.n	800ed06 <VL53L1_dynamic_xtalk_correction_corrector+0xce>
 800ecfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d102      	bne.n	800ed0c <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
		histo_merge_nb = 1;
 800ed06:	2301      	movs	r3, #1
 800ed08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800ed0c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ed0e:	f000 fb15 	bl	800f33c <VL53L1_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800ed12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d00a      	beq.n	800ed30 <VL53L1_dynamic_xtalk_correction_corrector+0xf8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 800ed1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ed22:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800ed26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed28:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d901      	bls.n	800ed34 <VL53L1_dynamic_xtalk_correction_corrector+0xfc>
 800ed30:	2301      	movs	r3, #1
 800ed32:	e000      	b.n	800ed36 <VL53L1_dynamic_xtalk_correction_corrector+0xfe>
 800ed34:	2300      	movs	r3, #0
 800ed36:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete = ((!merge_enabled) ||
 800ed3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d006      	beq.n	800ed50 <VL53L1_dynamic_xtalk_correction_corrector+0x118>
	(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800ed42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed44:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 800ed48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
	merging_complete = ((!merge_enabled) ||
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d101      	bne.n	800ed54 <VL53L1_dynamic_xtalk_correction_corrector+0x11c>
 800ed50:	2301      	movs	r3, #1
 800ed52:	e000      	b.n	800ed56 <VL53L1_dynamic_xtalk_correction_corrector+0x11e>
 800ed54:	2300      	movs	r3, #0
 800ed56:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800ed5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed5c:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800ed5e:	2b01      	cmp	r3, #1
 800ed60:	d10e      	bne.n	800ed80 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pconfig->smudge_corr_enabled == 1) &&
 800ed62:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d00a      	beq.n	800ed80 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pR->xmonitor.range_status
 800ed6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed6c:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800ed70:	2b09      	cmp	r3, #9
 800ed72:	d105      	bne.n	800ed80 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800ed74:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d001      	beq.n	800ed80 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	e000      	b.n	800ed82 <VL53L1_dynamic_xtalk_correction_corrector+0x14a>
 800ed80:	2300      	movs	r3, #0
	run_smudge_detection =
 800ed82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800ed86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed88:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800ed8c:	2b09      	cmp	r3, #9
 800ed8e:	f000 80a6 	beq.w	800eede <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800ed92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed94:	781b      	ldrb	r3, [r3, #0]
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800ed96:	2b01      	cmp	r3, #1
 800ed98:	f040 80a1 	bne.w	800eede <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>

		run_nodetect = 2;
 800ed9c:	2302      	movs	r3, #2
 800ed9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800eda2:	2300      	movs	r3, #0
 800eda4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800eda8:	e02d      	b.n	800ee06 <VL53L1_dynamic_xtalk_correction_corrector+0x1ce>
			if (pR->VL53L1_p_002[i].range_status ==
 800edaa:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800edae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800edb0:	234c      	movs	r3, #76	; 0x4c
 800edb2:	fb01 f303 	mul.w	r3, r1, r3
 800edb6:	4413      	add	r3, r2
 800edb8:	335e      	adds	r3, #94	; 0x5e
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	2b09      	cmp	r3, #9
 800edbe:	d11d      	bne.n	800edfc <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				VL53L1_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53L1_p_002[i].median_range_mm
 800edc0:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800edc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800edc6:	234c      	movs	r3, #76	; 0x4c
 800edc8:	fb01 f303 	mul.w	r3, r1, r3
 800edcc:	4413      	add	r3, r2
 800edce:	335a      	adds	r3, #90	; 0x5a
 800edd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800edd4:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800edd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800edd8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53L1_p_002[i].median_range_mm
 800edda:	429a      	cmp	r2, r3
 800eddc:	dc03      	bgt.n	800ede6 <VL53L1_dynamic_xtalk_correction_corrector+0x1ae>
					run_nodetect = 0;
 800edde:	2300      	movs	r3, #0
 800ede0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800ede4:	e00a      	b.n	800edfc <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				} else {
					if (run_nodetect == 2) {
 800ede6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800edea:	2b02      	cmp	r3, #2
 800edec:	d106      	bne.n	800edfc <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
						run_nodetect = 1;
 800edee:	2301      	movs	r3, #1
 800edf0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 800edf4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800edf8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800edfc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ee00:	3301      	adds	r3, #1
 800ee02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ee06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee08:	7c9a      	ldrb	r2, [r3, #18]
 800ee0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d3cb      	bcc.n	800edaa <VL53L1_dynamic_xtalk_correction_corrector+0x172>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800ee12:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee16:	2b02      	cmp	r3, #2
 800ee18:	d102      	bne.n	800ee20 <VL53L1_dynamic_xtalk_correction_corrector+0x1e8>

			run_nodetect = 0;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53L1_p_002[nodetect_index].ambient_count_rate_mcps;
 800ee20:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 800ee24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee26:	234c      	movs	r3, #76	; 0x4c
 800ee28:	fb01 f303 	mul.w	r3, r1, r3
 800ee2c:	4413      	add	r3, r2
 800ee2e:	3348      	adds	r3, #72	; 0x48
 800ee30:	881b      	ldrh	r3, [r3, #0]
 800ee32:	863b      	strh	r3, [r7, #48]	; 0x30

		if (run_nodetect == 1) {
 800ee34:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	d150      	bne.n	800eede <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>




			utemp64 = 1000 * ((uint64_t)amr);
 800ee3c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ee3e:	2200      	movs	r2, #0
 800ee40:	469a      	mov	sl, r3
 800ee42:	4693      	mov	fp, r2
 800ee44:	4652      	mov	r2, sl
 800ee46:	465b      	mov	r3, fp
 800ee48:	f04f 0000 	mov.w	r0, #0
 800ee4c:	f04f 0100 	mov.w	r1, #0
 800ee50:	0159      	lsls	r1, r3, #5
 800ee52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ee56:	0150      	lsls	r0, r2, #5
 800ee58:	4602      	mov	r2, r0
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	ebb2 040a 	subs.w	r4, r2, sl
 800ee60:	eb63 050b 	sbc.w	r5, r3, fp
 800ee64:	f04f 0200 	mov.w	r2, #0
 800ee68:	f04f 0300 	mov.w	r3, #0
 800ee6c:	00ab      	lsls	r3, r5, #2
 800ee6e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800ee72:	00a2      	lsls	r2, r4, #2
 800ee74:	4614      	mov	r4, r2
 800ee76:	461d      	mov	r5, r3
 800ee78:	eb14 080a 	adds.w	r8, r4, sl
 800ee7c:	eb45 090b 	adc.w	r9, r5, fp
 800ee80:	f04f 0200 	mov.w	r2, #0
 800ee84:	f04f 0300 	mov.w	r3, #0
 800ee88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ee8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ee90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ee94:	4690      	mov	r8, r2
 800ee96:	4699      	mov	r9, r3
 800ee98:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 800ee9c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800eea0:	f04f 0200 	mov.w	r2, #0
 800eea4:	f04f 0300 	mov.w	r3, #0
 800eea8:	024b      	lsls	r3, r1, #9
 800eeaa:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800eeae:	0242      	lsls	r2, r0, #9
 800eeb0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800eeb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eeb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeb8:	2200      	movs	r2, #0
 800eeba:	61bb      	str	r3, [r7, #24]
 800eebc:	61fa      	str	r2, [r7, #28]
 800eebe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800eec2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800eec6:	4621      	mov	r1, r4
 800eec8:	428a      	cmp	r2, r1
 800eeca:	4629      	mov	r1, r5
 800eecc:	418b      	sbcs	r3, r1
 800eece:	d203      	bcs.n	800eed8 <VL53L1_dynamic_xtalk_correction_corrector+0x2a0>
				run_nodetect = 1;
 800eed0:	2301      	movs	r3, #1
 800eed2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800eed6:	e002      	b.n	800eede <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
			else
				run_nodetect = 0;
 800eed8:	2300      	movs	r3, #0
 800eeda:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 800eede:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	f000 810b 	beq.w	800f0fe <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>

		pint->nodetect_counter = 0;
 800eee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eeea:	2200      	movs	r2, #0
 800eeec:	611a      	str	r2, [r3, #16]


		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 800eeee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eef0:	f7ff fb80 	bl	800e5f4 <VL53L1_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800eef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eef6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800eefa:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53L1_p_012;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800eefc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800ef02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef04:	009b      	lsls	r3, r3, #2
 800ef06:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800ef08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef0a:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800ef0c:	009b      	lsls	r3, r3, #2
 800ef0e:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800ef10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef14:	1ad2      	subs	r2, r2, r3
 800ef16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef18:	4413      	add	r3, r2
 800ef1a:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800ef1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	da02      	bge.n	800ef28 <VL53L1_dynamic_xtalk_correction_corrector+0x2f0>
			itemp32 = itemp32 * (-1);
 800ef22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef24:	425b      	negs	r3, r3
 800ef26:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800ef28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef2a:	699b      	ldr	r3, [r3, #24]
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef30:	4293      	cmp	r3, r2
 800ef32:	dd0c      	ble.n	800ef4e <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800ef34:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 800ef36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800ef38:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800ef3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	da03      	bge.n	800ef48 <VL53L1_dynamic_xtalk_correction_corrector+0x310>
				pout->single_xtalk_delta_flag = 1;
 800ef40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef42:	2201      	movs	r2, #1
 800ef44:	709a      	strb	r2, [r3, #2]
 800ef46:	e002      	b.n	800ef4e <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800ef48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef4a:	2202      	movs	r2, #2
 800ef4c:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800ef4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	1c5a      	adds	r2, r3, #1
 800ef54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef56:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800ef58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef5e:	695b      	ldr	r3, [r3, #20]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d906      	bls.n	800ef72 <VL53L1_dynamic_xtalk_correction_corrector+0x33a>
			pout->sample_limit_exceeded_flag = 1;
 800ef64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef66:	2201      	movs	r2, #1
 800ef68:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800ef6a:	2302      	movs	r3, #2
 800ef6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800ef70:	e014      	b.n	800ef9c <VL53L1_dynamic_xtalk_correction_corrector+0x364>
		} else {
			pint->accumulator = pint->accumulator +
 800ef72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef74:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ef78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef7a:	2000      	movs	r0, #0
 800ef7c:	6139      	str	r1, [r7, #16]
 800ef7e:	6178      	str	r0, [r7, #20]
 800ef80:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800ef84:	4621      	mov	r1, r4
 800ef86:	1851      	adds	r1, r2, r1
 800ef88:	60b9      	str	r1, [r7, #8]
 800ef8a:	4629      	mov	r1, r5
 800ef8c:	eb43 0101 	adc.w	r1, r3, r1
 800ef90:	60f9      	str	r1, [r7, #12]
 800ef92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef94:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ef98:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800ef9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef9e:	681a      	ldr	r2, [r3, #0]
 800efa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d202      	bcs.n	800efae <VL53L1_dynamic_xtalk_correction_corrector+0x376>
			continue_processing = CONT_NEXT_LOOP;
 800efa8:	2301      	movs	r3, #1
 800efaa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800efae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efb0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800efb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2200      	movs	r2, #0
 800efba:	603b      	str	r3, [r7, #0]
 800efbc:	607a      	str	r2, [r7, #4]
 800efbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efc2:	f7f1 fe19 	bl	8000bf8 <__aeabi_uldivmod>
 800efc6:	4602      	mov	r2, r0
 800efc8:	460b      	mov	r3, r1
		xtalk_offset_out =
 800efca:	4613      	mov	r3, r2
 800efcc:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800efce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800efd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd2:	1ad2      	subs	r2, r2, r3
 800efd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efd6:	4413      	add	r3, r2
 800efd8:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800efda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efdc:	2b00      	cmp	r3, #0
 800efde:	da02      	bge.n	800efe6 <VL53L1_dynamic_xtalk_correction_corrector+0x3ae>
			itemp32 = itemp32 * (-1);
 800efe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efe2:	425b      	negs	r3, r3
 800efe4:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 800efe6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800efea:	2b00      	cmp	r3, #0
 800efec:	d112      	bne.n	800f014 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800efee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eff0:	69db      	ldr	r3, [r3, #28]
 800eff2:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800eff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eff6:	4293      	cmp	r3, r2
 800eff8:	db0c      	blt.n	800f014 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800effa:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 800effc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800effe:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800f000:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f002:	429a      	cmp	r2, r3
 800f004:	da03      	bge.n	800f00e <VL53L1_dynamic_xtalk_correction_corrector+0x3d6>
				pout->averaged_xtalk_delta_flag = 1;
 800f006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f008:	2201      	movs	r2, #1
 800f00a:	70da      	strb	r2, [r3, #3]
 800f00c:	e002      	b.n	800f014 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800f00e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f010:	2202      	movs	r2, #2
 800f012:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800f014:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d108      	bne.n	800f02e <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800f01c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f01e:	69db      	ldr	r3, [r3, #28]
 800f020:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800f022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f024:	4293      	cmp	r3, r2
 800f026:	da02      	bge.n	800f02e <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			)

			continue_processing = CONT_RESET;
 800f028:	2302      	movs	r3, #2
 800f02a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 800f02e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f030:	2200      	movs	r2, #0
 800f032:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800f034:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d112      	bne.n	800f062 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800f03c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f03e:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800f040:	2b00      	cmp	r3, #0
 800f042:	d00e      	beq.n	800f062 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800f044:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f046:	6a1b      	ldr	r3, [r3, #32]
 800f048:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800f04c:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800f050:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f052:	429a      	cmp	r2, r3
 800f054:	d905      	bls.n	800f062 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
				pout->smudge_corr_clipped = 1;
 800f056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f058:	2201      	movs	r2, #1
 800f05a:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800f05c:	2302      	movs	r3, #2
 800f05e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800f062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f064:	7c1b      	ldrb	r3, [r3, #16]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d007      	beq.n	800f07a <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800f06a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f06c:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800f06e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f070:	429a      	cmp	r2, r3
 800f072:	d902      	bls.n	800f07a <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			xtalk_offset_out =
 800f074:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800f07a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f07c:	7c1b      	ldrb	r3, [r3, #16]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d107      	bne.n	800f092 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800f082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f084:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800f086:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f088:	429a      	cmp	r2, r3
 800f08a:	d202      	bcs.n	800f092 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			xtalk_offset_out =
 800f08c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800f092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f094:	089b      	lsrs	r3, r3, #2
 800f096:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800f098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f09a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f09e:	d301      	bcc.n	800f0a4 <VL53L1_dynamic_xtalk_correction_corrector+0x46c>
			xtalk_offset_out = 0x3FFFF;
 800f0a0:	4b3e      	ldr	r3, [pc, #248]	; (800f19c <VL53L1_dynamic_xtalk_correction_corrector+0x564>)
 800f0a2:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 800f0a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d10d      	bne.n	800f0c8 <VL53L1_dynamic_xtalk_correction_corrector+0x490>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	9301      	str	r3, [sp, #4]
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	9300      	str	r3, [sp, #0]
 800f0b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f0b8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f0ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0bc:	f7ff fc00 	bl	800e8c0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800f0c0:	2302      	movs	r3, #2
 800f0c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800f0c6:	e009      	b.n	800f0dc <VL53L1_dynamic_xtalk_correction_corrector+0x4a4>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	9301      	str	r3, [sp, #4]
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	9300      	str	r3, [sp, #0]
 800f0d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f0d4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f0d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0d8:	f7ff fbf2 	bl	800e8c0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800f0dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f0e0:	2b02      	cmp	r3, #2
 800f0e2:	d10c      	bne.n	800f0fe <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>
			pint->accumulator = 0;
 800f0e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f0e6:	f04f 0200 	mov.w	r2, #0
 800f0ea:	f04f 0300 	mov.w	r3, #0
 800f0ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800f0f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800f0f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800f0fe:	2300      	movs	r3, #0
 800f100:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 800f104:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f108:	2b01      	cmp	r3, #1
 800f10a:	d140      	bne.n	800f18e <VL53L1_dynamic_xtalk_correction_corrector+0x556>

		pint->nodetect_counter += 1;
 800f10c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f10e:	691b      	ldr	r3, [r3, #16]
 800f110:	1c5a      	adds	r2, r3, #1
 800f112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f114:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800f116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f118:	691a      	ldr	r2, [r3, #16]
 800f11a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f11e:	429a      	cmp	r2, r3
 800f120:	d202      	bcs.n	800f128 <VL53L1_dynamic_xtalk_correction_corrector+0x4f0>
			continue_processing = CONT_NEXT_LOOP;
 800f122:	2301      	movs	r3, #1
 800f124:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800f128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f12c:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 800f12e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f132:	2b00      	cmp	r3, #0
 800f134:	d110      	bne.n	800f158 <VL53L1_dynamic_xtalk_correction_corrector+0x520>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800f136:	2300      	movs	r3, #0
 800f138:	9301      	str	r3, [sp, #4]
 800f13a:	2300      	movs	r3, #0
 800f13c:	9300      	str	r3, [sp, #0]
 800f13e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f140:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f142:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f146:	f7ff fbbb 	bl	800e8c0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800f14a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f14c:	2202      	movs	r2, #2
 800f14e:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800f150:	2302      	movs	r3, #2
 800f152:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800f156:	e009      	b.n	800f16c <VL53L1_dynamic_xtalk_correction_corrector+0x534>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800f158:	2301      	movs	r3, #1
 800f15a:	9301      	str	r3, [sp, #4]
 800f15c:	2300      	movs	r3, #0
 800f15e:	9300      	str	r3, [sp, #0]
 800f160:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f162:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f164:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f166:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f168:	f7ff fbaa 	bl	800e8c0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800f16c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f170:	2b02      	cmp	r3, #2
 800f172:	d10c      	bne.n	800f18e <VL53L1_dynamic_xtalk_correction_corrector+0x556>
			pint->accumulator = 0;
 800f174:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f176:	f04f 0200 	mov.w	r2, #0
 800f17a:	f04f 0300 	mov.w	r3, #0
 800f17e:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800f182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f184:	2200      	movs	r2, #0
 800f186:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800f188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f18a:	2200      	movs	r2, #0
 800f18c:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800f18e:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 800f192:	4618      	mov	r0, r3
 800f194:	3780      	adds	r7, #128	; 0x80
 800f196:	46bd      	mov	sp, r7
 800f198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f19c:	0003ffff 	.word	0x0003ffff

0800f1a0 <VL53L1_dynamic_xtalk_correction_data_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_data_init(
	VL53L1_DEV                          Dev
	)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b086      	sub	sp, #24
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	3318      	adds	r3, #24
 800f1b0:	613b      	str	r3, [r7, #16]
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800f1b8:	3308      	adds	r3, #8
 800f1ba:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1da:	2200      	movs	r2, #0
 800f1dc:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f1ea:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f1fa:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f204:	461a      	mov	r2, r3
 800f206:	2300      	movs	r3, #0
 800f208:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f212:	2200      	movs	r2, #0
 800f214:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800f218:	693b      	ldr	r3, [r7, #16]
 800f21a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f21e:	461a      	mov	r2, r3
 800f220:	23c8      	movs	r3, #200	; 0xc8
 800f222:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f22c:	461a      	mov	r2, r3
 800f22e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f232:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f23c:	461a      	mov	r2, r3
 800f23e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f242:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
		VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f24c:	461a      	mov	r2, r3
 800f24e:	4b3a      	ldr	r3, [pc, #232]	; (800f338 <VL53L1_dynamic_xtalk_correction_data_init+0x198>)
 800f250:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f25a:	461a      	mov	r2, r3
 800f25c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800f260:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f26a:	2200      	movs	r2, #0
 800f26c:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f276:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f27a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f284:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f288:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f292:	2200      	movs	r2, #0
 800f294:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f29e:	461a      	mov	r2, r3
 800f2a0:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 800f2a4:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	230a      	movs	r3, #10
 800f2b2:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2bc:	461a      	mov	r2, r3
 800f2be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f2c2:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2cc:	f44f 7261 	mov.w	r2, #900	; 0x384
 800f2d0:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2da:	461a      	mov	r2, r3
 800f2dc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f2e0:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
		VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
	pdev->smudge_corrector_internals.required_samples = 0;
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
	pdev->smudge_corrector_internals.accumulator = 0;
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800f306:	3310      	adds	r3, #16
 800f308:	4619      	mov	r1, r3
 800f30a:	f04f 0200 	mov.w	r2, #0
 800f30e:	f04f 0300 	mov.w	r3, #0
 800f312:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f31c:	461a      	mov	r2, r3
 800f31e:	2300      	movs	r3, #0
 800f320:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800f324:	68f8      	ldr	r0, [r7, #12]
 800f326:	f000 f809 	bl	800f33c <VL53L1_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800f32a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3718      	adds	r7, #24
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	000ff800 	.word	0x000ff800

0800f33c <VL53L1_dynamic_xtalk_correction_output_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_output_init(
	VL53L1_LLDriverResults_t *pres
	)
{
 800f33c:	b480      	push	{r7}
 800f33e:	b085      	sub	sp, #20
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f344:	2300      	movs	r3, #0
 800f346:	73fb      	strb	r3, [r7, #15]
	VL53L1_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800f34e:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	2200      	movs	r2, #0
 800f354:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	2200      	movs	r2, #0
 800f35a:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	2200      	movs	r2, #0
 800f360:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	2200      	movs	r2, #0
 800f366:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	2200      	movs	r2, #0
 800f36c:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	2200      	movs	r2, #0
 800f372:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	2200      	movs	r2, #0
 800f378:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	2200      	movs	r2, #0
 800f37e:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	2200      	movs	r2, #0
 800f384:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	2200      	movs	r2, #0
 800f38a:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800f38c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f390:	4618      	mov	r0, r3
 800f392:	3714      	adds	r7, #20
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr

0800f39c <VL53L1_xtalk_cal_data_init>:


VL53L1_Error VL53L1_xtalk_cal_data_init(
	VL53L1_DEV                          Dev
	)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	3318      	adds	r3, #24
 800f3ac:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800f3da:	3308      	adds	r3, #8
 800f3dc:	2218      	movs	r2, #24
 800f3de:	2100      	movs	r1, #0
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f00b fc33 	bl	801ac4c <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800f3e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3710      	adds	r7, #16
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}

0800f3f2 <VL53L1_low_power_auto_data_init>:


VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800f3f2:	b480      	push	{r7}
 800f3f4:	b085      	sub	sp, #20
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	3318      	adds	r3, #24
 800f402:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f40a:	2203      	movs	r2, #3
 800f40c:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f416:	2200      	movs	r2, #0
 800f418:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f422:	2200      	movs	r2, #0
 800f424:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f42e:	2200      	movs	r2, #0
 800f430:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f43a:	2200      	movs	r2, #0
 800f43c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f446:	2200      	movs	r2, #0
 800f448:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f452:	2200      	movs	r2, #0
 800f454:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f45e:	461a      	mov	r2, r3
 800f460:	2300      	movs	r3, #0
 800f462:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f46c:	2200      	movs	r2, #0
 800f46e:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

	LOG_FUNCTION_END(status);

	return status;
 800f472:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f476:	4618      	mov	r0, r3
 800f478:	3714      	adds	r7, #20
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr

0800f482 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800f482:	b480      	push	{r7}
 800f484:	b085      	sub	sp, #20
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f48a:	2300      	movs	r3, #0
 800f48c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	3318      	adds	r3, #24
 800f492:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f49a:	22ff      	movs	r2, #255	; 0xff
 800f49c:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4cc:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d007      	beq.n	800f4e4 <VL53L1_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4da:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
		pdev->stat_nvm.vhv_config__init =
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4ea:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d007      	beq.n	800f502 <VL53L1_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4f8:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	2200      	movs	r2, #0
 800f506:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b

	LOG_FUNCTION_END(status);

	return status;
 800f50a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3714      	adds	r7, #20
 800f512:	46bd      	mov	sp, r7
 800f514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f518:	4770      	bx	lr

0800f51a <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800f51a:	b480      	push	{r7}
 800f51c:	b087      	sub	sp, #28
 800f51e:	af00      	add	r7, sp, #0
 800f520:	60f8      	str	r0, [r7, #12]
 800f522:	60b9      	str	r1, [r7, #8]
 800f524:	607a      	str	r2, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f526:	2300      	movs	r3, #0
 800f528:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2201      	movs	r2, #1
 800f52e:	705a      	strb	r2, [r3, #1]


	plpadata->low_power_auto_range_count = 0;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2200      	movs	r2, #0
 800f534:	709a      	strb	r2, [r3, #2]


	pdynamic->system__sequence_config =
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	229b      	movs	r2, #155	; 0x9b
 800f53a:	745a      	strb	r2, [r3, #17]

			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800f53c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f540:	4618      	mov	r0, r3
 800f542:	371c      	adds	r7, #28
 800f544:	46bd      	mov	sp, r7
 800f546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54a:	4770      	bx	lr

0800f54c <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800f54c:	b480      	push	{r7}
 800f54e:	b085      	sub	sp, #20
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	3318      	adds	r3, #24
 800f558:	60fb      	str	r3, [r7, #12]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f55a:	2300      	movs	r3, #0
 800f55c:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.saved_vhv_init =
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f56a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
	pdev->low_power_auto_data.saved_vhv_timeout =
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f57a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 800f584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f588:	b2da      	uxtb	r2, r3
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800f596:	f003 0303 	and.w	r3, r3, #3
 800f59a:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5a2:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800f5a6:	009b      	lsls	r3, r3, #2
 800f5a8:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800f5aa:	4413      	add	r3, r2
 800f5ac:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5c2:	f893 23a2 	ldrb.w	r2, [r3, #930]	; 0x3a2
	pdev->low_power_auto_data.first_run_phasecal_result =
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5cc:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5d6:	f893 243e 	ldrb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365

	LOG_FUNCTION_END(status);

	return status;
 800f5e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3714      	adds	r7, #20
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ee:	4770      	bx	lr

0800f5f0 <VL53L1_compute_histo_merge_nb>:



VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b087      	sub	sp, #28
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	3318      	adds	r3, #24
 800f5fe:	613b      	str	r3, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f600:	2300      	movs	r3, #0
 800f602:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800f604:	2300      	movs	r3, #0
 800f606:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f60e:	2b07      	cmp	r3, #7
 800f610:	bf0c      	ite	eq
 800f612:	2301      	moveq	r3, #1
 800f614:	2300      	movne	r3, #0
 800f616:	b2db      	uxtb	r3, r3
 800f618:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800f61a:	2300      	movs	r3, #0
 800f61c:	75fb      	strb	r3, [r7, #23]
 800f61e:	e019      	b.n	800f654 <VL53L1_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800f620:	7df9      	ldrb	r1, [r7, #23]
 800f622:	7bbb      	ldrb	r3, [r7, #14]
 800f624:	6938      	ldr	r0, [r7, #16]
 800f626:	461a      	mov	r2, r3
 800f628:	0052      	lsls	r2, r2, #1
 800f62a:	441a      	add	r2, r3
 800f62c:	0153      	lsls	r3, r2, #5
 800f62e:	461a      	mov	r2, r3
 800f630:	460b      	mov	r3, r1
 800f632:	005b      	lsls	r3, r3, #1
 800f634:	440b      	add	r3, r1
 800f636:	019b      	lsls	r3, r3, #6
 800f638:	4413      	add	r3, r2
 800f63a:	4403      	add	r3, r0
 800f63c:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 800f640:	3314      	adds	r3, #20
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	2b00      	cmp	r3, #0
 800f646:	dd02      	ble.n	800f64e <VL53L1_compute_histo_merge_nb+0x5e>
			sum++;
 800f648:	7dbb      	ldrb	r3, [r7, #22]
 800f64a:	3301      	adds	r3, #1
 800f64c:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800f64e:	7dfb      	ldrb	r3, [r7, #23]
 800f650:	3301      	adds	r3, #1
 800f652:	75fb      	strb	r3, [r7, #23]
 800f654:	7dfb      	ldrb	r3, [r7, #23]
 800f656:	2b05      	cmp	r3, #5
 800f658:	d9e2      	bls.n	800f620 <VL53L1_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	7dba      	ldrb	r2, [r7, #22]
 800f65e:	701a      	strb	r2, [r3, #0]

	return status;
 800f660:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f664:	4618      	mov	r0, r3
 800f666:	371c      	adds	r7, #28
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr

0800f670 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800f670:	b480      	push	{r7}
 800f672:	b085      	sub	sp, #20
 800f674:	af00      	add	r7, sp, #0
 800f676:	4603      	mov	r3, r0
 800f678:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800f67a:	2300      	movs	r3, #0
 800f67c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800f67e:	88fb      	ldrh	r3, [r7, #6]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d005      	beq.n	800f690 <VL53L1_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800f684:	88fb      	ldrh	r3, [r7, #6]
 800f686:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f68a:	fb92 f3f3 	sdiv	r3, r2, r3
 800f68e:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800f690:	68fb      	ldr	r3, [r7, #12]
}
 800f692:	4618      	mov	r0, r3
 800f694:	3714      	adds	r7, #20
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr

0800f69e <VL53L1_duration_maths>:
uint32_t  VL53L1_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800f69e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f6a2:	b089      	sub	sp, #36	; 0x24
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	60f8      	str	r0, [r7, #12]
 800f6a8:	60b9      	str	r1, [r7, #8]
 800f6aa:	607a      	str	r2, [r7, #4]
 800f6ac:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800f6ae:	f04f 0200 	mov.w	r2, #0
 800f6b2:	f04f 0300 	mov.w	r3, #0
 800f6b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	68fa      	ldr	r2, [r7, #12]
 800f6c2:	fb02 f303 	mul.w	r3, r2, r3
 800f6c6:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	0b1b      	lsrs	r3, r3, #12
 800f6cc:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	469a      	mov	sl, r3
 800f6d4:	4693      	mov	fp, r2
 800f6d6:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	68ba      	ldr	r2, [r7, #8]
 800f6de:	fb02 f303 	mul.w	r3, r2, r3
 800f6e2:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	091b      	lsrs	r3, r3, #4
 800f6e8:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	4698      	mov	r8, r3
 800f6f0:	4691      	mov	r9, r2
 800f6f2:	69fb      	ldr	r3, [r7, #28]
 800f6f4:	fb08 f203 	mul.w	r2, r8, r3
 800f6f8:	69bb      	ldr	r3, [r7, #24]
 800f6fa:	fb09 f303 	mul.w	r3, r9, r3
 800f6fe:	4413      	add	r3, r2
 800f700:	69ba      	ldr	r2, [r7, #24]
 800f702:	fba2 4508 	umull	r4, r5, r2, r8
 800f706:	442b      	add	r3, r5
 800f708:	461d      	mov	r5, r3
 800f70a:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800f70e:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800f712:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f716:	f04f 0200 	mov.w	r2, #0
 800f71a:	f04f 0300 	mov.w	r3, #0
 800f71e:	0b02      	lsrs	r2, r0, #12
 800f720:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800f724:	0b0b      	lsrs	r3, r1, #12
 800f726:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800f72a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f72e:	2b01      	cmp	r3, #1
 800f730:	d305      	bcc.n	800f73e <VL53L1_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800f732:	f04f 32ff 	mov.w	r2, #4294967295
 800f736:	f04f 0300 	mov.w	r3, #0
 800f73a:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800f73e:	69bb      	ldr	r3, [r7, #24]
 800f740:	617b      	str	r3, [r7, #20]

	return duration_us;
 800f742:	697b      	ldr	r3, [r7, #20]
}
 800f744:	4618      	mov	r0, r3
 800f746:	3724      	adds	r7, #36	; 0x24
 800f748:	46bd      	mov	sp, r7
 800f74a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f74e:	4770      	bx	lr

0800f750 <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800f750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f754:	b096      	sub	sp, #88	; 0x58
 800f756:	af00      	add	r7, sp, #0
 800f758:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f75a:	460b      	mov	r3, r1
 800f75c:	627a      	str	r2, [r7, #36]	; 0x24
 800f75e:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 800f760:	f04f 0200 	mov.w	r2, #0
 800f764:	f04f 0300 	mov.w	r3, #0
 800f768:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 800f76c:	f04f 0200 	mov.w	r2, #0
 800f770:	f04f 0300 	mov.w	r3, #0
 800f774:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 800f778:	2300      	movs	r3, #0
 800f77a:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53L1_p_013
 800f77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77e:	17da      	asrs	r2, r3, #31
 800f780:	469a      	mov	sl, r3
 800f782:	4693      	mov	fp, r2
 800f784:	4652      	mov	r2, sl
 800f786:	465b      	mov	r3, fp
 800f788:	f04f 0000 	mov.w	r0, #0
 800f78c:	f04f 0100 	mov.w	r1, #0
 800f790:	0159      	lsls	r1, r3, #5
 800f792:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f796:	0150      	lsls	r0, r2, #5
 800f798:	4602      	mov	r2, r0
 800f79a:	460b      	mov	r3, r1
 800f79c:	ebb2 040a 	subs.w	r4, r2, sl
 800f7a0:	eb63 050b 	sbc.w	r5, r3, fp
 800f7a4:	f04f 0200 	mov.w	r2, #0
 800f7a8:	f04f 0300 	mov.w	r3, #0
 800f7ac:	00ab      	lsls	r3, r5, #2
 800f7ae:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800f7b2:	00a2      	lsls	r2, r4, #2
 800f7b4:	4614      	mov	r4, r2
 800f7b6:	461d      	mov	r5, r3
 800f7b8:	eb14 080a 	adds.w	r8, r4, sl
 800f7bc:	eb45 090b 	adc.w	r9, r5, fp
 800f7c0:	f04f 0200 	mov.w	r2, #0
 800f7c4:	f04f 0300 	mov.w	r3, #0
 800f7c8:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800f7cc:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800f7d0:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800f7d4:	4690      	mov	r8, r2
 800f7d6:	4699      	mov	r9, r3
 800f7d8:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800f7dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d00d      	beq.n	800f7fe <VL53L1_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800f7e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	61bb      	str	r3, [r7, #24]
 800f7e8:	61fa      	str	r2, [r7, #28]
 800f7ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f7ee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f7f2:	f7f1 fa01 	bl	8000bf8 <__aeabi_uldivmod>
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	460b      	mov	r3, r1
 800f7fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800f7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f800:	2b00      	cmp	r3, #0
 800f802:	d02a      	beq.n	800f85a <VL53L1_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800f804:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f808:	f04f 0200 	mov.w	r2, #0
 800f80c:	f04f 0300 	mov.w	r3, #0
 800f810:	02cb      	lsls	r3, r1, #11
 800f812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800f816:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800f818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f81a:	0849      	lsrs	r1, r1, #1
 800f81c:	2000      	movs	r0, #0
 800f81e:	6139      	str	r1, [r7, #16]
 800f820:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800f822:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800f826:	4621      	mov	r1, r4
 800f828:	1851      	adds	r1, r2, r1
 800f82a:	6039      	str	r1, [r7, #0]
 800f82c:	4629      	mov	r1, r5
 800f82e:	eb43 0101 	adc.w	r1, r3, r1
 800f832:	6079      	str	r1, [r7, #4]
 800f834:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f838:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800f83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f83e:	2200      	movs	r2, #0
 800f840:	60bb      	str	r3, [r7, #8]
 800f842:	60fa      	str	r2, [r7, #12]
 800f844:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f848:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f84c:	f7f1 f9d4 	bl	8000bf8 <__aeabi_uldivmod>
 800f850:	4602      	mov	r2, r0
 800f852:	460b      	mov	r3, r1
 800f854:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800f858:	e00b      	b.n	800f872 <VL53L1_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800f85a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f85e:	f04f 0200 	mov.w	r2, #0
 800f862:	f04f 0300 	mov.w	r3, #0
 800f866:	02cb      	lsls	r3, r1, #11
 800f868:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800f86c:	02c2      	lsls	r2, r0, #11
 800f86e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800f872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f874:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 800f876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3758      	adds	r7, #88	; 0x58
 800f87c:	46bd      	mov	sp, r7
 800f87e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f882 <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 800f882:	b480      	push	{r7}
 800f884:	b085      	sub	sp, #20
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800f88a:	2300      	movs	r3, #0
 800f88c:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800f88e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f892:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800f894:	e002      	b.n	800f89c <VL53L1_isqrt+0x1a>
		bit >>= 2;
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	089b      	lsrs	r3, r3, #2
 800f89a:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800f89c:	68ba      	ldr	r2, [r7, #8]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d8f8      	bhi.n	800f896 <VL53L1_isqrt+0x14>

	while (bit != 0) {
 800f8a4:	e017      	b.n	800f8d6 <VL53L1_isqrt+0x54>
		if (num >= res + bit)  {
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	4413      	add	r3, r2
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d30b      	bcc.n	800f8ca <VL53L1_isqrt+0x48>
			num -= res + bit;
 800f8b2:	68fa      	ldr	r2, [r7, #12]
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	4413      	add	r3, r2
 800f8b8:	687a      	ldr	r2, [r7, #4]
 800f8ba:	1ad3      	subs	r3, r2, r3
 800f8bc:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	085b      	lsrs	r3, r3, #1
 800f8c2:	68ba      	ldr	r2, [r7, #8]
 800f8c4:	4413      	add	r3, r2
 800f8c6:	60fb      	str	r3, [r7, #12]
 800f8c8:	e002      	b.n	800f8d0 <VL53L1_isqrt+0x4e>
		} else {
			res >>= 1;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	085b      	lsrs	r3, r3, #1
 800f8ce:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	089b      	lsrs	r3, r3, #2
 800f8d4:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d1e4      	bne.n	800f8a6 <VL53L1_isqrt+0x24>
	}

	return res;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3714      	adds	r7, #20
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr

0800f8ea <VL53L1_hist_calc_zero_distance_phase>:


void  VL53L1_hist_calc_zero_distance_phase(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800f8ea:	b580      	push	{r7, lr}
 800f8ec:	b084      	sub	sp, #16
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53L1_p_017         = 0;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f900:	4618      	mov	r0, r3
 800f902:	f000 faa5 	bl	800fe50 <VL53L1_decode_vcsel_period>
 800f906:	4603      	mov	r3, r0
	period = 2048 *
 800f908:	02db      	lsls	r3, r3, #11
 800f90a:	60bb      	str	r3, [r7, #8]

	VL53L1_p_017  = period;
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800f916:	461a      	mov	r2, r3
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	4413      	add	r3, r2
 800f91c:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f924:	02db      	lsls	r3, r3, #11
 800f926:	68fa      	ldr	r2, [r7, #12]
 800f928:	4413      	add	r3, r2
 800f92a:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f932:	02db      	lsls	r3, r3, #11
 800f934:	68fa      	ldr	r2, [r7, #12]
 800f936:	1ad3      	subs	r3, r2, r3
 800f938:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d009      	beq.n	800f954 <VL53L1_hist_calc_zero_distance_phase+0x6a>
		VL53L1_p_017  = VL53L1_p_017 % period;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	68ba      	ldr	r2, [r7, #8]
 800f944:	fbb3 f2f2 	udiv	r2, r3, r2
 800f948:	68b9      	ldr	r1, [r7, #8]
 800f94a:	fb01 f202 	mul.w	r2, r1, r2
 800f94e:	1a9b      	subs	r3, r3, r2
 800f950:	60fb      	str	r3, [r7, #12]
 800f952:	e001      	b.n	800f958 <VL53L1_hist_calc_zero_distance_phase+0x6e>
	else
		VL53L1_p_017 = 0;
 800f954:	2300      	movs	r3, #0
 800f956:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	b29a      	uxth	r2, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800f962:	bf00      	nop
 800f964:	3710      	adds	r7, #16
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}

0800f96a <VL53L1_hist_estimate_ambient_from_thresholded_bins>:


void  VL53L1_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800f96a:	b580      	push	{r7, lr}
 800f96c:	b084      	sub	sp, #16
 800f96e:	af00      	add	r7, sp, #0
 800f970:	6078      	str	r0, [r7, #4]
 800f972:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800f974:	2300      	movs	r3, #0
 800f976:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53L1_p_032 = 0;
 800f978:	2300      	movs	r3, #0
 800f97a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53L1_hist_find_min_max_bin_values(pdata);
 800f97c:	6838      	ldr	r0, [r7, #0]
 800f97e:	f000 fb90 	bl	80100a2 <VL53L1_hist_find_min_max_bin_values>



	VL53L1_p_032  =
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f988:	4618      	mov	r0, r3
 800f98a:	f7ff ff7a 	bl	800f882 <VL53L1_isqrt>
 800f98e:	4603      	mov	r3, r0
	VL53L1_p_032  =
 800f990:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 *= ambient_threshold_sigma;
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	fb02 f303 	mul.w	r3, r2, r3
 800f99a:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += 0x07;
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	3307      	adds	r3, #7
 800f9a0:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032  = VL53L1_p_032 >> 4;
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	111b      	asrs	r3, r3, #4
 800f9a6:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += pdata->min_bin_value;
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f9ae:	68ba      	ldr	r2, [r7, #8]
 800f9b0:	4413      	add	r3, r2
 800f9b2:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	73fb      	strb	r3, [r7, #15]
 800f9c8:	e01e      	b.n	800fa08 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 800f9ca:	7bfa      	ldrb	r2, [r7, #15]
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	3206      	adds	r2, #6
 800f9d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9d4:	68ba      	ldr	r2, [r7, #8]
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	dd13      	ble.n	800fa02 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f9e0:	7bf9      	ldrb	r1, [r7, #15]
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	3106      	adds	r1, #6
 800f9e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f9ea:	441a      	add	r2, r3
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	b2da      	uxtb	r2, r3
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800fa02:	7bfb      	ldrb	r3, [r7, #15]
 800fa04:	3301      	adds	r3, #1
 800fa06:	73fb      	strb	r3, [r7, #15]
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	7a9b      	ldrb	r3, [r3, #10]
 800fa0c:	7bfa      	ldrb	r2, [r7, #15]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d3db      	bcc.n	800f9ca <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d01c      	beq.n	800fa56 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53L1_p_004 =
			pdata->ambient_events_sum;
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53L1_p_004 =
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800fa2e:	683a      	ldr	r2, [r7, #0]
 800fa30:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800fa34:	0852      	lsrs	r2, r2, #1
 800fa36:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800fa38:	441a      	add	r2, r3
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800fa46:	683a      	ldr	r2, [r7, #0]
 800fa48:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53L1_p_004 /=
 800fa4c:	fb93 f2f2 	sdiv	r2, r3, r2
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800fa56:	bf00      	nop
 800fa58:	3710      	adds	r7, #16
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}

0800fa5e <VL53L1_hist_remove_ambient_bins>:


void  VL53L1_hist_remove_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800fa5e:	b480      	push	{r7}
 800fa60:	b085      	sub	sp, #20
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800fa66:	2300      	movs	r3, #0
 800fa68:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	7b1b      	ldrb	r3, [r3, #12]
 800fa76:	f003 0307 	and.w	r3, r3, #7
 800fa7a:	2b07      	cmp	r3, #7
 800fa7c:	d13a      	bne.n	800faf4 <VL53L1_hist_remove_ambient_bins+0x96>

		i = 0;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800fa82:	2300      	movs	r3, #0
 800fa84:	73bb      	strb	r3, [r7, #14]
 800fa86:	e01f      	b.n	800fac8 <VL53L1_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800fa88:	7bbb      	ldrb	r3, [r7, #14]
 800fa8a:	687a      	ldr	r2, [r7, #4]
 800fa8c:	4413      	add	r3, r2
 800fa8e:	7b1b      	ldrb	r3, [r3, #12]
 800fa90:	f003 0307 	and.w	r3, r3, #7
 800fa94:	2b07      	cmp	r3, #7
 800fa96:	d014      	beq.n	800fac2 <VL53L1_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800fa98:	7bba      	ldrb	r2, [r7, #14]
 800fa9a:	7b7b      	ldrb	r3, [r7, #13]
 800fa9c:	6879      	ldr	r1, [r7, #4]
 800fa9e:	440a      	add	r2, r1
 800faa0:	7b11      	ldrb	r1, [r2, #12]
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	4413      	add	r3, r2
 800faa6:	460a      	mov	r2, r1
 800faa8:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800faaa:	7bba      	ldrb	r2, [r7, #14]
 800faac:	7b7b      	ldrb	r3, [r7, #13]
 800faae:	6879      	ldr	r1, [r7, #4]
 800fab0:	440a      	add	r2, r1
 800fab2:	7c91      	ldrb	r1, [r2, #18]
 800fab4:	687a      	ldr	r2, [r7, #4]
 800fab6:	4413      	add	r3, r2
 800fab8:	460a      	mov	r2, r1
 800faba:	749a      	strb	r2, [r3, #18]
				i++;
 800fabc:	7b7b      	ldrb	r3, [r7, #13]
 800fabe:	3301      	adds	r3, #1
 800fac0:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800fac2:	7bbb      	ldrb	r3, [r7, #14]
 800fac4:	3301      	adds	r3, #1
 800fac6:	73bb      	strb	r3, [r7, #14]
 800fac8:	7bbb      	ldrb	r3, [r7, #14]
 800faca:	2b05      	cmp	r3, #5
 800facc:	d9dc      	bls.n	800fa88 <VL53L1_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800face:	7b7b      	ldrb	r3, [r7, #13]
 800fad0:	73bb      	strb	r3, [r7, #14]
 800fad2:	e00c      	b.n	800faee <VL53L1_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 800fad4:	7bbb      	ldrb	r3, [r7, #14]
 800fad6:	687a      	ldr	r2, [r7, #4]
 800fad8:	4413      	add	r3, r2
 800fada:	2210      	movs	r2, #16
 800fadc:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800fade:	7bbb      	ldrb	r3, [r7, #14]
 800fae0:	687a      	ldr	r2, [r7, #4]
 800fae2:	4413      	add	r3, r2
 800fae4:	2200      	movs	r2, #0
 800fae6:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800fae8:	7bbb      	ldrb	r3, [r7, #14]
 800faea:	3301      	adds	r3, #1
 800faec:	73bb      	strb	r3, [r7, #14]
 800faee:	7bbb      	ldrb	r3, [r7, #14]
 800faf0:	2b05      	cmp	r3, #5
 800faf2:	d9ef      	bls.n	800fad4 <VL53L1_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	7adb      	ldrb	r3, [r3, #11]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d023      	beq.n	800fb44 <VL53L1_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	7adb      	ldrb	r3, [r3, #11]
 800fb00:	73fb      	strb	r3, [r7, #15]
 800fb02:	e00f      	b.n	800fb24 <VL53L1_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53L1_p_023; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800fb04:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800fb06:	7bfb      	ldrb	r3, [r7, #15]
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	7ad2      	ldrb	r2, [r2, #11]
 800fb0c:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	3106      	adds	r1, #6
 800fb12:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	3206      	adds	r2, #6
 800fb1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53L1_p_023; bin++) {
 800fb1e:	7bfb      	ldrb	r3, [r7, #15]
 800fb20:	3301      	adds	r3, #1
 800fb22:	73fb      	strb	r3, [r7, #15]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800fb28:	7bfa      	ldrb	r2, [r7, #15]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d3ea      	bcc.n	800fb04 <VL53L1_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53L1_p_024 =
				pdata->VL53L1_p_024 -
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53L1_p_024 -
 800fb36:	1ad3      	subs	r3, r2, r3
 800fb38:	b2da      	uxtb	r2, r3
		pdata->VL53L1_p_024 =
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2200      	movs	r2, #0
 800fb42:	72da      	strb	r2, [r3, #11]
	}
}
 800fb44:	bf00      	nop
 800fb46:	3714      	adds	r7, #20
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr

0800fb50 <VL53L1_calc_pll_period_mm>:


uint32_t VL53L1_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	4603      	mov	r3, r0
 800fb58:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800fb62:	88fb      	ldrh	r3, [r7, #6]
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7ff fd83 	bl	800f670 <VL53L1_calc_pll_period_us>
 800fb6a:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800fb70:	f249 2257 	movw	r2, #37463	; 0x9257
 800fb74:	fb02 f303 	mul.w	r3, r2, r3
 800fb78:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800fb80:	0c1b      	lsrs	r3, r3, #16
 800fb82:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800fb84:	68bb      	ldr	r3, [r7, #8]
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3710      	adds	r7, #16
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}

0800fb8e <VL53L1_rate_maths>:


uint16_t VL53L1_rate_maths(
	int32_t   VL53L1_p_008,
	uint32_t  time_us)
{
 800fb8e:	b480      	push	{r7}
 800fb90:	b087      	sub	sp, #28
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	6078      	str	r0, [r7, #4]
 800fb96:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800fb9c:	2307      	movs	r3, #7
 800fb9e:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800fba0:	2300      	movs	r3, #0
 800fba2:	81fb      	strh	r3, [r7, #14]



	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fbaa:	db03      	blt.n	800fbb4 <VL53L1_rate_maths+0x26>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 800fbac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800fbb0:	617b      	str	r3, [r7, #20]
 800fbb2:	e004      	b.n	800fbbe <VL53L1_rate_maths+0x30>
	else if (VL53L1_p_008 > 0)
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	dd01      	ble.n	800fbbe <VL53L1_rate_maths+0x30>
		tmp_int = (uint32_t)VL53L1_p_008;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	617b      	str	r3, [r7, #20]




	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fbc4:	dd02      	ble.n	800fbcc <VL53L1_rate_maths+0x3e>
		frac_bits = 3;
 800fbc6:	2303      	movs	r3, #3
 800fbc8:	613b      	str	r3, [r7, #16]
 800fbca:	e001      	b.n	800fbd0 <VL53L1_rate_maths+0x42>
	else
		frac_bits = 7;
 800fbcc:	2307      	movs	r3, #7
 800fbce:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d009      	beq.n	800fbea <VL53L1_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800fbd6:	697a      	ldr	r2, [r7, #20]
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	409a      	lsls	r2, r3
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	085b      	lsrs	r3, r3, #1
 800fbe0:	441a      	add	r2, r3
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbe8:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fbf0:	dd02      	ble.n	800fbf8 <VL53L1_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	011b      	lsls	r3, r3, #4
 800fbf6:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbfe:	d302      	bcc.n	800fc06 <VL53L1_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800fc00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc04:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800fc0a:	89fb      	ldrh	r3, [r7, #14]
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	371c      	adds	r7, #28
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <VL53L1_rate_per_spad_maths>:
uint16_t VL53L1_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b087      	sub	sp, #28
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	60b9      	str	r1, [r7, #8]
 800fc22:	603b      	str	r3, [r7, #0]
 800fc24:	4613      	mov	r3, r2
 800fc26:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800fc30:	88fb      	ldrh	r3, [r7, #6]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d010      	beq.n	800fc58 <VL53L1_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	021a      	lsls	r2, r3, #8
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	fa02 f303 	lsl.w	r3, r2, r3
 800fc40:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800fc42:	88fb      	ldrh	r3, [r7, #6]
 800fc44:	085b      	lsrs	r3, r3, #1
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800fc4e:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800fc50:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc54:	617b      	str	r3, [r7, #20]
 800fc56:	e004      	b.n	800fc62 <VL53L1_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800fc58:	68ba      	ldr	r2, [r7, #8]
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	fa02 f303 	lsl.w	r3, r2, r3
 800fc60:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800fc62:	697a      	ldr	r2, [r7, #20]
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d901      	bls.n	800fc6e <VL53L1_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800fc72:	8a7b      	ldrh	r3, [r7, #18]
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	371c      	adds	r7, #28
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7e:	4770      	bx	lr

0800fc80 <VL53L1_range_maths>:
	uint16_t  VL53L1_p_017,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800fc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc84:	b093      	sub	sp, #76	; 0x4c
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	461e      	mov	r6, r3
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fc8e:	460b      	mov	r3, r1
 800fc90:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fc92:	4613      	mov	r3, r2
 800fc94:	857b      	strh	r3, [r7, #42]	; 0x2a
 800fc96:	4633      	mov	r3, r6
 800fc98:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 800fca0:	f04f 0200 	mov.w	r2, #0
 800fca4:	f04f 0300 	mov.w	r3, #0
 800fca8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 800fcac:	2300      	movs	r3, #0
 800fcae:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800fcb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7ff fcda 	bl	800f670 <VL53L1_calc_pll_period_us>
 800fcbc:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 800fcbe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	623b      	str	r3, [r7, #32]
 800fcc4:	627a      	str	r2, [r7, #36]	; 0x24
 800fcc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fcc8:	2200      	movs	r2, #0
 800fcca:	61bb      	str	r3, [r7, #24]
 800fccc:	61fa      	str	r2, [r7, #28]
 800fcce:	6a3b      	ldr	r3, [r7, #32]
 800fcd0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800fcd4:	4602      	mov	r2, r0
 800fcd6:	1a9b      	subs	r3, r3, r2
 800fcd8:	613b      	str	r3, [r7, #16]
 800fcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcdc:	460a      	mov	r2, r1
 800fcde:	eb63 0302 	sbc.w	r3, r3, r2
 800fce2:	617b      	str	r3, [r7, #20]
 800fce4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fce8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800fcec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcee:	2200      	movs	r2, #0
 800fcf0:	469a      	mov	sl, r3
 800fcf2:	4693      	mov	fp, r2
 800fcf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcf6:	fb0a f203 	mul.w	r2, sl, r3
 800fcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfc:	fb0b f303 	mul.w	r3, fp, r3
 800fd00:	4413      	add	r3, r2
 800fd02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd04:	fba2 890a 	umull	r8, r9, r2, sl
 800fd08:	444b      	add	r3, r9
 800fd0a:	4699      	mov	r9, r3
 800fd0c:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800fd10:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800fd14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	da08      	bge.n	800fd2e <VL53L1_range_maths+0xae>
 800fd1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800fd20:	1851      	adds	r1, r2, r1
 800fd22:	60b9      	str	r1, [r7, #8]
 800fd24:	f143 0300 	adc.w	r3, r3, #0
 800fd28:	60fb      	str	r3, [r7, #12]
 800fd2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fd2e:	f04f 0000 	mov.w	r0, #0
 800fd32:	f04f 0100 	mov.w	r1, #0
 800fd36:	0a50      	lsrs	r0, r2, #9
 800fd38:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800fd3c:	1259      	asrs	r1, r3, #9
 800fd3e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800fd42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd44:	f249 2257 	movw	r2, #37463	; 0x9257
 800fd48:	fb03 f202 	mul.w	r2, r3, r2
 800fd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4e:	2100      	movs	r1, #0
 800fd50:	fb01 f303 	mul.w	r3, r1, r3
 800fd54:	4413      	add	r3, r2
 800fd56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd58:	f249 2157 	movw	r1, #37463	; 0x9257
 800fd5c:	fba2 4501 	umull	r4, r5, r2, r1
 800fd60:	442b      	add	r3, r5
 800fd62:	461d      	mov	r5, r3
 800fd64:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800fd68:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800fd6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	da07      	bge.n	800fd84 <VL53L1_range_maths+0x104>
 800fd74:	4934      	ldr	r1, [pc, #208]	; (800fe48 <VL53L1_range_maths+0x1c8>)
 800fd76:	1851      	adds	r1, r2, r1
 800fd78:	6039      	str	r1, [r7, #0]
 800fd7a:	f143 0300 	adc.w	r3, r3, #0
 800fd7e:	607b      	str	r3, [r7, #4]
 800fd80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd84:	f04f 0000 	mov.w	r0, #0
 800fd88:	f04f 0100 	mov.w	r1, #0
 800fd8c:	0d90      	lsrs	r0, r2, #22
 800fd8e:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800fd92:	1599      	asrs	r1, r3, #22
 800fd94:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800fd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fd9c:	4413      	add	r3, r2
 800fd9e:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 800fda0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fda2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fda4:	fb02 f303 	mul.w	r3, r2, r3
 800fda8:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 800fdaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fdb0:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 800fdb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	da01      	bge.n	800fdbc <VL53L1_range_maths+0x13c>
 800fdb8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800fdbc:	12db      	asrs	r3, r3, #11
 800fdbe:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 800fdc0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d130      	bne.n	800fe2a <VL53L1_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800fdc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdca:	4613      	mov	r3, r2
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	4413      	add	r3, r2
 800fdd0:	005b      	lsls	r3, r3, #1
 800fdd2:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800fdd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	da00      	bge.n	800fddc <VL53L1_range_maths+0x15c>
 800fdda:	3303      	adds	r3, #3
 800fddc:	109b      	asrs	r3, r3, #2
 800fdde:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 800fde0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fde2:	4b1a      	ldr	r3, [pc, #104]	; (800fe4c <VL53L1_range_maths+0x1cc>)
 800fde4:	fb83 2301 	smull	r2, r3, r3, r1
 800fde8:	109a      	asrs	r2, r3, #2
 800fdea:	17cb      	asrs	r3, r1, #31
 800fdec:	1ad2      	subs	r2, r2, r3
 800fdee:	4613      	mov	r3, r2
 800fdf0:	009b      	lsls	r3, r3, #2
 800fdf2:	4413      	add	r3, r2
 800fdf4:	005b      	lsls	r3, r3, #1
 800fdf6:	1aca      	subs	r2, r1, r3
 800fdf8:	2a04      	cmp	r2, #4
 800fdfa:	dc09      	bgt.n	800fe10 <VL53L1_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800fdfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdfe:	4a13      	ldr	r2, [pc, #76]	; (800fe4c <VL53L1_range_maths+0x1cc>)
 800fe00:	fb82 1203 	smull	r1, r2, r2, r3
 800fe04:	1092      	asrs	r2, r2, #2
 800fe06:	17db      	asrs	r3, r3, #31
 800fe08:	1ad3      	subs	r3, r2, r3
 800fe0a:	b21b      	sxth	r3, r3
 800fe0c:	647b      	str	r3, [r7, #68]	; 0x44
 800fe0e:	e015      	b.n	800fe3c <VL53L1_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800fe10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe12:	4a0e      	ldr	r2, [pc, #56]	; (800fe4c <VL53L1_range_maths+0x1cc>)
 800fe14:	fb82 1203 	smull	r1, r2, r2, r3
 800fe18:	1092      	asrs	r2, r2, #2
 800fe1a:	17db      	asrs	r3, r3, #31
 800fe1c:	1ad3      	subs	r3, r2, r3
 800fe1e:	b29b      	uxth	r3, r3
 800fe20:	3301      	adds	r3, #1
 800fe22:	b29b      	uxth	r3, r3
 800fe24:	b21b      	sxth	r3, r3
 800fe26:	647b      	str	r3, [r7, #68]	; 0x44
 800fe28:	e008      	b.n	800fe3c <VL53L1_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800fe2a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fe2e:	2b01      	cmp	r3, #1
 800fe30:	d104      	bne.n	800fe3c <VL53L1_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800fe32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe34:	0fda      	lsrs	r2, r3, #31
 800fe36:	4413      	add	r3, r2
 800fe38:	105b      	asrs	r3, r3, #1
 800fe3a:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 800fe3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	374c      	adds	r7, #76	; 0x4c
 800fe42:	46bd      	mov	sp, r7
 800fe44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe48:	003fffff 	.word	0x003fffff
 800fe4c:	66666667 	.word	0x66666667

0800fe50 <VL53L1_decode_vcsel_period>:


uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800fe50:	b480      	push	{r7}
 800fe52:	b085      	sub	sp, #20
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	4603      	mov	r3, r0
 800fe58:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53L1_p_031 = 0;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	73fb      	strb	r3, [r7, #15]

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 800fe5e:	79fb      	ldrb	r3, [r7, #7]
 800fe60:	3301      	adds	r3, #1
 800fe62:	b2db      	uxtb	r3, r3
 800fe64:	005b      	lsls	r3, r3, #1
 800fe66:	73fb      	strb	r3, [r7, #15]

	return VL53L1_p_031;
 800fe68:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3714      	adds	r7, #20
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr

0800fe76 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53L1_xtalk_histogram_shape_t *pxtalk,
		VL53L1_histogram_bin_data_t    *phist)
{
 800fe76:	b480      	push	{r7}
 800fe78:	b083      	sub	sp, #12
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
 800fe7e:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53L1_p_019 =
			pxtalk->VL53L1_p_019;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53L1_p_019 =
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53L1_p_022 =
			pxtalk->VL53L1_p_022;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53L1_p_022 =
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	781a      	ldrb	r2, [r3, #0]
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	709a      	strb	r2, [r3, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	7a5a      	ldrb	r2, [r3, #9]
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	685a      	ldr	r2, [r3, #4]
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	605a      	str	r2, [r3, #4]
}
 800fee6:	bf00      	nop
 800fee8:	370c      	adds	r7, #12
 800feea:	46bd      	mov	sp, r7
 800feec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef0:	4770      	bx	lr

0800fef2 <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 800fef2:	b480      	push	{r7}
 800fef4:	b087      	sub	sp, #28
 800fef6:	af00      	add	r7, sp, #0
 800fef8:	60f8      	str	r0, [r7, #12]
 800fefa:	460b      	mov	r3, r1
 800fefc:	607a      	str	r2, [r7, #4]
 800fefe:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800ff00:	2300      	movs	r3, #0
 800ff02:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2203      	movs	r2, #3
 800ff08:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2203      	movs	r2, #3
 800ff0e:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2200      	movs	r2, #0
 800ff14:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2218      	movs	r2, #24
 800ff26:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800ff28:	897b      	ldrh	r3, [r7, #10]
 800ff2a:	b2da      	uxtb	r2, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2200      	movs	r2, #0
 800ff34:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2200      	movs	r2, #0
 800ff52:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2200      	movs	r2, #0
 800ff62:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2200      	movs	r2, #0
 800ff72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53L1_p_009                       = 0;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2200      	movs	r2, #0
 800ff82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53L1_p_019                = 0;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2200      	movs	r2, #0
 800ff92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2200      	movs	r2, #0
 800ffba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53L1_p_004             = 0;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	82fb      	strh	r3, [r7, #22]
 800ffca:	e009      	b.n	800ffe0 <VL53L1_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800ffcc:	8afb      	ldrh	r3, [r7, #22]
 800ffce:	8afa      	ldrh	r2, [r7, #22]
 800ffd0:	b2d1      	uxtb	r1, r2
 800ffd2:	687a      	ldr	r2, [r7, #4]
 800ffd4:	4413      	add	r3, r2
 800ffd6:	460a      	mov	r2, r1
 800ffd8:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ffda:	8afb      	ldrh	r3, [r7, #22]
 800ffdc:	3301      	adds	r3, #1
 800ffde:	82fb      	strh	r3, [r7, #22]
 800ffe0:	8afb      	ldrh	r3, [r7, #22]
 800ffe2:	2b05      	cmp	r3, #5
 800ffe4:	d9f2      	bls.n	800ffcc <VL53L1_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	82fb      	strh	r3, [r7, #22]
 800ffea:	e007      	b.n	800fffc <VL53L1_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800ffec:	8afb      	ldrh	r3, [r7, #22]
 800ffee:	687a      	ldr	r2, [r7, #4]
 800fff0:	4413      	add	r3, r2
 800fff2:	2201      	movs	r2, #1
 800fff4:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800fff6:	8afb      	ldrh	r3, [r7, #22]
 800fff8:	3301      	adds	r3, #1
 800fffa:	82fb      	strh	r3, [r7, #22]
 800fffc:	8afb      	ldrh	r3, [r7, #22]
 800fffe:	2b05      	cmp	r3, #5
 8010000:	d9f4      	bls.n	800ffec <VL53L1_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 8010002:	2300      	movs	r3, #0
 8010004:	82fb      	strh	r3, [r7, #22]
 8010006:	e013      	b.n	8010030 <VL53L1_init_histogram_bin_data_struct+0x13e>
		if (i < VL53L1_p_024)
 8010008:	8afa      	ldrh	r2, [r7, #22]
 801000a:	897b      	ldrh	r3, [r7, #10]
 801000c:	429a      	cmp	r2, r3
 801000e:	d206      	bcs.n	801001e <VL53L1_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 8010010:	8afa      	ldrh	r2, [r7, #22]
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	3206      	adds	r2, #6
 8010016:	68f9      	ldr	r1, [r7, #12]
 8010018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801001c:	e005      	b.n	801002a <VL53L1_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 801001e:	8afa      	ldrh	r2, [r7, #22]
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	3206      	adds	r2, #6
 8010024:	2100      	movs	r1, #0
 8010026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 801002a:	8afb      	ldrh	r3, [r7, #22]
 801002c:	3301      	adds	r3, #1
 801002e:	82fb      	strh	r3, [r7, #22]
 8010030:	8afb      	ldrh	r3, [r7, #22]
 8010032:	2b17      	cmp	r3, #23
 8010034:	d9e8      	bls.n	8010008 <VL53L1_init_histogram_bin_data_struct+0x116>


}
 8010036:	bf00      	nop
 8010038:	bf00      	nop
 801003a:	371c      	adds	r7, #28
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr

08010044 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 8010044:	b480      	push	{r7}
 8010046:	b085      	sub	sp, #20
 8010048:	af00      	add	r7, sp, #0
 801004a:	4603      	mov	r3, r0
 801004c:	60b9      	str	r1, [r7, #8]
 801004e:	607a      	str	r2, [r7, #4]
 8010050:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 8010052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010056:	2b00      	cmp	r3, #0
 8010058:	da10      	bge.n	801007c <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 801005a:	7bfb      	ldrb	r3, [r7, #15]
 801005c:	43db      	mvns	r3, r3
 801005e:	b2db      	uxtb	r3, r3
 8010060:	f003 0307 	and.w	r3, r3, #7
 8010064:	b2db      	uxtb	r3, r3
 8010066:	3308      	adds	r3, #8
 8010068:	b2da      	uxtb	r2, r3
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 801006e:	7bfb      	ldrb	r3, [r7, #15]
 8010070:	3b80      	subs	r3, #128	; 0x80
 8010072:	10db      	asrs	r3, r3, #3
 8010074:	b2da      	uxtb	r2, r3
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 801007a:	e00c      	b.n	8010096 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 801007c:	7bfb      	ldrb	r3, [r7, #15]
 801007e:	f003 0307 	and.w	r3, r3, #7
 8010082:	b2da      	uxtb	r2, r3
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 8010088:	7bfb      	ldrb	r3, [r7, #15]
 801008a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801008e:	10db      	asrs	r3, r3, #3
 8010090:	b2da      	uxtb	r2, r3
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	701a      	strb	r2, [r3, #0]
}
 8010096:	bf00      	nop
 8010098:	3714      	adds	r7, #20
 801009a:	46bd      	mov	sp, r7
 801009c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a0:	4770      	bx	lr

080100a2 <VL53L1_hist_find_min_max_bin_values>:


void  VL53L1_hist_find_min_max_bin_values(
	VL53L1_histogram_bin_data_t   *pdata)
{
 80100a2:	b480      	push	{r7}
 80100a4:	b085      	sub	sp, #20
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 80100aa:	2300      	movs	r3, #0
 80100ac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 80100ae:	2300      	movs	r3, #0
 80100b0:	73fb      	strb	r3, [r7, #15]
 80100b2:	e02c      	b.n	801010e <VL53L1_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 80100b4:	7bfb      	ldrb	r3, [r7, #15]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d009      	beq.n	80100ce <VL53L1_hist_find_min_max_bin_values+0x2c>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80100c0:	7bf9      	ldrb	r1, [r7, #15]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	3106      	adds	r1, #6
 80100c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80100ca:	429a      	cmp	r2, r3
 80100cc:	db07      	blt.n	80100de <VL53L1_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 80100ce:	7bfa      	ldrb	r2, [r7, #15]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	3206      	adds	r2, #6
 80100d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 80100de:	7bfb      	ldrb	r3, [r7, #15]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d009      	beq.n	80100f8 <VL53L1_hist_find_min_max_bin_values+0x56>
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80100ea:	7bf9      	ldrb	r1, [r7, #15]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	3106      	adds	r1, #6
 80100f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	dc07      	bgt.n	8010108 <VL53L1_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 80100f8:	7bfa      	ldrb	r2, [r7, #15]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	3206      	adds	r2, #6
 80100fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 8010108:	7bfb      	ldrb	r3, [r7, #15]
 801010a:	3301      	adds	r3, #1
 801010c:	73fb      	strb	r3, [r7, #15]
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	7a9b      	ldrb	r3, [r3, #10]
 8010112:	7bfa      	ldrb	r2, [r7, #15]
 8010114:	429a      	cmp	r2, r3
 8010116:	d3cd      	bcc.n	80100b4 <VL53L1_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 8010118:	bf00      	nop
 801011a:	bf00      	nop
 801011c:	3714      	adds	r7, #20
 801011e:	46bd      	mov	sp, r7
 8010120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010124:	4770      	bx	lr

08010126 <VL53L1_hist_estimate_ambient_from_ambient_bins>:


void  VL53L1_hist_estimate_ambient_from_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 8010126:	b480      	push	{r7}
 8010128:	b085      	sub	sp, #20
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 801012e:	2300      	movs	r3, #0
 8010130:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	7adb      	ldrb	r3, [r3, #11]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d03a      	beq.n	80101b0 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2200      	movs	r2, #0
 8010148:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 801014c:	2300      	movs	r3, #0
 801014e:	73fb      	strb	r3, [r7, #15]
 8010150:	e00e      	b.n	8010170 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8010158:	7bf9      	ldrb	r1, [r7, #15]
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	3106      	adds	r1, #6
 801015e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010162:	441a      	add	r2, r3
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 801016a:	7bfb      	ldrb	r3, [r7, #15]
 801016c:	3301      	adds	r3, #1
 801016e:	73fb      	strb	r3, [r7, #15]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	7adb      	ldrb	r3, [r3, #11]
 8010174:	7bfa      	ldrb	r2, [r7, #15]
 8010176:	429a      	cmp	r2, r3
 8010178:	d3eb      	bcc.n	8010152 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 801018c:	687a      	ldr	r2, [r7, #4]
 801018e:	7ad2      	ldrb	r2, [r2, #11]
 8010190:	0852      	lsrs	r2, r2, #1
 8010192:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 8010194:	441a      	add	r2, r3
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 80101a2:	687a      	ldr	r2, [r7, #4]
 80101a4:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53L1_p_004 /=
 80101a6:	fb93 f2f2 	sdiv	r2, r3, r2
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 80101b0:	bf00      	nop
 80101b2:	3714      	adds	r7, #20
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr

080101bc <VL53L1_f_001>:
	VL53L1_dmax_calibration_data_t	     *pcal,
	VL53L1_hist_gen3_dmax_config_t	     *pcfg,
	VL53L1_histogram_bin_data_t          *pbins,
	VL53L1_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 80101bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80101c0:	b0ca      	sub	sp, #296	; 0x128
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 80101c8:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80101cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80101d0:	4603      	mov	r3, r0
 80101d2:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53L1_Error status  = VL53L1_ERROR_NONE;
 80101d6:	2300      	movs	r3, #0
 80101d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 80101dc:	2300      	movs	r3, #0
 80101de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 80101e2:	2300      	movs	r3, #0
 80101e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 80101e8:	2300      	movs	r3, #0
 80101ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 80101ee:	f04f 0200 	mov.w	r2, #0
 80101f2:	f04f 0300 	mov.w	r3, #0
 80101f6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 80101fa:	2300      	movs	r3, #0
 80101fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_006     = 0x0000;
 8010200:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010204:	2300      	movs	r3, #0
 8010206:	8353      	strh	r3, [r2, #26]
	pdata->VL53L1_p_033 = 0x0000;
 8010208:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801020c:	2300      	movs	r3, #0
 801020e:	6153      	str	r3, [r2, #20]
	pdata->VL53L1_p_001          = 0x0000;
 8010210:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010214:	2300      	movs	r3, #0
 8010216:	8313      	strh	r3, [r2, #24]
	pdata->VL53L1_p_012    = 0x0000;
 8010218:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801021c:	2300      	movs	r3, #0
 801021e:	6113      	str	r3, [r2, #16]
	pdata->VL53L1_p_004     = 0x0000;
 8010220:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010224:	2300      	movs	r3, #0
 8010226:	61d3      	str	r3, [r2, #28]
	pdata->VL53L1_p_034 = 0x0000;
 8010228:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801022c:	2300      	movs	r3, #0
 801022e:	6213      	str	r3, [r2, #32]
	pdata->VL53L1_p_035             = 0;
 8010230:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010234:	2300      	movs	r3, #0
 8010236:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53L1_p_007            = 0;
 8010238:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801023c:	2300      	movs	r3, #0
 801023e:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 8010240:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8010244:	2300      	movs	r3, #0
 8010246:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53L1_p_019        != 0) &&
 8010248:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801024c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8010250:	2b00      	cmp	r3, #0
 8010252:	f000 80e1 	beq.w	8010418 <VL53L1_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 8010256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801025a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53L1_p_019        != 0) &&
 801025e:	2b00      	cmp	r3, #0
 8010260:	f000 80da 	beq.w	8010418 <VL53L1_f_001+0x25c>



		pll_period_us   =
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 8010264:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010268:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 801026c:	4618      	mov	r0, r3
 801026e:	f7ff f9ff 	bl	800f670 <VL53L1_calc_pll_period_us>
 8010272:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 8010276:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801027a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801027e:	3301      	adds	r3, #1
 8010280:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53L1_p_036  =
			VL53L1_duration_maths(
 8010284:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801028c:	2110      	movs	r1, #16
 801028e:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8010292:	f7ff fa04 	bl	800f69e <VL53L1_duration_maths>
 8010296:	4602      	mov	r2, r0
		pdata->VL53L1_p_036  =
 8010298:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801029c:	601a      	str	r2, [r3, #0]
				VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53L1_p_001 =
			VL53L1_rate_maths(
 801029e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80102a2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80102a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	4619      	mov	r1, r3
 80102ae:	4610      	mov	r0, r2
 80102b0:	f7ff fc6d 	bl	800fb8e <VL53L1_rate_maths>
 80102b4:	4603      	mov	r3, r0
		pdata->VL53L1_p_001 =
 80102b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80102ba:	8313      	strh	r3, [r2, #24]
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_033   =
			VL53L1_events_per_spad_maths(
 80102bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80102c0:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 80102c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80102c8:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 80102cc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	461a      	mov	r2, r3
 80102d4:	f7ff fa3c 	bl	800f750 <VL53L1_events_per_spad_maths>
 80102d8:	4602      	mov	r2, r0
		pdata->VL53L1_p_033   =
 80102da:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80102de:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 80102e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80102e4:	8adb      	ldrh	r3, [r3, #22]
 80102e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80102ea:	8193      	strh	r3, [r2, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 80102ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80102f0:	8adb      	ldrh	r3, [r3, #22]
 80102f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80102f6:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53L1_p_033 > 0) {
 80102f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80102fc:	695b      	ldr	r3, [r3, #20]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	f000 808a 	beq.w	8010418 <VL53L1_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 8010304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010308:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 801030a:	b29b      	uxth	r3, r3
 801030c:	2200      	movs	r2, #0
 801030e:	461c      	mov	r4, r3
 8010310:	4615      	mov	r5, r2
 8010312:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 8010316:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 801031a:	4622      	mov	r2, r4
 801031c:	462b      	mov	r3, r5
 801031e:	f04f 0000 	mov.w	r0, #0
 8010322:	f04f 0100 	mov.w	r1, #0
 8010326:	0159      	lsls	r1, r3, #5
 8010328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801032c:	0150      	lsls	r0, r2, #5
 801032e:	4602      	mov	r2, r0
 8010330:	460b      	mov	r3, r1
 8010332:	ebb2 0804 	subs.w	r8, r2, r4
 8010336:	eb63 0905 	sbc.w	r9, r3, r5
 801033a:	f04f 0200 	mov.w	r2, #0
 801033e:	f04f 0300 	mov.w	r3, #0
 8010342:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8010346:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 801034a:	ea4f 0288 	mov.w	r2, r8, lsl #2
 801034e:	4690      	mov	r8, r2
 8010350:	4699      	mov	r9, r3
 8010352:	eb18 0a04 	adds.w	sl, r8, r4
 8010356:	eb49 0b05 	adc.w	fp, r9, r5
 801035a:	f04f 0200 	mov.w	r2, #0
 801035e:	f04f 0300 	mov.w	r3, #0
 8010362:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010366:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801036a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801036e:	4692      	mov	sl, r2
 8010370:	469b      	mov	fp, r3
 8010372:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 8010376:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801037a:	f04f 0000 	mov.w	r0, #0
 801037e:	f04f 0100 	mov.w	r1, #0
 8010382:	0319      	lsls	r1, r3, #12
 8010384:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8010388:	0310      	lsls	r0, r2, #12
 801038a:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53L1_p_033/2;
 801038e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010392:	695b      	ldr	r3, [r3, #20]
 8010394:	085b      	lsrs	r3, r3, #1
 8010396:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64  += (uint64_t)tmp32;
 801039a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801039e:	2200      	movs	r2, #0
 80103a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80103a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80103a8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80103ac:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80103b0:	4621      	mov	r1, r4
 80103b2:	1851      	adds	r1, r2, r1
 80103b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80103b6:	4629      	mov	r1, r5
 80103b8:	eb43 0101 	adc.w	r1, r3, r1
 80103bc:	65f9      	str	r1, [r7, #92]	; 0x5c
 80103be:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80103c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 80103c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80103ca:	695b      	ldr	r3, [r3, #20]
 80103cc:	2200      	movs	r2, #0
 80103ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80103d2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80103d6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80103da:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80103de:	f7f0 fc0b 	bl	8000bf8 <__aeabi_uldivmod>
 80103e2:	4602      	mov	r2, r0
 80103e4:	460b      	mov	r3, r1
 80103e6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53L1_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 80103ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80103ee:	8adb      	ldrh	r3, [r3, #22]
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	2200      	movs	r2, #0
 80103f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80103f8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80103fc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010400:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8010404:	4621      	mov	r1, r4
 8010406:	428a      	cmp	r2, r1
 8010408:	4629      	mov	r1, r5
 801040a:	418b      	sbcs	r3, r1
 801040c:	d204      	bcs.n	8010418 <VL53L1_f_001+0x25c>
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 801040e:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8010412:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010416:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 8010418:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801041c:	881b      	ldrh	r3, [r3, #0]
 801041e:	2b00      	cmp	r3, #0
 8010420:	f000 82e9 	beq.w	80109f6 <VL53L1_f_001+0x83a>
		(pbins->VL53L1_p_019        != 0) &&
 8010424:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010428:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 801042c:	2b00      	cmp	r3, #0
 801042e:	f000 82e2 	beq.w	80109f6 <VL53L1_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 8010432:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010436:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53L1_p_019        != 0) &&
 8010438:	2b00      	cmp	r3, #0
 801043a:	f000 82dc 	beq.w	80109f6 <VL53L1_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 801043e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 8010446:	2b00      	cmp	r3, #0
 8010448:	f000 82d5 	beq.w	80109f6 <VL53L1_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 801044c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010450:	885b      	ldrh	r3, [r3, #2]
 8010452:	b29b      	uxth	r3, r3
 8010454:	2200      	movs	r2, #0
 8010456:	653b      	str	r3, [r7, #80]	; 0x50
 8010458:	657a      	str	r2, [r7, #84]	; 0x54
 801045a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 801045e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 8010462:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8010466:	4622      	mov	r2, r4
 8010468:	462b      	mov	r3, r5
 801046a:	f04f 0000 	mov.w	r0, #0
 801046e:	f04f 0100 	mov.w	r1, #0
 8010472:	0159      	lsls	r1, r3, #5
 8010474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010478:	0150      	lsls	r0, r2, #5
 801047a:	4602      	mov	r2, r0
 801047c:	460b      	mov	r3, r1
 801047e:	1b11      	subs	r1, r2, r4
 8010480:	64b9      	str	r1, [r7, #72]	; 0x48
 8010482:	eb63 0305 	sbc.w	r3, r3, r5
 8010486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010488:	f04f 0200 	mov.w	r2, #0
 801048c:	f04f 0300 	mov.w	r3, #0
 8010490:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8010494:	4649      	mov	r1, r9
 8010496:	008b      	lsls	r3, r1, #2
 8010498:	4641      	mov	r1, r8
 801049a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801049e:	4641      	mov	r1, r8
 80104a0:	008a      	lsls	r2, r1, #2
 80104a2:	4611      	mov	r1, r2
 80104a4:	461a      	mov	r2, r3
 80104a6:	460b      	mov	r3, r1
 80104a8:	191b      	adds	r3, r3, r4
 80104aa:	643b      	str	r3, [r7, #64]	; 0x40
 80104ac:	4613      	mov	r3, r2
 80104ae:	eb45 0303 	adc.w	r3, r5, r3
 80104b2:	647b      	str	r3, [r7, #68]	; 0x44
 80104b4:	f04f 0200 	mov.w	r2, #0
 80104b8:	f04f 0300 	mov.w	r3, #0
 80104bc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80104c0:	4629      	mov	r1, r5
 80104c2:	02cb      	lsls	r3, r1, #11
 80104c4:	4621      	mov	r1, r4
 80104c6:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 80104ca:	4621      	mov	r1, r4
 80104cc:	02ca      	lsls	r2, r1, #11
 80104ce:	461c      	mov	r4, r3
 80104d0:	4613      	mov	r3, r2
 80104d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 80104d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80104da:	881b      	ldrh	r3, [r3, #0]
 80104dc:	085b      	lsrs	r3, r3, #1
 80104de:	b29b      	uxth	r3, r3
 80104e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 80104e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80104e8:	2200      	movs	r2, #0
 80104ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80104ee:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80104f2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80104f6:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 80104fa:	4621      	mov	r1, r4
 80104fc:	1851      	adds	r1, r2, r1
 80104fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8010500:	4629      	mov	r1, r5
 8010502:	eb43 0101 	adc.w	r1, r3, r1
 8010506:	63f9      	str	r1, [r7, #60]	; 0x3c
 8010508:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 801050c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 8010510:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010514:	881b      	ldrh	r3, [r3, #0]
 8010516:	b29b      	uxth	r3, r3
 8010518:	2200      	movs	r2, #0
 801051a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801051e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010522:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8010526:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 801052a:	f7f0 fb65 	bl	8000bf8 <__aeabi_uldivmod>
 801052e:	4602      	mov	r2, r0
 8010530:	460b      	mov	r3, r1
 8010532:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53L1_p_012   = (uint32_t)tmp64;
 8010536:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801053a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801053e:	611a      	str	r2, [r3, #16]
		pdata->VL53L1_p_012 <<= 4;
 8010540:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010544:	691b      	ldr	r3, [r3, #16]
 8010546:	011a      	lsls	r2, r3, #4
 8010548:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801054c:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 801054e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	2200      	movs	r2, #0
 8010556:	633b      	str	r3, [r7, #48]	; 0x30
 8010558:	637a      	str	r2, [r7, #52]	; 0x34
 801055a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 801055e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 8010562:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010566:	695b      	ldr	r3, [r3, #20]
 8010568:	2200      	movs	r2, #0
 801056a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801056e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8010572:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010576:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 801057a:	4622      	mov	r2, r4
 801057c:	fb02 f203 	mul.w	r2, r2, r3
 8010580:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010584:	4629      	mov	r1, r5
 8010586:	fb01 f303 	mul.w	r3, r1, r3
 801058a:	441a      	add	r2, r3
 801058c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010590:	4621      	mov	r1, r4
 8010592:	fba3 1301 	umull	r1, r3, r3, r1
 8010596:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801059a:	460b      	mov	r3, r1
 801059c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80105a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80105a4:	18d3      	adds	r3, r2, r3
 80105a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80105aa:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80105ae:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80105b2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 80105b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80105ba:	8b5b      	ldrh	r3, [r3, #26]
 80105bc:	b29b      	uxth	r3, r3
 80105be:	2200      	movs	r2, #0
 80105c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80105c4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80105c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80105cc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80105d0:	4622      	mov	r2, r4
 80105d2:	fb02 f203 	mul.w	r2, r2, r3
 80105d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80105da:	4629      	mov	r1, r5
 80105dc:	fb01 f303 	mul.w	r3, r1, r3
 80105e0:	441a      	add	r2, r3
 80105e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80105e6:	4621      	mov	r1, r4
 80105e8:	fba3 1301 	umull	r1, r3, r3, r1
 80105ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80105f0:	460b      	mov	r3, r1
 80105f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80105f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105fa:	18d3      	adds	r3, r2, r3
 80105fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010600:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8010604:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8010608:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 801060c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010610:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 8010614:	62b9      	str	r1, [r7, #40]	; 0x28
 8010616:	f143 0300 	adc.w	r3, r3, #0
 801061a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801061c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8010620:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 8010624:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010628:	f04f 0000 	mov.w	r0, #0
 801062c:	f04f 0100 	mov.w	r1, #0
 8010630:	0cd0      	lsrs	r0, r2, #19
 8010632:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8010636:	0cd9      	lsrs	r1, r3, #19
 8010638:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 801063c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010640:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8010644:	6239      	str	r1, [r7, #32]
 8010646:	f143 0300 	adc.w	r3, r3, #0
 801064a:	627b      	str	r3, [r7, #36]	; 0x24
 801064c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010650:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 8010654:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8010658:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801065c:	f04f 0300 	mov.w	r3, #0
 8010660:	f7f0 faca 	bl	8000bf8 <__aeabi_uldivmod>
 8010664:	4602      	mov	r2, r0
 8010666:	460b      	mov	r3, r1
 8010668:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 801066c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010670:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8010674:	f173 0300 	sbcs.w	r3, r3, #0
 8010678:	d305      	bcc.n	8010686 <VL53L1_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 801067a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801067e:	f04f 0300 	mov.w	r3, #0
 8010682:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 8010686:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801068a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801068e:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 8010690:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	2200      	movs	r2, #0
 8010698:	61bb      	str	r3, [r7, #24]
 801069a:	61fa      	str	r2, [r7, #28]
 801069c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80106a0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_012;
 80106a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80106a8:	691b      	ldr	r3, [r3, #16]
 80106aa:	2200      	movs	r2, #0
 80106ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80106b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80106b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80106b8:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80106bc:	4622      	mov	r2, r4
 80106be:	fb02 f203 	mul.w	r2, r2, r3
 80106c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80106c6:	4629      	mov	r1, r5
 80106c8:	fb01 f303 	mul.w	r3, r1, r3
 80106cc:	441a      	add	r2, r3
 80106ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80106d2:	4621      	mov	r1, r4
 80106d4:	fba3 1301 	umull	r1, r3, r3, r1
 80106d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80106dc:	460b      	mov	r3, r1
 80106de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80106e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80106e6:	18d3      	adds	r3, r2, r3
 80106e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80106ec:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80106f0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80106f4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 80106f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80106fc:	8b5b      	ldrh	r3, [r3, #26]
 80106fe:	b29b      	uxth	r3, r3
 8010700:	2200      	movs	r2, #0
 8010702:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010706:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801070a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801070e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8010712:	4622      	mov	r2, r4
 8010714:	fb02 f203 	mul.w	r2, r2, r3
 8010718:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801071c:	4629      	mov	r1, r5
 801071e:	fb01 f303 	mul.w	r3, r1, r3
 8010722:	441a      	add	r2, r3
 8010724:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010728:	4621      	mov	r1, r4
 801072a:	fba3 1301 	umull	r1, r3, r3, r1
 801072e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010732:	460b      	mov	r3, r1
 8010734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010738:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801073c:	18d3      	adds	r3, r2, r3
 801073e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010742:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8010746:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 801074a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 801074e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010752:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 8010756:	6139      	str	r1, [r7, #16]
 8010758:	f143 0300 	adc.w	r3, r3, #0
 801075c:	617b      	str	r3, [r7, #20]
 801075e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010762:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 8010766:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801076a:	f04f 0000 	mov.w	r0, #0
 801076e:	f04f 0100 	mov.w	r1, #0
 8010772:	0cd0      	lsrs	r0, r2, #19
 8010774:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8010778:	0cd9      	lsrs	r1, r3, #19
 801077a:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 801077e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8010782:	2200      	movs	r2, #0
 8010784:	67bb      	str	r3, [r7, #120]	; 0x78
 8010786:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 8010788:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801078c:	891b      	ldrh	r3, [r3, #8]
 801078e:	b29b      	uxth	r3, r3
 8010790:	2200      	movs	r2, #0
 8010792:	673b      	str	r3, [r7, #112]	; 0x70
 8010794:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 8010796:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 801079a:	462b      	mov	r3, r5
 801079c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80107a0:	4642      	mov	r2, r8
 80107a2:	fb02 f203 	mul.w	r2, r2, r3
 80107a6:	464b      	mov	r3, r9
 80107a8:	4621      	mov	r1, r4
 80107aa:	fb01 f303 	mul.w	r3, r1, r3
 80107ae:	4413      	add	r3, r2
 80107b0:	4622      	mov	r2, r4
 80107b2:	4641      	mov	r1, r8
 80107b4:	fba2 1201 	umull	r1, r2, r2, r1
 80107b8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80107bc:	460a      	mov	r2, r1
 80107be:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80107c2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80107c6:	4413      	add	r3, r2
 80107c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80107cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80107d0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80107d4:	4622      	mov	r2, r4
 80107d6:	fb02 f203 	mul.w	r2, r2, r3
 80107da:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80107de:	4629      	mov	r1, r5
 80107e0:	fb01 f303 	mul.w	r3, r1, r3
 80107e4:	4413      	add	r3, r2
 80107e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80107ea:	4621      	mov	r1, r4
 80107ec:	fba2 1201 	umull	r1, r2, r2, r1
 80107f0:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80107f4:	460a      	mov	r2, r1
 80107f6:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80107fa:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80107fe:	4413      	add	r3, r2
 8010800:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010804:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8010808:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 801080c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 8010810:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010814:	88db      	ldrh	r3, [r3, #6]
 8010816:	b29b      	uxth	r3, r3
 8010818:	2200      	movs	r2, #0
 801081a:	66bb      	str	r3, [r7, #104]	; 0x68
 801081c:	66fa      	str	r2, [r7, #108]	; 0x6c
 801081e:	f04f 0200 	mov.w	r2, #0
 8010822:	f04f 0300 	mov.w	r3, #0
 8010826:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 801082a:	4629      	mov	r1, r5
 801082c:	01cb      	lsls	r3, r1, #7
 801082e:	4621      	mov	r1, r4
 8010830:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8010834:	4621      	mov	r1, r4
 8010836:	01ca      	lsls	r2, r1, #7
 8010838:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 801083c:	1884      	adds	r4, r0, r2
 801083e:	60bc      	str	r4, [r7, #8]
 8010840:	eb41 0303 	adc.w	r3, r1, r3
 8010844:	60fb      	str	r3, [r7, #12]
 8010846:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801084a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64,
 801084e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010852:	88db      	ldrh	r3, [r3, #6]
 8010854:	b29b      	uxth	r3, r3
 8010856:	2200      	movs	r2, #0
 8010858:	663b      	str	r3, [r7, #96]	; 0x60
 801085a:	667a      	str	r2, [r7, #100]	; 0x64
 801085c:	f04f 0200 	mov.w	r2, #0
 8010860:	f04f 0300 	mov.w	r3, #0
 8010864:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8010868:	4629      	mov	r1, r5
 801086a:	020b      	lsls	r3, r1, #8
 801086c:	4621      	mov	r1, r4
 801086e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8010872:	4621      	mov	r1, r4
 8010874:	020a      	lsls	r2, r1, #8
 8010876:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 801087a:	f7f0 f9bd 	bl	8000bf8 <__aeabi_uldivmod>
 801087e:	4602      	mov	r2, r0
 8010880:	460b      	mov	r3, r1
 8010882:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 8010886:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801088a:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 801088e:	6039      	str	r1, [r7, #0]
 8010890:	f143 0300 	adc.w	r3, r3, #0
 8010894:	607b      	str	r3, [r7, #4]
 8010896:	e9d7 3400 	ldrd	r3, r4, [r7]
 801089a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64, 1000);
 801089e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80108a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80108a6:	f04f 0300 	mov.w	r3, #0
 80108aa:	f7f0 f9a5 	bl	8000bf8 <__aeabi_uldivmod>
 80108ae:	4602      	mov	r2, r0
 80108b0:	460b      	mov	r3, r1
 80108b2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 80108b6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80108ba:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80108be:	f173 0300 	sbcs.w	r3, r3, #0
 80108c2:	d305      	bcc.n	80108d0 <VL53L1_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 80108c4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80108c8:	f04f 0300 	mov.w	r3, #0
 80108cc:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 80108d0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80108d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80108d8:	621a      	str	r2, [r3, #32]



		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 80108da:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80108de:	69db      	ldr	r3, [r3, #28]
 80108e0:	021b      	lsls	r3, r3, #8
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7fe ffcd 	bl	800f882 <VL53L1_isqrt>
 80108e8:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 80108ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80108f0:	785b      	ldrb	r3, [r3, #1]
 80108f2:	461a      	mov	r2, r3
 80108f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80108f8:	fb02 f303 	mul.w	r3, r2, r3
 80108fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53L1_p_004 <
 8010900:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010904:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 8010906:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801090a:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53L1_p_004 <
 801090c:	4293      	cmp	r3, r2
 801090e:	d218      	bcs.n	8010942 <VL53L1_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 8010910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53L1_p_004;
 8010918:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801091c:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 801091e:	1ad3      	subs	r3, r2, r3
 8010920:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 8010924:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010928:	021b      	lsls	r3, r3, #8
 801092a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 801092e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8010932:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010936:	429a      	cmp	r2, r3
 8010938:	d203      	bcs.n	8010942 <VL53L1_f_001+0x786>
				tmp32 = amb_thres_delta;
 801093a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801093e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53L1_p_007 =
			(int16_t)VL53L1_f_002(
 8010942:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010946:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53L1_p_034,
				(uint32_t)pcal->ref__distance_mm,
 8010948:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801094c:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 801094e:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 8010950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010954:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 8010956:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 801095a:	f000 f854 	bl	8010a06 <VL53L1_f_002>
 801095e:	4603      	mov	r3, r0
 8010960:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_007 =
 8010962:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010966:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 8010968:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801096c:	6a1b      	ldr	r3, [r3, #32]
 801096e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 8010972:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010976:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 801097a:	461a      	mov	r2, r3
 801097c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8010980:	fb02 f303 	mul.w	r3, r2, r3
 8010984:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 8010988:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801098c:	3308      	adds	r3, #8
 801098e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 8010992:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8010996:	091b      	lsrs	r3, r3, #4
 8010998:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53L1_p_035 =
			(int16_t)VL53L1_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 801099c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80109a0:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53L1_f_002(
 80109a2:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 80109a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80109a8:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 80109aa:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 80109ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80109b0:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 80109b2:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80109b6:	f000 f826 	bl	8010a06 <VL53L1_f_002>
 80109ba:	4603      	mov	r3, r0
 80109bc:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_035 =
 80109be:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80109c2:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 80109c4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80109c8:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80109cc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80109d0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80109d4:	429a      	cmp	r2, r3
 80109d6:	da07      	bge.n	80109e8 <VL53L1_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 80109d8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80109dc:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80109e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80109e4:	801a      	strh	r2, [r3, #0]
 80109e6:	e006      	b.n	80109f6 <VL53L1_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53L1_p_007;
 80109e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80109ec:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 80109f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80109f4:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 80109f6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 80109fa:	4618      	mov	r0, r3
 80109fc:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8010a00:	46bd      	mov	sp, r7
 8010a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010a06 <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b086      	sub	sp, #24
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	60f8      	str	r0, [r7, #12]
 8010a0e:	60b9      	str	r1, [r7, #8]
 8010a10:	607a      	str	r2, [r7, #4]
 8010a12:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 8010a14:	2300      	movs	r3, #0
 8010a16:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 8010a18:	2300      	movs	r3, #0
 8010a1a:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	009b      	lsls	r3, r3, #2
 8010a20:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	fb03 f303 	mul.w	r3, r3, r3
 8010a28:	693a      	ldr	r2, [r7, #16]
 8010a2a:	4413      	add	r3, r2
 8010a2c:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 8010a2e:	6938      	ldr	r0, [r7, #16]
 8010a30:	f7fe ff27 	bl	800f882 <VL53L1_isqrt>
 8010a34:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 8010a36:	693a      	ldr	r2, [r7, #16]
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	4413      	add	r3, r2
 8010a3c:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	011b      	lsls	r3, r3, #4
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7fe ff1d 	bl	800f882 <VL53L1_isqrt>
 8010a48:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	687a      	ldr	r2, [r7, #4]
 8010a4e:	fb02 f303 	mul.w	r3, r2, r3
 8010a52:	617b      	str	r3, [r7, #20]

	if (tmp32 > 0) {
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d009      	beq.n	8010a6e <VL53L1_f_002+0x68>
		range_mm += (tmp32);
 8010a5a:	697a      	ldr	r2, [r7, #20]
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	4413      	add	r3, r2
 8010a60:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 8010a62:	693b      	ldr	r3, [r7, #16]
 8010a64:	005b      	lsls	r3, r3, #1
 8010a66:	697a      	ldr	r2, [r7, #20]
 8010a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a6c:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 8010a6e:	697b      	ldr	r3, [r7, #20]

}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3718      	adds	r7, #24
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <VL53L1_f_016>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53L1_f_016(
	VL53L1_hist_gen3_algo_private_data_t   *palgo)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b084      	sub	sp, #16
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 8010a80:	2300      	movs	r3, #0
 8010a82:	73fb      	strb	r3, [r7, #15]

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2218      	movs	r2, #24
 8010a88:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022                = 0;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024           = 0;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2200      	movs	r2, #0
 8010a94:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_045         = 0;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2200      	movs	r2, #0
 8010a9a:	711a      	strb	r2, [r3, #4]
	palgo->VL53L1_p_004   = 0;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	609a      	str	r2, [r3, #8]
	palgo->VL53L1_p_032 = 0;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	73fb      	strb	r3, [r7, #15]
 8010aae:	e01f      	b.n	8010af0 <VL53L1_f_016+0x78>
		palgo->VL53L1_p_043[lb]      = 0;
 8010ab0:	7bfb      	ldrb	r3, [r7, #15]
 8010ab2:	687a      	ldr	r2, [r7, #4]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	741a      	strb	r2, [r3, #16]
		palgo->VL53L1_p_046[lb] = 0;
 8010aba:	7bfb      	ldrb	r3, [r7, #15]
 8010abc:	687a      	ldr	r2, [r7, #4]
 8010abe:	4413      	add	r3, r2
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53L1_p_047[lb]     = 0;
 8010ac6:	7bfb      	ldrb	r3, [r7, #15]
 8010ac8:	687a      	ldr	r2, [r7, #4]
 8010aca:	4413      	add	r3, r2
 8010acc:	2200      	movs	r2, #0
 8010ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53L1_p_048[lb]      = 0;
 8010ad2:	7bfa      	ldrb	r2, [r7, #15]
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	322e      	adds	r2, #46	; 0x2e
 8010ad8:	2100      	movs	r1, #0
 8010ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53L1_p_008[lb]     = 0;
 8010ade:	7bfa      	ldrb	r2, [r7, #15]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	3246      	adds	r2, #70	; 0x46
 8010ae4:	2100      	movs	r1, #0
 8010ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 8010aea:	7bfb      	ldrb	r3, [r7, #15]
 8010aec:	3301      	adds	r3, #1
 8010aee:	73fb      	strb	r3, [r7, #15]
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	785b      	ldrb	r3, [r3, #1]
 8010af4:	7bfa      	ldrb	r2, [r7, #15]
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d3da      	bcc.n	8010ab0 <VL53L1_f_016+0x38>
	}

	palgo->VL53L1_p_049 = 0;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2200      	movs	r2, #0
 8010afe:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53L1_p_050               = VL53L1_D_001;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2208      	movs	r2, #8
 8010b06:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53L1_p_051             = 0;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53L1_init_histogram_bin_data_struct(
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010b18:	461a      	mov	r2, r3
 8010b1a:	2118      	movs	r1, #24
 8010b1c:	2000      	movs	r0, #0
 8010b1e:	f7ff f9e8 	bl	800fef2 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8010b28:	461a      	mov	r2, r3
 8010b2a:	2118      	movs	r1, #24
 8010b2c:	2000      	movs	r0, #0
 8010b2e:	f7ff f9e0 	bl	800fef2 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8010b38:	461a      	mov	r2, r3
 8010b3a:	2118      	movs	r1, #24
 8010b3c:	2000      	movs	r0, #0
 8010b3e:	f7ff f9d8 	bl	800fef2 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8010b48:	461a      	mov	r2, r3
 8010b4a:	2118      	movs	r1, #24
 8010b4c:	2000      	movs	r0, #0
 8010b4e:	f7ff f9d0 	bl	800fef2 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8010b58:	461a      	mov	r2, r3
 8010b5a:	2118      	movs	r1, #24
 8010b5c:	2000      	movs	r0, #0
 8010b5e:	f7ff f9c8 	bl	800fef2 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 8010b62:	bf00      	nop
 8010b64:	3710      	adds	r7, #16
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}

08010b6a <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010b6a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010b6e:	b090      	sub	sp, #64	; 0x40
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	61b9      	str	r1, [r7, #24]
 8010b74:	617a      	str	r2, [r7, #20]
 8010b76:	461a      	mov	r2, r3
 8010b78:	4603      	mov	r3, r0
 8010b7a:	83fb      	strh	r3, [r7, #30]
 8010b7c:	4613      	mov	r3, r2
 8010b7e:	777b      	strb	r3, [r7, #29]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010b80:	2300      	movs	r3, #0
 8010b82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 8010b86:	2300      	movs	r3, #0
 8010b88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53L1_p_001            = 0;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 8010b92:	f04f 0200 	mov.w	r2, #0
 8010b96:	f04f 0300 	mov.w	r3, #0
 8010b9a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53L1_p_008       = 0;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 8010baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bac:	7a5a      	ldrb	r2, [r3, #9]
 8010bae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010bb0:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 8010bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bb4:	7a1a      	ldrb	r2, [r3, #8]
 8010bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010bb8:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 8010bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bbc:	7a9a      	ldrb	r2, [r3, #10]
 8010bbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010bc0:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 8010bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bc4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8010bc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010bca:	609a      	str	r2, [r3, #8]



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 8010bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f7ff f93c 	bl	800fe50 <VL53L1_decode_vcsel_period>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	461a      	mov	r2, r3
	palgo->VL53L1_p_031 =
 8010bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010bde:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
 8010be0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010be2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010be6:	17da      	asrs	r2, r3, #31
 8010be8:	60bb      	str	r3, [r7, #8]
 8010bea:	60fa      	str	r2, [r7, #12]
 8010bec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010bf0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 8010bf4:	8bfb      	ldrh	r3, [r7, #30]
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	4698      	mov	r8, r3
 8010bfa:	4691      	mov	r9, r2
 8010bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bfe:	fb08 f203 	mul.w	r2, r8, r3
 8010c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c04:	fb09 f303 	mul.w	r3, r9, r3
 8010c08:	4413      	add	r3, r2
 8010c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c0c:	fba2 4508 	umull	r4, r5, r2, r8
 8010c10:	442b      	add	r3, r5
 8010c12:	461d      	mov	r5, r3
 8010c14:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8010c18:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 8010c1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010c20:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 8010c24:	f143 0b00 	adc.w	fp, r3, #0
 8010c28:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 8010c2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	da08      	bge.n	8010c46 <VL53L1_f_018+0xdc>
 8010c34:	f640 71ff 	movw	r1, #4095	; 0xfff
 8010c38:	1851      	adds	r1, r2, r1
 8010c3a:	6039      	str	r1, [r7, #0]
 8010c3c:	f143 0300 	adc.w	r3, r3, #0
 8010c40:	607b      	str	r3, [r7, #4]
 8010c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c46:	f04f 0000 	mov.w	r0, #0
 8010c4a:	f04f 0100 	mov.w	r1, #0
 8010c4e:	0b10      	lsrs	r0, r2, #12
 8010c50:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8010c54:	1319      	asrs	r1, r3, #12
 8010c56:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 8010c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c5c:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 8010c5e:	2300      	movs	r3, #0
 8010c60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010c64:	e062      	b.n	8010d2c <VL53L1_f_018+0x1c2>

		VL53L1_p_001 = lb >> 2;
 8010c66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c6a:	089b      	lsrs	r3, r3, #2
 8010c6c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 8010c70:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010c74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010c76:	4413      	add	r3, r2
 8010c78:	7c9b      	ldrb	r3, [r3, #18]
 8010c7a:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 8010c7c:	6a3b      	ldr	r3, [r7, #32]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	dd4f      	ble.n	8010d22 <VL53L1_f_018+0x1b8>

			if (lb < pxtalk->VL53L1_p_024 &&
 8010c82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010c84:	7a9b      	ldrb	r3, [r3, #10]
 8010c86:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d20f      	bcs.n	8010cae <VL53L1_f_018+0x144>
 8010c8e:	7f7b      	ldrb	r3, [r7, #29]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d00c      	beq.n	8010cae <VL53L1_f_018+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53L1_p_008 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 8010c94:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010c9a:	3206      	adds	r2, #6
 8010c9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53L1_p_008 = samples * (amb_events +
 8010ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca2:	441a      	add	r2, r3
 8010ca4:	6a3b      	ldr	r3, [r7, #32]
 8010ca6:	fb02 f303 	mul.w	r3, r2, r3
 8010caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8010cac:	e004      	b.n	8010cb8 <VL53L1_f_018+0x14e>
			else
				VL53L1_p_008 = samples *  amb_events;
 8010cae:	6a3b      	ldr	r3, [r7, #32]
 8010cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cb2:	fb02 f303 	mul.w	r3, r2, r3
 8010cb6:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 8010cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7fe fde1 	bl	800f882 <VL53L1_isqrt>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008 += (samples/2);
 8010cc4:	6a3b      	ldr	r3, [r7, #32]
 8010cc6:	0fda      	lsrs	r2, r3, #31
 8010cc8:	4413      	add	r3, r2
 8010cca:	105b      	asrs	r3, r3, #1
 8010ccc:	461a      	mov	r2, r3
 8010cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd0:	4413      	add	r3, r2
 8010cd2:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= samples;
 8010cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cd6:	6a3b      	ldr	r3, [r7, #32]
 8010cd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8010cdc:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 *= ambient_threshold_sigma;
 8010cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce0:	69ba      	ldr	r2, [r7, #24]
 8010ce2:	fb02 f303 	mul.w	r3, r2, r3
 8010ce6:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += 8;
 8010ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cea:	3308      	adds	r3, #8
 8010cec:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= 16;
 8010cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	da00      	bge.n	8010cf6 <VL53L1_f_018+0x18c>
 8010cf4:	330f      	adds	r3, #15
 8010cf6:	111b      	asrs	r3, r3, #4
 8010cf8:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += amb_events;
 8010cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cfe:	4413      	add	r3, r2
 8010d00:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53L1_p_008 < min_ambient_threshold_events)
 8010d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	429a      	cmp	r2, r3
 8010d08:	da01      	bge.n	8010d0e <VL53L1_f_018+0x1a4>
				VL53L1_p_008 = min_ambient_threshold_events;
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 8010d0e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010d12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d14:	3216      	adds	r2, #22
 8010d16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 8010d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d20:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 8010d22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d26:	3301      	adds	r3, #1
 8010d28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010d2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d2e:	7a9b      	ldrb	r3, [r3, #10]
 8010d30:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d396      	bcc.n	8010c66 <VL53L1_f_018+0xfc>

	}



	palgo->VL53L1_p_045 = 0;
 8010d38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 8010d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d40:	7a1b      	ldrb	r3, [r3, #8]
 8010d42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010d46:	e033      	b.n	8010db0 <VL53L1_f_018+0x246>

		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 8010d48:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010d4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d4e:	3206      	adds	r2, #6
 8010d50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010d54:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8010d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d5a:	3116      	adds	r1, #22
 8010d5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d60:	429a      	cmp	r2, r3
 8010d62:	dd13      	ble.n	8010d8c <VL53L1_f_018+0x222>
			palgo->VL53L1_p_043[lb]      = 1;
 8010d64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d6a:	4413      	add	r3, r2
 8010d6c:	2201      	movs	r2, #1
 8010d6e:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 1;
 8010d70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d76:	4413      	add	r3, r2
 8010d78:	2201      	movs	r2, #1
 8010d7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53L1_p_045++;
 8010d7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d80:	791b      	ldrb	r3, [r3, #4]
 8010d82:	3301      	adds	r3, #1
 8010d84:	b2da      	uxtb	r2, r3
 8010d86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d88:	711a      	strb	r2, [r3, #4]
 8010d8a:	e00c      	b.n	8010da6 <VL53L1_f_018+0x23c>
		} else {
			palgo->VL53L1_p_043[lb]      = 0;
 8010d8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d92:	4413      	add	r3, r2
 8010d94:	2200      	movs	r2, #0
 8010d96:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 0;
 8010d98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d9e:	4413      	add	r3, r2
 8010da0:	2200      	movs	r2, #0
 8010da2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 8010da6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010daa:	3301      	adds	r3, #1
 8010dac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010db2:	7a9b      	ldrb	r3, [r3, #10]
 8010db4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d3c5      	bcc.n	8010d48 <VL53L1_f_018+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010dbc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3740      	adds	r7, #64	; 0x40
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010dca <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010dca:	b480      	push	{r7}
 8010dcc:	b085      	sub	sp, #20
 8010dce:	af00      	add	r7, sp, #0
 8010dd0:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 8010dde:	2300      	movs	r3, #0
 8010de0:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2200      	movs	r2, #0
 8010de6:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 8010dea:	2300      	movs	r3, #0
 8010dec:	73fb      	strb	r3, [r7, #15]
 8010dee:	e02d      	b.n	8010e4c <VL53L1_f_019+0x82>

		j = (i + 1) % palgo->VL53L1_p_031;
 8010df0:	7bfb      	ldrb	r3, [r7, #15]
 8010df2:	3301      	adds	r3, #1
 8010df4:	687a      	ldr	r2, [r7, #4]
 8010df6:	78d2      	ldrb	r2, [r2, #3]
 8010df8:	fb93 f1f2 	sdiv	r1, r3, r2
 8010dfc:	fb01 f202 	mul.w	r2, r1, r2
 8010e00:	1a9b      	subs	r3, r3, r2
 8010e02:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	789b      	ldrb	r3, [r3, #2]
 8010e08:	7bfa      	ldrb	r2, [r7, #15]
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d21b      	bcs.n	8010e46 <VL53L1_f_019+0x7c>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	789b      	ldrb	r3, [r3, #2]
 8010e12:	7b3a      	ldrb	r2, [r7, #12]
 8010e14:	429a      	cmp	r2, r3
 8010e16:	d216      	bcs.n	8010e46 <VL53L1_f_019+0x7c>
			if (palgo->VL53L1_p_046[i] == 0 &&
 8010e18:	7bfb      	ldrb	r3, [r7, #15]
 8010e1a:	687a      	ldr	r2, [r7, #4]
 8010e1c:	4413      	add	r3, r2
 8010e1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d10f      	bne.n	8010e46 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 8010e26:	7b3b      	ldrb	r3, [r7, #12]
 8010e28:	687a      	ldr	r2, [r7, #4]
 8010e2a:	4413      	add	r3, r2
 8010e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 8010e30:	2b01      	cmp	r3, #1
 8010e32:	d108      	bne.n	8010e46 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 8010e34:	7bbb      	ldrb	r3, [r7, #14]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d105      	bne.n	8010e46 <VL53L1_f_019+0x7c>
				found == 0) {
				palgo->VL53L1_p_049 = i;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	7bfa      	ldrb	r2, [r7, #15]
 8010e3e:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 8010e42:	2301      	movs	r3, #1
 8010e44:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 8010e46:	7bfb      	ldrb	r3, [r7, #15]
 8010e48:	3301      	adds	r3, #1
 8010e4a:	73fb      	strb	r3, [r7, #15]
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	78db      	ldrb	r3, [r3, #3]
 8010e50:	7bfa      	ldrb	r2, [r7, #15]
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d3cc      	bcc.n	8010df0 <VL53L1_f_019+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010e56:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3714      	adds	r7, #20
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e64:	4770      	bx	lr

08010e66 <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010e66:	b480      	push	{r7}
 8010e68:	b085      	sub	sp, #20
 8010e6a:	af00      	add	r7, sp, #0
 8010e6c:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 8010e72:	2300      	movs	r3, #0
 8010e74:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 8010e76:	2300      	movs	r3, #0
 8010e78:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8010e84:	73fb      	strb	r3, [r7, #15]
 8010e86:	e05a      	b.n	8010f3e <VL53L1_f_020+0xd8>
		palgo->VL53L1_p_031);
		lb++) {



		i =  lb      % palgo->VL53L1_p_031;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	78da      	ldrb	r2, [r3, #3]
 8010e8c:	7bfb      	ldrb	r3, [r7, #15]
 8010e8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e92:	fb01 f202 	mul.w	r2, r1, r2
 8010e96:	1a9b      	subs	r3, r3, r2
 8010e98:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53L1_p_031;
 8010e9a:	7bfb      	ldrb	r3, [r7, #15]
 8010e9c:	3301      	adds	r3, #1
 8010e9e:	687a      	ldr	r2, [r7, #4]
 8010ea0:	78d2      	ldrb	r2, [r2, #3]
 8010ea2:	fb93 f1f2 	sdiv	r1, r3, r2
 8010ea6:	fb01 f202 	mul.w	r2, r1, r2
 8010eaa:	1a9b      	subs	r3, r3, r2
 8010eac:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	789b      	ldrb	r3, [r3, #2]
 8010eb2:	7b7a      	ldrb	r2, [r7, #13]
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d23f      	bcs.n	8010f38 <VL53L1_f_020+0xd2>
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	789b      	ldrb	r3, [r3, #2]
 8010ebc:	7b3a      	ldrb	r2, [r7, #12]
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	d23a      	bcs.n	8010f38 <VL53L1_f_020+0xd2>

			if (palgo->VL53L1_p_046[i] == 0 &&
 8010ec2:	7b7b      	ldrb	r3, [r7, #13]
 8010ec4:	687a      	ldr	r2, [r7, #4]
 8010ec6:	4413      	add	r3, r2
 8010ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d10e      	bne.n	8010eee <VL53L1_f_020+0x88>
				palgo->VL53L1_p_046[j] == 1)
 8010ed0:	7b3b      	ldrb	r3, [r7, #12]
 8010ed2:	687a      	ldr	r2, [r7, #4]
 8010ed4:	4413      	add	r3, r2
 8010ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d107      	bne.n	8010eee <VL53L1_f_020+0x88>
				palgo->VL53L1_p_051++;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	b2da      	uxtb	r2, r3
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d905      	bls.n	8010f0a <VL53L1_f_020+0xa4>
				palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_046[i] > 0)
 8010f0a:	7b7b      	ldrb	r3, [r7, #13]
 8010f0c:	687a      	ldr	r2, [r7, #4]
 8010f0e:	4413      	add	r3, r2
 8010f10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d009      	beq.n	8010f2c <VL53L1_f_020+0xc6>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 8010f18:	7b7b      	ldrb	r3, [r7, #13]
 8010f1a:	687a      	ldr	r2, [r7, #4]
 8010f1c:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 8010f20:	687a      	ldr	r2, [r7, #4]
 8010f22:	4413      	add	r3, r2
 8010f24:	460a      	mov	r2, r1
 8010f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010f2a:	e005      	b.n	8010f38 <VL53L1_f_020+0xd2>
			else
				palgo->VL53L1_p_047[i] = 0;
 8010f2c:	7b7b      	ldrb	r3, [r7, #13]
 8010f2e:	687a      	ldr	r2, [r7, #4]
 8010f30:	4413      	add	r3, r2
 8010f32:	2200      	movs	r2, #0
 8010f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 8010f38:	7bfb      	ldrb	r3, [r7, #15]
 8010f3a:	3301      	adds	r3, #1
 8010f3c:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53L1_p_049 +
 8010f3e:	7bfa      	ldrb	r2, [r7, #15]
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8010f46:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 8010f4c:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 8010f4e:	429a      	cmp	r2, r3
 8010f50:	db9a      	blt.n	8010e88 <VL53L1_f_020+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 8010f52:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3714      	adds	r7, #20
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f60:	4770      	bx	lr

08010f62 <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010f62:	b480      	push	{r7}
 8010f64:	b087      	sub	sp, #28
 8010f66:	af00      	add	r7, sp, #0
 8010f68:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 8010f72:	2300      	movs	r3, #0
 8010f74:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 8010f76:	2300      	movs	r3, #0
 8010f78:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	78db      	ldrb	r3, [r3, #3]
 8010f86:	3b01      	subs	r3, #1
 8010f88:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 8010f8a:	7cbb      	ldrb	r3, [r7, #18]
 8010f8c:	085b      	lsrs	r3, r3, #1
 8010f8e:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53L1_p_049;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8010f96:	75fb      	strb	r3, [r7, #23]
 8010f98:	e0a2      	b.n	80110e0 <VL53L1_f_021+0x17e>
		palgo->VL53L1_p_031);
		blb++) {



		i =  blb      % palgo->VL53L1_p_031;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	78da      	ldrb	r2, [r3, #3]
 8010f9e:	7dfb      	ldrb	r3, [r7, #23]
 8010fa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8010fa4:	fb01 f202 	mul.w	r2, r1, r2
 8010fa8:	1a9b      	subs	r3, r3, r2
 8010faa:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53L1_p_031;
 8010fac:	7dfb      	ldrb	r3, [r7, #23]
 8010fae:	3301      	adds	r3, #1
 8010fb0:	687a      	ldr	r2, [r7, #4]
 8010fb2:	78d2      	ldrb	r2, [r2, #3]
 8010fb4:	fb93 f1f2 	sdiv	r1, r3, r2
 8010fb8:	fb01 f202 	mul.w	r2, r1, r2
 8010fbc:	1a9b      	subs	r3, r3, r2
 8010fbe:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53L1_p_024 &&
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	789b      	ldrb	r3, [r3, #2]
 8010fc4:	7d7a      	ldrb	r2, [r7, #21]
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	f080 8087 	bcs.w	80110da <VL53L1_f_021+0x178>
				j < palgo->VL53L1_p_024) {
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53L1_p_024 &&
 8010fd0:	7d3a      	ldrb	r2, [r7, #20]
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	f080 8081 	bcs.w	80110da <VL53L1_f_021+0x178>



			if (palgo->VL53L1_p_047[i] == 0 &&
 8010fd8:	7d7b      	ldrb	r3, [r7, #21]
 8010fda:	687a      	ldr	r2, [r7, #4]
 8010fdc:	4413      	add	r3, r2
 8010fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d12f      	bne.n	8011046 <VL53L1_f_021+0xe4>
					palgo->VL53L1_p_047[j] > 0) {
 8010fe6:	7d3b      	ldrb	r3, [r7, #20]
 8010fe8:	687a      	ldr	r2, [r7, #4]
 8010fea:	4413      	add	r3, r2
 8010fec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d028      	beq.n	8011046 <VL53L1_f_021+0xe4>

				pulse_no = palgo->VL53L1_p_047[j] - 1;
 8010ff4:	7d3b      	ldrb	r3, [r7, #20]
 8010ff6:	687a      	ldr	r2, [r7, #4]
 8010ff8:	4413      	add	r3, r2
 8010ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ffe:	3b01      	subs	r3, #1
 8011000:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8011008:	7cfa      	ldrb	r2, [r7, #19]
 801100a:	429a      	cmp	r2, r3
 801100c:	d21b      	bcs.n	8011046 <VL53L1_f_021+0xe4>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 801100e:	7cfa      	ldrb	r2, [r7, #19]
 8011010:	4613      	mov	r3, r2
 8011012:	00db      	lsls	r3, r3, #3
 8011014:	4413      	add	r3, r2
 8011016:	009b      	lsls	r3, r3, #2
 8011018:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801101c:	687a      	ldr	r2, [r7, #4]
 801101e:	4413      	add	r3, r2
 8011020:	3304      	adds	r3, #4
 8011022:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_015 = blb;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	7dfa      	ldrb	r2, [r7, #23]
 8011028:	701a      	strb	r2, [r3, #0]
					pdata->VL53L1_p_022    = blb + 1;
 801102a:	7dfb      	ldrb	r3, [r7, #23]
 801102c:	3301      	adds	r3, #1
 801102e:	b2da      	uxtb	r2, r3
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	705a      	strb	r2, [r3, #1]
					pdata->VL53L1_p_025   = 0xFF;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	22ff      	movs	r2, #255	; 0xff
 8011038:	709a      	strb	r2, [r3, #2]
					pdata->VL53L1_p_026     = 0;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2200      	movs	r2, #0
 801103e:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016   = 0;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	2200      	movs	r2, #0
 8011044:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53L1_p_047[i] > 0
 8011046:	7d7b      	ldrb	r3, [r7, #21]
 8011048:	687a      	ldr	r2, [r7, #4]
 801104a:	4413      	add	r3, r2
 801104c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011050:	2b00      	cmp	r3, #0
 8011052:	d042      	beq.n	80110da <VL53L1_f_021+0x178>
				&& palgo->VL53L1_p_047[j] == 0) {
 8011054:	7d3b      	ldrb	r3, [r7, #20]
 8011056:	687a      	ldr	r2, [r7, #4]
 8011058:	4413      	add	r3, r2
 801105a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801105e:	2b00      	cmp	r3, #0
 8011060:	d13b      	bne.n	80110da <VL53L1_f_021+0x178>

				pulse_no = palgo->VL53L1_p_047[i] - 1;
 8011062:	7d7b      	ldrb	r3, [r7, #21]
 8011064:	687a      	ldr	r2, [r7, #4]
 8011066:	4413      	add	r3, r2
 8011068:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801106c:	3b01      	subs	r3, #1
 801106e:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8011076:	7cfa      	ldrb	r2, [r7, #19]
 8011078:	429a      	cmp	r2, r3
 801107a:	d22e      	bcs.n	80110da <VL53L1_f_021+0x178>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 801107c:	7cfa      	ldrb	r2, [r7, #19]
 801107e:	4613      	mov	r3, r2
 8011080:	00db      	lsls	r3, r3, #3
 8011082:	4413      	add	r3, r2
 8011084:	009b      	lsls	r3, r3, #2
 8011086:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801108a:	687a      	ldr	r2, [r7, #4]
 801108c:	4413      	add	r3, r2
 801108e:	3304      	adds	r3, #4
 8011090:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_026    = blb;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	7dfa      	ldrb	r2, [r7, #23]
 8011096:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016  = blb + 1;
 8011098:	7dfb      	ldrb	r3, [r7, #23]
 801109a:	3301      	adds	r3, #1
 801109c:	b2da      	uxtb	r2, r3
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	711a      	strb	r2, [r3, #4]

					pdata->VL53L1_p_027 =
						(pdata->VL53L1_p_026 + 1) -
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53L1_p_022;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53L1_p_026 + 1) -
 80110aa:	1ad3      	subs	r3, r2, r3
 80110ac:	b2db      	uxtb	r3, r3
 80110ae:	3301      	adds	r3, #1
 80110b0:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_027 =
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	715a      	strb	r2, [r3, #5]
					pdata->VL53L1_p_055 =
						(pdata->VL53L1_p_016 + 1) -
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53L1_p_015;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53L1_p_016 + 1) -
 80110be:	1ad3      	subs	r3, r2, r3
 80110c0:	b2db      	uxtb	r3, r3
 80110c2:	3301      	adds	r3, #1
 80110c4:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_055 =
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53L1_p_055 >
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	799b      	ldrb	r3, [r3, #6]
 80110ce:	7cba      	ldrb	r2, [r7, #18]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d202      	bcs.n	80110da <VL53L1_f_021+0x178>
						max_filter_half_width)
						pdata->VL53L1_p_055 =
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	7cba      	ldrb	r2, [r7, #18]
 80110d8:	719a      	strb	r2, [r3, #6]
		blb++) {
 80110da:	7dfb      	ldrb	r3, [r7, #23]
 80110dc:	3301      	adds	r3, #1
 80110de:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53L1_p_049 +
 80110e0:	7dfa      	ldrb	r2, [r7, #23]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80110e8:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53L1_p_049 +
 80110ee:	440b      	add	r3, r1
	for (blb = palgo->VL53L1_p_049;
 80110f0:	429a      	cmp	r2, r3
 80110f2:	f6ff af52 	blt.w	8010f9a <VL53L1_f_021+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 80110f6:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 80110fa:	4618      	mov	r0, r3
 80110fc:	371c      	adds	r7, #28
 80110fe:	46bd      	mov	sp, r7
 8011100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011104:	4770      	bx	lr

08011106 <VL53L1_f_028>:


VL53L1_Error VL53L1_f_028(
	VL53L1_HistTargetOrder                target_order,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8011106:	b580      	push	{r7, lr}
 8011108:	b090      	sub	sp, #64	; 0x40
 801110a:	af00      	add	r7, sp, #0
 801110c:	4603      	mov	r3, r0
 801110e:	6039      	str	r1, [r7, #0]
 8011110:	71fb      	strb	r3, [r7, #7]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8011112:	2300      	movs	r3, #0
 8011114:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53L1_hist_pulse_data_t  tmp;
	VL53L1_hist_pulse_data_t *ptmp = &tmp;
 8011118:	f107 030c 	add.w	r3, r7, #12
 801111c:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_hist_pulse_data_t *p0;
	VL53L1_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 801111e:	2300      	movs	r3, #0
 8011120:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 8011124:	2301      	movs	r3, #1
 8011126:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8011130:	2b01      	cmp	r3, #1
 8011132:	d965      	bls.n	8011200 <VL53L1_f_028+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 8011134:	e05f      	b.n	80111f6 <VL53L1_f_028+0xf0>

		swapped = 0;
 8011136:	2300      	movs	r3, #0
 8011138:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 801113c:	2301      	movs	r3, #1
 801113e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011142:	e051      	b.n	80111e8 <VL53L1_f_028+0xe2>

			p0 = &(palgo->VL53L1_p_002[i-1]);
 8011144:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011148:	1e5a      	subs	r2, r3, #1
 801114a:	4613      	mov	r3, r2
 801114c:	00db      	lsls	r3, r3, #3
 801114e:	4413      	add	r3, r2
 8011150:	009b      	lsls	r3, r3, #2
 8011152:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011156:	683a      	ldr	r2, [r7, #0]
 8011158:	4413      	add	r3, r2
 801115a:	3304      	adds	r3, #4
 801115c:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53L1_p_002[i]);
 801115e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011162:	4613      	mov	r3, r2
 8011164:	00db      	lsls	r3, r3, #3
 8011166:	4413      	add	r3, r2
 8011168:	009b      	lsls	r3, r3, #2
 801116a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801116e:	683a      	ldr	r2, [r7, #0]
 8011170:	4413      	add	r3, r2
 8011172:	3304      	adds	r3, #4
 8011174:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 8011176:	79fb      	ldrb	r3, [r7, #7]
 8011178:	2b02      	cmp	r3, #2
 801117a:	d118      	bne.n	80111ae <VL53L1_f_028+0xa8>
			== VL53L1_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53L1_p_013 <
 801117c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801117e:	691a      	ldr	r2, [r3, #16]
						p1->VL53L1_p_013) {
 8011180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011182:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53L1_p_013 <
 8011184:	429a      	cmp	r2, r3
 8011186:	da2a      	bge.n	80111de <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 8011188:	2224      	movs	r2, #36	; 0x24
 801118a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801118c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801118e:	f009 fd4f 	bl	801ac30 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 8011192:	2224      	movs	r2, #36	; 0x24
 8011194:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011198:	f009 fd4a 	bl	801ac30 <memcpy>
					p0, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 801119c:	2224      	movs	r2, #36	; 0x24
 801119e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80111a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80111a2:	f009 fd45 	bl	801ac30 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 80111a6:	2301      	movs	r3, #1
 80111a8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80111ac:	e017      	b.n	80111de <VL53L1_f_028+0xd8>
				}

			} else {

				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 80111ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111b0:	699a      	ldr	r2, [r3, #24]
 80111b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b4:	699b      	ldr	r3, [r3, #24]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d911      	bls.n	80111de <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 80111ba:	2224      	movs	r2, #36	; 0x24
 80111bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80111be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80111c0:	f009 fd36 	bl	801ac30 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 80111c4:	2224      	movs	r2, #36	; 0x24
 80111c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80111c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111ca:	f009 fd31 	bl	801ac30 <memcpy>
					p0,   sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 80111ce:	2224      	movs	r2, #36	; 0x24
 80111d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80111d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80111d4:	f009 fd2c 	bl	801ac30 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 80111d8:	2301      	movs	r3, #1
 80111da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 80111de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80111e2:	3301      	adds	r3, #1
 80111e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 80111ee:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d3a6      	bcc.n	8011144 <VL53L1_f_028+0x3e>
	while (swapped > 0) {
 80111f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d19b      	bne.n	8011136 <VL53L1_f_028+0x30>

			}
		}
	}

ENDFUNC:
 80111fe:	e000      	b.n	8011202 <VL53L1_f_028+0xfc>
		goto ENDFUNC;
 8011200:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 8011202:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 8011206:	4618      	mov	r0, r3
 8011208:	3740      	adds	r7, #64	; 0x40
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}

0801120e <VL53L1_f_022>:

VL53L1_Error VL53L1_f_022(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 801120e:	b480      	push	{r7}
 8011210:	b087      	sub	sp, #28
 8011212:	af00      	add	r7, sp, #0
 8011214:	4603      	mov	r3, r0
 8011216:	60b9      	str	r1, [r7, #8]
 8011218:	607a      	str	r2, [r7, #4]
 801121a:	73fb      	strb	r3, [r7, #15]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801121c:	2300      	movs	r3, #0
 801121e:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 8011220:	2300      	movs	r3, #0
 8011222:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8011224:	2300      	movs	r3, #0
 8011226:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8011228:	7bfa      	ldrb	r2, [r7, #15]
 801122a:	4613      	mov	r3, r2
 801122c:	00db      	lsls	r3, r3, #3
 801122e:	4413      	add	r3, r2
 8011230:	009b      	lsls	r3, r3, #2
 8011232:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011236:	687a      	ldr	r2, [r7, #4]
 8011238:	4413      	add	r3, r2
 801123a:	3304      	adds	r3, #4
 801123c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 801123e:	693b      	ldr	r3, [r7, #16]
 8011240:	2200      	movs	r2, #0
 8011242:	60da      	str	r2, [r3, #12]
	pdata->VL53L1_p_020 = 0;
 8011244:	693b      	ldr	r3, [r7, #16]
 8011246:	2200      	movs	r2, #0
 8011248:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	781b      	ldrb	r3, [r3, #0]
 801124e:	75fb      	strb	r3, [r7, #23]
 8011250:	e01c      	b.n	801128c <VL53L1_f_022+0x7e>
		i =  lb % palgo->VL53L1_p_031;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	78da      	ldrb	r2, [r3, #3]
 8011256:	7dfb      	ldrb	r3, [r7, #23]
 8011258:	fbb3 f1f2 	udiv	r1, r3, r2
 801125c:	fb01 f202 	mul.w	r2, r1, r2
 8011260:	1a9b      	subs	r3, r3, r2
 8011262:	757b      	strb	r3, [r7, #21]
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 8011264:	693b      	ldr	r3, [r7, #16]
 8011266:	68da      	ldr	r2, [r3, #12]
 8011268:	7d79      	ldrb	r1, [r7, #21]
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	3106      	adds	r1, #6
 801126e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011272:	441a      	add	r2, r3
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	60da      	str	r2, [r3, #12]
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 8011278:	693b      	ldr	r3, [r7, #16]
 801127a:	689a      	ldr	r2, [r3, #8]
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	689b      	ldr	r3, [r3, #8]
 8011280:	441a      	add	r2, r3
 8011282:	693b      	ldr	r3, [r7, #16]
 8011284:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8011286:	7dfb      	ldrb	r3, [r7, #23]
 8011288:	3301      	adds	r3, #1
 801128a:	75fb      	strb	r3, [r7, #23]
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	791b      	ldrb	r3, [r3, #4]
 8011290:	7dfa      	ldrb	r2, [r7, #23]
 8011292:	429a      	cmp	r2, r3
 8011294:	d9dd      	bls.n	8011252 <VL53L1_f_022+0x44>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 8011296:	693b      	ldr	r3, [r7, #16]
 8011298:	68da      	ldr	r2, [r3, #12]
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	689b      	ldr	r3, [r3, #8]
 801129e:	1ad2      	subs	r2, r2, r3
	pdata->VL53L1_p_013 =
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 80112a4:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	371c      	adds	r7, #28
 80112ac:	46bd      	mov	sp, r7
 80112ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b2:	4770      	bx	lr

080112b4 <VL53L1_f_027>:
VL53L1_Error VL53L1_f_027(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 80112b4:	b590      	push	{r4, r7, lr}
 80112b6:	b08d      	sub	sp, #52	; 0x34
 80112b8:	af02      	add	r7, sp, #8
 80112ba:	60ba      	str	r2, [r7, #8]
 80112bc:	607b      	str	r3, [r7, #4]
 80112be:	4603      	mov	r3, r0
 80112c0:	73fb      	strb	r3, [r7, #15]
 80112c2:	460b      	mov	r3, r1
 80112c4:	73bb      	strb	r3, [r7, #14]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80112c6:	2300      	movs	r3, #0
 80112c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 80112cc:	2300      	movs	r3, #0
 80112ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53L1_p_015 = 0;
 80112d2:	2300      	movs	r3, #0
 80112d4:	843b      	strh	r3, [r7, #32]
	int16_t   VL53L1_p_016   = 0;
 80112d6:	2300      	movs	r3, #0
 80112d8:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 80112da:	2300      	movs	r3, #0
 80112dc:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 80112de:	2300      	movs	r3, #0
 80112e0:	61bb      	str	r3, [r7, #24]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80112e2:	7bfa      	ldrb	r2, [r7, #15]
 80112e4:	4613      	mov	r3, r2
 80112e6:	00db      	lsls	r3, r3, #3
 80112e8:	4413      	add	r3, r2
 80112ea:	009b      	lsls	r3, r3, #2
 80112ec:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80112f0:	687a      	ldr	r2, [r7, #4]
 80112f2:	4413      	add	r3, r2
 80112f4:	3304      	adds	r3, #4
 80112f6:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53L1_p_025 == 0xFF)
 80112f8:	697b      	ldr	r3, [r7, #20]
 80112fa:	789b      	ldrb	r3, [r3, #2]
 80112fc:	2bff      	cmp	r3, #255	; 0xff
 80112fe:	d102      	bne.n	8011306 <VL53L1_f_027+0x52>
		pdata->VL53L1_p_025 = 1;
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	2201      	movs	r2, #1
 8011304:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 8011306:	697b      	ldr	r3, [r7, #20]
 8011308:	789b      	ldrb	r3, [r3, #2]
 801130a:	687a      	ldr	r2, [r7, #4]
 801130c:	78d2      	ldrb	r2, [r2, #3]
 801130e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011312:	fb01 f202 	mul.w	r2, r1, r2
 8011316:	1a9b      	subs	r3, r3, r2
 8011318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53L1_p_015  = (int16_t)i;
 801131c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011320:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 8011322:	697b      	ldr	r3, [r7, #20]
 8011324:	781b      	ldrb	r3, [r3, #0]
 8011326:	b29a      	uxth	r2, r3
 8011328:	8c3b      	ldrh	r3, [r7, #32]
 801132a:	4413      	add	r3, r2
 801132c:	b29b      	uxth	r3, r3
 801132e:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 8011330:	8c3a      	ldrh	r2, [r7, #32]
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	789b      	ldrb	r3, [r3, #2]
 8011336:	b29b      	uxth	r3, r3
 8011338:	1ad3      	subs	r3, r2, r3
 801133a:	b29b      	uxth	r3, r3
 801133c:	843b      	strh	r3, [r7, #32]

	VL53L1_p_016    = (int16_t)i;
 801133e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011342:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	791b      	ldrb	r3, [r3, #4]
 8011348:	b29a      	uxth	r2, r3
 801134a:	8bfb      	ldrh	r3, [r7, #30]
 801134c:	4413      	add	r3, r2
 801134e:	b29b      	uxth	r3, r3
 8011350:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 8011352:	8bfa      	ldrh	r2, [r7, #30]
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	789b      	ldrb	r3, [r3, #2]
 8011358:	b29b      	uxth	r3, r3
 801135a:	1ad3      	subs	r3, r2, r3
 801135c:	b29b      	uxth	r3, r3
 801135e:	83fb      	strh	r3, [r7, #30]


	window_width = VL53L1_p_016 - VL53L1_p_015;
 8011360:	8bfa      	ldrh	r2, [r7, #30]
 8011362:	8c3b      	ldrh	r3, [r7, #32]
 8011364:	1ad3      	subs	r3, r2, r3
 8011366:	b29b      	uxth	r3, r3
 8011368:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 801136a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801136e:	2b03      	cmp	r3, #3
 8011370:	dd01      	ble.n	8011376 <VL53L1_f_027+0xc2>
		window_width = 3;
 8011372:	2303      	movs	r3, #3
 8011374:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53L1_f_030(
			VL53L1_p_015,
			VL53L1_p_015 + window_width,
 8011376:	8c3a      	ldrh	r2, [r7, #32]
 8011378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801137a:	4413      	add	r3, r2
 801137c:	b29b      	uxth	r3, r3
		VL53L1_f_030(
 801137e:	b219      	sxth	r1, r3
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	78da      	ldrb	r2, [r3, #3]
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	3314      	adds	r3, #20
 8011388:	7bbc      	ldrb	r4, [r7, #14]
 801138a:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 801138e:	9301      	str	r3, [sp, #4]
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	9300      	str	r3, [sp, #0]
 8011394:	4623      	mov	r3, r4
 8011396:	f000 f846 	bl	8011426 <VL53L1_f_030>
 801139a:	4603      	mov	r3, r0
 801139c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53L1_p_028));


	if (status == VL53L1_ERROR_NONE)
 80113a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d114      	bne.n	80113d2 <VL53L1_f_027+0x11e>
		status =
			VL53L1_f_030(
				VL53L1_p_016 - window_width,
 80113a8:	8bfa      	ldrh	r2, [r7, #30]
 80113aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80113ac:	1ad3      	subs	r3, r2, r3
 80113ae:	b29b      	uxth	r3, r3
			VL53L1_f_030(
 80113b0:	b218      	sxth	r0, r3
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	78da      	ldrb	r2, [r3, #3]
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	331c      	adds	r3, #28
 80113ba:	7bbc      	ldrb	r4, [r7, #14]
 80113bc:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80113c0:	9301      	str	r3, [sp, #4]
 80113c2:	68bb      	ldr	r3, [r7, #8]
 80113c4:	9300      	str	r3, [sp, #0]
 80113c6:	4623      	mov	r3, r4
 80113c8:	f000 f82d 	bl	8011426 <VL53L1_f_030>
 80113cc:	4603      	mov	r3, r0
 80113ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53L1_p_029));


	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	695a      	ldr	r2, [r3, #20]
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	69db      	ldr	r3, [r3, #28]
 80113da:	429a      	cmp	r2, r3
 80113dc:	d909      	bls.n	80113f2 <VL53L1_f_027+0x13e>
		tmp_phase        = pdata->VL53L1_p_028;
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	695b      	ldr	r3, [r3, #20]
 80113e2:	61bb      	str	r3, [r7, #24]
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	69da      	ldr	r2, [r3, #28]
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	615a      	str	r2, [r3, #20]
		pdata->VL53L1_p_029 = tmp_phase;
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	69ba      	ldr	r2, [r7, #24]
 80113f0:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	699a      	ldr	r2, [r3, #24]
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	695b      	ldr	r3, [r3, #20]
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d203      	bcs.n	8011406 <VL53L1_f_027+0x152>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	699a      	ldr	r2, [r3, #24]
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	615a      	str	r2, [r3, #20]


	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	699a      	ldr	r2, [r3, #24]
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	69db      	ldr	r3, [r3, #28]
 801140e:	429a      	cmp	r2, r3
 8011410:	d903      	bls.n	801141a <VL53L1_f_027+0x166>
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	699a      	ldr	r2, [r3, #24]
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 801141a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801141e:	4618      	mov	r0, r3
 8011420:	372c      	adds	r7, #44	; 0x2c
 8011422:	46bd      	mov	sp, r7
 8011424:	bd90      	pop	{r4, r7, pc}

08011426 <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 8011426:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801142a:	b09d      	sub	sp, #116	; 0x74
 801142c:	af00      	add	r7, sp, #0
 801142e:	461c      	mov	r4, r3
 8011430:	4603      	mov	r3, r0
 8011432:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8011436:	460b      	mov	r3, r1
 8011438:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801143c:	4613      	mov	r3, r2
 801143e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011442:	4623      	mov	r3, r4
 8011444:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8011448:	2300      	movs	r3, #0
 801144a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 801144e:	2300      	movs	r3, #0
 8011450:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 8011454:	2300      	movs	r3, #0
 8011456:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53L1_p_008        = 0;
 801145a:	f04f 0200 	mov.w	r2, #0
 801145e:	f04f 0300 	mov.w	r3, #0
 8011462:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 8011466:	f04f 0200 	mov.w	r2, #0
 801146a:	f04f 0300 	mov.w	r3, #0
 801146e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 8011472:	f04f 0200 	mov.w	r2, #0
 8011476:	f04f 0300 	mov.w	r3, #0
 801147a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 801147e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011486:	6013      	str	r3, [r2, #0]

	if (VL53L1_p_031 != 0)
 8011488:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801148c:	2b00      	cmp	r3, #0
 801148e:	f000 809c 	beq.w	80115ca <VL53L1_f_030+0x1a4>
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 8011492:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011496:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 801149a:	e08f      	b.n	80115bc <VL53L1_f_030+0x196>

		if (lb < 0)
 801149c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	da09      	bge.n	80114b8 <VL53L1_f_030+0x92>
			i = lb + (int16_t)VL53L1_p_031;
 80114a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80114a8:	b29a      	uxth	r2, r3
 80114aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80114ae:	4413      	add	r3, r2
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80114b6:	e00a      	b.n	80114ce <VL53L1_f_030+0xa8>
		else
			i = lb % (int16_t)VL53L1_p_031;
 80114b8:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 80114bc:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80114c0:	fb91 f3f2 	sdiv	r3, r1, r2
 80114c4:	fb02 f303 	mul.w	r3, r2, r3
 80114c8:	1acb      	subs	r3, r1, r3
 80114ca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 80114ce:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	db6b      	blt.n	80115ae <VL53L1_f_030+0x188>
 80114d6:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80114da:	2b17      	cmp	r3, #23
 80114dc:	dc67      	bgt.n	80115ae <VL53L1_f_030+0x188>
			VL53L1_p_008 =
				(int64_t)pbins->bin_data[i] -
 80114de:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80114e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80114e6:	3306      	adds	r3, #6
 80114e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114ec:	17da      	asrs	r2, r3, #31
 80114ee:	633b      	str	r3, [r7, #48]	; 0x30
 80114f0:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53L1_p_004;
 80114f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80114f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80114fa:	17da      	asrs	r2, r3, #31
 80114fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80114fe:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53L1_p_008 =
 8011500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011502:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011506:	4602      	mov	r2, r0
 8011508:	1a9b      	subs	r3, r3, r2
 801150a:	623b      	str	r3, [r7, #32]
 801150c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801150e:	460a      	mov	r2, r1
 8011510:	eb63 0302 	sbc.w	r3, r3, r2
 8011514:	627b      	str	r3, [r7, #36]	; 0x24
 8011516:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801151a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53L1_p_008 < 0)
 801151e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8011522:	2b00      	cmp	r3, #0
 8011524:	d009      	beq.n	801153a <VL53L1_f_030+0x114>
 8011526:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801152a:	2b00      	cmp	r3, #0
 801152c:	da05      	bge.n	801153a <VL53L1_f_030+0x114>
				VL53L1_p_008 = 0;
 801152e:	f04f 0200 	mov.w	r2, #0
 8011532:	f04f 0300 	mov.w	r3, #0
 8011536:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53L1_p_008;
 801153a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801153e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8011542:	1884      	adds	r4, r0, r2
 8011544:	61bc      	str	r4, [r7, #24]
 8011546:	eb41 0303 	adc.w	r3, r1, r3
 801154a:	61fb      	str	r3, [r7, #28]
 801154c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8011550:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 8011554:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8011558:	17da      	asrs	r2, r3, #31
 801155a:	63bb      	str	r3, [r7, #56]	; 0x38
 801155c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801155e:	f04f 0200 	mov.w	r2, #0
 8011562:	f04f 0300 	mov.w	r3, #0
 8011566:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011568:	02cb      	lsls	r3, r1, #11
 801156a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801156c:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8011570:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011572:	02ca      	lsls	r2, r1, #11
 8011574:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 8011578:	f143 0600 	adc.w	r6, r3, #0
 801157c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801157e:	fb06 f203 	mul.w	r2, r6, r3
 8011582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011584:	fb05 f303 	mul.w	r3, r5, r3
 8011588:	441a      	add	r2, r3
 801158a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801158c:	fba3 ab05 	umull	sl, fp, r3, r5
 8011590:	eb02 030b 	add.w	r3, r2, fp
 8011594:	469b      	mov	fp, r3
			weighted_sum +=
 8011596:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801159a:	eb12 010a 	adds.w	r1, r2, sl
 801159e:	6139      	str	r1, [r7, #16]
 80115a0:	eb43 030b 	adc.w	r3, r3, fp
 80115a4:	617b      	str	r3, [r7, #20]
 80115a6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80115aa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 80115ae:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	3301      	adds	r3, #1
 80115b6:	b29b      	uxth	r3, r3
 80115b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80115bc:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 80115c0:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80115c4:	429a      	cmp	r2, r3
 80115c6:	f77f af69 	ble.w	801149c <VL53L1_f_030+0x76>
			VL53L1_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 80115ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80115ce:	2a01      	cmp	r2, #1
 80115d0:	f173 0300 	sbcs.w	r3, r3, #0
 80115d4:	db3b      	blt.n	801164e <VL53L1_f_030+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 80115d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80115da:	0fd9      	lsrs	r1, r3, #31
 80115dc:	2000      	movs	r0, #0
 80115de:	60b9      	str	r1, [r7, #8]
 80115e0:	60f8      	str	r0, [r7, #12]
 80115e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80115e6:	4621      	mov	r1, r4
 80115e8:	eb11 0802 	adds.w	r8, r1, r2
 80115ec:	4629      	mov	r1, r5
 80115ee:	eb41 0903 	adc.w	r9, r1, r3
 80115f2:	f04f 0200 	mov.w	r2, #0
 80115f6:	f04f 0300 	mov.w	r3, #0
 80115fa:	ea4f 0258 	mov.w	r2, r8, lsr #1
 80115fe:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 8011602:	ea4f 0369 	mov.w	r3, r9, asr #1
 8011606:	4610      	mov	r0, r2
 8011608:	4619      	mov	r1, r3
 801160a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801160e:	1814      	adds	r4, r2, r0
 8011610:	603c      	str	r4, [r7, #0]
 8011612:	414b      	adcs	r3, r1
 8011614:	607b      	str	r3, [r7, #4]
 8011616:	e9d7 3400 	ldrd	r3, r4, [r7]
 801161a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 801161e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8011622:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8011626:	f7ef fa97 	bl	8000b58 <__aeabi_ldivmod>
 801162a:	4602      	mov	r2, r0
 801162c:	460b      	mov	r3, r1
 801162e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 8011632:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011636:	2b00      	cmp	r3, #0
 8011638:	da05      	bge.n	8011646 <VL53L1_f_030+0x220>
			weighted_sum = 0;
 801163a:	f04f 0200 	mov.w	r2, #0
 801163e:	f04f 0300 	mov.w	r3, #0
 8011642:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 8011646:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011648:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801164c:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 801164e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8011652:	4618      	mov	r0, r3
 8011654:	3774      	adds	r7, #116	; 0x74
 8011656:	46bd      	mov	sp, r7
 8011658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801165c <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b086      	sub	sp, #24
 8011660:	af00      	add	r7, sp, #0
 8011662:	60b9      	str	r1, [r7, #8]
 8011664:	607a      	str	r2, [r7, #4]
 8011666:	603b      	str	r3, [r7, #0]
 8011668:	4603      	mov	r3, r0
 801166a:	73fb      	strb	r3, [r7, #15]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801166c:	2300      	movs	r3, #0
 801166e:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 8011670:	2300      	movs	r3, #0
 8011672:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8011674:	2300      	movs	r3, #0
 8011676:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8011678:	7bfa      	ldrb	r2, [r7, #15]
 801167a:	4613      	mov	r3, r2
 801167c:	00db      	lsls	r3, r3, #3
 801167e:	4413      	add	r3, r2
 8011680:	009b      	lsls	r3, r3, #2
 8011682:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011686:	687a      	ldr	r2, [r7, #4]
 8011688:	4413      	add	r3, r2
 801168a:	3304      	adds	r3, #4
 801168c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 801168e:	22ac      	movs	r2, #172	; 0xac
 8011690:	68b9      	ldr	r1, [r7, #8]
 8011692:	6a38      	ldr	r0, [r7, #32]
 8011694:	f009 facc 	bl	801ac30 <memcpy>



	for (lb = palgo->VL53L1_p_049;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801169e:	75fb      	strb	r3, [r7, #23]
 80116a0:	e020      	b.n	80116e4 <VL53L1_f_023+0x88>
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	781b      	ldrb	r3, [r3, #0]
 80116a6:	7dfa      	ldrb	r2, [r7, #23]
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d304      	bcc.n	80116b6 <VL53L1_f_023+0x5a>
 80116ac:	693b      	ldr	r3, [r7, #16]
 80116ae:	791b      	ldrb	r3, [r3, #4]
 80116b0:	7dfa      	ldrb	r2, [r7, #23]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d913      	bls.n	80116de <VL53L1_f_023+0x82>
			i =  lb % palgo->VL53L1_p_031;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	78da      	ldrb	r2, [r3, #3]
 80116ba:	7dfb      	ldrb	r3, [r7, #23]
 80116bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80116c0:	fb01 f202 	mul.w	r2, r1, r2
 80116c4:	1a9b      	subs	r3, r3, r2
 80116c6:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53L1_p_024)
 80116c8:	6a3b      	ldr	r3, [r7, #32]
 80116ca:	7a9b      	ldrb	r3, [r3, #10]
 80116cc:	7d7a      	ldrb	r2, [r7, #21]
 80116ce:	429a      	cmp	r2, r3
 80116d0:	d205      	bcs.n	80116de <VL53L1_f_023+0x82>
				ppulse->bin_data[i] = pad_value;
 80116d2:	7d7a      	ldrb	r2, [r7, #21]
 80116d4:	6a3b      	ldr	r3, [r7, #32]
 80116d6:	3206      	adds	r2, #6
 80116d8:	6839      	ldr	r1, [r7, #0]
 80116da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 80116de:	7dfb      	ldrb	r3, [r7, #23]
 80116e0:	3301      	adds	r3, #1
 80116e2:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53L1_p_049 +
 80116e4:	7dfa      	ldrb	r2, [r7, #23]
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80116ec:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 80116f2:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 80116f4:	429a      	cmp	r2, r3
 80116f6:	dbd4      	blt.n	80116a2 <VL53L1_f_023+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 80116f8:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3718      	adds	r7, #24
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 8011704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011708:	b096      	sub	sp, #88	; 0x58
 801170a:	af08      	add	r7, sp, #32
 801170c:	4604      	mov	r4, r0
 801170e:	4608      	mov	r0, r1
 8011710:	4611      	mov	r1, r2
 8011712:	461a      	mov	r2, r3
 8011714:	4623      	mov	r3, r4
 8011716:	73fb      	strb	r3, [r7, #15]
 8011718:	4603      	mov	r3, r0
 801171a:	73bb      	strb	r3, [r7, #14]
 801171c:	460b      	mov	r3, r1
 801171e:	737b      	strb	r3, [r7, #13]
 8011720:	4613      	mov	r3, r2
 8011722:	733b      	strb	r3, [r7, #12]


	VL53L1_Error status      = VL53L1_ERROR_NONE;
 8011724:	2300      	movs	r3, #0
 8011726:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_Error func_status = VL53L1_ERROR_NONE;
 801172a:	2300      	movs	r3, #0
 801172c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 8011730:	2300      	movs	r3, #0
 8011732:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53L1_p_003    = 0;
 8011736:	2300      	movs	r3, #0
 8011738:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53L1_p_018    = 0;
 801173a:	2300      	movs	r3, #0
 801173c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53L1_p_001    = 0;
 801173e:	2300      	movs	r3, #0
 8011740:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 8011742:	2300      	movs	r3, #0
 8011744:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 8011746:	2300      	movs	r3, #0
 8011748:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 801174a:	2300      	movs	r3, #0
 801174c:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 801174e:	2300      	movs	r3, #0
 8011750:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 8011752:	2300      	movs	r3, #0
 8011754:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_031 == 0) {
 8011756:	7b7b      	ldrb	r3, [r7, #13]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d106      	bne.n	801176a <VL53L1_f_026+0x66>
		*psigma_est = 0xFFFF;
 801175c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801175e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011762:	801a      	strh	r2, [r3, #0]
		return VL53L1_ERROR_DIVISION_BY_ZERO;
 8011764:	f06f 030e 	mvn.w	r3, #14
 8011768:	e06f      	b.n	801184a <VL53L1_f_026+0x146>
	}
	i = bin % VL53L1_p_031;
 801176a:	7bfb      	ldrb	r3, [r7, #15]
 801176c:	7b7a      	ldrb	r2, [r7, #13]
 801176e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011772:	fb01 f202 	mul.w	r2, r1, r2
 8011776:	1a9b      	subs	r3, r3, r2
 8011778:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53L1_f_013(
 801177c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011780:	7b39      	ldrb	r1, [r7, #12]
 8011782:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8011786:	f107 0320 	add.w	r3, r7, #32
 801178a:	9301      	str	r3, [sp, #4]
 801178c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011790:	9300      	str	r3, [sp, #0]
 8011792:	4613      	mov	r3, r2
 8011794:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011796:	f000 fddb 	bl	8012350 <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 801179a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801179e:	7b39      	ldrb	r1, [r7, #12]
 80117a0:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 80117a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80117a8:	9301      	str	r3, [sp, #4]
 80117aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80117ae:	9300      	str	r3, [sp, #0]
 80117b0:	4613      	mov	r3, r2
 80117b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80117b4:	f000 fdcc 	bl	8012350 <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 80117b8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d00e      	beq.n	80117de <VL53L1_f_026+0xda>
		VL53L1_f_013(
 80117c0:	f107 021c 	add.w	r2, r7, #28
 80117c4:	7b39      	ldrb	r1, [r7, #12]
 80117c6:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 80117ca:	f107 0314 	add.w	r3, r7, #20
 80117ce:	9301      	str	r3, [sp, #4]
 80117d0:	f107 0318 	add.w	r3, r7, #24
 80117d4:	9300      	str	r3, [sp, #0]
 80117d6:	4613      	mov	r3, r2
 80117d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80117da:	f000 fdb9 	bl	8012350 <VL53L1_f_013>




	func_status =
		VL53L1_f_014(
 80117de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e0:	469c      	mov	ip, r3
 80117e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117e4:	469e      	mov	lr, r3
 80117e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e8:	4698      	mov	r8, r3
 80117ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ec:	4619      	mov	r1, r3
 80117ee:	6a3b      	ldr	r3, [r7, #32]
 80117f0:	461c      	mov	r4, r3
 80117f2:	69bb      	ldr	r3, [r7, #24]
 80117f4:	461d      	mov	r5, r3
 80117f6:	69fb      	ldr	r3, [r7, #28]
 80117f8:	461e      	mov	r6, r3
 80117fa:	697b      	ldr	r3, [r7, #20]
 80117fc:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53L1_p_004,
 80117fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011800:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53L1_f_014(
 8011804:	607b      	str	r3, [r7, #4]
 8011806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011808:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 801180c:	7bb8      	ldrb	r0, [r7, #14]
 801180e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011810:	9207      	str	r2, [sp, #28]
 8011812:	9306      	str	r3, [sp, #24]
 8011814:	687a      	ldr	r2, [r7, #4]
 8011816:	9205      	str	r2, [sp, #20]
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	9304      	str	r3, [sp, #16]
 801181c:	9603      	str	r6, [sp, #12]
 801181e:	9502      	str	r5, [sp, #8]
 8011820:	9401      	str	r4, [sp, #4]
 8011822:	9100      	str	r1, [sp, #0]
 8011824:	4643      	mov	r3, r8
 8011826:	4672      	mov	r2, lr
 8011828:	4661      	mov	r1, ip
 801182a:	f002 ff30 	bl	801468e <VL53L1_f_014>
 801182e:	4603      	mov	r3, r0
 8011830:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 8011834:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8011838:	f113 0f0f 	cmn.w	r3, #15
 801183c:	d103      	bne.n	8011846 <VL53L1_f_026+0x142>
		*psigma_est = 0xFFFF;
 801183e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011844:	801a      	strh	r2, [r3, #0]


	return status;
 8011846:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801184a:	4618      	mov	r0, r3
 801184c:	3738      	adds	r7, #56	; 0x38
 801184e:	46bd      	mov	sp, r7
 8011850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011854 <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 8011854:	b490      	push	{r4, r7}
 8011856:	b084      	sub	sp, #16
 8011858:	af00      	add	r7, sp, #0
 801185a:	4604      	mov	r4, r0
 801185c:	4608      	mov	r0, r1
 801185e:	4611      	mov	r1, r2
 8011860:	461a      	mov	r2, r3
 8011862:	4623      	mov	r3, r4
 8011864:	71fb      	strb	r3, [r7, #7]
 8011866:	4603      	mov	r3, r0
 8011868:	71bb      	strb	r3, [r7, #6]
 801186a:	460b      	mov	r3, r1
 801186c:	717b      	strb	r3, [r7, #5]
 801186e:	4613      	mov	r3, r2
 8011870:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 8011872:	2300      	movs	r3, #0
 8011874:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 8011876:	2300      	movs	r3, #0
 8011878:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 801187a:	6a3b      	ldr	r3, [r7, #32]
 801187c:	79fa      	ldrb	r2, [r7, #7]
 801187e:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 8011880:	6a3b      	ldr	r3, [r7, #32]
 8011882:	2200      	movs	r2, #0
 8011884:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 8011886:	69fb      	ldr	r3, [r7, #28]
 8011888:	781a      	ldrb	r2, [r3, #0]
 801188a:	6a3b      	ldr	r3, [r7, #32]
 801188c:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 801188e:	69fb      	ldr	r3, [r7, #28]
 8011890:	785a      	ldrb	r2, [r3, #1]
 8011892:	6a3b      	ldr	r3, [r7, #32]
 8011894:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 8011896:	69fb      	ldr	r3, [r7, #28]
 8011898:	789a      	ldrb	r2, [r3, #2]
 801189a:	6a3b      	ldr	r3, [r7, #32]
 801189c:	729a      	strb	r2, [r3, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 801189e:	69fb      	ldr	r3, [r7, #28]
 80118a0:	78da      	ldrb	r2, [r3, #3]
 80118a2:	6a3b      	ldr	r3, [r7, #32]
 80118a4:	72da      	strb	r2, [r3, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 80118a6:	69fb      	ldr	r3, [r7, #28]
 80118a8:	791a      	ldrb	r2, [r3, #4]
 80118aa:	6a3b      	ldr	r3, [r7, #32]
 80118ac:	731a      	strb	r2, [r3, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 80118ae:	69fb      	ldr	r3, [r7, #28]
 80118b0:	795a      	ldrb	r2, [r3, #5]
 80118b2:	6a3b      	ldr	r3, [r7, #32]
 80118b4:	735a      	strb	r2, [r3, #13]



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 80118b6:	69fb      	ldr	r3, [r7, #28]
 80118b8:	791a      	ldrb	r2, [r3, #4]
 80118ba:	69fb      	ldr	r3, [r7, #28]
 80118bc:	781b      	ldrb	r3, [r3, #0]
 80118be:	1ad3      	subs	r3, r2, r3
 80118c0:	b2db      	uxtb	r3, r3
 80118c2:	3301      	adds	r3, #1
 80118c4:	b2da      	uxtb	r2, r3
	pdata->VL53L1_p_030  =
 80118c6:	6a3b      	ldr	r3, [r7, #32]
 80118c8:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 80118ca:	69bb      	ldr	r3, [r7, #24]
 80118cc:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 80118d0:	6a3b      	ldr	r3, [r7, #32]
 80118d2:	829a      	strh	r2, [r3, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 80118d4:	69fb      	ldr	r3, [r7, #28]
 80118d6:	8c1a      	ldrh	r2, [r3, #32]
 80118d8:	6a3b      	ldr	r3, [r7, #32]
 80118da:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 80118dc:	69fb      	ldr	r3, [r7, #28]
 80118de:	695b      	ldr	r3, [r3, #20]
 80118e0:	b29a      	uxth	r2, r3
 80118e2:	6a3b      	ldr	r3, [r7, #32]
 80118e4:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 80118e6:	69fb      	ldr	r3, [r7, #28]
 80118e8:	699b      	ldr	r3, [r3, #24]
 80118ea:	b29a      	uxth	r2, r3
 80118ec:	6a3b      	ldr	r3, [r7, #32]
 80118ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 80118f2:	69fb      	ldr	r3, [r7, #28]
 80118f4:	69db      	ldr	r3, [r3, #28]
 80118f6:	b29a      	uxth	r2, r3
 80118f8:	6a3b      	ldr	r3, [r7, #32]
 80118fa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 80118fe:	69fb      	ldr	r3, [r7, #28]
 8011900:	68db      	ldr	r3, [r3, #12]
 8011902:	461a      	mov	r2, r3
 8011904:	6a3b      	ldr	r3, [r7, #32]
 8011906:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 8011908:	69fb      	ldr	r3, [r7, #28]
 801190a:	691a      	ldr	r2, [r3, #16]
 801190c:	6a3b      	ldr	r3, [r7, #32]
 801190e:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 8011910:	69fb      	ldr	r3, [r7, #28]
 8011912:	689b      	ldr	r3, [r3, #8]
 8011914:	461a      	mov	r2, r3
 8011916:	6a3b      	ldr	r3, [r7, #32]
 8011918:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 801191a:	69bb      	ldr	r3, [r7, #24]
 801191c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8011920:	6a3b      	ldr	r3, [r7, #32]
 8011922:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8011924:	6a3b      	ldr	r3, [r7, #32]
 8011926:	2213      	movs	r2, #19
 8011928:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 801192c:	887b      	ldrh	r3, [r7, #2]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d00a      	beq.n	8011948 <VL53L1_f_029+0xf4>
		(uint32_t)ppulse->VL53L1_p_005 > ((uint32_t)sigma_thres << 5))
 8011932:	69fb      	ldr	r3, [r7, #28]
 8011934:	8c1b      	ldrh	r3, [r3, #32]
 8011936:	461a      	mov	r2, r3
 8011938:	887b      	ldrh	r3, [r7, #2]
 801193a:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 801193c:	429a      	cmp	r2, r3
 801193e:	d903      	bls.n	8011948 <VL53L1_f_029+0xf4>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 8011940:	6a3b      	ldr	r3, [r7, #32]
 8011942:	2206      	movs	r2, #6
 8011944:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 8011948:	79bb      	ldrb	r3, [r7, #6]
 801194a:	b29b      	uxth	r3, r3
 801194c:	021b      	lsls	r3, r3, #8
 801194e:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 8011950:	6a3b      	ldr	r3, [r7, #32]
 8011952:	8a9b      	ldrh	r3, [r3, #20]
 8011954:	89fa      	ldrh	r2, [r7, #14]
 8011956:	429a      	cmp	r2, r3
 8011958:	d205      	bcs.n	8011966 <VL53L1_f_029+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 801195a:	6a3b      	ldr	r3, [r7, #32]
 801195c:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 801195e:	89fb      	ldrh	r3, [r7, #14]
 8011960:	1ad3      	subs	r3, r2, r3
 8011962:	81fb      	strh	r3, [r7, #14]
 8011964:	e001      	b.n	801196a <VL53L1_f_029+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 8011966:	2300      	movs	r3, #0
 8011968:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 801196a:	797b      	ldrb	r3, [r7, #5]
 801196c:	b29b      	uxth	r3, r3
 801196e:	021b      	lsls	r3, r3, #8
 8011970:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 8011972:	69bb      	ldr	r3, [r7, #24]
 8011974:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8011978:	89bb      	ldrh	r3, [r7, #12]
 801197a:	4413      	add	r3, r2
 801197c:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 801197e:	6a3b      	ldr	r3, [r7, #32]
 8011980:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8011984:	89fa      	ldrh	r2, [r7, #14]
 8011986:	429a      	cmp	r2, r3
 8011988:	d805      	bhi.n	8011996 <VL53L1_f_029+0x142>
		pdata->VL53L1_p_014 > upper_phase_limit)
 801198a:	6a3b      	ldr	r3, [r7, #32]
 801198c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 8011990:	89ba      	ldrh	r2, [r7, #12]
 8011992:	429a      	cmp	r2, r3
 8011994:	d203      	bcs.n	801199e <VL53L1_f_029+0x14a>
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 8011996:	6a3b      	ldr	r3, [r7, #32]
 8011998:	2205      	movs	r2, #5
 801199a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 801199e:	bf00      	nop
 80119a0:	3710      	adds	r7, #16
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bc90      	pop	{r4, r7}
 80119a6:	4770      	bx	lr

080119a8 <VL53L1_f_033>:
	VL53L1_hist_gen3_algo_private_data_t   *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53L1_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53L1_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 80119a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119aa:	b08f      	sub	sp, #60	; 0x3c
 80119ac:	af06      	add	r7, sp, #24
 80119ae:	60f8      	str	r0, [r7, #12]
 80119b0:	60b9      	str	r1, [r7, #8]
 80119b2:	607a      	str	r2, [r7, #4]
 80119b4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80119b6:	2300      	movs	r3, #0
 80119b8:	77fb      	strb	r3, [r7, #31]

	VL53L1_hist_pulse_data_t     *ppulse_data;
	VL53L1_range_data_t          *prange_data;

	uint8_t                       p = 0;
 80119ba:	2300      	movs	r3, #0
 80119bc:	77bb      	strb	r3, [r7, #30]
	VL53L1_histogram_bin_data_t *pB = &(palgo3->VL53L1_p_010);
 80119be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119c0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80119c4:	61bb      	str	r3, [r7, #24]





	VL53L1_f_016(palgo3);
 80119c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80119c8:	f7ff f856 	bl	8010a78 <VL53L1_f_016>



	memcpy(
		&(palgo3->VL53L1_p_010),
 80119cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119ce:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 80119d2:	22ac      	movs	r2, #172	; 0xac
 80119d4:	6839      	ldr	r1, [r7, #0]
 80119d6:	4618      	mov	r0, r3
 80119d8:	f009 f92a 	bl	801ac30 <memcpy>
		pbins_input,
		sizeof(VL53L1_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	781a      	ldrb	r2, [r3, #0]
 80119e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119e2:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	785a      	ldrb	r2, [r3, #1]
 80119e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119ea:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	789a      	ldrb	r2, [r3, #2]
 80119f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119f2:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 80119fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119fc:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 80119fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a00:	2200      	movs	r2, #0
 8011a02:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 8011a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a06:	2204      	movs	r2, #4
 8011a08:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 8011a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8011a10:	2300      	movs	r3, #0
 8011a12:	77bb      	strb	r3, [r7, #30]
 8011a14:	e008      	b.n	8011a28 <VL53L1_f_033+0x80>
		presults->VL53L1_p_007[p] = 0;
 8011a16:	7fbb      	ldrb	r3, [r7, #30]
 8011a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a1a:	005b      	lsls	r3, r3, #1
 8011a1c:	4413      	add	r3, r2
 8011a1e:	2200      	movs	r2, #0
 8011a20:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8011a22:	7fbb      	ldrb	r3, [r7, #30]
 8011a24:	3301      	adds	r3, #1
 8011a26:	77bb      	strb	r3, [r7, #30]
 8011a28:	7fbb      	ldrb	r3, [r7, #30]
 8011a2a:	2b04      	cmp	r3, #4
 8011a2c:	d9f3      	bls.n	8011a16 <VL53L1_f_033+0x6e>



	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 8011a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a30:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011a34:	4618      	mov	r0, r3
 8011a36:	f7fd ff58 	bl	800f8ea <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	795b      	ldrb	r3, [r3, #5]
	VL53L1_hist_estimate_ambient_from_thresholded_bins(
 8011a3e:	461a      	mov	r2, r3
 8011a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a42:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011a46:	4619      	mov	r1, r3
 8011a48:	4610      	mov	r0, r2
 8011a4a:	f7fd ff8e 	bl	800f96a <VL53L1_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53L1_p_010));

	VL53L1_hist_estimate_ambient_from_ambient_bins(
 8011a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a50:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7fe fb66 	bl	8010126 <VL53L1_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53L1_p_010));


	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 8011a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a5c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011a60:	4618      	mov	r0, r3
 8011a62:	f7fd fffc 	bl	800fa5e <VL53L1_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d009      	beq.n	8011a84 <VL53L1_f_033+0xdc>
		VL53L1_f_004(
 8011a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a72:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8011a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a78:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8011a7c:	461a      	mov	r2, r3
 8011a7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011a80:	f000 fdae 	bl	80125e0 <VL53L1_f_004>
				&(palgo3->VL53L1_p_010),
				&(palgo3->VL53L1_p_038));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	77bb      	strb	r3, [r7, #30]
 8011a90:	e01e      	b.n	8011ad0 <VL53L1_f_033+0x128>
		if (status == VL53L1_ERROR_NONE) {
 8011a92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d117      	bne.n	8011aca <VL53L1_f_033+0x122>
			status =
			VL53L1_f_001(
 8011a9a:	7fbb      	ldrb	r3, [r7, #30]
 8011a9c:	68ba      	ldr	r2, [r7, #8]
 8011a9e:	3304      	adds	r3, #4
 8011aa0:	005b      	lsls	r3, r3, #1
 8011aa2:	4413      	add	r3, r2
 8011aa4:	8898      	ldrh	r0, [r3, #4]
 8011aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011aa8:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53L1_p_010),
				pdmax_algo,
				&(presults->VL53L1_p_007[p]));
 8011aac:	7fbb      	ldrb	r3, [r7, #30]
			VL53L1_f_001(
 8011aae:	005b      	lsls	r3, r3, #1
 8011ab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ab2:	4413      	add	r3, r2
 8011ab4:	3304      	adds	r3, #4
 8011ab6:	9301      	str	r3, [sp, #4]
 8011ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011aba:	9300      	str	r3, [sp, #0]
 8011abc:	460b      	mov	r3, r1
 8011abe:	68ba      	ldr	r2, [r7, #8]
 8011ac0:	68f9      	ldr	r1, [r7, #12]
 8011ac2:	f7fe fb7b 	bl	80101bc <VL53L1_f_001>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8011aca:	7fbb      	ldrb	r3, [r7, #30]
 8011acc:	3301      	adds	r3, #1
 8011ace:	77bb      	strb	r3, [r7, #30]
 8011ad0:	7fbb      	ldrb	r3, [r7, #30]
 8011ad2:	2b04      	cmp	r3, #4
 8011ad4:	d9dd      	bls.n	8011a92 <VL53L1_f_033+0xea>





	if (status == VL53L1_ERROR_NONE)
 8011ad6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d11a      	bne.n	8011b14 <VL53L1_f_033+0x16c>
		status =
			VL53L1_f_018(
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 8011ae2:	68bb      	ldr	r3, [r7, #8]
 8011ae4:	785b      	ldrb	r3, [r3, #1]
			VL53L1_f_018(
 8011ae6:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	68dc      	ldr	r4, [r3, #12]
			VL53L1_f_018(
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 8011af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011af4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011af8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011afa:	f502 7252 	add.w	r2, r2, #840	; 0x348
 8011afe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011b00:	9102      	str	r1, [sp, #8]
 8011b02:	9201      	str	r2, [sp, #4]
 8011b04:	9300      	str	r3, [sp, #0]
 8011b06:	462b      	mov	r3, r5
 8011b08:	4622      	mov	r2, r4
 8011b0a:	4631      	mov	r1, r6
 8011b0c:	f7ff f82d 	bl	8010b6a <VL53L1_f_018>
 8011b10:	4603      	mov	r3, r0
 8011b12:	77fb      	strb	r3, [r7, #31]





	if (status == VL53L1_ERROR_NONE)
 8011b14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d104      	bne.n	8011b26 <VL53L1_f_033+0x17e>
		status =
			VL53L1_f_019(palgo3);
 8011b1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011b1e:	f7ff f954 	bl	8010dca <VL53L1_f_019>
 8011b22:	4603      	mov	r3, r0
 8011b24:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8011b26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d104      	bne.n	8011b38 <VL53L1_f_033+0x190>
		status =
			VL53L1_f_020(palgo3);
 8011b2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011b30:	f7ff f999 	bl	8010e66 <VL53L1_f_020>
 8011b34:	4603      	mov	r3, r0
 8011b36:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8011b38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d104      	bne.n	8011b4a <VL53L1_f_033+0x1a2>
		status =
			VL53L1_f_021(palgo3);
 8011b40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011b42:	f7ff fa0e 	bl	8010f62 <VL53L1_f_021>
 8011b46:	4603      	mov	r3, r0
 8011b48:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	77bb      	strb	r3, [r7, #30]
 8011b4e:	e0a6      	b.n	8011c9e <VL53L1_f_033+0x2f6>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8011b50:	7fba      	ldrb	r2, [r7, #30]
 8011b52:	4613      	mov	r3, r2
 8011b54:	00db      	lsls	r3, r3, #3
 8011b56:	4413      	add	r3, r2
 8011b58:	009b      	lsls	r3, r3, #2
 8011b5a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011b5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011b60:	4413      	add	r3, r2
 8011b62:	3304      	adds	r3, #4
 8011b64:	617b      	str	r3, [r7, #20]



		if (status == VL53L1_ERROR_NONE)
 8011b66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d109      	bne.n	8011b82 <VL53L1_f_033+0x1da>
			status =
				VL53L1_f_022(
 8011b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b70:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8011b74:	7fbb      	ldrb	r3, [r7, #30]
 8011b76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f7ff fb48 	bl	801120e <VL53L1_f_022>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_010),
					palgo3);



		if (status == VL53L1_ERROR_NONE)
 8011b82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d110      	bne.n	8011bac <VL53L1_f_033+0x204>
			status =
				VL53L1_f_023(
 8011b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b8c:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8011b90:	69bb      	ldr	r3, [r7, #24]
 8011b92:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8011b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b98:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8011b9c:	7fb8      	ldrb	r0, [r7, #30]
 8011b9e:	9300      	str	r3, [sp, #0]
 8011ba0:	4613      	mov	r3, r2
 8011ba2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011ba4:	f7ff fd5a 	bl	801165c <VL53L1_f_023>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	77fb      	strb	r3, [r7, #31]
					pB->VL53L1_p_004,
					&(palgo3->VL53L1_p_052));



		if (status == VL53L1_ERROR_NONE) {
 8011bac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d10d      	bne.n	8011bd0 <VL53L1_f_033+0x228>
			status =
				VL53L1_f_023(
 8011bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bb6:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8011bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bbc:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8011bc0:	7fb8      	ldrb	r0, [r7, #30]
 8011bc2:	9300      	str	r3, [sp, #0]
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011bc8:	f7ff fd48 	bl	801165c <VL53L1_f_023>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_053));
		}



		if (status == VL53L1_ERROR_NONE) {
 8011bd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d10d      	bne.n	8011bf4 <VL53L1_f_033+0x24c>
			status =
				VL53L1_f_023(
 8011bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bda:	f503 7152 	add.w	r1, r3, #840	; 0x348
 8011bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011be0:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8011be4:	7fb8      	ldrb	r0, [r7, #30]
 8011be6:	9300      	str	r3, [sp, #0]
 8011be8:	2300      	movs	r3, #0
 8011bea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011bec:	f7ff fd36 	bl	801165c <VL53L1_f_023>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_054));
		}



		if (status == VL53L1_ERROR_NONE)
 8011bf4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d109      	bne.n	8011c10 <VL53L1_f_033+0x268>
			status =
				VL53L1_f_034(
 8011bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bfe:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 8011c02:	7fb8      	ldrb	r0, [r7, #30]
 8011c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c08:	f000 f8dd 	bl	8011dc6 <VL53L1_f_034>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53L1_ERROR_NONE)
 8011c10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d108      	bne.n	8011c2a <VL53L1_f_033+0x282>
			status =
				VL53L1_f_035(
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	8a19      	ldrh	r1, [r3, #16]
 8011c1c:	7fb8      	ldrb	r0, [r7, #30]
 8011c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011c22:	f000 f95c 	bl	8011ede <VL53L1_f_035>
 8011c26:	4603      	mov	r3, r0
 8011c28:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53L1_ERROR_NONE)
 8011c2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d124      	bne.n	8011c7c <VL53L1_f_033+0x2d4>
			status =
			VL53L1_f_026(
 8011c32:	697b      	ldr	r3, [r7, #20]
 8011c34:	789d      	ldrb	r5, [r3, #2]
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	7e1e      	ldrb	r6, [r3, #24]
 8011c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c3c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	f893 e006 	ldrb.w	lr, [r3, #6]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c4e:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 8011c52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c54:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 8011c58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011c5a:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 8011c5e:	697c      	ldr	r4, [r7, #20]
 8011c60:	3420      	adds	r4, #32
 8011c62:	9404      	str	r4, [sp, #16]
 8011c64:	9003      	str	r0, [sp, #12]
 8011c66:	9102      	str	r1, [sp, #8]
 8011c68:	9201      	str	r2, [sp, #4]
 8011c6a:	9300      	str	r3, [sp, #0]
 8011c6c:	4673      	mov	r3, lr
 8011c6e:	4662      	mov	r2, ip
 8011c70:	4631      	mov	r1, r6
 8011c72:	4628      	mov	r0, r5
 8011c74:	f7ff fd46 	bl	8011704 <VL53L1_f_026>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53L1_p_054),
			&(ppulse_data->VL53L1_p_005));



		if (status == VL53L1_ERROR_NONE)
 8011c7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d109      	bne.n	8011c98 <VL53L1_f_033+0x2f0>
			status =
				VL53L1_f_027(
 8011c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c86:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 8011c8a:	7fb8      	ldrb	r0, [r7, #30]
 8011c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c8e:	2101      	movs	r1, #1
 8011c90:	f7ff fb10 	bl	80112b4 <VL53L1_f_027>
 8011c94:	4603      	mov	r3, r0
 8011c96:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8011c98:	7fbb      	ldrb	r3, [r7, #30]
 8011c9a:	3301      	adds	r3, #1
 8011c9c:	77bb      	strb	r3, [r7, #30]
 8011c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ca0:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8011ca4:	7fba      	ldrb	r2, [r7, #30]
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	f4ff af52 	bcc.w	8011b50 <VL53L1_f_033+0x1a8>

	}



	if (status == VL53L1_ERROR_NONE)
 8011cac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d107      	bne.n	8011cc4 <VL53L1_f_033+0x31c>
		status =
			VL53L1_f_028(
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	785b      	ldrb	r3, [r3, #1]
 8011cb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f7ff fa23 	bl	8011106 <VL53L1_f_028>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	77bb      	strb	r3, [r7, #30]
 8011cc8:	e071      	b.n	8011dae <VL53L1_f_033+0x406>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8011cca:	7fba      	ldrb	r2, [r7, #30]
 8011ccc:	4613      	mov	r3, r2
 8011cce:	00db      	lsls	r3, r3, #3
 8011cd0:	4413      	add	r3, r2
 8011cd2:	009b      	lsls	r3, r3, #2
 8011cd4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011cd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011cda:	4413      	add	r3, r2
 8011cdc:	3304      	adds	r3, #4
 8011cde:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 8011ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ce2:	7c9a      	ldrb	r2, [r3, #18]
 8011ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ce6:	7c5b      	ldrb	r3, [r3, #17]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d25c      	bcs.n	8011da6 <VL53L1_f_033+0x3fe>
			continue;




		if (ppulse_data->VL53L1_p_013 >
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53L1_p_013 >
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	dd57      	ble.n	8011da8 <VL53L1_f_033+0x400>
			ppulse_data->VL53L1_p_025 < 0xFF) {
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 8011cfc:	2bff      	cmp	r3, #255	; 0xff
 8011cfe:	d053      	beq.n	8011da8 <VL53L1_f_033+0x400>

			prange_data =
			&(presults->VL53L1_p_002[presults->active_results]);
 8011d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d02:	7c9b      	ldrb	r3, [r3, #18]
 8011d04:	461a      	mov	r2, r3
			prange_data =
 8011d06:	234c      	movs	r3, #76	; 0x4c
 8011d08:	fb02 f303 	mul.w	r3, r2, r3
 8011d0c:	3310      	adds	r3, #16
 8011d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d10:	4413      	add	r3, r2
 8011d12:	3304      	adds	r3, #4
 8011d14:	613b      	str	r3, [r7, #16]

			if (status == VL53L1_ERROR_NONE)
 8011d16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d115      	bne.n	8011d4a <VL53L1_f_033+0x3a2>
				VL53L1_f_029(
 8011d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d20:	7c98      	ldrb	r0, [r3, #18]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f893 1020 	ldrb.w	r1, [r3, #32]
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	8b5d      	ldrh	r5, [r3, #26]
 8011d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d34:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011d38:	693a      	ldr	r2, [r7, #16]
 8011d3a:	9202      	str	r2, [sp, #8]
 8011d3c:	697a      	ldr	r2, [r7, #20]
 8011d3e:	9201      	str	r2, [sp, #4]
 8011d40:	9300      	str	r3, [sp, #0]
 8011d42:	462b      	mov	r3, r5
 8011d44:	4622      	mov	r2, r4
 8011d46:	f7ff fd85 	bl	8011854 <VL53L1_f_029>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53L1_p_010),
						ppulse_data,
						prange_data);

			if (status == VL53L1_ERROR_NONE)
 8011d4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d115      	bne.n	8011d7e <VL53L1_f_033+0x3d6>
				status =
				VL53L1_f_011(
 8011d52:	69bb      	ldr	r3, [r7, #24]
 8011d54:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 8011d58:	69bb      	ldr	r3, [r7, #24]
 8011d5a:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8011d5e:	69bb      	ldr	r3, [r7, #24]
 8011d60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8011d64:	69bb      	ldr	r3, [r7, #24]
 8011d66:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 8011d6a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011d6e:	9301      	str	r3, [sp, #4]
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	9300      	str	r3, [sp, #0]
 8011d74:	4623      	mov	r3, r4
 8011d76:	f000 fb44 	bl	8012402 <VL53L1_f_011>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53L1_ERROR_NONE)
 8011d7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d108      	bne.n	8011d98 <VL53L1_f_033+0x3f0>
				VL53L1_f_012(
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	8bd8      	ldrh	r0, [r3, #30]
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8011d90:	693a      	ldr	r2, [r7, #16]
 8011d92:	4619      	mov	r1, r3
 8011d94:	f000 fbda 	bl	801254c <VL53L1_f_012>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 8011d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d9a:	7c9b      	ldrb	r3, [r3, #18]
 8011d9c:	3301      	adds	r3, #1
 8011d9e:	b2da      	uxtb	r2, r3
 8011da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011da2:	749a      	strb	r2, [r3, #18]
 8011da4:	e000      	b.n	8011da8 <VL53L1_f_033+0x400>
			continue;
 8011da6:	bf00      	nop
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8011da8:	7fbb      	ldrb	r3, [r7, #30]
 8011daa:	3301      	adds	r3, #1
 8011dac:	77bb      	strb	r3, [r7, #30]
 8011dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011db0:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8011db4:	7fba      	ldrb	r2, [r7, #30]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d387      	bcc.n	8011cca <VL53L1_f_033+0x322>



	LOG_FUNCTION_END(status);

	return status;
 8011dba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3724      	adds	r7, #36	; 0x24
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011dc6 <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 8011dc6:	b580      	push	{r7, lr}
 8011dc8:	b08c      	sub	sp, #48	; 0x30
 8011dca:	af02      	add	r7, sp, #8
 8011dcc:	60b9      	str	r1, [r7, #8]
 8011dce:	607a      	str	r2, [r7, #4]
 8011dd0:	603b      	str	r3, [r7, #0]
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	73fb      	strb	r3, [r7, #15]




	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8011ddc:	7bfa      	ldrb	r2, [r7, #15]
 8011dde:	4613      	mov	r3, r2
 8011de0:	00db      	lsls	r3, r3, #3
 8011de2:	4413      	add	r3, r2
 8011de4:	009b      	lsls	r3, r3, #2
 8011de6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011dea:	687a      	ldr	r2, [r7, #4]
 8011dec:	4413      	add	r3, r2
 8011dee:	3304      	adds	r3, #4
 8011df0:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 8011df2:	2300      	movs	r3, #0
 8011df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 8011e00:	2300      	movs	r3, #0
 8011e02:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 8011e04:	2300      	movs	r3, #0
 8011e06:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	785a      	ldrb	r2, [r3, #1]
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	781a      	ldrb	r2, [r3, #0]
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	789a      	ldrb	r2, [r3, #2]
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8011e20:	6a3b      	ldr	r3, [r7, #32]
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011e28:	e04d      	b.n	8011ec6 <VL53L1_f_034+0x100>

		i =  lb  % palgo3->VL53L1_p_031;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	78da      	ldrb	r2, [r3, #3]
 8011e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e32:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e36:	fb01 f202 	mul.w	r2, r1, r2
 8011e3a:	1a9b      	subs	r3, r3, r2
 8011e3c:	77fb      	strb	r3, [r7, #31]


		VL53L1_f_013(
 8011e3e:	6a3b      	ldr	r3, [r7, #32]
 8011e40:	7999      	ldrb	r1, [r3, #6]
 8011e42:	f107 0218 	add.w	r2, r7, #24
 8011e46:	7ff8      	ldrb	r0, [r7, #31]
 8011e48:	f107 0310 	add.w	r3, r7, #16
 8011e4c:	9301      	str	r3, [sp, #4]
 8011e4e:	f107 0314 	add.w	r3, r7, #20
 8011e52:	9300      	str	r3, [sp, #0]
 8011e54:	4613      	mov	r3, r2
 8011e56:	68ba      	ldr	r2, [r7, #8]
 8011e58:	f000 fa7a 	bl	8012350 <VL53L1_f_013>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53L1_p_003[i] = suma;
 8011e5c:	7ffb      	ldrb	r3, [r7, #31]
 8011e5e:	69ba      	ldr	r2, [r7, #24]
 8011e60:	6839      	ldr	r1, [r7, #0]
 8011e62:	009b      	lsls	r3, r3, #2
 8011e64:	440b      	add	r3, r1
 8011e66:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_018[i] = sumb;
 8011e68:	7ffb      	ldrb	r3, [r7, #31]
 8011e6a:	697a      	ldr	r2, [r7, #20]
 8011e6c:	6839      	ldr	r1, [r7, #0]
 8011e6e:	3318      	adds	r3, #24
 8011e70:	009b      	lsls	r3, r3, #2
 8011e72:	440b      	add	r3, r1
 8011e74:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_001[i] = sumc;
 8011e76:	7ffb      	ldrb	r3, [r7, #31]
 8011e78:	693a      	ldr	r2, [r7, #16]
 8011e7a:	6839      	ldr	r1, [r7, #0]
 8011e7c:	3330      	adds	r3, #48	; 0x30
 8011e7e:	009b      	lsls	r3, r3, #2
 8011e80:	440b      	add	r3, r1
 8011e82:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_039[i] =
			(suma + sumb) -
 8011e84:	69ba      	ldr	r2, [r7, #24]
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53L1_p_004);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	689a      	ldr	r2, [r3, #8]
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	441a      	add	r2, r3
		pfiltered->VL53L1_p_039[i] =
 8011e92:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 8011e94:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_039[i] =
 8011e96:	6839      	ldr	r1, [r7, #0]
 8011e98:	3348      	adds	r3, #72	; 0x48
 8011e9a:	009b      	lsls	r3, r3, #2
 8011e9c:	440b      	add	r3, r1
 8011e9e:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_040[i] =
			(sumb + sumc) -
 8011ea0:	697a      	ldr	r2, [r7, #20]
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53L1_p_004);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	689a      	ldr	r2, [r3, #8]
 8011eaa:	69bb      	ldr	r3, [r7, #24]
 8011eac:	441a      	add	r2, r3
		pfiltered->VL53L1_p_040[i] =
 8011eae:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 8011eb0:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_040[i] =
 8011eb2:	6839      	ldr	r1, [r7, #0]
 8011eb4:	3360      	adds	r3, #96	; 0x60
 8011eb6:	009b      	lsls	r3, r3, #2
 8011eb8:	440b      	add	r3, r1
 8011eba:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8011ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ec0:	3301      	adds	r3, #1
 8011ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011ec6:	6a3b      	ldr	r3, [r7, #32]
 8011ec8:	791b      	ldrb	r3, [r3, #4]
 8011eca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d9ab      	bls.n	8011e2a <VL53L1_f_034+0x64>
	}

	return status;
 8011ed2:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	3728      	adds	r7, #40	; 0x28
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}

08011ede <VL53L1_f_035>:
VL53L1_Error VL53L1_f_035(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3)
{
 8011ede:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ee0:	b08f      	sub	sp, #60	; 0x3c
 8011ee2:	af06      	add	r7, sp, #24
 8011ee4:	60ba      	str	r2, [r7, #8]
 8011ee6:	607b      	str	r3, [r7, #4]
 8011ee8:	4603      	mov	r3, r0
 8011eea:	73fb      	strb	r3, [r7, #15]
 8011eec:	460b      	mov	r3, r1
 8011eee:	81bb      	strh	r3, [r7, #12]



	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	77bb      	strb	r3, [r7, #30]
	VL53L1_Error  func_status  = VL53L1_ERROR_NONE;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	777b      	strb	r3, [r7, #29]

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8011ef8:	7bfa      	ldrb	r2, [r7, #15]
 8011efa:	4613      	mov	r3, r2
 8011efc:	00db      	lsls	r3, r3, #3
 8011efe:	4413      	add	r3, r2
 8011f00:	009b      	lsls	r3, r3, #2
 8011f02:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011f06:	687a      	ldr	r2, [r7, #4]
 8011f08:	4413      	add	r3, r2
 8011f0a:	3304      	adds	r3, #4
 8011f0c:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 8011f12:	2300      	movs	r3, #0
 8011f14:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 8011f16:	2300      	movs	r3, #0
 8011f18:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8011f1a:	69bb      	ldr	r3, [r7, #24]
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	77fb      	strb	r3, [r7, #31]
 8011f20:	e0b9      	b.n	8012096 <VL53L1_f_035+0x1b8>

		i =  lb    % palgo3->VL53L1_p_031;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	78da      	ldrb	r2, [r3, #3]
 8011f26:	7ffb      	ldrb	r3, [r7, #31]
 8011f28:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f2c:	fb01 f202 	mul.w	r2, r1, r2
 8011f30:	1a9b      	subs	r3, r3, r2
 8011f32:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53L1_p_031;
 8011f34:	7ffb      	ldrb	r3, [r7, #31]
 8011f36:	3301      	adds	r3, #1
 8011f38:	687a      	ldr	r2, [r7, #4]
 8011f3a:	78d2      	ldrb	r2, [r2, #3]
 8011f3c:	fb93 f1f2 	sdiv	r1, r3, r2
 8011f40:	fb01 f202 	mul.w	r2, r1, r2
 8011f44:	1a9b      	subs	r3, r3, r2
 8011f46:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53L1_p_024 &&
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	789b      	ldrb	r3, [r3, #2]
 8011f4c:	7dfa      	ldrb	r2, [r7, #23]
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	f080 809e 	bcs.w	8012090 <VL53L1_f_035+0x1b2>
			j < palgo3->VL53L1_p_024) {
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53L1_p_024 &&
 8011f58:	7dba      	ldrb	r2, [r7, #22]
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	f080 8098 	bcs.w	8012090 <VL53L1_f_035+0x1b2>

			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8011f60:	7dfb      	ldrb	r3, [r7, #23]
 8011f62:	68ba      	ldr	r2, [r7, #8]
 8011f64:	3348      	adds	r3, #72	; 0x48
 8011f66:	009b      	lsls	r3, r3, #2
 8011f68:	4413      	add	r3, r2
 8011f6a:	685b      	ldr	r3, [r3, #4]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d10e      	bne.n	8011f8e <VL53L1_f_035+0xb0>
				pfiltered->VL53L1_p_040[i] == 0)
 8011f70:	7dfb      	ldrb	r3, [r7, #23]
 8011f72:	68ba      	ldr	r2, [r7, #8]
 8011f74:	3360      	adds	r3, #96	; 0x60
 8011f76:	009b      	lsls	r3, r3, #2
 8011f78:	4413      	add	r3, r2
 8011f7a:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d106      	bne.n	8011f8e <VL53L1_f_035+0xb0>

				pfiltered->VL53L1_p_043[i] = 0;
 8011f80:	7dfb      	ldrb	r3, [r7, #23]
 8011f82:	68ba      	ldr	r2, [r7, #8]
 8011f84:	4413      	add	r3, r2
 8011f86:	2200      	movs	r2, #0
 8011f88:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8011f8c:	e043      	b.n	8012016 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8011f8e:	7dfb      	ldrb	r3, [r7, #23]
 8011f90:	68ba      	ldr	r2, [r7, #8]
 8011f92:	3348      	adds	r3, #72	; 0x48
 8011f94:	009b      	lsls	r3, r3, #2
 8011f96:	4413      	add	r3, r2
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	db0e      	blt.n	8011fbc <VL53L1_f_035+0xde>
					 pfiltered->VL53L1_p_040[i] >= 0)
 8011f9e:	7dfb      	ldrb	r3, [r7, #23]
 8011fa0:	68ba      	ldr	r2, [r7, #8]
 8011fa2:	3360      	adds	r3, #96	; 0x60
 8011fa4:	009b      	lsls	r3, r3, #2
 8011fa6:	4413      	add	r3, r2
 8011fa8:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	db06      	blt.n	8011fbc <VL53L1_f_035+0xde>
				pfiltered->VL53L1_p_043[i] = 1;
 8011fae:	7dfb      	ldrb	r3, [r7, #23]
 8011fb0:	68ba      	ldr	r2, [r7, #8]
 8011fb2:	4413      	add	r3, r2
 8011fb4:	2201      	movs	r2, #1
 8011fb6:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8011fba:	e02c      	b.n	8012016 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8011fbc:	7dfb      	ldrb	r3, [r7, #23]
 8011fbe:	68ba      	ldr	r2, [r7, #8]
 8011fc0:	3348      	adds	r3, #72	; 0x48
 8011fc2:	009b      	lsls	r3, r3, #2
 8011fc4:	4413      	add	r3, r2
 8011fc6:	685b      	ldr	r3, [r3, #4]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	da1e      	bge.n	801200a <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8011fcc:	7dfb      	ldrb	r3, [r7, #23]
 8011fce:	68ba      	ldr	r2, [r7, #8]
 8011fd0:	3360      	adds	r3, #96	; 0x60
 8011fd2:	009b      	lsls	r3, r3, #2
 8011fd4:	4413      	add	r3, r2
 8011fd6:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	db16      	blt.n	801200a <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8011fdc:	7dbb      	ldrb	r3, [r7, #22]
 8011fde:	68ba      	ldr	r2, [r7, #8]
 8011fe0:	3348      	adds	r3, #72	; 0x48
 8011fe2:	009b      	lsls	r3, r3, #2
 8011fe4:	4413      	add	r3, r2
 8011fe6:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	db0e      	blt.n	801200a <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[j] <  0)
 8011fec:	7dbb      	ldrb	r3, [r7, #22]
 8011fee:	68ba      	ldr	r2, [r7, #8]
 8011ff0:	3360      	adds	r3, #96	; 0x60
 8011ff2:	009b      	lsls	r3, r3, #2
 8011ff4:	4413      	add	r3, r2
 8011ff6:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	da06      	bge.n	801200a <VL53L1_f_035+0x12c>
				pfiltered->VL53L1_p_043[i] = 1;
 8011ffc:	7dfb      	ldrb	r3, [r7, #23]
 8011ffe:	68ba      	ldr	r2, [r7, #8]
 8012000:	4413      	add	r3, r2
 8012002:	2201      	movs	r2, #1
 8012004:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8012008:	e005      	b.n	8012016 <VL53L1_f_035+0x138>

			else
				pfiltered->VL53L1_p_043[i] = 0;
 801200a:	7dfb      	ldrb	r3, [r7, #23]
 801200c:	68ba      	ldr	r2, [r7, #8]
 801200e:	4413      	add	r3, r2
 8012010:	2200      	movs	r2, #0
 8012012:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53L1_p_043[i] > 0) {
 8012016:	7dfb      	ldrb	r3, [r7, #23]
 8012018:	68ba      	ldr	r2, [r7, #8]
 801201a:	4413      	add	r3, r2
 801201c:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 8012020:	2b00      	cmp	r3, #0
 8012022:	d035      	beq.n	8012090 <VL53L1_f_035+0x1b2>

				pdata->VL53L1_p_025 = lb;
 8012024:	69bb      	ldr	r3, [r7, #24]
 8012026:	7ffa      	ldrb	r2, [r7, #31]
 8012028:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53L1_f_036(
 801202a:	7dfb      	ldrb	r3, [r7, #23]
 801202c:	68ba      	ldr	r2, [r7, #8]
 801202e:	009b      	lsls	r3, r3, #2
 8012030:	4413      	add	r3, r2
 8012032:	685c      	ldr	r4, [r3, #4]
 8012034:	7dfb      	ldrb	r3, [r7, #23]
 8012036:	68ba      	ldr	r2, [r7, #8]
 8012038:	3318      	adds	r3, #24
 801203a:	009b      	lsls	r3, r3, #2
 801203c:	4413      	add	r3, r2
 801203e:	685d      	ldr	r5, [r3, #4]
 8012040:	7dfb      	ldrb	r3, [r7, #23]
 8012042:	68ba      	ldr	r2, [r7, #8]
 8012044:	3330      	adds	r3, #48	; 0x30
 8012046:	009b      	lsls	r3, r3, #2
 8012048:	4413      	add	r3, r2
 801204a:	685e      	ldr	r6, [r3, #4]
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	689b      	ldr	r3, [r3, #8]
 8012050:	687a      	ldr	r2, [r7, #4]
 8012052:	78d2      	ldrb	r2, [r2, #3]
 8012054:	69b9      	ldr	r1, [r7, #24]
 8012056:	3118      	adds	r1, #24
 8012058:	7ff8      	ldrb	r0, [r7, #31]
 801205a:	9105      	str	r1, [sp, #20]
 801205c:	9204      	str	r2, [sp, #16]
 801205e:	9303      	str	r3, [sp, #12]
 8012060:	2300      	movs	r3, #0
 8012062:	9302      	str	r3, [sp, #8]
 8012064:	2300      	movs	r3, #0
 8012066:	9301      	str	r3, [sp, #4]
 8012068:	2300      	movs	r3, #0
 801206a:	9300      	str	r3, [sp, #0]
 801206c:	4633      	mov	r3, r6
 801206e:	462a      	mov	r2, r5
 8012070:	4621      	mov	r1, r4
 8012072:	f000 f81c 	bl	80120ae <VL53L1_f_036>
 8012076:	4603      	mov	r3, r0
 8012078:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53L1_p_004,
					palgo3->VL53L1_p_031,
					&(pdata->VL53L1_p_014));

				if (func_status ==
 801207a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801207e:	f113 0f0f 	cmn.w	r3, #15
 8012082:	d105      	bne.n	8012090 <VL53L1_f_035+0x1b2>
					VL53L1_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53L1_p_043[i] = 0;
 8012084:	7dfb      	ldrb	r3, [r7, #23]
 8012086:	68ba      	ldr	r2, [r7, #8]
 8012088:	4413      	add	r3, r2
 801208a:	2200      	movs	r2, #0
 801208c:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8012090:	7ffb      	ldrb	r3, [r7, #31]
 8012092:	3301      	adds	r3, #1
 8012094:	77fb      	strb	r3, [r7, #31]
 8012096:	69bb      	ldr	r3, [r7, #24]
 8012098:	791b      	ldrb	r3, [r3, #4]
 801209a:	7ffa      	ldrb	r2, [r7, #31]
 801209c:	429a      	cmp	r2, r3
 801209e:	f4ff af40 	bcc.w	8011f22 <VL53L1_f_035+0x44>

			}
		}
	}

	return status;
 80120a2:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3724      	adds	r7, #36	; 0x24
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080120ae <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 80120ae:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80120b2:	b0b2      	sub	sp, #200	; 0xc8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80120ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80120be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80120c2:	4603      	mov	r3, r0
 80120c4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80120c8:	23f1      	movs	r3, #241	; 0xf1
 80120ca:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 80120ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120d2:	f04f 0300 	mov.w	r3, #0
 80120d6:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
 80120da:	f04f 0200 	mov.w	r2, #0
 80120de:	f04f 0300 	mov.w	r3, #0
 80120e2:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 80120e6:	f04f 0200 	mov.w	r2, #0
 80120ea:	f04f 0300 	mov.w	r3, #0
 80120ee:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 80120f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80120f6:	17da      	asrs	r2, r3, #31
 80120f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80120fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8012100:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012104:	17da      	asrs	r2, r3, #31
 8012106:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801210a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 801210e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012112:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8012116:	4602      	mov	r2, r0
 8012118:	ebb3 0802 	subs.w	r8, r3, r2
 801211c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012120:	460a      	mov	r2, r1
 8012122:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8012126:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801212a:	17da      	asrs	r2, r3, #31
 801212c:	67bb      	str	r3, [r7, #120]	; 0x78
 801212e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8012130:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8012134:	460b      	mov	r3, r1
 8012136:	ebb8 0a03 	subs.w	sl, r8, r3
 801213a:	4613      	mov	r3, r2
 801213c:	eb69 0b03 	sbc.w	fp, r9, r3
 8012140:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012144:	17da      	asrs	r2, r3, #31
 8012146:	673b      	str	r3, [r7, #112]	; 0x70
 8012148:	677a      	str	r2, [r7, #116]	; 0x74
 801214a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 801214e:	460b      	mov	r3, r1
 8012150:	ebba 0403 	subs.w	r4, sl, r3
 8012154:	4613      	mov	r3, r2
 8012156:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 801215a:	f04f 0200 	mov.w	r2, #0
 801215e:	f04f 0300 	mov.w	r3, #0
 8012162:	032b      	lsls	r3, r5, #12
 8012164:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8012168:	0322      	lsls	r2, r4, #12
 801216a:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 801216e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012172:	17da      	asrs	r2, r3, #31
 8012174:	66bb      	str	r3, [r7, #104]	; 0x68
 8012176:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8012178:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801217c:	17da      	asrs	r2, r3, #31
 801217e:	663b      	str	r3, [r7, #96]	; 0x60
 8012180:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8012182:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8012186:	4623      	mov	r3, r4
 8012188:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801218c:	4602      	mov	r2, r0
 801218e:	1a9b      	subs	r3, r3, r2
 8012190:	65bb      	str	r3, [r7, #88]	; 0x58
 8012192:	462b      	mov	r3, r5
 8012194:	460a      	mov	r2, r1
 8012196:	eb63 0302 	sbc.w	r3, r3, r2
 801219a:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 801219c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80121a0:	17da      	asrs	r2, r3, #31
 80121a2:	653b      	str	r3, [r7, #80]	; 0x50
 80121a4:	657a      	str	r2, [r7, #84]	; 0x54
 80121a6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80121aa:	4623      	mov	r3, r4
 80121ac:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80121b0:	4602      	mov	r2, r0
 80121b2:	1a9b      	subs	r3, r3, r2
 80121b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80121b6:	462b      	mov	r3, r5
 80121b8:	460a      	mov	r2, r1
 80121ba:	eb63 0302 	sbc.w	r3, r3, r2
 80121be:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 80121c0:	f04f 0200 	mov.w	r2, #0
 80121c4:	f04f 0300 	mov.w	r3, #0
 80121c8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80121cc:	4629      	mov	r1, r5
 80121ce:	030b      	lsls	r3, r1, #12
 80121d0:	4621      	mov	r1, r4
 80121d2:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 80121d6:	4621      	mov	r1, r4
 80121d8:	030a      	lsls	r2, r1, #12
 80121da:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 80121de:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80121e2:	4313      	orrs	r3, r2
 80121e4:	f000 80a8 	beq.w	8012338 <VL53L1_f_036+0x28a>
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 80121e8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80121ec:	f04f 0000 	mov.w	r0, #0
 80121f0:	f04f 0100 	mov.w	r1, #0
 80121f4:	0319      	lsls	r1, r3, #12
 80121f6:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 80121fa:	0310      	lsls	r0, r2, #12
 80121fc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8012200:	1814      	adds	r4, r2, r0
 8012202:	633c      	str	r4, [r7, #48]	; 0x30
 8012204:	414b      	adcs	r3, r1
 8012206:	637b      	str	r3, [r7, #52]	; 0x34
 8012208:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 801220c:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 8012210:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8012214:	1891      	adds	r1, r2, r2
 8012216:	62b9      	str	r1, [r7, #40]	; 0x28
 8012218:	415b      	adcs	r3, r3
 801221a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801221c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012220:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8012224:	f7ee fc98 	bl	8000b58 <__aeabi_ldivmod>
 8012228:	4602      	mov	r2, r0
 801222a:	460b      	mov	r3, r1
 801222c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		mean_phase += 2048;
 8012230:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8012234:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8012238:	6239      	str	r1, [r7, #32]
 801223a:	f143 0300 	adc.w	r3, r3, #0
 801223e:	627b      	str	r3, [r7, #36]	; 0x24
 8012240:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8012244:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase += (4096 * (int64_t)bin);
 8012248:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 801224c:	2200      	movs	r2, #0
 801224e:	643b      	str	r3, [r7, #64]	; 0x40
 8012250:	647a      	str	r2, [r7, #68]	; 0x44
 8012252:	f04f 0200 	mov.w	r2, #0
 8012256:	f04f 0300 	mov.w	r3, #0
 801225a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 801225e:	4629      	mov	r1, r5
 8012260:	030b      	lsls	r3, r1, #12
 8012262:	4621      	mov	r1, r4
 8012264:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8012268:	4621      	mov	r1, r4
 801226a:	030a      	lsls	r2, r1, #12
 801226c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8012270:	1884      	adds	r4, r0, r2
 8012272:	61bc      	str	r4, [r7, #24]
 8012274:	eb41 0303 	adc.w	r3, r1, r3
 8012278:	61fb      	str	r3, [r7, #28]
 801227a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801227e:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		mean_phase  = do_division_s((mean_phase + 1), 2);
 8012282:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8012286:	1c51      	adds	r1, r2, #1
 8012288:	63b9      	str	r1, [r7, #56]	; 0x38
 801228a:	f143 0300 	adc.w	r3, r3, #0
 801228e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012290:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8012294:	460b      	mov	r3, r1
 8012296:	0fdb      	lsrs	r3, r3, #31
 8012298:	2200      	movs	r2, #0
 801229a:	613b      	str	r3, [r7, #16]
 801229c:	617a      	str	r2, [r7, #20]
 801229e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80122a2:	4623      	mov	r3, r4
 80122a4:	4602      	mov	r2, r0
 80122a6:	189b      	adds	r3, r3, r2
 80122a8:	60bb      	str	r3, [r7, #8]
 80122aa:	460b      	mov	r3, r1
 80122ac:	462a      	mov	r2, r5
 80122ae:	eb42 0303 	adc.w	r3, r2, r3
 80122b2:	60fb      	str	r3, [r7, #12]
 80122b4:	f04f 0200 	mov.w	r2, #0
 80122b8:	f04f 0300 	mov.w	r3, #0
 80122bc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80122c0:	4621      	mov	r1, r4
 80122c2:	084a      	lsrs	r2, r1, #1
 80122c4:	4629      	mov	r1, r5
 80122c6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80122ca:	4629      	mov	r1, r5
 80122cc:	104b      	asrs	r3, r1, #1
 80122ce:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		if (mean_phase  < 0)
 80122d2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	da05      	bge.n	80122e6 <VL53L1_f_036+0x238>
			mean_phase = 0;
 80122da:	f04f 0200 	mov.w	r2, #0
 80122de:	f04f 0300 	mov.w	r3, #0
 80122e2:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
 80122e6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80122ea:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80122ee:	f173 0300 	sbcs.w	r3, r3, #0
 80122f2:	db05      	blt.n	8012300 <VL53L1_f_036+0x252>
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;
 80122f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122f8:	f04f 0300 	mov.w	r3, #0
 80122fc:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase32 = (int32_t)mean_phase;
 8012300:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012304:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 8012308:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 801230c:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 801230e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012312:	fb93 f1f2 	sdiv	r1, r3, r2
 8012316:	fb01 f202 	mul.w	r2, r1, r2
 801231a:	1a9b      	subs	r3, r3, r2
 801231c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 8012320:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012324:	17da      	asrs	r2, r3, #31
 8012326:	603b      	str	r3, [r7, #0]
 8012328:	607a      	str	r2, [r7, #4]
 801232a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801232e:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53L1_ERROR_NONE;
 8012332:	2300      	movs	r3, #0
 8012334:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	*pmean_phase = (uint32_t)mean_phase;
 8012338:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801233c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012340:	601a      	str	r2, [r3, #0]

	return status;
 8012342:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 8012346:	4618      	mov	r0, r3
 8012348:	37c8      	adds	r7, #200	; 0xc8
 801234a:	46bd      	mov	sp, r7
 801234c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012350 <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 8012350:	b480      	push	{r7}
 8012352:	b087      	sub	sp, #28
 8012354:	af00      	add	r7, sp, #0
 8012356:	60ba      	str	r2, [r7, #8]
 8012358:	607b      	str	r3, [r7, #4]
 801235a:	4603      	mov	r3, r0
 801235c:	73fb      	strb	r3, [r7, #15]
 801235e:	460b      	mov	r3, r1
 8012360:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 8012362:	2300      	movs	r3, #0
 8012364:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 8012366:	2300      	movs	r3, #0
 8012368:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2200      	movs	r2, #0
 801236e:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 8012370:	7bfa      	ldrb	r2, [r7, #15]
 8012372:	68bb      	ldr	r3, [r7, #8]
 8012374:	3206      	adds	r2, #6
 8012376:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801237a:	6a3b      	ldr	r3, [r7, #32]
 801237c:	601a      	str	r2, [r3, #0]
	*pc = 0;
 801237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012380:	2200      	movs	r2, #0
 8012382:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8012384:	2300      	movs	r3, #0
 8012386:	75fb      	strb	r3, [r7, #23]
 8012388:	e02f      	b.n	80123ea <VL53L1_f_013+0x9a>


		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 801238a:	7bfa      	ldrb	r2, [r7, #15]
 801238c:	7dfb      	ldrb	r3, [r7, #23]
 801238e:	4413      	add	r3, r2
 8012390:	68ba      	ldr	r2, [r7, #8]
 8012392:	7a92      	ldrb	r2, [r2, #10]
 8012394:	441a      	add	r2, r3
 8012396:	7bbb      	ldrb	r3, [r7, #14]
 8012398:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53L1_p_024;
 801239a:	68ba      	ldr	r2, [r7, #8]
 801239c:	7a92      	ldrb	r2, [r2, #10]
 801239e:	fb93 f1f2 	sdiv	r1, r3, r2
 80123a2:	fb01 f202 	mul.w	r2, r1, r2
 80123a6:	1a9b      	subs	r3, r3, r2
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 80123a8:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 80123aa:	7dfa      	ldrb	r2, [r7, #23]
 80123ac:	7bbb      	ldrb	r3, [r7, #14]
 80123ae:	429a      	cmp	r2, r3
 80123b0:	d20a      	bcs.n	80123c8 <VL53L1_f_013+0x78>
			*pa += pbins->bin_data[j];
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681a      	ldr	r2, [r3, #0]
 80123b6:	7db9      	ldrb	r1, [r7, #22]
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	3106      	adds	r1, #6
 80123bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80123c0:	441a      	add	r2, r3
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	601a      	str	r2, [r3, #0]
 80123c6:	e00d      	b.n	80123e4 <VL53L1_f_013+0x94>
		else if (w > filter_woi)
 80123c8:	7dfa      	ldrb	r2, [r7, #23]
 80123ca:	7bbb      	ldrb	r3, [r7, #14]
 80123cc:	429a      	cmp	r2, r3
 80123ce:	d909      	bls.n	80123e4 <VL53L1_f_013+0x94>
			*pc += pbins->bin_data[j];
 80123d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d2:	681a      	ldr	r2, [r3, #0]
 80123d4:	7db9      	ldrb	r1, [r7, #22]
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	3106      	adds	r1, #6
 80123da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80123de:	441a      	add	r2, r3
 80123e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e2:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 80123e4:	7dfb      	ldrb	r3, [r7, #23]
 80123e6:	3301      	adds	r3, #1
 80123e8:	75fb      	strb	r3, [r7, #23]
 80123ea:	7bbb      	ldrb	r3, [r7, #14]
 80123ec:	005a      	lsls	r2, r3, #1
 80123ee:	7dfb      	ldrb	r3, [r7, #23]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	daca      	bge.n	801238a <VL53L1_f_013+0x3a>
	}
}
 80123f4:	bf00      	nop
 80123f6:	bf00      	nop
 80123f8:	371c      	adds	r7, #28
 80123fa:	46bd      	mov	sp, r7
 80123fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012400:	4770      	bx	lr

08012402 <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 8012402:	b580      	push	{r7, lr}
 8012404:	b088      	sub	sp, #32
 8012406:	af00      	add	r7, sp, #0
 8012408:	60ba      	str	r2, [r7, #8]
 801240a:	461a      	mov	r2, r3
 801240c:	4603      	mov	r3, r0
 801240e:	81fb      	strh	r3, [r7, #14]
 8012410:	460b      	mov	r3, r1
 8012412:	81bb      	strh	r3, [r7, #12]
 8012414:	4613      	mov	r3, r2
 8012416:	80fb      	strh	r3, [r7, #6]
	VL53L1_Error     status = VL53L1_ERROR_NONE;
 8012418:	2300      	movs	r3, #0
 801241a:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 801241c:	2300      	movs	r3, #0
 801241e:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 8012420:	2300      	movs	r3, #0
 8012422:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 8012424:	2300      	movs	r3, #0
 8012426:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 8012428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242a:	89fa      	ldrh	r2, [r7, #14]
 801242c:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 801242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012430:	89ba      	ldrh	r2, [r7, #12]
 8012432:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 8012434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012436:	68ba      	ldr	r2, [r7, #8]
 8012438:	619a      	str	r2, [r3, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 801243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801243c:	88fa      	ldrh	r2, [r7, #6]
 801243e:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 8012440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012442:	8a5b      	ldrh	r3, [r3, #18]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d101      	bne.n	801244c <VL53L1_f_011+0x4a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8012448:	23f1      	movs	r3, #241	; 0xf1
 801244a:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 801244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801244e:	699b      	ldr	r3, [r3, #24]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d101      	bne.n	8012458 <VL53L1_f_011+0x56>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8012454:	23f1      	movs	r3, #241	; 0xf1
 8012456:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8012458:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d16f      	bne.n	8012540 <VL53L1_f_011+0x13e>



		pll_period_us =
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 8012460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012462:	8a5b      	ldrh	r3, [r3, #18]
 8012464:	4618      	mov	r0, r3
 8012466:	f7fd f903 	bl	800f670 <VL53L1_calc_pll_period_us>
 801246a:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 801246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801246e:	699b      	ldr	r3, [r3, #24]
 8012470:	3301      	adds	r3, #1
 8012472:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 8012474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012476:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 8012478:	4619      	mov	r1, r3
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012480:	6978      	ldr	r0, [r7, #20]
 8012482:	f7fd f90c 	bl	800f69e <VL53L1_duration_maths>
 8012486:	4602      	mov	r2, r0
 8012488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801248a:	61da      	str	r2, [r3, #28]
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53L1_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53L1_p_030) << 4,
 801248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801248e:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 8012490:	0119      	lsls	r1, r3, #4
 8012492:	693b      	ldr	r3, [r7, #16]
 8012494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012498:	6978      	ldr	r0, [r7, #20]
 801249a:	f7fd f900 	bl	800f69e <VL53L1_duration_maths>
 801249e:	4602      	mov	r2, r0
 80124a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a2:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 80124a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 80124a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124aa:	69db      	ldr	r3, [r3, #28]
 80124ac:	4619      	mov	r1, r3
 80124ae:	4610      	mov	r0, r2
 80124b0:	f7fd fb6d 	bl	800fb8e <VL53L1_rate_maths>
 80124b4:	4603      	mov	r3, r0
 80124b6:	461a      	mov	r2, r3
 80124b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ba:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 80124bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 80124c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c2:	6a1b      	ldr	r3, [r3, #32]
 80124c4:	4619      	mov	r1, r3
 80124c6:	4610      	mov	r0, r2
 80124c8:	f7fd fb61 	bl	800fb8e <VL53L1_rate_maths>
 80124cc:	4603      	mov	r3, r0
 80124ce:	461a      	mov	r2, r3
 80124d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d2:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_020,
 80124d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 80124d8:	461a      	mov	r2, r3
 80124da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124dc:	6a1b      	ldr	r3, [r3, #32]
 80124de:	4619      	mov	r1, r3
 80124e0:	4610      	mov	r0, r2
 80124e2:	f7fd fb54 	bl	800fb8e <VL53L1_rate_maths>
 80124e6:	4603      	mov	r3, r0
 80124e8:	461a      	mov	r2, r3
 80124ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ec:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 80124ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80124f2:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 80124f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 80124f8:	4413      	add	r3, r2
 80124fa:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 80124fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012500:	2b01      	cmp	r3, #1
 8012502:	d905      	bls.n	8012510 <VL53L1_f_011+0x10e>
			count_rate_total /= histo_merge_nb;
 8012504:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012508:	69ba      	ldr	r2, [r7, #24]
 801250a:	fbb2 f3f3 	udiv	r3, r2, r3
 801250e:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53L1_rate_per_spad_maths(
 8012510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012512:	8ada      	ldrh	r2, [r3, #22]
 8012514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012518:	69b9      	ldr	r1, [r7, #24]
 801251a:	2006      	movs	r0, #6
 801251c:	f7fd fb7c 	bl	800fc18 <VL53L1_rate_per_spad_maths>
 8012520:	4603      	mov	r3, r0
 8012522:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 8012524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012526:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53L1_p_012   =
			VL53L1_events_per_spad_maths(
 8012528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801252a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801252e:	8ad9      	ldrh	r1, [r3, #22]
 8012530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012532:	69db      	ldr	r3, [r3, #28]
 8012534:	461a      	mov	r2, r3
 8012536:	f7fd f90b 	bl	800f750 <VL53L1_events_per_spad_maths>
 801253a:	4602      	mov	r2, r0
		pdata->VL53L1_p_012   =
 801253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801253e:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 8012540:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012544:	4618      	mov	r0, r3
 8012546:	3720      	adds	r7, #32
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}

0801254c <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 801254c:	b590      	push	{r4, r7, lr}
 801254e:	b085      	sub	sp, #20
 8012550:	af02      	add	r7, sp, #8
 8012552:	4603      	mov	r3, r0
 8012554:	603a      	str	r2, [r7, #0]
 8012556:	80fb      	strh	r3, [r7, #6]
 8012558:	460b      	mov	r3, r1
 801255a:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	8a58      	ldrh	r0, [r3, #18]
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	8a9c      	ldrh	r4, [r3, #20]
 8012568:	88fb      	ldrh	r3, [r7, #6]
 801256a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801256e:	9201      	str	r2, [sp, #4]
 8012570:	9300      	str	r3, [sp, #0]
 8012572:	2300      	movs	r3, #0
 8012574:	4622      	mov	r2, r4
 8012576:	f7fd fb83 	bl	800fc80 <VL53L1_range_maths>
 801257a:	4603      	mov	r3, r0
 801257c:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	8a58      	ldrh	r0, [r3, #18]
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	8a9c      	ldrh	r4, [r3, #20]
 8012592:	88fb      	ldrh	r3, [r7, #6]
 8012594:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012598:	9201      	str	r2, [sp, #4]
 801259a:	9300      	str	r3, [sp, #0]
 801259c:	2300      	movs	r3, #0
 801259e:	4622      	mov	r2, r4
 80125a0:	f7fd fb6e 	bl	800fc80 <VL53L1_range_maths>
 80125a4:	4603      	mov	r3, r0
 80125a6:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	8a58      	ldrh	r0, [r3, #18]
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	8a9c      	ldrh	r4, [r3, #20]
 80125bc:	88fb      	ldrh	r3, [r7, #6]
 80125be:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80125c2:	9201      	str	r2, [sp, #4]
 80125c4:	9300      	str	r3, [sp, #0]
 80125c6:	2300      	movs	r3, #0
 80125c8:	4622      	mov	r2, r4
 80125ca:	f7fd fb59 	bl	800fc80 <VL53L1_range_maths>
 80125ce:	4603      	mov	r3, r0
 80125d0:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 80125d8:	bf00      	nop
 80125da:	370c      	adds	r7, #12
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd90      	pop	{r4, r7, pc}

080125e0 <VL53L1_f_004>:

void  VL53L1_f_004(
	VL53L1_histogram_bin_data_t   *pxtalk,
	VL53L1_histogram_bin_data_t   *pbins,
	VL53L1_histogram_bin_data_t   *pxtalk_realigned)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b086      	sub	sp, #24
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	60b9      	str	r1, [r7, #8]
 80125ea:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 80125ec:	2300      	movs	r3, #0
 80125ee:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 80125f0:	2300      	movs	r3, #0
 80125f2:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 80125f4:	2300      	movs	r3, #0
 80125f6:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 80125f8:	2300      	movs	r3, #0
 80125fa:	757b      	strb	r3, [r7, #21]





	memcpy(
 80125fc:	22ac      	movs	r2, #172	; 0xac
 80125fe:	68b9      	ldr	r1, [r7, #8]
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f008 fb15 	bl	801ac30 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53L1_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8012606:	2300      	movs	r3, #0
 8012608:	75fb      	strb	r3, [r7, #23]
 801260a:	e008      	b.n	801261e <VL53L1_f_004+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 801260c:	7dfa      	ldrb	r2, [r7, #23]
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	3206      	adds	r2, #6
 8012612:	2100      	movs	r1, #0
 8012614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8012618:	7dfb      	ldrb	r3, [r7, #23]
 801261a:	3301      	adds	r3, #1
 801261c:	75fb      	strb	r3, [r7, #23]
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	7a5b      	ldrb	r3, [r3, #9]
 8012622:	7dfa      	ldrb	r2, [r7, #23]
 8012624:	429a      	cmp	r2, r3
 8012626:	d3f1      	bcc.n	801260c <VL53L1_f_004+0x2c>



	bin_offset =  VL53L1_f_038(
 8012628:	68f9      	ldr	r1, [r7, #12]
 801262a:	68b8      	ldr	r0, [r7, #8]
 801262c:	f000 f878 	bl	8012720 <VL53L1_f_038>
 8012630:	4603      	mov	r3, r0
 8012632:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	7a9a      	ldrb	r2, [r3, #10]
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	7a9b      	ldrb	r3, [r3, #10]
 801263c:	429a      	cmp	r2, r3
 801263e:	d203      	bcs.n	8012648 <VL53L1_f_004+0x68>
		min_bins = pxtalk->VL53L1_p_024;
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	7a9b      	ldrb	r3, [r3, #10]
 8012644:	75bb      	strb	r3, [r7, #22]
 8012646:	e002      	b.n	801264e <VL53L1_f_004+0x6e>
	else
		min_bins = pbins->VL53L1_p_024;
 8012648:	68bb      	ldr	r3, [r7, #8]
 801264a:	7a9b      	ldrb	r3, [r3, #10]
 801264c:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 801264e:	2300      	movs	r3, #0
 8012650:	75fb      	strb	r3, [r7, #23]
 8012652:	e05c      	b.n	801270e <VL53L1_f_004+0x12e>



		if (bin_offset >= 0)
 8012654:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8012658:	2b00      	cmp	r3, #0
 801265a:	db0f      	blt.n	801267c <VL53L1_f_004+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 801265c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012660:	461a      	mov	r2, r3
 8012662:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8012666:	4413      	add	r3, r2
				% (int8_t)pbins->VL53L1_p_024;
 8012668:	68ba      	ldr	r2, [r7, #8]
 801266a:	7a92      	ldrb	r2, [r2, #10]
 801266c:	b252      	sxtb	r2, r2
 801266e:	fb93 f1f2 	sdiv	r1, r3, r2
 8012672:	fb01 f202 	mul.w	r2, r1, r2
 8012676:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8012678:	757b      	strb	r3, [r7, #21]
 801267a:	e013      	b.n	80126a4 <VL53L1_f_004+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	7a9b      	ldrb	r3, [r3, #10]
 8012680:	b25b      	sxtb	r3, r3
 8012682:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 8012684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012688:	4619      	mov	r1, r3
 801268a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801268e:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8012690:	4413      	add	r3, r2
					% (int8_t)pbins->VL53L1_p_024;
 8012692:	68ba      	ldr	r2, [r7, #8]
 8012694:	7a92      	ldrb	r2, [r2, #10]
 8012696:	b252      	sxtb	r2, r2
 8012698:	fb93 f1f2 	sdiv	r1, r3, r2
 801269c:	fb01 f202 	mul.w	r2, r1, r2
 80126a0:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 80126a2:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 80126a4:	7d7b      	ldrb	r3, [r7, #21]
 80126a6:	461a      	mov	r2, r3
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	3206      	adds	r2, #6
 80126ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 80126b0:	7df9      	ldrb	r1, [r7, #23]
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	3106      	adds	r1, #6
 80126b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 80126ba:	429a      	cmp	r2, r3
 80126bc:	dd12      	ble.n	80126e4 <VL53L1_f_004+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 80126be:	7d7b      	ldrb	r3, [r7, #21]
 80126c0:	461a      	mov	r2, r3
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	3206      	adds	r2, #6
 80126c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 80126ca:	7df9      	ldrb	r1, [r7, #23]
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	3106      	adds	r1, #6
 80126d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 80126d4:	7d79      	ldrb	r1, [r7, #21]
 80126d6:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 80126d8:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	1d82      	adds	r2, r0, #6
 80126de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80126e2:	e006      	b.n	80126f2 <VL53L1_f_004+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 80126e4:	7d7b      	ldrb	r3, [r7, #21]
 80126e6:	461a      	mov	r2, r3
 80126e8:	68bb      	ldr	r3, [r7, #8]
 80126ea:	3206      	adds	r2, #6
 80126ec:	2100      	movs	r1, #0
 80126ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 80126f2:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 80126f4:	7d7b      	ldrb	r3, [r7, #21]
 80126f6:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	3206      	adds	r2, #6
 80126fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	1d82      	adds	r2, r0, #6
 8012704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 8012708:	7dfb      	ldrb	r3, [r7, #23]
 801270a:	3301      	adds	r3, #1
 801270c:	75fb      	strb	r3, [r7, #23]
 801270e:	7dfa      	ldrb	r2, [r7, #23]
 8012710:	7dbb      	ldrb	r3, [r7, #22]
 8012712:	429a      	cmp	r2, r3
 8012714:	d39e      	bcc.n	8012654 <VL53L1_f_004+0x74>
	}



	LOG_FUNCTION_END(0);
}
 8012716:	bf00      	nop
 8012718:	bf00      	nop
 801271a:	3718      	adds	r7, #24
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}

08012720 <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b086      	sub	sp, #24
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
 8012728:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 801272a:	2300      	movs	r3, #0
 801272c:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 801272e:	2300      	movs	r3, #0
 8012730:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 8012732:	2300      	movs	r3, #0
 8012734:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 8012736:	2300      	movs	r3, #0
 8012738:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012740:	4618      	mov	r0, r3
 8012742:	f7fd fb85 	bl	800fe50 <VL53L1_decode_vcsel_period>
 8012746:	4603      	mov	r3, r0
	period = 2048 *
 8012748:	02db      	lsls	r3, r3, #11
 801274a:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d00a      	beq.n	8012768 <VL53L1_f_038+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 8012758:	68ba      	ldr	r2, [r7, #8]
 801275a:	fbb3 f2f2 	udiv	r2, r3, r2
 801275e:	68b9      	ldr	r1, [r7, #8]
 8012760:	fb01 f202 	mul.w	r2, r1, r2
 8012764:	1a9b      	subs	r3, r3, r2
 8012766:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801276e:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 8012770:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 8012772:	1ad3      	subs	r3, r2, r3
 8012774:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	2b00      	cmp	r3, #0
 801277a:	dd09      	ble.n	8012790 <VL53L1_f_038+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012782:	2b00      	cmp	r3, #0
 8012784:	da01      	bge.n	801278a <VL53L1_f_038+0x6a>
 8012786:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801278a:	12db      	asrs	r3, r3, #11
 801278c:	75fb      	strb	r3, [r7, #23]
 801278e:	e008      	b.n	80127a2 <VL53L1_f_038+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8012796:	2b00      	cmp	r3, #0
 8012798:	da01      	bge.n	801279e <VL53L1_f_038+0x7e>
 801279a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801279e:	12db      	asrs	r3, r3, #11
 80127a0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 80127a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	3718      	adds	r7, #24
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}

080127ae <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 80127ae:	b580      	push	{r7, lr}
 80127b0:	b08e      	sub	sp, #56	; 0x38
 80127b2:	af00      	add	r7, sp, #0
 80127b4:	6078      	str	r0, [r7, #4]
 80127b6:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80127b8:	2300      	movs	r3, #0
 80127ba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53L1_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53L1_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 80127be:	2300      	movs	r3, #0
 80127c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 80127c4:	2300      	movs	r3, #0
 80127c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 80127ca:	2300      	movs	r3, #0
 80127cc:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53L1_p_018       = 0;
 80127ce:	2300      	movs	r3, #0
 80127d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 80127d4:	2300      	movs	r3, #0
 80127d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 80127da:	2300      	movs	r3, #0
 80127dc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 80127e0:	22ac      	movs	r2, #172	; 0xac
 80127e2:	6879      	ldr	r1, [r7, #4]
 80127e4:	6838      	ldr	r0, [r7, #0]
 80127e6:	f008 fa23 	bl	801ac30 <memcpy>


	podata->VL53L1_p_024 = 0;
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	2200      	movs	r2, #0
 80127ee:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 80127f0:	2300      	movs	r3, #0
 80127f2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80127f6:	e00a      	b.n	801280e <VL53L1_f_039+0x60>
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 80127f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80127fc:	683a      	ldr	r2, [r7, #0]
 80127fe:	4413      	add	r3, r2
 8012800:	2210      	movs	r2, #16
 8012802:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8012804:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012808:	3301      	adds	r3, #1
 801280a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801280e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012812:	2b05      	cmp	r3, #5
 8012814:	d9f0      	bls.n	80127f8 <VL53L1_f_039+0x4a>

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8012816:	2300      	movs	r3, #0
 8012818:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801281c:	e00b      	b.n	8012836 <VL53L1_f_039+0x88>
		podata->bin_data[lc] = 0;
 801281e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	3206      	adds	r2, #6
 8012826:	2100      	movs	r1, #0
 8012828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 801282c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012830:	3301      	adds	r3, #1
 8012832:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012836:	683b      	ldr	r3, [r7, #0]
 8012838:	7a5b      	ldrb	r3, [r3, #9]
 801283a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801283e:	429a      	cmp	r2, r3
 8012840:	d3ed      	bcc.n	801281e <VL53L1_f_039+0x70>



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8012842:	2300      	movs	r3, #0
 8012844:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012848:	e012      	b.n	8012870 <VL53L1_f_039+0xc2>
		bin_initial_index[lc] = 0x00;
 801284a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801284e:	3338      	adds	r3, #56	; 0x38
 8012850:	443b      	add	r3, r7
 8012852:	2200      	movs	r2, #0
 8012854:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 8012858:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801285c:	3338      	adds	r3, #56	; 0x38
 801285e:	443b      	add	r3, r7
 8012860:	2200      	movs	r2, #0
 8012862:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8012866:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801286a:	3301      	adds	r3, #1
 801286c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012870:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012874:	2b0f      	cmp	r3, #15
 8012876:	d9e8      	bls.n	801284a <VL53L1_f_039+0x9c>
	}




	bin_seq_length = 0x00;
 8012878:	2300      	movs	r3, #0
 801287a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 801287e:	2300      	movs	r3, #0
 8012880:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012884:	e068      	b.n	8012958 <VL53L1_f_039+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 8012886:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801288a:	687a      	ldr	r2, [r7, #4]
 801288c:	4413      	add	r3, r2
 801288e:	7b1b      	ldrb	r3, [r3, #12]
 8012890:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 8012894:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012898:	3338      	adds	r3, #56	; 0x38
 801289a:	443b      	add	r3, r7
 801289c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d115      	bne.n	80128d0 <VL53L1_f_039+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 80128a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80128a8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80128ac:	0092      	lsls	r2, r2, #2
 80128ae:	b2d2      	uxtb	r2, r2
 80128b0:	3338      	adds	r3, #56	; 0x38
 80128b2:	443b      	add	r3, r7
 80128b4:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 80128b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80128bc:	683a      	ldr	r2, [r7, #0]
 80128be:	4413      	add	r3, r2
 80128c0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80128c4:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 80128c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80128ca:	3301      	adds	r3, #1
 80128cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 80128d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80128d4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80128d8:	443a      	add	r2, r7
 80128da:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 80128de:	3201      	adds	r2, #1
 80128e0:	b2d2      	uxtb	r2, r2
 80128e2:	3338      	adds	r3, #56	; 0x38
 80128e4:	443b      	add	r3, r7
 80128e6:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53L1_p_018 = bin_initial_index[bin_cfg];
 80128ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80128ee:	3338      	adds	r3, #56	; 0x38
 80128f0:	443b      	add	r3, r7
 80128f2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80128f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 80128fa:	2300      	movs	r3, #0
 80128fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8012900:	e021      	b.n	8012946 <VL53L1_f_039+0x198>
			podata->bin_data[VL53L1_p_018+i] +=
 8012902:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8012906:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801290a:	441a      	add	r2, r3
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	3206      	adds	r2, #6
 8012910:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 8012914:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012918:	009a      	lsls	r2, r3, #2
 801291a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801291e:	441a      	add	r2, r3
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	3206      	adds	r2, #6
 8012924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53L1_p_018+i] +=
 8012928:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 801292c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8012930:	4402      	add	r2, r0
 8012932:	4419      	add	r1, r3
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	3206      	adds	r2, #6
 8012938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 801293c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8012940:	3301      	adds	r3, #1
 8012942:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8012946:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801294a:	2b03      	cmp	r3, #3
 801294c:	d9d9      	bls.n	8012902 <VL53L1_f_039+0x154>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 801294e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012952:	3301      	adds	r3, #1
 8012954:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012958:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801295c:	2b05      	cmp	r3, #5
 801295e:	d992      	bls.n	8012886 <VL53L1_f_039+0xd8>

	}



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8012960:	2300      	movs	r3, #0
 8012962:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012966:	e022      	b.n	80129ae <VL53L1_f_039+0x200>

		bin_cfg = podata->bin_seq[lc];
 8012968:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801296c:	683a      	ldr	r2, [r7, #0]
 801296e:	4413      	add	r3, r2
 8012970:	7b1b      	ldrb	r3, [r3, #12]
 8012972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 8012976:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801297a:	2b0f      	cmp	r3, #15
 801297c:	d80c      	bhi.n	8012998 <VL53L1_f_039+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 801297e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 8012982:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 8012986:	3238      	adds	r2, #56	; 0x38
 8012988:	443a      	add	r2, r7
 801298a:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 801298e:	683a      	ldr	r2, [r7, #0]
 8012990:	4413      	add	r3, r2
 8012992:	460a      	mov	r2, r1
 8012994:	749a      	strb	r2, [r3, #18]
 8012996:	e005      	b.n	80129a4 <VL53L1_f_039+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 8012998:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801299c:	683a      	ldr	r2, [r7, #0]
 801299e:	4413      	add	r3, r2
 80129a0:	2200      	movs	r2, #0
 80129a2:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80129a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80129a8:	3301      	adds	r3, #1
 80129aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80129ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80129b2:	2b05      	cmp	r3, #5
 80129b4:	d9d8      	bls.n	8012968 <VL53L1_f_039+0x1ba>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 80129b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129ba:	009b      	lsls	r3, r3, #2
 80129bc:	b2da      	uxtb	r2, r3
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80129c2:	2300      	movs	r3, #0
 80129c4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80129c8:	e050      	b.n	8012a6c <VL53L1_f_039+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 80129ca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80129ce:	3338      	adds	r3, #56	; 0x38
 80129d0:	443b      	add	r3, r7
 80129d2:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80129d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 80129d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129da:	2b00      	cmp	r3, #0
 80129dc:	dd41      	ble.n	8012a62 <VL53L1_f_039+0x2b4>

			VL53L1_p_018 = bin_initial_index[lc];
 80129de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80129e2:	3338      	adds	r3, #56	; 0x38
 80129e4:	443b      	add	r3, r7
 80129e6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80129ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 80129ee:	2300      	movs	r3, #0
 80129f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80129f4:	e031      	b.n	8012a5a <VL53L1_f_039+0x2ac>
				podata->bin_data[VL53L1_p_018+i] +=
 80129f6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80129fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80129fe:	441a      	add	r2, r3
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	3206      	adds	r2, #6
 8012a04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 8012a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a0a:	0fda      	lsrs	r2, r3, #31
 8012a0c:	4413      	add	r3, r2
 8012a0e:	105b      	asrs	r3, r3, #1
 8012a10:	4618      	mov	r0, r3
				podata->bin_data[VL53L1_p_018+i] +=
 8012a12:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8012a16:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8012a1a:	441a      	add	r2, r3
 8012a1c:	4401      	add	r1, r0
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	3206      	adds	r2, #6
 8012a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53L1_p_018+i] /=
 8012a26:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8012a2a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8012a2e:	441a      	add	r2, r3
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	3206      	adds	r2, #6
 8012a34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012a38:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8012a3c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8012a40:	441a      	add	r2, r3
 8012a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a44:	fb91 f1f3 	sdiv	r1, r1, r3
 8012a48:	683b      	ldr	r3, [r7, #0]
 8012a4a:	3206      	adds	r2, #6
 8012a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 8012a50:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8012a54:	3301      	adds	r3, #1
 8012a56:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8012a5a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8012a5e:	2b03      	cmp	r3, #3
 8012a60:	d9c9      	bls.n	80129f6 <VL53L1_f_039+0x248>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8012a62:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012a66:	3301      	adds	r3, #1
 8012a68:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8012a6c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012a70:	2b0f      	cmp	r3, #15
 8012a72:	d9aa      	bls.n	80129ca <VL53L1_f_039+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	2200      	movs	r2, #0
 8012a78:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 8012a7a:	7bfb      	ldrb	r3, [r7, #15]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d102      	bne.n	8012a86 <VL53L1_f_039+0x2d8>
		(bin_repeat_count[15] > 0))
 8012a80:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d002      	beq.n	8012a8c <VL53L1_f_039+0x2de>
		podata->number_of_ambient_bins = 4;
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	2204      	movs	r2, #4
 8012a8a:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 8012a8c:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	3738      	adds	r7, #56	; 0x38
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}

08012a98 <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 8012a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a9a:	b0cb      	sub	sp, #300	; 0x12c
 8012a9c:	af06      	add	r7, sp, #24
 8012a9e:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8012aa2:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8012aa6:	6020      	str	r0, [r4, #0]
 8012aa8:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8012aac:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8012ab0:	6001      	str	r1, [r0, #0]
 8012ab2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8012ab6:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012aba:	600a      	str	r2, [r1, #0]
 8012abc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8012ac0:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8012ac4:	6013      	str	r3, [r2, #0]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53L1_hist_gen3_algo_private_data_t  *palgo_gen3 =
 8012acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012ad0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53L1_hist_gen3_algo_private_data_t *) pArea1;
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered4 =
 8012ad4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012ad8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53L1_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53L1_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53L1_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 8012adc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8012ae0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 8012ae4:	f107 0318 	add.w	r3, r7, #24
 8012ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 8012aec:	2300      	movs	r3, #0
 8012aee:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 8012af0:	2300      	movs	r3, #0
 8012af2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 8012af6:	2300      	movs	r3, #0
 8012af8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 8012afc:	2300      	movs	r3, #0
 8012afe:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 8012b02:	2300      	movs	r3, #0
 8012b04:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 8012b08:	2300      	movs	r3, #0
 8012b0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 8012b0e:	2300      	movs	r3, #0
 8012b10:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53L1_f_039(
 8012b14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012b1c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8012b20:	6818      	ldr	r0, [r3, #0]
 8012b22:	f7ff fe44 	bl	80127ae <VL53L1_f_039>



	VL53L1_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
 8012b26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b2a:	7a9b      	ldrb	r3, [r3, #10]
	VL53L1_init_histogram_bin_data_struct(
 8012b2c:	b299      	uxth	r1, r3
 8012b2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b32:	3348      	adds	r3, #72	; 0x48
 8012b34:	461a      	mov	r2, r3
 8012b36:	2000      	movs	r0, #0
 8012b38:	f7fd f9db 	bl	800fef2 <VL53L1_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 8012b3c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8012b40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b44:	3348      	adds	r3, #72	; 0x48
 8012b46:	4619      	mov	r1, r3
 8012b48:	4610      	mov	r0, r2
 8012b4a:	f7fd f994 	bl	800fe76 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
 8012b4e:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d142      	bne.n	8012bdc <VL53L1_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8012b56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d039      	beq.n	8012bdc <VL53L1_hist_process_data+0x144>
		status =
		VL53L1_f_040(
 8012b68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012b74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 8012b82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 8012b90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8012b9e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8012ba2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8012ba6:	6812      	ldr	r2, [r2, #0]
 8012ba8:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 8012bac:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8012bb0:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8012bb4:	6809      	ldr	r1, [r1, #0]
 8012bb6:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 8012bba:	f107 0014 	add.w	r0, r7, #20
 8012bbe:	9004      	str	r0, [sp, #16]
 8012bc0:	9103      	str	r1, [sp, #12]
 8012bc2:	9202      	str	r2, [sp, #8]
 8012bc4:	9301      	str	r3, [sp, #4]
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	9300      	str	r3, [sp, #0]
 8012bca:	2300      	movs	r3, #0
 8012bcc:	4632      	mov	r2, r6
 8012bce:	4629      	mov	r1, r5
 8012bd0:	4620      	mov	r0, r4
 8012bd2:	f002 f98c 	bl	8014eee <VL53L1_f_040>
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
 8012bdc:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d115      	bne.n	8012c10 <VL53L1_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8012be4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012be8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d00c      	beq.n	8012c10 <VL53L1_hist_process_data+0x178>
		status =
			VL53L1_f_041(
 8012bf6:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8012bfa:	697a      	ldr	r2, [r7, #20]
 8012bfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012c00:	3348      	adds	r3, #72	; 0x48
 8012c02:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8012c06:	f002 fbe4 	bl	80153d2 <VL53L1_f_041>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 8012c10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012c14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 8012c18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c1c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;
 8012c20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012c24:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53L1_p_006 =
 8012c28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c2c:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 8012c30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c34:	2200      	movs	r2, #0
 8012c36:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 8012c3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c3e:	2200      	movs	r2, #0
 8012c40:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 8012c44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c48:	2200      	movs	r2, #0
 8012c4a:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8012c4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c52:	2200      	movs	r2, #0
 8012c54:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8012c5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d002      	beq.n	8012c76 <VL53L1_hist_process_data+0x1de>
		xtalk_enable = 1;
 8012c70:	2301      	movs	r3, #1
 8012c72:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 8012c76:	2300      	movs	r3, #0
 8012c78:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8012c7c:	e108      	b.n	8012e90 <VL53L1_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 8012c7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8012c8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53L1_f_033(
 8012c90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012c94:	3348      	adds	r3, #72	; 0x48
 8012c96:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8012c9a:	7814      	ldrb	r4, [r2, #0]
 8012c9c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8012ca0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8012ca4:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8012ca8:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8012cac:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8012cb0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012cb4:	9405      	str	r4, [sp, #20]
 8012cb6:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8012cba:	9404      	str	r4, [sp, #16]
 8012cbc:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8012cc0:	9403      	str	r4, [sp, #12]
 8012cc2:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8012cc6:	9402      	str	r4, [sp, #8]
 8012cc8:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8012ccc:	9401      	str	r4, [sp, #4]
 8012cce:	9300      	str	r3, [sp, #0]
 8012cd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012cd4:	6812      	ldr	r2, [r2, #0]
 8012cd6:	6809      	ldr	r1, [r1, #0]
 8012cd8:	6800      	ldr	r0, [r0, #0]
 8012cda:	f7fe fe65 	bl	80119a8 <VL53L1_f_033>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53L1_ERROR_NONE && r == 0))
 8012ce4:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	f040 80cb 	bne.w	8012e84 <VL53L1_hist_process_data+0x3ec>
 8012cee:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	f040 80c6 	bne.w	8012e84 <VL53L1_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 8012cf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012cfc:	7c9b      	ldrb	r3, [r3, #18]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d110      	bne.n	8012d24 <VL53L1_hist_process_data+0x28c>
			pdata = &(presults->VL53L1_p_002[0]);
 8012d02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d06:	3314      	adds	r3, #20
 8012d08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53L1_p_001;
 8012d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012d10:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 8012d12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012d16:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_006 =
				pdmax_algo_gen3->VL53L1_p_006;
 8012d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012d1c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53L1_p_006 =
 8012d1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012d22:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 8012d24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012d28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 8012d30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8012d34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012d38:	781b      	ldrb	r3, [r3, #0]
 8012d3a:	461a      	mov	r2, r3
 8012d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d40:	fb02 f303 	mul.w	r3, r2, r3
 8012d44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 8012d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d4c:	011b      	lsls	r3, r3, #4
 8012d4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 8012d52:	2300      	movs	r3, #0
 8012d54:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8012d58:	e08b      	b.n	8012e72 <VL53L1_hist_process_data+0x3da>

			pdata = &(presults->VL53L1_p_002[t]);
 8012d5a:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8012d5e:	224c      	movs	r2, #76	; 0x4c
 8012d60:	fb02 f303 	mul.w	r3, r2, r3
 8012d64:	3310      	adds	r3, #16
 8012d66:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8012d6a:	4413      	add	r3, r2
 8012d6c:	3304      	adds	r3, #4
 8012d6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 8012d72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012d76:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8012d7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012d7e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8012d82:	429a      	cmp	r2, r3
 8012d84:	dd0e      	ble.n	8012da4 <VL53L1_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 8012d86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012d8a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8012d8e:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 8012d90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012d94:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8012d98:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 8012d9a:	1ad3      	subs	r3, r2, r3
 8012d9c:	b29b      	uxth	r3, r3
				delta_mm =
 8012d9e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8012da2:	e00d      	b.n	8012dc0 <VL53L1_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 8012da4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012da8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8012dac:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 8012dae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012db2:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8012db6:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 8012db8:	1ad3      	subs	r3, r2, r3
 8012dba:	b29b      	uxth	r3, r3
				delta_mm =
 8012dbc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8012dc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012dc4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 8012dcc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8012dd0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	461a      	mov	r2, r3
 8012dd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012ddc:	fb02 f303 	mul.w	r3, r2, r3
 8012de0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 8012de4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012de8:	015b      	lsls	r3, r3, #5
 8012dea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 8012dee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012df2:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8012df6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012dfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 8012e04:	429a      	cmp	r2, r3
 8012e06:	dd2f      	ble.n	8012e68 <VL53L1_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 8012e08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012e0c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8012e10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012e14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8012e1e:	429a      	cmp	r2, r3
 8012e20:	da22      	bge.n	8012e68 <VL53L1_hist_process_data+0x3d0>
			pdata->VL53L1_p_012 <
 8012e22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8012e28:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d91b      	bls.n	8012e68 <VL53L1_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8012e30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012e34:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012e36:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 8012e38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012e3c:	4293      	cmp	r3, r2
 8012e3e:	d913      	bls.n	8012e68 <VL53L1_hist_process_data+0x3d0>
			delta_mm <
 8012e40:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8012e44:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8012e48:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8012e4c:	6812      	ldr	r2, [r2, #0]
 8012e4e:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8012e50:	4293      	cmp	r3, r2
 8012e52:	da09      	bge.n	8012e68 <VL53L1_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 8012e54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012e58:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 8012e5c:	224c      	movs	r2, #76	; 0x4c
 8012e5e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8012e62:	4618      	mov	r0, r3
 8012e64:	f007 fee4 	bl	801ac30 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 8012e68:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8012e6c:	3301      	adds	r3, #1
 8012e6e:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8012e72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012e76:	7c9b      	ldrb	r3, [r3, #18]
 8012e78:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8012e7c:	429a      	cmp	r2, r3
 8012e7e:	f4ff af6c 	bcc.w	8012d5a <VL53L1_hist_process_data+0x2c2>
 8012e82:	e000      	b.n	8012e86 <VL53L1_hist_process_data+0x3ee>
			continue;
 8012e84:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 8012e86:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8012e90:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8012e94:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8012e98:	429a      	cmp	r2, r3
 8012e9a:	f67f aef0 	bls.w	8012c7e <VL53L1_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 8012e9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012ea2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8012eac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 8012eb0:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012ebe <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 8012ebe:	b580      	push	{r7, lr}
 8012ec0:	b086      	sub	sp, #24
 8012ec2:	af00      	add	r7, sp, #0
 8012ec4:	60f8      	str	r0, [r7, #12]
 8012ec6:	460b      	mov	r3, r1
 8012ec8:	607a      	str	r2, [r7, #4]
 8012eca:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53L1_ERROR_NONE)
 8012ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d104      	bne.n	8012ee2 <VL53L1_nvm_enable+0x24>
		status = VL53L1_disable_firmware(Dev);
 8012ed8:	68f8      	ldr	r0, [r7, #12]
 8012eda:	f7f9 fb5a 	bl	800c592 <VL53L1_disable_firmware>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	75fb      	strb	r3, [r7, #23]




	if (status == VL53L1_ERROR_NONE)
 8012ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d104      	bne.n	8012ef4 <VL53L1_nvm_enable+0x36>
		status = VL53L1_enable_powerforce(Dev);
 8012eea:	68f8      	ldr	r0, [r7, #12]
 8012eec:	f7f9 fb82 	bl	800c5f4 <VL53L1_enable_powerforce>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	75fb      	strb	r3, [r7, #23]



	if (status == VL53L1_ERROR_NONE)
 8012ef4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d105      	bne.n	8012f08 <VL53L1_nvm_enable+0x4a>
		status = VL53L1_WaitUs(
 8012efc:	21fa      	movs	r1, #250	; 0xfa
 8012efe:	68f8      	ldr	r0, [r7, #12]
 8012f00:	f002 fdd0 	bl	8015aa4 <VL53L1_WaitUs>
 8012f04:	4603      	mov	r3, r0
 8012f06:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 8012f08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d107      	bne.n	8012f20 <VL53L1_nvm_enable+0x62>
		status = VL53L1_WrByte(
 8012f10:	2201      	movs	r2, #1
 8012f12:	f240 7181 	movw	r1, #1921	; 0x781
 8012f16:	68f8      	ldr	r0, [r7, #12]
 8012f18:	f002 fcd0 	bl	80158bc <VL53L1_WrByte>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8012f20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d107      	bne.n	8012f38 <VL53L1_nvm_enable+0x7a>
		status = VL53L1_WrByte(
 8012f28:	2205      	movs	r2, #5
 8012f2a:	f240 6183 	movw	r1, #1667	; 0x683
 8012f2e:	68f8      	ldr	r0, [r7, #12]
 8012f30:	f002 fcc4 	bl	80158bc <VL53L1_WrByte>
 8012f34:	4603      	mov	r3, r0
 8012f36:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53L1_ERROR_NONE)
 8012f38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d105      	bne.n	8012f4c <VL53L1_nvm_enable+0x8e>
		status = VL53L1_WaitUs(
 8012f40:	6879      	ldr	r1, [r7, #4]
 8012f42:	68f8      	ldr	r0, [r7, #12]
 8012f44:	f002 fdae 	bl	8015aa4 <VL53L1_WaitUs>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53L1_ERROR_NONE)
 8012f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d107      	bne.n	8012f64 <VL53L1_nvm_enable+0xa6>
		status = VL53L1_WrByte(
 8012f54:	2201      	movs	r2, #1
 8012f56:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8012f5a:	68f8      	ldr	r0, [r7, #12]
 8012f5c:	f002 fcae 	bl	80158bc <VL53L1_WrByte>
 8012f60:	4603      	mov	r3, r0
 8012f62:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53L1_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53L1_ERROR_NONE)
 8012f64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d108      	bne.n	8012f7e <VL53L1_nvm_enable+0xc0>
		status = VL53L1_WrWord(
 8012f6c:	897b      	ldrh	r3, [r7, #10]
 8012f6e:	461a      	mov	r2, r3
 8012f70:	f240 7184 	movw	r1, #1924	; 0x784
 8012f74:	68f8      	ldr	r0, [r7, #12]
 8012f76:	f002 fccb 	bl	8015910 <VL53L1_WrWord>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	75fb      	strb	r3, [r7, #23]
			VL53L1_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 8012f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3718      	adds	r7, #24
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}

08012f8a <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 8012f8a:	b580      	push	{r7, lr}
 8012f8c:	b086      	sub	sp, #24
 8012f8e:	af00      	add	r7, sp, #0
 8012f90:	60f8      	str	r0, [r7, #12]
 8012f92:	607b      	str	r3, [r7, #4]
 8012f94:	460b      	mov	r3, r1
 8012f96:	72fb      	strb	r3, [r7, #11]
 8012f98:	4613      	mov	r3, r2
 8012f9a:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 8012fa4:	7afb      	ldrb	r3, [r7, #11]
 8012fa6:	75bb      	strb	r3, [r7, #22]
 8012fa8:	e041      	b.n	801302e <VL53L1_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53L1_ERROR_NONE)
 8012faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d108      	bne.n	8012fc4 <VL53L1_nvm_read+0x3a>
			status = VL53L1_WrByte(
 8012fb2:	7dbb      	ldrb	r3, [r7, #22]
 8012fb4:	461a      	mov	r2, r3
 8012fb6:	f240 7194 	movw	r1, #1940	; 0x794
 8012fba:	68f8      	ldr	r0, [r7, #12]
 8012fbc:	f002 fc7e 	bl	80158bc <VL53L1_WrByte>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53L1_ERROR_NONE)
 8012fc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d107      	bne.n	8012fdc <VL53L1_nvm_read+0x52>
			status = VL53L1_WrByte(
 8012fcc:	2200      	movs	r2, #0
 8012fce:	f240 7183 	movw	r1, #1923	; 0x783
 8012fd2:	68f8      	ldr	r0, [r7, #12]
 8012fd4:	f002 fc72 	bl	80158bc <VL53L1_WrByte>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53L1_ERROR_NONE)
 8012fdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d105      	bne.n	8012ff0 <VL53L1_nvm_read+0x66>
			status = VL53L1_WaitUs(
 8012fe4:	2105      	movs	r1, #5
 8012fe6:	68f8      	ldr	r0, [r7, #12]
 8012fe8:	f002 fd5c 	bl	8015aa4 <VL53L1_WaitUs>
 8012fec:	4603      	mov	r3, r0
 8012fee:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53L1_ERROR_NONE)
 8012ff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d107      	bne.n	8013008 <VL53L1_nvm_read+0x7e>
			status = VL53L1_WrByte(
 8012ff8:	2201      	movs	r2, #1
 8012ffa:	f240 7183 	movw	r1, #1923	; 0x783
 8012ffe:	68f8      	ldr	r0, [r7, #12]
 8013000:	f002 fc5c 	bl	80158bc <VL53L1_WrByte>
 8013004:	4603      	mov	r3, r0
 8013006:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53L1_ERROR_NONE)
 8013008:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d108      	bne.n	8013022 <VL53L1_nvm_read+0x98>
			status = VL53L1_ReadMulti(
 8013010:	2304      	movs	r3, #4
 8013012:	687a      	ldr	r2, [r7, #4]
 8013014:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8013018:	68f8      	ldr	r0, [r7, #12]
 801301a:	f002 fc19 	bl	8015850 <VL53L1_ReadMulti>
 801301e:	4603      	mov	r3, r0
 8013020:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	3304      	adds	r3, #4
 8013026:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8013028:	7dbb      	ldrb	r3, [r7, #22]
 801302a:	3301      	adds	r3, #1
 801302c:	75bb      	strb	r3, [r7, #22]
 801302e:	7dba      	ldrb	r2, [r7, #22]
 8013030:	7af9      	ldrb	r1, [r7, #11]
 8013032:	7abb      	ldrb	r3, [r7, #10]
 8013034:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 8013036:	429a      	cmp	r2, r3
 8013038:	dbb7      	blt.n	8012faa <VL53L1_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 801303a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801303e:	4618      	mov	r0, r3
 8013040:	3718      	adds	r7, #24
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}

08013046 <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 8013046:	b580      	push	{r7, lr}
 8013048:	b084      	sub	sp, #16
 801304a:	af00      	add	r7, sp, #0
 801304c:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801304e:	2300      	movs	r3, #0
 8013050:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8013052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d107      	bne.n	801306a <VL53L1_nvm_disable+0x24>
		status = VL53L1_WrByte(
 801305a:	2201      	movs	r2, #1
 801305c:	f240 7183 	movw	r1, #1923	; 0x783
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	f002 fc2b 	bl	80158bc <VL53L1_WrByte>
 8013066:	4603      	mov	r3, r0
 8013068:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 801306a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d107      	bne.n	8013082 <VL53L1_nvm_disable+0x3c>
		status = VL53L1_WrByte(
 8013072:	2200      	movs	r2, #0
 8013074:	f240 7181 	movw	r1, #1921	; 0x781
 8013078:	6878      	ldr	r0, [r7, #4]
 801307a:	f002 fc1f 	bl	80158bc <VL53L1_WrByte>
 801307e:	4603      	mov	r3, r0
 8013080:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53L1_ERROR_NONE)
 8013082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d104      	bne.n	8013094 <VL53L1_nvm_disable+0x4e>
		status = VL53L1_disable_powerforce(Dev);
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f7f9 fac4 	bl	800c618 <VL53L1_disable_powerforce>
 8013090:	4603      	mov	r3, r0
 8013092:	73fb      	strb	r3, [r7, #15]



	if (status == VL53L1_ERROR_NONE)
 8013094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d104      	bne.n	80130a6 <VL53L1_nvm_disable+0x60>
		status = VL53L1_enable_firmware(Dev);
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	f7f9 fa66 	bl	800c56e <VL53L1_enable_firmware>
 80130a2:	4603      	mov	r3, r0
 80130a4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80130a6:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80130aa:	4618      	mov	r0, r3
 80130ac:	3710      	adds	r7, #16
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}

080130b2 <VL53L1_nvm_decode_optical_centre>:

VL53L1_Error VL53L1_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_optical_centre_t    *pdata)
{
 80130b2:	b480      	push	{r7}
 80130b4:	b087      	sub	sp, #28
 80130b6:	af00      	add	r7, sp, #0
 80130b8:	4603      	mov	r3, r0
 80130ba:	60b9      	str	r1, [r7, #8]
 80130bc:	607a      	str	r2, [r7, #4]
 80130be:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 80130c0:	2300      	movs	r3, #0
 80130c2:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 80130c4:	2300      	movs	r3, #0
 80130c6:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53L1_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 80130c8:	89fb      	ldrh	r3, [r7, #14]
 80130ca:	2b03      	cmp	r3, #3
 80130cc:	d802      	bhi.n	80130d4 <VL53L1_nvm_decode_optical_centre+0x22>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 80130ce:	f06f 0308 	mvn.w	r3, #8
 80130d2:	e018      	b.n	8013106 <VL53L1_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 80130d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80130d8:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	3302      	adds	r3, #2
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	b29b      	uxth	r3, r3
 80130e2:	8afa      	ldrh	r2, [r7, #22]
 80130e4:	1ad3      	subs	r3, r2, r3
 80130e6:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 80130e8:	8afb      	ldrh	r3, [r7, #22]
 80130ea:	2bff      	cmp	r3, #255	; 0xff
 80130ec:	d901      	bls.n	80130f2 <VL53L1_nvm_decode_optical_centre+0x40>
		tmp = 0;
 80130ee:	2300      	movs	r3, #0
 80130f0:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 80130f2:	8afb      	ldrh	r3, [r7, #22]
 80130f4:	b2da      	uxtb	r2, r3
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	78da      	ldrb	r2, [r3, #3]
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	705a      	strb	r2, [r3, #1]

	return status;
 8013102:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8013106:	4618      	mov	r0, r3
 8013108:	371c      	adds	r7, #28
 801310a:	46bd      	mov	sp, r7
 801310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013110:	4770      	bx	lr

08013112 <VL53L1_nvm_decode_cal_peak_rate_map>:

VL53L1_Error VL53L1_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_cal_peak_rate_map_t *pdata)
{
 8013112:	b590      	push	{r4, r7, lr}
 8013114:	b087      	sub	sp, #28
 8013116:	af00      	add	r7, sp, #0
 8013118:	4603      	mov	r3, r0
 801311a:	60b9      	str	r1, [r7, #8]
 801311c:	607a      	str	r2, [r7, #4]
 801311e:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8013120:	2300      	movs	r3, #0
 8013122:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 8013124:	2300      	movs	r3, #0
 8013126:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 8013128:	2300      	movs	r3, #0
 801312a:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 801312c:	89fb      	ldrh	r3, [r7, #14]
 801312e:	2b37      	cmp	r3, #55	; 0x37
 8013130:	d802      	bhi.n	8013138 <VL53L1_nvm_decode_cal_peak_rate_map+0x26>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8013132:	f06f 0308 	mvn.w	r3, #8
 8013136:	e03e      	b.n	80131b6 <VL53L1_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8013138:	68b9      	ldr	r1, [r7, #8]
 801313a:	2002      	movs	r0, #2
 801313c:	f7f9 f8fd 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013140:	4603      	mov	r3, r0
 8013142:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8013148:	68bb      	ldr	r3, [r7, #8]
 801314a:	3302      	adds	r3, #2
 801314c:	4619      	mov	r1, r3
 801314e:	2002      	movs	r0, #2
 8013150:	f7f9 f8f3 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013154:	4603      	mov	r3, r0
 8013156:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 8013160:	099b      	lsrs	r3, r3, #6
 8013162:	b29a      	uxth	r2, r3
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2219      	movs	r2, #25
 801316c:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	2205      	movs	r2, #5
 8013172:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2205      	movs	r2, #5
 8013178:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 801317a:	68bb      	ldr	r3, [r7, #8]
 801317c:	3304      	adds	r3, #4
 801317e:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8013180:	2300      	movs	r3, #0
 8013182:	74fb      	strb	r3, [r7, #19]
 8013184:	e012      	b.n	80131ac <VL53L1_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 8013186:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 8013188:	6979      	ldr	r1, [r7, #20]
 801318a:	2002      	movs	r0, #2
 801318c:	f7f9 f8d5 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013190:	4603      	mov	r3, r0
 8013192:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 8013194:	687a      	ldr	r2, [r7, #4]
 8013196:	1d23      	adds	r3, r4, #4
 8013198:	005b      	lsls	r3, r3, #1
 801319a:	4413      	add	r3, r2
 801319c:	460a      	mov	r2, r1
 801319e:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	3302      	adds	r3, #2
 80131a4:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 80131a6:	7cfb      	ldrb	r3, [r7, #19]
 80131a8:	3301      	adds	r3, #1
 80131aa:	74fb      	strb	r3, [r7, #19]
 80131ac:	7cfb      	ldrb	r3, [r7, #19]
 80131ae:	2b18      	cmp	r3, #24
 80131b0:	d9e9      	bls.n	8013186 <VL53L1_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 80131b2:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 80131b6:	4618      	mov	r0, r3
 80131b8:	371c      	adds	r7, #28
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd90      	pop	{r4, r7, pc}

080131be <VL53L1_nvm_decode_additional_offset_cal_data>:

VL53L1_Error VL53L1_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_additional_offset_cal_data_t *pdata)
{
 80131be:	b580      	push	{r7, lr}
 80131c0:	b086      	sub	sp, #24
 80131c2:	af00      	add	r7, sp, #0
 80131c4:	4603      	mov	r3, r0
 80131c6:	60b9      	str	r1, [r7, #8]
 80131c8:	607a      	str	r2, [r7, #4]
 80131ca:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 80131cc:	2300      	movs	r3, #0
 80131ce:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 80131d0:	89fb      	ldrh	r3, [r7, #14]
 80131d2:	2b07      	cmp	r3, #7
 80131d4:	d802      	bhi.n	80131dc <VL53L1_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 80131d6:	f06f 0308 	mvn.w	r3, #8
 80131da:	e027      	b.n	801322c <VL53L1_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 80131dc:	68b9      	ldr	r1, [r7, #8]
 80131de:	2002      	movs	r0, #2
 80131e0:	f7f9 f8ab 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 80131e4:	4603      	mov	r3, r0
 80131e6:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 80131ec:	68bb      	ldr	r3, [r7, #8]
 80131ee:	3302      	adds	r3, #2
 80131f0:	4619      	mov	r1, r3
 80131f2:	2002      	movs	r0, #2
 80131f4:	f7f9 f8a1 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 80131f8:	4603      	mov	r3, r0
 80131fa:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	3304      	adds	r3, #4
 8013204:	4619      	mov	r1, r3
 8013206:	2002      	movs	r0, #2
 8013208:	f7f9 f897 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 801320c:	4603      	mov	r3, r0
 801320e:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	3306      	adds	r3, #6
 8013218:	4619      	mov	r1, r3
 801321a:	2002      	movs	r0, #2
 801321c:	f7f9 f88d 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013220:	4603      	mov	r3, r0
 8013222:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	80da      	strh	r2, [r3, #6]

	return status;
 8013228:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801322c:	4618      	mov	r0, r3
 801322e:	3718      	adds	r7, #24
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}

08013234 <VL53L1_nvm_decode_fmt_range_results_data>:

VL53L1_Error VL53L1_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b086      	sub	sp, #24
 8013238:	af00      	add	r7, sp, #0
 801323a:	4603      	mov	r3, r0
 801323c:	60b9      	str	r1, [r7, #8]
 801323e:	607a      	str	r2, [r7, #4]
 8013240:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8013242:	2300      	movs	r3, #0
 8013244:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 8013246:	89fb      	ldrh	r3, [r7, #14]
 8013248:	2b0f      	cmp	r3, #15
 801324a:	d802      	bhi.n	8013252 <VL53L1_nvm_decode_fmt_range_results_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 801324c:	f06f 0308 	mvn.w	r3, #8
 8013250:	e04d      	b.n	80132ee <VL53L1_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8013252:	68b9      	ldr	r1, [r7, #8]
 8013254:	2002      	movs	r0, #2
 8013256:	f7f9 f870 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 801325a:	4603      	mov	r3, r0
 801325c:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	789a      	ldrb	r2, [r3, #2]
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	78da      	ldrb	r2, [r3, #3]
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	3304      	adds	r3, #4
 8013276:	4619      	mov	r1, r3
 8013278:	2002      	movs	r0, #2
 801327a:	f7f9 f85e 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 801327e:	4603      	mov	r3, r0
 8013280:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	3306      	adds	r3, #6
 801328a:	4619      	mov	r1, r3
 801328c:	2002      	movs	r0, #2
 801328e:	f7f9 f854 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013292:	4603      	mov	r3, r0
 8013294:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	3308      	adds	r3, #8
 801329e:	4619      	mov	r1, r3
 80132a0:	2002      	movs	r0, #2
 80132a2:	f7f9 f84a 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 80132a6:	4603      	mov	r3, r0
 80132a8:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 80132ae:	68bb      	ldr	r3, [r7, #8]
 80132b0:	330a      	adds	r3, #10
 80132b2:	4619      	mov	r1, r3
 80132b4:	2002      	movs	r0, #2
 80132b6:	f7f9 f840 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 80132ba:	4603      	mov	r3, r0
 80132bc:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	330c      	adds	r3, #12
 80132c6:	4619      	mov	r1, r3
 80132c8:	2002      	movs	r0, #2
 80132ca:	f7f9 f836 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 80132ce:	4603      	mov	r3, r0
 80132d0:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	330e      	adds	r3, #14
 80132da:	4619      	mov	r1, r3
 80132dc:	2002      	movs	r0, #2
 80132de:	f7f9 f82c 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 80132e2:	4603      	mov	r3, r0
 80132e4:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	81da      	strh	r2, [r3, #14]

	return status;
 80132ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	3718      	adds	r7, #24
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}

080132f6 <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 80132f6:	b580      	push	{r7, lr}
 80132f8:	b086      	sub	sp, #24
 80132fa:	af00      	add	r7, sp, #0
 80132fc:	60f8      	str	r0, [r7, #12]
 80132fe:	607b      	str	r3, [r7, #4]
 8013300:	460b      	mov	r3, r1
 8013302:	72fb      	strb	r3, [r7, #11]
 8013304:	4613      	mov	r3, r2
 8013306:	72bb      	strb	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013308:	2300      	movs	r3, #0
 801330a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 801330c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d106      	bne.n	8013322 <VL53L1_read_nvm_raw_data+0x2c>
		status = VL53L1_nvm_enable(
 8013314:	2232      	movs	r2, #50	; 0x32
 8013316:	2104      	movs	r1, #4
 8013318:	68f8      	ldr	r0, [r7, #12]
 801331a:	f7ff fdd0 	bl	8012ebe <VL53L1_nvm_enable>
 801331e:	4603      	mov	r3, r0
 8013320:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 8013322:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d107      	bne.n	801333a <VL53L1_read_nvm_raw_data+0x44>
		status = VL53L1_nvm_read(
 801332a:	7aba      	ldrb	r2, [r7, #10]
 801332c:	7af9      	ldrb	r1, [r7, #11]
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	68f8      	ldr	r0, [r7, #12]
 8013332:	f7ff fe2a 	bl	8012f8a <VL53L1_nvm_read>
 8013336:	4603      	mov	r3, r0
 8013338:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53L1_ERROR_NONE)
 801333a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d104      	bne.n	801334c <VL53L1_read_nvm_raw_data+0x56>
		status = VL53L1_nvm_disable(Dev);
 8013342:	68f8      	ldr	r0, [r7, #12]
 8013344:	f7ff fe7f 	bl	8013046 <VL53L1_nvm_disable>
 8013348:	4603      	mov	r3, r0
 801334a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 801334c:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8013350:	4618      	mov	r0, r3
 8013352:	3718      	adds	r7, #24
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}

08013358 <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b084      	sub	sp, #16
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013362:	2300      	movs	r3, #0
 8013364:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8013366:	f107 0308 	add.w	r3, r7, #8
 801336a:	2201      	movs	r2, #1
 801336c:	212e      	movs	r1, #46	; 0x2e
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f7ff ffc1 	bl	80132f6 <VL53L1_read_nvm_raw_data>
 8013374:	4603      	mov	r3, r0
 8013376:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8013378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d108      	bne.n	8013392 <VL53L1_read_nvm_optical_centre+0x3a>
		status =
			VL53L1_nvm_decode_optical_centre(
 8013380:	f107 0308 	add.w	r3, r7, #8
 8013384:	683a      	ldr	r2, [r7, #0]
 8013386:	4619      	mov	r1, r3
 8013388:	2004      	movs	r0, #4
 801338a:	f7ff fe92 	bl	80130b2 <VL53L1_nvm_decode_optical_centre>
 801338e:	4603      	mov	r3, r0
 8013390:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 8013392:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013396:	4618      	mov	r0, r3
 8013398:	3710      	adds	r7, #16
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}

0801339e <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 801339e:	b580      	push	{r7, lr}
 80133a0:	b092      	sub	sp, #72	; 0x48
 80133a2:	af00      	add	r7, sp, #0
 80133a4:	6078      	str	r0, [r7, #4]
 80133a6:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80133a8:	2300      	movs	r3, #0
 80133aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 80133ae:	f107 030c 	add.w	r3, r7, #12
 80133b2:	220e      	movs	r2, #14
 80133b4:	2157      	movs	r1, #87	; 0x57
 80133b6:	6878      	ldr	r0, [r7, #4]
 80133b8:	f7ff ff9d 	bl	80132f6 <VL53L1_read_nvm_raw_data>
 80133bc:	4603      	mov	r3, r0
 80133be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80133c2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d109      	bne.n	80133de <VL53L1_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53L1_nvm_decode_cal_peak_rate_map(
 80133ca:	f107 030c 	add.w	r3, r7, #12
 80133ce:	683a      	ldr	r2, [r7, #0]
 80133d0:	4619      	mov	r1, r3
 80133d2:	2038      	movs	r0, #56	; 0x38
 80133d4:	f7ff fe9d 	bl	8013112 <VL53L1_nvm_decode_cal_peak_rate_map>
 80133d8:	4603      	mov	r3, r0
 80133da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 80133de:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80133e2:	4618      	mov	r0, r3
 80133e4:	3748      	adds	r7, #72	; 0x48
 80133e6:	46bd      	mov	sp, r7
 80133e8:	bd80      	pop	{r7, pc}

080133ea <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 80133ea:	b580      	push	{r7, lr}
 80133ec:	b086      	sub	sp, #24
 80133ee:	af00      	add	r7, sp, #0
 80133f0:	6078      	str	r0, [r7, #4]
 80133f2:	6039      	str	r1, [r7, #0]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80133f4:	2300      	movs	r3, #0
 80133f6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 80133f8:	f107 030c 	add.w	r3, r7, #12
 80133fc:	2202      	movs	r2, #2
 80133fe:	2165      	movs	r1, #101	; 0x65
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	f7ff ff78 	bl	80132f6 <VL53L1_read_nvm_raw_data>
 8013406:	4603      	mov	r3, r0
 8013408:	75fb      	strb	r3, [r7, #23]
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 801340a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d108      	bne.n	8013424 <VL53L1_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 8013412:	f107 030c 	add.w	r3, r7, #12
 8013416:	683a      	ldr	r2, [r7, #0]
 8013418:	4619      	mov	r1, r3
 801341a:	2008      	movs	r0, #8
 801341c:	f7ff fecf 	bl	80131be <VL53L1_nvm_decode_additional_offset_cal_data>
 8013420:	4603      	mov	r3, r0
 8013422:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8013424:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8013428:	4618      	mov	r0, r3
 801342a:	3718      	adds	r7, #24
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}

08013430 <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b08a      	sub	sp, #40	; 0x28
 8013434:	af00      	add	r7, sp, #0
 8013436:	60f8      	str	r0, [r7, #12]
 8013438:	460b      	mov	r3, r1
 801343a:	607a      	str	r2, [r7, #4]
 801343c:	817b      	strh	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 801343e:	2300      	movs	r3, #0
 8013440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 8013444:	897b      	ldrh	r3, [r7, #10]
 8013446:	089b      	lsrs	r3, r3, #2
 8013448:	b29b      	uxth	r3, r3
 801344a:	b2d9      	uxtb	r1, r3
 801344c:	f107 0314 	add.w	r3, r7, #20
 8013450:	2204      	movs	r2, #4
 8013452:	68f8      	ldr	r0, [r7, #12]
 8013454:	f7ff ff4f 	bl	80132f6 <VL53L1_read_nvm_raw_data>
 8013458:	4603      	mov	r3, r0
 801345a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 801345e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013462:	2b00      	cmp	r3, #0
 8013464:	d109      	bne.n	801347a <VL53L1_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53L1_nvm_decode_fmt_range_results_data(
 8013466:	f107 0314 	add.w	r3, r7, #20
 801346a:	687a      	ldr	r2, [r7, #4]
 801346c:	4619      	mov	r1, r3
 801346e:	2010      	movs	r0, #16
 8013470:	f7ff fee0 	bl	8013234 <VL53L1_nvm_decode_fmt_range_results_data>
 8013474:	4603      	mov	r3, r0
 8013476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 801347a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 801347e:	4618      	mov	r0, r3
 8013480:	3728      	adds	r7, #40	; 0x28
 8013482:	46bd      	mov	sp, r7
 8013484:	bd80      	pop	{r7, pc}

08013486 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8013486:	b580      	push	{r7, lr}
 8013488:	b086      	sub	sp, #24
 801348a:	af00      	add	r7, sp, #0
 801348c:	60f8      	str	r0, [r7, #12]
 801348e:	460b      	mov	r3, r1
 8013490:	607a      	str	r2, [r7, #4]
 8013492:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013494:	2300      	movs	r3, #0
 8013496:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8013498:	897b      	ldrh	r3, [r7, #10]
 801349a:	2b0a      	cmp	r3, #10
 801349c:	d802      	bhi.n	80134a4 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801349e:	f06f 0309 	mvn.w	r3, #9
 80134a2:	e047      	b.n	8013534 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134ac:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80134ba:	f002 020f 	and.w	r2, r2, #15
 80134be:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 80134c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 80134ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80134ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80134d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80134da:	f002 0203 	and.w	r2, r2, #3
 80134de:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80134e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 80134ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80134ee:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80134f0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	88d8      	ldrh	r0, [r3, #6]
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	3305      	adds	r3, #5
 80134fa:	461a      	mov	r2, r3
 80134fc:	2102      	movs	r1, #2
 80134fe:	f7f8 fef1 	bl	800c2e4 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8013506:	68fa      	ldr	r2, [r7, #12]
 8013508:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 801350a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8013510:	68fa      	ldr	r2, [r7, #12]
 8013512:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8013514:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 801351e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8013522:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8013524:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 801352a:	68fa      	ldr	r2, [r7, #12]
 801352c:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 801352e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8013530:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013534:	4618      	mov	r0, r3
 8013536:	3718      	adds	r7, #24
 8013538:	46bd      	mov	sp, r7
 801353a:	bd80      	pop	{r7, pc}

0801353c <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b086      	sub	sp, #24
 8013540:	af00      	add	r7, sp, #0
 8013542:	4603      	mov	r3, r0
 8013544:	60b9      	str	r1, [r7, #8]
 8013546:	607a      	str	r2, [r7, #4]
 8013548:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801354a:	2300      	movs	r3, #0
 801354c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 801354e:	89fb      	ldrh	r3, [r7, #14]
 8013550:	2b0a      	cmp	r3, #10
 8013552:	d802      	bhi.n	801355a <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013554:	f06f 0309 	mvn.w	r3, #9
 8013558:	e046      	b.n	80135e8 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	781b      	ldrb	r3, [r3, #0]
 801355e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013562:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8013568:	68bb      	ldr	r3, [r7, #8]
 801356a:	3301      	adds	r3, #1
 801356c:	781b      	ldrb	r3, [r3, #0]
 801356e:	f003 030f 	and.w	r3, r3, #15
 8013572:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8013578:	68bb      	ldr	r3, [r7, #8]
 801357a:	3302      	adds	r3, #2
 801357c:	781b      	ldrb	r3, [r3, #0]
 801357e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013582:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8013588:	68bb      	ldr	r3, [r7, #8]
 801358a:	3303      	adds	r3, #3
 801358c:	781b      	ldrb	r3, [r3, #0]
 801358e:	f003 0303 	and.w	r3, r3, #3
 8013592:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	3304      	adds	r3, #4
 801359c:	781b      	ldrb	r3, [r3, #0]
 801359e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135a2:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	3305      	adds	r3, #5
 80135ac:	4619      	mov	r1, r3
 80135ae:	2002      	movs	r0, #2
 80135b0:	f7f8 fec3 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 80135b4:	4603      	mov	r3, r0
 80135b6:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	79da      	ldrb	r2, [r3, #7]
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	7a1a      	ldrb	r2, [r3, #8]
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	3309      	adds	r3, #9
 80135d0:	781b      	ldrb	r3, [r3, #0]
 80135d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80135d6:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	7a9a      	ldrb	r2, [r3, #10]
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 80135e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80135e8:	4618      	mov	r0, r3
 80135ea:	3718      	adds	r7, #24
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bd80      	pop	{r7, pc}

080135f0 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b086      	sub	sp, #24
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80135fa:	2300      	movs	r3, #0
 80135fc:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80135fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d108      	bne.n	8013618 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8013606:	f107 020c 	add.w	r2, r7, #12
 801360a:	230b      	movs	r3, #11
 801360c:	2101      	movs	r1, #1
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	f002 f91e 	bl	8015850 <VL53L1_ReadMulti>
 8013614:	4603      	mov	r3, r0
 8013616:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8013618:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d108      	bne.n	8013632 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8013620:	f107 030c 	add.w	r3, r7, #12
 8013624:	683a      	ldr	r2, [r7, #0]
 8013626:	4619      	mov	r1, r3
 8013628:	200b      	movs	r0, #11
 801362a:	f7ff ff87 	bl	801353c <VL53L1_i2c_decode_static_nvm_managed>
 801362e:	4603      	mov	r3, r0
 8013630:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8013632:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013636:	4618      	mov	r0, r3
 8013638:	3718      	adds	r7, #24
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}

0801363e <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801363e:	b580      	push	{r7, lr}
 8013640:	b086      	sub	sp, #24
 8013642:	af00      	add	r7, sp, #0
 8013644:	60f8      	str	r0, [r7, #12]
 8013646:	460b      	mov	r3, r1
 8013648:	607a      	str	r2, [r7, #4]
 801364a:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801364c:	2300      	movs	r3, #0
 801364e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8013650:	897b      	ldrh	r3, [r7, #10]
 8013652:	2b16      	cmp	r3, #22
 8013654:	d802      	bhi.n	801365c <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013656:	f06f 0309 	mvn.w	r3, #9
 801365a:	e076      	b.n	801374a <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8013668:	68fa      	ldr	r2, [r7, #12]
 801366a:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801366c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8013672:	68fa      	ldr	r2, [r7, #12]
 8013674:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8013676:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 801367c:	68fa      	ldr	r2, [r7, #12]
 801367e:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8013680:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8013686:	68fa      	ldr	r2, [r7, #12]
 8013688:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 801368a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8013694:	f002 020f 	and.w	r2, r2, #15
 8013698:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 801369a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 80136a0:	68fa      	ldr	r2, [r7, #12]
 80136a2:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 80136a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80136ae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80136b2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80136b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 80136be:	f002 0203 	and.w	r2, r2, #3
 80136c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80136c4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	8958      	ldrh	r0, [r3, #10]
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	3309      	adds	r3, #9
 80136ce:	461a      	mov	r2, r3
 80136d0:	2102      	movs	r1, #2
 80136d2:	f7f8 fe07 	bl	800c2e4 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	330b      	adds	r3, #11
 80136e0:	461a      	mov	r2, r3
 80136e2:	2102      	movs	r1, #2
 80136e4:	f7f8 fe49 	bl	800c37a <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	330d      	adds	r3, #13
 80136f2:	461a      	mov	r2, r3
 80136f4:	2102      	movs	r1, #2
 80136f6:	f7f8 fe40 	bl	800c37a <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	8a18      	ldrh	r0, [r3, #16]
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	330f      	adds	r3, #15
 8013702:	461a      	mov	r2, r3
 8013704:	2102      	movs	r1, #2
 8013706:	f7f8 fded 	bl	800c2e4 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8013710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013714:	b218      	sxth	r0, r3
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	3311      	adds	r3, #17
 801371a:	461a      	mov	r2, r3
 801371c:	2102      	movs	r1, #2
 801371e:	f7f8 fe2c 	bl	800c37a <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	3313      	adds	r3, #19
 801372c:	461a      	mov	r2, r3
 801372e:	2102      	movs	r1, #2
 8013730:	f7f8 fe23 	bl	800c37a <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	3315      	adds	r3, #21
 801373e:	461a      	mov	r2, r3
 8013740:	2102      	movs	r1, #2
 8013742:	f7f8 fe1a 	bl	800c37a <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8013746:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801374a:	4618      	mov	r0, r3
 801374c:	3718      	adds	r7, #24
 801374e:	46bd      	mov	sp, r7
 8013750:	bd80      	pop	{r7, pc}

08013752 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8013752:	b580      	push	{r7, lr}
 8013754:	b086      	sub	sp, #24
 8013756:	af00      	add	r7, sp, #0
 8013758:	4603      	mov	r3, r0
 801375a:	60b9      	str	r1, [r7, #8]
 801375c:	607a      	str	r2, [r7, #4]
 801375e:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013760:	2300      	movs	r3, #0
 8013762:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8013764:	89fb      	ldrh	r3, [r7, #14]
 8013766:	2b16      	cmp	r3, #22
 8013768:	d802      	bhi.n	8013770 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801376a:	f06f 0309 	mvn.w	r3, #9
 801376e:	e079      	b.n	8013864 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8013770:	68bb      	ldr	r3, [r7, #8]
 8013772:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	785a      	ldrb	r2, [r3, #1]
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8013780:	68bb      	ldr	r3, [r7, #8]
 8013782:	789a      	ldrb	r2, [r3, #2]
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	78da      	ldrb	r2, [r3, #3]
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	791a      	ldrb	r2, [r3, #4]
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8013798:	68bb      	ldr	r3, [r7, #8]
 801379a:	3305      	adds	r3, #5
 801379c:	781b      	ldrb	r3, [r3, #0]
 801379e:	f003 030f 	and.w	r3, r3, #15
 80137a2:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	799a      	ldrb	r2, [r3, #6]
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	3307      	adds	r3, #7
 80137b4:	781b      	ldrb	r3, [r3, #0]
 80137b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80137ba:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	3308      	adds	r3, #8
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	f003 0303 	and.w	r3, r3, #3
 80137ca:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 80137d0:	68bb      	ldr	r3, [r7, #8]
 80137d2:	3309      	adds	r3, #9
 80137d4:	4619      	mov	r1, r3
 80137d6:	2002      	movs	r0, #2
 80137d8:	f7f8 fdaf 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 80137dc:	4603      	mov	r3, r0
 80137de:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 80137e4:	68bb      	ldr	r3, [r7, #8]
 80137e6:	330b      	adds	r3, #11
 80137e8:	4619      	mov	r1, r3
 80137ea:	2002      	movs	r0, #2
 80137ec:	f7f8 fdf1 	bl	800c3d2 <VL53L1_i2c_decode_int16_t>
 80137f0:	4603      	mov	r3, r0
 80137f2:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	330d      	adds	r3, #13
 80137fc:	4619      	mov	r1, r3
 80137fe:	2002      	movs	r0, #2
 8013800:	f7f8 fde7 	bl	800c3d2 <VL53L1_i2c_decode_int16_t>
 8013804:	4603      	mov	r3, r0
 8013806:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	330f      	adds	r3, #15
 8013810:	4619      	mov	r1, r3
 8013812:	2002      	movs	r0, #2
 8013814:	f7f8 fd91 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013818:	4603      	mov	r3, r0
 801381a:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	3311      	adds	r3, #17
 8013824:	4619      	mov	r1, r3
 8013826:	2002      	movs	r0, #2
 8013828:	f7f8 fdd3 	bl	800c3d2 <VL53L1_i2c_decode_int16_t>
 801382c:	4603      	mov	r3, r0
 801382e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013832:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	3313      	adds	r3, #19
 801383c:	4619      	mov	r1, r3
 801383e:	2002      	movs	r0, #2
 8013840:	f7f8 fdc7 	bl	800c3d2 <VL53L1_i2c_decode_int16_t>
 8013844:	4603      	mov	r3, r0
 8013846:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 801384c:	68bb      	ldr	r3, [r7, #8]
 801384e:	3315      	adds	r3, #21
 8013850:	4619      	mov	r1, r3
 8013852:	2002      	movs	r0, #2
 8013854:	f7f8 fdbd 	bl	800c3d2 <VL53L1_i2c_decode_int16_t>
 8013858:	4603      	mov	r3, r0
 801385a:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8013860:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013864:	4618      	mov	r0, r3
 8013866:	3718      	adds	r7, #24
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}

0801386c <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b088      	sub	sp, #32
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
 8013874:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013876:	2300      	movs	r3, #0
 8013878:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 801387a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d108      	bne.n	8013894 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8013882:	f107 0208 	add.w	r2, r7, #8
 8013886:	2317      	movs	r3, #23
 8013888:	210d      	movs	r1, #13
 801388a:	6878      	ldr	r0, [r7, #4]
 801388c:	f001 ffe0 	bl	8015850 <VL53L1_ReadMulti>
 8013890:	4603      	mov	r3, r0
 8013892:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8013894:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d108      	bne.n	80138ae <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 801389c:	f107 0308 	add.w	r3, r7, #8
 80138a0:	683a      	ldr	r2, [r7, #0]
 80138a2:	4619      	mov	r1, r3
 80138a4:	2017      	movs	r0, #23
 80138a6:	f7ff ff54 	bl	8013752 <VL53L1_i2c_decode_customer_nvm_managed>
 80138aa:	4603      	mov	r3, r0
 80138ac:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80138ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80138b2:	4618      	mov	r0, r3
 80138b4:	3720      	adds	r7, #32
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}

080138ba <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80138ba:	b580      	push	{r7, lr}
 80138bc:	b086      	sub	sp, #24
 80138be:	af00      	add	r7, sp, #0
 80138c0:	60f8      	str	r0, [r7, #12]
 80138c2:	460b      	mov	r3, r1
 80138c4:	607a      	str	r2, [r7, #4]
 80138c6:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80138c8:	2300      	movs	r3, #0
 80138ca:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 80138cc:	897b      	ldrh	r3, [r7, #10]
 80138ce:	2b1f      	cmp	r3, #31
 80138d0:	d802      	bhi.n	80138d8 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80138d2:	f06f 0309 	mvn.w	r3, #9
 80138d6:	e0cf      	b.n	8013a78 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	881b      	ldrh	r3, [r3, #0]
 80138dc:	687a      	ldr	r2, [r7, #4]
 80138de:	2102      	movs	r1, #2
 80138e0:	4618      	mov	r0, r3
 80138e2:	f7f8 fcff 	bl	800c2e4 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 80138ee:	f002 0201 	and.w	r2, r2, #1
 80138f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80138f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 80138fe:	f002 020f 	and.w	r2, r2, #15
 8013902:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8013904:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 801390e:	f002 020f 	and.w	r2, r2, #15
 8013912:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8013914:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 801391e:	f002 021f 	and.w	r2, r2, #31
 8013922:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8013924:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 801392e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013932:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8013934:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 801393e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013942:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8013944:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 801394e:	f002 0201 	and.w	r2, r2, #1
 8013952:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8013954:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 801395a:	68fa      	ldr	r2, [r7, #12]
 801395c:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 801395e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8013968:	f002 0201 	and.w	r2, r2, #1
 801396c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 801396e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8013978:	f002 0203 	and.w	r2, r2, #3
 801397c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 801397e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8013988:	f002 021f 	and.w	r2, r2, #31
 801398c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 801398e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8013998:	f002 0203 	and.w	r2, r2, #3
 801399c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 801399e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 80139a8:	f002 0203 	and.w	r2, r2, #3
 80139ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 80139ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 80139b8:	f002 0207 	and.w	r2, r2, #7
 80139bc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 80139be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 80139c8:	f002 021f 	and.w	r2, r2, #31
 80139cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 80139ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 80139d8:	f002 0201 	and.w	r2, r2, #1
 80139dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 80139de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 80139e4:	68fa      	ldr	r2, [r7, #12]
 80139e6:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80139e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 80139ee:	68fa      	ldr	r2, [r7, #12]
 80139f0:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80139f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 80139f8:	68fa      	ldr	r2, [r7, #12]
 80139fa:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80139fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8013a02:	68fa      	ldr	r2, [r7, #12]
 8013a04:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8013a06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8013a0c:	68fa      	ldr	r2, [r7, #12]
 8013a0e:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8013a10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8013a16:	68fa      	ldr	r2, [r7, #12]
 8013a18:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8013a1a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	8b18      	ldrh	r0, [r3, #24]
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	3318      	adds	r3, #24
 8013a24:	461a      	mov	r2, r3
 8013a26:	2102      	movs	r1, #2
 8013a28:	f7f8 fc5c 	bl	800c2e4 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8013a30:	68fa      	ldr	r2, [r7, #12]
 8013a32:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8013a34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8013a3a:	68fa      	ldr	r2, [r7, #12]
 8013a3c:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8013a3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8013a48:	f002 020f 	and.w	r2, r2, #15
 8013a4c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8013a4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8013a54:	68fa      	ldr	r2, [r7, #12]
 8013a56:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8013a58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8013a62:	f002 020f 	and.w	r2, r2, #15
 8013a66:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8013a68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8013a6e:	68fa      	ldr	r2, [r7, #12]
 8013a70:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8013a72:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8013a74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3718      	adds	r7, #24
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}

08013a80 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b086      	sub	sp, #24
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	60f8      	str	r0, [r7, #12]
 8013a88:	460b      	mov	r3, r1
 8013a8a:	607a      	str	r2, [r7, #4]
 8013a8c:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013a8e:	2300      	movs	r3, #0
 8013a90:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8013a92:	897b      	ldrh	r3, [r7, #10]
 8013a94:	2b15      	cmp	r3, #21
 8013a96:	d802      	bhi.n	8013a9e <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013a98:	f06f 0309 	mvn.w	r3, #9
 8013a9c:	e070      	b.n	8013b80 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8013aaa:	68fa      	ldr	r2, [r7, #12]
 8013aac:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8013aae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8013ab4:	68fa      	ldr	r2, [r7, #12]
 8013ab6:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8013ab8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8013ac2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013ac6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8013ac8:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8013ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013ad2:	b298      	uxth	r0, r3
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	3304      	adds	r3, #4
 8013ad8:	461a      	mov	r2, r3
 8013ada:	2102      	movs	r1, #2
 8013adc:	f7f8 fc02 	bl	800c2e4 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8013ae8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013aec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8013aee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8013af4:	68fa      	ldr	r2, [r7, #12]
 8013af6:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8013af8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8013afe:	68fa      	ldr	r2, [r7, #12]
 8013b00:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8013b02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8013b0c:	f002 0201 	and.w	r2, r2, #1
 8013b10:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8013b12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8013b1c:	f002 0207 	and.w	r2, r2, #7
 8013b20:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8013b22:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	8998      	ldrh	r0, [r3, #12]
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	330c      	adds	r3, #12
 8013b2c:	461a      	mov	r2, r3
 8013b2e:	2102      	movs	r1, #2
 8013b30:	f7f8 fbd8 	bl	800c2e4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	89d8      	ldrh	r0, [r3, #14]
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	330e      	adds	r3, #14
 8013b3c:	461a      	mov	r2, r3
 8013b3e:	2102      	movs	r1, #2
 8013b40:	f7f8 fbd0 	bl	800c2e4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	8a18      	ldrh	r0, [r3, #16]
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	3310      	adds	r3, #16
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	2102      	movs	r1, #2
 8013b50:	f7f8 fbc8 	bl	800c2e4 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8013b58:	68fa      	ldr	r2, [r7, #12]
 8013b5a:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8013b5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8013b62:	68fa      	ldr	r2, [r7, #12]
 8013b64:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8013b66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8013b6c:	68fa      	ldr	r2, [r7, #12]
 8013b6e:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8013b70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8013b76:	68fa      	ldr	r2, [r7, #12]
 8013b78:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8013b7a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8013b7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	3718      	adds	r7, #24
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}

08013b88 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b086      	sub	sp, #24
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	60f8      	str	r0, [r7, #12]
 8013b90:	460b      	mov	r3, r1
 8013b92:	607a      	str	r2, [r7, #4]
 8013b94:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013b96:	2300      	movs	r3, #0
 8013b98:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 8013b9a:	897b      	ldrh	r3, [r7, #10]
 8013b9c:	2b16      	cmp	r3, #22
 8013b9e:	d802      	bhi.n	8013ba6 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013ba0:	f06f 0309 	mvn.w	r3, #9
 8013ba4:	e06e      	b.n	8013c84 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	781b      	ldrb	r3, [r3, #0]
 8013baa:	f003 030f 	and.w	r3, r3, #15
 8013bae:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8013bb8:	68fa      	ldr	r2, [r7, #12]
 8013bba:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8013bbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8013bc6:	f002 020f 	and.w	r2, r2, #15
 8013bca:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8013bcc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8013bd2:	68fa      	ldr	r2, [r7, #12]
 8013bd4:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8013bd6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8013be0:	f002 020f 	and.w	r2, r2, #15
 8013be4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8013be6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8013bec:	68fa      	ldr	r2, [r7, #12]
 8013bee:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8013bf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8013bfa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8013bfe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8013c00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8013c0a:	f002 020f 	and.w	r2, r2, #15
 8013c0e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8013c10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8013c16:	68fa      	ldr	r2, [r7, #12]
 8013c18:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8013c1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8013c24:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8013c28:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8013c2a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	8958      	ldrh	r0, [r3, #10]
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	330a      	adds	r3, #10
 8013c34:	461a      	mov	r2, r3
 8013c36:	2102      	movs	r1, #2
 8013c38:	f7f8 fb54 	bl	800c2e4 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	8998      	ldrh	r0, [r3, #12]
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	330c      	adds	r3, #12
 8013c44:	461a      	mov	r2, r3
 8013c46:	2102      	movs	r1, #2
 8013c48:	f7f8 fb4c 	bl	800c2e4 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8013c50:	68fa      	ldr	r2, [r7, #12]
 8013c52:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8013c54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8013c5a:	68fa      	ldr	r2, [r7, #12]
 8013c5c:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8013c5e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	6918      	ldr	r0, [r3, #16]
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	3312      	adds	r3, #18
 8013c68:	461a      	mov	r2, r3
 8013c6a:	2104      	movs	r1, #4
 8013c6c:	f7f8 fbda 	bl	800c424 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8013c78:	f002 0201 	and.w	r2, r2, #1
 8013c7c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8013c7e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8013c80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013c84:	4618      	mov	r0, r3
 8013c86:	3718      	adds	r7, #24
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}

08013c8c <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b086      	sub	sp, #24
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	60f8      	str	r0, [r7, #12]
 8013c94:	460b      	mov	r3, r1
 8013c96:	607a      	str	r2, [r7, #4]
 8013c98:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8013c9e:	897b      	ldrh	r3, [r7, #10]
 8013ca0:	2b11      	cmp	r3, #17
 8013ca2:	d802      	bhi.n	8013caa <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013ca4:	f06f 0309 	mvn.w	r3, #9
 8013ca8:	e071      	b.n	8013d8e <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	781b      	ldrb	r3, [r3, #0]
 8013cae:	f003 0303 	and.w	r3, r3, #3
 8013cb2:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	8858      	ldrh	r0, [r3, #2]
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	461a      	mov	r2, r3
 8013cc2:	2102      	movs	r1, #2
 8013cc4:	f7f8 fb0e 	bl	800c2e4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	8898      	ldrh	r0, [r3, #4]
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	3303      	adds	r3, #3
 8013cd0:	461a      	mov	r2, r3
 8013cd2:	2102      	movs	r1, #2
 8013cd4:	f7f8 fb06 	bl	800c2e4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8013ce0:	f002 0201 	and.w	r2, r2, #1
 8013ce4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8013ce6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8013cf0:	f002 0207 	and.w	r2, r2, #7
 8013cf4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8013cf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8013cfc:	68fa      	ldr	r2, [r7, #12]
 8013cfe:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8013d00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8013d06:	68fa      	ldr	r2, [r7, #12]
 8013d08:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8013d0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8013d14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013d18:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8013d1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8013d24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013d28:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8013d2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8013d34:	f002 0203 	and.w	r2, r2, #3
 8013d38:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8013d3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8013d44:	f002 0203 	and.w	r2, r2, #3
 8013d48:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8013d4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8013d54:	f002 020f 	and.w	r2, r2, #15
 8013d58:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8013d5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8013d60:	68fa      	ldr	r2, [r7, #12]
 8013d62:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8013d64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8013d6a:	68fa      	ldr	r2, [r7, #12]
 8013d6c:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8013d6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8013d74:	68fa      	ldr	r2, [r7, #12]
 8013d76:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8013d78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8013d82:	f002 0203 	and.w	r2, r2, #3
 8013d86:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8013d88:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8013d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	3718      	adds	r7, #24
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bd80      	pop	{r7, pc}

08013d96 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8013d96:	b480      	push	{r7}
 8013d98:	b087      	sub	sp, #28
 8013d9a:	af00      	add	r7, sp, #0
 8013d9c:	60f8      	str	r0, [r7, #12]
 8013d9e:	460b      	mov	r3, r1
 8013da0:	607a      	str	r2, [r7, #4]
 8013da2:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013da4:	2300      	movs	r3, #0
 8013da6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8013da8:	897b      	ldrh	r3, [r7, #10]
 8013daa:	2b04      	cmp	r3, #4
 8013dac:	d802      	bhi.n	8013db4 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013dae:	f06f 0309 	mvn.w	r3, #9
 8013db2:	e025      	b.n	8013e00 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	781b      	ldrb	r3, [r3, #0]
 8013db8:	f003 0301 	and.w	r3, r3, #1
 8013dbc:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8013dca:	f002 0201 	and.w	r2, r2, #1
 8013dce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8013dd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8013dda:	f002 0201 	and.w	r2, r2, #1
 8013dde:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8013de0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8013dea:	f002 0203 	and.w	r2, r2, #3
 8013dee:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8013df0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8013df6:	68fa      	ldr	r2, [r7, #12]
 8013df8:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8013dfa:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8013dfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013e00:	4618      	mov	r0, r3
 8013e02:	371c      	adds	r7, #28
 8013e04:	46bd      	mov	sp, r7
 8013e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e0a:	4770      	bx	lr

08013e0c <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b084      	sub	sp, #16
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
 8013e14:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013e16:	2300      	movs	r3, #0
 8013e18:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8013e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d108      	bne.n	8013e34 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 8013e22:	f107 0308 	add.w	r3, r7, #8
 8013e26:	461a      	mov	r2, r3
 8013e28:	2105      	movs	r1, #5
 8013e2a:	6838      	ldr	r0, [r7, #0]
 8013e2c:	f7ff ffb3 	bl	8013d96 <VL53L1_i2c_encode_system_control>
 8013e30:	4603      	mov	r3, r0
 8013e32:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8013e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d108      	bne.n	8013e4e <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8013e3c:	f107 0208 	add.w	r2, r7, #8
 8013e40:	2305      	movs	r3, #5
 8013e42:	2183      	movs	r1, #131	; 0x83
 8013e44:	6878      	ldr	r0, [r7, #4]
 8013e46:	f001 fccd 	bl	80157e4 <VL53L1_WriteMulti>
 8013e4a:	4603      	mov	r3, r0
 8013e4c:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8013e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013e52:	4618      	mov	r0, r3
 8013e54:	3710      	adds	r7, #16
 8013e56:	46bd      	mov	sp, r7
 8013e58:	bd80      	pop	{r7, pc}

08013e5a <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8013e5a:	b580      	push	{r7, lr}
 8013e5c:	b086      	sub	sp, #24
 8013e5e:	af00      	add	r7, sp, #0
 8013e60:	4603      	mov	r3, r0
 8013e62:	60b9      	str	r1, [r7, #8]
 8013e64:	607a      	str	r2, [r7, #4]
 8013e66:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013e68:	2300      	movs	r3, #0
 8013e6a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8013e6c:	89fb      	ldrh	r3, [r7, #14]
 8013e6e:	2b2b      	cmp	r3, #43	; 0x2b
 8013e70:	d802      	bhi.n	8013e78 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013e72:	f06f 0309 	mvn.w	r3, #9
 8013e76:	e0e2      	b.n	801403e <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8013e78:	68bb      	ldr	r3, [r7, #8]
 8013e7a:	781b      	ldrb	r3, [r3, #0]
 8013e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013e80:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8013e86:	68bb      	ldr	r3, [r7, #8]
 8013e88:	785a      	ldrb	r2, [r3, #1]
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	3302      	adds	r3, #2
 8013e92:	781b      	ldrb	r3, [r3, #0]
 8013e94:	f003 030f 	and.w	r3, r3, #15
 8013e98:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8013e9e:	68bb      	ldr	r3, [r7, #8]
 8013ea0:	78da      	ldrb	r2, [r3, #3]
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8013ea6:	68bb      	ldr	r3, [r7, #8]
 8013ea8:	3304      	adds	r3, #4
 8013eaa:	4619      	mov	r1, r3
 8013eac:	2002      	movs	r0, #2
 8013eae:	f7f8 fa44 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8013eba:	68bb      	ldr	r3, [r7, #8]
 8013ebc:	3306      	adds	r3, #6
 8013ebe:	4619      	mov	r1, r3
 8013ec0:	2002      	movs	r0, #2
 8013ec2:	f7f8 fa3a 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	3308      	adds	r3, #8
 8013ed2:	4619      	mov	r1, r3
 8013ed4:	2002      	movs	r0, #2
 8013ed6:	f7f8 fa30 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013eda:	4603      	mov	r3, r0
 8013edc:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	330a      	adds	r3, #10
 8013ee6:	4619      	mov	r1, r3
 8013ee8:	2002      	movs	r0, #2
 8013eea:	f7f8 fa26 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	330c      	adds	r3, #12
 8013efa:	4619      	mov	r1, r3
 8013efc:	2002      	movs	r0, #2
 8013efe:	f7f8 fa1c 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013f02:	4603      	mov	r3, r0
 8013f04:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	330e      	adds	r3, #14
 8013f0e:	4619      	mov	r1, r3
 8013f10:	2002      	movs	r0, #2
 8013f12:	f7f8 fa12 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013f16:	4603      	mov	r3, r0
 8013f18:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	3310      	adds	r3, #16
 8013f22:	4619      	mov	r1, r3
 8013f24:	2002      	movs	r0, #2
 8013f26:	f7f8 fa08 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	3312      	adds	r3, #18
 8013f36:	4619      	mov	r1, r3
 8013f38:	2002      	movs	r0, #2
 8013f3a:	f7f8 f9fe 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8013f46:	68bb      	ldr	r3, [r7, #8]
 8013f48:	3314      	adds	r3, #20
 8013f4a:	4619      	mov	r1, r3
 8013f4c:	2002      	movs	r0, #2
 8013f4e:	f7f8 f9f4 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013f52:	4603      	mov	r3, r0
 8013f54:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8013f5a:	68bb      	ldr	r3, [r7, #8]
 8013f5c:	3316      	adds	r3, #22
 8013f5e:	4619      	mov	r1, r3
 8013f60:	2002      	movs	r0, #2
 8013f62:	f7f8 f9ea 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013f66:	4603      	mov	r3, r0
 8013f68:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	3318      	adds	r3, #24
 8013f72:	4619      	mov	r1, r3
 8013f74:	2002      	movs	r0, #2
 8013f76:	f7f8 f9e0 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8013f82:	68bb      	ldr	r3, [r7, #8]
 8013f84:	331a      	adds	r3, #26
 8013f86:	4619      	mov	r1, r3
 8013f88:	2002      	movs	r0, #2
 8013f8a:	f7f8 f9d6 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	331c      	adds	r3, #28
 8013f9a:	4619      	mov	r1, r3
 8013f9c:	2002      	movs	r0, #2
 8013f9e:	f7f8 f9cc 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	331e      	adds	r3, #30
 8013fae:	4619      	mov	r1, r3
 8013fb0:	2002      	movs	r0, #2
 8013fb2:	f7f8 f9c2 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	3320      	adds	r3, #32
 8013fc2:	4619      	mov	r1, r3
 8013fc4:	2002      	movs	r0, #2
 8013fc6:	f7f8 f9b8 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	3322      	adds	r3, #34	; 0x22
 8013fd6:	4619      	mov	r1, r3
 8013fd8:	2002      	movs	r0, #2
 8013fda:	f7f8 f9ae 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8013fe6:	68bb      	ldr	r3, [r7, #8]
 8013fe8:	3324      	adds	r3, #36	; 0x24
 8013fea:	4619      	mov	r1, r3
 8013fec:	2002      	movs	r0, #2
 8013fee:	f7f8 f9a4 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	3326      	adds	r3, #38	; 0x26
 8013ffe:	4619      	mov	r1, r3
 8014000:	2002      	movs	r0, #2
 8014002:	f7f8 f99a 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8014006:	4603      	mov	r3, r0
 8014008:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	3328      	adds	r3, #40	; 0x28
 8014012:	4619      	mov	r1, r3
 8014014:	2002      	movs	r0, #2
 8014016:	f7f8 f990 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 801401a:	4603      	mov	r3, r0
 801401c:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 801402e:	68bb      	ldr	r3, [r7, #8]
 8014030:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 801403a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801403e:	4618      	mov	r0, r3
 8014040:	3718      	adds	r7, #24
 8014042:	46bd      	mov	sp, r7
 8014044:	bd80      	pop	{r7, pc}

08014046 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8014046:	b580      	push	{r7, lr}
 8014048:	b086      	sub	sp, #24
 801404a:	af00      	add	r7, sp, #0
 801404c:	4603      	mov	r3, r0
 801404e:	60b9      	str	r1, [r7, #8]
 8014050:	607a      	str	r2, [r7, #4]
 8014052:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014054:	2300      	movs	r3, #0
 8014056:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 8014058:	89fb      	ldrh	r3, [r7, #14]
 801405a:	2b20      	cmp	r3, #32
 801405c:	d802      	bhi.n	8014064 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801405e:	f06f 0309 	mvn.w	r3, #9
 8014062:	e04d      	b.n	8014100 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8014064:	68b9      	ldr	r1, [r7, #8]
 8014066:	2004      	movs	r0, #4
 8014068:	f7f8 fa06 	bl	800c478 <VL53L1_i2c_decode_uint32_t>
 801406c:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8014072:	68bb      	ldr	r3, [r7, #8]
 8014074:	3304      	adds	r3, #4
 8014076:	4619      	mov	r1, r3
 8014078:	2004      	movs	r0, #4
 801407a:	f7f8 f9fd 	bl	800c478 <VL53L1_i2c_decode_uint32_t>
 801407e:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8014084:	68bb      	ldr	r3, [r7, #8]
 8014086:	3308      	adds	r3, #8
 8014088:	4619      	mov	r1, r3
 801408a:	2004      	movs	r0, #4
 801408c:	f7f8 fa11 	bl	800c4b2 <VL53L1_i2c_decode_int32_t>
 8014090:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8014096:	68bb      	ldr	r3, [r7, #8]
 8014098:	330c      	adds	r3, #12
 801409a:	4619      	mov	r1, r3
 801409c:	2004      	movs	r0, #4
 801409e:	f7f8 f9eb 	bl	800c478 <VL53L1_i2c_decode_uint32_t>
 80140a2:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	3310      	adds	r3, #16
 80140ac:	4619      	mov	r1, r3
 80140ae:	2004      	movs	r0, #4
 80140b0:	f7f8 f9e2 	bl	800c478 <VL53L1_i2c_decode_uint32_t>
 80140b4:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	3314      	adds	r3, #20
 80140be:	4619      	mov	r1, r3
 80140c0:	2004      	movs	r0, #4
 80140c2:	f7f8 f9d9 	bl	800c478 <VL53L1_i2c_decode_uint32_t>
 80140c6:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	3318      	adds	r3, #24
 80140d0:	4619      	mov	r1, r3
 80140d2:	2004      	movs	r0, #4
 80140d4:	f7f8 f9ed 	bl	800c4b2 <VL53L1_i2c_decode_int32_t>
 80140d8:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	331c      	adds	r3, #28
 80140e2:	4619      	mov	r1, r3
 80140e4:	2004      	movs	r0, #4
 80140e6:	f7f8 f9c7 	bl	800c478 <VL53L1_i2c_decode_uint32_t>
 80140ea:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 80140fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014100:	4618      	mov	r0, r3
 8014102:	3718      	adds	r7, #24
 8014104:	46bd      	mov	sp, r7
 8014106:	bd80      	pop	{r7, pc}

08014108 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b086      	sub	sp, #24
 801410c:	af00      	add	r7, sp, #0
 801410e:	4603      	mov	r3, r0
 8014110:	60b9      	str	r1, [r7, #8]
 8014112:	607a      	str	r2, [r7, #4]
 8014114:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014116:	2300      	movs	r3, #0
 8014118:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 801411a:	89fb      	ldrh	r3, [r7, #14]
 801411c:	2b37      	cmp	r3, #55	; 0x37
 801411e:	d802      	bhi.n	8014126 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014120:	f06f 0309 	mvn.w	r3, #9
 8014124:	e15e      	b.n	80143e4 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8014126:	68b9      	ldr	r1, [r7, #8]
 8014128:	2002      	movs	r0, #2
 801412a:	f7f8 f906 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 801412e:	4603      	mov	r3, r0
 8014130:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	3302      	adds	r3, #2
 801413a:	781b      	ldrb	r3, [r3, #0]
 801413c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014140:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8014146:	68bb      	ldr	r3, [r7, #8]
 8014148:	3303      	adds	r3, #3
 801414a:	781b      	ldrb	r3, [r3, #0]
 801414c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014150:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8014156:	68bb      	ldr	r3, [r7, #8]
 8014158:	3304      	adds	r3, #4
 801415a:	781b      	ldrb	r3, [r3, #0]
 801415c:	f003 0303 	and.w	r3, r3, #3
 8014160:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	3305      	adds	r3, #5
 801416a:	781b      	ldrb	r3, [r3, #0]
 801416c:	f003 0301 	and.w	r3, r3, #1
 8014170:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	3306      	adds	r3, #6
 801417a:	781b      	ldrb	r3, [r3, #0]
 801417c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014180:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	3307      	adds	r3, #7
 801418a:	781b      	ldrb	r3, [r3, #0]
 801418c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014190:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8014196:	68bb      	ldr	r3, [r7, #8]
 8014198:	3308      	adds	r3, #8
 801419a:	4619      	mov	r1, r3
 801419c:	2002      	movs	r0, #2
 801419e:	f7f8 f8cc 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 80141a2:	4603      	mov	r3, r0
 80141a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80141a8:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 80141ae:	68bb      	ldr	r3, [r7, #8]
 80141b0:	330a      	adds	r3, #10
 80141b2:	781b      	ldrb	r3, [r3, #0]
 80141b4:	f003 0303 	and.w	r3, r3, #3
 80141b8:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 80141be:	68bb      	ldr	r3, [r7, #8]
 80141c0:	330b      	adds	r3, #11
 80141c2:	781b      	ldrb	r3, [r3, #0]
 80141c4:	f003 0303 	and.w	r3, r3, #3
 80141c8:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	330c      	adds	r3, #12
 80141d2:	781b      	ldrb	r3, [r3, #0]
 80141d4:	f003 030f 	and.w	r3, r3, #15
 80141d8:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	330d      	adds	r3, #13
 80141e2:	781b      	ldrb	r3, [r3, #0]
 80141e4:	f003 0307 	and.w	r3, r3, #7
 80141e8:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	330e      	adds	r3, #14
 80141f2:	781b      	ldrb	r3, [r3, #0]
 80141f4:	f003 0301 	and.w	r3, r3, #1
 80141f8:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	330f      	adds	r3, #15
 8014202:	781b      	ldrb	r3, [r3, #0]
 8014204:	f003 0303 	and.w	r3, r3, #3
 8014208:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	7c1a      	ldrb	r2, [r3, #16]
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	7c5a      	ldrb	r2, [r3, #17]
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 801421e:	68bb      	ldr	r3, [r7, #8]
 8014220:	3312      	adds	r3, #18
 8014222:	4619      	mov	r1, r3
 8014224:	2002      	movs	r0, #2
 8014226:	f7f8 f888 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 801422a:	4603      	mov	r3, r0
 801422c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014230:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8014236:	68bb      	ldr	r3, [r7, #8]
 8014238:	3316      	adds	r3, #22
 801423a:	4619      	mov	r1, r3
 801423c:	2002      	movs	r0, #2
 801423e:	f7f8 f87c 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8014242:	4603      	mov	r3, r0
 8014244:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	3318      	adds	r3, #24
 801424e:	4619      	mov	r1, r3
 8014250:	2002      	movs	r0, #2
 8014252:	f7f8 f872 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 8014256:	4603      	mov	r3, r0
 8014258:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	331a      	adds	r3, #26
 8014262:	781b      	ldrb	r3, [r3, #0]
 8014264:	f003 0301 	and.w	r3, r3, #1
 8014268:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	331b      	adds	r3, #27
 8014272:	781b      	ldrb	r3, [r3, #0]
 8014274:	f003 0307 	and.w	r3, r3, #7
 8014278:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 801427e:	68bb      	ldr	r3, [r7, #8]
 8014280:	7f1a      	ldrb	r2, [r3, #28]
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8014286:	68bb      	ldr	r3, [r7, #8]
 8014288:	7f5a      	ldrb	r2, [r3, #29]
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 801428e:	68bb      	ldr	r3, [r7, #8]
 8014290:	331e      	adds	r3, #30
 8014292:	781b      	ldrb	r3, [r3, #0]
 8014294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014298:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 801429e:	68bb      	ldr	r3, [r7, #8]
 80142a0:	331f      	adds	r3, #31
 80142a2:	781b      	ldrb	r3, [r3, #0]
 80142a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80142a8:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	3320      	adds	r3, #32
 80142b2:	781b      	ldrb	r3, [r3, #0]
 80142b4:	f003 0303 	and.w	r3, r3, #3
 80142b8:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 80142be:	68bb      	ldr	r3, [r7, #8]
 80142c0:	3321      	adds	r3, #33	; 0x21
 80142c2:	781b      	ldrb	r3, [r3, #0]
 80142c4:	f003 030f 	and.w	r3, r3, #15
 80142c8:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 80142da:	68bb      	ldr	r3, [r7, #8]
 80142dc:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 80142e6:	68bb      	ldr	r3, [r7, #8]
 80142e8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 80142f2:	68bb      	ldr	r3, [r7, #8]
 80142f4:	3325      	adds	r3, #37	; 0x25
 80142f6:	781b      	ldrb	r3, [r3, #0]
 80142f8:	f003 0301 	and.w	r3, r3, #1
 80142fc:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	3326      	adds	r3, #38	; 0x26
 8014308:	781b      	ldrb	r3, [r3, #0]
 801430a:	f003 0303 	and.w	r3, r3, #3
 801430e:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8014316:	68bb      	ldr	r3, [r7, #8]
 8014318:	3327      	adds	r3, #39	; 0x27
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	f003 031f 	and.w	r3, r3, #31
 8014320:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8014328:	68bb      	ldr	r3, [r7, #8]
 801432a:	3328      	adds	r3, #40	; 0x28
 801432c:	781b      	ldrb	r3, [r3, #0]
 801432e:	f003 031f 	and.w	r3, r3, #31
 8014332:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	3329      	adds	r3, #41	; 0x29
 801433e:	781b      	ldrb	r3, [r3, #0]
 8014340:	f003 031f 	and.w	r3, r3, #31
 8014344:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	332a      	adds	r3, #42	; 0x2a
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	f003 0301 	and.w	r3, r3, #1
 8014356:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	332b      	adds	r3, #43	; 0x2b
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	f003 0301 	and.w	r3, r3, #1
 8014368:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8014370:	68bb      	ldr	r3, [r7, #8]
 8014372:	332c      	adds	r3, #44	; 0x2c
 8014374:	781b      	ldrb	r3, [r3, #0]
 8014376:	f003 0303 	and.w	r3, r3, #3
 801437a:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	332d      	adds	r3, #45	; 0x2d
 8014386:	781b      	ldrb	r3, [r3, #0]
 8014388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801438c:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8014394:	68bb      	ldr	r3, [r7, #8]
 8014396:	332e      	adds	r3, #46	; 0x2e
 8014398:	4619      	mov	r1, r3
 801439a:	2004      	movs	r0, #4
 801439c:	f7f8 f86c 	bl	800c478 <VL53L1_i2c_decode_uint32_t>
 80143a0:	4603      	mov	r3, r0
 80143a2:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 80143aa:	68bb      	ldr	r3, [r7, #8]
 80143ac:	3332      	adds	r3, #50	; 0x32
 80143ae:	4619      	mov	r1, r3
 80143b0:	2004      	movs	r0, #4
 80143b2:	f7f8 f861 	bl	800c478 <VL53L1_i2c_decode_uint32_t>
 80143b6:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 80143bc:	68bb      	ldr	r3, [r7, #8]
 80143be:	3336      	adds	r3, #54	; 0x36
 80143c0:	781b      	ldrb	r3, [r3, #0]
 80143c2:	f003 0301 	and.w	r3, r3, #1
 80143c6:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 80143ce:	68bb      	ldr	r3, [r7, #8]
 80143d0:	3337      	adds	r3, #55	; 0x37
 80143d2:	781b      	ldrb	r3, [r3, #0]
 80143d4:	f003 0301 	and.w	r3, r3, #1
 80143d8:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 80143e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3718      	adds	r7, #24
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}

080143ec <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b086      	sub	sp, #24
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	4603      	mov	r3, r0
 80143f4:	60b9      	str	r1, [r7, #8]
 80143f6:	607a      	str	r2, [r7, #4]
 80143f8:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80143fa:	2300      	movs	r3, #0
 80143fc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 80143fe:	89fb      	ldrh	r3, [r7, #14]
 8014400:	2b30      	cmp	r3, #48	; 0x30
 8014402:	d802      	bhi.n	801440a <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014404:	f06f 0309 	mvn.w	r3, #9
 8014408:	e112      	b.n	8014630 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 801440a:	68bb      	ldr	r3, [r7, #8]
 801440c:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	785a      	ldrb	r2, [r3, #1]
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 801441a:	68bb      	ldr	r3, [r7, #8]
 801441c:	789a      	ldrb	r2, [r3, #2]
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8014422:	68bb      	ldr	r3, [r7, #8]
 8014424:	3303      	adds	r3, #3
 8014426:	4619      	mov	r1, r3
 8014428:	2002      	movs	r0, #2
 801442a:	f7f7 ff86 	bl	800c33a <VL53L1_i2c_decode_uint16_t>
 801442e:	4603      	mov	r3, r0
 8014430:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8014436:	68bb      	ldr	r3, [r7, #8]
 8014438:	3305      	adds	r3, #5
 801443a:	781b      	ldrb	r3, [r3, #0]
 801443c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014440:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	3306      	adds	r3, #6
 801444a:	781b      	ldrb	r3, [r3, #0]
 801444c:	f003 0307 	and.w	r3, r3, #7
 8014450:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8014456:	68bb      	ldr	r3, [r7, #8]
 8014458:	3307      	adds	r3, #7
 801445a:	781b      	ldrb	r3, [r3, #0]
 801445c:	f003 0307 	and.w	r3, r3, #7
 8014460:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8014466:	68bb      	ldr	r3, [r7, #8]
 8014468:	3308      	adds	r3, #8
 801446a:	781b      	ldrb	r3, [r3, #0]
 801446c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014470:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8014476:	68bb      	ldr	r3, [r7, #8]
 8014478:	3309      	adds	r3, #9
 801447a:	781b      	ldrb	r3, [r3, #0]
 801447c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014480:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8014486:	68bb      	ldr	r3, [r7, #8]
 8014488:	330a      	adds	r3, #10
 801448a:	781b      	ldrb	r3, [r3, #0]
 801448c:	f003 0301 	and.w	r3, r3, #1
 8014490:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	330b      	adds	r3, #11
 801449a:	781b      	ldrb	r3, [r3, #0]
 801449c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144a0:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 80144a6:	68bb      	ldr	r3, [r7, #8]
 80144a8:	330c      	adds	r3, #12
 80144aa:	781b      	ldrb	r3, [r3, #0]
 80144ac:	f003 0301 	and.w	r3, r3, #1
 80144b0:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 80144b6:	68bb      	ldr	r3, [r7, #8]
 80144b8:	330d      	adds	r3, #13
 80144ba:	781b      	ldrb	r3, [r3, #0]
 80144bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80144c0:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 80144c6:	68bb      	ldr	r3, [r7, #8]
 80144c8:	330e      	adds	r3, #14
 80144ca:	781b      	ldrb	r3, [r3, #0]
 80144cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80144d0:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	7bda      	ldrb	r2, [r3, #15]
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	7c1a      	ldrb	r2, [r3, #16]
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	7c5a      	ldrb	r2, [r3, #17]
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80144ee:	68bb      	ldr	r3, [r7, #8]
 80144f0:	7c9a      	ldrb	r2, [r3, #18]
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	7cda      	ldrb	r2, [r3, #19]
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80144fe:	68bb      	ldr	r3, [r7, #8]
 8014500:	7d1a      	ldrb	r2, [r3, #20]
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8014506:	68bb      	ldr	r3, [r7, #8]
 8014508:	7d5a      	ldrb	r2, [r3, #21]
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	7d9a      	ldrb	r2, [r3, #22]
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	7dda      	ldrb	r2, [r3, #23]
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	7e1a      	ldrb	r2, [r3, #24]
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8014526:	68bb      	ldr	r3, [r7, #8]
 8014528:	7e5a      	ldrb	r2, [r3, #25]
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	7e9a      	ldrb	r2, [r3, #26]
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8014536:	68bb      	ldr	r3, [r7, #8]
 8014538:	7eda      	ldrb	r2, [r3, #27]
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	7f1a      	ldrb	r2, [r3, #28]
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	7f5a      	ldrb	r2, [r3, #29]
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 801454e:	68bb      	ldr	r3, [r7, #8]
 8014550:	7f9a      	ldrb	r2, [r3, #30]
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8014556:	68bb      	ldr	r3, [r7, #8]
 8014558:	7fda      	ldrb	r2, [r3, #31]
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	f893 2020 	ldrb.w	r2, [r3, #32]
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8014578:	68bb      	ldr	r3, [r7, #8]
 801457a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8014584:	68bb      	ldr	r3, [r7, #8]
 8014586:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8014590:	68bb      	ldr	r3, [r7, #8]
 8014592:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 801459c:	68bb      	ldr	r3, [r7, #8]
 801459e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 80145a8:	68bb      	ldr	r3, [r7, #8]
 80145aa:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 80145b4:	68bb      	ldr	r3, [r7, #8]
 80145b6:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 80145cc:	68bb      	ldr	r3, [r7, #8]
 80145ce:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 80145d8:	68bb      	ldr	r3, [r7, #8]
 80145da:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 80145e4:	68bb      	ldr	r3, [r7, #8]
 80145e6:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 80145f0:	68bb      	ldr	r3, [r7, #8]
 80145f2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8014608:	68bb      	ldr	r3, [r7, #8]
 801460a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8014614:	68bb      	ldr	r3, [r7, #8]
 8014616:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 801462c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014630:	4618      	mov	r0, r3
 8014632:	3718      	adds	r7, #24
 8014634:	46bd      	mov	sp, r7
 8014636:	bd80      	pop	{r7, pc}

08014638 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b090      	sub	sp, #64	; 0x40
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
 8014640:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014642:	2300      	movs	r3, #0
 8014644:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8014648:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801464c:	2b00      	cmp	r3, #0
 801464e:	d10a      	bne.n	8014666 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8014650:	f107 020c 	add.w	r2, r7, #12
 8014654:	2331      	movs	r3, #49	; 0x31
 8014656:	f240 110f 	movw	r1, #271	; 0x10f
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	f001 f8f8 	bl	8015850 <VL53L1_ReadMulti>
 8014660:	4603      	mov	r3, r0
 8014662:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8014666:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801466a:	2b00      	cmp	r3, #0
 801466c:	d109      	bne.n	8014682 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 801466e:	f107 030c 	add.w	r3, r7, #12
 8014672:	683a      	ldr	r2, [r7, #0]
 8014674:	4619      	mov	r1, r3
 8014676:	2031      	movs	r0, #49	; 0x31
 8014678:	f7ff feb8 	bl	80143ec <VL53L1_i2c_decode_nvm_copy_data>
 801467c:	4603      	mov	r3, r0
 801467e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8014682:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8014686:	4618      	mov	r0, r3
 8014688:	3740      	adds	r7, #64	; 0x40
 801468a:	46bd      	mov	sp, r7
 801468c:	bd80      	pop	{r7, pc}

0801468e <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 801468e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014692:	b0d6      	sub	sp, #344	; 0x158
 8014694:	af00      	add	r7, sp, #0
 8014696:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 801469a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 801469e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80146a2:	4603      	mov	r3, r0
 80146a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80146a8:	23f1      	movs	r3, #241	; 0xf1
 80146aa:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53L1_D_002;
 80146ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80146b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 80146b6:	2300      	movs	r3, #0
 80146b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 80146bc:	f04f 0200 	mov.w	r2, #0
 80146c0:	f04f 0300 	mov.w	r3, #0
 80146c4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 80146c8:	f04f 0200 	mov.w	r2, #0
 80146cc:	f04f 0300 	mov.w	r3, #0
 80146d0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 80146d4:	f04f 0200 	mov.w	r2, #0
 80146d8:	f04f 0300 	mov.w	r3, #0
 80146dc:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53L1_p_041   = 0;
 80146e0:	f04f 0200 	mov.w	r2, #0
 80146e4:	f04f 0300 	mov.w	r3, #0
 80146e8:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53L1_D_002;
 80146ec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80146f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80146f4:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 80146f6:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	f000 8322 	beq.w	8014d44 <VL53L1_f_014+0x6b6>



		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 8014700:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8014704:	4618      	mov	r0, r3
 8014706:	f7fb fa23 	bl	800fb50 <VL53L1_calc_pll_period_mm>
 801470a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53L1_p_004 > VL53L1_p_018)
 801470e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8014712:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014716:	429a      	cmp	r2, r3
 8014718:	d91a      	bls.n	8014750 <VL53L1_f_014+0xc2>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 801471a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801471e:	2200      	movs	r2, #0
 8014720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014724:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53L1_p_018;
 8014728:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801472c:	2200      	movs	r2, #0
 801472e:	4698      	mov	r8, r3
 8014730:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 8014732:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8014736:	460b      	mov	r3, r1
 8014738:	ebb3 0308 	subs.w	r3, r3, r8
 801473c:	63bb      	str	r3, [r7, #56]	; 0x38
 801473e:	4613      	mov	r3, r2
 8014740:	eb63 0309 	sbc.w	r3, r3, r9
 8014744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014746:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 801474a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 801474e:	e013      	b.n	8014778 <VL53L1_f_014+0xea>
		else
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 8014750:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014754:	2200      	movs	r2, #0
 8014756:	469a      	mov	sl, r3
 8014758:	4693      	mov	fp, r2
			(uint64_t)VL53L1_p_004;
 801475a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801475e:	2200      	movs	r2, #0
 8014760:	461c      	mov	r4, r3
 8014762:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 8014764:	ebba 0304 	subs.w	r3, sl, r4
 8014768:	633b      	str	r3, [r7, #48]	; 0x30
 801476a:	eb6b 0305 	sbc.w	r3, fp, r5
 801476e:	637b      	str	r3, [r7, #52]	; 0x34
 8014770:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8014774:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53L1_p_003 > VL53L1_p_001)
 8014778:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801477c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8014780:	429a      	cmp	r2, r3
 8014782:	d91f      	bls.n	80147c4 <VL53L1_f_014+0x136>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 8014784:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8014788:	2200      	movs	r2, #0
 801478a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801478e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53L1_p_001;
 8014792:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8014796:	2200      	movs	r2, #0
 8014798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801479c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 80147a0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80147a4:	4623      	mov	r3, r4
 80147a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80147aa:	4602      	mov	r2, r0
 80147ac:	1a9b      	subs	r3, r3, r2
 80147ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80147b0:	462b      	mov	r3, r5
 80147b2:	460a      	mov	r2, r1
 80147b4:	eb63 0302 	sbc.w	r3, r3, r2
 80147b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80147ba:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80147be:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 80147c2:	e01e      	b.n	8014802 <VL53L1_f_014+0x174>
		else
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 80147c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80147c8:	2200      	movs	r2, #0
 80147ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80147ce:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53L1_p_003;
 80147d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80147d6:	2200      	movs	r2, #0
 80147d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80147dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 80147e0:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80147e4:	4623      	mov	r3, r4
 80147e6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80147ea:	4602      	mov	r2, r0
 80147ec:	1a9b      	subs	r3, r3, r2
 80147ee:	623b      	str	r3, [r7, #32]
 80147f0:	462b      	mov	r3, r5
 80147f2:	460a      	mov	r2, r1
 80147f4:	eb63 0302 	sbc.w	r3, r3, r2
 80147f8:	627b      	str	r3, [r7, #36]	; 0x24
 80147fa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80147fe:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 8014802:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014806:	4313      	orrs	r3, r2
 8014808:	f000 829c 	beq.w	8014d44 <VL53L1_f_014+0x6b6>




			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 801480c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014810:	2200      	movs	r2, #0
 8014812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014816:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801481a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801481e:	2200      	movs	r2, #0
 8014820:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8014824:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8014828:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 801482c:	4623      	mov	r3, r4
 801482e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8014832:	4602      	mov	r2, r0
 8014834:	189b      	adds	r3, r3, r2
 8014836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801483a:	460b      	mov	r3, r1
 801483c:	462a      	mov	r2, r5
 801483e:	eb42 0303 	adc.w	r3, r2, r3
 8014842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53L1_p_004;
 8014846:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801484a:	2200      	movs	r2, #0
 801484c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8014850:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 8014854:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8014858:	4623      	mov	r3, r4
 801485a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801485e:	4602      	mov	r2, r0
 8014860:	189b      	adds	r3, r3, r2
 8014862:	61bb      	str	r3, [r7, #24]
 8014864:	460b      	mov	r3, r1
 8014866:	462a      	mov	r2, r5
 8014868:	eb42 0303 	adc.w	r3, r2, r3
 801486c:	61fb      	str	r3, [r7, #28]
 801486e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8014872:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53L1_D_003)
 8014876:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801487a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 801487e:	f173 0300 	sbcs.w	r3, r3, #0
 8014882:	d305      	bcc.n	8014890 <VL53L1_f_014+0x202>
				tmp0 = VL53L1_D_003;
 8014884:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8014888:	f04f 0300 	mov.w	r3, #0
 801488c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 8014890:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8014894:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014898:	fb03 f102 	mul.w	r1, r3, r2
 801489c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80148a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80148a4:	fb02 f303 	mul.w	r3, r2, r3
 80148a8:	18ca      	adds	r2, r1, r3
 80148aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80148ae:	fba3 1303 	umull	r1, r3, r3, r3
 80148b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80148b6:	460b      	mov	r3, r1
 80148b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80148bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80148c0:	18d3      	adds	r3, r2, r3
 80148c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80148c6:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80148ca:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 80148ce:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 80148d2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80148d6:	f04f 0000 	mov.w	r0, #0
 80148da:	f04f 0100 	mov.w	r1, #0
 80148de:	0219      	lsls	r1, r3, #8
 80148e0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80148e4:	0210      	lsls	r0, r2, #8
 80148e6:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53L1_D_004)
 80148ea:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80148ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80148f2:	d305      	bcc.n	8014900 <VL53L1_f_014+0x272>
				tmp1 = VL53L1_D_004;
 80148f4:	f04f 32ff 	mov.w	r2, #4294967295
 80148f8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80148fc:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8014900:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014904:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8014908:	f7ec f976 	bl	8000bf8 <__aeabi_uldivmod>
 801490c:	4602      	mov	r2, r0
 801490e:	460b      	mov	r3, r1
 8014910:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8014914:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014918:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801491c:	f7ec f96c 	bl	8000bf8 <__aeabi_uldivmod>
 8014920:	4602      	mov	r2, r0
 8014922:	460b      	mov	r3, r1
 8014924:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_005)
 8014928:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801492c:	2b80      	cmp	r3, #128	; 0x80
 801492e:	d305      	bcc.n	801493c <VL53L1_f_014+0x2ae>
				tmp1 = (uint64_t)VL53L1_D_005;
 8014930:	f04f 32ff 	mov.w	r2, #4294967295
 8014934:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8014938:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 801493c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8014940:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8014944:	fb03 f102 	mul.w	r1, r3, r2
 8014948:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801494c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014950:	fb02 f303 	mul.w	r3, r2, r3
 8014954:	4419      	add	r1, r3
 8014956:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801495a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801495e:	fba2 2303 	umull	r2, r3, r2, r3
 8014962:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8014966:	4613      	mov	r3, r2
 8014968:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801496c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014970:	18cb      	adds	r3, r1, r3
 8014972:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8014976:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 801497a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801497e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8014982:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8014986:	2200      	movs	r2, #0
 8014988:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801498c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8014990:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8014994:	2200      	movs	r2, #0
 8014996:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801499a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801499e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80149a2:	4623      	mov	r3, r4
 80149a4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80149a8:	4602      	mov	r2, r0
 80149aa:	189b      	adds	r3, r3, r2
 80149ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80149b0:	460b      	mov	r3, r1
 80149b2:	462a      	mov	r2, r5
 80149b4:	eb42 0303 	adc.w	r3, r2, r3
 80149b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80149bc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80149c0:	2200      	movs	r2, #0
 80149c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80149c4:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80149c6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80149ca:	4623      	mov	r3, r4
 80149cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80149d0:	4602      	mov	r2, r0
 80149d2:	189b      	adds	r3, r3, r2
 80149d4:	673b      	str	r3, [r7, #112]	; 0x70
 80149d6:	460b      	mov	r3, r1
 80149d8:	462a      	mov	r2, r5
 80149da:	eb42 0303 	adc.w	r3, r2, r3
 80149de:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80149e0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80149e4:	2200      	movs	r2, #0
 80149e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80149e8:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80149ea:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80149ee:	4623      	mov	r3, r4
 80149f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80149f4:	4602      	mov	r2, r0
 80149f6:	189b      	adds	r3, r3, r2
 80149f8:	613b      	str	r3, [r7, #16]
 80149fa:	460b      	mov	r3, r1
 80149fc:	462a      	mov	r2, r5
 80149fe:	eb42 0303 	adc.w	r3, r2, r3
 8014a02:	617b      	str	r3, [r7, #20]
 8014a04:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8014a08:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_003)
 8014a0c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8014a10:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8014a14:	f173 0300 	sbcs.w	r3, r3, #0
 8014a18:	d305      	bcc.n	8014a26 <VL53L1_f_014+0x398>
				tmp1 = (uint64_t)VL53L1_D_003;
 8014a1a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8014a1e:	f04f 0300 	mov.w	r3, #0
 8014a22:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 8014a26:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8014a2a:	f04f 0000 	mov.w	r0, #0
 8014a2e:	f04f 0100 	mov.w	r1, #0
 8014a32:	0219      	lsls	r1, r3, #8
 8014a34:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8014a38:	0210      	lsls	r0, r2, #8
 8014a3a:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 8014a3e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014a42:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8014a46:	1884      	adds	r4, r0, r2
 8014a48:	60bc      	str	r4, [r7, #8]
 8014a4a:	eb41 0303 	adc.w	r3, r1, r3
 8014a4e:	60fb      	str	r3, [r7, #12]
 8014a50:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8014a54:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53L1_D_006)
 8014a58:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	da05      	bge.n	8014a6c <VL53L1_f_014+0x3de>
				tmp0 = (uint64_t)VL53L1_D_006;
 8014a60:	f04f 32ff 	mov.w	r2, #4294967295
 8014a64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014a68:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8014a6c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014a70:	2b01      	cmp	r3, #1
 8014a72:	d331      	bcc.n	8014ad8 <VL53L1_f_014+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8014a74:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014a78:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014a7c:	f7ec f8bc 	bl	8000bf8 <__aeabi_uldivmod>
 8014a80:	4602      	mov	r2, r0
 8014a82:	460b      	mov	r3, r1
 8014a84:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8014a88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	663b      	str	r3, [r7, #96]	; 0x60
 8014a90:	667a      	str	r2, [r7, #100]	; 0x64
 8014a92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8014a96:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8014a9a:	4622      	mov	r2, r4
 8014a9c:	fb02 f203 	mul.w	r2, r2, r3
 8014aa0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014aa4:	4629      	mov	r1, r5
 8014aa6:	fb01 f303 	mul.w	r3, r1, r3
 8014aaa:	441a      	add	r2, r3
 8014aac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014ab0:	4621      	mov	r1, r4
 8014ab2:	fba3 1301 	umull	r1, r3, r3, r1
 8014ab6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014aba:	460b      	mov	r3, r1
 8014abc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8014ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ac4:	18d3      	adds	r3, r2, r3
 8014ac6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014aca:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8014ace:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8014ad2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8014ad6:	e030      	b.n	8014b3a <VL53L1_f_014+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8014ad8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014adc:	2200      	movs	r2, #0
 8014ade:	65bb      	str	r3, [r7, #88]	; 0x58
 8014ae0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8014ae2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8014ae6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8014aea:	4622      	mov	r2, r4
 8014aec:	fb02 f203 	mul.w	r2, r2, r3
 8014af0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014af4:	4629      	mov	r1, r5
 8014af6:	fb01 f303 	mul.w	r3, r1, r3
 8014afa:	441a      	add	r2, r3
 8014afc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014b00:	4621      	mov	r1, r4
 8014b02:	fba3 1301 	umull	r1, r3, r3, r1
 8014b06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014b0a:	460b      	mov	r3, r1
 8014b0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8014b10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014b14:	18d3      	adds	r3, r2, r3
 8014b16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014b1a:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8014b1e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8014b22:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8014b26:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014b2a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014b2e:	f7ec f863 	bl	8000bf8 <__aeabi_uldivmod>
 8014b32:	4602      	mov	r2, r0
 8014b34:	460b      	mov	r3, r1
 8014b36:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8014b3a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	da05      	bge.n	8014b4e <VL53L1_f_014+0x4c0>
				tmp0 = (uint64_t)VL53L1_D_006;
 8014b42:	f04f 32ff 	mov.w	r2, #4294967295
 8014b46:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014b4a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8014b4e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014b52:	2b01      	cmp	r3, #1
 8014b54:	d33d      	bcc.n	8014bd2 <VL53L1_f_014+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8014b56:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014b5a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014b5e:	f7ec f84b 	bl	8000bf8 <__aeabi_uldivmod>
 8014b62:	4602      	mov	r2, r0
 8014b64:	460b      	mov	r3, r1
 8014b66:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8014b6a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014b6e:	f04f 0200 	mov.w	r2, #0
 8014b72:	f04f 0300 	mov.w	r3, #0
 8014b76:	0882      	lsrs	r2, r0, #2
 8014b78:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8014b7c:	088b      	lsrs	r3, r1, #2
 8014b7e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8014b82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014b86:	2200      	movs	r2, #0
 8014b88:	653b      	str	r3, [r7, #80]	; 0x50
 8014b8a:	657a      	str	r2, [r7, #84]	; 0x54
 8014b8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8014b90:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8014b94:	4622      	mov	r2, r4
 8014b96:	fb02 f203 	mul.w	r2, r2, r3
 8014b9a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014b9e:	4629      	mov	r1, r5
 8014ba0:	fb01 f303 	mul.w	r3, r1, r3
 8014ba4:	4413      	add	r3, r2
 8014ba6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8014baa:	4621      	mov	r1, r4
 8014bac:	fba2 1201 	umull	r1, r2, r2, r1
 8014bb0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8014bb4:	460a      	mov	r2, r1
 8014bb6:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8014bba:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8014bbe:	4413      	add	r3, r2
 8014bc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8014bc4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8014bc8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8014bcc:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8014bd0:	e03c      	b.n	8014c4c <VL53L1_f_014+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8014bd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8014bda:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014bdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8014be0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8014be4:	4622      	mov	r2, r4
 8014be6:	fb02 f203 	mul.w	r2, r2, r3
 8014bea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014bee:	4629      	mov	r1, r5
 8014bf0:	fb01 f303 	mul.w	r3, r1, r3
 8014bf4:	4413      	add	r3, r2
 8014bf6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8014bfa:	4621      	mov	r1, r4
 8014bfc:	fba2 1201 	umull	r1, r2, r2, r1
 8014c00:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8014c04:	460a      	mov	r2, r1
 8014c06:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8014c0a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014c0e:	4413      	add	r3, r2
 8014c10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8014c14:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8014c18:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8014c1c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8014c20:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014c24:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014c28:	f7eb ffe6 	bl	8000bf8 <__aeabi_uldivmod>
 8014c2c:	4602      	mov	r2, r0
 8014c2e:	460b      	mov	r3, r1
 8014c30:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8014c34:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014c38:	f04f 0200 	mov.w	r2, #0
 8014c3c:	f04f 0300 	mov.w	r3, #0
 8014c40:	0882      	lsrs	r2, r0, #2
 8014c42:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8014c46:	088b      	lsrs	r3, r1, #2
 8014c48:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8014c4c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	da05      	bge.n	8014c60 <VL53L1_f_014+0x5d2>
				tmp0 = (uint64_t)VL53L1_D_006;
 8014c54:	f04f 32ff 	mov.w	r2, #4294967295
 8014c58:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014c5c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 8014c60:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014c64:	f04f 0200 	mov.w	r2, #0
 8014c68:	f04f 0300 	mov.w	r3, #0
 8014c6c:	0882      	lsrs	r2, r0, #2
 8014c6e:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8014c72:	088b      	lsrs	r3, r1, #2
 8014c74:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8014c78:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014c7c:	2b01      	cmp	r3, #1
 8014c7e:	d305      	bcc.n	8014c8c <VL53L1_f_014+0x5fe>
				tmp0 = (uint64_t)VL53L1_D_007;
 8014c80:	f04f 32ff 	mov.w	r2, #4294967295
 8014c84:	f04f 0300 	mov.w	r3, #0
 8014c88:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8014c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8014c90:	2200      	movs	r2, #0
 8014c92:	643b      	str	r3, [r7, #64]	; 0x40
 8014c94:	647a      	str	r2, [r7, #68]	; 0x44
 8014c96:	f04f 0200 	mov.w	r2, #0
 8014c9a:	f04f 0300 	mov.w	r3, #0
 8014c9e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8014ca2:	4629      	mov	r1, r5
 8014ca4:	01cb      	lsls	r3, r1, #7
 8014ca6:	4621      	mov	r1, r4
 8014ca8:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8014cac:	4621      	mov	r1, r4
 8014cae:	01ca      	lsls	r2, r1, #7
 8014cb0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 8014cb4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8014cb8:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8014cbc:	fb03 f202 	mul.w	r2, r3, r2
 8014cc0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8014cc4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8014cc8:	fb01 f303 	mul.w	r3, r1, r3
 8014ccc:	441a      	add	r2, r3
 8014cce:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8014cd2:	fba3 1303 	umull	r1, r3, r3, r3
 8014cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014cda:	460b      	mov	r3, r1
 8014cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8014ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ce4:	18d3      	adds	r3, r2, r3
 8014ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014cea:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8014cee:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8014cf2:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 8014cf6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8014cfa:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8014cfe:	1884      	adds	r4, r0, r2
 8014d00:	603c      	str	r4, [r7, #0]
 8014d02:	eb41 0303 	adc.w	r3, r1, r3
 8014d06:	607b      	str	r3, [r7, #4]
 8014d08:	e9d7 3400 	ldrd	r3, r4, [r7]
 8014d0c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8014d10:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8014d14:	2b01      	cmp	r3, #1
 8014d16:	d305      	bcc.n	8014d24 <VL53L1_f_014+0x696>
				tmp0 = (uint64_t)VL53L1_D_007;
 8014d18:	f04f 32ff 	mov.w	r2, #4294967295
 8014d1c:	f04f 0300 	mov.w	r3, #0
 8014d20:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 8014d24:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7fa fdaa 	bl	800f882 <VL53L1_isqrt>
 8014d2e:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8014d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014d36:	b29a      	uxth	r2, r3
 8014d38:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8014d3c:	801a      	strh	r2, [r3, #0]

			status = VL53L1_ERROR_NONE;
 8014d3e:	2300      	movs	r3, #0
 8014d40:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 8014d44:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8014d48:	4618      	mov	r0, r3
 8014d4a:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014d54 <VL53L1_wait_for_test_completion>:
}


VL53L1_Error VL53L1_wait_for_test_completion(
	VL53L1_DEV     Dev)
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b086      	sub	sp, #24
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	6078      	str	r0, [r7, #4]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	3318      	adds	r3, #24
 8014d64:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8014d66:	2300      	movs	r3, #0
 8014d68:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 8014d6a:	693b      	ldr	r3, [r7, #16]
 8014d6c:	781b      	ldrb	r3, [r3, #0]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d107      	bne.n	8014d82 <VL53L1_wait_for_test_completion+0x2e>



		status =
			VL53L1_poll_for_range_completion(
 8014d72:	f64e 2160 	movw	r1, #60000	; 0xea60
 8014d76:	6878      	ldr	r0, [r7, #4]
 8014d78:	f000 f88b 	bl	8014e92 <VL53L1_poll_for_range_completion>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	75fb      	strb	r3, [r7, #23]
 8014d80:	e01b      	b.n	8014dba <VL53L1_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8014d82:	2300      	movs	r3, #0
 8014d84:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8014d86:	e011      	b.n	8014dac <VL53L1_wait_for_test_completion+0x58>
			status = VL53L1_is_new_data_ready(
 8014d88:	f107 030f 	add.w	r3, r7, #15
 8014d8c:	4619      	mov	r1, r3
 8014d8e:	6878      	ldr	r0, [r7, #4]
 8014d90:	f000 f819 	bl	8014dc6 <VL53L1_is_new_data_ready>
 8014d94:	4603      	mov	r3, r0
 8014d96:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53L1_ERROR_NONE) {
 8014d98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d105      	bne.n	8014dac <VL53L1_wait_for_test_completion+0x58>
				status = VL53L1_WaitMs(
 8014da0:	2101      	movs	r1, #1
 8014da2:	6878      	ldr	r0, [r7, #4]
 8014da4:	f000 fe6e 	bl	8015a84 <VL53L1_WaitMs>
 8014da8:	4603      	mov	r3, r0
 8014daa:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8014dac:	7bfb      	ldrb	r3, [r7, #15]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d103      	bne.n	8014dba <VL53L1_wait_for_test_completion+0x66>
 8014db2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d0e6      	beq.n	8014d88 <VL53L1_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8014dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	3718      	adds	r7, #24
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd80      	pop	{r7, pc}

08014dc6 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8014dc6:	b580      	push	{r7, lr}
 8014dc8:	b086      	sub	sp, #24
 8014dca:	af00      	add	r7, sp, #0
 8014dcc:	6078      	str	r0, [r7, #4]
 8014dce:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	3318      	adds	r3, #24
 8014dd8:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8014dda:	2300      	movs	r3, #0
 8014ddc:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8014dde:	2300      	movs	r3, #0
 8014de0:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8014de2:	2300      	movs	r3, #0
 8014de4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8014de6:	693b      	ldr	r3, [r7, #16]
 8014de8:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8014dec:	f003 0310 	and.w	r3, r3, #16
 8014df0:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8014df2:	7bfb      	ldrb	r3, [r7, #15]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d102      	bne.n	8014dfe <VL53L1_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8014df8:	2301      	movs	r3, #1
 8014dfa:	75fb      	strb	r3, [r7, #23]
 8014dfc:	e001      	b.n	8014e02 <VL53L1_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8014dfe:	2300      	movs	r3, #0
 8014e00:	75fb      	strb	r3, [r7, #23]



	status = VL53L1_RdByte(
 8014e02:	f107 030e 	add.w	r3, r7, #14
 8014e06:	461a      	mov	r2, r3
 8014e08:	2131      	movs	r1, #49	; 0x31
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f000 fdb2 	bl	8015974 <VL53L1_RdByte>
 8014e10:	4603      	mov	r3, r0
 8014e12:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8014e14:	7bbb      	ldrb	r3, [r7, #14]
 8014e16:	f003 0201 	and.w	r2, r3, #1
 8014e1a:	7dfb      	ldrb	r3, [r7, #23]
 8014e1c:	429a      	cmp	r2, r3
 8014e1e:	d103      	bne.n	8014e28 <VL53L1_is_new_data_ready+0x62>
		*pready = 0x01;
 8014e20:	683b      	ldr	r3, [r7, #0]
 8014e22:	2201      	movs	r2, #1
 8014e24:	701a      	strb	r2, [r3, #0]
 8014e26:	e002      	b.n	8014e2e <VL53L1_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8014e2e:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8014e32:	4618      	mov	r0, r3
 8014e34:	3718      	adds	r7, #24
 8014e36:	46bd      	mov	sp, r7
 8014e38:	bd80      	pop	{r7, pc}

08014e3a <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8014e3a:	b580      	push	{r7, lr}
 8014e3c:	b086      	sub	sp, #24
 8014e3e:	af02      	add	r7, sp, #8
 8014e40:	6078      	str	r0, [r7, #4]
 8014e42:	6039      	str	r1, [r7, #0]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8014e44:	2300      	movs	r3, #0
 8014e46:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 8014e48:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8014e4c:	6878      	ldr	r0, [r7, #4]
 8014e4e:	f000 fe29 	bl	8015aa4 <VL53L1_WaitUs>
 8014e52:	4603      	mov	r3, r0
 8014e54:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8014e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d10b      	bne.n	8014e76 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 8014e5e:	2301      	movs	r3, #1
 8014e60:	9301      	str	r3, [sp, #4]
 8014e62:	2301      	movs	r3, #1
 8014e64:	9300      	str	r3, [sp, #0]
 8014e66:	2301      	movs	r3, #1
 8014e68:	22e5      	movs	r2, #229	; 0xe5
 8014e6a:	6839      	ldr	r1, [r7, #0]
 8014e6c:	6878      	ldr	r0, [r7, #4]
 8014e6e:	f000 fe31 	bl	8015ad4 <VL53L1_WaitValueMaskEx>
 8014e72:	4603      	mov	r3, r0
 8014e74:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8014e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d103      	bne.n	8014e86 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8014e7e:	2103      	movs	r1, #3
 8014e80:	6878      	ldr	r0, [r7, #4]
 8014e82:	f7f6 fc38 	bl	800b6f6 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8014e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	3710      	adds	r7, #16
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bd80      	pop	{r7, pc}

08014e92 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8014e92:	b580      	push	{r7, lr}
 8014e94:	b088      	sub	sp, #32
 8014e96:	af02      	add	r7, sp, #8
 8014e98:	6078      	str	r0, [r7, #4]
 8014e9a:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	3318      	adds	r3, #24
 8014ea4:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8014eaa:	2300      	movs	r3, #0
 8014eac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8014eae:	693b      	ldr	r3, [r7, #16]
 8014eb0:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8014eb4:	f003 0310 	and.w	r3, r3, #16
 8014eb8:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8014eba:	7bfb      	ldrb	r3, [r7, #15]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d102      	bne.n	8014ec6 <VL53L1_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	75fb      	strb	r3, [r7, #23]
 8014ec4:	e001      	b.n	8014eca <VL53L1_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 8014eca:	7dfb      	ldrb	r3, [r7, #23]
 8014ecc:	2201      	movs	r2, #1
 8014ece:	9201      	str	r2, [sp, #4]
 8014ed0:	2201      	movs	r2, #1
 8014ed2:	9200      	str	r2, [sp, #0]
 8014ed4:	2231      	movs	r2, #49	; 0x31
 8014ed6:	6839      	ldr	r1, [r7, #0]
 8014ed8:	6878      	ldr	r0, [r7, #4]
 8014eda:	f000 fdfb 	bl	8015ad4 <VL53L1_WaitValueMaskEx>
 8014ede:	4603      	mov	r3, r0
 8014ee0:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8014ee2:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3718      	adds	r7, #24
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}

08014eee <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8014eee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014ef2:	b0c0      	sub	sp, #256	; 0x100
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 8014efa:	4618      	mov	r0, r3
 8014efc:	460b      	mov	r3, r1
 8014efe:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8014f02:	4613      	mov	r3, r2
 8014f04:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8014f08:	4603      	mov	r3, r0
 8014f0a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014f0e:	2300      	movs	r3, #0
 8014f10:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 8014f14:	2300      	movs	r3, #0
 8014f16:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 8014f20:	2300      	movs	r3, #0
 8014f22:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 8014f26:	2300      	movs	r3, #0
 8014f28:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 8014f32:	2300      	movs	r3, #0
 8014f34:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 8014f38:	f04f 0200 	mov.w	r2, #0
 8014f3c:	f04f 0300 	mov.w	r3, #0
 8014f40:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 8014f44:	f04f 0200 	mov.w	r2, #0
 8014f48:	f04f 0300 	mov.w	r3, #0
 8014f4c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 8014f50:	f04f 0200 	mov.w	r2, #0
 8014f54:	f04f 0300 	mov.w	r3, #0
 8014f58:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53L1_ERROR_NONE) {
 8014f5c:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d108      	bne.n	8014f76 <VL53L1_f_040+0x88>
		VL53L1_decode_row_col(
 8014f64:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 8014f68:	f107 01de 	add.w	r1, r7, #222	; 0xde
 8014f6c:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8014f70:	4618      	mov	r0, r3
 8014f72:	f7fb f867 	bl	8010044 <VL53L1_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
 8014f76:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d165      	bne.n	801504a <VL53L1_f_040+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8014f7e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014f82:	091b      	lsrs	r3, r3, #4
 8014f84:	b2db      	uxtb	r3, r3
 8014f86:	f003 0301 	and.w	r3, r3, #1
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d00e      	beq.n	8014fac <VL53L1_f_040+0xbe>
			bound_l_x = (int16_t) col -
 8014f8e:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8014f92:	b29a      	uxth	r2, r3
 8014f94:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014f98:	095b      	lsrs	r3, r3, #5
 8014f9a:	b2db      	uxtb	r3, r3
 8014f9c:	b29b      	uxth	r3, r3
 8014f9e:	1ad3      	subs	r3, r2, r3
 8014fa0:	b29b      	uxth	r3, r3
 8014fa2:	3b01      	subs	r3, #1
 8014fa4:	b29b      	uxth	r3, r3
 8014fa6:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8014faa:	e00b      	b.n	8014fc4 <VL53L1_f_040+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8014fac:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8014fb0:	b29a      	uxth	r2, r3
 8014fb2:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014fb6:	095b      	lsrs	r3, r3, #5
 8014fb8:	b2db      	uxtb	r3, r3
 8014fba:	b29b      	uxth	r3, r3
 8014fbc:	1ad3      	subs	r3, r2, r3
 8014fbe:	b29b      	uxth	r3, r3
 8014fc0:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8014fc4:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8014fc8:	b29a      	uxth	r2, r3
 8014fca:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014fce:	095b      	lsrs	r3, r3, #5
 8014fd0:	b2db      	uxtb	r3, r3
 8014fd2:	b29b      	uxth	r3, r3
 8014fd4:	4413      	add	r3, r2
 8014fd6:	b29b      	uxth	r3, r3
 8014fd8:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8014fdc:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014fe0:	f003 0301 	and.w	r3, r3, #1
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d011      	beq.n	801500c <VL53L1_f_040+0x11e>
			bound_d_y = (int16_t) row -
 8014fe8:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8014fec:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8014fee:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014ff2:	f003 020f 	and.w	r2, r3, #15
 8014ff6:	0fd3      	lsrs	r3, r2, #31
 8014ff8:	4413      	add	r3, r2
 8014ffa:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8014ffc:	b29b      	uxth	r3, r3
 8014ffe:	1acb      	subs	r3, r1, r3
 8015000:	b29b      	uxth	r3, r3
 8015002:	3b01      	subs	r3, #1
 8015004:	b29b      	uxth	r3, r3
 8015006:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 801500a:	e00f      	b.n	801502c <VL53L1_f_040+0x13e>
		else
			bound_d_y = (int16_t) row -
 801500c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8015010:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8015012:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8015016:	f003 020f 	and.w	r2, r3, #15
 801501a:	0fd3      	lsrs	r3, r2, #31
 801501c:	4413      	add	r3, r2
 801501e:	105b      	asrs	r3, r3, #1
 8015020:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8015022:	b29b      	uxth	r3, r3
 8015024:	440b      	add	r3, r1
 8015026:	b29b      	uxth	r3, r3
 8015028:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 801502c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8015030:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8015032:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8015036:	f003 020f 	and.w	r2, r3, #15
 801503a:	0fd3      	lsrs	r3, r2, #31
 801503c:	4413      	add	r3, r2
 801503e:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8015040:	b29b      	uxth	r3, r3
 8015042:	440b      	add	r3, r1
 8015044:	b29b      	uxth	r3, r3
 8015046:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 801504a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801504e:	2b00      	cmp	r3, #0
 8015050:	d133      	bne.n	80150ba <VL53L1_f_040+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8015052:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8015056:	b29a      	uxth	r2, r3
 8015058:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 801505c:	4413      	add	r3, r2
 801505e:	b29b      	uxth	r3, r3
 8015060:	005b      	lsls	r3, r3, #1
 8015062:	b29b      	uxth	r3, r3
 8015064:	3b0f      	subs	r3, #15
 8015066:	b29b      	uxth	r3, r3
 8015068:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 801506c:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8015070:	b29a      	uxth	r2, r3
 8015072:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8015076:	4413      	add	r3, r2
 8015078:	b29b      	uxth	r3, r3
 801507a:	005b      	lsls	r3, r3, #1
 801507c:	b29b      	uxth	r3, r3
 801507e:	3b0f      	subs	r3, #15
 8015080:	b29b      	uxth	r3, r3
 8015082:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8015086:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 801508a:	b29a      	uxth	r2, r3
 801508c:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8015090:	4413      	add	r3, r2
 8015092:	b29b      	uxth	r3, r3
 8015094:	005b      	lsls	r3, r3, #1
 8015096:	b29b      	uxth	r3, r3
 8015098:	3b0f      	subs	r3, #15
 801509a:	b29b      	uxth	r3, r3
 801509c:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 80150a0:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 80150a4:	b29a      	uxth	r2, r3
 80150a6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80150aa:	4413      	add	r3, r2
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	005b      	lsls	r3, r3, #1
 80150b0:	b29b      	uxth	r3, r3
 80150b2:	3b0f      	subs	r3, #15
 80150b4:	b29b      	uxth	r3, r3
 80150b6:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 80150ba:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80150be:	2b00      	cmp	r3, #0
 80150c0:	f040 8135 	bne.w	801532e <VL53L1_f_040+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80150c4:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 80150c8:	17da      	asrs	r2, r3, #31
 80150ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80150ce:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80150d2:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 80150d6:	17da      	asrs	r2, r3, #31
 80150d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80150dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80150e0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80150e4:	460b      	mov	r3, r1
 80150e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80150ea:	fb02 f203 	mul.w	r2, r2, r3
 80150ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80150f2:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 80150f6:	4601      	mov	r1, r0
 80150f8:	fb01 f303 	mul.w	r3, r1, r3
 80150fc:	4413      	add	r3, r2
 80150fe:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8015102:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8015106:	fba2 4501 	umull	r4, r5, r2, r1
 801510a:	442b      	add	r3, r5
 801510c:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 801510e:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8015112:	17da      	asrs	r2, r3, #31
 8015114:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015118:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 801511c:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8015120:	17da      	asrs	r2, r3, #31
 8015122:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8015126:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 801512a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801512e:	460b      	mov	r3, r1
 8015130:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8015134:	fb02 f203 	mul.w	r2, r2, r3
 8015138:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801513c:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 8015140:	4601      	mov	r1, r0
 8015142:	fb01 f303 	mul.w	r3, r1, r3
 8015146:	4413      	add	r3, r2
 8015148:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801514c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8015150:	fba2 8901 	umull	r8, r9, r2, r1
 8015154:	444b      	add	r3, r9
 8015156:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8015158:	eb14 0308 	adds.w	r3, r4, r8
 801515c:	64bb      	str	r3, [r7, #72]	; 0x48
 801515e:	eb45 0309 	adc.w	r3, r5, r9
 8015162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015164:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8015168:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 801516c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8015170:	1c51      	adds	r1, r2, #1
 8015172:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8015176:	f143 0300 	adc.w	r3, r3, #0
 801517a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801517e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8015182:	460b      	mov	r3, r1
 8015184:	0fdb      	lsrs	r3, r3, #31
 8015186:	2200      	movs	r2, #0
 8015188:	643b      	str	r3, [r7, #64]	; 0x40
 801518a:	647a      	str	r2, [r7, #68]	; 0x44
 801518c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8015190:	4623      	mov	r3, r4
 8015192:	4602      	mov	r2, r0
 8015194:	189b      	adds	r3, r3, r2
 8015196:	63bb      	str	r3, [r7, #56]	; 0x38
 8015198:	460b      	mov	r3, r1
 801519a:	462a      	mov	r2, r5
 801519c:	eb42 0303 	adc.w	r3, r2, r3
 80151a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80151a2:	f04f 0200 	mov.w	r2, #0
 80151a6:	f04f 0300 	mov.w	r3, #0
 80151aa:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80151ae:	4621      	mov	r1, r4
 80151b0:	084a      	lsrs	r2, r1, #1
 80151b2:	4629      	mov	r1, r5
 80151b4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80151b8:	4629      	mov	r1, r5
 80151ba:	104b      	asrs	r3, r1, #1
 80151bc:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 80151c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80151c4:	2200      	movs	r2, #0
 80151c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80151ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80151ce:	f04f 0000 	mov.w	r0, #0
 80151d2:	f04f 0100 	mov.w	r1, #0
 80151d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80151da:	462b      	mov	r3, r5
 80151dc:	0099      	lsls	r1, r3, #2
 80151de:	4623      	mov	r3, r4
 80151e0:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80151e4:	4623      	mov	r3, r4
 80151e6:	0098      	lsls	r0, r3, #2
 80151e8:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80151ec:	1814      	adds	r4, r2, r0
 80151ee:	633c      	str	r4, [r7, #48]	; 0x30
 80151f0:	414b      	adcs	r3, r1
 80151f2:	637b      	str	r3, [r7, #52]	; 0x34
 80151f4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80151f8:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80151fc:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 8015200:	17da      	asrs	r2, r3, #31
 8015202:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015206:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801520a:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 801520e:	17da      	asrs	r2, r3, #31
 8015210:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015214:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8015218:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 801521c:	462b      	mov	r3, r5
 801521e:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8015222:	4642      	mov	r2, r8
 8015224:	fb02 f203 	mul.w	r2, r2, r3
 8015228:	464b      	mov	r3, r9
 801522a:	4621      	mov	r1, r4
 801522c:	fb01 f303 	mul.w	r3, r1, r3
 8015230:	4413      	add	r3, r2
 8015232:	4622      	mov	r2, r4
 8015234:	4641      	mov	r1, r8
 8015236:	fba2 ab01 	umull	sl, fp, r2, r1
 801523a:	445b      	add	r3, fp
 801523c:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801523e:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 8015242:	17da      	asrs	r2, r3, #31
 8015244:	67bb      	str	r3, [r7, #120]	; 0x78
 8015246:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 8015248:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 801524c:	17da      	asrs	r2, r3, #31
 801524e:	673b      	str	r3, [r7, #112]	; 0x70
 8015250:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8015252:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8015256:	462b      	mov	r3, r5
 8015258:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801525c:	4642      	mov	r2, r8
 801525e:	fb02 f203 	mul.w	r2, r2, r3
 8015262:	464b      	mov	r3, r9
 8015264:	4621      	mov	r1, r4
 8015266:	fb01 f303 	mul.w	r3, r1, r3
 801526a:	4413      	add	r3, r2
 801526c:	4622      	mov	r2, r4
 801526e:	4641      	mov	r1, r8
 8015270:	fba2 1201 	umull	r1, r2, r2, r1
 8015274:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015278:	460a      	mov	r2, r1
 801527a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 801527e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015282:	4413      	add	r3, r2
 8015284:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8015288:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 801528c:	460b      	mov	r3, r1
 801528e:	eb1a 0303 	adds.w	r3, sl, r3
 8015292:	62bb      	str	r3, [r7, #40]	; 0x28
 8015294:	4613      	mov	r3, r2
 8015296:	eb4b 0303 	adc.w	r3, fp, r3
 801529a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801529c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80152a0:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 80152a4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80152a8:	1c51      	adds	r1, r2, #1
 80152aa:	66b9      	str	r1, [r7, #104]	; 0x68
 80152ac:	f143 0300 	adc.w	r3, r3, #0
 80152b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80152b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80152b6:	460b      	mov	r3, r1
 80152b8:	0fdb      	lsrs	r3, r3, #31
 80152ba:	2200      	movs	r2, #0
 80152bc:	623b      	str	r3, [r7, #32]
 80152be:	627a      	str	r2, [r7, #36]	; 0x24
 80152c0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80152c4:	4623      	mov	r3, r4
 80152c6:	4602      	mov	r2, r0
 80152c8:	189b      	adds	r3, r3, r2
 80152ca:	61bb      	str	r3, [r7, #24]
 80152cc:	460b      	mov	r3, r1
 80152ce:	462a      	mov	r2, r5
 80152d0:	eb42 0303 	adc.w	r3, r2, r3
 80152d4:	61fb      	str	r3, [r7, #28]
 80152d6:	f04f 0200 	mov.w	r2, #0
 80152da:	f04f 0300 	mov.w	r3, #0
 80152de:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80152e2:	4621      	mov	r1, r4
 80152e4:	084a      	lsrs	r2, r1, #1
 80152e6:	4629      	mov	r1, r5
 80152e8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80152ec:	4629      	mov	r1, r5
 80152ee:	104b      	asrs	r3, r1, #1
 80152f0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 80152f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80152f8:	2200      	movs	r2, #0
 80152fa:	663b      	str	r3, [r7, #96]	; 0x60
 80152fc:	667a      	str	r2, [r7, #100]	; 0x64
 80152fe:	f04f 0200 	mov.w	r2, #0
 8015302:	f04f 0300 	mov.w	r3, #0
 8015306:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801530a:	4629      	mov	r1, r5
 801530c:	008b      	lsls	r3, r1, #2
 801530e:	4621      	mov	r1, r4
 8015310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015314:	4621      	mov	r1, r4
 8015316:	008a      	lsls	r2, r1, #2
 8015318:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801531c:	1884      	adds	r4, r0, r2
 801531e:	613c      	str	r4, [r7, #16]
 8015320:	eb41 0303 	adc.w	r3, r1, r3
 8015324:	617b      	str	r3, [r7, #20]
 8015326:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801532a:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
 801532e:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8015332:	2b00      	cmp	r3, #0
 8015334:	d132      	bne.n	801539c <VL53L1_f_040+0x4ae>
		xtalk_avg = do_division_s(
 8015336:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 801533a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801533e:	1884      	adds	r4, r0, r2
 8015340:	65bc      	str	r4, [r7, #88]	; 0x58
 8015342:	eb41 0303 	adc.w	r3, r1, r3
 8015346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015348:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801534c:	460b      	mov	r3, r1
 801534e:	3301      	adds	r3, #1
 8015350:	653b      	str	r3, [r7, #80]	; 0x50
 8015352:	4613      	mov	r3, r2
 8015354:	f143 0300 	adc.w	r3, r3, #0
 8015358:	657b      	str	r3, [r7, #84]	; 0x54
 801535a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801535e:	460b      	mov	r3, r1
 8015360:	0fdb      	lsrs	r3, r3, #31
 8015362:	2200      	movs	r2, #0
 8015364:	60bb      	str	r3, [r7, #8]
 8015366:	60fa      	str	r2, [r7, #12]
 8015368:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801536c:	4623      	mov	r3, r4
 801536e:	4602      	mov	r2, r0
 8015370:	189b      	adds	r3, r3, r2
 8015372:	603b      	str	r3, [r7, #0]
 8015374:	460b      	mov	r3, r1
 8015376:	462a      	mov	r2, r5
 8015378:	eb42 0303 	adc.w	r3, r2, r3
 801537c:	607b      	str	r3, [r7, #4]
 801537e:	f04f 0200 	mov.w	r2, #0
 8015382:	f04f 0300 	mov.w	r3, #0
 8015386:	e9d7 4500 	ldrd	r4, r5, [r7]
 801538a:	4621      	mov	r1, r4
 801538c:	084a      	lsrs	r2, r1, #1
 801538e:	4629      	mov	r1, r5
 8015390:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8015394:	4629      	mov	r1, r5
 8015396:	104b      	asrs	r3, r1, #1
 8015398:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
 801539c:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d109      	bne.n	80153b8 <VL53L1_f_040+0x4ca>
		if (xtalk_avg < 0)
 80153a4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	da05      	bge.n	80153b8 <VL53L1_f_040+0x4ca>
			xtalk_avg = 0;
 80153ac:	f04f 0200 	mov.w	r2, #0
 80153b0:	f04f 0300 	mov.w	r3, #0
 80153b4:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 80153b8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80153bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80153c0:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 80153c2:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80153cc:	46bd      	mov	sp, r7
 80153ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080153d2 <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 80153d2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80153d6:	b09a      	sub	sp, #104	; 0x68
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6478      	str	r0, [r7, #68]	; 0x44
 80153dc:	6439      	str	r1, [r7, #64]	; 0x40
 80153de:	63fa      	str	r2, [r7, #60]	; 0x3c
 80153e0:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53L1_Error status              = VL53L1_ERROR_NONE;
 80153e2:	2300      	movs	r3, #0
 80153e4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 80153e8:	f04f 0200 	mov.w	r2, #0
 80153ec:	f04f 0300 	mov.w	r3, #0
 80153f0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 80153f4:	f04f 0200 	mov.w	r2, #0
 80153f8:	f04f 0300 	mov.w	r3, #0
 80153fc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 8015400:	f04f 0200 	mov.w	r2, #0
 8015404:	f04f 0300 	mov.w	r3, #0
 8015408:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 801540c:	2300      	movs	r3, #0
 801540e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8015412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015414:	2200      	movs	r2, #0
 8015416:	633b      	str	r3, [r7, #48]	; 0x30
 8015418:	637a      	str	r2, [r7, #52]	; 0x34
 801541a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801541c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015420:	2200      	movs	r2, #0
 8015422:	62bb      	str	r3, [r7, #40]	; 0x28
 8015424:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015426:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801542a:	460b      	mov	r3, r1
 801542c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801542e:	fb02 f203 	mul.w	r2, r2, r3
 8015432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015434:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8015438:	4601      	mov	r1, r0
 801543a:	fb01 f303 	mul.w	r3, r1, r3
 801543e:	4413      	add	r3, r2
 8015440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015444:	fba2 4501 	umull	r4, r5, r2, r1
 8015448:	442b      	add	r3, r5
 801544a:	461d      	mov	r5, r3
 801544c:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 8015450:	623b      	str	r3, [r7, #32]
 8015452:	f145 0300 	adc.w	r3, r5, #0
 8015456:	627b      	str	r3, [r7, #36]	; 0x24
 8015458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801545c:	f04f 0300 	mov.w	r3, #0
 8015460:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8015464:	f7eb fbc8 	bl	8000bf8 <__aeabi_uldivmod>
 8015468:	4602      	mov	r2, r0
 801546a:	460b      	mov	r3, r1
 801546c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8015470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015472:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8015476:	b29b      	uxth	r3, r3
 8015478:	2200      	movs	r2, #0
 801547a:	61bb      	str	r3, [r7, #24]
 801547c:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 801547e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015480:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8015484:	4622      	mov	r2, r4
 8015486:	fb02 f203 	mul.w	r2, r2, r3
 801548a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801548c:	4629      	mov	r1, r5
 801548e:	fb01 f303 	mul.w	r3, r1, r3
 8015492:	4413      	add	r3, r2
 8015494:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015496:	4621      	mov	r1, r4
 8015498:	fba2 ab01 	umull	sl, fp, r2, r1
 801549c:	445b      	add	r3, fp
 801549e:	469b      	mov	fp, r3
 80154a0:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 80154a4:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 80154a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80154ac:	f04f 0200 	mov.w	r2, #0
 80154b0:	f04f 0300 	mov.w	r3, #0
 80154b4:	0a02      	lsrs	r2, r0, #8
 80154b6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80154ba:	0a0b      	lsrs	r3, r1, #8
 80154bc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 80154c0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80154c4:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 80154c8:	6139      	str	r1, [r7, #16]
 80154ca:	f143 0300 	adc.w	r3, r3, #0
 80154ce:	617b      	str	r3, [r7, #20]
 80154d0:	f04f 0200 	mov.w	r2, #0
 80154d4:	f04f 0300 	mov.w	r3, #0
 80154d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80154dc:	4621      	mov	r1, r4
 80154de:	0aca      	lsrs	r2, r1, #11
 80154e0:	4629      	mov	r1, r5
 80154e2:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 80154e6:	4629      	mov	r1, r5
 80154e8:	0acb      	lsrs	r3, r1, #11
 80154ea:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 80154ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80154f2:	2b01      	cmp	r3, #1
 80154f4:	d305      	bcc.n	8015502 <VL53L1_f_041+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 80154f6:	f04f 32ff 	mov.w	r2, #4294967295
 80154fa:	f04f 0300 	mov.w	r3, #0
 80154fe:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8015502:	2300      	movs	r3, #0
 8015504:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015508:	e041      	b.n	801558e <VL53L1_f_041+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 801550a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801550e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015510:	3302      	adds	r3, #2
 8015512:	009b      	lsls	r3, r3, #2
 8015514:	4413      	add	r3, r2
 8015516:	685b      	ldr	r3, [r3, #4]
 8015518:	2200      	movs	r2, #0
 801551a:	60bb      	str	r3, [r7, #8]
 801551c:	60fa      	str	r2, [r7, #12]
 801551e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015520:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8015524:	4622      	mov	r2, r4
 8015526:	fb02 f203 	mul.w	r2, r2, r3
 801552a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801552c:	4629      	mov	r1, r5
 801552e:	fb01 f303 	mul.w	r3, r1, r3
 8015532:	4413      	add	r3, r2
 8015534:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015536:	4621      	mov	r1, r4
 8015538:	fba2 8901 	umull	r8, r9, r2, r1
 801553c:	444b      	add	r3, r9
 801553e:	4699      	mov	r9, r3
 8015540:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 8015544:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8015548:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801554c:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 8015550:	6039      	str	r1, [r7, #0]
 8015552:	f143 0300 	adc.w	r3, r3, #0
 8015556:	607b      	str	r3, [r7, #4]
 8015558:	f04f 0200 	mov.w	r2, #0
 801555c:	f04f 0300 	mov.w	r3, #0
 8015560:	e9d7 4500 	ldrd	r4, r5, [r7]
 8015564:	4621      	mov	r1, r4
 8015566:	0a8a      	lsrs	r2, r1, #10
 8015568:	4629      	mov	r1, r5
 801556a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 801556e:	4629      	mov	r1, r5
 8015570:	0a8b      	lsrs	r3, r1, #10
 8015572:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8015576:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801557a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801557e:	3206      	adds	r2, #6
 8015580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8015584:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015588:	3301      	adds	r3, #1
 801558a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801558e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015590:	7a9b      	ldrb	r3, [r3, #10]
 8015592:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8015596:	429a      	cmp	r2, r3
 8015598:	d3b7      	bcc.n	801550a <VL53L1_f_041+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 801559a:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 801559e:	4618      	mov	r0, r3
 80155a0:	3768      	adds	r7, #104	; 0x68
 80155a2:	46bd      	mov	sp, r7
 80155a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080155a8 <VL53L1_init_zone_config_structure>:
	uint8_t y_inc,
	uint8_t y_zones,
	uint8_t width,
	uint8_t height,
	VL53L1_zone_config_t   *pdata)
{
 80155a8:	b590      	push	{r4, r7, lr}
 80155aa:	b085      	sub	sp, #20
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	4604      	mov	r4, r0
 80155b0:	4608      	mov	r0, r1
 80155b2:	4611      	mov	r1, r2
 80155b4:	461a      	mov	r2, r3
 80155b6:	4623      	mov	r3, r4
 80155b8:	71fb      	strb	r3, [r7, #7]
 80155ba:	4603      	mov	r3, r0
 80155bc:	71bb      	strb	r3, [r7, #6]
 80155be:	460b      	mov	r3, r1
 80155c0:	717b      	strb	r3, [r7, #5]
 80155c2:	4613      	mov	r3, r2
 80155c4:	713b      	strb	r3, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80155c6:	2300      	movs	r3, #0
 80155c8:	72fb      	strb	r3, [r7, #11]

	uint8_t  x  = 0;
 80155ca:	2300      	movs	r3, #0
 80155cc:	73fb      	strb	r3, [r7, #15]
	uint8_t  y  = 0;
 80155ce:	2300      	movs	r3, #0
 80155d0:	73bb      	strb	r3, [r7, #14]
	uint16_t  i  = 0;
 80155d2:	2300      	movs	r3, #0
 80155d4:	81bb      	strh	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 80155d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155d8:	2210      	movs	r2, #16
 80155da:	701a      	strb	r2, [r3, #0]

	i = 0;
 80155dc:	2300      	movs	r3, #0
 80155de:	81bb      	strh	r3, [r7, #12]

	for (x = 0 ; x < x_zones ; x++) {
 80155e0:	2300      	movs	r3, #0
 80155e2:	73fb      	strb	r3, [r7, #15]
 80155e4:	e046      	b.n	8015674 <VL53L1_init_zone_config_structure+0xcc>
		for (y = 0 ; y <  y_zones ; y++) {
 80155e6:	2300      	movs	r3, #0
 80155e8:	73bb      	strb	r3, [r7, #14]
 80155ea:	e03b      	b.n	8015664 <VL53L1_init_zone_config_structure+0xbc>

			if (i < VL53L1_MAX_USER_ZONES) {
 80155ec:	89bb      	ldrh	r3, [r7, #12]
 80155ee:	2b0f      	cmp	r3, #15
 80155f0:	d832      	bhi.n	8015658 <VL53L1_init_zone_config_structure+0xb0>

				pdata->active_zones = (uint8_t)i;
 80155f2:	89bb      	ldrh	r3, [r7, #12]
 80155f4:	b2da      	uxtb	r2, r3
 80155f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155f8:	705a      	strb	r2, [r3, #1]
				pdata->user_zones[i].height   = height;
 80155fa:	89bb      	ldrh	r3, [r7, #12]
 80155fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155fe:	3306      	adds	r3, #6
 8015600:	009b      	lsls	r3, r3, #2
 8015602:	4413      	add	r3, r2
 8015604:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015608:	71da      	strb	r2, [r3, #7]
				pdata->user_zones[i].width    = width;
 801560a:	89bb      	ldrh	r3, [r7, #12]
 801560c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801560e:	3306      	adds	r3, #6
 8015610:	009b      	lsls	r3, r3, #2
 8015612:	4413      	add	r3, r2
 8015614:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015618:	719a      	strb	r2, [r3, #6]
				pdata->user_zones[i].x_centre =
						x_off + (x * x_inc);
 801561a:	7bfa      	ldrb	r2, [r7, #15]
 801561c:	79bb      	ldrb	r3, [r7, #6]
 801561e:	fb12 f303 	smulbb	r3, r2, r3
 8015622:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].x_centre =
 8015624:	89bb      	ldrh	r3, [r7, #12]
						x_off + (x * x_inc);
 8015626:	79fa      	ldrb	r2, [r7, #7]
 8015628:	440a      	add	r2, r1
 801562a:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].x_centre =
 801562c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801562e:	3306      	adds	r3, #6
 8015630:	009b      	lsls	r3, r3, #2
 8015632:	4413      	add	r3, r2
 8015634:	460a      	mov	r2, r1
 8015636:	711a      	strb	r2, [r3, #4]
				pdata->user_zones[i].y_centre =
						y_off + (y * y_inc);
 8015638:	7bba      	ldrb	r2, [r7, #14]
 801563a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801563e:	fb12 f303 	smulbb	r3, r2, r3
 8015642:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].y_centre =
 8015644:	89bb      	ldrh	r3, [r7, #12]
						y_off + (y * y_inc);
 8015646:	793a      	ldrb	r2, [r7, #4]
 8015648:	440a      	add	r2, r1
 801564a:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].y_centre =
 801564c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801564e:	3306      	adds	r3, #6
 8015650:	009b      	lsls	r3, r3, #2
 8015652:	4413      	add	r3, r2
 8015654:	460a      	mov	r2, r1
 8015656:	715a      	strb	r2, [r3, #5]
			}

			i++;
 8015658:	89bb      	ldrh	r3, [r7, #12]
 801565a:	3301      	adds	r3, #1
 801565c:	81bb      	strh	r3, [r7, #12]
		for (y = 0 ; y <  y_zones ; y++) {
 801565e:	7bbb      	ldrb	r3, [r7, #14]
 8015660:	3301      	adds	r3, #1
 8015662:	73bb      	strb	r3, [r7, #14]
 8015664:	7bba      	ldrb	r2, [r7, #14]
 8015666:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801566a:	429a      	cmp	r2, r3
 801566c:	d3be      	bcc.n	80155ec <VL53L1_init_zone_config_structure+0x44>
	for (x = 0 ; x < x_zones ; x++) {
 801566e:	7bfb      	ldrb	r3, [r7, #15]
 8015670:	3301      	adds	r3, #1
 8015672:	73fb      	strb	r3, [r7, #15]
 8015674:	7bfa      	ldrb	r2, [r7, #15]
 8015676:	797b      	ldrb	r3, [r7, #5]
 8015678:	429a      	cmp	r2, r3
 801567a:	d3b4      	bcc.n	80155e6 <VL53L1_init_zone_config_structure+0x3e>
		}
	}

	status = VL53L1_init_zone_config_histogram_bins(pdata);
 801567c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801567e:	f000 f86c 	bl	801575a <VL53L1_init_zone_config_histogram_bins>
 8015682:	4603      	mov	r3, r0
 8015684:	72fb      	strb	r3, [r7, #11]


	LOG_FUNCTION_END(status);

	return status;
 8015686:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801568a:	4618      	mov	r0, r3
 801568c:	3714      	adds	r7, #20
 801568e:	46bd      	mov	sp, r7
 8015690:	bd90      	pop	{r4, r7, pc}

08015692 <VL53L1_zone_preset_xtalk_planar>:


VL53L1_Error VL53L1_zone_preset_xtalk_planar(
	VL53L1_general_config_t	*pgeneral,
	VL53L1_zone_config_t    *pzone_cfg)
{
 8015692:	b580      	push	{r7, lr}
 8015694:	b084      	sub	sp, #16
 8015696:	af00      	add	r7, sp, #0
 8015698:	6078      	str	r0, [r7, #4]
 801569a:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801569c:	2300      	movs	r3, #0
 801569e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pgeneral->global_config__stream_divider = 0x05;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	2205      	movs	r2, #5
 80156a4:	705a      	strb	r2, [r3, #1]


	pzone_cfg->active_zones                 = 0x04;
 80156a6:	683b      	ldr	r3, [r7, #0]
 80156a8:	2204      	movs	r2, #4
 80156aa:	705a      	strb	r2, [r3, #1]

	pzone_cfg->user_zones[0].height         = 15;
 80156ac:	683b      	ldr	r3, [r7, #0]
 80156ae:	220f      	movs	r2, #15
 80156b0:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width          = 7;
 80156b2:	683b      	ldr	r3, [r7, #0]
 80156b4:	2207      	movs	r2, #7
 80156b6:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre       = 4;
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	2204      	movs	r2, #4
 80156bc:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre       = 8;
 80156be:	683b      	ldr	r3, [r7, #0]
 80156c0:	2208      	movs	r2, #8
 80156c2:	775a      	strb	r2, [r3, #29]

	pzone_cfg->user_zones[1].height         = 15;
 80156c4:	683b      	ldr	r3, [r7, #0]
 80156c6:	220f      	movs	r2, #15
 80156c8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pzone_cfg->user_zones[1].width          = 7;
 80156cc:	683b      	ldr	r3, [r7, #0]
 80156ce:	2207      	movs	r2, #7
 80156d0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pzone_cfg->user_zones[1].x_centre       = 12;
 80156d4:	683b      	ldr	r3, [r7, #0]
 80156d6:	220c      	movs	r2, #12
 80156d8:	f883 2020 	strb.w	r2, [r3, #32]
	pzone_cfg->user_zones[1].y_centre       = 8;
 80156dc:	683b      	ldr	r3, [r7, #0]
 80156de:	2208      	movs	r2, #8
 80156e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pzone_cfg->user_zones[2].height         = 7;
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	2207      	movs	r2, #7
 80156e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pzone_cfg->user_zones[2].width          = 15;
 80156ec:	683b      	ldr	r3, [r7, #0]
 80156ee:	220f      	movs	r2, #15
 80156f0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pzone_cfg->user_zones[2].x_centre       = 8;
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	2208      	movs	r2, #8
 80156f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pzone_cfg->user_zones[2].y_centre       = 4;
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	2204      	movs	r2, #4
 8015700:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	pzone_cfg->user_zones[3].height         = 7;
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	2207      	movs	r2, #7
 8015708:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pzone_cfg->user_zones[3].width          = 15;
 801570c:	683b      	ldr	r3, [r7, #0]
 801570e:	220f      	movs	r2, #15
 8015710:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pzone_cfg->user_zones[3].x_centre       = 8;
 8015714:	683b      	ldr	r3, [r7, #0]
 8015716:	2208      	movs	r2, #8
 8015718:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pzone_cfg->user_zones[3].y_centre       = 12;
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	220c      	movs	r2, #12
 8015720:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29



	pzone_cfg->user_zones[4].height         = 15;
 8015724:	683b      	ldr	r3, [r7, #0]
 8015726:	220f      	movs	r2, #15
 8015728:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	pzone_cfg->user_zones[4].width          = 15;
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	220f      	movs	r2, #15
 8015730:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	pzone_cfg->user_zones[4].x_centre       = 8;
 8015734:	683b      	ldr	r3, [r7, #0]
 8015736:	2208      	movs	r2, #8
 8015738:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pzone_cfg->user_zones[4].y_centre       = 8;
 801573c:	683b      	ldr	r3, [r7, #0]
 801573e:	2208      	movs	r2, #8
 8015740:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 8015744:	6838      	ldr	r0, [r7, #0]
 8015746:	f000 f808 	bl	801575a <VL53L1_init_zone_config_histogram_bins>
 801574a:	4603      	mov	r3, r0
 801574c:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(status);

	return status;
 801574e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015752:	4618      	mov	r0, r3
 8015754:	3710      	adds	r7, #16
 8015756:	46bd      	mov	sp, r7
 8015758:	bd80      	pop	{r7, pc}

0801575a <VL53L1_init_zone_config_histogram_bins>:


VL53L1_Error VL53L1_init_zone_config_histogram_bins(
	VL53L1_zone_config_t   *pdata)
{
 801575a:	b480      	push	{r7}
 801575c:	b085      	sub	sp, #20
 801575e:	af00      	add	r7, sp, #0
 8015760:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015762:	2300      	movs	r3, #0
 8015764:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8015766:	2300      	movs	r3, #0
 8015768:	73fb      	strb	r3, [r7, #15]
 801576a:	e008      	b.n	801577e <VL53L1_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 801576c:	7bfb      	ldrb	r3, [r7, #15]
 801576e:	687a      	ldr	r2, [r7, #4]
 8015770:	4413      	add	r3, r2
 8015772:	2201      	movs	r2, #1
 8015774:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (i = 0; i < pdata->max_zones; i++)
 8015778:	7bfb      	ldrb	r3, [r7, #15]
 801577a:	3301      	adds	r3, #1
 801577c:	73fb      	strb	r3, [r7, #15]
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	781b      	ldrb	r3, [r3, #0]
 8015782:	7bfa      	ldrb	r2, [r7, #15]
 8015784:	429a      	cmp	r2, r3
 8015786:	d3f1      	bcc.n	801576c <VL53L1_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 8015788:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 801578c:	4618      	mov	r0, r3
 801578e:	3714      	adds	r7, #20
 8015790:	46bd      	mov	sp, r7
 8015792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015796:	4770      	bx	lr

08015798 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8015798:	b580      	push	{r7, lr}
 801579a:	b084      	sub	sp, #16
 801579c:	af00      	add	r7, sp, #0
 801579e:	60f8      	str	r0, [r7, #12]
 80157a0:	60b9      	str	r1, [r7, #8]
 80157a2:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	68db      	ldr	r3, [r3, #12]
 80157a8:	68fa      	ldr	r2, [r7, #12]
 80157aa:	8910      	ldrh	r0, [r2, #8]
 80157ac:	687a      	ldr	r2, [r7, #4]
 80157ae:	b292      	uxth	r2, r2
 80157b0:	68b9      	ldr	r1, [r7, #8]
 80157b2:	4798      	blx	r3
 80157b4:	4603      	mov	r3, r0
}
 80157b6:	4618      	mov	r0, r3
 80157b8:	3710      	adds	r7, #16
 80157ba:	46bd      	mov	sp, r7
 80157bc:	bd80      	pop	{r7, pc}

080157be <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80157be:	b580      	push	{r7, lr}
 80157c0:	b084      	sub	sp, #16
 80157c2:	af00      	add	r7, sp, #0
 80157c4:	60f8      	str	r0, [r7, #12]
 80157c6:	60b9      	str	r1, [r7, #8]
 80157c8:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	691b      	ldr	r3, [r3, #16]
 80157ce:	68fa      	ldr	r2, [r7, #12]
 80157d0:	8910      	ldrh	r0, [r2, #8]
 80157d2:	687a      	ldr	r2, [r7, #4]
 80157d4:	b292      	uxth	r2, r2
 80157d6:	68b9      	ldr	r1, [r7, #8]
 80157d8:	4798      	blx	r3
 80157da:	4603      	mov	r3, r0
}
 80157dc:	4618      	mov	r0, r3
 80157de:	3710      	adds	r7, #16
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}

080157e4 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b086      	sub	sp, #24
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	60f8      	str	r0, [r7, #12]
 80157ec:	607a      	str	r2, [r7, #4]
 80157ee:	603b      	str	r3, [r7, #0]
 80157f0:	460b      	mov	r3, r1
 80157f2:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80157f4:	2300      	movs	r3, #0
 80157f6:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80157f8:	683b      	ldr	r3, [r7, #0]
 80157fa:	2bff      	cmp	r3, #255	; 0xff
 80157fc:	d902      	bls.n	8015804 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 80157fe:	f06f 0303 	mvn.w	r3, #3
 8015802:	e01d      	b.n	8015840 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8015804:	897b      	ldrh	r3, [r7, #10]
 8015806:	0a1b      	lsrs	r3, r3, #8
 8015808:	b29b      	uxth	r3, r3
 801580a:	b2da      	uxtb	r2, r3
 801580c:	4b0e      	ldr	r3, [pc, #56]	; (8015848 <VL53L1_WriteMulti+0x64>)
 801580e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8015810:	897b      	ldrh	r3, [r7, #10]
 8015812:	b2da      	uxtb	r2, r3
 8015814:	4b0c      	ldr	r3, [pc, #48]	; (8015848 <VL53L1_WriteMulti+0x64>)
 8015816:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8015818:	683a      	ldr	r2, [r7, #0]
 801581a:	6879      	ldr	r1, [r7, #4]
 801581c:	480b      	ldr	r0, [pc, #44]	; (801584c <VL53L1_WriteMulti+0x68>)
 801581e:	f005 fa07 	bl	801ac30 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8015822:	683b      	ldr	r3, [r7, #0]
 8015824:	3302      	adds	r3, #2
 8015826:	461a      	mov	r2, r3
 8015828:	4907      	ldr	r1, [pc, #28]	; (8015848 <VL53L1_WriteMulti+0x64>)
 801582a:	68f8      	ldr	r0, [r7, #12]
 801582c:	f7ff ffb4 	bl	8015798 <_I2CWrite>
 8015830:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8015832:	693b      	ldr	r3, [r7, #16]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d001      	beq.n	801583c <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8015838:	23f3      	movs	r3, #243	; 0xf3
 801583a:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 801583c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015840:	4618      	mov	r0, r3
 8015842:	3718      	adds	r7, #24
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}
 8015848:	20008748 	.word	0x20008748
 801584c:	2000874a 	.word	0x2000874a

08015850 <VL53L1_ReadMulti>:

VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8015850:	b580      	push	{r7, lr}
 8015852:	b086      	sub	sp, #24
 8015854:	af00      	add	r7, sp, #0
 8015856:	60f8      	str	r0, [r7, #12]
 8015858:	607a      	str	r2, [r7, #4]
 801585a:	603b      	str	r3, [r7, #0]
 801585c:	460b      	mov	r3, r1
 801585e:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8015860:	2300      	movs	r3, #0
 8015862:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8015864:	897b      	ldrh	r3, [r7, #10]
 8015866:	0a1b      	lsrs	r3, r3, #8
 8015868:	b29b      	uxth	r3, r3
 801586a:	b2da      	uxtb	r2, r3
 801586c:	4b12      	ldr	r3, [pc, #72]	; (80158b8 <VL53L1_ReadMulti+0x68>)
 801586e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8015870:	897b      	ldrh	r3, [r7, #10]
 8015872:	b2da      	uxtb	r2, r3
 8015874:	4b10      	ldr	r3, [pc, #64]	; (80158b8 <VL53L1_ReadMulti+0x68>)
 8015876:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8015878:	2202      	movs	r2, #2
 801587a:	490f      	ldr	r1, [pc, #60]	; (80158b8 <VL53L1_ReadMulti+0x68>)
 801587c:	68f8      	ldr	r0, [r7, #12]
 801587e:	f7ff ff8b 	bl	8015798 <_I2CWrite>
 8015882:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8015884:	693b      	ldr	r3, [r7, #16]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d002      	beq.n	8015890 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801588a:	23f3      	movs	r3, #243	; 0xf3
 801588c:	75fb      	strb	r3, [r7, #23]
        goto done;
 801588e:	e00c      	b.n	80158aa <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8015890:	683a      	ldr	r2, [r7, #0]
 8015892:	6879      	ldr	r1, [r7, #4]
 8015894:	68f8      	ldr	r0, [r7, #12]
 8015896:	f7ff ff92 	bl	80157be <_I2CRead>
 801589a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801589c:	693b      	ldr	r3, [r7, #16]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d002      	beq.n	80158a8 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80158a2:	23f3      	movs	r3, #243	; 0xf3
 80158a4:	75fb      	strb	r3, [r7, #23]
 80158a6:	e000      	b.n	80158aa <VL53L1_ReadMulti+0x5a>
    }
done:
 80158a8:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 80158aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80158ae:	4618      	mov	r0, r3
 80158b0:	3718      	adds	r7, #24
 80158b2:	46bd      	mov	sp, r7
 80158b4:	bd80      	pop	{r7, pc}
 80158b6:	bf00      	nop
 80158b8:	20008748 	.word	0x20008748

080158bc <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 80158bc:	b580      	push	{r7, lr}
 80158be:	b084      	sub	sp, #16
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
 80158c4:	460b      	mov	r3, r1
 80158c6:	807b      	strh	r3, [r7, #2]
 80158c8:	4613      	mov	r3, r2
 80158ca:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80158cc:	2300      	movs	r3, #0
 80158ce:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80158d0:	887b      	ldrh	r3, [r7, #2]
 80158d2:	0a1b      	lsrs	r3, r3, #8
 80158d4:	b29b      	uxth	r3, r3
 80158d6:	b2da      	uxtb	r2, r3
 80158d8:	4b0c      	ldr	r3, [pc, #48]	; (801590c <VL53L1_WrByte+0x50>)
 80158da:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80158dc:	887b      	ldrh	r3, [r7, #2]
 80158de:	b2da      	uxtb	r2, r3
 80158e0:	4b0a      	ldr	r3, [pc, #40]	; (801590c <VL53L1_WrByte+0x50>)
 80158e2:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 80158e4:	4a09      	ldr	r2, [pc, #36]	; (801590c <VL53L1_WrByte+0x50>)
 80158e6:	787b      	ldrb	r3, [r7, #1]
 80158e8:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80158ea:	2203      	movs	r2, #3
 80158ec:	4907      	ldr	r1, [pc, #28]	; (801590c <VL53L1_WrByte+0x50>)
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	f7ff ff52 	bl	8015798 <_I2CWrite>
 80158f4:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80158f6:	68bb      	ldr	r3, [r7, #8]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d001      	beq.n	8015900 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80158fc:	23f3      	movs	r3, #243	; 0xf3
 80158fe:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8015900:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015904:	4618      	mov	r0, r3
 8015906:	3710      	adds	r7, #16
 8015908:	46bd      	mov	sp, r7
 801590a:	bd80      	pop	{r7, pc}
 801590c:	20008748 	.word	0x20008748

08015910 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 8015910:	b580      	push	{r7, lr}
 8015912:	b084      	sub	sp, #16
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
 8015918:	460b      	mov	r3, r1
 801591a:	807b      	strh	r3, [r7, #2]
 801591c:	4613      	mov	r3, r2
 801591e:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8015920:	2300      	movs	r3, #0
 8015922:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8015924:	887b      	ldrh	r3, [r7, #2]
 8015926:	0a1b      	lsrs	r3, r3, #8
 8015928:	b29b      	uxth	r3, r3
 801592a:	b2da      	uxtb	r2, r3
 801592c:	4b10      	ldr	r3, [pc, #64]	; (8015970 <VL53L1_WrWord+0x60>)
 801592e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8015930:	887b      	ldrh	r3, [r7, #2]
 8015932:	b2da      	uxtb	r2, r3
 8015934:	4b0e      	ldr	r3, [pc, #56]	; (8015970 <VL53L1_WrWord+0x60>)
 8015936:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8015938:	883b      	ldrh	r3, [r7, #0]
 801593a:	0a1b      	lsrs	r3, r3, #8
 801593c:	b29b      	uxth	r3, r3
 801593e:	b2da      	uxtb	r2, r3
 8015940:	4b0b      	ldr	r3, [pc, #44]	; (8015970 <VL53L1_WrWord+0x60>)
 8015942:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8015944:	883b      	ldrh	r3, [r7, #0]
 8015946:	b2da      	uxtb	r2, r3
 8015948:	4b09      	ldr	r3, [pc, #36]	; (8015970 <VL53L1_WrWord+0x60>)
 801594a:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 801594c:	2204      	movs	r2, #4
 801594e:	4908      	ldr	r1, [pc, #32]	; (8015970 <VL53L1_WrWord+0x60>)
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	f7ff ff21 	bl	8015798 <_I2CWrite>
 8015956:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8015958:	68bb      	ldr	r3, [r7, #8]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d001      	beq.n	8015962 <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801595e:	23f3      	movs	r3, #243	; 0xf3
 8015960:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8015962:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015966:	4618      	mov	r0, r3
 8015968:	3710      	adds	r7, #16
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}
 801596e:	bf00      	nop
 8015970:	20008748 	.word	0x20008748

08015974 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8015974:	b580      	push	{r7, lr}
 8015976:	b086      	sub	sp, #24
 8015978:	af00      	add	r7, sp, #0
 801597a:	60f8      	str	r0, [r7, #12]
 801597c:	460b      	mov	r3, r1
 801597e:	607a      	str	r2, [r7, #4]
 8015980:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8015982:	2300      	movs	r3, #0
 8015984:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8015986:	897b      	ldrh	r3, [r7, #10]
 8015988:	0a1b      	lsrs	r3, r3, #8
 801598a:	b29b      	uxth	r3, r3
 801598c:	b2da      	uxtb	r2, r3
 801598e:	4b12      	ldr	r3, [pc, #72]	; (80159d8 <VL53L1_RdByte+0x64>)
 8015990:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8015992:	897b      	ldrh	r3, [r7, #10]
 8015994:	b2da      	uxtb	r2, r3
 8015996:	4b10      	ldr	r3, [pc, #64]	; (80159d8 <VL53L1_RdByte+0x64>)
 8015998:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 801599a:	2202      	movs	r2, #2
 801599c:	490e      	ldr	r1, [pc, #56]	; (80159d8 <VL53L1_RdByte+0x64>)
 801599e:	68f8      	ldr	r0, [r7, #12]
 80159a0:	f7ff fefa 	bl	8015798 <_I2CWrite>
 80159a4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80159a6:	693b      	ldr	r3, [r7, #16]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d002      	beq.n	80159b2 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80159ac:	23f3      	movs	r3, #243	; 0xf3
 80159ae:	75fb      	strb	r3, [r7, #23]
        goto done;
 80159b0:	e00c      	b.n	80159cc <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 80159b2:	2201      	movs	r2, #1
 80159b4:	6879      	ldr	r1, [r7, #4]
 80159b6:	68f8      	ldr	r0, [r7, #12]
 80159b8:	f7ff ff01 	bl	80157be <_I2CRead>
 80159bc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80159be:	693b      	ldr	r3, [r7, #16]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d002      	beq.n	80159ca <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80159c4:	23f3      	movs	r3, #243	; 0xf3
 80159c6:	75fb      	strb	r3, [r7, #23]
 80159c8:	e000      	b.n	80159cc <VL53L1_RdByte+0x58>
    }
done:
 80159ca:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 80159cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80159d0:	4618      	mov	r0, r3
 80159d2:	3718      	adds	r7, #24
 80159d4:	46bd      	mov	sp, r7
 80159d6:	bd80      	pop	{r7, pc}
 80159d8:	20008748 	.word	0x20008748

080159dc <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 80159dc:	b580      	push	{r7, lr}
 80159de:	b086      	sub	sp, #24
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	60f8      	str	r0, [r7, #12]
 80159e4:	460b      	mov	r3, r1
 80159e6:	607a      	str	r2, [r7, #4]
 80159e8:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80159ea:	2300      	movs	r3, #0
 80159ec:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80159ee:	897b      	ldrh	r3, [r7, #10]
 80159f0:	0a1b      	lsrs	r3, r3, #8
 80159f2:	b29b      	uxth	r3, r3
 80159f4:	b2da      	uxtb	r2, r3
 80159f6:	4b18      	ldr	r3, [pc, #96]	; (8015a58 <VL53L1_RdWord+0x7c>)
 80159f8:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80159fa:	897b      	ldrh	r3, [r7, #10]
 80159fc:	b2da      	uxtb	r2, r3
 80159fe:	4b16      	ldr	r3, [pc, #88]	; (8015a58 <VL53L1_RdWord+0x7c>)
 8015a00:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8015a02:	2202      	movs	r2, #2
 8015a04:	4914      	ldr	r1, [pc, #80]	; (8015a58 <VL53L1_RdWord+0x7c>)
 8015a06:	68f8      	ldr	r0, [r7, #12]
 8015a08:	f7ff fec6 	bl	8015798 <_I2CWrite>
 8015a0c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8015a0e:	693b      	ldr	r3, [r7, #16]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d002      	beq.n	8015a1a <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8015a14:	23f3      	movs	r3, #243	; 0xf3
 8015a16:	75fb      	strb	r3, [r7, #23]
        goto done;
 8015a18:	e017      	b.n	8015a4a <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8015a1a:	2202      	movs	r2, #2
 8015a1c:	490e      	ldr	r1, [pc, #56]	; (8015a58 <VL53L1_RdWord+0x7c>)
 8015a1e:	68f8      	ldr	r0, [r7, #12]
 8015a20:	f7ff fecd 	bl	80157be <_I2CRead>
 8015a24:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8015a26:	693b      	ldr	r3, [r7, #16]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d002      	beq.n	8015a32 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8015a2c:	23f3      	movs	r3, #243	; 0xf3
 8015a2e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8015a30:	e00b      	b.n	8015a4a <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8015a32:	4b09      	ldr	r3, [pc, #36]	; (8015a58 <VL53L1_RdWord+0x7c>)
 8015a34:	781b      	ldrb	r3, [r3, #0]
 8015a36:	b29b      	uxth	r3, r3
 8015a38:	021b      	lsls	r3, r3, #8
 8015a3a:	b29a      	uxth	r2, r3
 8015a3c:	4b06      	ldr	r3, [pc, #24]	; (8015a58 <VL53L1_RdWord+0x7c>)
 8015a3e:	785b      	ldrb	r3, [r3, #1]
 8015a40:	b29b      	uxth	r3, r3
 8015a42:	4413      	add	r3, r2
 8015a44:	b29a      	uxth	r2, r3
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8015a4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015a4e:	4618      	mov	r0, r3
 8015a50:	3718      	adds	r7, #24
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd80      	pop	{r7, pc}
 8015a56:	bf00      	nop
 8015a58:	20008748 	.word	0x20008748

08015a5c <VL53L1_GetTickCount>:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(VL53L1_DEV Dev, uint32_t *ptick_count_ms)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b084      	sub	sp, #16
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
 8015a64:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8015a66:	2300      	movs	r3, #0
 8015a68:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	695b      	ldr	r3, [r3, #20]
 8015a6e:	4798      	blx	r3
 8015a70:	4603      	mov	r3, r0
 8015a72:	461a      	mov	r2, r3
 8015a74:	683b      	ldr	r3, [r7, #0]
 8015a76:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8015a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	3710      	adds	r7, #16
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd80      	pop	{r7, pc}

08015a84 <VL53L1_WaitMs>:
	
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_DEV Dev, int32_t wait_ms){
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b082      	sub	sp, #8
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
 8015a8c:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_ms);
 8015a8e:	683b      	ldr	r3, [r7, #0]
 8015a90:	4619      	mov	r1, r3
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f000 f8d2 	bl	8015c3c <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8015a98:	2300      	movs	r3, #0
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3708      	adds	r7, #8
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}
	...

08015aa4 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_DEV Dev, int32_t wait_us){
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b082      	sub	sp, #8
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
 8015aac:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_us/1000);
 8015aae:	683b      	ldr	r3, [r7, #0]
 8015ab0:	4a07      	ldr	r2, [pc, #28]	; (8015ad0 <VL53L1_WaitUs+0x2c>)
 8015ab2:	fb82 1203 	smull	r1, r2, r2, r3
 8015ab6:	1192      	asrs	r2, r2, #6
 8015ab8:	17db      	asrs	r3, r3, #31
 8015aba:	1ad3      	subs	r3, r2, r3
 8015abc:	4619      	mov	r1, r3
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	f000 f8bc 	bl	8015c3c <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8015ac4:	2300      	movs	r3, #0
}
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	3708      	adds	r7, #8
 8015aca:	46bd      	mov	sp, r7
 8015acc:	bd80      	pop	{r7, pc}
 8015ace:	bf00      	nop
 8015ad0:	10624dd3 	.word	0x10624dd3

08015ad4 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8015ad4:	b590      	push	{r4, r7, lr}
 8015ad6:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8015ada:	af00      	add	r7, sp, #0
 8015adc:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8015ae0:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8015ae4:	6020      	str	r0, [r4, #0]
 8015ae6:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8015aea:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8015aee:	6001      	str	r1, [r0, #0]
 8015af0:	4619      	mov	r1, r3
 8015af2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015af6:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8015afa:	801a      	strh	r2, [r3, #0]
 8015afc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015b00:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 8015b04:	460a      	mov	r2, r1
 8015b06:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8015b0e:	2300      	movs	r3, #0
 8015b10:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8015b14:	2300      	movs	r3, #0
 8015b16:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8015b20:	2300      	movs	r3, #0
 8015b22:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8015b26:	2300      	movs	r3, #0
 8015b28:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8015b2c:	f107 0310 	add.w	r3, r7, #16
 8015b30:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015b34:	4940      	ldr	r1, [pc, #256]	; (8015c38 <VL53L1_WaitValueMaskEx+0x164>)
 8015b36:	4618      	mov	r0, r3
 8015b38:	f005 fd9e 	bl	801b678 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(Dev, &start_time_ms);
 8015b3c:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8015b40:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015b44:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8015b48:	4611      	mov	r1, r2
 8015b4a:	6818      	ldr	r0, [r3, #0]
 8015b4c:	f7ff ff86 	bl	8015a5c <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8015b50:	e04e      	b.n	8015bf0 <VL53L1_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8015b52:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d110      	bne.n	8015b7c <VL53L1_WaitValueMaskEx+0xa8>
			status = VL53L1_RdByte(
 8015b5a:	f207 2213 	addw	r2, r7, #531	; 0x213
 8015b5e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015b62:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8015b66:	8819      	ldrh	r1, [r3, #0]
 8015b68:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015b6c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8015b70:	6818      	ldr	r0, [r3, #0]
 8015b72:	f7ff feff 	bl	8015974 <VL53L1_RdByte>
 8015b76:	4603      	mov	r3, r0
 8015b78:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8015b7c:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8015b80:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8015b84:	4013      	ands	r3, r2
 8015b86:	b2db      	uxtb	r3, r3
 8015b88:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8015b8c:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 8015b90:	7812      	ldrb	r2, [r2, #0]
 8015b92:	429a      	cmp	r2, r3
 8015b94:	d102      	bne.n	8015b9c <VL53L1_WaitValueMaskEx+0xc8>
			found = 1;
 8015b96:	2301      	movs	r3, #1
 8015b98:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8015b9c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d114      	bne.n	8015bce <VL53L1_WaitValueMaskEx+0xfa>
 8015ba4:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d110      	bne.n	8015bce <VL53L1_WaitValueMaskEx+0xfa>
			found == 0 &&
 8015bac:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d00c      	beq.n	8015bce <VL53L1_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8015bb4:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8015bb8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015bbc:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8015bc0:	4611      	mov	r1, r2
 8015bc2:	6818      	ldr	r0, [r3, #0]
 8015bc4:	f7ff ff5e 	bl	8015a84 <VL53L1_WaitMs>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(Dev, &current_time_ms);
 8015bce:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8015bd2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015bd6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8015bda:	4611      	mov	r1, r2
 8015bdc:	6818      	ldr	r0, [r3, #0]
 8015bde:	f7ff ff3d 	bl	8015a5c <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8015be2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8015be6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8015bea:	1ad3      	subs	r3, r2, r3
 8015bec:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 8015bf0:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d10c      	bne.n	8015c12 <VL53L1_WaitValueMaskEx+0x13e>
 8015bf8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8015bfc:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8015c00:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	429a      	cmp	r2, r3
 8015c08:	d203      	bcs.n	8015c12 <VL53L1_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 8015c0a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d09f      	beq.n	8015b52 <VL53L1_WaitValueMaskEx+0x7e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8015c12:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d106      	bne.n	8015c28 <VL53L1_WaitValueMaskEx+0x154>
 8015c1a:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d102      	bne.n	8015c28 <VL53L1_WaitValueMaskEx+0x154>
		status = VL53L1_ERROR_TIME_OUT;
 8015c22:	23f9      	movs	r3, #249	; 0xf9
 8015c24:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8015c28:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8015c32:	46bd      	mov	sp, r7
 8015c34:	bd90      	pop	{r4, r7, pc}
 8015c36:	bf00      	nop
 8015c38:	0801dc68 	.word	0x0801dc68

08015c3c <VL53L1_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53L1_Error
  */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay)
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b084      	sub	sp, #16
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
 8015c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	695b      	ldr	r3, [r3, #20]
 8015c4a:	4798      	blx	r3
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8015c50:	bf00      	nop
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	695b      	ldr	r3, [r3, #20]
 8015c56:	4798      	blx	r3
 8015c58:	4603      	mov	r3, r0
 8015c5a:	461a      	mov	r2, r3
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	1ad3      	subs	r3, r2, r3
 8015c60:	683a      	ldr	r2, [r7, #0]
 8015c62:	429a      	cmp	r2, r3
 8015c64:	d8f5      	bhi.n	8015c52 <VL53L1_Delay+0x16>
  {
  }

  return VL53L1_ERROR_NONE;
 8015c66:	2300      	movs	r3, #0
}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	3710      	adds	r7, #16
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}

08015c70 <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b08c      	sub	sp, #48	; 0x30
 8015c74:	af06      	add	r7, sp, #24
 8015c76:	60f8      	str	r0, [r7, #12]
 8015c78:	60b9      	str	r1, [r7, #8]
 8015c7a:	607a      	str	r2, [r7, #4]
 8015c7c:	603b      	str	r3, [r7, #0]



	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8015c7e:	2300      	movs	r3, #0
 8015c80:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 8015c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c84:	9304      	str	r3, [sp, #16]
 8015c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c88:	9303      	str	r3, [sp, #12]
 8015c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c8c:	9302      	str	r3, [sp, #8]
 8015c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c90:	9301      	str	r3, [sp, #4]
 8015c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c94:	9300      	str	r3, [sp, #0]
 8015c96:	6a3b      	ldr	r3, [r7, #32]
 8015c98:	683a      	ldr	r2, [r7, #0]
 8015c9a:	6879      	ldr	r1, [r7, #4]
 8015c9c:	68b8      	ldr	r0, [r7, #8]
 8015c9e:	f7fc fefb 	bl	8012a98 <VL53L1_hist_process_data>
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8015ca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015caa:	4618      	mov	r0, r3
 8015cac:	3718      	adds	r7, #24
 8015cae:	46bd      	mov	sp, r7
 8015cb0:	bd80      	pop	{r7, pc}

08015cb2 <VL53L1CB_RegisterBusIO>:
  * @param pObj    vl53l1cb context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_RegisterBusIO(VL53L1CB_Object_t *pObj, VL53L1CB_IO_t *pIO)
{
 8015cb2:	b580      	push	{r7, lr}
 8015cb4:	b084      	sub	sp, #16
 8015cb6:	af00      	add	r7, sp, #0
 8015cb8:	6078      	str	r0, [r7, #4]
 8015cba:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d103      	bne.n	8015cca <VL53L1CB_RegisterBusIO+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015cc2:	f06f 0301 	mvn.w	r3, #1
 8015cc6:	60fb      	str	r3, [r7, #12]
 8015cc8:	e023      	b.n	8015d12 <VL53L1CB_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8015cca:	683b      	ldr	r3, [r7, #0]
 8015ccc:	681a      	ldr	r2, [r3, #0]
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8015cd2:	683b      	ldr	r3, [r7, #0]
 8015cd4:	685a      	ldr	r2, [r3, #4]
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8015cda:	683b      	ldr	r3, [r7, #0]
 8015cdc:	891a      	ldrh	r2, [r3, #8]
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8015ce2:	683b      	ldr	r3, [r7, #0]
 8015ce4:	68da      	ldr	r2, [r3, #12]
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8015cea:	683b      	ldr	r3, [r7, #0]
 8015cec:	691a      	ldr	r2, [r3, #16]
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	695a      	ldr	r2, [r3, #20]
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d004      	beq.n	8015d0c <VL53L1CB_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	4798      	blx	r3
 8015d08:	60f8      	str	r0, [r7, #12]
 8015d0a:	e002      	b.n	8015d12 <VL53L1CB_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L1CB_ERROR;
 8015d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8015d10:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8015d12:	68fb      	ldr	r3, [r7, #12]
}
 8015d14:	4618      	mov	r0, r3
 8015d16:	3710      	adds	r7, #16
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}

08015d1c <VL53L1CB_Init>:
  * @brief Initializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Init(VL53L1CB_Object_t *pObj)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b084      	sub	sp, #16
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015d2a:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d003      	beq.n	8015d3a <VL53L1CB_Init+0x1e>
  {
    ret =  VL53L1CB_ERROR;
 8015d32:	f04f 33ff 	mov.w	r3, #4294967295
 8015d36:	60fb      	str	r3, [r7, #12]
 8015d38:	e04d      	b.n	8015dd6 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_WaitDeviceBooted(pObj) != VL53L1_ERROR_NONE)
 8015d3a:	6878      	ldr	r0, [r7, #4]
 8015d3c:	f7ed f8d1 	bl	8002ee2 <VL53L1_WaitDeviceBooted>
 8015d40:	4603      	mov	r3, r0
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d003      	beq.n	8015d4e <VL53L1CB_Init+0x32>
  {
    ret =  VL53L1CB_ERROR;
 8015d46:	f04f 33ff 	mov.w	r3, #4294967295
 8015d4a:	60fb      	str	r3, [r7, #12]
 8015d4c:	e043      	b.n	8015dd6 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_DataInit(pObj) != VL53L1_ERROR_NONE)
 8015d4e:	6878      	ldr	r0, [r7, #4]
 8015d50:	f7ed f847 	bl	8002de2 <VL53L1_DataInit>
 8015d54:	4603      	mov	r3, r0
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d003      	beq.n	8015d62 <VL53L1CB_Init+0x46>
  {
    ret = VL53L1CB_ERROR;
 8015d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8015d5e:	60fb      	str	r3, [r7, #12]
 8015d60:	e039      	b.n	8015dd6 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_StaticInit(pObj) != VL53L1_ERROR_NONE)
 8015d62:	6878      	ldr	r0, [r7, #4]
 8015d64:	f7ed f892 	bl	8002e8c <VL53L1_StaticInit>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d003      	beq.n	8015d76 <VL53L1CB_Init+0x5a>
  {
    ret = VL53L1CB_ERROR;
 8015d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8015d72:	60fb      	str	r3, [r7, #12]
 8015d74:	e02f      	b.n	8015dd6 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_PerformRefSpadManagement(pObj) != VL53L1_ERROR_NONE)
 8015d76:	6878      	ldr	r0, [r7, #4]
 8015d78:	f7ee fe8a 	bl	8004a90 <VL53L1_PerformRefSpadManagement>
 8015d7c:	4603      	mov	r3, r0
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d003      	beq.n	8015d8a <VL53L1CB_Init+0x6e>
  {
    ret = VL53L1CB_ERROR;
 8015d82:	f04f 33ff 	mov.w	r3, #4294967295
 8015d86:	60fb      	str	r3, [r7, #12]
 8015d88:	e025      	b.n	8015dd6 <VL53L1CB_Init+0xba>
  }
  else
  {
    pObj->IsRanging = 0;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015d90:	2200      	movs	r2, #0
 8015d92:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    pObj->IsBlocking = 0;
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
    pObj->IsContinuous = 0;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015da8:	2200      	movs	r2, #0
 8015daa:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
    pObj->IsAmbientEnabled = 0;
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015db4:	2200      	movs	r2, #0
 8015db6:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = 0;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
    pObj->IsInitialized = 1;
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015dcc:	2201      	movs	r2, #1
 8015dce:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    ret = VL53L1CB_OK;
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015dd6:	68fb      	ldr	r3, [r7, #12]
}
 8015dd8:	4618      	mov	r0, r3
 8015dda:	3710      	adds	r7, #16
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bd80      	pop	{r7, pc}

08015de0 <VL53L1CB_DeInit>:
  * @brief Deinitializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_DeInit(VL53L1CB_Object_t *pObj)
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b084      	sub	sp, #16
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L1CB_ERROR;
 8015de8:	f04f 33ff 	mov.w	r3, #4294967295
 8015dec:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015df4:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8015df8:	2b01      	cmp	r3, #1
 8015dfa:	d111      	bne.n	8015e20 <VL53L1CB_DeInit+0x40>
  {
    /* De-initialize the vl53l1cb interface */
    if (pObj->IO.DeInit() != 0)
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	685b      	ldr	r3, [r3, #4]
 8015e00:	4798      	blx	r3
 8015e02:	4603      	mov	r3, r0
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d003      	beq.n	8015e10 <VL53L1CB_DeInit+0x30>
    {
      ret = VL53L1CB_ERROR;
 8015e08:	f04f 33ff 	mov.w	r3, #4294967295
 8015e0c:	60fb      	str	r3, [r7, #12]
 8015e0e:	e007      	b.n	8015e20 <VL53L1CB_DeInit+0x40>
    }
    else
    {
      ret = VL53L1CB_OK;
 8015e10:	2300      	movs	r3, #0
 8015e12:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    }
  }

  return ret;
 8015e20:	68fb      	ldr	r3, [r7, #12]
}
 8015e22:	4618      	mov	r0, r3
 8015e24:	3710      	adds	r7, #16
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bd80      	pop	{r7, pc}

08015e2a <VL53L1CB_ReadID>:
  * @param pObj    vl53l1cb context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ReadID(VL53L1CB_Object_t *pObj, uint32_t *pId)
{
 8015e2a:	b580      	push	{r7, lr}
 8015e2c:	b084      	sub	sp, #16
 8015e2e:	af00      	add	r7, sp, #0
 8015e30:	6078      	str	r0, [r7, #4]
 8015e32:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d002      	beq.n	8015e40 <VL53L1CB_ReadID+0x16>
 8015e3a:	683b      	ldr	r3, [r7, #0]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d103      	bne.n	8015e48 <VL53L1CB_ReadID+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015e40:	f06f 0301 	mvn.w	r3, #1
 8015e44:	60fb      	str	r3, [r7, #12]
 8015e46:	e00a      	b.n	8015e5e <VL53L1CB_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8015e48:	683b      	ldr	r3, [r7, #0]
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	601a      	str	r2, [r3, #0]
    ret = VL53L1_RdWord(pObj, VL53L1CB_ID_REG, (uint16_t *) pId);
 8015e4e:	683a      	ldr	r2, [r7, #0]
 8015e50:	f240 110f 	movw	r1, #271	; 0x10f
 8015e54:	6878      	ldr	r0, [r7, #4]
 8015e56:	f7ff fdc1 	bl	80159dc <VL53L1_RdWord>
 8015e5a:	4603      	mov	r3, r0
 8015e5c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015e5e:	68fb      	ldr	r3, [r7, #12]
}
 8015e60:	4618      	mov	r0, r3
 8015e62:	3710      	adds	r7, #16
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}

08015e68 <VL53L1CB_GetCapabilities>:
  * @param pObj    vl53l1cb context object.
  * @param pCap    Pointer to the vl53l1cb capabilities.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetCapabilities(VL53L1CB_Object_t *pObj, VL53L1CB_Capabilities_t *pCap)
{
 8015e68:	b480      	push	{r7}
 8015e6a:	b085      	sub	sp, #20
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
 8015e70:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d002      	beq.n	8015e7e <VL53L1CB_GetCapabilities+0x16>
 8015e78:	683b      	ldr	r3, [r7, #0]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d103      	bne.n	8015e86 <VL53L1CB_GetCapabilities+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015e7e:	f06f 0301 	mvn.w	r3, #1
 8015e82:	60fb      	str	r3, [r7, #12]
 8015e84:	e00d      	b.n	8015ea2 <VL53L1CB_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8015e86:	683b      	ldr	r3, [r7, #0]
 8015e88:	2201      	movs	r2, #1
 8015e8a:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L1CB_NB_TARGET_PER_ZONE;
 8015e8c:	683b      	ldr	r3, [r7, #0]
 8015e8e:	2204      	movs	r2, #4
 8015e90:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	2201      	movs	r2, #1
 8015e96:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8015e98:	683b      	ldr	r3, [r7, #0]
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	60da      	str	r2, [r3, #12]

    ret = VL53L1CB_OK;
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015ea2:	68fb      	ldr	r3, [r7, #12]
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	3714      	adds	r7, #20
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eae:	4770      	bx	lr

08015eb0 <VL53L1CB_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L1CB the profile corresponds to the distance modes.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigProfile(VL53L1CB_Object_t *pObj, VL53L1CB_ProfileConfig_t *pConfig)
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b084      	sub	sp, #16
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	6078      	str	r0, [r7, #4]
 8015eb8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d009      	beq.n	8015ed4 <VL53L1CB_ConfigProfile+0x24>
 8015ec0:	683b      	ldr	r3, [r7, #0]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d006      	beq.n	8015ed4 <VL53L1CB_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8015ec6:	683b      	ldr	r3, [r7, #0]
 8015ec8:	781b      	ldrb	r3, [r3, #0]
 8015eca:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L1CB_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8015ecc:	7afb      	ldrb	r3, [r7, #11]
 8015ece:	2b01      	cmp	r3, #1
 8015ed0:	d103      	bne.n	8015eda <VL53L1CB_ConfigProfile+0x2a>
 8015ed2:	e00c      	b.n	8015eee <VL53L1CB_ConfigProfile+0x3e>
    return VL53L1CB_INVALID_PARAM;
 8015ed4:	f06f 0301 	mvn.w	r3, #1
 8015ed8:	e043      	b.n	8015f62 <VL53L1CB_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8015eda:	7afb      	ldrb	r3, [r7, #11]
 8015edc:	2b02      	cmp	r3, #2
 8015ede:	d006      	beq.n	8015eee <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_MEDIUM) &&
 8015ee0:	7afb      	ldrb	r3, [r7, #11]
 8015ee2:	2b03      	cmp	r3, #3
 8015ee4:	d003      	beq.n	8015eee <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_LONG))
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015ee6:	f06f 0301 	mvn.w	r3, #1
 8015eea:	60fb      	str	r3, [r7, #12]
 8015eec:	e038      	b.n	8015f60 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetDistanceMode(pObj, ranging_profile) != VL53L1_ERROR_NONE)
 8015eee:	7afb      	ldrb	r3, [r7, #11]
 8015ef0:	4619      	mov	r1, r3
 8015ef2:	6878      	ldr	r0, [r7, #4]
 8015ef4:	f7ed f970 	bl	80031d8 <VL53L1_SetDistanceMode>
 8015ef8:	4603      	mov	r3, r0
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d003      	beq.n	8015f06 <VL53L1CB_ConfigProfile+0x56>
  {
    ret = VL53L1CB_ERROR;
 8015efe:	f04f 33ff 	mov.w	r3, #4294967295
 8015f02:	60fb      	str	r3, [r7, #12]
 8015f04:	e02c      	b.n	8015f60 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53L1_ERROR_NONE)
 8015f06:	683b      	ldr	r3, [r7, #0]
 8015f08:	685b      	ldr	r3, [r3, #4]
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8015f0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015f0e:	fb02 f303 	mul.w	r3, r2, r3
 8015f12:	4619      	mov	r1, r3
 8015f14:	6878      	ldr	r0, [r7, #4]
 8015f16:	f7ed f9ed 	bl	80032f4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d003      	beq.n	8015f28 <VL53L1CB_ConfigProfile+0x78>
  {
    ret = VL53L1CB_ERROR;
 8015f20:	f04f 33ff 	mov.w	r3, #4294967295
 8015f24:	60fb      	str	r3, [r7, #12]
 8015f26:	e01b      	b.n	8015f60 <VL53L1CB_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	68db      	ldr	r3, [r3, #12]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	bf14      	ite	ne
 8015f30:	2301      	movne	r3, #1
 8015f32:	2300      	moveq	r3, #0
 8015f34:	b2db      	uxtb	r3, r3
 8015f36:	461a      	mov	r2, r3
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015f3e:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8015f42:	683b      	ldr	r3, [r7, #0]
 8015f44:	691b      	ldr	r3, [r3, #16]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	bf14      	ite	ne
 8015f4a:	2301      	movne	r3, #1
 8015f4c:	2300      	moveq	r3, #0
 8015f4e:	b2db      	uxtb	r3, r3
 8015f50:	461a      	mov	r2, r3
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015f58:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d

    ret = VL53L1CB_OK;
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015f60:	68fb      	ldr	r3, [r7, #12]
}
 8015f62:	4618      	mov	r0, r3
 8015f64:	3710      	adds	r7, #16
 8015f66:	46bd      	mov	sp, r7
 8015f68:	bd80      	pop	{r7, pc}

08015f6a <VL53L1CB_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigROI(VL53L1CB_Object_t *pObj, VL53L1CB_ROIConfig_t *pROIConfig)
{
 8015f6a:	b580      	push	{r7, lr}
 8015f6c:	b094      	sub	sp, #80	; 0x50
 8015f6e:	af00      	add	r7, sp, #0
 8015f70:	6078      	str	r0, [r7, #4]
 8015f72:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53L1_RoiConfig_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d002      	beq.n	8015f80 <VL53L1CB_ConfigROI+0x16>
 8015f7a:	683b      	ldr	r3, [r7, #0]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d103      	bne.n	8015f88 <VL53L1CB_ConfigROI+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015f80:	f06f 0301 	mvn.w	r3, #1
 8015f84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015f86:	e01c      	b.n	8015fc2 <VL53L1CB_ConfigROI+0x58>
  }
  else
  {
    roi_settings.NumberOfRoi = 1;
 8015f88:	2301      	movs	r3, #1
 8015f8a:	723b      	strb	r3, [r7, #8]
    roi_settings.UserRois[0].BotRightX = pROIConfig->BotRightX;
 8015f8c:	683b      	ldr	r3, [r7, #0]
 8015f8e:	789b      	ldrb	r3, [r3, #2]
 8015f90:	72fb      	strb	r3, [r7, #11]
    roi_settings.UserRois[0].BotRightY = pROIConfig->BotRightY;
 8015f92:	683b      	ldr	r3, [r7, #0]
 8015f94:	78db      	ldrb	r3, [r3, #3]
 8015f96:	733b      	strb	r3, [r7, #12]
    roi_settings.UserRois[0].TopLeftX = pROIConfig->TopLeftX;
 8015f98:	683b      	ldr	r3, [r7, #0]
 8015f9a:	781b      	ldrb	r3, [r3, #0]
 8015f9c:	727b      	strb	r3, [r7, #9]
    roi_settings.UserRois[0].TopLeftY = pROIConfig->TopLeftY;
 8015f9e:	683b      	ldr	r3, [r7, #0]
 8015fa0:	785b      	ldrb	r3, [r3, #1]
 8015fa2:	72bb      	strb	r3, [r7, #10]

    if (VL53L1_SetROI(pObj, &roi_settings) != VL53L1_ERROR_NONE)
 8015fa4:	f107 0308 	add.w	r3, r7, #8
 8015fa8:	4619      	mov	r1, r3
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f7ed fca6 	bl	80038fc <VL53L1_SetROI>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d003      	beq.n	8015fbe <VL53L1CB_ConfigROI+0x54>
    {
      ret = VL53L1CB_ERROR;
 8015fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8015fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015fbc:	e001      	b.n	8015fc2 <VL53L1CB_ConfigROI+0x58>
    }
    else
    {
      ret = VL53L1CB_OK;
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8015fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	3750      	adds	r7, #80	; 0x50
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bd80      	pop	{r7, pc}

08015fcc <VL53L1CB_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigIT(VL53L1CB_Object_t *pObj, VL53L1CB_ITConfig_t *pITConfig)
{
 8015fcc:	b480      	push	{r7}
 8015fce:	b083      	sub	sp, #12
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	6078      	str	r0, [r7, #4]
 8015fd4:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L1CB_NOT_IMPLEMENTED;
 8015fd6:	f06f 0303 	mvn.w	r3, #3
}
 8015fda:	4618      	mov	r0, r3
 8015fdc:	370c      	adds	r7, #12
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe4:	4770      	bx	lr

08015fe6 <VL53L1CB_GetDistance>:
  * @param pObj    vl53l1cb context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetDistance(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8015fe6:	b580      	push	{r7, lr}
 8015fe8:	b084      	sub	sp, #16
 8015fea:	af00      	add	r7, sp, #0
 8015fec:	6078      	str	r0, [r7, #4]
 8015fee:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d002      	beq.n	8015ffc <VL53L1CB_GetDistance+0x16>
 8015ff6:	683b      	ldr	r3, [r7, #0]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d103      	bne.n	8016004 <VL53L1CB_GetDistance+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015ffc:	f06f 0301 	mvn.w	r3, #1
 8016000:	60fb      	str	r3, [r7, #12]
 8016002:	e03a      	b.n	801607a <VL53L1CB_GetDistance+0x94>
  }
  else if (pObj->IsRanging == 0U)
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801600a:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 801600e:	2b00      	cmp	r3, #0
 8016010:	d103      	bne.n	801601a <VL53L1CB_GetDistance+0x34>
  {
    ret = VL53L1CB_ERROR;
 8016012:	f04f 33ff 	mov.w	r3, #4294967295
 8016016:	60fb      	str	r3, [r7, #12]
 8016018:	e02f      	b.n	801607a <VL53L1CB_GetDistance+0x94>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016020:	f893 3a8a 	ldrb.w	r3, [r3, #2698]	; 0xa8a
 8016024:	2b01      	cmp	r3, #1
 8016026:	d106      	bne.n	8016036 <VL53L1CB_GetDistance+0x50>
    {
      ret = vl53l1cb_poll_for_measurement(pObj, VL53L1CB_POLL_TIMEOUT);
 8016028:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801602c:	6878      	ldr	r0, [r7, #4]
 801602e:	f000 f92b 	bl	8016288 <vl53l1cb_poll_for_measurement>
 8016032:	60f8      	str	r0, [r7, #12]
 8016034:	e004      	b.n	8016040 <VL53L1CB_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l1cb_poll_for_measurement(pObj, 0U);
 8016036:	2100      	movs	r1, #0
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	f000 f925 	bl	8016288 <vl53l1cb_poll_for_measurement>
 801603e:	60f8      	str	r0, [r7, #12]
    }
    /* a new measure is available if no error is returned by poll function */
    if (ret == VL53L1CB_OK)
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d119      	bne.n	801607a <VL53L1CB_GetDistance+0x94>
    {
      /* retrieve measurements and fill result structure */
      if (vl53l1cb_get_result(pObj, pResult) != VL53L1CB_OK)
 8016046:	6839      	ldr	r1, [r7, #0]
 8016048:	6878      	ldr	r0, [r7, #4]
 801604a:	f000 f94b 	bl	80162e4 <vl53l1cb_get_result>
 801604e:	4603      	mov	r3, r0
 8016050:	2b00      	cmp	r3, #0
 8016052:	d003      	beq.n	801605c <VL53L1CB_GetDistance+0x76>
      {
        ret = VL53L1CB_ERROR;
 8016054:	f04f 33ff 	mov.w	r3, #4294967295
 8016058:	60fb      	str	r3, [r7, #12]
 801605a:	e00e      	b.n	801607a <VL53L1CB_GetDistance+0x94>
      }
      else if (pObj->IsContinuous == 1U)
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016062:	f893 3a8b 	ldrb.w	r3, [r3, #2699]	; 0xa8b
 8016066:	2b01      	cmp	r3, #1
 8016068:	d105      	bne.n	8016076 <VL53L1CB_GetDistance+0x90>
      {
        /* trigger new measurement if device configured in continuous mode */
        ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 801606a:	6878      	ldr	r0, [r7, #4]
 801606c:	f7ed fdde 	bl	8003c2c <VL53L1_ClearInterruptAndStartMeasurement>
 8016070:	4603      	mov	r3, r0
 8016072:	60fb      	str	r3, [r7, #12]
 8016074:	e001      	b.n	801607a <VL53L1CB_GetDistance+0x94>
      }
      else
      {
        ret = VL53L1CB_OK;
 8016076:	2300      	movs	r3, #0
 8016078:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  
  return ret;
 801607a:	68fb      	ldr	r3, [r7, #12]
}
 801607c:	4618      	mov	r0, r3
 801607e:	3710      	adds	r7, #16
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}

08016084 <VL53L1CB_Start>:
  * @param pObj    vl53l1cb context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Start(VL53L1CB_Object_t *pObj, uint32_t Mode)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b084      	sub	sp, #16
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
 801608c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d103      	bne.n	801609c <VL53L1CB_Start+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8016094:	f06f 0301 	mvn.w	r3, #1
 8016098:	60fb      	str	r3, [r7, #12]
 801609a:	e068      	b.n	801616e <VL53L1CB_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80160a2:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 80160a6:	2b01      	cmp	r3, #1
 80160a8:	d103      	bne.n	80160b2 <VL53L1CB_Start+0x2e>
  {
    ret = VL53L1CB_ERROR;
 80160aa:	f04f 33ff 	mov.w	r3, #4294967295
 80160ae:	60fb      	str	r3, [r7, #12]
 80160b0:	e05d      	b.n	801616e <VL53L1CB_Start+0xea>
  }
  else if (VL53L1_StartMeasurement(pObj) == VL53L1_ERROR_NONE)
 80160b2:	6878      	ldr	r0, [r7, #4]
 80160b4:	f7ed fcf6 	bl	8003aa4 <VL53L1_StartMeasurement>
 80160b8:	4603      	mov	r3, r0
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d154      	bne.n	8016168 <VL53L1CB_Start+0xe4>
  {
    pObj->IsRanging = 1;
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80160c4:	2201      	movs	r2, #1
 80160c6:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 80160ca:	2300      	movs	r3, #0
 80160cc:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 80160ce:	683b      	ldr	r3, [r7, #0]
 80160d0:	3b01      	subs	r3, #1
 80160d2:	2b03      	cmp	r3, #3
 80160d4:	d83e      	bhi.n	8016154 <VL53L1CB_Start+0xd0>
 80160d6:	a201      	add	r2, pc, #4	; (adr r2, 80160dc <VL53L1CB_Start+0x58>)
 80160d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160dc:	080160ed 	.word	0x080160ed
 80160e0:	08016107 	.word	0x08016107
 80160e4:	08016121 	.word	0x08016121
 80160e8:	0801613b 	.word	0x0801613b
    {
    case VL53L1CB_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80160f2:	2201      	movs	r2, #1
 80160f4:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80160fe:	2201      	movs	r2, #1
 8016100:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8016104:	e033      	b.n	801616e <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801610c:	2200      	movs	r2, #0
 801610e:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016118:	2201      	movs	r2, #1
 801611a:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 801611e:	e026      	b.n	801616e <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016126:	2201      	movs	r2, #1
 8016128:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016132:	2200      	movs	r2, #0
 8016134:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8016138:	e019      	b.n	801616e <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016140:	2200      	movs	r2, #0
 8016142:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801614c:	2200      	movs	r2, #0
 801614e:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8016152:	e00c      	b.n	801616e <VL53L1CB_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801615a:	2200      	movs	r2, #0
 801615c:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
      ret = VL53L1CB_INVALID_PARAM;
 8016160:	f06f 0301 	mvn.w	r3, #1
 8016164:	60fb      	str	r3, [r7, #12]
      break;
 8016166:	e002      	b.n	801616e <VL53L1CB_Start+0xea>
    }
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8016168:	f04f 33ff 	mov.w	r3, #4294967295
 801616c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801616e:	68fb      	ldr	r3, [r7, #12]
}
 8016170:	4618      	mov	r0, r3
 8016172:	3710      	adds	r7, #16
 8016174:	46bd      	mov	sp, r7
 8016176:	bd80      	pop	{r7, pc}

08016178 <VL53L1CB_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Stop(VL53L1CB_Object_t *pObj)
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b084      	sub	sp, #16
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d103      	bne.n	801618e <VL53L1CB_Stop+0x16>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8016186:	f06f 0301 	mvn.w	r3, #1
 801618a:	60fb      	str	r3, [r7, #12]
 801618c:	e01c      	b.n	80161c8 <VL53L1CB_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016194:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8016198:	2b00      	cmp	r3, #0
 801619a:	d103      	bne.n	80161a4 <VL53L1CB_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L1CB_ERROR;
 801619c:	f04f 33ff 	mov.w	r3, #4294967295
 80161a0:	60fb      	str	r3, [r7, #12]
 80161a2:	e011      	b.n	80161c8 <VL53L1CB_Stop+0x50>
  }
  else if (VL53L1_StopMeasurement(pObj) == VL53L1_ERROR_NONE)
 80161a4:	6878      	ldr	r0, [r7, #4]
 80161a6:	f7ed fd1d 	bl	8003be4 <VL53L1_StopMeasurement>
 80161aa:	4603      	mov	r3, r0
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d108      	bne.n	80161c2 <VL53L1CB_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80161b6:	2200      	movs	r2, #0
 80161b8:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 80161bc:	2300      	movs	r3, #0
 80161be:	60fb      	str	r3, [r7, #12]
 80161c0:	e002      	b.n	80161c8 <VL53L1CB_Stop+0x50>
  }
  else
  {
    ret = VL53L1CB_ERROR;
 80161c2:	f04f 33ff 	mov.w	r3, #4294967295
 80161c6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80161c8:	68fb      	ldr	r3, [r7, #12]
}
 80161ca:	4618      	mov	r0, r3
 80161cc:	3710      	adds	r7, #16
 80161ce:	46bd      	mov	sp, r7
 80161d0:	bd80      	pop	{r7, pc}

080161d2 <VL53L1CB_SetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param Address     New I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetAddress(VL53L1CB_Object_t *pObj, uint32_t Address)
{
 80161d2:	b580      	push	{r7, lr}
 80161d4:	b084      	sub	sp, #16
 80161d6:	af00      	add	r7, sp, #0
 80161d8:	6078      	str	r0, [r7, #4]
 80161da:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d103      	bne.n	80161ea <VL53L1CB_SetAddress+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80161e2:	f06f 0301 	mvn.w	r3, #1
 80161e6:	60fb      	str	r3, [r7, #12]
 80161e8:	e012      	b.n	8016210 <VL53L1CB_SetAddress+0x3e>
  }
  else if (VL53L1_SetDeviceAddress(pObj, (uint8_t)Address) != VL53L1_ERROR_NONE)
 80161ea:	683b      	ldr	r3, [r7, #0]
 80161ec:	b2db      	uxtb	r3, r3
 80161ee:	4619      	mov	r1, r3
 80161f0:	6878      	ldr	r0, [r7, #4]
 80161f2:	f7ec fdcf 	bl	8002d94 <VL53L1_SetDeviceAddress>
 80161f6:	4603      	mov	r3, r0
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d003      	beq.n	8016204 <VL53L1CB_SetAddress+0x32>
  {
    ret = VL53L1CB_ERROR;
 80161fc:	f04f 33ff 	mov.w	r3, #4294967295
 8016200:	60fb      	str	r3, [r7, #12]
 8016202:	e005      	b.n	8016210 <VL53L1CB_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8016204:	683b      	ldr	r3, [r7, #0]
 8016206:	b29a      	uxth	r2, r3
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	811a      	strh	r2, [r3, #8]
    ret = VL53L1CB_OK;
 801620c:	2300      	movs	r3, #0
 801620e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8016210:	68fb      	ldr	r3, [r7, #12]
}
 8016212:	4618      	mov	r0, r3
 8016214:	3710      	adds	r7, #16
 8016216:	46bd      	mov	sp, r7
 8016218:	bd80      	pop	{r7, pc}

0801621a <VL53L1CB_GetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetAddress(VL53L1CB_Object_t *pObj, uint32_t *pAddress)
{
 801621a:	b480      	push	{r7}
 801621c:	b085      	sub	sp, #20
 801621e:	af00      	add	r7, sp, #0
 8016220:	6078      	str	r0, [r7, #4]
 8016222:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d002      	beq.n	8016230 <VL53L1CB_GetAddress+0x16>
 801622a:	683b      	ldr	r3, [r7, #0]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d103      	bne.n	8016238 <VL53L1CB_GetAddress+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8016230:	f06f 0301 	mvn.w	r3, #1
 8016234:	60fb      	str	r3, [r7, #12]
 8016236:	e006      	b.n	8016246 <VL53L1CB_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	891b      	ldrh	r3, [r3, #8]
 801623c:	461a      	mov	r2, r3
 801623e:	683b      	ldr	r3, [r7, #0]
 8016240:	601a      	str	r2, [r3, #0]
    ret = VL53L1CB_OK;
 8016242:	2300      	movs	r3, #0
 8016244:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8016246:	68fb      	ldr	r3, [r7, #12]
}
 8016248:	4618      	mov	r0, r3
 801624a:	3714      	adds	r7, #20
 801624c:	46bd      	mov	sp, r7
 801624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016252:	4770      	bx	lr

08016254 <VL53L1CB_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetPowerMode(VL53L1CB_Object_t *pObj, uint32_t PowerMode)
{
 8016254:	b480      	push	{r7}
 8016256:	b083      	sub	sp, #12
 8016258:	af00      	add	r7, sp, #0
 801625a:	6078      	str	r0, [r7, #4]
 801625c:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 801625e:	f06f 0303 	mvn.w	r3, #3
}
 8016262:	4618      	mov	r0, r3
 8016264:	370c      	adds	r7, #12
 8016266:	46bd      	mov	sp, r7
 8016268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626c:	4770      	bx	lr

0801626e <VL53L1CB_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetPowerMode(VL53L1CB_Object_t *pObj, uint32_t *pPowerMode)
{
 801626e:	b480      	push	{r7}
 8016270:	b083      	sub	sp, #12
 8016272:	af00      	add	r7, sp, #0
 8016274:	6078      	str	r0, [r7, #4]
 8016276:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 8016278:	f06f 0303 	mvn.w	r3, #3
}
 801627c:	4618      	mov	r0, r3
 801627e:	370c      	adds	r7, #12
 8016280:	46bd      	mov	sp, r7
 8016282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016286:	4770      	bx	lr

08016288 <vl53l1cb_poll_for_measurement>:
/** @defgroup VL53L1CB_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l1cb_poll_for_measurement(VL53L1CB_Object_t *pObj, uint32_t Timeout)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b084      	sub	sp, #16
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
 8016290:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8016292:	2300      	movs	r3, #0
 8016294:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d102      	bne.n	80162a2 <vl53l1cb_poll_for_measurement+0x1a>
  {
    return VL53L1CB_INVALID_PARAM;
 801629c:	f06f 0301 	mvn.w	r3, #1
 80162a0:	e01b      	b.n	80162da <vl53l1cb_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	695b      	ldr	r3, [r3, #20]
 80162a6:	4798      	blx	r3
 80162a8:	4603      	mov	r3, r0
 80162aa:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 80162ac:	f107 030b 	add.w	r3, r7, #11
 80162b0:	4619      	mov	r1, r3
 80162b2:	6878      	ldr	r0, [r7, #4]
 80162b4:	f7ed fcd0 	bl	8003c58 <VL53L1_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 80162b8:	7afb      	ldrb	r3, [r7, #11]
 80162ba:	2b01      	cmp	r3, #1
 80162bc:	d101      	bne.n	80162c2 <vl53l1cb_poll_for_measurement+0x3a>
    {
      return VL53L1CB_OK;
 80162be:	2300      	movs	r3, #0
 80162c0:	e00b      	b.n	80162da <vl53l1cb_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	695b      	ldr	r3, [r3, #20]
 80162c6:	4798      	blx	r3
 80162c8:	4603      	mov	r3, r0
 80162ca:	461a      	mov	r2, r3
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	1ad3      	subs	r3, r2, r3
 80162d0:	683a      	ldr	r2, [r7, #0]
 80162d2:	429a      	cmp	r2, r3
 80162d4:	d8ea      	bhi.n	80162ac <vl53l1cb_poll_for_measurement+0x24>

  return VL53L1CB_TIMEOUT;
 80162d6:	f06f 0302 	mvn.w	r3, #2
}
 80162da:	4618      	mov	r0, r3
 80162dc:	3710      	adds	r7, #16
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd80      	pop	{r7, pc}
	...

080162e4 <vl53l1cb_get_result>:

static int32_t vl53l1cb_get_result(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 80162e4:	b590      	push	{r4, r7, lr}
 80162e6:	b0a9      	sub	sp, #164	; 0xa4
 80162e8:	af00      	add	r7, sp, #0
 80162ea:	6078      	str	r0, [r7, #4]
 80162ec:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53L1_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d002      	beq.n	80162fa <vl53l1cb_get_result+0x16>
 80162f4:	683b      	ldr	r3, [r7, #0]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d104      	bne.n	8016304 <vl53l1cb_get_result+0x20>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80162fa:	f06f 0301 	mvn.w	r3, #1
 80162fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016302:	e120      	b.n	8016546 <vl53l1cb_get_result+0x262>
  }
  else if (VL53L1_GetMultiRangingData(pObj, &data) != VL53L1_ERROR_NONE)
 8016304:	f107 030c 	add.w	r3, r7, #12
 8016308:	4619      	mov	r1, r3
 801630a:	6878      	ldr	r0, [r7, #4]
 801630c:	f7ee fb82 	bl	8004a14 <VL53L1_GetMultiRangingData>
 8016310:	4603      	mov	r3, r0
 8016312:	2b00      	cmp	r3, #0
 8016314:	d004      	beq.n	8016320 <vl53l1cb_get_result+0x3c>
  {
    ret = VL53L1CB_ERROR;
 8016316:	f04f 33ff 	mov.w	r3, #4294967295
 801631a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801631e:	e112      	b.n	8016546 <vl53l1cb_get_result+0x262>
  }
  else
  {
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8016320:	2300      	movs	r3, #0
 8016322:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8016326:	e106      	b.n	8016536 <vl53l1cb_get_result+0x252>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8016328:	7cbb      	ldrb	r3, [r7, #18]
 801632a:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801632e:	4618      	mov	r0, r3
 8016330:	6839      	ldr	r1, [r7, #0]
 8016332:	4613      	mov	r3, r2
 8016334:	011b      	lsls	r3, r3, #4
 8016336:	4413      	add	r3, r2
 8016338:	009b      	lsls	r3, r3, #2
 801633a:	440b      	add	r3, r1
 801633c:	3304      	adds	r3, #4
 801633e:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8016340:	2300      	movs	r3, #0
 8016342:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8016346:	e0eb      	b.n	8016520 <vl53l1cb_get_result+0x23c>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8016348:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 801634c:	4613      	mov	r3, r2
 801634e:	00db      	lsls	r3, r3, #3
 8016350:	1a9b      	subs	r3, r3, r2
 8016352:	009b      	lsls	r3, r3, #2
 8016354:	33a0      	adds	r3, #160	; 0xa0
 8016356:	443b      	add	r3, r7
 8016358:	3b78      	subs	r3, #120	; 0x78
 801635a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801635e:	2b00      	cmp	r3, #0
 8016360:	da0d      	bge.n	801637e <vl53l1cb_get_result+0x9a>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8016362:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8016366:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801636a:	6839      	ldr	r1, [r7, #0]
 801636c:	4613      	mov	r3, r2
 801636e:	011b      	lsls	r3, r3, #4
 8016370:	4413      	add	r3, r2
 8016372:	4403      	add	r3, r0
 8016374:	009b      	lsls	r3, r3, #2
 8016376:	440b      	add	r3, r1
 8016378:	2200      	movs	r2, #0
 801637a:	609a      	str	r2, [r3, #8]
 801637c:	e017      	b.n	80163ae <vl53l1cb_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 801637e:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8016382:	4613      	mov	r3, r2
 8016384:	00db      	lsls	r3, r3, #3
 8016386:	1a9b      	subs	r3, r3, r2
 8016388:	009b      	lsls	r3, r3, #2
 801638a:	33a0      	adds	r3, #160	; 0xa0
 801638c:	443b      	add	r3, r7
 801638e:	3b78      	subs	r3, #120	; 0x78
 8016390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016394:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8016398:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801639c:	461c      	mov	r4, r3
 801639e:	6839      	ldr	r1, [r7, #0]
 80163a0:	4613      	mov	r3, r2
 80163a2:	011b      	lsls	r3, r3, #4
 80163a4:	4413      	add	r3, r2
 80163a6:	4403      	add	r3, r0
 80163a8:	009b      	lsls	r3, r3, #2
 80163aa:	440b      	add	r3, r1
 80163ac:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80163b4:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 80163b8:	2b01      	cmp	r3, #1
 80163ba:	d136      	bne.n	801642a <vl53l1cb_get_result+0x146>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 80163bc:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80163c0:	4613      	mov	r3, r2
 80163c2:	00db      	lsls	r3, r3, #3
 80163c4:	1a9b      	subs	r3, r3, r2
 80163c6:	009b      	lsls	r3, r3, #2
 80163c8:	33a0      	adds	r3, #160	; 0xa0
 80163ca:	443b      	add	r3, r7
 80163cc:	3b80      	subs	r3, #128	; 0x80
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	ee07 3a90 	vmov	s15, r3
 80163d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80163d8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8016554 <vl53l1cb_get_result+0x270>
 80163dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80163e0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8016558 <vl53l1cb_get_result+0x274>
 80163e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80163e8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80163ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80163f0:	0a1b      	lsrs	r3, r3, #8
 80163f2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 80163f6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80163fa:	ee07 3a90 	vmov	s15, r3
 80163fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016402:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8016406:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801640a:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 801640e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016412:	6839      	ldr	r1, [r7, #0]
 8016414:	4613      	mov	r3, r2
 8016416:	011b      	lsls	r3, r3, #4
 8016418:	4413      	add	r3, r2
 801641a:	4403      	add	r3, r0
 801641c:	3308      	adds	r3, #8
 801641e:	009b      	lsls	r3, r3, #2
 8016420:	440b      	add	r3, r1
 8016422:	3308      	adds	r3, #8
 8016424:	edc3 7a00 	vstr	s15, [r3]
 8016428:	e00f      	b.n	801644a <vl53l1cb_get_result+0x166>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 801642a:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801642e:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8016432:	6839      	ldr	r1, [r7, #0]
 8016434:	4613      	mov	r3, r2
 8016436:	011b      	lsls	r3, r3, #4
 8016438:	4413      	add	r3, r2
 801643a:	4403      	add	r3, r0
 801643c:	3308      	adds	r3, #8
 801643e:	009b      	lsls	r3, r3, #2
 8016440:	440b      	add	r3, r1
 8016442:	3308      	adds	r3, #8
 8016444:	f04f 0200 	mov.w	r2, #0
 8016448:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016450:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 8016454:	2b01      	cmp	r3, #1
 8016456:	d136      	bne.n	80164c6 <vl53l1cb_get_result+0x1e2>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8016458:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 801645c:	4613      	mov	r3, r2
 801645e:	00db      	lsls	r3, r3, #3
 8016460:	1a9b      	subs	r3, r3, r2
 8016462:	009b      	lsls	r3, r3, #2
 8016464:	33a0      	adds	r3, #160	; 0xa0
 8016466:	443b      	add	r3, r7
 8016468:	3b84      	subs	r3, #132	; 0x84
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	ee07 3a90 	vmov	s15, r3
 8016470:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016474:	eddf 6a37 	vldr	s13, [pc, #220]	; 8016554 <vl53l1cb_get_result+0x270>
 8016478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801647c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8016558 <vl53l1cb_get_result+0x274>
 8016480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016484:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8016488:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801648c:	0a1b      	lsrs	r3, r3, #8
 801648e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 8016492:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8016496:	ee07 3a90 	vmov	s15, r3
 801649a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801649e:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80164a2:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80164a6:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80164aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80164ae:	6839      	ldr	r1, [r7, #0]
 80164b0:	4613      	mov	r3, r2
 80164b2:	011b      	lsls	r3, r3, #4
 80164b4:	4413      	add	r3, r2
 80164b6:	4403      	add	r3, r0
 80164b8:	330c      	adds	r3, #12
 80164ba:	009b      	lsls	r3, r3, #2
 80164bc:	440b      	add	r3, r1
 80164be:	3308      	adds	r3, #8
 80164c0:	edc3 7a00 	vstr	s15, [r3]
 80164c4:	e00f      	b.n	80164e6 <vl53l1cb_get_result+0x202>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 80164c6:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80164ca:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80164ce:	6839      	ldr	r1, [r7, #0]
 80164d0:	4613      	mov	r3, r2
 80164d2:	011b      	lsls	r3, r3, #4
 80164d4:	4413      	add	r3, r2
 80164d6:	4403      	add	r3, r0
 80164d8:	330c      	adds	r3, #12
 80164da:	009b      	lsls	r3, r3, #2
 80164dc:	440b      	add	r3, r1
 80164de:	3308      	adds	r3, #8
 80164e0:	f04f 0200 	mov.w	r2, #0
 80164e4:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 80164e6:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80164ea:	4613      	mov	r3, r2
 80164ec:	00db      	lsls	r3, r3, #3
 80164ee:	1a9b      	subs	r3, r3, r2
 80164f0:	009b      	lsls	r3, r3, #2
 80164f2:	33a0      	adds	r3, #160	; 0xa0
 80164f4:	443b      	add	r3, r7
 80164f6:	3b75      	subs	r3, #117	; 0x75
 80164f8:	781b      	ldrb	r3, [r3, #0]
 80164fa:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80164fe:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8016502:	461c      	mov	r4, r3
 8016504:	6839      	ldr	r1, [r7, #0]
 8016506:	4613      	mov	r3, r2
 8016508:	011b      	lsls	r3, r3, #4
 801650a:	4413      	add	r3, r2
 801650c:	4403      	add	r3, r0
 801650e:	3304      	adds	r3, #4
 8016510:	009b      	lsls	r3, r3, #2
 8016512:	440b      	add	r3, r1
 8016514:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8016516:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 801651a:	3301      	adds	r3, #1
 801651c:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8016520:	7cbb      	ldrb	r3, [r7, #18]
 8016522:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8016526:	429a      	cmp	r2, r3
 8016528:	f4ff af0e 	bcc.w	8016348 <vl53l1cb_get_result+0x64>
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 801652c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8016530:	3301      	adds	r3, #1
 8016532:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8016536:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 801653a:	2b00      	cmp	r3, #0
 801653c:	f43f aef4 	beq.w	8016328 <vl53l1cb_get_result+0x44>
      }
    }

    ret = VL53L1CB_OK;
 8016540:	2300      	movs	r3, #0
 8016542:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  }

  return ret;
 8016546:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 801654a:	4618      	mov	r0, r3
 801654c:	37a4      	adds	r7, #164	; 0xa4
 801654e:	46bd      	mov	sp, r7
 8016550:	bd90      	pop	{r4, r7, pc}
 8016552:	bf00      	nop
 8016554:	47800000 	.word	0x47800000
 8016558:	447a0000 	.word	0x447a0000

0801655c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b082      	sub	sp, #8
 8016560:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8016562:	2300      	movs	r3, #0
 8016564:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8016566:	4b0c      	ldr	r3, [pc, #48]	; (8016598 <HAL_Init+0x3c>)
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	4a0b      	ldr	r2, [pc, #44]	; (8016598 <HAL_Init+0x3c>)
 801656c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016570:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8016572:	2003      	movs	r0, #3
 8016574:	f000 f90f 	bl	8016796 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8016578:	200f      	movs	r0, #15
 801657a:	f7eb fb71 	bl	8001c60 <HAL_InitTick>
 801657e:	4603      	mov	r3, r0
 8016580:	2b00      	cmp	r3, #0
 8016582:	d002      	beq.n	801658a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8016584:	2301      	movs	r3, #1
 8016586:	71fb      	strb	r3, [r7, #7]
 8016588:	e001      	b.n	801658e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801658a:	f7eb fb49 	bl	8001c20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801658e:	79fb      	ldrb	r3, [r7, #7]
}
 8016590:	4618      	mov	r0, r3
 8016592:	3708      	adds	r7, #8
 8016594:	46bd      	mov	sp, r7
 8016596:	bd80      	pop	{r7, pc}
 8016598:	58004000 	.word	0x58004000

0801659c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801659c:	b480      	push	{r7}
 801659e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80165a0:	4b06      	ldr	r3, [pc, #24]	; (80165bc <HAL_IncTick+0x20>)
 80165a2:	781b      	ldrb	r3, [r3, #0]
 80165a4:	461a      	mov	r2, r3
 80165a6:	4b06      	ldr	r3, [pc, #24]	; (80165c0 <HAL_IncTick+0x24>)
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	4413      	add	r3, r2
 80165ac:	4a04      	ldr	r2, [pc, #16]	; (80165c0 <HAL_IncTick+0x24>)
 80165ae:	6013      	str	r3, [r2, #0]
}
 80165b0:	bf00      	nop
 80165b2:	46bd      	mov	sp, r7
 80165b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b8:	4770      	bx	lr
 80165ba:	bf00      	nop
 80165bc:	20000074 	.word	0x20000074
 80165c0:	20008848 	.word	0x20008848

080165c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80165c4:	b480      	push	{r7}
 80165c6:	af00      	add	r7, sp, #0
  return uwTick;
 80165c8:	4b03      	ldr	r3, [pc, #12]	; (80165d8 <HAL_GetTick+0x14>)
 80165ca:	681b      	ldr	r3, [r3, #0]
}
 80165cc:	4618      	mov	r0, r3
 80165ce:	46bd      	mov	sp, r7
 80165d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d4:	4770      	bx	lr
 80165d6:	bf00      	nop
 80165d8:	20008848 	.word	0x20008848

080165dc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80165dc:	b480      	push	{r7}
 80165de:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80165e0:	4b03      	ldr	r3, [pc, #12]	; (80165f0 <HAL_GetTickPrio+0x14>)
 80165e2:	681b      	ldr	r3, [r3, #0]
}
 80165e4:	4618      	mov	r0, r3
 80165e6:	46bd      	mov	sp, r7
 80165e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ec:	4770      	bx	lr
 80165ee:	bf00      	nop
 80165f0:	20000070 	.word	0x20000070

080165f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b084      	sub	sp, #16
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80165fc:	f7ff ffe2 	bl	80165c4 <HAL_GetTick>
 8016600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	f1b3 3fff 	cmp.w	r3, #4294967295
 801660c:	d005      	beq.n	801661a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801660e:	4b0a      	ldr	r3, [pc, #40]	; (8016638 <HAL_Delay+0x44>)
 8016610:	781b      	ldrb	r3, [r3, #0]
 8016612:	461a      	mov	r2, r3
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	4413      	add	r3, r2
 8016618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801661a:	bf00      	nop
 801661c:	f7ff ffd2 	bl	80165c4 <HAL_GetTick>
 8016620:	4602      	mov	r2, r0
 8016622:	68bb      	ldr	r3, [r7, #8]
 8016624:	1ad3      	subs	r3, r2, r3
 8016626:	68fa      	ldr	r2, [r7, #12]
 8016628:	429a      	cmp	r2, r3
 801662a:	d8f7      	bhi.n	801661c <HAL_Delay+0x28>
  {
  }
}
 801662c:	bf00      	nop
 801662e:	bf00      	nop
 8016630:	3710      	adds	r7, #16
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
 8016636:	bf00      	nop
 8016638:	20000074 	.word	0x20000074

0801663c <__NVIC_SetPriorityGrouping>:
{
 801663c:	b480      	push	{r7}
 801663e:	b085      	sub	sp, #20
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	f003 0307 	and.w	r3, r3, #7
 801664a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801664c:	4b0c      	ldr	r3, [pc, #48]	; (8016680 <__NVIC_SetPriorityGrouping+0x44>)
 801664e:	68db      	ldr	r3, [r3, #12]
 8016650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8016652:	68ba      	ldr	r2, [r7, #8]
 8016654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8016658:	4013      	ands	r3, r2
 801665a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8016660:	68bb      	ldr	r3, [r7, #8]
 8016662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8016664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8016668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801666c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801666e:	4a04      	ldr	r2, [pc, #16]	; (8016680 <__NVIC_SetPriorityGrouping+0x44>)
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	60d3      	str	r3, [r2, #12]
}
 8016674:	bf00      	nop
 8016676:	3714      	adds	r7, #20
 8016678:	46bd      	mov	sp, r7
 801667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667e:	4770      	bx	lr
 8016680:	e000ed00 	.word	0xe000ed00

08016684 <__NVIC_GetPriorityGrouping>:
{
 8016684:	b480      	push	{r7}
 8016686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016688:	4b04      	ldr	r3, [pc, #16]	; (801669c <__NVIC_GetPriorityGrouping+0x18>)
 801668a:	68db      	ldr	r3, [r3, #12]
 801668c:	0a1b      	lsrs	r3, r3, #8
 801668e:	f003 0307 	and.w	r3, r3, #7
}
 8016692:	4618      	mov	r0, r3
 8016694:	46bd      	mov	sp, r7
 8016696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669a:	4770      	bx	lr
 801669c:	e000ed00 	.word	0xe000ed00

080166a0 <__NVIC_EnableIRQ>:
{
 80166a0:	b480      	push	{r7}
 80166a2:	b083      	sub	sp, #12
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	4603      	mov	r3, r0
 80166a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80166aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	db0b      	blt.n	80166ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80166b2:	79fb      	ldrb	r3, [r7, #7]
 80166b4:	f003 021f 	and.w	r2, r3, #31
 80166b8:	4907      	ldr	r1, [pc, #28]	; (80166d8 <__NVIC_EnableIRQ+0x38>)
 80166ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166be:	095b      	lsrs	r3, r3, #5
 80166c0:	2001      	movs	r0, #1
 80166c2:	fa00 f202 	lsl.w	r2, r0, r2
 80166c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80166ca:	bf00      	nop
 80166cc:	370c      	adds	r7, #12
 80166ce:	46bd      	mov	sp, r7
 80166d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d4:	4770      	bx	lr
 80166d6:	bf00      	nop
 80166d8:	e000e100 	.word	0xe000e100

080166dc <__NVIC_SetPriority>:
{
 80166dc:	b480      	push	{r7}
 80166de:	b083      	sub	sp, #12
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	4603      	mov	r3, r0
 80166e4:	6039      	str	r1, [r7, #0]
 80166e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80166e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	db0a      	blt.n	8016706 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80166f0:	683b      	ldr	r3, [r7, #0]
 80166f2:	b2da      	uxtb	r2, r3
 80166f4:	490c      	ldr	r1, [pc, #48]	; (8016728 <__NVIC_SetPriority+0x4c>)
 80166f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166fa:	0112      	lsls	r2, r2, #4
 80166fc:	b2d2      	uxtb	r2, r2
 80166fe:	440b      	add	r3, r1
 8016700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016704:	e00a      	b.n	801671c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016706:	683b      	ldr	r3, [r7, #0]
 8016708:	b2da      	uxtb	r2, r3
 801670a:	4908      	ldr	r1, [pc, #32]	; (801672c <__NVIC_SetPriority+0x50>)
 801670c:	79fb      	ldrb	r3, [r7, #7]
 801670e:	f003 030f 	and.w	r3, r3, #15
 8016712:	3b04      	subs	r3, #4
 8016714:	0112      	lsls	r2, r2, #4
 8016716:	b2d2      	uxtb	r2, r2
 8016718:	440b      	add	r3, r1
 801671a:	761a      	strb	r2, [r3, #24]
}
 801671c:	bf00      	nop
 801671e:	370c      	adds	r7, #12
 8016720:	46bd      	mov	sp, r7
 8016722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016726:	4770      	bx	lr
 8016728:	e000e100 	.word	0xe000e100
 801672c:	e000ed00 	.word	0xe000ed00

08016730 <NVIC_EncodePriority>:
{
 8016730:	b480      	push	{r7}
 8016732:	b089      	sub	sp, #36	; 0x24
 8016734:	af00      	add	r7, sp, #0
 8016736:	60f8      	str	r0, [r7, #12]
 8016738:	60b9      	str	r1, [r7, #8]
 801673a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	f003 0307 	and.w	r3, r3, #7
 8016742:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016744:	69fb      	ldr	r3, [r7, #28]
 8016746:	f1c3 0307 	rsb	r3, r3, #7
 801674a:	2b04      	cmp	r3, #4
 801674c:	bf28      	it	cs
 801674e:	2304      	movcs	r3, #4
 8016750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016752:	69fb      	ldr	r3, [r7, #28]
 8016754:	3304      	adds	r3, #4
 8016756:	2b06      	cmp	r3, #6
 8016758:	d902      	bls.n	8016760 <NVIC_EncodePriority+0x30>
 801675a:	69fb      	ldr	r3, [r7, #28]
 801675c:	3b03      	subs	r3, #3
 801675e:	e000      	b.n	8016762 <NVIC_EncodePriority+0x32>
 8016760:	2300      	movs	r3, #0
 8016762:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016764:	f04f 32ff 	mov.w	r2, #4294967295
 8016768:	69bb      	ldr	r3, [r7, #24]
 801676a:	fa02 f303 	lsl.w	r3, r2, r3
 801676e:	43da      	mvns	r2, r3
 8016770:	68bb      	ldr	r3, [r7, #8]
 8016772:	401a      	ands	r2, r3
 8016774:	697b      	ldr	r3, [r7, #20]
 8016776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016778:	f04f 31ff 	mov.w	r1, #4294967295
 801677c:	697b      	ldr	r3, [r7, #20]
 801677e:	fa01 f303 	lsl.w	r3, r1, r3
 8016782:	43d9      	mvns	r1, r3
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016788:	4313      	orrs	r3, r2
}
 801678a:	4618      	mov	r0, r3
 801678c:	3724      	adds	r7, #36	; 0x24
 801678e:	46bd      	mov	sp, r7
 8016790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016794:	4770      	bx	lr

08016796 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016796:	b580      	push	{r7, lr}
 8016798:	b082      	sub	sp, #8
 801679a:	af00      	add	r7, sp, #0
 801679c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801679e:	6878      	ldr	r0, [r7, #4]
 80167a0:	f7ff ff4c 	bl	801663c <__NVIC_SetPriorityGrouping>
}
 80167a4:	bf00      	nop
 80167a6:	3708      	adds	r7, #8
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd80      	pop	{r7, pc}

080167ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b086      	sub	sp, #24
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	4603      	mov	r3, r0
 80167b4:	60b9      	str	r1, [r7, #8]
 80167b6:	607a      	str	r2, [r7, #4]
 80167b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80167ba:	f7ff ff63 	bl	8016684 <__NVIC_GetPriorityGrouping>
 80167be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80167c0:	687a      	ldr	r2, [r7, #4]
 80167c2:	68b9      	ldr	r1, [r7, #8]
 80167c4:	6978      	ldr	r0, [r7, #20]
 80167c6:	f7ff ffb3 	bl	8016730 <NVIC_EncodePriority>
 80167ca:	4602      	mov	r2, r0
 80167cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167d0:	4611      	mov	r1, r2
 80167d2:	4618      	mov	r0, r3
 80167d4:	f7ff ff82 	bl	80166dc <__NVIC_SetPriority>
}
 80167d8:	bf00      	nop
 80167da:	3718      	adds	r7, #24
 80167dc:	46bd      	mov	sp, r7
 80167de:	bd80      	pop	{r7, pc}

080167e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b082      	sub	sp, #8
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	4603      	mov	r3, r0
 80167e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80167ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80167ee:	4618      	mov	r0, r3
 80167f0:	f7ff ff56 	bl	80166a0 <__NVIC_EnableIRQ>
}
 80167f4:	bf00      	nop
 80167f6:	3708      	adds	r7, #8
 80167f8:	46bd      	mov	sp, r7
 80167fa:	bd80      	pop	{r7, pc}

080167fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80167fc:	b480      	push	{r7}
 80167fe:	b087      	sub	sp, #28
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
 8016804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8016806:	2300      	movs	r3, #0
 8016808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801680a:	e14c      	b.n	8016aa6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 801680c:	683b      	ldr	r3, [r7, #0]
 801680e:	681a      	ldr	r2, [r3, #0]
 8016810:	2101      	movs	r1, #1
 8016812:	697b      	ldr	r3, [r7, #20]
 8016814:	fa01 f303 	lsl.w	r3, r1, r3
 8016818:	4013      	ands	r3, r2
 801681a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	2b00      	cmp	r3, #0
 8016820:	f000 813e 	beq.w	8016aa0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8016824:	683b      	ldr	r3, [r7, #0]
 8016826:	685b      	ldr	r3, [r3, #4]
 8016828:	f003 0303 	and.w	r3, r3, #3
 801682c:	2b01      	cmp	r3, #1
 801682e:	d005      	beq.n	801683c <HAL_GPIO_Init+0x40>
 8016830:	683b      	ldr	r3, [r7, #0]
 8016832:	685b      	ldr	r3, [r3, #4]
 8016834:	f003 0303 	and.w	r3, r3, #3
 8016838:	2b02      	cmp	r3, #2
 801683a:	d130      	bne.n	801689e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	689b      	ldr	r3, [r3, #8]
 8016840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8016842:	697b      	ldr	r3, [r7, #20]
 8016844:	005b      	lsls	r3, r3, #1
 8016846:	2203      	movs	r2, #3
 8016848:	fa02 f303 	lsl.w	r3, r2, r3
 801684c:	43db      	mvns	r3, r3
 801684e:	693a      	ldr	r2, [r7, #16]
 8016850:	4013      	ands	r3, r2
 8016852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8016854:	683b      	ldr	r3, [r7, #0]
 8016856:	68da      	ldr	r2, [r3, #12]
 8016858:	697b      	ldr	r3, [r7, #20]
 801685a:	005b      	lsls	r3, r3, #1
 801685c:	fa02 f303 	lsl.w	r3, r2, r3
 8016860:	693a      	ldr	r2, [r7, #16]
 8016862:	4313      	orrs	r3, r2
 8016864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	693a      	ldr	r2, [r7, #16]
 801686a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	685b      	ldr	r3, [r3, #4]
 8016870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8016872:	2201      	movs	r2, #1
 8016874:	697b      	ldr	r3, [r7, #20]
 8016876:	fa02 f303 	lsl.w	r3, r2, r3
 801687a:	43db      	mvns	r3, r3
 801687c:	693a      	ldr	r2, [r7, #16]
 801687e:	4013      	ands	r3, r2
 8016880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	685b      	ldr	r3, [r3, #4]
 8016886:	091b      	lsrs	r3, r3, #4
 8016888:	f003 0201 	and.w	r2, r3, #1
 801688c:	697b      	ldr	r3, [r7, #20]
 801688e:	fa02 f303 	lsl.w	r3, r2, r3
 8016892:	693a      	ldr	r2, [r7, #16]
 8016894:	4313      	orrs	r3, r2
 8016896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	693a      	ldr	r2, [r7, #16]
 801689c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801689e:	683b      	ldr	r3, [r7, #0]
 80168a0:	685b      	ldr	r3, [r3, #4]
 80168a2:	f003 0303 	and.w	r3, r3, #3
 80168a6:	2b03      	cmp	r3, #3
 80168a8:	d017      	beq.n	80168da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	68db      	ldr	r3, [r3, #12]
 80168ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80168b0:	697b      	ldr	r3, [r7, #20]
 80168b2:	005b      	lsls	r3, r3, #1
 80168b4:	2203      	movs	r2, #3
 80168b6:	fa02 f303 	lsl.w	r3, r2, r3
 80168ba:	43db      	mvns	r3, r3
 80168bc:	693a      	ldr	r2, [r7, #16]
 80168be:	4013      	ands	r3, r2
 80168c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80168c2:	683b      	ldr	r3, [r7, #0]
 80168c4:	689a      	ldr	r2, [r3, #8]
 80168c6:	697b      	ldr	r3, [r7, #20]
 80168c8:	005b      	lsls	r3, r3, #1
 80168ca:	fa02 f303 	lsl.w	r3, r2, r3
 80168ce:	693a      	ldr	r2, [r7, #16]
 80168d0:	4313      	orrs	r3, r2
 80168d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	693a      	ldr	r2, [r7, #16]
 80168d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80168da:	683b      	ldr	r3, [r7, #0]
 80168dc:	685b      	ldr	r3, [r3, #4]
 80168de:	f003 0303 	and.w	r3, r3, #3
 80168e2:	2b02      	cmp	r3, #2
 80168e4:	d123      	bne.n	801692e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80168e6:	697b      	ldr	r3, [r7, #20]
 80168e8:	08da      	lsrs	r2, r3, #3
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	3208      	adds	r2, #8
 80168ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80168f4:	697b      	ldr	r3, [r7, #20]
 80168f6:	f003 0307 	and.w	r3, r3, #7
 80168fa:	009b      	lsls	r3, r3, #2
 80168fc:	220f      	movs	r2, #15
 80168fe:	fa02 f303 	lsl.w	r3, r2, r3
 8016902:	43db      	mvns	r3, r3
 8016904:	693a      	ldr	r2, [r7, #16]
 8016906:	4013      	ands	r3, r2
 8016908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801690a:	683b      	ldr	r3, [r7, #0]
 801690c:	691a      	ldr	r2, [r3, #16]
 801690e:	697b      	ldr	r3, [r7, #20]
 8016910:	f003 0307 	and.w	r3, r3, #7
 8016914:	009b      	lsls	r3, r3, #2
 8016916:	fa02 f303 	lsl.w	r3, r2, r3
 801691a:	693a      	ldr	r2, [r7, #16]
 801691c:	4313      	orrs	r3, r2
 801691e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8016920:	697b      	ldr	r3, [r7, #20]
 8016922:	08da      	lsrs	r2, r3, #3
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	3208      	adds	r2, #8
 8016928:	6939      	ldr	r1, [r7, #16]
 801692a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8016934:	697b      	ldr	r3, [r7, #20]
 8016936:	005b      	lsls	r3, r3, #1
 8016938:	2203      	movs	r2, #3
 801693a:	fa02 f303 	lsl.w	r3, r2, r3
 801693e:	43db      	mvns	r3, r3
 8016940:	693a      	ldr	r2, [r7, #16]
 8016942:	4013      	ands	r3, r2
 8016944:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8016946:	683b      	ldr	r3, [r7, #0]
 8016948:	685b      	ldr	r3, [r3, #4]
 801694a:	f003 0203 	and.w	r2, r3, #3
 801694e:	697b      	ldr	r3, [r7, #20]
 8016950:	005b      	lsls	r3, r3, #1
 8016952:	fa02 f303 	lsl.w	r3, r2, r3
 8016956:	693a      	ldr	r2, [r7, #16]
 8016958:	4313      	orrs	r3, r2
 801695a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	693a      	ldr	r2, [r7, #16]
 8016960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8016962:	683b      	ldr	r3, [r7, #0]
 8016964:	685b      	ldr	r3, [r3, #4]
 8016966:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801696a:	2b00      	cmp	r3, #0
 801696c:	f000 8098 	beq.w	8016aa0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8016970:	4a54      	ldr	r2, [pc, #336]	; (8016ac4 <HAL_GPIO_Init+0x2c8>)
 8016972:	697b      	ldr	r3, [r7, #20]
 8016974:	089b      	lsrs	r3, r3, #2
 8016976:	3302      	adds	r3, #2
 8016978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801697c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801697e:	697b      	ldr	r3, [r7, #20]
 8016980:	f003 0303 	and.w	r3, r3, #3
 8016984:	009b      	lsls	r3, r3, #2
 8016986:	220f      	movs	r2, #15
 8016988:	fa02 f303 	lsl.w	r3, r2, r3
 801698c:	43db      	mvns	r3, r3
 801698e:	693a      	ldr	r2, [r7, #16]
 8016990:	4013      	ands	r3, r2
 8016992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801699a:	d019      	beq.n	80169d0 <HAL_GPIO_Init+0x1d4>
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	4a4a      	ldr	r2, [pc, #296]	; (8016ac8 <HAL_GPIO_Init+0x2cc>)
 80169a0:	4293      	cmp	r3, r2
 80169a2:	d013      	beq.n	80169cc <HAL_GPIO_Init+0x1d0>
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	4a49      	ldr	r2, [pc, #292]	; (8016acc <HAL_GPIO_Init+0x2d0>)
 80169a8:	4293      	cmp	r3, r2
 80169aa:	d00d      	beq.n	80169c8 <HAL_GPIO_Init+0x1cc>
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	4a48      	ldr	r2, [pc, #288]	; (8016ad0 <HAL_GPIO_Init+0x2d4>)
 80169b0:	4293      	cmp	r3, r2
 80169b2:	d007      	beq.n	80169c4 <HAL_GPIO_Init+0x1c8>
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	4a47      	ldr	r2, [pc, #284]	; (8016ad4 <HAL_GPIO_Init+0x2d8>)
 80169b8:	4293      	cmp	r3, r2
 80169ba:	d101      	bne.n	80169c0 <HAL_GPIO_Init+0x1c4>
 80169bc:	2304      	movs	r3, #4
 80169be:	e008      	b.n	80169d2 <HAL_GPIO_Init+0x1d6>
 80169c0:	2307      	movs	r3, #7
 80169c2:	e006      	b.n	80169d2 <HAL_GPIO_Init+0x1d6>
 80169c4:	2303      	movs	r3, #3
 80169c6:	e004      	b.n	80169d2 <HAL_GPIO_Init+0x1d6>
 80169c8:	2302      	movs	r3, #2
 80169ca:	e002      	b.n	80169d2 <HAL_GPIO_Init+0x1d6>
 80169cc:	2301      	movs	r3, #1
 80169ce:	e000      	b.n	80169d2 <HAL_GPIO_Init+0x1d6>
 80169d0:	2300      	movs	r3, #0
 80169d2:	697a      	ldr	r2, [r7, #20]
 80169d4:	f002 0203 	and.w	r2, r2, #3
 80169d8:	0092      	lsls	r2, r2, #2
 80169da:	4093      	lsls	r3, r2
 80169dc:	693a      	ldr	r2, [r7, #16]
 80169de:	4313      	orrs	r3, r2
 80169e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80169e2:	4938      	ldr	r1, [pc, #224]	; (8016ac4 <HAL_GPIO_Init+0x2c8>)
 80169e4:	697b      	ldr	r3, [r7, #20]
 80169e6:	089b      	lsrs	r3, r3, #2
 80169e8:	3302      	adds	r3, #2
 80169ea:	693a      	ldr	r2, [r7, #16]
 80169ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80169f0:	4b39      	ldr	r3, [pc, #228]	; (8016ad8 <HAL_GPIO_Init+0x2dc>)
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	43db      	mvns	r3, r3
 80169fa:	693a      	ldr	r2, [r7, #16]
 80169fc:	4013      	ands	r3, r2
 80169fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8016a00:	683b      	ldr	r3, [r7, #0]
 8016a02:	685b      	ldr	r3, [r3, #4]
 8016a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d003      	beq.n	8016a14 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8016a0c:	693a      	ldr	r2, [r7, #16]
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	4313      	orrs	r3, r2
 8016a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8016a14:	4a30      	ldr	r2, [pc, #192]	; (8016ad8 <HAL_GPIO_Init+0x2dc>)
 8016a16:	693b      	ldr	r3, [r7, #16]
 8016a18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8016a1a:	4b2f      	ldr	r3, [pc, #188]	; (8016ad8 <HAL_GPIO_Init+0x2dc>)
 8016a1c:	685b      	ldr	r3, [r3, #4]
 8016a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	43db      	mvns	r3, r3
 8016a24:	693a      	ldr	r2, [r7, #16]
 8016a26:	4013      	ands	r3, r2
 8016a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8016a2a:	683b      	ldr	r3, [r7, #0]
 8016a2c:	685b      	ldr	r3, [r3, #4]
 8016a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d003      	beq.n	8016a3e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8016a36:	693a      	ldr	r2, [r7, #16]
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	4313      	orrs	r3, r2
 8016a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8016a3e:	4a26      	ldr	r2, [pc, #152]	; (8016ad8 <HAL_GPIO_Init+0x2dc>)
 8016a40:	693b      	ldr	r3, [r7, #16]
 8016a42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8016a44:	4b24      	ldr	r3, [pc, #144]	; (8016ad8 <HAL_GPIO_Init+0x2dc>)
 8016a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	43db      	mvns	r3, r3
 8016a50:	693a      	ldr	r2, [r7, #16]
 8016a52:	4013      	ands	r3, r2
 8016a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8016a56:	683b      	ldr	r3, [r7, #0]
 8016a58:	685b      	ldr	r3, [r3, #4]
 8016a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d003      	beq.n	8016a6a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8016a62:	693a      	ldr	r2, [r7, #16]
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	4313      	orrs	r3, r2
 8016a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8016a6a:	4a1b      	ldr	r2, [pc, #108]	; (8016ad8 <HAL_GPIO_Init+0x2dc>)
 8016a6c:	693b      	ldr	r3, [r7, #16]
 8016a6e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8016a72:	4b19      	ldr	r3, [pc, #100]	; (8016ad8 <HAL_GPIO_Init+0x2dc>)
 8016a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	43db      	mvns	r3, r3
 8016a7e:	693a      	ldr	r2, [r7, #16]
 8016a80:	4013      	ands	r3, r2
 8016a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8016a84:	683b      	ldr	r3, [r7, #0]
 8016a86:	685b      	ldr	r3, [r3, #4]
 8016a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d003      	beq.n	8016a98 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8016a90:	693a      	ldr	r2, [r7, #16]
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	4313      	orrs	r3, r2
 8016a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8016a98:	4a0f      	ldr	r2, [pc, #60]	; (8016ad8 <HAL_GPIO_Init+0x2dc>)
 8016a9a:	693b      	ldr	r3, [r7, #16]
 8016a9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8016aa0:	697b      	ldr	r3, [r7, #20]
 8016aa2:	3301      	adds	r3, #1
 8016aa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8016aa6:	683b      	ldr	r3, [r7, #0]
 8016aa8:	681a      	ldr	r2, [r3, #0]
 8016aaa:	697b      	ldr	r3, [r7, #20]
 8016aac:	fa22 f303 	lsr.w	r3, r2, r3
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	f47f aeab 	bne.w	801680c <HAL_GPIO_Init+0x10>
  }
}
 8016ab6:	bf00      	nop
 8016ab8:	bf00      	nop
 8016aba:	371c      	adds	r7, #28
 8016abc:	46bd      	mov	sp, r7
 8016abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac2:	4770      	bx	lr
 8016ac4:	40010000 	.word	0x40010000
 8016ac8:	48000400 	.word	0x48000400
 8016acc:	48000800 	.word	0x48000800
 8016ad0:	48000c00 	.word	0x48000c00
 8016ad4:	48001000 	.word	0x48001000
 8016ad8:	58000800 	.word	0x58000800

08016adc <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8016adc:	b480      	push	{r7}
 8016ade:	b087      	sub	sp, #28
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	6078      	str	r0, [r7, #4]
 8016ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8016aea:	e0bb      	b.n	8016c64 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8016aec:	2201      	movs	r2, #1
 8016aee:	697b      	ldr	r3, [r7, #20]
 8016af0:	fa02 f303 	lsl.w	r3, r2, r3
 8016af4:	683a      	ldr	r2, [r7, #0]
 8016af6:	4013      	ands	r3, r2
 8016af8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8016afa:	693b      	ldr	r3, [r7, #16]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	f000 80ae 	beq.w	8016c5e <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8016b02:	4a5f      	ldr	r2, [pc, #380]	; (8016c80 <HAL_GPIO_DeInit+0x1a4>)
 8016b04:	697b      	ldr	r3, [r7, #20]
 8016b06:	089b      	lsrs	r3, r3, #2
 8016b08:	3302      	adds	r3, #2
 8016b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016b0e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8016b10:	697b      	ldr	r3, [r7, #20]
 8016b12:	f003 0303 	and.w	r3, r3, #3
 8016b16:	009b      	lsls	r3, r3, #2
 8016b18:	220f      	movs	r2, #15
 8016b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8016b1e:	68fa      	ldr	r2, [r7, #12]
 8016b20:	4013      	ands	r3, r2
 8016b22:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8016b2a:	d019      	beq.n	8016b60 <HAL_GPIO_DeInit+0x84>
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	4a55      	ldr	r2, [pc, #340]	; (8016c84 <HAL_GPIO_DeInit+0x1a8>)
 8016b30:	4293      	cmp	r3, r2
 8016b32:	d013      	beq.n	8016b5c <HAL_GPIO_DeInit+0x80>
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	4a54      	ldr	r2, [pc, #336]	; (8016c88 <HAL_GPIO_DeInit+0x1ac>)
 8016b38:	4293      	cmp	r3, r2
 8016b3a:	d00d      	beq.n	8016b58 <HAL_GPIO_DeInit+0x7c>
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	4a53      	ldr	r2, [pc, #332]	; (8016c8c <HAL_GPIO_DeInit+0x1b0>)
 8016b40:	4293      	cmp	r3, r2
 8016b42:	d007      	beq.n	8016b54 <HAL_GPIO_DeInit+0x78>
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	4a52      	ldr	r2, [pc, #328]	; (8016c90 <HAL_GPIO_DeInit+0x1b4>)
 8016b48:	4293      	cmp	r3, r2
 8016b4a:	d101      	bne.n	8016b50 <HAL_GPIO_DeInit+0x74>
 8016b4c:	2304      	movs	r3, #4
 8016b4e:	e008      	b.n	8016b62 <HAL_GPIO_DeInit+0x86>
 8016b50:	2307      	movs	r3, #7
 8016b52:	e006      	b.n	8016b62 <HAL_GPIO_DeInit+0x86>
 8016b54:	2303      	movs	r3, #3
 8016b56:	e004      	b.n	8016b62 <HAL_GPIO_DeInit+0x86>
 8016b58:	2302      	movs	r3, #2
 8016b5a:	e002      	b.n	8016b62 <HAL_GPIO_DeInit+0x86>
 8016b5c:	2301      	movs	r3, #1
 8016b5e:	e000      	b.n	8016b62 <HAL_GPIO_DeInit+0x86>
 8016b60:	2300      	movs	r3, #0
 8016b62:	697a      	ldr	r2, [r7, #20]
 8016b64:	f002 0203 	and.w	r2, r2, #3
 8016b68:	0092      	lsls	r2, r2, #2
 8016b6a:	4093      	lsls	r3, r2
 8016b6c:	68fa      	ldr	r2, [r7, #12]
 8016b6e:	429a      	cmp	r2, r3
 8016b70:	d136      	bne.n	8016be0 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8016b72:	4b48      	ldr	r3, [pc, #288]	; (8016c94 <HAL_GPIO_DeInit+0x1b8>)
 8016b74:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8016b78:	693b      	ldr	r3, [r7, #16]
 8016b7a:	43db      	mvns	r3, r3
 8016b7c:	4945      	ldr	r1, [pc, #276]	; (8016c94 <HAL_GPIO_DeInit+0x1b8>)
 8016b7e:	4013      	ands	r3, r2
 8016b80:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8016b84:	4b43      	ldr	r3, [pc, #268]	; (8016c94 <HAL_GPIO_DeInit+0x1b8>)
 8016b86:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8016b8a:	693b      	ldr	r3, [r7, #16]
 8016b8c:	43db      	mvns	r3, r3
 8016b8e:	4941      	ldr	r1, [pc, #260]	; (8016c94 <HAL_GPIO_DeInit+0x1b8>)
 8016b90:	4013      	ands	r3, r2
 8016b92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8016b96:	4b3f      	ldr	r3, [pc, #252]	; (8016c94 <HAL_GPIO_DeInit+0x1b8>)
 8016b98:	681a      	ldr	r2, [r3, #0]
 8016b9a:	693b      	ldr	r3, [r7, #16]
 8016b9c:	43db      	mvns	r3, r3
 8016b9e:	493d      	ldr	r1, [pc, #244]	; (8016c94 <HAL_GPIO_DeInit+0x1b8>)
 8016ba0:	4013      	ands	r3, r2
 8016ba2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8016ba4:	4b3b      	ldr	r3, [pc, #236]	; (8016c94 <HAL_GPIO_DeInit+0x1b8>)
 8016ba6:	685a      	ldr	r2, [r3, #4]
 8016ba8:	693b      	ldr	r3, [r7, #16]
 8016baa:	43db      	mvns	r3, r3
 8016bac:	4939      	ldr	r1, [pc, #228]	; (8016c94 <HAL_GPIO_DeInit+0x1b8>)
 8016bae:	4013      	ands	r3, r2
 8016bb0:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8016bb2:	697b      	ldr	r3, [r7, #20]
 8016bb4:	f003 0303 	and.w	r3, r3, #3
 8016bb8:	009b      	lsls	r3, r3, #2
 8016bba:	220f      	movs	r2, #15
 8016bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8016bc0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8016bc2:	4a2f      	ldr	r2, [pc, #188]	; (8016c80 <HAL_GPIO_DeInit+0x1a4>)
 8016bc4:	697b      	ldr	r3, [r7, #20]
 8016bc6:	089b      	lsrs	r3, r3, #2
 8016bc8:	3302      	adds	r3, #2
 8016bca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	43da      	mvns	r2, r3
 8016bd2:	482b      	ldr	r0, [pc, #172]	; (8016c80 <HAL_GPIO_DeInit+0x1a4>)
 8016bd4:	697b      	ldr	r3, [r7, #20]
 8016bd6:	089b      	lsrs	r3, r3, #2
 8016bd8:	400a      	ands	r2, r1
 8016bda:	3302      	adds	r3, #2
 8016bdc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	681a      	ldr	r2, [r3, #0]
 8016be4:	697b      	ldr	r3, [r7, #20]
 8016be6:	005b      	lsls	r3, r3, #1
 8016be8:	2103      	movs	r1, #3
 8016bea:	fa01 f303 	lsl.w	r3, r1, r3
 8016bee:	431a      	orrs	r2, r3
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8016bf4:	697b      	ldr	r3, [r7, #20]
 8016bf6:	08da      	lsrs	r2, r3, #3
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	3208      	adds	r2, #8
 8016bfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016c00:	697b      	ldr	r3, [r7, #20]
 8016c02:	f003 0307 	and.w	r3, r3, #7
 8016c06:	009b      	lsls	r3, r3, #2
 8016c08:	220f      	movs	r2, #15
 8016c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8016c0e:	43db      	mvns	r3, r3
 8016c10:	697a      	ldr	r2, [r7, #20]
 8016c12:	08d2      	lsrs	r2, r2, #3
 8016c14:	4019      	ands	r1, r3
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	3208      	adds	r2, #8
 8016c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	68da      	ldr	r2, [r3, #12]
 8016c22:	697b      	ldr	r3, [r7, #20]
 8016c24:	005b      	lsls	r3, r3, #1
 8016c26:	2103      	movs	r1, #3
 8016c28:	fa01 f303 	lsl.w	r3, r1, r3
 8016c2c:	43db      	mvns	r3, r3
 8016c2e:	401a      	ands	r2, r3
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	685a      	ldr	r2, [r3, #4]
 8016c38:	2101      	movs	r1, #1
 8016c3a:	697b      	ldr	r3, [r7, #20]
 8016c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8016c40:	43db      	mvns	r3, r3
 8016c42:	401a      	ands	r2, r3
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	689a      	ldr	r2, [r3, #8]
 8016c4c:	697b      	ldr	r3, [r7, #20]
 8016c4e:	005b      	lsls	r3, r3, #1
 8016c50:	2103      	movs	r1, #3
 8016c52:	fa01 f303 	lsl.w	r3, r1, r3
 8016c56:	43db      	mvns	r3, r3
 8016c58:	401a      	ands	r2, r3
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8016c5e:	697b      	ldr	r3, [r7, #20]
 8016c60:	3301      	adds	r3, #1
 8016c62:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8016c64:	683a      	ldr	r2, [r7, #0]
 8016c66:	697b      	ldr	r3, [r7, #20]
 8016c68:	fa22 f303 	lsr.w	r3, r2, r3
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	f47f af3d 	bne.w	8016aec <HAL_GPIO_DeInit+0x10>
  }
}
 8016c72:	bf00      	nop
 8016c74:	bf00      	nop
 8016c76:	371c      	adds	r7, #28
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7e:	4770      	bx	lr
 8016c80:	40010000 	.word	0x40010000
 8016c84:	48000400 	.word	0x48000400
 8016c88:	48000800 	.word	0x48000800
 8016c8c:	48000c00 	.word	0x48000c00
 8016c90:	48001000 	.word	0x48001000
 8016c94:	58000800 	.word	0x58000800

08016c98 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8016c98:	b480      	push	{r7}
 8016c9a:	b085      	sub	sp, #20
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	6078      	str	r0, [r7, #4]
 8016ca0:	460b      	mov	r3, r1
 8016ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	691a      	ldr	r2, [r3, #16]
 8016ca8:	887b      	ldrh	r3, [r7, #2]
 8016caa:	4013      	ands	r3, r2
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d002      	beq.n	8016cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8016cb0:	2301      	movs	r3, #1
 8016cb2:	73fb      	strb	r3, [r7, #15]
 8016cb4:	e001      	b.n	8016cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8016cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	3714      	adds	r7, #20
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc6:	4770      	bx	lr

08016cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016cc8:	b480      	push	{r7}
 8016cca:	b083      	sub	sp, #12
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
 8016cd0:	460b      	mov	r3, r1
 8016cd2:	807b      	strh	r3, [r7, #2]
 8016cd4:	4613      	mov	r3, r2
 8016cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8016cd8:	787b      	ldrb	r3, [r7, #1]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d003      	beq.n	8016ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8016cde:	887a      	ldrh	r2, [r7, #2]
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8016ce4:	e002      	b.n	8016cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8016ce6:	887a      	ldrh	r2, [r7, #2]
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8016cec:	bf00      	nop
 8016cee:	370c      	adds	r7, #12
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf6:	4770      	bx	lr

08016cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b082      	sub	sp, #8
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d101      	bne.n	8016d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8016d06:	2301      	movs	r3, #1
 8016d08:	e081      	b.n	8016e0e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016d10:	b2db      	uxtb	r3, r3
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d106      	bne.n	8016d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	2200      	movs	r2, #0
 8016d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8016d1e:	6878      	ldr	r0, [r7, #4]
 8016d20:	f7ea fc50 	bl	80015c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	2224      	movs	r2, #36	; 0x24
 8016d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	681a      	ldr	r2, [r3, #0]
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	f022 0201 	bic.w	r2, r2, #1
 8016d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	685a      	ldr	r2, [r3, #4]
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8016d48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	689a      	ldr	r2, [r3, #8]
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016d58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	68db      	ldr	r3, [r3, #12]
 8016d5e:	2b01      	cmp	r3, #1
 8016d60:	d107      	bne.n	8016d72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	689a      	ldr	r2, [r3, #8]
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016d6e:	609a      	str	r2, [r3, #8]
 8016d70:	e006      	b.n	8016d80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	689a      	ldr	r2, [r3, #8]
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8016d7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	68db      	ldr	r3, [r3, #12]
 8016d84:	2b02      	cmp	r3, #2
 8016d86:	d104      	bne.n	8016d92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016d90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	685b      	ldr	r3, [r3, #4]
 8016d98:	687a      	ldr	r2, [r7, #4]
 8016d9a:	6812      	ldr	r2, [r2, #0]
 8016d9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016da4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	68da      	ldr	r2, [r3, #12]
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016db4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	691a      	ldr	r2, [r3, #16]
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	695b      	ldr	r3, [r3, #20]
 8016dbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	699b      	ldr	r3, [r3, #24]
 8016dc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	430a      	orrs	r2, r1
 8016dce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	69d9      	ldr	r1, [r3, #28]
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	6a1a      	ldr	r2, [r3, #32]
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	430a      	orrs	r2, r1
 8016dde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	681a      	ldr	r2, [r3, #0]
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	f042 0201 	orr.w	r2, r2, #1
 8016dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	2200      	movs	r2, #0
 8016df4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	2220      	movs	r2, #32
 8016dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	2200      	movs	r2, #0
 8016e02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	2200      	movs	r2, #0
 8016e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8016e0c:	2300      	movs	r3, #0
}
 8016e0e:	4618      	mov	r0, r3
 8016e10:	3708      	adds	r7, #8
 8016e12:	46bd      	mov	sp, r7
 8016e14:	bd80      	pop	{r7, pc}

08016e16 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8016e16:	b580      	push	{r7, lr}
 8016e18:	b082      	sub	sp, #8
 8016e1a:	af00      	add	r7, sp, #0
 8016e1c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d101      	bne.n	8016e28 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8016e24:	2301      	movs	r3, #1
 8016e26:	e021      	b.n	8016e6c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	2224      	movs	r2, #36	; 0x24
 8016e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	681a      	ldr	r2, [r3, #0]
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	f022 0201 	bic.w	r2, r2, #1
 8016e3e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8016e40:	6878      	ldr	r0, [r7, #4]
 8016e42:	f7ea fc05 	bl	8001650 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	2200      	movs	r2, #0
 8016e4a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	2200      	movs	r2, #0
 8016e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	2200      	movs	r2, #0
 8016e58:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	2200      	movs	r2, #0
 8016e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8016e6a:	2300      	movs	r3, #0
}
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	3708      	adds	r7, #8
 8016e70:	46bd      	mov	sp, r7
 8016e72:	bd80      	pop	{r7, pc}

08016e74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b088      	sub	sp, #32
 8016e78:	af02      	add	r7, sp, #8
 8016e7a:	60f8      	str	r0, [r7, #12]
 8016e7c:	607a      	str	r2, [r7, #4]
 8016e7e:	461a      	mov	r2, r3
 8016e80:	460b      	mov	r3, r1
 8016e82:	817b      	strh	r3, [r7, #10]
 8016e84:	4613      	mov	r3, r2
 8016e86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016e8e:	b2db      	uxtb	r3, r3
 8016e90:	2b20      	cmp	r3, #32
 8016e92:	f040 80da 	bne.w	801704a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016e9c:	2b01      	cmp	r3, #1
 8016e9e:	d101      	bne.n	8016ea4 <HAL_I2C_Master_Transmit+0x30>
 8016ea0:	2302      	movs	r3, #2
 8016ea2:	e0d3      	b.n	801704c <HAL_I2C_Master_Transmit+0x1d8>
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	2201      	movs	r2, #1
 8016ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016eac:	f7ff fb8a 	bl	80165c4 <HAL_GetTick>
 8016eb0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016eb2:	697b      	ldr	r3, [r7, #20]
 8016eb4:	9300      	str	r3, [sp, #0]
 8016eb6:	2319      	movs	r3, #25
 8016eb8:	2201      	movs	r2, #1
 8016eba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016ebe:	68f8      	ldr	r0, [r7, #12]
 8016ec0:	f000 fc76 	bl	80177b0 <I2C_WaitOnFlagUntilTimeout>
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d001      	beq.n	8016ece <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8016eca:	2301      	movs	r3, #1
 8016ecc:	e0be      	b.n	801704c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	2221      	movs	r2, #33	; 0x21
 8016ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	2210      	movs	r2, #16
 8016eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	2200      	movs	r2, #0
 8016ee2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	687a      	ldr	r2, [r7, #4]
 8016ee8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	893a      	ldrh	r2, [r7, #8]
 8016eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016efa:	b29b      	uxth	r3, r3
 8016efc:	2bff      	cmp	r3, #255	; 0xff
 8016efe:	d90e      	bls.n	8016f1e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	22ff      	movs	r2, #255	; 0xff
 8016f04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f0a:	b2da      	uxtb	r2, r3
 8016f0c:	8979      	ldrh	r1, [r7, #10]
 8016f0e:	4b51      	ldr	r3, [pc, #324]	; (8017054 <HAL_I2C_Master_Transmit+0x1e0>)
 8016f10:	9300      	str	r3, [sp, #0]
 8016f12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016f16:	68f8      	ldr	r0, [r7, #12]
 8016f18:	f000 fe6c 	bl	8017bf4 <I2C_TransferConfig>
 8016f1c:	e06c      	b.n	8016ff8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f22:	b29a      	uxth	r2, r3
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f2c:	b2da      	uxtb	r2, r3
 8016f2e:	8979      	ldrh	r1, [r7, #10]
 8016f30:	4b48      	ldr	r3, [pc, #288]	; (8017054 <HAL_I2C_Master_Transmit+0x1e0>)
 8016f32:	9300      	str	r3, [sp, #0]
 8016f34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016f38:	68f8      	ldr	r0, [r7, #12]
 8016f3a:	f000 fe5b 	bl	8017bf4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8016f3e:	e05b      	b.n	8016ff8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016f40:	697a      	ldr	r2, [r7, #20]
 8016f42:	6a39      	ldr	r1, [r7, #32]
 8016f44:	68f8      	ldr	r0, [r7, #12]
 8016f46:	f000 fc73 	bl	8017830 <I2C_WaitOnTXISFlagUntilTimeout>
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d001      	beq.n	8016f54 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8016f50:	2301      	movs	r3, #1
 8016f52:	e07b      	b.n	801704c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f58:	781a      	ldrb	r2, [r3, #0]
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f64:	1c5a      	adds	r2, r3, #1
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f6e:	b29b      	uxth	r3, r3
 8016f70:	3b01      	subs	r3, #1
 8016f72:	b29a      	uxth	r2, r3
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f7c:	3b01      	subs	r3, #1
 8016f7e:	b29a      	uxth	r2, r3
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f88:	b29b      	uxth	r3, r3
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d034      	beq.n	8016ff8 <HAL_I2C_Master_Transmit+0x184>
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d130      	bne.n	8016ff8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016f96:	697b      	ldr	r3, [r7, #20]
 8016f98:	9300      	str	r3, [sp, #0]
 8016f9a:	6a3b      	ldr	r3, [r7, #32]
 8016f9c:	2200      	movs	r2, #0
 8016f9e:	2180      	movs	r1, #128	; 0x80
 8016fa0:	68f8      	ldr	r0, [r7, #12]
 8016fa2:	f000 fc05 	bl	80177b0 <I2C_WaitOnFlagUntilTimeout>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d001      	beq.n	8016fb0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8016fac:	2301      	movs	r3, #1
 8016fae:	e04d      	b.n	801704c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016fb4:	b29b      	uxth	r3, r3
 8016fb6:	2bff      	cmp	r3, #255	; 0xff
 8016fb8:	d90e      	bls.n	8016fd8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	22ff      	movs	r2, #255	; 0xff
 8016fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016fc4:	b2da      	uxtb	r2, r3
 8016fc6:	8979      	ldrh	r1, [r7, #10]
 8016fc8:	2300      	movs	r3, #0
 8016fca:	9300      	str	r3, [sp, #0]
 8016fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016fd0:	68f8      	ldr	r0, [r7, #12]
 8016fd2:	f000 fe0f 	bl	8017bf4 <I2C_TransferConfig>
 8016fd6:	e00f      	b.n	8016ff8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016fdc:	b29a      	uxth	r2, r3
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016fe6:	b2da      	uxtb	r2, r3
 8016fe8:	8979      	ldrh	r1, [r7, #10]
 8016fea:	2300      	movs	r3, #0
 8016fec:	9300      	str	r3, [sp, #0]
 8016fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016ff2:	68f8      	ldr	r0, [r7, #12]
 8016ff4:	f000 fdfe 	bl	8017bf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016ffc:	b29b      	uxth	r3, r3
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d19e      	bne.n	8016f40 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017002:	697a      	ldr	r2, [r7, #20]
 8017004:	6a39      	ldr	r1, [r7, #32]
 8017006:	68f8      	ldr	r0, [r7, #12]
 8017008:	f000 fc52 	bl	80178b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 801700c:	4603      	mov	r3, r0
 801700e:	2b00      	cmp	r3, #0
 8017010:	d001      	beq.n	8017016 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8017012:	2301      	movs	r3, #1
 8017014:	e01a      	b.n	801704c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	2220      	movs	r2, #32
 801701c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	6859      	ldr	r1, [r3, #4]
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	681a      	ldr	r2, [r3, #0]
 8017028:	4b0b      	ldr	r3, [pc, #44]	; (8017058 <HAL_I2C_Master_Transmit+0x1e4>)
 801702a:	400b      	ands	r3, r1
 801702c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	2220      	movs	r2, #32
 8017032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	2200      	movs	r2, #0
 801703a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	2200      	movs	r2, #0
 8017042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8017046:	2300      	movs	r3, #0
 8017048:	e000      	b.n	801704c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 801704a:	2302      	movs	r3, #2
  }
}
 801704c:	4618      	mov	r0, r3
 801704e:	3718      	adds	r7, #24
 8017050:	46bd      	mov	sp, r7
 8017052:	bd80      	pop	{r7, pc}
 8017054:	80002000 	.word	0x80002000
 8017058:	fe00e800 	.word	0xfe00e800

0801705c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b088      	sub	sp, #32
 8017060:	af02      	add	r7, sp, #8
 8017062:	60f8      	str	r0, [r7, #12]
 8017064:	607a      	str	r2, [r7, #4]
 8017066:	461a      	mov	r2, r3
 8017068:	460b      	mov	r3, r1
 801706a:	817b      	strh	r3, [r7, #10]
 801706c:	4613      	mov	r3, r2
 801706e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017076:	b2db      	uxtb	r3, r3
 8017078:	2b20      	cmp	r3, #32
 801707a:	f040 80db 	bne.w	8017234 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017084:	2b01      	cmp	r3, #1
 8017086:	d101      	bne.n	801708c <HAL_I2C_Master_Receive+0x30>
 8017088:	2302      	movs	r3, #2
 801708a:	e0d4      	b.n	8017236 <HAL_I2C_Master_Receive+0x1da>
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	2201      	movs	r2, #1
 8017090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8017094:	f7ff fa96 	bl	80165c4 <HAL_GetTick>
 8017098:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801709a:	697b      	ldr	r3, [r7, #20]
 801709c:	9300      	str	r3, [sp, #0]
 801709e:	2319      	movs	r3, #25
 80170a0:	2201      	movs	r2, #1
 80170a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80170a6:	68f8      	ldr	r0, [r7, #12]
 80170a8:	f000 fb82 	bl	80177b0 <I2C_WaitOnFlagUntilTimeout>
 80170ac:	4603      	mov	r3, r0
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d001      	beq.n	80170b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80170b2:	2301      	movs	r3, #1
 80170b4:	e0bf      	b.n	8017236 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	2222      	movs	r2, #34	; 0x22
 80170ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	2210      	movs	r2, #16
 80170c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	2200      	movs	r2, #0
 80170ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	687a      	ldr	r2, [r7, #4]
 80170d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	893a      	ldrh	r2, [r7, #8]
 80170d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	2200      	movs	r2, #0
 80170dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80170e2:	b29b      	uxth	r3, r3
 80170e4:	2bff      	cmp	r3, #255	; 0xff
 80170e6:	d90e      	bls.n	8017106 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	22ff      	movs	r2, #255	; 0xff
 80170ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80170f2:	b2da      	uxtb	r2, r3
 80170f4:	8979      	ldrh	r1, [r7, #10]
 80170f6:	4b52      	ldr	r3, [pc, #328]	; (8017240 <HAL_I2C_Master_Receive+0x1e4>)
 80170f8:	9300      	str	r3, [sp, #0]
 80170fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80170fe:	68f8      	ldr	r0, [r7, #12]
 8017100:	f000 fd78 	bl	8017bf4 <I2C_TransferConfig>
 8017104:	e06d      	b.n	80171e2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801710a:	b29a      	uxth	r2, r3
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017114:	b2da      	uxtb	r2, r3
 8017116:	8979      	ldrh	r1, [r7, #10]
 8017118:	4b49      	ldr	r3, [pc, #292]	; (8017240 <HAL_I2C_Master_Receive+0x1e4>)
 801711a:	9300      	str	r3, [sp, #0]
 801711c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8017120:	68f8      	ldr	r0, [r7, #12]
 8017122:	f000 fd67 	bl	8017bf4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8017126:	e05c      	b.n	80171e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017128:	697a      	ldr	r2, [r7, #20]
 801712a:	6a39      	ldr	r1, [r7, #32]
 801712c:	68f8      	ldr	r0, [r7, #12]
 801712e:	f000 fbfb 	bl	8017928 <I2C_WaitOnRXNEFlagUntilTimeout>
 8017132:	4603      	mov	r3, r0
 8017134:	2b00      	cmp	r3, #0
 8017136:	d001      	beq.n	801713c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8017138:	2301      	movs	r3, #1
 801713a:	e07c      	b.n	8017236 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017146:	b2d2      	uxtb	r2, r2
 8017148:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801714e:	1c5a      	adds	r2, r3, #1
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017158:	3b01      	subs	r3, #1
 801715a:	b29a      	uxth	r2, r3
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017164:	b29b      	uxth	r3, r3
 8017166:	3b01      	subs	r3, #1
 8017168:	b29a      	uxth	r2, r3
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017172:	b29b      	uxth	r3, r3
 8017174:	2b00      	cmp	r3, #0
 8017176:	d034      	beq.n	80171e2 <HAL_I2C_Master_Receive+0x186>
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801717c:	2b00      	cmp	r3, #0
 801717e:	d130      	bne.n	80171e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8017180:	697b      	ldr	r3, [r7, #20]
 8017182:	9300      	str	r3, [sp, #0]
 8017184:	6a3b      	ldr	r3, [r7, #32]
 8017186:	2200      	movs	r2, #0
 8017188:	2180      	movs	r1, #128	; 0x80
 801718a:	68f8      	ldr	r0, [r7, #12]
 801718c:	f000 fb10 	bl	80177b0 <I2C_WaitOnFlagUntilTimeout>
 8017190:	4603      	mov	r3, r0
 8017192:	2b00      	cmp	r3, #0
 8017194:	d001      	beq.n	801719a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8017196:	2301      	movs	r3, #1
 8017198:	e04d      	b.n	8017236 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801719e:	b29b      	uxth	r3, r3
 80171a0:	2bff      	cmp	r3, #255	; 0xff
 80171a2:	d90e      	bls.n	80171c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	22ff      	movs	r2, #255	; 0xff
 80171a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80171ae:	b2da      	uxtb	r2, r3
 80171b0:	8979      	ldrh	r1, [r7, #10]
 80171b2:	2300      	movs	r3, #0
 80171b4:	9300      	str	r3, [sp, #0]
 80171b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80171ba:	68f8      	ldr	r0, [r7, #12]
 80171bc:	f000 fd1a 	bl	8017bf4 <I2C_TransferConfig>
 80171c0:	e00f      	b.n	80171e2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80171c6:	b29a      	uxth	r2, r3
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80171d0:	b2da      	uxtb	r2, r3
 80171d2:	8979      	ldrh	r1, [r7, #10]
 80171d4:	2300      	movs	r3, #0
 80171d6:	9300      	str	r3, [sp, #0]
 80171d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80171dc:	68f8      	ldr	r0, [r7, #12]
 80171de:	f000 fd09 	bl	8017bf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80171e6:	b29b      	uxth	r3, r3
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d19d      	bne.n	8017128 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80171ec:	697a      	ldr	r2, [r7, #20]
 80171ee:	6a39      	ldr	r1, [r7, #32]
 80171f0:	68f8      	ldr	r0, [r7, #12]
 80171f2:	f000 fb5d 	bl	80178b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80171f6:	4603      	mov	r3, r0
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d001      	beq.n	8017200 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80171fc:	2301      	movs	r3, #1
 80171fe:	e01a      	b.n	8017236 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	2220      	movs	r2, #32
 8017206:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	6859      	ldr	r1, [r3, #4]
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	681a      	ldr	r2, [r3, #0]
 8017212:	4b0c      	ldr	r3, [pc, #48]	; (8017244 <HAL_I2C_Master_Receive+0x1e8>)
 8017214:	400b      	ands	r3, r1
 8017216:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	2220      	movs	r2, #32
 801721c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	2200      	movs	r2, #0
 8017224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	2200      	movs	r2, #0
 801722c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8017230:	2300      	movs	r3, #0
 8017232:	e000      	b.n	8017236 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8017234:	2302      	movs	r3, #2
  }
}
 8017236:	4618      	mov	r0, r3
 8017238:	3718      	adds	r7, #24
 801723a:	46bd      	mov	sp, r7
 801723c:	bd80      	pop	{r7, pc}
 801723e:	bf00      	nop
 8017240:	80002400 	.word	0x80002400
 8017244:	fe00e800 	.word	0xfe00e800

08017248 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017248:	b580      	push	{r7, lr}
 801724a:	b088      	sub	sp, #32
 801724c:	af02      	add	r7, sp, #8
 801724e:	60f8      	str	r0, [r7, #12]
 8017250:	4608      	mov	r0, r1
 8017252:	4611      	mov	r1, r2
 8017254:	461a      	mov	r2, r3
 8017256:	4603      	mov	r3, r0
 8017258:	817b      	strh	r3, [r7, #10]
 801725a:	460b      	mov	r3, r1
 801725c:	813b      	strh	r3, [r7, #8]
 801725e:	4613      	mov	r3, r2
 8017260:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017268:	b2db      	uxtb	r3, r3
 801726a:	2b20      	cmp	r3, #32
 801726c:	f040 80fd 	bne.w	801746a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8017270:	6a3b      	ldr	r3, [r7, #32]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d002      	beq.n	801727c <HAL_I2C_Mem_Read+0x34>
 8017276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017278:	2b00      	cmp	r3, #0
 801727a:	d105      	bne.n	8017288 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017282:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8017284:	2301      	movs	r3, #1
 8017286:	e0f1      	b.n	801746c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801728e:	2b01      	cmp	r3, #1
 8017290:	d101      	bne.n	8017296 <HAL_I2C_Mem_Read+0x4e>
 8017292:	2302      	movs	r3, #2
 8017294:	e0ea      	b.n	801746c <HAL_I2C_Mem_Read+0x224>
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	2201      	movs	r2, #1
 801729a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801729e:	f7ff f991 	bl	80165c4 <HAL_GetTick>
 80172a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80172a4:	697b      	ldr	r3, [r7, #20]
 80172a6:	9300      	str	r3, [sp, #0]
 80172a8:	2319      	movs	r3, #25
 80172aa:	2201      	movs	r2, #1
 80172ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80172b0:	68f8      	ldr	r0, [r7, #12]
 80172b2:	f000 fa7d 	bl	80177b0 <I2C_WaitOnFlagUntilTimeout>
 80172b6:	4603      	mov	r3, r0
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d001      	beq.n	80172c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80172bc:	2301      	movs	r3, #1
 80172be:	e0d5      	b.n	801746c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	2222      	movs	r2, #34	; 0x22
 80172c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	2240      	movs	r2, #64	; 0x40
 80172cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	2200      	movs	r2, #0
 80172d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	6a3a      	ldr	r2, [r7, #32]
 80172da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80172e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	2200      	movs	r2, #0
 80172e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80172e8:	88f8      	ldrh	r0, [r7, #6]
 80172ea:	893a      	ldrh	r2, [r7, #8]
 80172ec:	8979      	ldrh	r1, [r7, #10]
 80172ee:	697b      	ldr	r3, [r7, #20]
 80172f0:	9301      	str	r3, [sp, #4]
 80172f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172f4:	9300      	str	r3, [sp, #0]
 80172f6:	4603      	mov	r3, r0
 80172f8:	68f8      	ldr	r0, [r7, #12]
 80172fa:	f000 f9e1 	bl	80176c0 <I2C_RequestMemoryRead>
 80172fe:	4603      	mov	r3, r0
 8017300:	2b00      	cmp	r3, #0
 8017302:	d005      	beq.n	8017310 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	2200      	movs	r2, #0
 8017308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801730c:	2301      	movs	r3, #1
 801730e:	e0ad      	b.n	801746c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017314:	b29b      	uxth	r3, r3
 8017316:	2bff      	cmp	r3, #255	; 0xff
 8017318:	d90e      	bls.n	8017338 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	22ff      	movs	r2, #255	; 0xff
 801731e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017324:	b2da      	uxtb	r2, r3
 8017326:	8979      	ldrh	r1, [r7, #10]
 8017328:	4b52      	ldr	r3, [pc, #328]	; (8017474 <HAL_I2C_Mem_Read+0x22c>)
 801732a:	9300      	str	r3, [sp, #0]
 801732c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8017330:	68f8      	ldr	r0, [r7, #12]
 8017332:	f000 fc5f 	bl	8017bf4 <I2C_TransferConfig>
 8017336:	e00f      	b.n	8017358 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801733c:	b29a      	uxth	r2, r3
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017346:	b2da      	uxtb	r2, r3
 8017348:	8979      	ldrh	r1, [r7, #10]
 801734a:	4b4a      	ldr	r3, [pc, #296]	; (8017474 <HAL_I2C_Mem_Read+0x22c>)
 801734c:	9300      	str	r3, [sp, #0]
 801734e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8017352:	68f8      	ldr	r0, [r7, #12]
 8017354:	f000 fc4e 	bl	8017bf4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8017358:	697b      	ldr	r3, [r7, #20]
 801735a:	9300      	str	r3, [sp, #0]
 801735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801735e:	2200      	movs	r2, #0
 8017360:	2104      	movs	r1, #4
 8017362:	68f8      	ldr	r0, [r7, #12]
 8017364:	f000 fa24 	bl	80177b0 <I2C_WaitOnFlagUntilTimeout>
 8017368:	4603      	mov	r3, r0
 801736a:	2b00      	cmp	r3, #0
 801736c:	d001      	beq.n	8017372 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801736e:	2301      	movs	r3, #1
 8017370:	e07c      	b.n	801746c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801737c:	b2d2      	uxtb	r2, r2
 801737e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017384:	1c5a      	adds	r2, r3, #1
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801738e:	3b01      	subs	r3, #1
 8017390:	b29a      	uxth	r2, r3
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801739a:	b29b      	uxth	r3, r3
 801739c:	3b01      	subs	r3, #1
 801739e:	b29a      	uxth	r2, r3
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80173a8:	b29b      	uxth	r3, r3
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d034      	beq.n	8017418 <HAL_I2C_Mem_Read+0x1d0>
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d130      	bne.n	8017418 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80173b6:	697b      	ldr	r3, [r7, #20]
 80173b8:	9300      	str	r3, [sp, #0]
 80173ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173bc:	2200      	movs	r2, #0
 80173be:	2180      	movs	r1, #128	; 0x80
 80173c0:	68f8      	ldr	r0, [r7, #12]
 80173c2:	f000 f9f5 	bl	80177b0 <I2C_WaitOnFlagUntilTimeout>
 80173c6:	4603      	mov	r3, r0
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d001      	beq.n	80173d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80173cc:	2301      	movs	r3, #1
 80173ce:	e04d      	b.n	801746c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80173d4:	b29b      	uxth	r3, r3
 80173d6:	2bff      	cmp	r3, #255	; 0xff
 80173d8:	d90e      	bls.n	80173f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	22ff      	movs	r2, #255	; 0xff
 80173de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80173e4:	b2da      	uxtb	r2, r3
 80173e6:	8979      	ldrh	r1, [r7, #10]
 80173e8:	2300      	movs	r3, #0
 80173ea:	9300      	str	r3, [sp, #0]
 80173ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80173f0:	68f8      	ldr	r0, [r7, #12]
 80173f2:	f000 fbff 	bl	8017bf4 <I2C_TransferConfig>
 80173f6:	e00f      	b.n	8017418 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80173fc:	b29a      	uxth	r2, r3
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017406:	b2da      	uxtb	r2, r3
 8017408:	8979      	ldrh	r1, [r7, #10]
 801740a:	2300      	movs	r3, #0
 801740c:	9300      	str	r3, [sp, #0]
 801740e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8017412:	68f8      	ldr	r0, [r7, #12]
 8017414:	f000 fbee 	bl	8017bf4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801741c:	b29b      	uxth	r3, r3
 801741e:	2b00      	cmp	r3, #0
 8017420:	d19a      	bne.n	8017358 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017422:	697a      	ldr	r2, [r7, #20]
 8017424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017426:	68f8      	ldr	r0, [r7, #12]
 8017428:	f000 fa42 	bl	80178b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 801742c:	4603      	mov	r3, r0
 801742e:	2b00      	cmp	r3, #0
 8017430:	d001      	beq.n	8017436 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8017432:	2301      	movs	r3, #1
 8017434:	e01a      	b.n	801746c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	2220      	movs	r2, #32
 801743c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	6859      	ldr	r1, [r3, #4]
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	681a      	ldr	r2, [r3, #0]
 8017448:	4b0b      	ldr	r3, [pc, #44]	; (8017478 <HAL_I2C_Mem_Read+0x230>)
 801744a:	400b      	ands	r3, r1
 801744c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	2220      	movs	r2, #32
 8017452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	2200      	movs	r2, #0
 801745a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	2200      	movs	r2, #0
 8017462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8017466:	2300      	movs	r3, #0
 8017468:	e000      	b.n	801746c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801746a:	2302      	movs	r3, #2
  }
}
 801746c:	4618      	mov	r0, r3
 801746e:	3718      	adds	r7, #24
 8017470:	46bd      	mov	sp, r7
 8017472:	bd80      	pop	{r7, pc}
 8017474:	80002400 	.word	0x80002400
 8017478:	fe00e800 	.word	0xfe00e800

0801747c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 801747c:	b580      	push	{r7, lr}
 801747e:	b08a      	sub	sp, #40	; 0x28
 8017480:	af02      	add	r7, sp, #8
 8017482:	60f8      	str	r0, [r7, #12]
 8017484:	607a      	str	r2, [r7, #4]
 8017486:	603b      	str	r3, [r7, #0]
 8017488:	460b      	mov	r3, r1
 801748a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 801748c:	2300      	movs	r3, #0
 801748e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017496:	b2db      	uxtb	r3, r3
 8017498:	2b20      	cmp	r3, #32
 801749a:	f040 80f1 	bne.w	8017680 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	699b      	ldr	r3, [r3, #24]
 80174a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80174a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80174ac:	d101      	bne.n	80174b2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80174ae:	2302      	movs	r3, #2
 80174b0:	e0e7      	b.n	8017682 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80174b8:	2b01      	cmp	r3, #1
 80174ba:	d101      	bne.n	80174c0 <HAL_I2C_IsDeviceReady+0x44>
 80174bc:	2302      	movs	r3, #2
 80174be:	e0e0      	b.n	8017682 <HAL_I2C_IsDeviceReady+0x206>
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	2201      	movs	r2, #1
 80174c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	2224      	movs	r2, #36	; 0x24
 80174cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	2200      	movs	r2, #0
 80174d4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	68db      	ldr	r3, [r3, #12]
 80174da:	2b01      	cmp	r3, #1
 80174dc:	d107      	bne.n	80174ee <HAL_I2C_IsDeviceReady+0x72>
 80174de:	897b      	ldrh	r3, [r7, #10]
 80174e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80174e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80174e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80174ec:	e004      	b.n	80174f8 <HAL_I2C_IsDeviceReady+0x7c>
 80174ee:	897b      	ldrh	r3, [r7, #10]
 80174f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80174f4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80174f8:	68fa      	ldr	r2, [r7, #12]
 80174fa:	6812      	ldr	r2, [r2, #0]
 80174fc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80174fe:	f7ff f861 	bl	80165c4 <HAL_GetTick>
 8017502:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	699b      	ldr	r3, [r3, #24]
 801750a:	f003 0320 	and.w	r3, r3, #32
 801750e:	2b20      	cmp	r3, #32
 8017510:	bf0c      	ite	eq
 8017512:	2301      	moveq	r3, #1
 8017514:	2300      	movne	r3, #0
 8017516:	b2db      	uxtb	r3, r3
 8017518:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801751a:	68fb      	ldr	r3, [r7, #12]
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	699b      	ldr	r3, [r3, #24]
 8017520:	f003 0310 	and.w	r3, r3, #16
 8017524:	2b10      	cmp	r3, #16
 8017526:	bf0c      	ite	eq
 8017528:	2301      	moveq	r3, #1
 801752a:	2300      	movne	r3, #0
 801752c:	b2db      	uxtb	r3, r3
 801752e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8017530:	e034      	b.n	801759c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8017532:	683b      	ldr	r3, [r7, #0]
 8017534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017538:	d01a      	beq.n	8017570 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801753a:	f7ff f843 	bl	80165c4 <HAL_GetTick>
 801753e:	4602      	mov	r2, r0
 8017540:	69bb      	ldr	r3, [r7, #24]
 8017542:	1ad3      	subs	r3, r2, r3
 8017544:	683a      	ldr	r2, [r7, #0]
 8017546:	429a      	cmp	r2, r3
 8017548:	d302      	bcc.n	8017550 <HAL_I2C_IsDeviceReady+0xd4>
 801754a:	683b      	ldr	r3, [r7, #0]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d10f      	bne.n	8017570 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	2220      	movs	r2, #32
 8017554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801755c:	f043 0220 	orr.w	r2, r3, #32
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	2200      	movs	r2, #0
 8017568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 801756c:	2301      	movs	r3, #1
 801756e:	e088      	b.n	8017682 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	699b      	ldr	r3, [r3, #24]
 8017576:	f003 0320 	and.w	r3, r3, #32
 801757a:	2b20      	cmp	r3, #32
 801757c:	bf0c      	ite	eq
 801757e:	2301      	moveq	r3, #1
 8017580:	2300      	movne	r3, #0
 8017582:	b2db      	uxtb	r3, r3
 8017584:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	699b      	ldr	r3, [r3, #24]
 801758c:	f003 0310 	and.w	r3, r3, #16
 8017590:	2b10      	cmp	r3, #16
 8017592:	bf0c      	ite	eq
 8017594:	2301      	moveq	r3, #1
 8017596:	2300      	movne	r3, #0
 8017598:	b2db      	uxtb	r3, r3
 801759a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 801759c:	7ffb      	ldrb	r3, [r7, #31]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d102      	bne.n	80175a8 <HAL_I2C_IsDeviceReady+0x12c>
 80175a2:	7fbb      	ldrb	r3, [r7, #30]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d0c4      	beq.n	8017532 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	699b      	ldr	r3, [r3, #24]
 80175ae:	f003 0310 	and.w	r3, r3, #16
 80175b2:	2b10      	cmp	r3, #16
 80175b4:	d01a      	beq.n	80175ec <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80175b6:	69bb      	ldr	r3, [r7, #24]
 80175b8:	9300      	str	r3, [sp, #0]
 80175ba:	683b      	ldr	r3, [r7, #0]
 80175bc:	2200      	movs	r2, #0
 80175be:	2120      	movs	r1, #32
 80175c0:	68f8      	ldr	r0, [r7, #12]
 80175c2:	f000 f8f5 	bl	80177b0 <I2C_WaitOnFlagUntilTimeout>
 80175c6:	4603      	mov	r3, r0
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d001      	beq.n	80175d0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80175cc:	2301      	movs	r3, #1
 80175ce:	e058      	b.n	8017682 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	2220      	movs	r2, #32
 80175d6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	2220      	movs	r2, #32
 80175dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	2200      	movs	r2, #0
 80175e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80175e8:	2300      	movs	r3, #0
 80175ea:	e04a      	b.n	8017682 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80175ec:	69bb      	ldr	r3, [r7, #24]
 80175ee:	9300      	str	r3, [sp, #0]
 80175f0:	683b      	ldr	r3, [r7, #0]
 80175f2:	2200      	movs	r2, #0
 80175f4:	2120      	movs	r1, #32
 80175f6:	68f8      	ldr	r0, [r7, #12]
 80175f8:	f000 f8da 	bl	80177b0 <I2C_WaitOnFlagUntilTimeout>
 80175fc:	4603      	mov	r3, r0
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d001      	beq.n	8017606 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8017602:	2301      	movs	r3, #1
 8017604:	e03d      	b.n	8017682 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	2210      	movs	r2, #16
 801760c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	2220      	movs	r2, #32
 8017614:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8017616:	697b      	ldr	r3, [r7, #20]
 8017618:	687a      	ldr	r2, [r7, #4]
 801761a:	429a      	cmp	r2, r3
 801761c:	d118      	bne.n	8017650 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	685a      	ldr	r2, [r3, #4]
 8017624:	68fb      	ldr	r3, [r7, #12]
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801762c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 801762e:	69bb      	ldr	r3, [r7, #24]
 8017630:	9300      	str	r3, [sp, #0]
 8017632:	683b      	ldr	r3, [r7, #0]
 8017634:	2200      	movs	r2, #0
 8017636:	2120      	movs	r1, #32
 8017638:	68f8      	ldr	r0, [r7, #12]
 801763a:	f000 f8b9 	bl	80177b0 <I2C_WaitOnFlagUntilTimeout>
 801763e:	4603      	mov	r3, r0
 8017640:	2b00      	cmp	r3, #0
 8017642:	d001      	beq.n	8017648 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8017644:	2301      	movs	r3, #1
 8017646:	e01c      	b.n	8017682 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017648:	68fb      	ldr	r3, [r7, #12]
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	2220      	movs	r2, #32
 801764e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8017650:	697b      	ldr	r3, [r7, #20]
 8017652:	3301      	adds	r3, #1
 8017654:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8017656:	697b      	ldr	r3, [r7, #20]
 8017658:	687a      	ldr	r2, [r7, #4]
 801765a:	429a      	cmp	r2, r3
 801765c:	f63f af3b 	bhi.w	80174d6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	2220      	movs	r2, #32
 8017664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801766c:	f043 0220 	orr.w	r2, r3, #32
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	2200      	movs	r2, #0
 8017678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 801767c:	2301      	movs	r3, #1
 801767e:	e000      	b.n	8017682 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8017680:	2302      	movs	r3, #2
  }
}
 8017682:	4618      	mov	r0, r3
 8017684:	3720      	adds	r7, #32
 8017686:	46bd      	mov	sp, r7
 8017688:	bd80      	pop	{r7, pc}

0801768a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 801768a:	b480      	push	{r7}
 801768c:	b083      	sub	sp, #12
 801768e:	af00      	add	r7, sp, #0
 8017690:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017698:	b2db      	uxtb	r3, r3
}
 801769a:	4618      	mov	r0, r3
 801769c:	370c      	adds	r7, #12
 801769e:	46bd      	mov	sp, r7
 80176a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a4:	4770      	bx	lr

080176a6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80176a6:	b480      	push	{r7}
 80176a8:	b083      	sub	sp, #12
 80176aa:	af00      	add	r7, sp, #0
 80176ac:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80176b2:	4618      	mov	r0, r3
 80176b4:	370c      	adds	r7, #12
 80176b6:	46bd      	mov	sp, r7
 80176b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176bc:	4770      	bx	lr
	...

080176c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80176c0:	b580      	push	{r7, lr}
 80176c2:	b086      	sub	sp, #24
 80176c4:	af02      	add	r7, sp, #8
 80176c6:	60f8      	str	r0, [r7, #12]
 80176c8:	4608      	mov	r0, r1
 80176ca:	4611      	mov	r1, r2
 80176cc:	461a      	mov	r2, r3
 80176ce:	4603      	mov	r3, r0
 80176d0:	817b      	strh	r3, [r7, #10]
 80176d2:	460b      	mov	r3, r1
 80176d4:	813b      	strh	r3, [r7, #8]
 80176d6:	4613      	mov	r3, r2
 80176d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80176da:	88fb      	ldrh	r3, [r7, #6]
 80176dc:	b2da      	uxtb	r2, r3
 80176de:	8979      	ldrh	r1, [r7, #10]
 80176e0:	4b20      	ldr	r3, [pc, #128]	; (8017764 <I2C_RequestMemoryRead+0xa4>)
 80176e2:	9300      	str	r3, [sp, #0]
 80176e4:	2300      	movs	r3, #0
 80176e6:	68f8      	ldr	r0, [r7, #12]
 80176e8:	f000 fa84 	bl	8017bf4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80176ec:	69fa      	ldr	r2, [r7, #28]
 80176ee:	69b9      	ldr	r1, [r7, #24]
 80176f0:	68f8      	ldr	r0, [r7, #12]
 80176f2:	f000 f89d 	bl	8017830 <I2C_WaitOnTXISFlagUntilTimeout>
 80176f6:	4603      	mov	r3, r0
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d001      	beq.n	8017700 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80176fc:	2301      	movs	r3, #1
 80176fe:	e02c      	b.n	801775a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8017700:	88fb      	ldrh	r3, [r7, #6]
 8017702:	2b01      	cmp	r3, #1
 8017704:	d105      	bne.n	8017712 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017706:	893b      	ldrh	r3, [r7, #8]
 8017708:	b2da      	uxtb	r2, r3
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	629a      	str	r2, [r3, #40]	; 0x28
 8017710:	e015      	b.n	801773e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8017712:	893b      	ldrh	r3, [r7, #8]
 8017714:	0a1b      	lsrs	r3, r3, #8
 8017716:	b29b      	uxth	r3, r3
 8017718:	b2da      	uxtb	r2, r3
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017720:	69fa      	ldr	r2, [r7, #28]
 8017722:	69b9      	ldr	r1, [r7, #24]
 8017724:	68f8      	ldr	r0, [r7, #12]
 8017726:	f000 f883 	bl	8017830 <I2C_WaitOnTXISFlagUntilTimeout>
 801772a:	4603      	mov	r3, r0
 801772c:	2b00      	cmp	r3, #0
 801772e:	d001      	beq.n	8017734 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8017730:	2301      	movs	r3, #1
 8017732:	e012      	b.n	801775a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017734:	893b      	ldrh	r3, [r7, #8]
 8017736:	b2da      	uxtb	r2, r3
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801773e:	69fb      	ldr	r3, [r7, #28]
 8017740:	9300      	str	r3, [sp, #0]
 8017742:	69bb      	ldr	r3, [r7, #24]
 8017744:	2200      	movs	r2, #0
 8017746:	2140      	movs	r1, #64	; 0x40
 8017748:	68f8      	ldr	r0, [r7, #12]
 801774a:	f000 f831 	bl	80177b0 <I2C_WaitOnFlagUntilTimeout>
 801774e:	4603      	mov	r3, r0
 8017750:	2b00      	cmp	r3, #0
 8017752:	d001      	beq.n	8017758 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8017754:	2301      	movs	r3, #1
 8017756:	e000      	b.n	801775a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8017758:	2300      	movs	r3, #0
}
 801775a:	4618      	mov	r0, r3
 801775c:	3710      	adds	r7, #16
 801775e:	46bd      	mov	sp, r7
 8017760:	bd80      	pop	{r7, pc}
 8017762:	bf00      	nop
 8017764:	80002000 	.word	0x80002000

08017768 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8017768:	b480      	push	{r7}
 801776a:	b083      	sub	sp, #12
 801776c:	af00      	add	r7, sp, #0
 801776e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	699b      	ldr	r3, [r3, #24]
 8017776:	f003 0302 	and.w	r3, r3, #2
 801777a:	2b02      	cmp	r3, #2
 801777c:	d103      	bne.n	8017786 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	2200      	movs	r2, #0
 8017784:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	699b      	ldr	r3, [r3, #24]
 801778c:	f003 0301 	and.w	r3, r3, #1
 8017790:	2b01      	cmp	r3, #1
 8017792:	d007      	beq.n	80177a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	699a      	ldr	r2, [r3, #24]
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	f042 0201 	orr.w	r2, r2, #1
 80177a2:	619a      	str	r2, [r3, #24]
  }
}
 80177a4:	bf00      	nop
 80177a6:	370c      	adds	r7, #12
 80177a8:	46bd      	mov	sp, r7
 80177aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ae:	4770      	bx	lr

080177b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b084      	sub	sp, #16
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	60f8      	str	r0, [r7, #12]
 80177b8:	60b9      	str	r1, [r7, #8]
 80177ba:	603b      	str	r3, [r7, #0]
 80177bc:	4613      	mov	r3, r2
 80177be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80177c0:	e022      	b.n	8017808 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80177c2:	683b      	ldr	r3, [r7, #0]
 80177c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177c8:	d01e      	beq.n	8017808 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80177ca:	f7fe fefb 	bl	80165c4 <HAL_GetTick>
 80177ce:	4602      	mov	r2, r0
 80177d0:	69bb      	ldr	r3, [r7, #24]
 80177d2:	1ad3      	subs	r3, r2, r3
 80177d4:	683a      	ldr	r2, [r7, #0]
 80177d6:	429a      	cmp	r2, r3
 80177d8:	d302      	bcc.n	80177e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80177da:	683b      	ldr	r3, [r7, #0]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d113      	bne.n	8017808 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80177e4:	f043 0220 	orr.w	r2, r3, #32
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	2220      	movs	r2, #32
 80177f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	2200      	movs	r2, #0
 80177f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	2200      	movs	r2, #0
 8017800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8017804:	2301      	movs	r3, #1
 8017806:	e00f      	b.n	8017828 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	699a      	ldr	r2, [r3, #24]
 801780e:	68bb      	ldr	r3, [r7, #8]
 8017810:	4013      	ands	r3, r2
 8017812:	68ba      	ldr	r2, [r7, #8]
 8017814:	429a      	cmp	r2, r3
 8017816:	bf0c      	ite	eq
 8017818:	2301      	moveq	r3, #1
 801781a:	2300      	movne	r3, #0
 801781c:	b2db      	uxtb	r3, r3
 801781e:	461a      	mov	r2, r3
 8017820:	79fb      	ldrb	r3, [r7, #7]
 8017822:	429a      	cmp	r2, r3
 8017824:	d0cd      	beq.n	80177c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8017826:	2300      	movs	r3, #0
}
 8017828:	4618      	mov	r0, r3
 801782a:	3710      	adds	r7, #16
 801782c:	46bd      	mov	sp, r7
 801782e:	bd80      	pop	{r7, pc}

08017830 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b084      	sub	sp, #16
 8017834:	af00      	add	r7, sp, #0
 8017836:	60f8      	str	r0, [r7, #12]
 8017838:	60b9      	str	r1, [r7, #8]
 801783a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801783c:	e02c      	b.n	8017898 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801783e:	687a      	ldr	r2, [r7, #4]
 8017840:	68b9      	ldr	r1, [r7, #8]
 8017842:	68f8      	ldr	r0, [r7, #12]
 8017844:	f000 f8ea 	bl	8017a1c <I2C_IsErrorOccurred>
 8017848:	4603      	mov	r3, r0
 801784a:	2b00      	cmp	r3, #0
 801784c:	d001      	beq.n	8017852 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801784e:	2301      	movs	r3, #1
 8017850:	e02a      	b.n	80178a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017852:	68bb      	ldr	r3, [r7, #8]
 8017854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017858:	d01e      	beq.n	8017898 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801785a:	f7fe feb3 	bl	80165c4 <HAL_GetTick>
 801785e:	4602      	mov	r2, r0
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	1ad3      	subs	r3, r2, r3
 8017864:	68ba      	ldr	r2, [r7, #8]
 8017866:	429a      	cmp	r2, r3
 8017868:	d302      	bcc.n	8017870 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801786a:	68bb      	ldr	r3, [r7, #8]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d113      	bne.n	8017898 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017874:	f043 0220 	orr.w	r2, r3, #32
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	2220      	movs	r2, #32
 8017880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	2200      	movs	r2, #0
 8017888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	2200      	movs	r2, #0
 8017890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8017894:	2301      	movs	r3, #1
 8017896:	e007      	b.n	80178a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	699b      	ldr	r3, [r3, #24]
 801789e:	f003 0302 	and.w	r3, r3, #2
 80178a2:	2b02      	cmp	r3, #2
 80178a4:	d1cb      	bne.n	801783e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80178a6:	2300      	movs	r3, #0
}
 80178a8:	4618      	mov	r0, r3
 80178aa:	3710      	adds	r7, #16
 80178ac:	46bd      	mov	sp, r7
 80178ae:	bd80      	pop	{r7, pc}

080178b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b084      	sub	sp, #16
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	60f8      	str	r0, [r7, #12]
 80178b8:	60b9      	str	r1, [r7, #8]
 80178ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80178bc:	e028      	b.n	8017910 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80178be:	687a      	ldr	r2, [r7, #4]
 80178c0:	68b9      	ldr	r1, [r7, #8]
 80178c2:	68f8      	ldr	r0, [r7, #12]
 80178c4:	f000 f8aa 	bl	8017a1c <I2C_IsErrorOccurred>
 80178c8:	4603      	mov	r3, r0
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d001      	beq.n	80178d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80178ce:	2301      	movs	r3, #1
 80178d0:	e026      	b.n	8017920 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80178d2:	f7fe fe77 	bl	80165c4 <HAL_GetTick>
 80178d6:	4602      	mov	r2, r0
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	1ad3      	subs	r3, r2, r3
 80178dc:	68ba      	ldr	r2, [r7, #8]
 80178de:	429a      	cmp	r2, r3
 80178e0:	d302      	bcc.n	80178e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80178e2:	68bb      	ldr	r3, [r7, #8]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d113      	bne.n	8017910 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80178ec:	f043 0220 	orr.w	r2, r3, #32
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	2220      	movs	r2, #32
 80178f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	2200      	movs	r2, #0
 8017900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	2200      	movs	r2, #0
 8017908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801790c:	2301      	movs	r3, #1
 801790e:	e007      	b.n	8017920 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	699b      	ldr	r3, [r3, #24]
 8017916:	f003 0320 	and.w	r3, r3, #32
 801791a:	2b20      	cmp	r3, #32
 801791c:	d1cf      	bne.n	80178be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801791e:	2300      	movs	r3, #0
}
 8017920:	4618      	mov	r0, r3
 8017922:	3710      	adds	r7, #16
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}

08017928 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b084      	sub	sp, #16
 801792c:	af00      	add	r7, sp, #0
 801792e:	60f8      	str	r0, [r7, #12]
 8017930:	60b9      	str	r1, [r7, #8]
 8017932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017934:	e064      	b.n	8017a00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017936:	687a      	ldr	r2, [r7, #4]
 8017938:	68b9      	ldr	r1, [r7, #8]
 801793a:	68f8      	ldr	r0, [r7, #12]
 801793c:	f000 f86e 	bl	8017a1c <I2C_IsErrorOccurred>
 8017940:	4603      	mov	r3, r0
 8017942:	2b00      	cmp	r3, #0
 8017944:	d001      	beq.n	801794a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017946:	2301      	movs	r3, #1
 8017948:	e062      	b.n	8017a10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	699b      	ldr	r3, [r3, #24]
 8017950:	f003 0320 	and.w	r3, r3, #32
 8017954:	2b20      	cmp	r3, #32
 8017956:	d138      	bne.n	80179ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	699b      	ldr	r3, [r3, #24]
 801795e:	f003 0304 	and.w	r3, r3, #4
 8017962:	2b04      	cmp	r3, #4
 8017964:	d105      	bne.n	8017972 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801796a:	2b00      	cmp	r3, #0
 801796c:	d001      	beq.n	8017972 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801796e:	2300      	movs	r3, #0
 8017970:	e04e      	b.n	8017a10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	699b      	ldr	r3, [r3, #24]
 8017978:	f003 0310 	and.w	r3, r3, #16
 801797c:	2b10      	cmp	r3, #16
 801797e:	d107      	bne.n	8017990 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	2210      	movs	r2, #16
 8017986:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	2204      	movs	r2, #4
 801798c:	645a      	str	r2, [r3, #68]	; 0x44
 801798e:	e002      	b.n	8017996 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	2200      	movs	r2, #0
 8017994:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	2220      	movs	r2, #32
 801799c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	6859      	ldr	r1, [r3, #4]
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	681a      	ldr	r2, [r3, #0]
 80179a8:	4b1b      	ldr	r3, [pc, #108]	; (8017a18 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80179aa:	400b      	ands	r3, r1
 80179ac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	2220      	movs	r2, #32
 80179b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	2200      	movs	r2, #0
 80179ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	2200      	movs	r2, #0
 80179c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80179c6:	2301      	movs	r3, #1
 80179c8:	e022      	b.n	8017a10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80179ca:	f7fe fdfb 	bl	80165c4 <HAL_GetTick>
 80179ce:	4602      	mov	r2, r0
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	1ad3      	subs	r3, r2, r3
 80179d4:	68ba      	ldr	r2, [r7, #8]
 80179d6:	429a      	cmp	r2, r3
 80179d8:	d302      	bcc.n	80179e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80179da:	68bb      	ldr	r3, [r7, #8]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d10f      	bne.n	8017a00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179e4:	f043 0220 	orr.w	r2, r3, #32
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	2220      	movs	r2, #32
 80179f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	2200      	movs	r2, #0
 80179f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80179fc:	2301      	movs	r3, #1
 80179fe:	e007      	b.n	8017a10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	699b      	ldr	r3, [r3, #24]
 8017a06:	f003 0304 	and.w	r3, r3, #4
 8017a0a:	2b04      	cmp	r3, #4
 8017a0c:	d193      	bne.n	8017936 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8017a0e:	2300      	movs	r3, #0
}
 8017a10:	4618      	mov	r0, r3
 8017a12:	3710      	adds	r7, #16
 8017a14:	46bd      	mov	sp, r7
 8017a16:	bd80      	pop	{r7, pc}
 8017a18:	fe00e800 	.word	0xfe00e800

08017a1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b08a      	sub	sp, #40	; 0x28
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	60f8      	str	r0, [r7, #12]
 8017a24:	60b9      	str	r1, [r7, #8]
 8017a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017a28:	2300      	movs	r3, #0
 8017a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	699b      	ldr	r3, [r3, #24]
 8017a34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8017a36:	2300      	movs	r3, #0
 8017a38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8017a3e:	69bb      	ldr	r3, [r7, #24]
 8017a40:	f003 0310 	and.w	r3, r3, #16
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d075      	beq.n	8017b34 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	2210      	movs	r2, #16
 8017a4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017a50:	e056      	b.n	8017b00 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8017a52:	68bb      	ldr	r3, [r7, #8]
 8017a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a58:	d052      	beq.n	8017b00 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8017a5a:	f7fe fdb3 	bl	80165c4 <HAL_GetTick>
 8017a5e:	4602      	mov	r2, r0
 8017a60:	69fb      	ldr	r3, [r7, #28]
 8017a62:	1ad3      	subs	r3, r2, r3
 8017a64:	68ba      	ldr	r2, [r7, #8]
 8017a66:	429a      	cmp	r2, r3
 8017a68:	d302      	bcc.n	8017a70 <I2C_IsErrorOccurred+0x54>
 8017a6a:	68bb      	ldr	r3, [r7, #8]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d147      	bne.n	8017b00 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	685b      	ldr	r3, [r3, #4]
 8017a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017a7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017a82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	699b      	ldr	r3, [r3, #24]
 8017a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017a92:	d12e      	bne.n	8017af2 <I2C_IsErrorOccurred+0xd6>
 8017a94:	697b      	ldr	r3, [r7, #20]
 8017a96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017a9a:	d02a      	beq.n	8017af2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8017a9c:	7cfb      	ldrb	r3, [r7, #19]
 8017a9e:	2b20      	cmp	r3, #32
 8017aa0:	d027      	beq.n	8017af2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	685a      	ldr	r2, [r3, #4]
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8017ab0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8017ab2:	f7fe fd87 	bl	80165c4 <HAL_GetTick>
 8017ab6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017ab8:	e01b      	b.n	8017af2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8017aba:	f7fe fd83 	bl	80165c4 <HAL_GetTick>
 8017abe:	4602      	mov	r2, r0
 8017ac0:	69fb      	ldr	r3, [r7, #28]
 8017ac2:	1ad3      	subs	r3, r2, r3
 8017ac4:	2b19      	cmp	r3, #25
 8017ac6:	d914      	bls.n	8017af2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017acc:	f043 0220 	orr.w	r2, r3, #32
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	2220      	movs	r2, #32
 8017ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	2200      	movs	r2, #0
 8017ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	2200      	movs	r2, #0
 8017ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8017aec:	2301      	movs	r3, #1
 8017aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	699b      	ldr	r3, [r3, #24]
 8017af8:	f003 0320 	and.w	r3, r3, #32
 8017afc:	2b20      	cmp	r3, #32
 8017afe:	d1dc      	bne.n	8017aba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	699b      	ldr	r3, [r3, #24]
 8017b06:	f003 0320 	and.w	r3, r3, #32
 8017b0a:	2b20      	cmp	r3, #32
 8017b0c:	d003      	beq.n	8017b16 <I2C_IsErrorOccurred+0xfa>
 8017b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d09d      	beq.n	8017a52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8017b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d103      	bne.n	8017b26 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	2220      	movs	r2, #32
 8017b24:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8017b26:	6a3b      	ldr	r3, [r7, #32]
 8017b28:	f043 0304 	orr.w	r3, r3, #4
 8017b2c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8017b2e:	2301      	movs	r3, #1
 8017b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	699b      	ldr	r3, [r3, #24]
 8017b3a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8017b3c:	69bb      	ldr	r3, [r7, #24]
 8017b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d00b      	beq.n	8017b5e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8017b46:	6a3b      	ldr	r3, [r7, #32]
 8017b48:	f043 0301 	orr.w	r3, r3, #1
 8017b4c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017b56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017b58:	2301      	movs	r3, #1
 8017b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8017b5e:	69bb      	ldr	r3, [r7, #24]
 8017b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d00b      	beq.n	8017b80 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8017b68:	6a3b      	ldr	r3, [r7, #32]
 8017b6a:	f043 0308 	orr.w	r3, r3, #8
 8017b6e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017b78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017b7a:	2301      	movs	r3, #1
 8017b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8017b80:	69bb      	ldr	r3, [r7, #24]
 8017b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d00b      	beq.n	8017ba2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8017b8a:	6a3b      	ldr	r3, [r7, #32]
 8017b8c:	f043 0302 	orr.w	r3, r3, #2
 8017b90:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017b9c:	2301      	movs	r3, #1
 8017b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8017ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d01c      	beq.n	8017be4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017baa:	68f8      	ldr	r0, [r7, #12]
 8017bac:	f7ff fddc 	bl	8017768 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	6859      	ldr	r1, [r3, #4]
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	681a      	ldr	r2, [r3, #0]
 8017bba:	4b0d      	ldr	r3, [pc, #52]	; (8017bf0 <I2C_IsErrorOccurred+0x1d4>)
 8017bbc:	400b      	ands	r3, r1
 8017bbe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017bc4:	6a3b      	ldr	r3, [r7, #32]
 8017bc6:	431a      	orrs	r2, r3
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	2220      	movs	r2, #32
 8017bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	2200      	movs	r2, #0
 8017bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	2200      	movs	r2, #0
 8017be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8017be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8017be8:	4618      	mov	r0, r3
 8017bea:	3728      	adds	r7, #40	; 0x28
 8017bec:	46bd      	mov	sp, r7
 8017bee:	bd80      	pop	{r7, pc}
 8017bf0:	fe00e800 	.word	0xfe00e800

08017bf4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8017bf4:	b480      	push	{r7}
 8017bf6:	b087      	sub	sp, #28
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	60f8      	str	r0, [r7, #12]
 8017bfc:	607b      	str	r3, [r7, #4]
 8017bfe:	460b      	mov	r3, r1
 8017c00:	817b      	strh	r3, [r7, #10]
 8017c02:	4613      	mov	r3, r2
 8017c04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017c06:	897b      	ldrh	r3, [r7, #10]
 8017c08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017c0c:	7a7b      	ldrb	r3, [r7, #9]
 8017c0e:	041b      	lsls	r3, r3, #16
 8017c10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017c14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017c1a:	6a3b      	ldr	r3, [r7, #32]
 8017c1c:	4313      	orrs	r3, r2
 8017c1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017c22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	685a      	ldr	r2, [r3, #4]
 8017c2a:	6a3b      	ldr	r3, [r7, #32]
 8017c2c:	0d5b      	lsrs	r3, r3, #21
 8017c2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8017c32:	4b08      	ldr	r3, [pc, #32]	; (8017c54 <I2C_TransferConfig+0x60>)
 8017c34:	430b      	orrs	r3, r1
 8017c36:	43db      	mvns	r3, r3
 8017c38:	ea02 0103 	and.w	r1, r2, r3
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	697a      	ldr	r2, [r7, #20]
 8017c42:	430a      	orrs	r2, r1
 8017c44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8017c46:	bf00      	nop
 8017c48:	371c      	adds	r7, #28
 8017c4a:	46bd      	mov	sp, r7
 8017c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c50:	4770      	bx	lr
 8017c52:	bf00      	nop
 8017c54:	03ff63ff 	.word	0x03ff63ff

08017c58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8017c58:	b480      	push	{r7}
 8017c5a:	b083      	sub	sp, #12
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
 8017c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017c68:	b2db      	uxtb	r3, r3
 8017c6a:	2b20      	cmp	r3, #32
 8017c6c:	d138      	bne.n	8017ce0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017c74:	2b01      	cmp	r3, #1
 8017c76:	d101      	bne.n	8017c7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8017c78:	2302      	movs	r3, #2
 8017c7a:	e032      	b.n	8017ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	2201      	movs	r2, #1
 8017c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	2224      	movs	r2, #36	; 0x24
 8017c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	681a      	ldr	r2, [r3, #0]
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	f022 0201 	bic.w	r2, r2, #1
 8017c9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	681a      	ldr	r2, [r3, #0]
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8017caa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	6819      	ldr	r1, [r3, #0]
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	683a      	ldr	r2, [r7, #0]
 8017cb8:	430a      	orrs	r2, r1
 8017cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	681a      	ldr	r2, [r3, #0]
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	f042 0201 	orr.w	r2, r2, #1
 8017cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	2220      	movs	r2, #32
 8017cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8017cdc:	2300      	movs	r3, #0
 8017cde:	e000      	b.n	8017ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8017ce0:	2302      	movs	r3, #2
  }
}
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	370c      	adds	r7, #12
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cec:	4770      	bx	lr

08017cee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8017cee:	b480      	push	{r7}
 8017cf0:	b085      	sub	sp, #20
 8017cf2:	af00      	add	r7, sp, #0
 8017cf4:	6078      	str	r0, [r7, #4]
 8017cf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017cfe:	b2db      	uxtb	r3, r3
 8017d00:	2b20      	cmp	r3, #32
 8017d02:	d139      	bne.n	8017d78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017d0a:	2b01      	cmp	r3, #1
 8017d0c:	d101      	bne.n	8017d12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8017d0e:	2302      	movs	r3, #2
 8017d10:	e033      	b.n	8017d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	2201      	movs	r2, #1
 8017d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	2224      	movs	r2, #36	; 0x24
 8017d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	681a      	ldr	r2, [r3, #0]
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	f022 0201 	bic.w	r2, r2, #1
 8017d30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8017d40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8017d42:	683b      	ldr	r3, [r7, #0]
 8017d44:	021b      	lsls	r3, r3, #8
 8017d46:	68fa      	ldr	r2, [r7, #12]
 8017d48:	4313      	orrs	r3, r2
 8017d4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	68fa      	ldr	r2, [r7, #12]
 8017d52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	681a      	ldr	r2, [r3, #0]
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	f042 0201 	orr.w	r2, r2, #1
 8017d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	2220      	movs	r2, #32
 8017d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	2200      	movs	r2, #0
 8017d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8017d74:	2300      	movs	r3, #0
 8017d76:	e000      	b.n	8017d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8017d78:	2302      	movs	r3, #2
  }
}
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	3714      	adds	r7, #20
 8017d7e:	46bd      	mov	sp, r7
 8017d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d84:	4770      	bx	lr

08017d86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8017d86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d88:	b08b      	sub	sp, #44	; 0x2c
 8017d8a:	af06      	add	r7, sp, #24
 8017d8c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d101      	bne.n	8017d98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8017d94:	2301      	movs	r3, #1
 8017d96:	e0cb      	b.n	8017f30 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8017d9e:	b2db      	uxtb	r3, r3
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d106      	bne.n	8017db2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	2200      	movs	r2, #0
 8017da8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8017dac:	6878      	ldr	r0, [r7, #4]
 8017dae:	f7ea fb9d 	bl	80024ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	2203      	movs	r2, #3
 8017db6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	f002 fed0 	bl	801ab64 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	73fb      	strb	r3, [r7, #15]
 8017dc8:	e040      	b.n	8017e4c <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8017dca:	7bfb      	ldrb	r3, [r7, #15]
 8017dcc:	6879      	ldr	r1, [r7, #4]
 8017dce:	1c5a      	adds	r2, r3, #1
 8017dd0:	4613      	mov	r3, r2
 8017dd2:	009b      	lsls	r3, r3, #2
 8017dd4:	4413      	add	r3, r2
 8017dd6:	00db      	lsls	r3, r3, #3
 8017dd8:	440b      	add	r3, r1
 8017dda:	3301      	adds	r3, #1
 8017ddc:	2201      	movs	r2, #1
 8017dde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8017de0:	7bfb      	ldrb	r3, [r7, #15]
 8017de2:	6879      	ldr	r1, [r7, #4]
 8017de4:	1c5a      	adds	r2, r3, #1
 8017de6:	4613      	mov	r3, r2
 8017de8:	009b      	lsls	r3, r3, #2
 8017dea:	4413      	add	r3, r2
 8017dec:	00db      	lsls	r3, r3, #3
 8017dee:	440b      	add	r3, r1
 8017df0:	7bfa      	ldrb	r2, [r7, #15]
 8017df2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8017df4:	7bfb      	ldrb	r3, [r7, #15]
 8017df6:	6879      	ldr	r1, [r7, #4]
 8017df8:	1c5a      	adds	r2, r3, #1
 8017dfa:	4613      	mov	r3, r2
 8017dfc:	009b      	lsls	r3, r3, #2
 8017dfe:	4413      	add	r3, r2
 8017e00:	00db      	lsls	r3, r3, #3
 8017e02:	440b      	add	r3, r1
 8017e04:	3303      	adds	r3, #3
 8017e06:	2200      	movs	r2, #0
 8017e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8017e0a:	7bfa      	ldrb	r2, [r7, #15]
 8017e0c:	6879      	ldr	r1, [r7, #4]
 8017e0e:	4613      	mov	r3, r2
 8017e10:	009b      	lsls	r3, r3, #2
 8017e12:	4413      	add	r3, r2
 8017e14:	00db      	lsls	r3, r3, #3
 8017e16:	440b      	add	r3, r1
 8017e18:	3338      	adds	r3, #56	; 0x38
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8017e1e:	7bfa      	ldrb	r2, [r7, #15]
 8017e20:	6879      	ldr	r1, [r7, #4]
 8017e22:	4613      	mov	r3, r2
 8017e24:	009b      	lsls	r3, r3, #2
 8017e26:	4413      	add	r3, r2
 8017e28:	00db      	lsls	r3, r3, #3
 8017e2a:	440b      	add	r3, r1
 8017e2c:	333c      	adds	r3, #60	; 0x3c
 8017e2e:	2200      	movs	r2, #0
 8017e30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8017e32:	7bfa      	ldrb	r2, [r7, #15]
 8017e34:	6879      	ldr	r1, [r7, #4]
 8017e36:	4613      	mov	r3, r2
 8017e38:	009b      	lsls	r3, r3, #2
 8017e3a:	4413      	add	r3, r2
 8017e3c:	00db      	lsls	r3, r3, #3
 8017e3e:	440b      	add	r3, r1
 8017e40:	3340      	adds	r3, #64	; 0x40
 8017e42:	2200      	movs	r2, #0
 8017e44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017e46:	7bfb      	ldrb	r3, [r7, #15]
 8017e48:	3301      	adds	r3, #1
 8017e4a:	73fb      	strb	r3, [r7, #15]
 8017e4c:	7bfa      	ldrb	r2, [r7, #15]
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	685b      	ldr	r3, [r3, #4]
 8017e52:	429a      	cmp	r2, r3
 8017e54:	d3b9      	bcc.n	8017dca <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017e56:	2300      	movs	r3, #0
 8017e58:	73fb      	strb	r3, [r7, #15]
 8017e5a:	e044      	b.n	8017ee6 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8017e5c:	7bfa      	ldrb	r2, [r7, #15]
 8017e5e:	6879      	ldr	r1, [r7, #4]
 8017e60:	4613      	mov	r3, r2
 8017e62:	009b      	lsls	r3, r3, #2
 8017e64:	4413      	add	r3, r2
 8017e66:	00db      	lsls	r3, r3, #3
 8017e68:	440b      	add	r3, r1
 8017e6a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8017e6e:	2200      	movs	r2, #0
 8017e70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8017e72:	7bfa      	ldrb	r2, [r7, #15]
 8017e74:	6879      	ldr	r1, [r7, #4]
 8017e76:	4613      	mov	r3, r2
 8017e78:	009b      	lsls	r3, r3, #2
 8017e7a:	4413      	add	r3, r2
 8017e7c:	00db      	lsls	r3, r3, #3
 8017e7e:	440b      	add	r3, r1
 8017e80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8017e84:	7bfa      	ldrb	r2, [r7, #15]
 8017e86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8017e88:	7bfa      	ldrb	r2, [r7, #15]
 8017e8a:	6879      	ldr	r1, [r7, #4]
 8017e8c:	4613      	mov	r3, r2
 8017e8e:	009b      	lsls	r3, r3, #2
 8017e90:	4413      	add	r3, r2
 8017e92:	00db      	lsls	r3, r3, #3
 8017e94:	440b      	add	r3, r1
 8017e96:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8017e9a:	2200      	movs	r2, #0
 8017e9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8017e9e:	7bfa      	ldrb	r2, [r7, #15]
 8017ea0:	6879      	ldr	r1, [r7, #4]
 8017ea2:	4613      	mov	r3, r2
 8017ea4:	009b      	lsls	r3, r3, #2
 8017ea6:	4413      	add	r3, r2
 8017ea8:	00db      	lsls	r3, r3, #3
 8017eaa:	440b      	add	r3, r1
 8017eac:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8017eb4:	7bfa      	ldrb	r2, [r7, #15]
 8017eb6:	6879      	ldr	r1, [r7, #4]
 8017eb8:	4613      	mov	r3, r2
 8017eba:	009b      	lsls	r3, r3, #2
 8017ebc:	4413      	add	r3, r2
 8017ebe:	00db      	lsls	r3, r3, #3
 8017ec0:	440b      	add	r3, r1
 8017ec2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8017eca:	7bfa      	ldrb	r2, [r7, #15]
 8017ecc:	6879      	ldr	r1, [r7, #4]
 8017ece:	4613      	mov	r3, r2
 8017ed0:	009b      	lsls	r3, r3, #2
 8017ed2:	4413      	add	r3, r2
 8017ed4:	00db      	lsls	r3, r3, #3
 8017ed6:	440b      	add	r3, r1
 8017ed8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8017edc:	2200      	movs	r2, #0
 8017ede:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017ee0:	7bfb      	ldrb	r3, [r7, #15]
 8017ee2:	3301      	adds	r3, #1
 8017ee4:	73fb      	strb	r3, [r7, #15]
 8017ee6:	7bfa      	ldrb	r2, [r7, #15]
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	685b      	ldr	r3, [r3, #4]
 8017eec:	429a      	cmp	r2, r3
 8017eee:	d3b5      	bcc.n	8017e5c <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	603b      	str	r3, [r7, #0]
 8017ef6:	687e      	ldr	r6, [r7, #4]
 8017ef8:	466d      	mov	r5, sp
 8017efa:	f106 0410 	add.w	r4, r6, #16
 8017efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017f00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017f02:	6823      	ldr	r3, [r4, #0]
 8017f04:	602b      	str	r3, [r5, #0]
 8017f06:	1d33      	adds	r3, r6, #4
 8017f08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017f0a:	6838      	ldr	r0, [r7, #0]
 8017f0c:	f002 fe45 	bl	801ab9a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	2200      	movs	r2, #0
 8017f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	2201      	movs	r2, #1
 8017f1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	69db      	ldr	r3, [r3, #28]
 8017f24:	2b01      	cmp	r3, #1
 8017f26:	d102      	bne.n	8017f2e <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8017f28:	6878      	ldr	r0, [r7, #4]
 8017f2a:	f000 f805 	bl	8017f38 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8017f2e:	2300      	movs	r3, #0
}
 8017f30:	4618      	mov	r0, r3
 8017f32:	3714      	adds	r7, #20
 8017f34:	46bd      	mov	sp, r7
 8017f36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017f38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8017f38:	b480      	push	{r7}
 8017f3a:	b085      	sub	sp, #20
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	2201      	movs	r2, #1
 8017f4a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	2200      	movs	r2, #0
 8017f52:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8017f56:	68fb      	ldr	r3, [r7, #12]
 8017f58:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8017f5c:	b29b      	uxth	r3, r3
 8017f5e:	f043 0301 	orr.w	r3, r3, #1
 8017f62:	b29a      	uxth	r2, r3
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8017f70:	b29b      	uxth	r3, r3
 8017f72:	f043 0302 	orr.w	r3, r3, #2
 8017f76:	b29a      	uxth	r2, r3
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8017f7e:	2300      	movs	r3, #0
}
 8017f80:	4618      	mov	r0, r3
 8017f82:	3714      	adds	r7, #20
 8017f84:	46bd      	mov	sp, r7
 8017f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f8a:	4770      	bx	lr

08017f8c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8017f8c:	b480      	push	{r7}
 8017f8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8017f90:	4b05      	ldr	r3, [pc, #20]	; (8017fa8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	4a04      	ldr	r2, [pc, #16]	; (8017fa8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8017f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017f9a:	6013      	str	r3, [r2, #0]
}
 8017f9c:	bf00      	nop
 8017f9e:	46bd      	mov	sp, r7
 8017fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa4:	4770      	bx	lr
 8017fa6:	bf00      	nop
 8017fa8:	58000400 	.word	0x58000400

08017fac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8017fac:	b480      	push	{r7}
 8017fae:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8017fb0:	4b04      	ldr	r3, [pc, #16]	; (8017fc4 <HAL_PWREx_GetVoltageRange+0x18>)
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8017fb8:	4618      	mov	r0, r3
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fc0:	4770      	bx	lr
 8017fc2:	bf00      	nop
 8017fc4:	58000400 	.word	0x58000400

08017fc8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8017fc8:	b480      	push	{r7}
 8017fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8017fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017fda:	d101      	bne.n	8017fe0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8017fdc:	2301      	movs	r3, #1
 8017fde:	e000      	b.n	8017fe2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8017fe0:	2300      	movs	r3, #0
}
 8017fe2:	4618      	mov	r0, r3
 8017fe4:	46bd      	mov	sp, r7
 8017fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fea:	4770      	bx	lr

08017fec <LL_RCC_HSE_Enable>:
{
 8017fec:	b480      	push	{r7}
 8017fee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8017ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017ffe:	6013      	str	r3, [r2, #0]
}
 8018000:	bf00      	nop
 8018002:	46bd      	mov	sp, r7
 8018004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018008:	4770      	bx	lr

0801800a <LL_RCC_HSE_Disable>:
{
 801800a:	b480      	push	{r7}
 801800c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 801800e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801801c:	6013      	str	r3, [r2, #0]
}
 801801e:	bf00      	nop
 8018020:	46bd      	mov	sp, r7
 8018022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018026:	4770      	bx	lr

08018028 <LL_RCC_HSE_IsReady>:
{
 8018028:	b480      	push	{r7}
 801802a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 801802c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801803a:	d101      	bne.n	8018040 <LL_RCC_HSE_IsReady+0x18>
 801803c:	2301      	movs	r3, #1
 801803e:	e000      	b.n	8018042 <LL_RCC_HSE_IsReady+0x1a>
 8018040:	2300      	movs	r3, #0
}
 8018042:	4618      	mov	r0, r3
 8018044:	46bd      	mov	sp, r7
 8018046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801804a:	4770      	bx	lr

0801804c <LL_RCC_HSI_Enable>:
{
 801804c:	b480      	push	{r7}
 801804e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8018050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801805a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801805e:	6013      	str	r3, [r2, #0]
}
 8018060:	bf00      	nop
 8018062:	46bd      	mov	sp, r7
 8018064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018068:	4770      	bx	lr

0801806a <LL_RCC_HSI_Disable>:
{
 801806a:	b480      	push	{r7}
 801806c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 801806e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801807c:	6013      	str	r3, [r2, #0]
}
 801807e:	bf00      	nop
 8018080:	46bd      	mov	sp, r7
 8018082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018086:	4770      	bx	lr

08018088 <LL_RCC_HSI_IsReady>:
{
 8018088:	b480      	push	{r7}
 801808a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801808c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801809a:	d101      	bne.n	80180a0 <LL_RCC_HSI_IsReady+0x18>
 801809c:	2301      	movs	r3, #1
 801809e:	e000      	b.n	80180a2 <LL_RCC_HSI_IsReady+0x1a>
 80180a0:	2300      	movs	r3, #0
}
 80180a2:	4618      	mov	r0, r3
 80180a4:	46bd      	mov	sp, r7
 80180a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180aa:	4770      	bx	lr

080180ac <LL_RCC_HSI_SetCalibTrimming>:
{
 80180ac:	b480      	push	{r7}
 80180ae:	b083      	sub	sp, #12
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80180b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180b8:	685b      	ldr	r3, [r3, #4]
 80180ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	061b      	lsls	r3, r3, #24
 80180c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80180c6:	4313      	orrs	r3, r2
 80180c8:	604b      	str	r3, [r1, #4]
}
 80180ca:	bf00      	nop
 80180cc:	370c      	adds	r7, #12
 80180ce:	46bd      	mov	sp, r7
 80180d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180d4:	4770      	bx	lr

080180d6 <LL_RCC_HSI48_Enable>:
{
 80180d6:	b480      	push	{r7}
 80180d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80180da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80180e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80180e6:	f043 0301 	orr.w	r3, r3, #1
 80180ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80180ee:	bf00      	nop
 80180f0:	46bd      	mov	sp, r7
 80180f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f6:	4770      	bx	lr

080180f8 <LL_RCC_HSI48_Disable>:
{
 80180f8:	b480      	push	{r7}
 80180fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80180fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018100:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018108:	f023 0301 	bic.w	r3, r3, #1
 801810c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8018110:	bf00      	nop
 8018112:	46bd      	mov	sp, r7
 8018114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018118:	4770      	bx	lr

0801811a <LL_RCC_HSI48_IsReady>:
{
 801811a:	b480      	push	{r7}
 801811c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 801811e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018122:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018126:	f003 0302 	and.w	r3, r3, #2
 801812a:	2b02      	cmp	r3, #2
 801812c:	d101      	bne.n	8018132 <LL_RCC_HSI48_IsReady+0x18>
 801812e:	2301      	movs	r3, #1
 8018130:	e000      	b.n	8018134 <LL_RCC_HSI48_IsReady+0x1a>
 8018132:	2300      	movs	r3, #0
}
 8018134:	4618      	mov	r0, r3
 8018136:	46bd      	mov	sp, r7
 8018138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801813c:	4770      	bx	lr

0801813e <LL_RCC_LSE_Enable>:
{
 801813e:	b480      	push	{r7}
 8018140:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8018142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801814a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801814e:	f043 0301 	orr.w	r3, r3, #1
 8018152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8018156:	bf00      	nop
 8018158:	46bd      	mov	sp, r7
 801815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815e:	4770      	bx	lr

08018160 <LL_RCC_LSE_Disable>:
{
 8018160:	b480      	push	{r7}
 8018162:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8018164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801816c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018170:	f023 0301 	bic.w	r3, r3, #1
 8018174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8018178:	bf00      	nop
 801817a:	46bd      	mov	sp, r7
 801817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018180:	4770      	bx	lr

08018182 <LL_RCC_LSE_EnableBypass>:
{
 8018182:	b480      	push	{r7}
 8018184:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8018186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801818a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801818e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018192:	f043 0304 	orr.w	r3, r3, #4
 8018196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801819a:	bf00      	nop
 801819c:	46bd      	mov	sp, r7
 801819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a2:	4770      	bx	lr

080181a4 <LL_RCC_LSE_DisableBypass>:
{
 80181a4:	b480      	push	{r7}
 80181a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80181a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80181b4:	f023 0304 	bic.w	r3, r3, #4
 80181b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80181bc:	bf00      	nop
 80181be:	46bd      	mov	sp, r7
 80181c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181c4:	4770      	bx	lr

080181c6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80181c6:	b480      	push	{r7}
 80181c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80181ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181d2:	f003 0302 	and.w	r3, r3, #2
 80181d6:	2b02      	cmp	r3, #2
 80181d8:	d101      	bne.n	80181de <LL_RCC_LSE_IsReady+0x18>
 80181da:	2301      	movs	r3, #1
 80181dc:	e000      	b.n	80181e0 <LL_RCC_LSE_IsReady+0x1a>
 80181de:	2300      	movs	r3, #0
}
 80181e0:	4618      	mov	r0, r3
 80181e2:	46bd      	mov	sp, r7
 80181e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e8:	4770      	bx	lr

080181ea <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80181ea:	b480      	push	{r7}
 80181ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80181ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80181f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80181fa:	f043 0301 	orr.w	r3, r3, #1
 80181fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8018202:	bf00      	nop
 8018204:	46bd      	mov	sp, r7
 8018206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820a:	4770      	bx	lr

0801820c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 801820c:	b480      	push	{r7}
 801820e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8018210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801821c:	f023 0301 	bic.w	r3, r3, #1
 8018220:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8018224:	bf00      	nop
 8018226:	46bd      	mov	sp, r7
 8018228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801822c:	4770      	bx	lr

0801822e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 801822e:	b480      	push	{r7}
 8018230:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8018232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801823a:	f003 0302 	and.w	r3, r3, #2
 801823e:	2b02      	cmp	r3, #2
 8018240:	d101      	bne.n	8018246 <LL_RCC_LSI1_IsReady+0x18>
 8018242:	2301      	movs	r3, #1
 8018244:	e000      	b.n	8018248 <LL_RCC_LSI1_IsReady+0x1a>
 8018246:	2300      	movs	r3, #0
}
 8018248:	4618      	mov	r0, r3
 801824a:	46bd      	mov	sp, r7
 801824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018250:	4770      	bx	lr

08018252 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8018252:	b480      	push	{r7}
 8018254:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8018256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801825a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801825e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018262:	f043 0304 	orr.w	r3, r3, #4
 8018266:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801826a:	bf00      	nop
 801826c:	46bd      	mov	sp, r7
 801826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018272:	4770      	bx	lr

08018274 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8018274:	b480      	push	{r7}
 8018276:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8018278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801827c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018284:	f023 0304 	bic.w	r3, r3, #4
 8018288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801828c:	bf00      	nop
 801828e:	46bd      	mov	sp, r7
 8018290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018294:	4770      	bx	lr

08018296 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8018296:	b480      	push	{r7}
 8018298:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 801829a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801829e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80182a2:	f003 0308 	and.w	r3, r3, #8
 80182a6:	2b08      	cmp	r3, #8
 80182a8:	d101      	bne.n	80182ae <LL_RCC_LSI2_IsReady+0x18>
 80182aa:	2301      	movs	r3, #1
 80182ac:	e000      	b.n	80182b0 <LL_RCC_LSI2_IsReady+0x1a>
 80182ae:	2300      	movs	r3, #0
}
 80182b0:	4618      	mov	r0, r3
 80182b2:	46bd      	mov	sp, r7
 80182b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182b8:	4770      	bx	lr

080182ba <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80182ba:	b480      	push	{r7}
 80182bc:	b083      	sub	sp, #12
 80182be:	af00      	add	r7, sp, #0
 80182c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80182c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80182ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	021b      	lsls	r3, r3, #8
 80182d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80182d6:	4313      	orrs	r3, r2
 80182d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80182dc:	bf00      	nop
 80182de:	370c      	adds	r7, #12
 80182e0:	46bd      	mov	sp, r7
 80182e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e6:	4770      	bx	lr

080182e8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80182e8:	b480      	push	{r7}
 80182ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80182ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80182f6:	f043 0301 	orr.w	r3, r3, #1
 80182fa:	6013      	str	r3, [r2, #0]
}
 80182fc:	bf00      	nop
 80182fe:	46bd      	mov	sp, r7
 8018300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018304:	4770      	bx	lr

08018306 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8018306:	b480      	push	{r7}
 8018308:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 801830a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018314:	f023 0301 	bic.w	r3, r3, #1
 8018318:	6013      	str	r3, [r2, #0]
}
 801831a:	bf00      	nop
 801831c:	46bd      	mov	sp, r7
 801831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018322:	4770      	bx	lr

08018324 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8018324:	b480      	push	{r7}
 8018326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8018328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	f003 0302 	and.w	r3, r3, #2
 8018332:	2b02      	cmp	r3, #2
 8018334:	d101      	bne.n	801833a <LL_RCC_MSI_IsReady+0x16>
 8018336:	2301      	movs	r3, #1
 8018338:	e000      	b.n	801833c <LL_RCC_MSI_IsReady+0x18>
 801833a:	2300      	movs	r3, #0
}
 801833c:	4618      	mov	r0, r3
 801833e:	46bd      	mov	sp, r7
 8018340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018344:	4770      	bx	lr

08018346 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8018346:	b480      	push	{r7}
 8018348:	b083      	sub	sp, #12
 801834a:	af00      	add	r7, sp, #0
 801834c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 801834e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8018358:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	4313      	orrs	r3, r2
 8018360:	600b      	str	r3, [r1, #0]
}
 8018362:	bf00      	nop
 8018364:	370c      	adds	r7, #12
 8018366:	46bd      	mov	sp, r7
 8018368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801836c:	4770      	bx	lr

0801836e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 801836e:	b480      	push	{r7}
 8018370:	b083      	sub	sp, #12
 8018372:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8018374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801837e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	2bb0      	cmp	r3, #176	; 0xb0
 8018384:	d901      	bls.n	801838a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8018386:	23b0      	movs	r3, #176	; 0xb0
 8018388:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 801838a:	687b      	ldr	r3, [r7, #4]
}
 801838c:	4618      	mov	r0, r3
 801838e:	370c      	adds	r7, #12
 8018390:	46bd      	mov	sp, r7
 8018392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018396:	4770      	bx	lr

08018398 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8018398:	b480      	push	{r7}
 801839a:	b083      	sub	sp, #12
 801839c:	af00      	add	r7, sp, #0
 801839e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80183a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183a4:	685b      	ldr	r3, [r3, #4]
 80183a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	021b      	lsls	r3, r3, #8
 80183ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80183b2:	4313      	orrs	r3, r2
 80183b4:	604b      	str	r3, [r1, #4]
}
 80183b6:	bf00      	nop
 80183b8:	370c      	adds	r7, #12
 80183ba:	46bd      	mov	sp, r7
 80183bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183c0:	4770      	bx	lr

080183c2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80183c2:	b480      	push	{r7}
 80183c4:	b083      	sub	sp, #12
 80183c6:	af00      	add	r7, sp, #0
 80183c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80183ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183ce:	689b      	ldr	r3, [r3, #8]
 80183d0:	f023 0203 	bic.w	r2, r3, #3
 80183d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	4313      	orrs	r3, r2
 80183dc:	608b      	str	r3, [r1, #8]
}
 80183de:	bf00      	nop
 80183e0:	370c      	adds	r7, #12
 80183e2:	46bd      	mov	sp, r7
 80183e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e8:	4770      	bx	lr

080183ea <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80183ea:	b480      	push	{r7}
 80183ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80183ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183f2:	689b      	ldr	r3, [r3, #8]
 80183f4:	f003 030c 	and.w	r3, r3, #12
}
 80183f8:	4618      	mov	r0, r3
 80183fa:	46bd      	mov	sp, r7
 80183fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018400:	4770      	bx	lr

08018402 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8018402:	b480      	push	{r7}
 8018404:	b083      	sub	sp, #12
 8018406:	af00      	add	r7, sp, #0
 8018408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 801840a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801840e:	689b      	ldr	r3, [r3, #8]
 8018410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8018414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	4313      	orrs	r3, r2
 801841c:	608b      	str	r3, [r1, #8]
}
 801841e:	bf00      	nop
 8018420:	370c      	adds	r7, #12
 8018422:	46bd      	mov	sp, r7
 8018424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018428:	4770      	bx	lr

0801842a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 801842a:	b480      	push	{r7}
 801842c:	b083      	sub	sp, #12
 801842e:	af00      	add	r7, sp, #0
 8018430:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8018432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018436:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801843a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801843e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	4313      	orrs	r3, r2
 8018446:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 801844a:	bf00      	nop
 801844c:	370c      	adds	r7, #12
 801844e:	46bd      	mov	sp, r7
 8018450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018454:	4770      	bx	lr

08018456 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8018456:	b480      	push	{r7}
 8018458:	b083      	sub	sp, #12
 801845a:	af00      	add	r7, sp, #0
 801845c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 801845e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018462:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8018466:	f023 020f 	bic.w	r2, r3, #15
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	091b      	lsrs	r3, r3, #4
 801846e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018472:	4313      	orrs	r3, r2
 8018474:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8018478:	bf00      	nop
 801847a:	370c      	adds	r7, #12
 801847c:	46bd      	mov	sp, r7
 801847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018482:	4770      	bx	lr

08018484 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8018484:	b480      	push	{r7}
 8018486:	b083      	sub	sp, #12
 8018488:	af00      	add	r7, sp, #0
 801848a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 801848c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018490:	689b      	ldr	r3, [r3, #8]
 8018492:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8018496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	4313      	orrs	r3, r2
 801849e:	608b      	str	r3, [r1, #8]
}
 80184a0:	bf00      	nop
 80184a2:	370c      	adds	r7, #12
 80184a4:	46bd      	mov	sp, r7
 80184a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184aa:	4770      	bx	lr

080184ac <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80184ac:	b480      	push	{r7}
 80184ae:	b083      	sub	sp, #12
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80184b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80184b8:	689b      	ldr	r3, [r3, #8]
 80184ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80184be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	4313      	orrs	r3, r2
 80184c6:	608b      	str	r3, [r1, #8]
}
 80184c8:	bf00      	nop
 80184ca:	370c      	adds	r7, #12
 80184cc:	46bd      	mov	sp, r7
 80184ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184d2:	4770      	bx	lr

080184d4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80184d4:	b480      	push	{r7}
 80184d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80184d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80184dc:	689b      	ldr	r3, [r3, #8]
 80184de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80184e2:	4618      	mov	r0, r3
 80184e4:	46bd      	mov	sp, r7
 80184e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ea:	4770      	bx	lr

080184ec <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 80184ec:	b480      	push	{r7}
 80184ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80184f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80184f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80184f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80184fc:	4618      	mov	r0, r3
 80184fe:	46bd      	mov	sp, r7
 8018500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018504:	4770      	bx	lr

08018506 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8018506:	b480      	push	{r7}
 8018508:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 801850a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801850e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8018512:	011b      	lsls	r3, r3, #4
 8018514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8018518:	4618      	mov	r0, r3
 801851a:	46bd      	mov	sp, r7
 801851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018520:	4770      	bx	lr

08018522 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8018522:	b480      	push	{r7}
 8018524:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8018526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801852a:	689b      	ldr	r3, [r3, #8]
 801852c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8018530:	4618      	mov	r0, r3
 8018532:	46bd      	mov	sp, r7
 8018534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018538:	4770      	bx	lr

0801853a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 801853a:	b480      	push	{r7}
 801853c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 801853e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018542:	689b      	ldr	r3, [r3, #8]
 8018544:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8018548:	4618      	mov	r0, r3
 801854a:	46bd      	mov	sp, r7
 801854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018550:	4770      	bx	lr

08018552 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8018552:	b480      	push	{r7}
 8018554:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8018556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018560:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018564:	6013      	str	r3, [r2, #0]
}
 8018566:	bf00      	nop
 8018568:	46bd      	mov	sp, r7
 801856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801856e:	4770      	bx	lr

08018570 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8018570:	b480      	push	{r7}
 8018572:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8018574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801857e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8018582:	6013      	str	r3, [r2, #0]
}
 8018584:	bf00      	nop
 8018586:	46bd      	mov	sp, r7
 8018588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858c:	4770      	bx	lr

0801858e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 801858e:	b480      	push	{r7}
 8018590:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8018592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801859c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80185a0:	d101      	bne.n	80185a6 <LL_RCC_PLL_IsReady+0x18>
 80185a2:	2301      	movs	r3, #1
 80185a4:	e000      	b.n	80185a8 <LL_RCC_PLL_IsReady+0x1a>
 80185a6:	2300      	movs	r3, #0
}
 80185a8:	4618      	mov	r0, r3
 80185aa:	46bd      	mov	sp, r7
 80185ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b0:	4770      	bx	lr

080185b2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80185b2:	b480      	push	{r7}
 80185b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80185b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80185ba:	68db      	ldr	r3, [r3, #12]
 80185bc:	0a1b      	lsrs	r3, r3, #8
 80185be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80185c2:	4618      	mov	r0, r3
 80185c4:	46bd      	mov	sp, r7
 80185c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ca:	4770      	bx	lr

080185cc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80185cc:	b480      	push	{r7}
 80185ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80185d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80185d4:	68db      	ldr	r3, [r3, #12]
 80185d6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80185da:	4618      	mov	r0, r3
 80185dc:	46bd      	mov	sp, r7
 80185de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185e2:	4770      	bx	lr

080185e4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80185e4:	b480      	push	{r7}
 80185e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80185e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80185ec:	68db      	ldr	r3, [r3, #12]
 80185ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80185f2:	4618      	mov	r0, r3
 80185f4:	46bd      	mov	sp, r7
 80185f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185fa:	4770      	bx	lr

080185fc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80185fc:	b480      	push	{r7}
 80185fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8018600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018604:	68db      	ldr	r3, [r3, #12]
 8018606:	f003 0303 	and.w	r3, r3, #3
}
 801860a:	4618      	mov	r0, r3
 801860c:	46bd      	mov	sp, r7
 801860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018612:	4770      	bx	lr

08018614 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8018614:	b480      	push	{r7}
 8018616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8018618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801861c:	689b      	ldr	r3, [r3, #8]
 801861e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018626:	d101      	bne.n	801862c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8018628:	2301      	movs	r3, #1
 801862a:	e000      	b.n	801862e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 801862c:	2300      	movs	r3, #0
}
 801862e:	4618      	mov	r0, r3
 8018630:	46bd      	mov	sp, r7
 8018632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018636:	4770      	bx	lr

08018638 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8018638:	b480      	push	{r7}
 801863a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 801863c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018640:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8018644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801864c:	d101      	bne.n	8018652 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 801864e:	2301      	movs	r3, #1
 8018650:	e000      	b.n	8018654 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8018652:	2300      	movs	r3, #0
}
 8018654:	4618      	mov	r0, r3
 8018656:	46bd      	mov	sp, r7
 8018658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865c:	4770      	bx	lr

0801865e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 801865e:	b480      	push	{r7}
 8018660:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8018662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018666:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801866a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801866e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018672:	d101      	bne.n	8018678 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8018674:	2301      	movs	r3, #1
 8018676:	e000      	b.n	801867a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8018678:	2300      	movs	r3, #0
}
 801867a:	4618      	mov	r0, r3
 801867c:	46bd      	mov	sp, r7
 801867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018682:	4770      	bx	lr

08018684 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8018684:	b480      	push	{r7}
 8018686:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8018688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801868c:	689b      	ldr	r3, [r3, #8]
 801868e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8018696:	d101      	bne.n	801869c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8018698:	2301      	movs	r3, #1
 801869a:	e000      	b.n	801869e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 801869c:	2300      	movs	r3, #0
}
 801869e:	4618      	mov	r0, r3
 80186a0:	46bd      	mov	sp, r7
 80186a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186a6:	4770      	bx	lr

080186a8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80186a8:	b480      	push	{r7}
 80186aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80186ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80186b0:	689b      	ldr	r3, [r3, #8]
 80186b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80186b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80186ba:	d101      	bne.n	80186c0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80186bc:	2301      	movs	r3, #1
 80186be:	e000      	b.n	80186c2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80186c0:	2300      	movs	r3, #0
}
 80186c2:	4618      	mov	r0, r3
 80186c4:	46bd      	mov	sp, r7
 80186c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ca:	4770      	bx	lr

080186cc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80186cc:	b590      	push	{r4, r7, lr}
 80186ce:	b08d      	sub	sp, #52	; 0x34
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d101      	bne.n	80186de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80186da:	2301      	movs	r3, #1
 80186dc:	e363      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	f003 0320 	and.w	r3, r3, #32
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	f000 808d 	beq.w	8018806 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80186ec:	f7ff fe7d 	bl	80183ea <LL_RCC_GetSysClkSource>
 80186f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80186f2:	f7ff ff83 	bl	80185fc <LL_RCC_PLL_GetMainSource>
 80186f6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80186f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d005      	beq.n	801870a <HAL_RCC_OscConfig+0x3e>
 80186fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018700:	2b0c      	cmp	r3, #12
 8018702:	d147      	bne.n	8018794 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8018704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018706:	2b01      	cmp	r3, #1
 8018708:	d144      	bne.n	8018794 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	69db      	ldr	r3, [r3, #28]
 801870e:	2b00      	cmp	r3, #0
 8018710:	d101      	bne.n	8018716 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8018712:	2301      	movs	r3, #1
 8018714:	e347      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801871a:	f7ff fe28 	bl	801836e <LL_RCC_MSI_GetRange>
 801871e:	4603      	mov	r3, r0
 8018720:	429c      	cmp	r4, r3
 8018722:	d914      	bls.n	801874e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018728:	4618      	mov	r0, r3
 801872a:	f000 fd61 	bl	80191f0 <RCC_SetFlashLatencyFromMSIRange>
 801872e:	4603      	mov	r3, r0
 8018730:	2b00      	cmp	r3, #0
 8018732:	d001      	beq.n	8018738 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8018734:	2301      	movs	r3, #1
 8018736:	e336      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801873c:	4618      	mov	r0, r3
 801873e:	f7ff fe02 	bl	8018346 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	6a1b      	ldr	r3, [r3, #32]
 8018746:	4618      	mov	r0, r3
 8018748:	f7ff fe26 	bl	8018398 <LL_RCC_MSI_SetCalibTrimming>
 801874c:	e013      	b.n	8018776 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018752:	4618      	mov	r0, r3
 8018754:	f7ff fdf7 	bl	8018346 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	6a1b      	ldr	r3, [r3, #32]
 801875c:	4618      	mov	r0, r3
 801875e:	f7ff fe1b 	bl	8018398 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018766:	4618      	mov	r0, r3
 8018768:	f000 fd42 	bl	80191f0 <RCC_SetFlashLatencyFromMSIRange>
 801876c:	4603      	mov	r3, r0
 801876e:	2b00      	cmp	r3, #0
 8018770:	d001      	beq.n	8018776 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8018772:	2301      	movs	r3, #1
 8018774:	e317      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8018776:	f000 fcc9 	bl	801910c <HAL_RCC_GetHCLKFreq>
 801877a:	4603      	mov	r3, r0
 801877c:	4aa4      	ldr	r2, [pc, #656]	; (8018a10 <HAL_RCC_OscConfig+0x344>)
 801877e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8018780:	4ba4      	ldr	r3, [pc, #656]	; (8018a14 <HAL_RCC_OscConfig+0x348>)
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	4618      	mov	r0, r3
 8018786:	f7e9 fa6b 	bl	8001c60 <HAL_InitTick>
 801878a:	4603      	mov	r3, r0
 801878c:	2b00      	cmp	r3, #0
 801878e:	d039      	beq.n	8018804 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8018790:	2301      	movs	r3, #1
 8018792:	e308      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	69db      	ldr	r3, [r3, #28]
 8018798:	2b00      	cmp	r3, #0
 801879a:	d01e      	beq.n	80187da <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801879c:	f7ff fda4 	bl	80182e8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80187a0:	f7fd ff10 	bl	80165c4 <HAL_GetTick>
 80187a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80187a6:	e008      	b.n	80187ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80187a8:	f7fd ff0c 	bl	80165c4 <HAL_GetTick>
 80187ac:	4602      	mov	r2, r0
 80187ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187b0:	1ad3      	subs	r3, r2, r3
 80187b2:	2b02      	cmp	r3, #2
 80187b4:	d901      	bls.n	80187ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80187b6:	2303      	movs	r3, #3
 80187b8:	e2f5      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80187ba:	f7ff fdb3 	bl	8018324 <LL_RCC_MSI_IsReady>
 80187be:	4603      	mov	r3, r0
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d0f1      	beq.n	80187a8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187c8:	4618      	mov	r0, r3
 80187ca:	f7ff fdbc 	bl	8018346 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	6a1b      	ldr	r3, [r3, #32]
 80187d2:	4618      	mov	r0, r3
 80187d4:	f7ff fde0 	bl	8018398 <LL_RCC_MSI_SetCalibTrimming>
 80187d8:	e015      	b.n	8018806 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80187da:	f7ff fd94 	bl	8018306 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80187de:	f7fd fef1 	bl	80165c4 <HAL_GetTick>
 80187e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80187e4:	e008      	b.n	80187f8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80187e6:	f7fd feed 	bl	80165c4 <HAL_GetTick>
 80187ea:	4602      	mov	r2, r0
 80187ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ee:	1ad3      	subs	r3, r2, r3
 80187f0:	2b02      	cmp	r3, #2
 80187f2:	d901      	bls.n	80187f8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80187f4:	2303      	movs	r3, #3
 80187f6:	e2d6      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80187f8:	f7ff fd94 	bl	8018324 <LL_RCC_MSI_IsReady>
 80187fc:	4603      	mov	r3, r0
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d1f1      	bne.n	80187e6 <HAL_RCC_OscConfig+0x11a>
 8018802:	e000      	b.n	8018806 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8018804:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	f003 0301 	and.w	r3, r3, #1
 801880e:	2b00      	cmp	r3, #0
 8018810:	d047      	beq.n	80188a2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8018812:	f7ff fdea 	bl	80183ea <LL_RCC_GetSysClkSource>
 8018816:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8018818:	f7ff fef0 	bl	80185fc <LL_RCC_PLL_GetMainSource>
 801881c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 801881e:	6a3b      	ldr	r3, [r7, #32]
 8018820:	2b08      	cmp	r3, #8
 8018822:	d005      	beq.n	8018830 <HAL_RCC_OscConfig+0x164>
 8018824:	6a3b      	ldr	r3, [r7, #32]
 8018826:	2b0c      	cmp	r3, #12
 8018828:	d108      	bne.n	801883c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 801882a:	69fb      	ldr	r3, [r7, #28]
 801882c:	2b03      	cmp	r3, #3
 801882e:	d105      	bne.n	801883c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	685b      	ldr	r3, [r3, #4]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d134      	bne.n	80188a2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8018838:	2301      	movs	r3, #1
 801883a:	e2b4      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	685b      	ldr	r3, [r3, #4]
 8018840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018844:	d102      	bne.n	801884c <HAL_RCC_OscConfig+0x180>
 8018846:	f7ff fbd1 	bl	8017fec <LL_RCC_HSE_Enable>
 801884a:	e001      	b.n	8018850 <HAL_RCC_OscConfig+0x184>
 801884c:	f7ff fbdd 	bl	801800a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	685b      	ldr	r3, [r3, #4]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d012      	beq.n	801887e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018858:	f7fd feb4 	bl	80165c4 <HAL_GetTick>
 801885c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 801885e:	e008      	b.n	8018872 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018860:	f7fd feb0 	bl	80165c4 <HAL_GetTick>
 8018864:	4602      	mov	r2, r0
 8018866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018868:	1ad3      	subs	r3, r2, r3
 801886a:	2b64      	cmp	r3, #100	; 0x64
 801886c:	d901      	bls.n	8018872 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801886e:	2303      	movs	r3, #3
 8018870:	e299      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8018872:	f7ff fbd9 	bl	8018028 <LL_RCC_HSE_IsReady>
 8018876:	4603      	mov	r3, r0
 8018878:	2b00      	cmp	r3, #0
 801887a:	d0f1      	beq.n	8018860 <HAL_RCC_OscConfig+0x194>
 801887c:	e011      	b.n	80188a2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801887e:	f7fd fea1 	bl	80165c4 <HAL_GetTick>
 8018882:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8018884:	e008      	b.n	8018898 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018886:	f7fd fe9d 	bl	80165c4 <HAL_GetTick>
 801888a:	4602      	mov	r2, r0
 801888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801888e:	1ad3      	subs	r3, r2, r3
 8018890:	2b64      	cmp	r3, #100	; 0x64
 8018892:	d901      	bls.n	8018898 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8018894:	2303      	movs	r3, #3
 8018896:	e286      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8018898:	f7ff fbc6 	bl	8018028 <LL_RCC_HSE_IsReady>
 801889c:	4603      	mov	r3, r0
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d1f1      	bne.n	8018886 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	f003 0302 	and.w	r3, r3, #2
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d04c      	beq.n	8018948 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80188ae:	f7ff fd9c 	bl	80183ea <LL_RCC_GetSysClkSource>
 80188b2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80188b4:	f7ff fea2 	bl	80185fc <LL_RCC_PLL_GetMainSource>
 80188b8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80188ba:	69bb      	ldr	r3, [r7, #24]
 80188bc:	2b04      	cmp	r3, #4
 80188be:	d005      	beq.n	80188cc <HAL_RCC_OscConfig+0x200>
 80188c0:	69bb      	ldr	r3, [r7, #24]
 80188c2:	2b0c      	cmp	r3, #12
 80188c4:	d10e      	bne.n	80188e4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80188c6:	697b      	ldr	r3, [r7, #20]
 80188c8:	2b02      	cmp	r3, #2
 80188ca:	d10b      	bne.n	80188e4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	68db      	ldr	r3, [r3, #12]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d101      	bne.n	80188d8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80188d4:	2301      	movs	r3, #1
 80188d6:	e266      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	691b      	ldr	r3, [r3, #16]
 80188dc:	4618      	mov	r0, r3
 80188de:	f7ff fbe5 	bl	80180ac <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80188e2:	e031      	b.n	8018948 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	68db      	ldr	r3, [r3, #12]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d019      	beq.n	8018920 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80188ec:	f7ff fbae 	bl	801804c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80188f0:	f7fd fe68 	bl	80165c4 <HAL_GetTick>
 80188f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80188f6:	e008      	b.n	801890a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80188f8:	f7fd fe64 	bl	80165c4 <HAL_GetTick>
 80188fc:	4602      	mov	r2, r0
 80188fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018900:	1ad3      	subs	r3, r2, r3
 8018902:	2b02      	cmp	r3, #2
 8018904:	d901      	bls.n	801890a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8018906:	2303      	movs	r3, #3
 8018908:	e24d      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 801890a:	f7ff fbbd 	bl	8018088 <LL_RCC_HSI_IsReady>
 801890e:	4603      	mov	r3, r0
 8018910:	2b00      	cmp	r3, #0
 8018912:	d0f1      	beq.n	80188f8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	691b      	ldr	r3, [r3, #16]
 8018918:	4618      	mov	r0, r3
 801891a:	f7ff fbc7 	bl	80180ac <LL_RCC_HSI_SetCalibTrimming>
 801891e:	e013      	b.n	8018948 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8018920:	f7ff fba3 	bl	801806a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018924:	f7fd fe4e 	bl	80165c4 <HAL_GetTick>
 8018928:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 801892a:	e008      	b.n	801893e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801892c:	f7fd fe4a 	bl	80165c4 <HAL_GetTick>
 8018930:	4602      	mov	r2, r0
 8018932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018934:	1ad3      	subs	r3, r2, r3
 8018936:	2b02      	cmp	r3, #2
 8018938:	d901      	bls.n	801893e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 801893a:	2303      	movs	r3, #3
 801893c:	e233      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 801893e:	f7ff fba3 	bl	8018088 <LL_RCC_HSI_IsReady>
 8018942:	4603      	mov	r3, r0
 8018944:	2b00      	cmp	r3, #0
 8018946:	d1f1      	bne.n	801892c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	f003 0308 	and.w	r3, r3, #8
 8018950:	2b00      	cmp	r3, #0
 8018952:	d106      	bne.n	8018962 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801895c:	2b00      	cmp	r3, #0
 801895e:	f000 80a3 	beq.w	8018aa8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	695b      	ldr	r3, [r3, #20]
 8018966:	2b00      	cmp	r3, #0
 8018968:	d076      	beq.n	8018a58 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	f003 0310 	and.w	r3, r3, #16
 8018972:	2b00      	cmp	r3, #0
 8018974:	d046      	beq.n	8018a04 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8018976:	f7ff fc5a 	bl	801822e <LL_RCC_LSI1_IsReady>
 801897a:	4603      	mov	r3, r0
 801897c:	2b00      	cmp	r3, #0
 801897e:	d113      	bne.n	80189a8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8018980:	f7ff fc33 	bl	80181ea <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8018984:	f7fd fe1e 	bl	80165c4 <HAL_GetTick>
 8018988:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 801898a:	e008      	b.n	801899e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801898c:	f7fd fe1a 	bl	80165c4 <HAL_GetTick>
 8018990:	4602      	mov	r2, r0
 8018992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018994:	1ad3      	subs	r3, r2, r3
 8018996:	2b02      	cmp	r3, #2
 8018998:	d901      	bls.n	801899e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 801899a:	2303      	movs	r3, #3
 801899c:	e203      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 801899e:	f7ff fc46 	bl	801822e <LL_RCC_LSI1_IsReady>
 80189a2:	4603      	mov	r3, r0
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d0f1      	beq.n	801898c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80189a8:	f7ff fc53 	bl	8018252 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80189ac:	f7fd fe0a 	bl	80165c4 <HAL_GetTick>
 80189b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80189b2:	e008      	b.n	80189c6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80189b4:	f7fd fe06 	bl	80165c4 <HAL_GetTick>
 80189b8:	4602      	mov	r2, r0
 80189ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189bc:	1ad3      	subs	r3, r2, r3
 80189be:	2b03      	cmp	r3, #3
 80189c0:	d901      	bls.n	80189c6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80189c2:	2303      	movs	r3, #3
 80189c4:	e1ef      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80189c6:	f7ff fc66 	bl	8018296 <LL_RCC_LSI2_IsReady>
 80189ca:	4603      	mov	r3, r0
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d0f1      	beq.n	80189b4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	699b      	ldr	r3, [r3, #24]
 80189d4:	4618      	mov	r0, r3
 80189d6:	f7ff fc70 	bl	80182ba <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80189da:	f7ff fc17 	bl	801820c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80189de:	f7fd fdf1 	bl	80165c4 <HAL_GetTick>
 80189e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80189e4:	e008      	b.n	80189f8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80189e6:	f7fd fded 	bl	80165c4 <HAL_GetTick>
 80189ea:	4602      	mov	r2, r0
 80189ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ee:	1ad3      	subs	r3, r2, r3
 80189f0:	2b02      	cmp	r3, #2
 80189f2:	d901      	bls.n	80189f8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80189f4:	2303      	movs	r3, #3
 80189f6:	e1d6      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80189f8:	f7ff fc19 	bl	801822e <LL_RCC_LSI1_IsReady>
 80189fc:	4603      	mov	r3, r0
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d1f1      	bne.n	80189e6 <HAL_RCC_OscConfig+0x31a>
 8018a02:	e051      	b.n	8018aa8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8018a04:	f7ff fbf1 	bl	80181ea <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018a08:	f7fd fddc 	bl	80165c4 <HAL_GetTick>
 8018a0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8018a0e:	e00c      	b.n	8018a2a <HAL_RCC_OscConfig+0x35e>
 8018a10:	20000008 	.word	0x20000008
 8018a14:	20000070 	.word	0x20000070
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8018a18:	f7fd fdd4 	bl	80165c4 <HAL_GetTick>
 8018a1c:	4602      	mov	r2, r0
 8018a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a20:	1ad3      	subs	r3, r2, r3
 8018a22:	2b02      	cmp	r3, #2
 8018a24:	d901      	bls.n	8018a2a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8018a26:	2303      	movs	r3, #3
 8018a28:	e1bd      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8018a2a:	f7ff fc00 	bl	801822e <LL_RCC_LSI1_IsReady>
 8018a2e:	4603      	mov	r3, r0
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d0f1      	beq.n	8018a18 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8018a34:	f7ff fc1e 	bl	8018274 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8018a38:	e008      	b.n	8018a4c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8018a3a:	f7fd fdc3 	bl	80165c4 <HAL_GetTick>
 8018a3e:	4602      	mov	r2, r0
 8018a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a42:	1ad3      	subs	r3, r2, r3
 8018a44:	2b03      	cmp	r3, #3
 8018a46:	d901      	bls.n	8018a4c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8018a48:	2303      	movs	r3, #3
 8018a4a:	e1ac      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8018a4c:	f7ff fc23 	bl	8018296 <LL_RCC_LSI2_IsReady>
 8018a50:	4603      	mov	r3, r0
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d1f1      	bne.n	8018a3a <HAL_RCC_OscConfig+0x36e>
 8018a56:	e027      	b.n	8018aa8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8018a58:	f7ff fc0c 	bl	8018274 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018a5c:	f7fd fdb2 	bl	80165c4 <HAL_GetTick>
 8018a60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8018a62:	e008      	b.n	8018a76 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8018a64:	f7fd fdae 	bl	80165c4 <HAL_GetTick>
 8018a68:	4602      	mov	r2, r0
 8018a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a6c:	1ad3      	subs	r3, r2, r3
 8018a6e:	2b03      	cmp	r3, #3
 8018a70:	d901      	bls.n	8018a76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8018a72:	2303      	movs	r3, #3
 8018a74:	e197      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8018a76:	f7ff fc0e 	bl	8018296 <LL_RCC_LSI2_IsReady>
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d1f1      	bne.n	8018a64 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8018a80:	f7ff fbc4 	bl	801820c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018a84:	f7fd fd9e 	bl	80165c4 <HAL_GetTick>
 8018a88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8018a8a:	e008      	b.n	8018a9e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8018a8c:	f7fd fd9a 	bl	80165c4 <HAL_GetTick>
 8018a90:	4602      	mov	r2, r0
 8018a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a94:	1ad3      	subs	r3, r2, r3
 8018a96:	2b02      	cmp	r3, #2
 8018a98:	d901      	bls.n	8018a9e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8018a9a:	2303      	movs	r3, #3
 8018a9c:	e183      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8018a9e:	f7ff fbc6 	bl	801822e <LL_RCC_LSI1_IsReady>
 8018aa2:	4603      	mov	r3, r0
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d1f1      	bne.n	8018a8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	f003 0304 	and.w	r3, r3, #4
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d05b      	beq.n	8018b6c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018ab4:	4ba7      	ldr	r3, [pc, #668]	; (8018d54 <HAL_RCC_OscConfig+0x688>)
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d114      	bne.n	8018aea <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8018ac0:	f7ff fa64 	bl	8017f8c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8018ac4:	f7fd fd7e 	bl	80165c4 <HAL_GetTick>
 8018ac8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018aca:	e008      	b.n	8018ade <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018acc:	f7fd fd7a 	bl	80165c4 <HAL_GetTick>
 8018ad0:	4602      	mov	r2, r0
 8018ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ad4:	1ad3      	subs	r3, r2, r3
 8018ad6:	2b02      	cmp	r3, #2
 8018ad8:	d901      	bls.n	8018ade <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8018ada:	2303      	movs	r3, #3
 8018adc:	e163      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018ade:	4b9d      	ldr	r3, [pc, #628]	; (8018d54 <HAL_RCC_OscConfig+0x688>)
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d0f0      	beq.n	8018acc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	689b      	ldr	r3, [r3, #8]
 8018aee:	2b01      	cmp	r3, #1
 8018af0:	d102      	bne.n	8018af8 <HAL_RCC_OscConfig+0x42c>
 8018af2:	f7ff fb24 	bl	801813e <LL_RCC_LSE_Enable>
 8018af6:	e00c      	b.n	8018b12 <HAL_RCC_OscConfig+0x446>
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	689b      	ldr	r3, [r3, #8]
 8018afc:	2b05      	cmp	r3, #5
 8018afe:	d104      	bne.n	8018b0a <HAL_RCC_OscConfig+0x43e>
 8018b00:	f7ff fb3f 	bl	8018182 <LL_RCC_LSE_EnableBypass>
 8018b04:	f7ff fb1b 	bl	801813e <LL_RCC_LSE_Enable>
 8018b08:	e003      	b.n	8018b12 <HAL_RCC_OscConfig+0x446>
 8018b0a:	f7ff fb29 	bl	8018160 <LL_RCC_LSE_Disable>
 8018b0e:	f7ff fb49 	bl	80181a4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	689b      	ldr	r3, [r3, #8]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d014      	beq.n	8018b44 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018b1a:	f7fd fd53 	bl	80165c4 <HAL_GetTick>
 8018b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8018b20:	e00a      	b.n	8018b38 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018b22:	f7fd fd4f 	bl	80165c4 <HAL_GetTick>
 8018b26:	4602      	mov	r2, r0
 8018b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b2a:	1ad3      	subs	r3, r2, r3
 8018b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8018b30:	4293      	cmp	r3, r2
 8018b32:	d901      	bls.n	8018b38 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8018b34:	2303      	movs	r3, #3
 8018b36:	e136      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8018b38:	f7ff fb45 	bl	80181c6 <LL_RCC_LSE_IsReady>
 8018b3c:	4603      	mov	r3, r0
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d0ef      	beq.n	8018b22 <HAL_RCC_OscConfig+0x456>
 8018b42:	e013      	b.n	8018b6c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018b44:	f7fd fd3e 	bl	80165c4 <HAL_GetTick>
 8018b48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8018b4a:	e00a      	b.n	8018b62 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018b4c:	f7fd fd3a 	bl	80165c4 <HAL_GetTick>
 8018b50:	4602      	mov	r2, r0
 8018b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b54:	1ad3      	subs	r3, r2, r3
 8018b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8018b5a:	4293      	cmp	r3, r2
 8018b5c:	d901      	bls.n	8018b62 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8018b5e:	2303      	movs	r3, #3
 8018b60:	e121      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8018b62:	f7ff fb30 	bl	80181c6 <LL_RCC_LSE_IsReady>
 8018b66:	4603      	mov	r3, r0
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	d1ef      	bne.n	8018b4c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d02c      	beq.n	8018bd2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d014      	beq.n	8018baa <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8018b80:	f7ff faa9 	bl	80180d6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018b84:	f7fd fd1e 	bl	80165c4 <HAL_GetTick>
 8018b88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8018b8a:	e008      	b.n	8018b9e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8018b8c:	f7fd fd1a 	bl	80165c4 <HAL_GetTick>
 8018b90:	4602      	mov	r2, r0
 8018b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b94:	1ad3      	subs	r3, r2, r3
 8018b96:	2b02      	cmp	r3, #2
 8018b98:	d901      	bls.n	8018b9e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8018b9a:	2303      	movs	r3, #3
 8018b9c:	e103      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8018b9e:	f7ff fabc 	bl	801811a <LL_RCC_HSI48_IsReady>
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d0f1      	beq.n	8018b8c <HAL_RCC_OscConfig+0x4c0>
 8018ba8:	e013      	b.n	8018bd2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8018baa:	f7ff faa5 	bl	80180f8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018bae:	f7fd fd09 	bl	80165c4 <HAL_GetTick>
 8018bb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8018bb4:	e008      	b.n	8018bc8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8018bb6:	f7fd fd05 	bl	80165c4 <HAL_GetTick>
 8018bba:	4602      	mov	r2, r0
 8018bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bbe:	1ad3      	subs	r3, r2, r3
 8018bc0:	2b02      	cmp	r3, #2
 8018bc2:	d901      	bls.n	8018bc8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8018bc4:	2303      	movs	r3, #3
 8018bc6:	e0ee      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8018bc8:	f7ff faa7 	bl	801811a <LL_RCC_HSI48_IsReady>
 8018bcc:	4603      	mov	r3, r0
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d1f1      	bne.n	8018bb6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	f000 80e4 	beq.w	8018da4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8018bdc:	f7ff fc05 	bl	80183ea <LL_RCC_GetSysClkSource>
 8018be0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8018be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018be6:	68db      	ldr	r3, [r3, #12]
 8018be8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bee:	2b02      	cmp	r3, #2
 8018bf0:	f040 80b4 	bne.w	8018d5c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	f003 0203 	and.w	r2, r3, #3
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018bfe:	429a      	cmp	r2, r3
 8018c00:	d123      	bne.n	8018c4a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018c0c:	429a      	cmp	r2, r3
 8018c0e:	d11c      	bne.n	8018c4a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	0a1b      	lsrs	r3, r3, #8
 8018c14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8018c1c:	429a      	cmp	r2, r3
 8018c1e:	d114      	bne.n	8018c4a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8018c2a:	429a      	cmp	r2, r3
 8018c2c:	d10d      	bne.n	8018c4a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8018c38:	429a      	cmp	r2, r3
 8018c3a:	d106      	bne.n	8018c4a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8018c3c:	68fb      	ldr	r3, [r7, #12]
 8018c3e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8018c46:	429a      	cmp	r2, r3
 8018c48:	d05d      	beq.n	8018d06 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018c4a:	693b      	ldr	r3, [r7, #16]
 8018c4c:	2b0c      	cmp	r3, #12
 8018c4e:	d058      	beq.n	8018d02 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8018c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d001      	beq.n	8018c62 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8018c5e:	2301      	movs	r3, #1
 8018c60:	e0a1      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8018c62:	f7ff fc85 	bl	8018570 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8018c66:	f7fd fcad 	bl	80165c4 <HAL_GetTick>
 8018c6a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018c6c:	e008      	b.n	8018c80 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018c6e:	f7fd fca9 	bl	80165c4 <HAL_GetTick>
 8018c72:	4602      	mov	r2, r0
 8018c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c76:	1ad3      	subs	r3, r2, r3
 8018c78:	2b02      	cmp	r3, #2
 8018c7a:	d901      	bls.n	8018c80 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8018c7c:	2303      	movs	r3, #3
 8018c7e:	e092      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d1ef      	bne.n	8018c6e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8018c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018c92:	68da      	ldr	r2, [r3, #12]
 8018c94:	4b30      	ldr	r3, [pc, #192]	; (8018d58 <HAL_RCC_OscConfig+0x68c>)
 8018c96:	4013      	ands	r3, r2
 8018c98:	687a      	ldr	r2, [r7, #4]
 8018c9a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8018c9c:	687a      	ldr	r2, [r7, #4]
 8018c9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8018ca0:	4311      	orrs	r1, r2
 8018ca2:	687a      	ldr	r2, [r7, #4]
 8018ca4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8018ca6:	0212      	lsls	r2, r2, #8
 8018ca8:	4311      	orrs	r1, r2
 8018caa:	687a      	ldr	r2, [r7, #4]
 8018cac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8018cae:	4311      	orrs	r1, r2
 8018cb0:	687a      	ldr	r2, [r7, #4]
 8018cb2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018cb4:	4311      	orrs	r1, r2
 8018cb6:	687a      	ldr	r2, [r7, #4]
 8018cb8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8018cba:	430a      	orrs	r2, r1
 8018cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018cc0:	4313      	orrs	r3, r2
 8018cc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8018cc4:	f7ff fc45 	bl	8018552 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8018cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018ccc:	68db      	ldr	r3, [r3, #12]
 8018cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018cd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8018cd8:	f7fd fc74 	bl	80165c4 <HAL_GetTick>
 8018cdc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018cde:	e008      	b.n	8018cf2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018ce0:	f7fd fc70 	bl	80165c4 <HAL_GetTick>
 8018ce4:	4602      	mov	r2, r0
 8018ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ce8:	1ad3      	subs	r3, r2, r3
 8018cea:	2b02      	cmp	r3, #2
 8018cec:	d901      	bls.n	8018cf2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8018cee:	2303      	movs	r3, #3
 8018cf0:	e059      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d0ef      	beq.n	8018ce0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018d00:	e050      	b.n	8018da4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8018d02:	2301      	movs	r3, #1
 8018d04:	e04f      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d147      	bne.n	8018da4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8018d14:	f7ff fc1d 	bl	8018552 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8018d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018d1c:	68db      	ldr	r3, [r3, #12]
 8018d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018d26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8018d28:	f7fd fc4c 	bl	80165c4 <HAL_GetTick>
 8018d2c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018d2e:	e008      	b.n	8018d42 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018d30:	f7fd fc48 	bl	80165c4 <HAL_GetTick>
 8018d34:	4602      	mov	r2, r0
 8018d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d38:	1ad3      	subs	r3, r2, r3
 8018d3a:	2b02      	cmp	r3, #2
 8018d3c:	d901      	bls.n	8018d42 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8018d3e:	2303      	movs	r3, #3
 8018d40:	e031      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d0ef      	beq.n	8018d30 <HAL_RCC_OscConfig+0x664>
 8018d50:	e028      	b.n	8018da4 <HAL_RCC_OscConfig+0x6d8>
 8018d52:	bf00      	nop
 8018d54:	58000400 	.word	0x58000400
 8018d58:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018d5c:	693b      	ldr	r3, [r7, #16]
 8018d5e:	2b0c      	cmp	r3, #12
 8018d60:	d01e      	beq.n	8018da0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018d62:	f7ff fc05 	bl	8018570 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018d66:	f7fd fc2d 	bl	80165c4 <HAL_GetTick>
 8018d6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018d6c:	e008      	b.n	8018d80 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018d6e:	f7fd fc29 	bl	80165c4 <HAL_GetTick>
 8018d72:	4602      	mov	r2, r0
 8018d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d76:	1ad3      	subs	r3, r2, r3
 8018d78:	2b02      	cmp	r3, #2
 8018d7a:	d901      	bls.n	8018d80 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8018d7c:	2303      	movs	r3, #3
 8018d7e:	e012      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d1ef      	bne.n	8018d6e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8018d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018d92:	68da      	ldr	r2, [r3, #12]
 8018d94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018d98:	4b05      	ldr	r3, [pc, #20]	; (8018db0 <HAL_RCC_OscConfig+0x6e4>)
 8018d9a:	4013      	ands	r3, r2
 8018d9c:	60cb      	str	r3, [r1, #12]
 8018d9e:	e001      	b.n	8018da4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8018da0:	2301      	movs	r3, #1
 8018da2:	e000      	b.n	8018da6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8018da4:	2300      	movs	r3, #0
}
 8018da6:	4618      	mov	r0, r3
 8018da8:	3734      	adds	r7, #52	; 0x34
 8018daa:	46bd      	mov	sp, r7
 8018dac:	bd90      	pop	{r4, r7, pc}
 8018dae:	bf00      	nop
 8018db0:	eefefffc 	.word	0xeefefffc

08018db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8018db4:	b580      	push	{r7, lr}
 8018db6:	b084      	sub	sp, #16
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	6078      	str	r0, [r7, #4]
 8018dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d101      	bne.n	8018dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8018dc4:	2301      	movs	r3, #1
 8018dc6:	e12d      	b.n	8019024 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8018dc8:	4b98      	ldr	r3, [pc, #608]	; (801902c <HAL_RCC_ClockConfig+0x278>)
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	f003 0307 	and.w	r3, r3, #7
 8018dd0:	683a      	ldr	r2, [r7, #0]
 8018dd2:	429a      	cmp	r2, r3
 8018dd4:	d91b      	bls.n	8018e0e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018dd6:	4b95      	ldr	r3, [pc, #596]	; (801902c <HAL_RCC_ClockConfig+0x278>)
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	f023 0207 	bic.w	r2, r3, #7
 8018dde:	4993      	ldr	r1, [pc, #588]	; (801902c <HAL_RCC_ClockConfig+0x278>)
 8018de0:	683b      	ldr	r3, [r7, #0]
 8018de2:	4313      	orrs	r3, r2
 8018de4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018de6:	f7fd fbed 	bl	80165c4 <HAL_GetTick>
 8018dea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018dec:	e008      	b.n	8018e00 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8018dee:	f7fd fbe9 	bl	80165c4 <HAL_GetTick>
 8018df2:	4602      	mov	r2, r0
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	1ad3      	subs	r3, r2, r3
 8018df8:	2b02      	cmp	r3, #2
 8018dfa:	d901      	bls.n	8018e00 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8018dfc:	2303      	movs	r3, #3
 8018dfe:	e111      	b.n	8019024 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018e00:	4b8a      	ldr	r3, [pc, #552]	; (801902c <HAL_RCC_ClockConfig+0x278>)
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	f003 0307 	and.w	r3, r3, #7
 8018e08:	683a      	ldr	r2, [r7, #0]
 8018e0a:	429a      	cmp	r2, r3
 8018e0c:	d1ef      	bne.n	8018dee <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	f003 0302 	and.w	r3, r3, #2
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d016      	beq.n	8018e48 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	689b      	ldr	r3, [r3, #8]
 8018e1e:	4618      	mov	r0, r3
 8018e20:	f7ff faef 	bl	8018402 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8018e24:	f7fd fbce 	bl	80165c4 <HAL_GetTick>
 8018e28:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8018e2a:	e008      	b.n	8018e3e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8018e2c:	f7fd fbca 	bl	80165c4 <HAL_GetTick>
 8018e30:	4602      	mov	r2, r0
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	1ad3      	subs	r3, r2, r3
 8018e36:	2b02      	cmp	r3, #2
 8018e38:	d901      	bls.n	8018e3e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8018e3a:	2303      	movs	r3, #3
 8018e3c:	e0f2      	b.n	8019024 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8018e3e:	f7ff fbe9 	bl	8018614 <LL_RCC_IsActiveFlag_HPRE>
 8018e42:	4603      	mov	r3, r0
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d0f1      	beq.n	8018e2c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	f003 0320 	and.w	r3, r3, #32
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d016      	beq.n	8018e82 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	695b      	ldr	r3, [r3, #20]
 8018e58:	4618      	mov	r0, r3
 8018e5a:	f7ff fae6 	bl	801842a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8018e5e:	f7fd fbb1 	bl	80165c4 <HAL_GetTick>
 8018e62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8018e64:	e008      	b.n	8018e78 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8018e66:	f7fd fbad 	bl	80165c4 <HAL_GetTick>
 8018e6a:	4602      	mov	r2, r0
 8018e6c:	68fb      	ldr	r3, [r7, #12]
 8018e6e:	1ad3      	subs	r3, r2, r3
 8018e70:	2b02      	cmp	r3, #2
 8018e72:	d901      	bls.n	8018e78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8018e74:	2303      	movs	r3, #3
 8018e76:	e0d5      	b.n	8019024 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8018e78:	f7ff fbde 	bl	8018638 <LL_RCC_IsActiveFlag_C2HPRE>
 8018e7c:	4603      	mov	r3, r0
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d0f1      	beq.n	8018e66 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d016      	beq.n	8018ebc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	699b      	ldr	r3, [r3, #24]
 8018e92:	4618      	mov	r0, r3
 8018e94:	f7ff fadf 	bl	8018456 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8018e98:	f7fd fb94 	bl	80165c4 <HAL_GetTick>
 8018e9c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8018e9e:	e008      	b.n	8018eb2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8018ea0:	f7fd fb90 	bl	80165c4 <HAL_GetTick>
 8018ea4:	4602      	mov	r2, r0
 8018ea6:	68fb      	ldr	r3, [r7, #12]
 8018ea8:	1ad3      	subs	r3, r2, r3
 8018eaa:	2b02      	cmp	r3, #2
 8018eac:	d901      	bls.n	8018eb2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8018eae:	2303      	movs	r3, #3
 8018eb0:	e0b8      	b.n	8019024 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8018eb2:	f7ff fbd4 	bl	801865e <LL_RCC_IsActiveFlag_SHDHPRE>
 8018eb6:	4603      	mov	r3, r0
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d0f1      	beq.n	8018ea0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	f003 0304 	and.w	r3, r3, #4
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d016      	beq.n	8018ef6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	68db      	ldr	r3, [r3, #12]
 8018ecc:	4618      	mov	r0, r3
 8018ece:	f7ff fad9 	bl	8018484 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8018ed2:	f7fd fb77 	bl	80165c4 <HAL_GetTick>
 8018ed6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8018ed8:	e008      	b.n	8018eec <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8018eda:	f7fd fb73 	bl	80165c4 <HAL_GetTick>
 8018ede:	4602      	mov	r2, r0
 8018ee0:	68fb      	ldr	r3, [r7, #12]
 8018ee2:	1ad3      	subs	r3, r2, r3
 8018ee4:	2b02      	cmp	r3, #2
 8018ee6:	d901      	bls.n	8018eec <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8018ee8:	2303      	movs	r3, #3
 8018eea:	e09b      	b.n	8019024 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8018eec:	f7ff fbca 	bl	8018684 <LL_RCC_IsActiveFlag_PPRE1>
 8018ef0:	4603      	mov	r3, r0
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d0f1      	beq.n	8018eda <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	f003 0308 	and.w	r3, r3, #8
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d017      	beq.n	8018f32 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	691b      	ldr	r3, [r3, #16]
 8018f06:	00db      	lsls	r3, r3, #3
 8018f08:	4618      	mov	r0, r3
 8018f0a:	f7ff facf 	bl	80184ac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8018f0e:	f7fd fb59 	bl	80165c4 <HAL_GetTick>
 8018f12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8018f14:	e008      	b.n	8018f28 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8018f16:	f7fd fb55 	bl	80165c4 <HAL_GetTick>
 8018f1a:	4602      	mov	r2, r0
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	1ad3      	subs	r3, r2, r3
 8018f20:	2b02      	cmp	r3, #2
 8018f22:	d901      	bls.n	8018f28 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8018f24:	2303      	movs	r3, #3
 8018f26:	e07d      	b.n	8019024 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8018f28:	f7ff fbbe 	bl	80186a8 <LL_RCC_IsActiveFlag_PPRE2>
 8018f2c:	4603      	mov	r3, r0
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d0f1      	beq.n	8018f16 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	f003 0301 	and.w	r3, r3, #1
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d043      	beq.n	8018fc6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	685b      	ldr	r3, [r3, #4]
 8018f42:	2b02      	cmp	r3, #2
 8018f44:	d106      	bne.n	8018f54 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8018f46:	f7ff f86f 	bl	8018028 <LL_RCC_HSE_IsReady>
 8018f4a:	4603      	mov	r3, r0
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d11e      	bne.n	8018f8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8018f50:	2301      	movs	r3, #1
 8018f52:	e067      	b.n	8019024 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	685b      	ldr	r3, [r3, #4]
 8018f58:	2b03      	cmp	r3, #3
 8018f5a:	d106      	bne.n	8018f6a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8018f5c:	f7ff fb17 	bl	801858e <LL_RCC_PLL_IsReady>
 8018f60:	4603      	mov	r3, r0
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d113      	bne.n	8018f8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8018f66:	2301      	movs	r3, #1
 8018f68:	e05c      	b.n	8019024 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	685b      	ldr	r3, [r3, #4]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d106      	bne.n	8018f80 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8018f72:	f7ff f9d7 	bl	8018324 <LL_RCC_MSI_IsReady>
 8018f76:	4603      	mov	r3, r0
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d108      	bne.n	8018f8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8018f7c:	2301      	movs	r3, #1
 8018f7e:	e051      	b.n	8019024 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8018f80:	f7ff f882 	bl	8018088 <LL_RCC_HSI_IsReady>
 8018f84:	4603      	mov	r3, r0
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d101      	bne.n	8018f8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8018f8a:	2301      	movs	r3, #1
 8018f8c:	e04a      	b.n	8019024 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	685b      	ldr	r3, [r3, #4]
 8018f92:	4618      	mov	r0, r3
 8018f94:	f7ff fa15 	bl	80183c2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018f98:	f7fd fb14 	bl	80165c4 <HAL_GetTick>
 8018f9c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018f9e:	e00a      	b.n	8018fb6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018fa0:	f7fd fb10 	bl	80165c4 <HAL_GetTick>
 8018fa4:	4602      	mov	r2, r0
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	1ad3      	subs	r3, r2, r3
 8018faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8018fae:	4293      	cmp	r3, r2
 8018fb0:	d901      	bls.n	8018fb6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8018fb2:	2303      	movs	r3, #3
 8018fb4:	e036      	b.n	8019024 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018fb6:	f7ff fa18 	bl	80183ea <LL_RCC_GetSysClkSource>
 8018fba:	4602      	mov	r2, r0
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	685b      	ldr	r3, [r3, #4]
 8018fc0:	009b      	lsls	r3, r3, #2
 8018fc2:	429a      	cmp	r2, r3
 8018fc4:	d1ec      	bne.n	8018fa0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8018fc6:	4b19      	ldr	r3, [pc, #100]	; (801902c <HAL_RCC_ClockConfig+0x278>)
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	f003 0307 	and.w	r3, r3, #7
 8018fce:	683a      	ldr	r2, [r7, #0]
 8018fd0:	429a      	cmp	r2, r3
 8018fd2:	d21b      	bcs.n	801900c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018fd4:	4b15      	ldr	r3, [pc, #84]	; (801902c <HAL_RCC_ClockConfig+0x278>)
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	f023 0207 	bic.w	r2, r3, #7
 8018fdc:	4913      	ldr	r1, [pc, #76]	; (801902c <HAL_RCC_ClockConfig+0x278>)
 8018fde:	683b      	ldr	r3, [r7, #0]
 8018fe0:	4313      	orrs	r3, r2
 8018fe2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018fe4:	f7fd faee 	bl	80165c4 <HAL_GetTick>
 8018fe8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018fea:	e008      	b.n	8018ffe <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8018fec:	f7fd faea 	bl	80165c4 <HAL_GetTick>
 8018ff0:	4602      	mov	r2, r0
 8018ff2:	68fb      	ldr	r3, [r7, #12]
 8018ff4:	1ad3      	subs	r3, r2, r3
 8018ff6:	2b02      	cmp	r3, #2
 8018ff8:	d901      	bls.n	8018ffe <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8018ffa:	2303      	movs	r3, #3
 8018ffc:	e012      	b.n	8019024 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018ffe:	4b0b      	ldr	r3, [pc, #44]	; (801902c <HAL_RCC_ClockConfig+0x278>)
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	f003 0307 	and.w	r3, r3, #7
 8019006:	683a      	ldr	r2, [r7, #0]
 8019008:	429a      	cmp	r2, r3
 801900a:	d1ef      	bne.n	8018fec <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801900c:	f000 f87e 	bl	801910c <HAL_RCC_GetHCLKFreq>
 8019010:	4603      	mov	r3, r0
 8019012:	4a07      	ldr	r2, [pc, #28]	; (8019030 <HAL_RCC_ClockConfig+0x27c>)
 8019014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8019016:	f7fd fae1 	bl	80165dc <HAL_GetTickPrio>
 801901a:	4603      	mov	r3, r0
 801901c:	4618      	mov	r0, r3
 801901e:	f7e8 fe1f 	bl	8001c60 <HAL_InitTick>
 8019022:	4603      	mov	r3, r0
}
 8019024:	4618      	mov	r0, r3
 8019026:	3710      	adds	r7, #16
 8019028:	46bd      	mov	sp, r7
 801902a:	bd80      	pop	{r7, pc}
 801902c:	58004000 	.word	0x58004000
 8019030:	20000008 	.word	0x20000008

08019034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8019034:	b590      	push	{r4, r7, lr}
 8019036:	b085      	sub	sp, #20
 8019038:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801903a:	f7ff f9d6 	bl	80183ea <LL_RCC_GetSysClkSource>
 801903e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	2b00      	cmp	r3, #0
 8019044:	d10a      	bne.n	801905c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8019046:	f7ff f992 	bl	801836e <LL_RCC_MSI_GetRange>
 801904a:	4603      	mov	r3, r0
 801904c:	091b      	lsrs	r3, r3, #4
 801904e:	f003 030f 	and.w	r3, r3, #15
 8019052:	4a2b      	ldr	r2, [pc, #172]	; (8019100 <HAL_RCC_GetSysClockFreq+0xcc>)
 8019054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019058:	60fb      	str	r3, [r7, #12]
 801905a:	e04b      	b.n	80190f4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	2b04      	cmp	r3, #4
 8019060:	d102      	bne.n	8019068 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8019062:	4b28      	ldr	r3, [pc, #160]	; (8019104 <HAL_RCC_GetSysClockFreq+0xd0>)
 8019064:	60fb      	str	r3, [r7, #12]
 8019066:	e045      	b.n	80190f4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	2b08      	cmp	r3, #8
 801906c:	d10a      	bne.n	8019084 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801906e:	f7fe ffab 	bl	8017fc8 <LL_RCC_HSE_IsEnabledDiv2>
 8019072:	4603      	mov	r3, r0
 8019074:	2b01      	cmp	r3, #1
 8019076:	d102      	bne.n	801907e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8019078:	4b22      	ldr	r3, [pc, #136]	; (8019104 <HAL_RCC_GetSysClockFreq+0xd0>)
 801907a:	60fb      	str	r3, [r7, #12]
 801907c:	e03a      	b.n	80190f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 801907e:	4b22      	ldr	r3, [pc, #136]	; (8019108 <HAL_RCC_GetSysClockFreq+0xd4>)
 8019080:	60fb      	str	r3, [r7, #12]
 8019082:	e037      	b.n	80190f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8019084:	f7ff faba 	bl	80185fc <LL_RCC_PLL_GetMainSource>
 8019088:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 801908a:	683b      	ldr	r3, [r7, #0]
 801908c:	2b02      	cmp	r3, #2
 801908e:	d003      	beq.n	8019098 <HAL_RCC_GetSysClockFreq+0x64>
 8019090:	683b      	ldr	r3, [r7, #0]
 8019092:	2b03      	cmp	r3, #3
 8019094:	d003      	beq.n	801909e <HAL_RCC_GetSysClockFreq+0x6a>
 8019096:	e00d      	b.n	80190b4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8019098:	4b1a      	ldr	r3, [pc, #104]	; (8019104 <HAL_RCC_GetSysClockFreq+0xd0>)
 801909a:	60bb      	str	r3, [r7, #8]
        break;
 801909c:	e015      	b.n	80190ca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801909e:	f7fe ff93 	bl	8017fc8 <LL_RCC_HSE_IsEnabledDiv2>
 80190a2:	4603      	mov	r3, r0
 80190a4:	2b01      	cmp	r3, #1
 80190a6:	d102      	bne.n	80190ae <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80190a8:	4b16      	ldr	r3, [pc, #88]	; (8019104 <HAL_RCC_GetSysClockFreq+0xd0>)
 80190aa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80190ac:	e00d      	b.n	80190ca <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80190ae:	4b16      	ldr	r3, [pc, #88]	; (8019108 <HAL_RCC_GetSysClockFreq+0xd4>)
 80190b0:	60bb      	str	r3, [r7, #8]
        break;
 80190b2:	e00a      	b.n	80190ca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80190b4:	f7ff f95b 	bl	801836e <LL_RCC_MSI_GetRange>
 80190b8:	4603      	mov	r3, r0
 80190ba:	091b      	lsrs	r3, r3, #4
 80190bc:	f003 030f 	and.w	r3, r3, #15
 80190c0:	4a0f      	ldr	r2, [pc, #60]	; (8019100 <HAL_RCC_GetSysClockFreq+0xcc>)
 80190c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80190c6:	60bb      	str	r3, [r7, #8]
        break;
 80190c8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80190ca:	f7ff fa72 	bl	80185b2 <LL_RCC_PLL_GetN>
 80190ce:	4602      	mov	r2, r0
 80190d0:	68bb      	ldr	r3, [r7, #8]
 80190d2:	fb03 f402 	mul.w	r4, r3, r2
 80190d6:	f7ff fa85 	bl	80185e4 <LL_RCC_PLL_GetDivider>
 80190da:	4603      	mov	r3, r0
 80190dc:	091b      	lsrs	r3, r3, #4
 80190de:	3301      	adds	r3, #1
 80190e0:	fbb4 f4f3 	udiv	r4, r4, r3
 80190e4:	f7ff fa72 	bl	80185cc <LL_RCC_PLL_GetR>
 80190e8:	4603      	mov	r3, r0
 80190ea:	0f5b      	lsrs	r3, r3, #29
 80190ec:	3301      	adds	r3, #1
 80190ee:	fbb4 f3f3 	udiv	r3, r4, r3
 80190f2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80190f4:	68fb      	ldr	r3, [r7, #12]
}
 80190f6:	4618      	mov	r0, r3
 80190f8:	3714      	adds	r7, #20
 80190fa:	46bd      	mov	sp, r7
 80190fc:	bd90      	pop	{r4, r7, pc}
 80190fe:	bf00      	nop
 8019100:	0801dcf8 	.word	0x0801dcf8
 8019104:	00f42400 	.word	0x00f42400
 8019108:	01e84800 	.word	0x01e84800

0801910c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801910c:	b598      	push	{r3, r4, r7, lr}
 801910e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8019110:	f7ff ff90 	bl	8019034 <HAL_RCC_GetSysClockFreq>
 8019114:	4604      	mov	r4, r0
 8019116:	f7ff f9dd 	bl	80184d4 <LL_RCC_GetAHBPrescaler>
 801911a:	4603      	mov	r3, r0
 801911c:	091b      	lsrs	r3, r3, #4
 801911e:	f003 030f 	and.w	r3, r3, #15
 8019122:	4a03      	ldr	r2, [pc, #12]	; (8019130 <HAL_RCC_GetHCLKFreq+0x24>)
 8019124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019128:	fbb4 f3f3 	udiv	r3, r4, r3
}
 801912c:	4618      	mov	r0, r3
 801912e:	bd98      	pop	{r3, r4, r7, pc}
 8019130:	0801dc98 	.word	0x0801dc98

08019134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8019134:	b598      	push	{r3, r4, r7, lr}
 8019136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8019138:	f7ff ffe8 	bl	801910c <HAL_RCC_GetHCLKFreq>
 801913c:	4604      	mov	r4, r0
 801913e:	f7ff f9f0 	bl	8018522 <LL_RCC_GetAPB1Prescaler>
 8019142:	4603      	mov	r3, r0
 8019144:	0a1b      	lsrs	r3, r3, #8
 8019146:	f003 0307 	and.w	r3, r3, #7
 801914a:	4a04      	ldr	r2, [pc, #16]	; (801915c <HAL_RCC_GetPCLK1Freq+0x28>)
 801914c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019150:	f003 031f 	and.w	r3, r3, #31
 8019154:	fa24 f303 	lsr.w	r3, r4, r3
}
 8019158:	4618      	mov	r0, r3
 801915a:	bd98      	pop	{r3, r4, r7, pc}
 801915c:	0801dcd8 	.word	0x0801dcd8

08019160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8019160:	b598      	push	{r3, r4, r7, lr}
 8019162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8019164:	f7ff ffd2 	bl	801910c <HAL_RCC_GetHCLKFreq>
 8019168:	4604      	mov	r4, r0
 801916a:	f7ff f9e6 	bl	801853a <LL_RCC_GetAPB2Prescaler>
 801916e:	4603      	mov	r3, r0
 8019170:	0adb      	lsrs	r3, r3, #11
 8019172:	f003 0307 	and.w	r3, r3, #7
 8019176:	4a04      	ldr	r2, [pc, #16]	; (8019188 <HAL_RCC_GetPCLK2Freq+0x28>)
 8019178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801917c:	f003 031f 	and.w	r3, r3, #31
 8019180:	fa24 f303 	lsr.w	r3, r4, r3
}
 8019184:	4618      	mov	r0, r3
 8019186:	bd98      	pop	{r3, r4, r7, pc}
 8019188:	0801dcd8 	.word	0x0801dcd8

0801918c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801918c:	b580      	push	{r7, lr}
 801918e:	b082      	sub	sp, #8
 8019190:	af00      	add	r7, sp, #0
 8019192:	6078      	str	r0, [r7, #4]
 8019194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	226f      	movs	r2, #111	; 0x6f
 801919a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 801919c:	f7ff f925 	bl	80183ea <LL_RCC_GetSysClkSource>
 80191a0:	4602      	mov	r2, r0
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80191a6:	f7ff f995 	bl	80184d4 <LL_RCC_GetAHBPrescaler>
 80191aa:	4602      	mov	r2, r0
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80191b0:	f7ff f9b7 	bl	8018522 <LL_RCC_GetAPB1Prescaler>
 80191b4:	4602      	mov	r2, r0
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80191ba:	f7ff f9be 	bl	801853a <LL_RCC_GetAPB2Prescaler>
 80191be:	4602      	mov	r2, r0
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80191c4:	f7ff f992 	bl	80184ec <LL_C2_RCC_GetAHBPrescaler>
 80191c8:	4602      	mov	r2, r0
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80191ce:	f7ff f99a 	bl	8018506 <LL_RCC_GetAHB4Prescaler>
 80191d2:	4602      	mov	r2, r0
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80191d8:	4b04      	ldr	r3, [pc, #16]	; (80191ec <HAL_RCC_GetClockConfig+0x60>)
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	f003 0207 	and.w	r2, r3, #7
 80191e0:	683b      	ldr	r3, [r7, #0]
 80191e2:	601a      	str	r2, [r3, #0]
}
 80191e4:	bf00      	nop
 80191e6:	3708      	adds	r7, #8
 80191e8:	46bd      	mov	sp, r7
 80191ea:	bd80      	pop	{r7, pc}
 80191ec:	58004000 	.word	0x58004000

080191f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80191f0:	b590      	push	{r4, r7, lr}
 80191f2:	b085      	sub	sp, #20
 80191f4:	af00      	add	r7, sp, #0
 80191f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	2bb0      	cmp	r3, #176	; 0xb0
 80191fc:	d903      	bls.n	8019206 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80191fe:	4b15      	ldr	r3, [pc, #84]	; (8019254 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8019200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019202:	60fb      	str	r3, [r7, #12]
 8019204:	e007      	b.n	8019216 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	091b      	lsrs	r3, r3, #4
 801920a:	f003 030f 	and.w	r3, r3, #15
 801920e:	4a11      	ldr	r2, [pc, #68]	; (8019254 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8019210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019214:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8019216:	f7ff f976 	bl	8018506 <LL_RCC_GetAHB4Prescaler>
 801921a:	4603      	mov	r3, r0
 801921c:	091b      	lsrs	r3, r3, #4
 801921e:	f003 030f 	and.w	r3, r3, #15
 8019222:	4a0d      	ldr	r2, [pc, #52]	; (8019258 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8019224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019228:	68fa      	ldr	r2, [r7, #12]
 801922a:	fbb2 f3f3 	udiv	r3, r2, r3
 801922e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8019230:	68bb      	ldr	r3, [r7, #8]
 8019232:	4a0a      	ldr	r2, [pc, #40]	; (801925c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8019234:	fba2 2303 	umull	r2, r3, r2, r3
 8019238:	0c9c      	lsrs	r4, r3, #18
 801923a:	f7fe feb7 	bl	8017fac <HAL_PWREx_GetVoltageRange>
 801923e:	4603      	mov	r3, r0
 8019240:	4619      	mov	r1, r3
 8019242:	4620      	mov	r0, r4
 8019244:	f000 f80c 	bl	8019260 <RCC_SetFlashLatency>
 8019248:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 801924a:	4618      	mov	r0, r3
 801924c:	3714      	adds	r7, #20
 801924e:	46bd      	mov	sp, r7
 8019250:	bd90      	pop	{r4, r7, pc}
 8019252:	bf00      	nop
 8019254:	0801dcf8 	.word	0x0801dcf8
 8019258:	0801dc98 	.word	0x0801dc98
 801925c:	431bde83 	.word	0x431bde83

08019260 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8019260:	b590      	push	{r4, r7, lr}
 8019262:	b093      	sub	sp, #76	; 0x4c
 8019264:	af00      	add	r7, sp, #0
 8019266:	6078      	str	r0, [r7, #4]
 8019268:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 801926a:	4b37      	ldr	r3, [pc, #220]	; (8019348 <RCC_SetFlashLatency+0xe8>)
 801926c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8019270:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019272:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8019276:	4a35      	ldr	r2, [pc, #212]	; (801934c <RCC_SetFlashLatency+0xec>)
 8019278:	f107 031c 	add.w	r3, r7, #28
 801927c:	ca07      	ldmia	r2, {r0, r1, r2}
 801927e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8019282:	4b33      	ldr	r3, [pc, #204]	; (8019350 <RCC_SetFlashLatency+0xf0>)
 8019284:	f107 040c 	add.w	r4, r7, #12
 8019288:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801928a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 801928e:	2300      	movs	r3, #0
 8019290:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8019292:	683b      	ldr	r3, [r7, #0]
 8019294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019298:	d11a      	bne.n	80192d0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801929a:	2300      	movs	r3, #0
 801929c:	643b      	str	r3, [r7, #64]	; 0x40
 801929e:	e013      	b.n	80192c8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80192a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192a2:	009b      	lsls	r3, r3, #2
 80192a4:	3348      	adds	r3, #72	; 0x48
 80192a6:	443b      	add	r3, r7
 80192a8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80192ac:	687a      	ldr	r2, [r7, #4]
 80192ae:	429a      	cmp	r2, r3
 80192b0:	d807      	bhi.n	80192c2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80192b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192b4:	009b      	lsls	r3, r3, #2
 80192b6:	3348      	adds	r3, #72	; 0x48
 80192b8:	443b      	add	r3, r7
 80192ba:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80192be:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80192c0:	e020      	b.n	8019304 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80192c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192c4:	3301      	adds	r3, #1
 80192c6:	643b      	str	r3, [r7, #64]	; 0x40
 80192c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192ca:	2b03      	cmp	r3, #3
 80192cc:	d9e8      	bls.n	80192a0 <RCC_SetFlashLatency+0x40>
 80192ce:	e019      	b.n	8019304 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80192d0:	2300      	movs	r3, #0
 80192d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80192d4:	e013      	b.n	80192fe <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80192d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192d8:	009b      	lsls	r3, r3, #2
 80192da:	3348      	adds	r3, #72	; 0x48
 80192dc:	443b      	add	r3, r7
 80192de:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80192e2:	687a      	ldr	r2, [r7, #4]
 80192e4:	429a      	cmp	r2, r3
 80192e6:	d807      	bhi.n	80192f8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80192e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192ea:	009b      	lsls	r3, r3, #2
 80192ec:	3348      	adds	r3, #72	; 0x48
 80192ee:	443b      	add	r3, r7
 80192f0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80192f4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80192f6:	e005      	b.n	8019304 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80192f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192fa:	3301      	adds	r3, #1
 80192fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80192fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019300:	2b02      	cmp	r3, #2
 8019302:	d9e8      	bls.n	80192d6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8019304:	4b13      	ldr	r3, [pc, #76]	; (8019354 <RCC_SetFlashLatency+0xf4>)
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	f023 0207 	bic.w	r2, r3, #7
 801930c:	4911      	ldr	r1, [pc, #68]	; (8019354 <RCC_SetFlashLatency+0xf4>)
 801930e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019310:	4313      	orrs	r3, r2
 8019312:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8019314:	f7fd f956 	bl	80165c4 <HAL_GetTick>
 8019318:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801931a:	e008      	b.n	801932e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801931c:	f7fd f952 	bl	80165c4 <HAL_GetTick>
 8019320:	4602      	mov	r2, r0
 8019322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019324:	1ad3      	subs	r3, r2, r3
 8019326:	2b02      	cmp	r3, #2
 8019328:	d901      	bls.n	801932e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 801932a:	2303      	movs	r3, #3
 801932c:	e007      	b.n	801933e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801932e:	4b09      	ldr	r3, [pc, #36]	; (8019354 <RCC_SetFlashLatency+0xf4>)
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	f003 0307 	and.w	r3, r3, #7
 8019336:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019338:	429a      	cmp	r2, r3
 801933a:	d1ef      	bne.n	801931c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 801933c:	2300      	movs	r3, #0
}
 801933e:	4618      	mov	r0, r3
 8019340:	374c      	adds	r7, #76	; 0x4c
 8019342:	46bd      	mov	sp, r7
 8019344:	bd90      	pop	{r4, r7, pc}
 8019346:	bf00      	nop
 8019348:	0801dc6c 	.word	0x0801dc6c
 801934c:	0801dc7c 	.word	0x0801dc7c
 8019350:	0801dc88 	.word	0x0801dc88
 8019354:	58004000 	.word	0x58004000

08019358 <LL_RCC_LSE_IsEnabled>:
{
 8019358:	b480      	push	{r7}
 801935a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 801935c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019364:	f003 0301 	and.w	r3, r3, #1
 8019368:	2b01      	cmp	r3, #1
 801936a:	d101      	bne.n	8019370 <LL_RCC_LSE_IsEnabled+0x18>
 801936c:	2301      	movs	r3, #1
 801936e:	e000      	b.n	8019372 <LL_RCC_LSE_IsEnabled+0x1a>
 8019370:	2300      	movs	r3, #0
}
 8019372:	4618      	mov	r0, r3
 8019374:	46bd      	mov	sp, r7
 8019376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801937a:	4770      	bx	lr

0801937c <LL_RCC_LSE_IsReady>:
{
 801937c:	b480      	push	{r7}
 801937e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8019380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019388:	f003 0302 	and.w	r3, r3, #2
 801938c:	2b02      	cmp	r3, #2
 801938e:	d101      	bne.n	8019394 <LL_RCC_LSE_IsReady+0x18>
 8019390:	2301      	movs	r3, #1
 8019392:	e000      	b.n	8019396 <LL_RCC_LSE_IsReady+0x1a>
 8019394:	2300      	movs	r3, #0
}
 8019396:	4618      	mov	r0, r3
 8019398:	46bd      	mov	sp, r7
 801939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801939e:	4770      	bx	lr

080193a0 <LL_RCC_MSI_EnablePLLMode>:
{
 80193a0:	b480      	push	{r7}
 80193a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80193a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80193a8:	681b      	ldr	r3, [r3, #0]
 80193aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80193ae:	f043 0304 	orr.w	r3, r3, #4
 80193b2:	6013      	str	r3, [r2, #0]
}
 80193b4:	bf00      	nop
 80193b6:	46bd      	mov	sp, r7
 80193b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193bc:	4770      	bx	lr

080193be <LL_RCC_SetRFWKPClockSource>:
{
 80193be:	b480      	push	{r7}
 80193c0:	b083      	sub	sp, #12
 80193c2:	af00      	add	r7, sp, #0
 80193c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80193c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80193ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80193ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80193d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	4313      	orrs	r3, r2
 80193da:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80193de:	bf00      	nop
 80193e0:	370c      	adds	r7, #12
 80193e2:	46bd      	mov	sp, r7
 80193e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193e8:	4770      	bx	lr

080193ea <LL_RCC_SetSMPSClockSource>:
{
 80193ea:	b480      	push	{r7}
 80193ec:	b083      	sub	sp, #12
 80193ee:	af00      	add	r7, sp, #0
 80193f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80193f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80193f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193f8:	f023 0203 	bic.w	r2, r3, #3
 80193fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	4313      	orrs	r3, r2
 8019404:	624b      	str	r3, [r1, #36]	; 0x24
}
 8019406:	bf00      	nop
 8019408:	370c      	adds	r7, #12
 801940a:	46bd      	mov	sp, r7
 801940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019410:	4770      	bx	lr

08019412 <LL_RCC_SetSMPSPrescaler>:
{
 8019412:	b480      	push	{r7}
 8019414:	b083      	sub	sp, #12
 8019416:	af00      	add	r7, sp, #0
 8019418:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 801941a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801941e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019420:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8019424:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	4313      	orrs	r3, r2
 801942c:	624b      	str	r3, [r1, #36]	; 0x24
}
 801942e:	bf00      	nop
 8019430:	370c      	adds	r7, #12
 8019432:	46bd      	mov	sp, r7
 8019434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019438:	4770      	bx	lr

0801943a <LL_RCC_SetUSARTClockSource>:
{
 801943a:	b480      	push	{r7}
 801943c:	b083      	sub	sp, #12
 801943e:	af00      	add	r7, sp, #0
 8019440:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8019442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801944a:	f023 0203 	bic.w	r2, r3, #3
 801944e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	4313      	orrs	r3, r2
 8019456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801945a:	bf00      	nop
 801945c:	370c      	adds	r7, #12
 801945e:	46bd      	mov	sp, r7
 8019460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019464:	4770      	bx	lr

08019466 <LL_RCC_SetLPUARTClockSource>:
{
 8019466:	b480      	push	{r7}
 8019468:	b083      	sub	sp, #12
 801946a:	af00      	add	r7, sp, #0
 801946c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 801946e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019476:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801947a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	4313      	orrs	r3, r2
 8019482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8019486:	bf00      	nop
 8019488:	370c      	adds	r7, #12
 801948a:	46bd      	mov	sp, r7
 801948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019490:	4770      	bx	lr

08019492 <LL_RCC_SetI2CClockSource>:
{
 8019492:	b480      	push	{r7}
 8019494:	b083      	sub	sp, #12
 8019496:	af00      	add	r7, sp, #0
 8019498:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 801949a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801949e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	091b      	lsrs	r3, r3, #4
 80194a6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80194aa:	43db      	mvns	r3, r3
 80194ac:	401a      	ands	r2, r3
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	011b      	lsls	r3, r3, #4
 80194b2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80194b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80194ba:	4313      	orrs	r3, r2
 80194bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80194c0:	bf00      	nop
 80194c2:	370c      	adds	r7, #12
 80194c4:	46bd      	mov	sp, r7
 80194c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ca:	4770      	bx	lr

080194cc <LL_RCC_SetLPTIMClockSource>:
{
 80194cc:	b480      	push	{r7}
 80194ce:	b083      	sub	sp, #12
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80194d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80194d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	0c1b      	lsrs	r3, r3, #16
 80194e0:	041b      	lsls	r3, r3, #16
 80194e2:	43db      	mvns	r3, r3
 80194e4:	401a      	ands	r2, r3
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	041b      	lsls	r3, r3, #16
 80194ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80194ee:	4313      	orrs	r3, r2
 80194f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80194f4:	bf00      	nop
 80194f6:	370c      	adds	r7, #12
 80194f8:	46bd      	mov	sp, r7
 80194fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194fe:	4770      	bx	lr

08019500 <LL_RCC_SetSAIClockSource>:
{
 8019500:	b480      	push	{r7}
 8019502:	b083      	sub	sp, #12
 8019504:	af00      	add	r7, sp, #0
 8019506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8019508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801950c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019510:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8019514:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	4313      	orrs	r3, r2
 801951c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8019520:	bf00      	nop
 8019522:	370c      	adds	r7, #12
 8019524:	46bd      	mov	sp, r7
 8019526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801952a:	4770      	bx	lr

0801952c <LL_RCC_SetRNGClockSource>:
{
 801952c:	b480      	push	{r7}
 801952e:	b083      	sub	sp, #12
 8019530:	af00      	add	r7, sp, #0
 8019532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8019534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801953c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8019540:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	4313      	orrs	r3, r2
 8019548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801954c:	bf00      	nop
 801954e:	370c      	adds	r7, #12
 8019550:	46bd      	mov	sp, r7
 8019552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019556:	4770      	bx	lr

08019558 <LL_RCC_SetCLK48ClockSource>:
{
 8019558:	b480      	push	{r7}
 801955a:	b083      	sub	sp, #12
 801955c:	af00      	add	r7, sp, #0
 801955e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8019560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019568:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801956c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	4313      	orrs	r3, r2
 8019574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8019578:	bf00      	nop
 801957a:	370c      	adds	r7, #12
 801957c:	46bd      	mov	sp, r7
 801957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019582:	4770      	bx	lr

08019584 <LL_RCC_SetUSBClockSource>:
{
 8019584:	b580      	push	{r7, lr}
 8019586:	b082      	sub	sp, #8
 8019588:	af00      	add	r7, sp, #0
 801958a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 801958c:	6878      	ldr	r0, [r7, #4]
 801958e:	f7ff ffe3 	bl	8019558 <LL_RCC_SetCLK48ClockSource>
}
 8019592:	bf00      	nop
 8019594:	3708      	adds	r7, #8
 8019596:	46bd      	mov	sp, r7
 8019598:	bd80      	pop	{r7, pc}

0801959a <LL_RCC_SetADCClockSource>:
{
 801959a:	b480      	push	{r7}
 801959c:	b083      	sub	sp, #12
 801959e:	af00      	add	r7, sp, #0
 80195a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80195a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80195a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80195aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80195ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	4313      	orrs	r3, r2
 80195b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80195ba:	bf00      	nop
 80195bc:	370c      	adds	r7, #12
 80195be:	46bd      	mov	sp, r7
 80195c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195c4:	4770      	bx	lr

080195c6 <LL_RCC_SetRTCClockSource>:
{
 80195c6:	b480      	push	{r7}
 80195c8:	b083      	sub	sp, #12
 80195ca:	af00      	add	r7, sp, #0
 80195cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80195ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80195d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80195d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80195da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	4313      	orrs	r3, r2
 80195e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80195e6:	bf00      	nop
 80195e8:	370c      	adds	r7, #12
 80195ea:	46bd      	mov	sp, r7
 80195ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f0:	4770      	bx	lr

080195f2 <LL_RCC_GetRTCClockSource>:
{
 80195f2:	b480      	push	{r7}
 80195f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80195f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80195fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80195fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8019602:	4618      	mov	r0, r3
 8019604:	46bd      	mov	sp, r7
 8019606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801960a:	4770      	bx	lr

0801960c <LL_RCC_ForceBackupDomainReset>:
{
 801960c:	b480      	push	{r7}
 801960e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8019610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801961c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8019624:	bf00      	nop
 8019626:	46bd      	mov	sp, r7
 8019628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801962c:	4770      	bx	lr

0801962e <LL_RCC_ReleaseBackupDomainReset>:
{
 801962e:	b480      	push	{r7}
 8019630:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8019632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801963a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801963e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8019646:	bf00      	nop
 8019648:	46bd      	mov	sp, r7
 801964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801964e:	4770      	bx	lr

08019650 <LL_RCC_PLLSAI1_Enable>:
{
 8019650:	b480      	push	{r7}
 8019652:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8019654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801965e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8019662:	6013      	str	r3, [r2, #0]
}
 8019664:	bf00      	nop
 8019666:	46bd      	mov	sp, r7
 8019668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801966c:	4770      	bx	lr

0801966e <LL_RCC_PLLSAI1_Disable>:
{
 801966e:	b480      	push	{r7}
 8019670:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8019672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801967c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8019680:	6013      	str	r3, [r2, #0]
}
 8019682:	bf00      	nop
 8019684:	46bd      	mov	sp, r7
 8019686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801968a:	4770      	bx	lr

0801968c <LL_RCC_PLLSAI1_IsReady>:
{
 801968c:	b480      	push	{r7}
 801968e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8019690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801969a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801969e:	d101      	bne.n	80196a4 <LL_RCC_PLLSAI1_IsReady+0x18>
 80196a0:	2301      	movs	r3, #1
 80196a2:	e000      	b.n	80196a6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80196a4:	2300      	movs	r3, #0
}
 80196a6:	4618      	mov	r0, r3
 80196a8:	46bd      	mov	sp, r7
 80196aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ae:	4770      	bx	lr

080196b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80196b0:	b580      	push	{r7, lr}
 80196b2:	b088      	sub	sp, #32
 80196b4:	af00      	add	r7, sp, #0
 80196b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80196b8:	2300      	movs	r3, #0
 80196ba:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80196bc:	2300      	movs	r3, #0
 80196be:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d034      	beq.n	8019736 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80196d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80196d4:	d021      	beq.n	801971a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80196d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80196da:	d81b      	bhi.n	8019714 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80196dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80196e0:	d01d      	beq.n	801971e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80196e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80196e6:	d815      	bhi.n	8019714 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d00b      	beq.n	8019704 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80196ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80196f0:	d110      	bne.n	8019714 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80196f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80196f6:	68db      	ldr	r3, [r3, #12]
 80196f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80196fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019700:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8019702:	e00d      	b.n	8019720 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	3304      	adds	r3, #4
 8019708:	4618      	mov	r0, r3
 801970a:	f000 f94d 	bl	80199a8 <RCCEx_PLLSAI1_ConfigNP>
 801970e:	4603      	mov	r3, r0
 8019710:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8019712:	e005      	b.n	8019720 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8019714:	2301      	movs	r3, #1
 8019716:	77fb      	strb	r3, [r7, #31]
        break;
 8019718:	e002      	b.n	8019720 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 801971a:	bf00      	nop
 801971c:	e000      	b.n	8019720 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 801971e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8019720:	7ffb      	ldrb	r3, [r7, #31]
 8019722:	2b00      	cmp	r3, #0
 8019724:	d105      	bne.n	8019732 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801972a:	4618      	mov	r0, r3
 801972c:	f7ff fee8 	bl	8019500 <LL_RCC_SetSAIClockSource>
 8019730:	e001      	b.n	8019736 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8019732:	7ffb      	ldrb	r3, [r7, #31]
 8019734:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801973e:	2b00      	cmp	r3, #0
 8019740:	d046      	beq.n	80197d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8019742:	f7ff ff56 	bl	80195f2 <LL_RCC_GetRTCClockSource>
 8019746:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801974c:	69ba      	ldr	r2, [r7, #24]
 801974e:	429a      	cmp	r2, r3
 8019750:	d03c      	beq.n	80197cc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8019752:	f7fe fc1b 	bl	8017f8c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8019756:	69bb      	ldr	r3, [r7, #24]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d105      	bne.n	8019768 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019760:	4618      	mov	r0, r3
 8019762:	f7ff ff30 	bl	80195c6 <LL_RCC_SetRTCClockSource>
 8019766:	e02e      	b.n	80197c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8019768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801976c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019770:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8019772:	f7ff ff4b 	bl	801960c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8019776:	f7ff ff5a 	bl	801962e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 801977a:	697b      	ldr	r3, [r7, #20]
 801977c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019784:	4313      	orrs	r3, r2
 8019786:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8019788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801978c:	697b      	ldr	r3, [r7, #20]
 801978e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8019792:	f7ff fde1 	bl	8019358 <LL_RCC_LSE_IsEnabled>
 8019796:	4603      	mov	r3, r0
 8019798:	2b01      	cmp	r3, #1
 801979a:	d114      	bne.n	80197c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801979c:	f7fc ff12 	bl	80165c4 <HAL_GetTick>
 80197a0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80197a2:	e00b      	b.n	80197bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80197a4:	f7fc ff0e 	bl	80165c4 <HAL_GetTick>
 80197a8:	4602      	mov	r2, r0
 80197aa:	693b      	ldr	r3, [r7, #16]
 80197ac:	1ad3      	subs	r3, r2, r3
 80197ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80197b2:	4293      	cmp	r3, r2
 80197b4:	d902      	bls.n	80197bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80197b6:	2303      	movs	r3, #3
 80197b8:	77fb      	strb	r3, [r7, #31]
              break;
 80197ba:	e004      	b.n	80197c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80197bc:	f7ff fdde 	bl	801937c <LL_RCC_LSE_IsReady>
 80197c0:	4603      	mov	r3, r0
 80197c2:	2b01      	cmp	r3, #1
 80197c4:	d1ee      	bne.n	80197a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80197c6:	7ffb      	ldrb	r3, [r7, #31]
 80197c8:	77bb      	strb	r3, [r7, #30]
 80197ca:	e001      	b.n	80197d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80197cc:	7ffb      	ldrb	r3, [r7, #31]
 80197ce:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	f003 0301 	and.w	r3, r3, #1
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d004      	beq.n	80197e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	699b      	ldr	r3, [r3, #24]
 80197e0:	4618      	mov	r0, r3
 80197e2:	f7ff fe2a 	bl	801943a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	f003 0302 	and.w	r3, r3, #2
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d004      	beq.n	80197fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	69db      	ldr	r3, [r3, #28]
 80197f6:	4618      	mov	r0, r3
 80197f8:	f7ff fe35 	bl	8019466 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	f003 0310 	and.w	r3, r3, #16
 8019804:	2b00      	cmp	r3, #0
 8019806:	d004      	beq.n	8019812 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801980c:	4618      	mov	r0, r3
 801980e:	f7ff fe5d 	bl	80194cc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	f003 0320 	and.w	r3, r3, #32
 801981a:	2b00      	cmp	r3, #0
 801981c:	d004      	beq.n	8019828 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019822:	4618      	mov	r0, r3
 8019824:	f7ff fe52 	bl	80194cc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	f003 0304 	and.w	r3, r3, #4
 8019830:	2b00      	cmp	r3, #0
 8019832:	d004      	beq.n	801983e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	6a1b      	ldr	r3, [r3, #32]
 8019838:	4618      	mov	r0, r3
 801983a:	f7ff fe2a 	bl	8019492 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	f003 0308 	and.w	r3, r3, #8
 8019846:	2b00      	cmp	r3, #0
 8019848:	d004      	beq.n	8019854 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801984e:	4618      	mov	r0, r3
 8019850:	f7ff fe1f 	bl	8019492 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801985c:	2b00      	cmp	r3, #0
 801985e:	d022      	beq.n	80198a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019864:	4618      	mov	r0, r3
 8019866:	f7ff fe8d 	bl	8019584 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801986e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8019872:	d107      	bne.n	8019884 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8019874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019878:	68db      	ldr	r3, [r3, #12]
 801987a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801987e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8019882:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019888:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801988c:	d10b      	bne.n	80198a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	3304      	adds	r3, #4
 8019892:	4618      	mov	r0, r3
 8019894:	f000 f8e3 	bl	8019a5e <RCCEx_PLLSAI1_ConfigNQ>
 8019898:	4603      	mov	r3, r0
 801989a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801989c:	7ffb      	ldrb	r3, [r7, #31]
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d001      	beq.n	80198a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80198a2:	7ffb      	ldrb	r3, [r7, #31]
 80198a4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	681b      	ldr	r3, [r3, #0]
 80198aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d02b      	beq.n	801990a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80198ba:	d008      	beq.n	80198ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80198c4:	d003      	beq.n	80198ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d105      	bne.n	80198da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198d2:	4618      	mov	r0, r3
 80198d4:	f7ff fe2a 	bl	801952c <LL_RCC_SetRNGClockSource>
 80198d8:	e00a      	b.n	80198f0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80198e2:	60fb      	str	r3, [r7, #12]
 80198e4:	2000      	movs	r0, #0
 80198e6:	f7ff fe21 	bl	801952c <LL_RCC_SetRNGClockSource>
 80198ea:	68f8      	ldr	r0, [r7, #12]
 80198ec:	f7ff fe34 	bl	8019558 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198f4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80198f8:	d107      	bne.n	801990a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80198fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80198fe:	68db      	ldr	r3, [r3, #12]
 8019900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019904:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8019908:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019912:	2b00      	cmp	r3, #0
 8019914:	d022      	beq.n	801995c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801991a:	4618      	mov	r0, r3
 801991c:	f7ff fe3d 	bl	801959a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019928:	d107      	bne.n	801993a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801992a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801992e:	68db      	ldr	r3, [r3, #12]
 8019930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019938:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801993e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8019942:	d10b      	bne.n	801995c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	3304      	adds	r3, #4
 8019948:	4618      	mov	r0, r3
 801994a:	f000 f8e3 	bl	8019b14 <RCCEx_PLLSAI1_ConfigNR>
 801994e:	4603      	mov	r3, r0
 8019950:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8019952:	7ffb      	ldrb	r3, [r7, #31]
 8019954:	2b00      	cmp	r3, #0
 8019956:	d001      	beq.n	801995c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8019958:	7ffb      	ldrb	r3, [r7, #31]
 801995a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019964:	2b00      	cmp	r3, #0
 8019966:	d004      	beq.n	8019972 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801996c:	4618      	mov	r0, r3
 801996e:	f7ff fd26 	bl	80193be <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801997a:	2b00      	cmp	r3, #0
 801997c:	d009      	beq.n	8019992 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019982:	4618      	mov	r0, r3
 8019984:	f7ff fd45 	bl	8019412 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801998c:	4618      	mov	r0, r3
 801998e:	f7ff fd2c 	bl	80193ea <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8019992:	7fbb      	ldrb	r3, [r7, #30]
}
 8019994:	4618      	mov	r0, r3
 8019996:	3720      	adds	r7, #32
 8019998:	46bd      	mov	sp, r7
 801999a:	bd80      	pop	{r7, pc}

0801999c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 801999c:	b580      	push	{r7, lr}
 801999e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80199a0:	f7ff fcfe 	bl	80193a0 <LL_RCC_MSI_EnablePLLMode>
}
 80199a4:	bf00      	nop
 80199a6:	bd80      	pop	{r7, pc}

080199a8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b084      	sub	sp, #16
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80199b0:	2300      	movs	r3, #0
 80199b2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80199b4:	f7ff fe5b 	bl	801966e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80199b8:	f7fc fe04 	bl	80165c4 <HAL_GetTick>
 80199bc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80199be:	e009      	b.n	80199d4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80199c0:	f7fc fe00 	bl	80165c4 <HAL_GetTick>
 80199c4:	4602      	mov	r2, r0
 80199c6:	68bb      	ldr	r3, [r7, #8]
 80199c8:	1ad3      	subs	r3, r2, r3
 80199ca:	2b02      	cmp	r3, #2
 80199cc:	d902      	bls.n	80199d4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80199ce:	2303      	movs	r3, #3
 80199d0:	73fb      	strb	r3, [r7, #15]
      break;
 80199d2:	e004      	b.n	80199de <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80199d4:	f7ff fe5a 	bl	801968c <LL_RCC_PLLSAI1_IsReady>
 80199d8:	4603      	mov	r3, r0
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d1f0      	bne.n	80199c0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80199de:	7bfb      	ldrb	r3, [r7, #15]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d137      	bne.n	8019a54 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80199e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80199e8:	691b      	ldr	r3, [r3, #16]
 80199ea:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	021b      	lsls	r3, r3, #8
 80199f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80199f8:	4313      	orrs	r3, r2
 80199fa:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80199fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019a00:	691b      	ldr	r3, [r3, #16]
 8019a02:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	685b      	ldr	r3, [r3, #4]
 8019a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019a0e:	4313      	orrs	r3, r2
 8019a10:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8019a12:	f7ff fe1d 	bl	8019650 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019a16:	f7fc fdd5 	bl	80165c4 <HAL_GetTick>
 8019a1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8019a1c:	e009      	b.n	8019a32 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8019a1e:	f7fc fdd1 	bl	80165c4 <HAL_GetTick>
 8019a22:	4602      	mov	r2, r0
 8019a24:	68bb      	ldr	r3, [r7, #8]
 8019a26:	1ad3      	subs	r3, r2, r3
 8019a28:	2b02      	cmp	r3, #2
 8019a2a:	d902      	bls.n	8019a32 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8019a2c:	2303      	movs	r3, #3
 8019a2e:	73fb      	strb	r3, [r7, #15]
        break;
 8019a30:	e004      	b.n	8019a3c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8019a32:	f7ff fe2b 	bl	801968c <LL_RCC_PLLSAI1_IsReady>
 8019a36:	4603      	mov	r3, r0
 8019a38:	2b01      	cmp	r3, #1
 8019a3a:	d1f0      	bne.n	8019a1e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8019a3c:	7bfb      	ldrb	r3, [r7, #15]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d108      	bne.n	8019a54 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8019a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019a46:	691a      	ldr	r2, [r3, #16]
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	691b      	ldr	r3, [r3, #16]
 8019a4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019a50:	4313      	orrs	r3, r2
 8019a52:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8019a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a56:	4618      	mov	r0, r3
 8019a58:	3710      	adds	r7, #16
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	bd80      	pop	{r7, pc}

08019a5e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8019a5e:	b580      	push	{r7, lr}
 8019a60:	b084      	sub	sp, #16
 8019a62:	af00      	add	r7, sp, #0
 8019a64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8019a66:	2300      	movs	r3, #0
 8019a68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8019a6a:	f7ff fe00 	bl	801966e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8019a6e:	f7fc fda9 	bl	80165c4 <HAL_GetTick>
 8019a72:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8019a74:	e009      	b.n	8019a8a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8019a76:	f7fc fda5 	bl	80165c4 <HAL_GetTick>
 8019a7a:	4602      	mov	r2, r0
 8019a7c:	68bb      	ldr	r3, [r7, #8]
 8019a7e:	1ad3      	subs	r3, r2, r3
 8019a80:	2b02      	cmp	r3, #2
 8019a82:	d902      	bls.n	8019a8a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8019a84:	2303      	movs	r3, #3
 8019a86:	73fb      	strb	r3, [r7, #15]
      break;
 8019a88:	e004      	b.n	8019a94 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8019a8a:	f7ff fdff 	bl	801968c <LL_RCC_PLLSAI1_IsReady>
 8019a8e:	4603      	mov	r3, r0
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d1f0      	bne.n	8019a76 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8019a94:	7bfb      	ldrb	r3, [r7, #15]
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d137      	bne.n	8019b0a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8019a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019a9e:	691b      	ldr	r3, [r3, #16]
 8019aa0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	681b      	ldr	r3, [r3, #0]
 8019aa8:	021b      	lsls	r3, r3, #8
 8019aaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019aae:	4313      	orrs	r3, r2
 8019ab0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8019ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019ab6:	691b      	ldr	r3, [r3, #16]
 8019ab8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	689b      	ldr	r3, [r3, #8]
 8019ac0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019ac4:	4313      	orrs	r3, r2
 8019ac6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8019ac8:	f7ff fdc2 	bl	8019650 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019acc:	f7fc fd7a 	bl	80165c4 <HAL_GetTick>
 8019ad0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8019ad2:	e009      	b.n	8019ae8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8019ad4:	f7fc fd76 	bl	80165c4 <HAL_GetTick>
 8019ad8:	4602      	mov	r2, r0
 8019ada:	68bb      	ldr	r3, [r7, #8]
 8019adc:	1ad3      	subs	r3, r2, r3
 8019ade:	2b02      	cmp	r3, #2
 8019ae0:	d902      	bls.n	8019ae8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8019ae2:	2303      	movs	r3, #3
 8019ae4:	73fb      	strb	r3, [r7, #15]
        break;
 8019ae6:	e004      	b.n	8019af2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8019ae8:	f7ff fdd0 	bl	801968c <LL_RCC_PLLSAI1_IsReady>
 8019aec:	4603      	mov	r3, r0
 8019aee:	2b01      	cmp	r3, #1
 8019af0:	d1f0      	bne.n	8019ad4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8019af2:	7bfb      	ldrb	r3, [r7, #15]
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d108      	bne.n	8019b0a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8019af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019afc:	691a      	ldr	r2, [r3, #16]
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	691b      	ldr	r3, [r3, #16]
 8019b02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019b06:	4313      	orrs	r3, r2
 8019b08:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8019b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b0c:	4618      	mov	r0, r3
 8019b0e:	3710      	adds	r7, #16
 8019b10:	46bd      	mov	sp, r7
 8019b12:	bd80      	pop	{r7, pc}

08019b14 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8019b14:	b580      	push	{r7, lr}
 8019b16:	b084      	sub	sp, #16
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8019b1c:	2300      	movs	r3, #0
 8019b1e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8019b20:	f7ff fda5 	bl	801966e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8019b24:	f7fc fd4e 	bl	80165c4 <HAL_GetTick>
 8019b28:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8019b2a:	e009      	b.n	8019b40 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8019b2c:	f7fc fd4a 	bl	80165c4 <HAL_GetTick>
 8019b30:	4602      	mov	r2, r0
 8019b32:	68bb      	ldr	r3, [r7, #8]
 8019b34:	1ad3      	subs	r3, r2, r3
 8019b36:	2b02      	cmp	r3, #2
 8019b38:	d902      	bls.n	8019b40 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8019b3a:	2303      	movs	r3, #3
 8019b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8019b3e:	e004      	b.n	8019b4a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8019b40:	f7ff fda4 	bl	801968c <LL_RCC_PLLSAI1_IsReady>
 8019b44:	4603      	mov	r3, r0
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d1f0      	bne.n	8019b2c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8019b4a:	7bfb      	ldrb	r3, [r7, #15]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d137      	bne.n	8019bc0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8019b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019b54:	691b      	ldr	r3, [r3, #16]
 8019b56:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	021b      	lsls	r3, r3, #8
 8019b60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019b64:	4313      	orrs	r3, r2
 8019b66:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8019b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019b6c:	691b      	ldr	r3, [r3, #16]
 8019b6e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	68db      	ldr	r3, [r3, #12]
 8019b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019b7a:	4313      	orrs	r3, r2
 8019b7c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8019b7e:	f7ff fd67 	bl	8019650 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019b82:	f7fc fd1f 	bl	80165c4 <HAL_GetTick>
 8019b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8019b88:	e009      	b.n	8019b9e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8019b8a:	f7fc fd1b 	bl	80165c4 <HAL_GetTick>
 8019b8e:	4602      	mov	r2, r0
 8019b90:	68bb      	ldr	r3, [r7, #8]
 8019b92:	1ad3      	subs	r3, r2, r3
 8019b94:	2b02      	cmp	r3, #2
 8019b96:	d902      	bls.n	8019b9e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8019b98:	2303      	movs	r3, #3
 8019b9a:	73fb      	strb	r3, [r7, #15]
        break;
 8019b9c:	e004      	b.n	8019ba8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8019b9e:	f7ff fd75 	bl	801968c <LL_RCC_PLLSAI1_IsReady>
 8019ba2:	4603      	mov	r3, r0
 8019ba4:	2b01      	cmp	r3, #1
 8019ba6:	d1f0      	bne.n	8019b8a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8019ba8:	7bfb      	ldrb	r3, [r7, #15]
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d108      	bne.n	8019bc0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8019bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019bb2:	691a      	ldr	r2, [r3, #16]
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	691b      	ldr	r3, [r3, #16]
 8019bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019bbc:	4313      	orrs	r3, r2
 8019bbe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8019bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8019bc2:	4618      	mov	r0, r3
 8019bc4:	3710      	adds	r7, #16
 8019bc6:	46bd      	mov	sp, r7
 8019bc8:	bd80      	pop	{r7, pc}

08019bca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8019bca:	b580      	push	{r7, lr}
 8019bcc:	b082      	sub	sp, #8
 8019bce:	af00      	add	r7, sp, #0
 8019bd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d101      	bne.n	8019bdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8019bd8:	2301      	movs	r3, #1
 8019bda:	e049      	b.n	8019c70 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019be2:	b2db      	uxtb	r3, r3
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d106      	bne.n	8019bf6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	2200      	movs	r2, #0
 8019bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8019bf0:	6878      	ldr	r0, [r7, #4]
 8019bf2:	f000 f841 	bl	8019c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	2202      	movs	r2, #2
 8019bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	681a      	ldr	r2, [r3, #0]
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	3304      	adds	r3, #4
 8019c06:	4619      	mov	r1, r3
 8019c08:	4610      	mov	r0, r2
 8019c0a:	f000 f9d5 	bl	8019fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	2201      	movs	r2, #1
 8019c12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	2201      	movs	r2, #1
 8019c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	2201      	movs	r2, #1
 8019c22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	2201      	movs	r2, #1
 8019c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	2201      	movs	r2, #1
 8019c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	2201      	movs	r2, #1
 8019c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	2201      	movs	r2, #1
 8019c42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	2201      	movs	r2, #1
 8019c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	2201      	movs	r2, #1
 8019c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	2201      	movs	r2, #1
 8019c5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	2201      	movs	r2, #1
 8019c62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	2201      	movs	r2, #1
 8019c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8019c6e:	2300      	movs	r3, #0
}
 8019c70:	4618      	mov	r0, r3
 8019c72:	3708      	adds	r7, #8
 8019c74:	46bd      	mov	sp, r7
 8019c76:	bd80      	pop	{r7, pc}

08019c78 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8019c78:	b480      	push	{r7}
 8019c7a:	b083      	sub	sp, #12
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8019c80:	bf00      	nop
 8019c82:	370c      	adds	r7, #12
 8019c84:	46bd      	mov	sp, r7
 8019c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c8a:	4770      	bx	lr

08019c8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8019c8c:	b480      	push	{r7}
 8019c8e:	b085      	sub	sp, #20
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019c9a:	b2db      	uxtb	r3, r3
 8019c9c:	2b01      	cmp	r3, #1
 8019c9e:	d001      	beq.n	8019ca4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8019ca0:	2301      	movs	r3, #1
 8019ca2:	e036      	b.n	8019d12 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	2202      	movs	r2, #2
 8019ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	68da      	ldr	r2, [r3, #12]
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	f042 0201 	orr.w	r2, r2, #1
 8019cba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	4a17      	ldr	r2, [pc, #92]	; (8019d20 <HAL_TIM_Base_Start_IT+0x94>)
 8019cc2:	4293      	cmp	r3, r2
 8019cc4:	d004      	beq.n	8019cd0 <HAL_TIM_Base_Start_IT+0x44>
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019cce:	d115      	bne.n	8019cfc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	689a      	ldr	r2, [r3, #8]
 8019cd6:	4b13      	ldr	r3, [pc, #76]	; (8019d24 <HAL_TIM_Base_Start_IT+0x98>)
 8019cd8:	4013      	ands	r3, r2
 8019cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	2b06      	cmp	r3, #6
 8019ce0:	d015      	beq.n	8019d0e <HAL_TIM_Base_Start_IT+0x82>
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019ce8:	d011      	beq.n	8019d0e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	681a      	ldr	r2, [r3, #0]
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	f042 0201 	orr.w	r2, r2, #1
 8019cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019cfa:	e008      	b.n	8019d0e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	681a      	ldr	r2, [r3, #0]
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	f042 0201 	orr.w	r2, r2, #1
 8019d0a:	601a      	str	r2, [r3, #0]
 8019d0c:	e000      	b.n	8019d10 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019d0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8019d10:	2300      	movs	r3, #0
}
 8019d12:	4618      	mov	r0, r3
 8019d14:	3714      	adds	r7, #20
 8019d16:	46bd      	mov	sp, r7
 8019d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d1c:	4770      	bx	lr
 8019d1e:	bf00      	nop
 8019d20:	40012c00 	.word	0x40012c00
 8019d24:	00010007 	.word	0x00010007

08019d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8019d28:	b580      	push	{r7, lr}
 8019d2a:	b082      	sub	sp, #8
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	691b      	ldr	r3, [r3, #16]
 8019d36:	f003 0302 	and.w	r3, r3, #2
 8019d3a:	2b02      	cmp	r3, #2
 8019d3c:	d122      	bne.n	8019d84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	68db      	ldr	r3, [r3, #12]
 8019d44:	f003 0302 	and.w	r3, r3, #2
 8019d48:	2b02      	cmp	r3, #2
 8019d4a:	d11b      	bne.n	8019d84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	f06f 0202 	mvn.w	r2, #2
 8019d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	2201      	movs	r2, #1
 8019d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	699b      	ldr	r3, [r3, #24]
 8019d62:	f003 0303 	and.w	r3, r3, #3
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d003      	beq.n	8019d72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8019d6a:	6878      	ldr	r0, [r7, #4]
 8019d6c:	f000 f905 	bl	8019f7a <HAL_TIM_IC_CaptureCallback>
 8019d70:	e005      	b.n	8019d7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8019d72:	6878      	ldr	r0, [r7, #4]
 8019d74:	f000 f8f7 	bl	8019f66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019d78:	6878      	ldr	r0, [r7, #4]
 8019d7a:	f000 f908 	bl	8019f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	2200      	movs	r2, #0
 8019d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	691b      	ldr	r3, [r3, #16]
 8019d8a:	f003 0304 	and.w	r3, r3, #4
 8019d8e:	2b04      	cmp	r3, #4
 8019d90:	d122      	bne.n	8019dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	68db      	ldr	r3, [r3, #12]
 8019d98:	f003 0304 	and.w	r3, r3, #4
 8019d9c:	2b04      	cmp	r3, #4
 8019d9e:	d11b      	bne.n	8019dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	f06f 0204 	mvn.w	r2, #4
 8019da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	2202      	movs	r2, #2
 8019dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	699b      	ldr	r3, [r3, #24]
 8019db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d003      	beq.n	8019dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019dbe:	6878      	ldr	r0, [r7, #4]
 8019dc0:	f000 f8db 	bl	8019f7a <HAL_TIM_IC_CaptureCallback>
 8019dc4:	e005      	b.n	8019dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019dc6:	6878      	ldr	r0, [r7, #4]
 8019dc8:	f000 f8cd 	bl	8019f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019dcc:	6878      	ldr	r0, [r7, #4]
 8019dce:	f000 f8de 	bl	8019f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	2200      	movs	r2, #0
 8019dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	691b      	ldr	r3, [r3, #16]
 8019dde:	f003 0308 	and.w	r3, r3, #8
 8019de2:	2b08      	cmp	r3, #8
 8019de4:	d122      	bne.n	8019e2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	68db      	ldr	r3, [r3, #12]
 8019dec:	f003 0308 	and.w	r3, r3, #8
 8019df0:	2b08      	cmp	r3, #8
 8019df2:	d11b      	bne.n	8019e2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	f06f 0208 	mvn.w	r2, #8
 8019dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	2204      	movs	r2, #4
 8019e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	69db      	ldr	r3, [r3, #28]
 8019e0a:	f003 0303 	and.w	r3, r3, #3
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d003      	beq.n	8019e1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019e12:	6878      	ldr	r0, [r7, #4]
 8019e14:	f000 f8b1 	bl	8019f7a <HAL_TIM_IC_CaptureCallback>
 8019e18:	e005      	b.n	8019e26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019e1a:	6878      	ldr	r0, [r7, #4]
 8019e1c:	f000 f8a3 	bl	8019f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019e20:	6878      	ldr	r0, [r7, #4]
 8019e22:	f000 f8b4 	bl	8019f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	2200      	movs	r2, #0
 8019e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	691b      	ldr	r3, [r3, #16]
 8019e32:	f003 0310 	and.w	r3, r3, #16
 8019e36:	2b10      	cmp	r3, #16
 8019e38:	d122      	bne.n	8019e80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	68db      	ldr	r3, [r3, #12]
 8019e40:	f003 0310 	and.w	r3, r3, #16
 8019e44:	2b10      	cmp	r3, #16
 8019e46:	d11b      	bne.n	8019e80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	681b      	ldr	r3, [r3, #0]
 8019e4c:	f06f 0210 	mvn.w	r2, #16
 8019e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	2208      	movs	r2, #8
 8019e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	69db      	ldr	r3, [r3, #28]
 8019e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d003      	beq.n	8019e6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019e66:	6878      	ldr	r0, [r7, #4]
 8019e68:	f000 f887 	bl	8019f7a <HAL_TIM_IC_CaptureCallback>
 8019e6c:	e005      	b.n	8019e7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019e6e:	6878      	ldr	r0, [r7, #4]
 8019e70:	f000 f879 	bl	8019f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019e74:	6878      	ldr	r0, [r7, #4]
 8019e76:	f000 f88a 	bl	8019f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	2200      	movs	r2, #0
 8019e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	691b      	ldr	r3, [r3, #16]
 8019e86:	f003 0301 	and.w	r3, r3, #1
 8019e8a:	2b01      	cmp	r3, #1
 8019e8c:	d10e      	bne.n	8019eac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	68db      	ldr	r3, [r3, #12]
 8019e94:	f003 0301 	and.w	r3, r3, #1
 8019e98:	2b01      	cmp	r3, #1
 8019e9a:	d107      	bne.n	8019eac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	f06f 0201 	mvn.w	r2, #1
 8019ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8019ea6:	6878      	ldr	r0, [r7, #4]
 8019ea8:	f7e7 fcf6 	bl	8001898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	681b      	ldr	r3, [r3, #0]
 8019eb0:	691b      	ldr	r3, [r3, #16]
 8019eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019eb6:	2b80      	cmp	r3, #128	; 0x80
 8019eb8:	d10e      	bne.n	8019ed8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	68db      	ldr	r3, [r3, #12]
 8019ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019ec4:	2b80      	cmp	r3, #128	; 0x80
 8019ec6:	d107      	bne.n	8019ed8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8019ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8019ed2:	6878      	ldr	r0, [r7, #4]
 8019ed4:	f000 f8de 	bl	801a094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	691b      	ldr	r3, [r3, #16]
 8019ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019ee6:	d10e      	bne.n	8019f06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	68db      	ldr	r3, [r3, #12]
 8019eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019ef2:	2b80      	cmp	r3, #128	; 0x80
 8019ef4:	d107      	bne.n	8019f06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8019efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8019f00:	6878      	ldr	r0, [r7, #4]
 8019f02:	f000 f8d1 	bl	801a0a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	691b      	ldr	r3, [r3, #16]
 8019f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019f10:	2b40      	cmp	r3, #64	; 0x40
 8019f12:	d10e      	bne.n	8019f32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	68db      	ldr	r3, [r3, #12]
 8019f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019f1e:	2b40      	cmp	r3, #64	; 0x40
 8019f20:	d107      	bne.n	8019f32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8019f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8019f2c:	6878      	ldr	r0, [r7, #4]
 8019f2e:	f000 f838 	bl	8019fa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	691b      	ldr	r3, [r3, #16]
 8019f38:	f003 0320 	and.w	r3, r3, #32
 8019f3c:	2b20      	cmp	r3, #32
 8019f3e:	d10e      	bne.n	8019f5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	68db      	ldr	r3, [r3, #12]
 8019f46:	f003 0320 	and.w	r3, r3, #32
 8019f4a:	2b20      	cmp	r3, #32
 8019f4c:	d107      	bne.n	8019f5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	f06f 0220 	mvn.w	r2, #32
 8019f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8019f58:	6878      	ldr	r0, [r7, #4]
 8019f5a:	f000 f891 	bl	801a080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8019f5e:	bf00      	nop
 8019f60:	3708      	adds	r7, #8
 8019f62:	46bd      	mov	sp, r7
 8019f64:	bd80      	pop	{r7, pc}

08019f66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8019f66:	b480      	push	{r7}
 8019f68:	b083      	sub	sp, #12
 8019f6a:	af00      	add	r7, sp, #0
 8019f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8019f6e:	bf00      	nop
 8019f70:	370c      	adds	r7, #12
 8019f72:	46bd      	mov	sp, r7
 8019f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f78:	4770      	bx	lr

08019f7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8019f7a:	b480      	push	{r7}
 8019f7c:	b083      	sub	sp, #12
 8019f7e:	af00      	add	r7, sp, #0
 8019f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8019f82:	bf00      	nop
 8019f84:	370c      	adds	r7, #12
 8019f86:	46bd      	mov	sp, r7
 8019f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f8c:	4770      	bx	lr

08019f8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8019f8e:	b480      	push	{r7}
 8019f90:	b083      	sub	sp, #12
 8019f92:	af00      	add	r7, sp, #0
 8019f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8019f96:	bf00      	nop
 8019f98:	370c      	adds	r7, #12
 8019f9a:	46bd      	mov	sp, r7
 8019f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fa0:	4770      	bx	lr

08019fa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8019fa2:	b480      	push	{r7}
 8019fa4:	b083      	sub	sp, #12
 8019fa6:	af00      	add	r7, sp, #0
 8019fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8019faa:	bf00      	nop
 8019fac:	370c      	adds	r7, #12
 8019fae:	46bd      	mov	sp, r7
 8019fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fb4:	4770      	bx	lr
	...

08019fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8019fb8:	b480      	push	{r7}
 8019fba:	b085      	sub	sp, #20
 8019fbc:	af00      	add	r7, sp, #0
 8019fbe:	6078      	str	r0, [r7, #4]
 8019fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	4a2a      	ldr	r2, [pc, #168]	; (801a074 <TIM_Base_SetConfig+0xbc>)
 8019fcc:	4293      	cmp	r3, r2
 8019fce:	d003      	beq.n	8019fd8 <TIM_Base_SetConfig+0x20>
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019fd6:	d108      	bne.n	8019fea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8019fd8:	68fb      	ldr	r3, [r7, #12]
 8019fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8019fe0:	683b      	ldr	r3, [r7, #0]
 8019fe2:	685b      	ldr	r3, [r3, #4]
 8019fe4:	68fa      	ldr	r2, [r7, #12]
 8019fe6:	4313      	orrs	r3, r2
 8019fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	4a21      	ldr	r2, [pc, #132]	; (801a074 <TIM_Base_SetConfig+0xbc>)
 8019fee:	4293      	cmp	r3, r2
 8019ff0:	d00b      	beq.n	801a00a <TIM_Base_SetConfig+0x52>
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019ff8:	d007      	beq.n	801a00a <TIM_Base_SetConfig+0x52>
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	4a1e      	ldr	r2, [pc, #120]	; (801a078 <TIM_Base_SetConfig+0xc0>)
 8019ffe:	4293      	cmp	r3, r2
 801a000:	d003      	beq.n	801a00a <TIM_Base_SetConfig+0x52>
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	4a1d      	ldr	r2, [pc, #116]	; (801a07c <TIM_Base_SetConfig+0xc4>)
 801a006:	4293      	cmp	r3, r2
 801a008:	d108      	bne.n	801a01c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801a010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801a012:	683b      	ldr	r3, [r7, #0]
 801a014:	68db      	ldr	r3, [r3, #12]
 801a016:	68fa      	ldr	r2, [r7, #12]
 801a018:	4313      	orrs	r3, r2
 801a01a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801a022:	683b      	ldr	r3, [r7, #0]
 801a024:	695b      	ldr	r3, [r3, #20]
 801a026:	4313      	orrs	r3, r2
 801a028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	68fa      	ldr	r2, [r7, #12]
 801a02e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801a030:	683b      	ldr	r3, [r7, #0]
 801a032:	689a      	ldr	r2, [r3, #8]
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801a038:	683b      	ldr	r3, [r7, #0]
 801a03a:	681a      	ldr	r2, [r3, #0]
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	4a0c      	ldr	r2, [pc, #48]	; (801a074 <TIM_Base_SetConfig+0xbc>)
 801a044:	4293      	cmp	r3, r2
 801a046:	d007      	beq.n	801a058 <TIM_Base_SetConfig+0xa0>
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	4a0b      	ldr	r2, [pc, #44]	; (801a078 <TIM_Base_SetConfig+0xc0>)
 801a04c:	4293      	cmp	r3, r2
 801a04e:	d003      	beq.n	801a058 <TIM_Base_SetConfig+0xa0>
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	4a0a      	ldr	r2, [pc, #40]	; (801a07c <TIM_Base_SetConfig+0xc4>)
 801a054:	4293      	cmp	r3, r2
 801a056:	d103      	bne.n	801a060 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801a058:	683b      	ldr	r3, [r7, #0]
 801a05a:	691a      	ldr	r2, [r3, #16]
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	2201      	movs	r2, #1
 801a064:	615a      	str	r2, [r3, #20]
}
 801a066:	bf00      	nop
 801a068:	3714      	adds	r7, #20
 801a06a:	46bd      	mov	sp, r7
 801a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a070:	4770      	bx	lr
 801a072:	bf00      	nop
 801a074:	40012c00 	.word	0x40012c00
 801a078:	40014400 	.word	0x40014400
 801a07c:	40014800 	.word	0x40014800

0801a080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801a080:	b480      	push	{r7}
 801a082:	b083      	sub	sp, #12
 801a084:	af00      	add	r7, sp, #0
 801a086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801a088:	bf00      	nop
 801a08a:	370c      	adds	r7, #12
 801a08c:	46bd      	mov	sp, r7
 801a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a092:	4770      	bx	lr

0801a094 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801a094:	b480      	push	{r7}
 801a096:	b083      	sub	sp, #12
 801a098:	af00      	add	r7, sp, #0
 801a09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801a09c:	bf00      	nop
 801a09e:	370c      	adds	r7, #12
 801a0a0:	46bd      	mov	sp, r7
 801a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0a6:	4770      	bx	lr

0801a0a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801a0a8:	b480      	push	{r7}
 801a0aa:	b083      	sub	sp, #12
 801a0ac:	af00      	add	r7, sp, #0
 801a0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801a0b0:	bf00      	nop
 801a0b2:	370c      	adds	r7, #12
 801a0b4:	46bd      	mov	sp, r7
 801a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ba:	4770      	bx	lr

0801a0bc <LL_RCC_GetUSARTClockSource>:
{
 801a0bc:	b480      	push	{r7}
 801a0be:	b083      	sub	sp, #12
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 801a0c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a0c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	4013      	ands	r3, r2
}
 801a0d0:	4618      	mov	r0, r3
 801a0d2:	370c      	adds	r7, #12
 801a0d4:	46bd      	mov	sp, r7
 801a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0da:	4770      	bx	lr

0801a0dc <LL_RCC_GetLPUARTClockSource>:
{
 801a0dc:	b480      	push	{r7}
 801a0de:	b083      	sub	sp, #12
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 801a0e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a0e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	4013      	ands	r3, r2
}
 801a0f0:	4618      	mov	r0, r3
 801a0f2:	370c      	adds	r7, #12
 801a0f4:	46bd      	mov	sp, r7
 801a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0fa:	4770      	bx	lr

0801a0fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b082      	sub	sp, #8
 801a100:	af00      	add	r7, sp, #0
 801a102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d101      	bne.n	801a10e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801a10a:	2301      	movs	r3, #1
 801a10c:	e042      	b.n	801a194 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a114:	2b00      	cmp	r3, #0
 801a116:	d106      	bne.n	801a126 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	2200      	movs	r2, #0
 801a11c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801a120:	6878      	ldr	r0, [r7, #4]
 801a122:	f7e8 f943 	bl	80023ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	2224      	movs	r2, #36	; 0x24
 801a12a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	681a      	ldr	r2, [r3, #0]
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	681b      	ldr	r3, [r3, #0]
 801a138:	f022 0201 	bic.w	r2, r2, #1
 801a13c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801a13e:	6878      	ldr	r0, [r7, #4]
 801a140:	f000 f82c 	bl	801a19c <UART_SetConfig>
 801a144:	4603      	mov	r3, r0
 801a146:	2b01      	cmp	r3, #1
 801a148:	d101      	bne.n	801a14e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801a14a:	2301      	movs	r3, #1
 801a14c:	e022      	b.n	801a194 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a152:	2b00      	cmp	r3, #0
 801a154:	d002      	beq.n	801a15c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801a156:	6878      	ldr	r0, [r7, #4]
 801a158:	f000 fa48 	bl	801a5ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	685a      	ldr	r2, [r3, #4]
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801a16a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	689a      	ldr	r2, [r3, #8]
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801a17a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	681a      	ldr	r2, [r3, #0]
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	681b      	ldr	r3, [r3, #0]
 801a186:	f042 0201 	orr.w	r2, r2, #1
 801a18a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801a18c:	6878      	ldr	r0, [r7, #4]
 801a18e:	f000 facf 	bl	801a730 <UART_CheckIdleState>
 801a192:	4603      	mov	r3, r0
}
 801a194:	4618      	mov	r0, r3
 801a196:	3708      	adds	r7, #8
 801a198:	46bd      	mov	sp, r7
 801a19a:	bd80      	pop	{r7, pc}

0801a19c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801a19c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a1a0:	b08c      	sub	sp, #48	; 0x30
 801a1a2:	af00      	add	r7, sp, #0
 801a1a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801a1a6:	2300      	movs	r3, #0
 801a1a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801a1ac:	697b      	ldr	r3, [r7, #20]
 801a1ae:	689a      	ldr	r2, [r3, #8]
 801a1b0:	697b      	ldr	r3, [r7, #20]
 801a1b2:	691b      	ldr	r3, [r3, #16]
 801a1b4:	431a      	orrs	r2, r3
 801a1b6:	697b      	ldr	r3, [r7, #20]
 801a1b8:	695b      	ldr	r3, [r3, #20]
 801a1ba:	431a      	orrs	r2, r3
 801a1bc:	697b      	ldr	r3, [r7, #20]
 801a1be:	69db      	ldr	r3, [r3, #28]
 801a1c0:	4313      	orrs	r3, r2
 801a1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801a1c4:	697b      	ldr	r3, [r7, #20]
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	681a      	ldr	r2, [r3, #0]
 801a1ca:	4baf      	ldr	r3, [pc, #700]	; (801a488 <UART_SetConfig+0x2ec>)
 801a1cc:	4013      	ands	r3, r2
 801a1ce:	697a      	ldr	r2, [r7, #20]
 801a1d0:	6812      	ldr	r2, [r2, #0]
 801a1d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a1d4:	430b      	orrs	r3, r1
 801a1d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801a1d8:	697b      	ldr	r3, [r7, #20]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	685b      	ldr	r3, [r3, #4]
 801a1de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801a1e2:	697b      	ldr	r3, [r7, #20]
 801a1e4:	68da      	ldr	r2, [r3, #12]
 801a1e6:	697b      	ldr	r3, [r7, #20]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	430a      	orrs	r2, r1
 801a1ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801a1ee:	697b      	ldr	r3, [r7, #20]
 801a1f0:	699b      	ldr	r3, [r3, #24]
 801a1f2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801a1f4:	697b      	ldr	r3, [r7, #20]
 801a1f6:	681b      	ldr	r3, [r3, #0]
 801a1f8:	4aa4      	ldr	r2, [pc, #656]	; (801a48c <UART_SetConfig+0x2f0>)
 801a1fa:	4293      	cmp	r3, r2
 801a1fc:	d004      	beq.n	801a208 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801a1fe:	697b      	ldr	r3, [r7, #20]
 801a200:	6a1b      	ldr	r3, [r3, #32]
 801a202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a204:	4313      	orrs	r3, r2
 801a206:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801a208:	697b      	ldr	r3, [r7, #20]
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	689b      	ldr	r3, [r3, #8]
 801a20e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801a212:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801a216:	697a      	ldr	r2, [r7, #20]
 801a218:	6812      	ldr	r2, [r2, #0]
 801a21a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a21c:	430b      	orrs	r3, r1
 801a21e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801a220:	697b      	ldr	r3, [r7, #20]
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a226:	f023 010f 	bic.w	r1, r3, #15
 801a22a:	697b      	ldr	r3, [r7, #20]
 801a22c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a22e:	697b      	ldr	r3, [r7, #20]
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	430a      	orrs	r2, r1
 801a234:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801a236:	697b      	ldr	r3, [r7, #20]
 801a238:	681b      	ldr	r3, [r3, #0]
 801a23a:	4a95      	ldr	r2, [pc, #596]	; (801a490 <UART_SetConfig+0x2f4>)
 801a23c:	4293      	cmp	r3, r2
 801a23e:	d125      	bne.n	801a28c <UART_SetConfig+0xf0>
 801a240:	2003      	movs	r0, #3
 801a242:	f7ff ff3b 	bl	801a0bc <LL_RCC_GetUSARTClockSource>
 801a246:	4603      	mov	r3, r0
 801a248:	2b03      	cmp	r3, #3
 801a24a:	d81b      	bhi.n	801a284 <UART_SetConfig+0xe8>
 801a24c:	a201      	add	r2, pc, #4	; (adr r2, 801a254 <UART_SetConfig+0xb8>)
 801a24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a252:	bf00      	nop
 801a254:	0801a265 	.word	0x0801a265
 801a258:	0801a275 	.word	0x0801a275
 801a25c:	0801a26d 	.word	0x0801a26d
 801a260:	0801a27d 	.word	0x0801a27d
 801a264:	2301      	movs	r3, #1
 801a266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a26a:	e042      	b.n	801a2f2 <UART_SetConfig+0x156>
 801a26c:	2302      	movs	r3, #2
 801a26e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a272:	e03e      	b.n	801a2f2 <UART_SetConfig+0x156>
 801a274:	2304      	movs	r3, #4
 801a276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a27a:	e03a      	b.n	801a2f2 <UART_SetConfig+0x156>
 801a27c:	2308      	movs	r3, #8
 801a27e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a282:	e036      	b.n	801a2f2 <UART_SetConfig+0x156>
 801a284:	2310      	movs	r3, #16
 801a286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a28a:	e032      	b.n	801a2f2 <UART_SetConfig+0x156>
 801a28c:	697b      	ldr	r3, [r7, #20]
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	4a7e      	ldr	r2, [pc, #504]	; (801a48c <UART_SetConfig+0x2f0>)
 801a292:	4293      	cmp	r3, r2
 801a294:	d12a      	bne.n	801a2ec <UART_SetConfig+0x150>
 801a296:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801a29a:	f7ff ff1f 	bl	801a0dc <LL_RCC_GetLPUARTClockSource>
 801a29e:	4603      	mov	r3, r0
 801a2a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801a2a4:	d01a      	beq.n	801a2dc <UART_SetConfig+0x140>
 801a2a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801a2aa:	d81b      	bhi.n	801a2e4 <UART_SetConfig+0x148>
 801a2ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a2b0:	d00c      	beq.n	801a2cc <UART_SetConfig+0x130>
 801a2b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a2b6:	d815      	bhi.n	801a2e4 <UART_SetConfig+0x148>
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d003      	beq.n	801a2c4 <UART_SetConfig+0x128>
 801a2bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a2c0:	d008      	beq.n	801a2d4 <UART_SetConfig+0x138>
 801a2c2:	e00f      	b.n	801a2e4 <UART_SetConfig+0x148>
 801a2c4:	2300      	movs	r3, #0
 801a2c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a2ca:	e012      	b.n	801a2f2 <UART_SetConfig+0x156>
 801a2cc:	2302      	movs	r3, #2
 801a2ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a2d2:	e00e      	b.n	801a2f2 <UART_SetConfig+0x156>
 801a2d4:	2304      	movs	r3, #4
 801a2d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a2da:	e00a      	b.n	801a2f2 <UART_SetConfig+0x156>
 801a2dc:	2308      	movs	r3, #8
 801a2de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a2e2:	e006      	b.n	801a2f2 <UART_SetConfig+0x156>
 801a2e4:	2310      	movs	r3, #16
 801a2e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a2ea:	e002      	b.n	801a2f2 <UART_SetConfig+0x156>
 801a2ec:	2310      	movs	r3, #16
 801a2ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801a2f2:	697b      	ldr	r3, [r7, #20]
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	4a65      	ldr	r2, [pc, #404]	; (801a48c <UART_SetConfig+0x2f0>)
 801a2f8:	4293      	cmp	r3, r2
 801a2fa:	f040 8097 	bne.w	801a42c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801a2fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a302:	2b08      	cmp	r3, #8
 801a304:	d823      	bhi.n	801a34e <UART_SetConfig+0x1b2>
 801a306:	a201      	add	r2, pc, #4	; (adr r2, 801a30c <UART_SetConfig+0x170>)
 801a308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a30c:	0801a331 	.word	0x0801a331
 801a310:	0801a34f 	.word	0x0801a34f
 801a314:	0801a339 	.word	0x0801a339
 801a318:	0801a34f 	.word	0x0801a34f
 801a31c:	0801a33f 	.word	0x0801a33f
 801a320:	0801a34f 	.word	0x0801a34f
 801a324:	0801a34f 	.word	0x0801a34f
 801a328:	0801a34f 	.word	0x0801a34f
 801a32c:	0801a347 	.word	0x0801a347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a330:	f7fe ff00 	bl	8019134 <HAL_RCC_GetPCLK1Freq>
 801a334:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a336:	e010      	b.n	801a35a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801a338:	4b56      	ldr	r3, [pc, #344]	; (801a494 <UART_SetConfig+0x2f8>)
 801a33a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a33c:	e00d      	b.n	801a35a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a33e:	f7fe fe79 	bl	8019034 <HAL_RCC_GetSysClockFreq>
 801a342:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a344:	e009      	b.n	801a35a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a34a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a34c:	e005      	b.n	801a35a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 801a34e:	2300      	movs	r3, #0
 801a350:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801a352:	2301      	movs	r3, #1
 801a354:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801a358:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801a35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	f000 812b 	beq.w	801a5b8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801a362:	697b      	ldr	r3, [r7, #20]
 801a364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a366:	4a4c      	ldr	r2, [pc, #304]	; (801a498 <UART_SetConfig+0x2fc>)
 801a368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a36c:	461a      	mov	r2, r3
 801a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a370:	fbb3 f3f2 	udiv	r3, r3, r2
 801a374:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801a376:	697b      	ldr	r3, [r7, #20]
 801a378:	685a      	ldr	r2, [r3, #4]
 801a37a:	4613      	mov	r3, r2
 801a37c:	005b      	lsls	r3, r3, #1
 801a37e:	4413      	add	r3, r2
 801a380:	69ba      	ldr	r2, [r7, #24]
 801a382:	429a      	cmp	r2, r3
 801a384:	d305      	bcc.n	801a392 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801a386:	697b      	ldr	r3, [r7, #20]
 801a388:	685b      	ldr	r3, [r3, #4]
 801a38a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801a38c:	69ba      	ldr	r2, [r7, #24]
 801a38e:	429a      	cmp	r2, r3
 801a390:	d903      	bls.n	801a39a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801a392:	2301      	movs	r3, #1
 801a394:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801a398:	e10e      	b.n	801a5b8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a39c:	2200      	movs	r2, #0
 801a39e:	60bb      	str	r3, [r7, #8]
 801a3a0:	60fa      	str	r2, [r7, #12]
 801a3a2:	697b      	ldr	r3, [r7, #20]
 801a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3a6:	4a3c      	ldr	r2, [pc, #240]	; (801a498 <UART_SetConfig+0x2fc>)
 801a3a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a3ac:	b29b      	uxth	r3, r3
 801a3ae:	2200      	movs	r2, #0
 801a3b0:	603b      	str	r3, [r7, #0]
 801a3b2:	607a      	str	r2, [r7, #4]
 801a3b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a3b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801a3bc:	f7e6 fc1c 	bl	8000bf8 <__aeabi_uldivmod>
 801a3c0:	4602      	mov	r2, r0
 801a3c2:	460b      	mov	r3, r1
 801a3c4:	4610      	mov	r0, r2
 801a3c6:	4619      	mov	r1, r3
 801a3c8:	f04f 0200 	mov.w	r2, #0
 801a3cc:	f04f 0300 	mov.w	r3, #0
 801a3d0:	020b      	lsls	r3, r1, #8
 801a3d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801a3d6:	0202      	lsls	r2, r0, #8
 801a3d8:	6979      	ldr	r1, [r7, #20]
 801a3da:	6849      	ldr	r1, [r1, #4]
 801a3dc:	0849      	lsrs	r1, r1, #1
 801a3de:	2000      	movs	r0, #0
 801a3e0:	460c      	mov	r4, r1
 801a3e2:	4605      	mov	r5, r0
 801a3e4:	eb12 0804 	adds.w	r8, r2, r4
 801a3e8:	eb43 0905 	adc.w	r9, r3, r5
 801a3ec:	697b      	ldr	r3, [r7, #20]
 801a3ee:	685b      	ldr	r3, [r3, #4]
 801a3f0:	2200      	movs	r2, #0
 801a3f2:	469a      	mov	sl, r3
 801a3f4:	4693      	mov	fp, r2
 801a3f6:	4652      	mov	r2, sl
 801a3f8:	465b      	mov	r3, fp
 801a3fa:	4640      	mov	r0, r8
 801a3fc:	4649      	mov	r1, r9
 801a3fe:	f7e6 fbfb 	bl	8000bf8 <__aeabi_uldivmod>
 801a402:	4602      	mov	r2, r0
 801a404:	460b      	mov	r3, r1
 801a406:	4613      	mov	r3, r2
 801a408:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801a40a:	6a3b      	ldr	r3, [r7, #32]
 801a40c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801a410:	d308      	bcc.n	801a424 <UART_SetConfig+0x288>
 801a412:	6a3b      	ldr	r3, [r7, #32]
 801a414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a418:	d204      	bcs.n	801a424 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 801a41a:	697b      	ldr	r3, [r7, #20]
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	6a3a      	ldr	r2, [r7, #32]
 801a420:	60da      	str	r2, [r3, #12]
 801a422:	e0c9      	b.n	801a5b8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801a424:	2301      	movs	r3, #1
 801a426:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801a42a:	e0c5      	b.n	801a5b8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801a42c:	697b      	ldr	r3, [r7, #20]
 801a42e:	69db      	ldr	r3, [r3, #28]
 801a430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a434:	d16d      	bne.n	801a512 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801a436:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a43a:	3b01      	subs	r3, #1
 801a43c:	2b07      	cmp	r3, #7
 801a43e:	d82d      	bhi.n	801a49c <UART_SetConfig+0x300>
 801a440:	a201      	add	r2, pc, #4	; (adr r2, 801a448 <UART_SetConfig+0x2ac>)
 801a442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a446:	bf00      	nop
 801a448:	0801a469 	.word	0x0801a469
 801a44c:	0801a471 	.word	0x0801a471
 801a450:	0801a49d 	.word	0x0801a49d
 801a454:	0801a477 	.word	0x0801a477
 801a458:	0801a49d 	.word	0x0801a49d
 801a45c:	0801a49d 	.word	0x0801a49d
 801a460:	0801a49d 	.word	0x0801a49d
 801a464:	0801a47f 	.word	0x0801a47f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a468:	f7fe fe7a 	bl	8019160 <HAL_RCC_GetPCLK2Freq>
 801a46c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a46e:	e01b      	b.n	801a4a8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801a470:	4b08      	ldr	r3, [pc, #32]	; (801a494 <UART_SetConfig+0x2f8>)
 801a472:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a474:	e018      	b.n	801a4a8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a476:	f7fe fddd 	bl	8019034 <HAL_RCC_GetSysClockFreq>
 801a47a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a47c:	e014      	b.n	801a4a8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a47e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a482:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a484:	e010      	b.n	801a4a8 <UART_SetConfig+0x30c>
 801a486:	bf00      	nop
 801a488:	cfff69f3 	.word	0xcfff69f3
 801a48c:	40008000 	.word	0x40008000
 801a490:	40013800 	.word	0x40013800
 801a494:	00f42400 	.word	0x00f42400
 801a498:	0801dd38 	.word	0x0801dd38
      default:
        pclk = 0U;
 801a49c:	2300      	movs	r3, #0
 801a49e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801a4a0:	2301      	movs	r3, #1
 801a4a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801a4a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801a4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	f000 8084 	beq.w	801a5b8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a4b0:	697b      	ldr	r3, [r7, #20]
 801a4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4b4:	4a4b      	ldr	r2, [pc, #300]	; (801a5e4 <UART_SetConfig+0x448>)
 801a4b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a4ba:	461a      	mov	r2, r3
 801a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4be:	fbb3 f3f2 	udiv	r3, r3, r2
 801a4c2:	005a      	lsls	r2, r3, #1
 801a4c4:	697b      	ldr	r3, [r7, #20]
 801a4c6:	685b      	ldr	r3, [r3, #4]
 801a4c8:	085b      	lsrs	r3, r3, #1
 801a4ca:	441a      	add	r2, r3
 801a4cc:	697b      	ldr	r3, [r7, #20]
 801a4ce:	685b      	ldr	r3, [r3, #4]
 801a4d0:	fbb2 f3f3 	udiv	r3, r2, r3
 801a4d4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a4d6:	6a3b      	ldr	r3, [r7, #32]
 801a4d8:	2b0f      	cmp	r3, #15
 801a4da:	d916      	bls.n	801a50a <UART_SetConfig+0x36e>
 801a4dc:	6a3b      	ldr	r3, [r7, #32]
 801a4de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a4e2:	d212      	bcs.n	801a50a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801a4e4:	6a3b      	ldr	r3, [r7, #32]
 801a4e6:	b29b      	uxth	r3, r3
 801a4e8:	f023 030f 	bic.w	r3, r3, #15
 801a4ec:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801a4ee:	6a3b      	ldr	r3, [r7, #32]
 801a4f0:	085b      	lsrs	r3, r3, #1
 801a4f2:	b29b      	uxth	r3, r3
 801a4f4:	f003 0307 	and.w	r3, r3, #7
 801a4f8:	b29a      	uxth	r2, r3
 801a4fa:	8bfb      	ldrh	r3, [r7, #30]
 801a4fc:	4313      	orrs	r3, r2
 801a4fe:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801a500:	697b      	ldr	r3, [r7, #20]
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	8bfa      	ldrh	r2, [r7, #30]
 801a506:	60da      	str	r2, [r3, #12]
 801a508:	e056      	b.n	801a5b8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801a50a:	2301      	movs	r3, #1
 801a50c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801a510:	e052      	b.n	801a5b8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801a512:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a516:	3b01      	subs	r3, #1
 801a518:	2b07      	cmp	r3, #7
 801a51a:	d822      	bhi.n	801a562 <UART_SetConfig+0x3c6>
 801a51c:	a201      	add	r2, pc, #4	; (adr r2, 801a524 <UART_SetConfig+0x388>)
 801a51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a522:	bf00      	nop
 801a524:	0801a545 	.word	0x0801a545
 801a528:	0801a54d 	.word	0x0801a54d
 801a52c:	0801a563 	.word	0x0801a563
 801a530:	0801a553 	.word	0x0801a553
 801a534:	0801a563 	.word	0x0801a563
 801a538:	0801a563 	.word	0x0801a563
 801a53c:	0801a563 	.word	0x0801a563
 801a540:	0801a55b 	.word	0x0801a55b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a544:	f7fe fe0c 	bl	8019160 <HAL_RCC_GetPCLK2Freq>
 801a548:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a54a:	e010      	b.n	801a56e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801a54c:	4b26      	ldr	r3, [pc, #152]	; (801a5e8 <UART_SetConfig+0x44c>)
 801a54e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a550:	e00d      	b.n	801a56e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a552:	f7fe fd6f 	bl	8019034 <HAL_RCC_GetSysClockFreq>
 801a556:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801a558:	e009      	b.n	801a56e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a55a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a55e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a560:	e005      	b.n	801a56e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801a562:	2300      	movs	r3, #0
 801a564:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801a566:	2301      	movs	r3, #1
 801a568:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801a56c:	bf00      	nop
    }

    if (pclk != 0U)
 801a56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a570:	2b00      	cmp	r3, #0
 801a572:	d021      	beq.n	801a5b8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a574:	697b      	ldr	r3, [r7, #20]
 801a576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a578:	4a1a      	ldr	r2, [pc, #104]	; (801a5e4 <UART_SetConfig+0x448>)
 801a57a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a57e:	461a      	mov	r2, r3
 801a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a582:	fbb3 f2f2 	udiv	r2, r3, r2
 801a586:	697b      	ldr	r3, [r7, #20]
 801a588:	685b      	ldr	r3, [r3, #4]
 801a58a:	085b      	lsrs	r3, r3, #1
 801a58c:	441a      	add	r2, r3
 801a58e:	697b      	ldr	r3, [r7, #20]
 801a590:	685b      	ldr	r3, [r3, #4]
 801a592:	fbb2 f3f3 	udiv	r3, r2, r3
 801a596:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a598:	6a3b      	ldr	r3, [r7, #32]
 801a59a:	2b0f      	cmp	r3, #15
 801a59c:	d909      	bls.n	801a5b2 <UART_SetConfig+0x416>
 801a59e:	6a3b      	ldr	r3, [r7, #32]
 801a5a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a5a4:	d205      	bcs.n	801a5b2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801a5a6:	6a3b      	ldr	r3, [r7, #32]
 801a5a8:	b29a      	uxth	r2, r3
 801a5aa:	697b      	ldr	r3, [r7, #20]
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	60da      	str	r2, [r3, #12]
 801a5b0:	e002      	b.n	801a5b8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801a5b2:	2301      	movs	r3, #1
 801a5b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801a5b8:	697b      	ldr	r3, [r7, #20]
 801a5ba:	2201      	movs	r2, #1
 801a5bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801a5c0:	697b      	ldr	r3, [r7, #20]
 801a5c2:	2201      	movs	r2, #1
 801a5c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801a5c8:	697b      	ldr	r3, [r7, #20]
 801a5ca:	2200      	movs	r2, #0
 801a5cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801a5ce:	697b      	ldr	r3, [r7, #20]
 801a5d0:	2200      	movs	r2, #0
 801a5d2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801a5d4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801a5d8:	4618      	mov	r0, r3
 801a5da:	3730      	adds	r7, #48	; 0x30
 801a5dc:	46bd      	mov	sp, r7
 801a5de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a5e2:	bf00      	nop
 801a5e4:	0801dd38 	.word	0x0801dd38
 801a5e8:	00f42400 	.word	0x00f42400

0801a5ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801a5ec:	b480      	push	{r7}
 801a5ee:	b083      	sub	sp, #12
 801a5f0:	af00      	add	r7, sp, #0
 801a5f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a5f8:	f003 0301 	and.w	r3, r3, #1
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d00a      	beq.n	801a616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	685b      	ldr	r3, [r3, #4]
 801a606:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	430a      	orrs	r2, r1
 801a614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a61a:	f003 0302 	and.w	r3, r3, #2
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d00a      	beq.n	801a638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	685b      	ldr	r3, [r3, #4]
 801a628:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	430a      	orrs	r2, r1
 801a636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a63c:	f003 0304 	and.w	r3, r3, #4
 801a640:	2b00      	cmp	r3, #0
 801a642:	d00a      	beq.n	801a65a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	685b      	ldr	r3, [r3, #4]
 801a64a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	430a      	orrs	r2, r1
 801a658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a65e:	f003 0308 	and.w	r3, r3, #8
 801a662:	2b00      	cmp	r3, #0
 801a664:	d00a      	beq.n	801a67c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	685b      	ldr	r3, [r3, #4]
 801a66c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	681b      	ldr	r3, [r3, #0]
 801a678:	430a      	orrs	r2, r1
 801a67a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a680:	f003 0310 	and.w	r3, r3, #16
 801a684:	2b00      	cmp	r3, #0
 801a686:	d00a      	beq.n	801a69e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	689b      	ldr	r3, [r3, #8]
 801a68e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	430a      	orrs	r2, r1
 801a69c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a6a2:	f003 0320 	and.w	r3, r3, #32
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d00a      	beq.n	801a6c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	689b      	ldr	r3, [r3, #8]
 801a6b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	430a      	orrs	r2, r1
 801a6be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d01a      	beq.n	801a702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	685b      	ldr	r3, [r3, #4]
 801a6d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	681b      	ldr	r3, [r3, #0]
 801a6de:	430a      	orrs	r2, r1
 801a6e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a6ea:	d10a      	bne.n	801a702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	681b      	ldr	r3, [r3, #0]
 801a6f0:	685b      	ldr	r3, [r3, #4]
 801a6f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	430a      	orrs	r2, r1
 801a700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d00a      	beq.n	801a724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	685b      	ldr	r3, [r3, #4]
 801a714:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	430a      	orrs	r2, r1
 801a722:	605a      	str	r2, [r3, #4]
  }
}
 801a724:	bf00      	nop
 801a726:	370c      	adds	r7, #12
 801a728:	46bd      	mov	sp, r7
 801a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a72e:	4770      	bx	lr

0801a730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801a730:	b580      	push	{r7, lr}
 801a732:	b086      	sub	sp, #24
 801a734:	af02      	add	r7, sp, #8
 801a736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	2200      	movs	r2, #0
 801a73c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801a740:	f7fb ff40 	bl	80165c4 <HAL_GetTick>
 801a744:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	f003 0308 	and.w	r3, r3, #8
 801a750:	2b08      	cmp	r3, #8
 801a752:	d10e      	bne.n	801a772 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801a758:	9300      	str	r3, [sp, #0]
 801a75a:	68fb      	ldr	r3, [r7, #12]
 801a75c:	2200      	movs	r2, #0
 801a75e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a762:	6878      	ldr	r0, [r7, #4]
 801a764:	f000 f832 	bl	801a7cc <UART_WaitOnFlagUntilTimeout>
 801a768:	4603      	mov	r3, r0
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d001      	beq.n	801a772 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a76e:	2303      	movs	r3, #3
 801a770:	e028      	b.n	801a7c4 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	f003 0304 	and.w	r3, r3, #4
 801a77c:	2b04      	cmp	r3, #4
 801a77e:	d10e      	bne.n	801a79e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a780:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801a784:	9300      	str	r3, [sp, #0]
 801a786:	68fb      	ldr	r3, [r7, #12]
 801a788:	2200      	movs	r2, #0
 801a78a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801a78e:	6878      	ldr	r0, [r7, #4]
 801a790:	f000 f81c 	bl	801a7cc <UART_WaitOnFlagUntilTimeout>
 801a794:	4603      	mov	r3, r0
 801a796:	2b00      	cmp	r3, #0
 801a798:	d001      	beq.n	801a79e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a79a:	2303      	movs	r3, #3
 801a79c:	e012      	b.n	801a7c4 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	2220      	movs	r2, #32
 801a7a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	2220      	movs	r2, #32
 801a7aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	2200      	movs	r2, #0
 801a7b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	2200      	movs	r2, #0
 801a7b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	2200      	movs	r2, #0
 801a7be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801a7c2:	2300      	movs	r3, #0
}
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	3710      	adds	r7, #16
 801a7c8:	46bd      	mov	sp, r7
 801a7ca:	bd80      	pop	{r7, pc}

0801a7cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801a7cc:	b580      	push	{r7, lr}
 801a7ce:	b09c      	sub	sp, #112	; 0x70
 801a7d0:	af00      	add	r7, sp, #0
 801a7d2:	60f8      	str	r0, [r7, #12]
 801a7d4:	60b9      	str	r1, [r7, #8]
 801a7d6:	603b      	str	r3, [r7, #0]
 801a7d8:	4613      	mov	r3, r2
 801a7da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a7dc:	e0a9      	b.n	801a932 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a7de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a7e4:	f000 80a5 	beq.w	801a932 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a7e8:	f7fb feec 	bl	80165c4 <HAL_GetTick>
 801a7ec:	4602      	mov	r2, r0
 801a7ee:	683b      	ldr	r3, [r7, #0]
 801a7f0:	1ad3      	subs	r3, r2, r3
 801a7f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801a7f4:	429a      	cmp	r2, r3
 801a7f6:	d302      	bcc.n	801a7fe <UART_WaitOnFlagUntilTimeout+0x32>
 801a7f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	d140      	bne.n	801a880 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801a7fe:	68fb      	ldr	r3, [r7, #12]
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a806:	e853 3f00 	ldrex	r3, [r3]
 801a80a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801a80c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a80e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801a812:	667b      	str	r3, [r7, #100]	; 0x64
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	461a      	mov	r2, r3
 801a81a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a81c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801a81e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a820:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801a822:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a824:	e841 2300 	strex	r3, r2, [r1]
 801a828:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801a82a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d1e6      	bne.n	801a7fe <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a830:	68fb      	ldr	r3, [r7, #12]
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	3308      	adds	r3, #8
 801a836:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a83a:	e853 3f00 	ldrex	r3, [r3]
 801a83e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801a840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a842:	f023 0301 	bic.w	r3, r3, #1
 801a846:	663b      	str	r3, [r7, #96]	; 0x60
 801a848:	68fb      	ldr	r3, [r7, #12]
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	3308      	adds	r3, #8
 801a84e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801a850:	64ba      	str	r2, [r7, #72]	; 0x48
 801a852:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a854:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801a856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a858:	e841 2300 	strex	r3, r2, [r1]
 801a85c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801a85e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a860:	2b00      	cmp	r3, #0
 801a862:	d1e5      	bne.n	801a830 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	2220      	movs	r2, #32
 801a868:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	2220      	movs	r2, #32
 801a870:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 801a874:	68fb      	ldr	r3, [r7, #12]
 801a876:	2200      	movs	r2, #0
 801a878:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 801a87c:	2303      	movs	r3, #3
 801a87e:	e069      	b.n	801a954 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	f003 0304 	and.w	r3, r3, #4
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d051      	beq.n	801a932 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	69db      	ldr	r3, [r3, #28]
 801a894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a89c:	d149      	bne.n	801a932 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a89e:	68fb      	ldr	r3, [r7, #12]
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a8a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801a8a8:	68fb      	ldr	r3, [r7, #12]
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8b0:	e853 3f00 	ldrex	r3, [r3]
 801a8b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801a8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801a8bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	461a      	mov	r2, r3
 801a8c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a8c6:	637b      	str	r3, [r7, #52]	; 0x34
 801a8c8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a8ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a8cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a8ce:	e841 2300 	strex	r3, r2, [r1]
 801a8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801a8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d1e6      	bne.n	801a8a8 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a8da:	68fb      	ldr	r3, [r7, #12]
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	3308      	adds	r3, #8
 801a8e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a8e2:	697b      	ldr	r3, [r7, #20]
 801a8e4:	e853 3f00 	ldrex	r3, [r3]
 801a8e8:	613b      	str	r3, [r7, #16]
   return(result);
 801a8ea:	693b      	ldr	r3, [r7, #16]
 801a8ec:	f023 0301 	bic.w	r3, r3, #1
 801a8f0:	66bb      	str	r3, [r7, #104]	; 0x68
 801a8f2:	68fb      	ldr	r3, [r7, #12]
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	3308      	adds	r3, #8
 801a8f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a8fa:	623a      	str	r2, [r7, #32]
 801a8fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a8fe:	69f9      	ldr	r1, [r7, #28]
 801a900:	6a3a      	ldr	r2, [r7, #32]
 801a902:	e841 2300 	strex	r3, r2, [r1]
 801a906:	61bb      	str	r3, [r7, #24]
   return(result);
 801a908:	69bb      	ldr	r3, [r7, #24]
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d1e5      	bne.n	801a8da <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801a90e:	68fb      	ldr	r3, [r7, #12]
 801a910:	2220      	movs	r2, #32
 801a912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 801a916:	68fb      	ldr	r3, [r7, #12]
 801a918:	2220      	movs	r2, #32
 801a91a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801a91e:	68fb      	ldr	r3, [r7, #12]
 801a920:	2220      	movs	r2, #32
 801a922:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a926:	68fb      	ldr	r3, [r7, #12]
 801a928:	2200      	movs	r2, #0
 801a92a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801a92e:	2303      	movs	r3, #3
 801a930:	e010      	b.n	801a954 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a932:	68fb      	ldr	r3, [r7, #12]
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	69da      	ldr	r2, [r3, #28]
 801a938:	68bb      	ldr	r3, [r7, #8]
 801a93a:	4013      	ands	r3, r2
 801a93c:	68ba      	ldr	r2, [r7, #8]
 801a93e:	429a      	cmp	r2, r3
 801a940:	bf0c      	ite	eq
 801a942:	2301      	moveq	r3, #1
 801a944:	2300      	movne	r3, #0
 801a946:	b2db      	uxtb	r3, r3
 801a948:	461a      	mov	r2, r3
 801a94a:	79fb      	ldrb	r3, [r7, #7]
 801a94c:	429a      	cmp	r2, r3
 801a94e:	f43f af46 	beq.w	801a7de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801a952:	2300      	movs	r3, #0
}
 801a954:	4618      	mov	r0, r3
 801a956:	3770      	adds	r7, #112	; 0x70
 801a958:	46bd      	mov	sp, r7
 801a95a:	bd80      	pop	{r7, pc}

0801a95c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a95c:	b480      	push	{r7}
 801a95e:	b085      	sub	sp, #20
 801a960:	af00      	add	r7, sp, #0
 801a962:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801a96a:	2b01      	cmp	r3, #1
 801a96c:	d101      	bne.n	801a972 <HAL_UARTEx_DisableFifoMode+0x16>
 801a96e:	2302      	movs	r3, #2
 801a970:	e027      	b.n	801a9c2 <HAL_UARTEx_DisableFifoMode+0x66>
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	2201      	movs	r2, #1
 801a976:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	2224      	movs	r2, #36	; 0x24
 801a97e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	681a      	ldr	r2, [r3, #0]
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	f022 0201 	bic.w	r2, r2, #1
 801a998:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a99a:	68fb      	ldr	r3, [r7, #12]
 801a99c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801a9a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	2200      	movs	r2, #0
 801a9a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	68fa      	ldr	r2, [r7, #12]
 801a9ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	2220      	movs	r2, #32
 801a9b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801a9c0:	2300      	movs	r3, #0
}
 801a9c2:	4618      	mov	r0, r3
 801a9c4:	3714      	adds	r7, #20
 801a9c6:	46bd      	mov	sp, r7
 801a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9cc:	4770      	bx	lr

0801a9ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a9ce:	b580      	push	{r7, lr}
 801a9d0:	b084      	sub	sp, #16
 801a9d2:	af00      	add	r7, sp, #0
 801a9d4:	6078      	str	r0, [r7, #4]
 801a9d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801a9de:	2b01      	cmp	r3, #1
 801a9e0:	d101      	bne.n	801a9e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a9e2:	2302      	movs	r3, #2
 801a9e4:	e02d      	b.n	801aa42 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	2201      	movs	r2, #1
 801a9ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	2224      	movs	r2, #36	; 0x24
 801a9f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	681a      	ldr	r2, [r3, #0]
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	f022 0201 	bic.w	r2, r2, #1
 801aa0c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	689b      	ldr	r3, [r3, #8]
 801aa14:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	683a      	ldr	r2, [r7, #0]
 801aa1e:	430a      	orrs	r2, r1
 801aa20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801aa22:	6878      	ldr	r0, [r7, #4]
 801aa24:	f000 f850 	bl	801aac8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	68fa      	ldr	r2, [r7, #12]
 801aa2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	2220      	movs	r2, #32
 801aa34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	2200      	movs	r2, #0
 801aa3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801aa40:	2300      	movs	r3, #0
}
 801aa42:	4618      	mov	r0, r3
 801aa44:	3710      	adds	r7, #16
 801aa46:	46bd      	mov	sp, r7
 801aa48:	bd80      	pop	{r7, pc}

0801aa4a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801aa4a:	b580      	push	{r7, lr}
 801aa4c:	b084      	sub	sp, #16
 801aa4e:	af00      	add	r7, sp, #0
 801aa50:	6078      	str	r0, [r7, #4]
 801aa52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801aa5a:	2b01      	cmp	r3, #1
 801aa5c:	d101      	bne.n	801aa62 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801aa5e:	2302      	movs	r3, #2
 801aa60:	e02d      	b.n	801aabe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	2201      	movs	r2, #1
 801aa66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	2224      	movs	r2, #36	; 0x24
 801aa6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	681b      	ldr	r3, [r3, #0]
 801aa78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	681a      	ldr	r2, [r3, #0]
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	f022 0201 	bic.w	r2, r2, #1
 801aa88:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	689b      	ldr	r3, [r3, #8]
 801aa90:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	681b      	ldr	r3, [r3, #0]
 801aa98:	683a      	ldr	r2, [r7, #0]
 801aa9a:	430a      	orrs	r2, r1
 801aa9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801aa9e:	6878      	ldr	r0, [r7, #4]
 801aaa0:	f000 f812 	bl	801aac8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	68fa      	ldr	r2, [r7, #12]
 801aaaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	2220      	movs	r2, #32
 801aab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	2200      	movs	r2, #0
 801aab8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801aabc:	2300      	movs	r3, #0
}
 801aabe:	4618      	mov	r0, r3
 801aac0:	3710      	adds	r7, #16
 801aac2:	46bd      	mov	sp, r7
 801aac4:	bd80      	pop	{r7, pc}
	...

0801aac8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801aac8:	b480      	push	{r7}
 801aaca:	b085      	sub	sp, #20
 801aacc:	af00      	add	r7, sp, #0
 801aace:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d108      	bne.n	801aaea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	2201      	movs	r2, #1
 801aadc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	2201      	movs	r2, #1
 801aae4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801aae8:	e031      	b.n	801ab4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801aaea:	2308      	movs	r3, #8
 801aaec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801aaee:	2308      	movs	r3, #8
 801aaf0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	689b      	ldr	r3, [r3, #8]
 801aaf8:	0e5b      	lsrs	r3, r3, #25
 801aafa:	b2db      	uxtb	r3, r3
 801aafc:	f003 0307 	and.w	r3, r3, #7
 801ab00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	681b      	ldr	r3, [r3, #0]
 801ab06:	689b      	ldr	r3, [r3, #8]
 801ab08:	0f5b      	lsrs	r3, r3, #29
 801ab0a:	b2db      	uxtb	r3, r3
 801ab0c:	f003 0307 	and.w	r3, r3, #7
 801ab10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ab12:	7bbb      	ldrb	r3, [r7, #14]
 801ab14:	7b3a      	ldrb	r2, [r7, #12]
 801ab16:	4911      	ldr	r1, [pc, #68]	; (801ab5c <UARTEx_SetNbDataToProcess+0x94>)
 801ab18:	5c8a      	ldrb	r2, [r1, r2]
 801ab1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801ab1e:	7b3a      	ldrb	r2, [r7, #12]
 801ab20:	490f      	ldr	r1, [pc, #60]	; (801ab60 <UARTEx_SetNbDataToProcess+0x98>)
 801ab22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ab24:	fb93 f3f2 	sdiv	r3, r3, r2
 801ab28:	b29a      	uxth	r2, r3
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ab30:	7bfb      	ldrb	r3, [r7, #15]
 801ab32:	7b7a      	ldrb	r2, [r7, #13]
 801ab34:	4909      	ldr	r1, [pc, #36]	; (801ab5c <UARTEx_SetNbDataToProcess+0x94>)
 801ab36:	5c8a      	ldrb	r2, [r1, r2]
 801ab38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801ab3c:	7b7a      	ldrb	r2, [r7, #13]
 801ab3e:	4908      	ldr	r1, [pc, #32]	; (801ab60 <UARTEx_SetNbDataToProcess+0x98>)
 801ab40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ab42:	fb93 f3f2 	sdiv	r3, r3, r2
 801ab46:	b29a      	uxth	r2, r3
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801ab4e:	bf00      	nop
 801ab50:	3714      	adds	r7, #20
 801ab52:	46bd      	mov	sp, r7
 801ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab58:	4770      	bx	lr
 801ab5a:	bf00      	nop
 801ab5c:	0801dd50 	.word	0x0801dd50
 801ab60:	0801dd58 	.word	0x0801dd58

0801ab64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801ab64:	b480      	push	{r7}
 801ab66:	b085      	sub	sp, #20
 801ab68:	af00      	add	r7, sp, #0
 801ab6a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801ab6c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801ab70:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801ab78:	b29a      	uxth	r2, r3
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	b29b      	uxth	r3, r3
 801ab7e:	43db      	mvns	r3, r3
 801ab80:	b29b      	uxth	r3, r3
 801ab82:	4013      	ands	r3, r2
 801ab84:	b29a      	uxth	r2, r3
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801ab8c:	2300      	movs	r3, #0
}
 801ab8e:	4618      	mov	r0, r3
 801ab90:	3714      	adds	r7, #20
 801ab92:	46bd      	mov	sp, r7
 801ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab98:	4770      	bx	lr

0801ab9a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801ab9a:	b084      	sub	sp, #16
 801ab9c:	b480      	push	{r7}
 801ab9e:	b083      	sub	sp, #12
 801aba0:	af00      	add	r7, sp, #0
 801aba2:	6078      	str	r0, [r7, #4]
 801aba4:	f107 0014 	add.w	r0, r7, #20
 801aba8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	2201      	movs	r2, #1
 801abb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	2200      	movs	r2, #0
 801abb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	2200      	movs	r2, #0
 801abc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	2200      	movs	r2, #0
 801abc8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801abcc:	2300      	movs	r3, #0
}
 801abce:	4618      	mov	r0, r3
 801abd0:	370c      	adds	r7, #12
 801abd2:	46bd      	mov	sp, r7
 801abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abd8:	b004      	add	sp, #16
 801abda:	4770      	bx	lr

0801abdc <__errno>:
 801abdc:	4b01      	ldr	r3, [pc, #4]	; (801abe4 <__errno+0x8>)
 801abde:	6818      	ldr	r0, [r3, #0]
 801abe0:	4770      	bx	lr
 801abe2:	bf00      	nop
 801abe4:	20000078 	.word	0x20000078

0801abe8 <__libc_init_array>:
 801abe8:	b570      	push	{r4, r5, r6, lr}
 801abea:	4d0d      	ldr	r5, [pc, #52]	; (801ac20 <__libc_init_array+0x38>)
 801abec:	4c0d      	ldr	r4, [pc, #52]	; (801ac24 <__libc_init_array+0x3c>)
 801abee:	1b64      	subs	r4, r4, r5
 801abf0:	10a4      	asrs	r4, r4, #2
 801abf2:	2600      	movs	r6, #0
 801abf4:	42a6      	cmp	r6, r4
 801abf6:	d109      	bne.n	801ac0c <__libc_init_array+0x24>
 801abf8:	4d0b      	ldr	r5, [pc, #44]	; (801ac28 <__libc_init_array+0x40>)
 801abfa:	4c0c      	ldr	r4, [pc, #48]	; (801ac2c <__libc_init_array+0x44>)
 801abfc:	f002 fe34 	bl	801d868 <_init>
 801ac00:	1b64      	subs	r4, r4, r5
 801ac02:	10a4      	asrs	r4, r4, #2
 801ac04:	2600      	movs	r6, #0
 801ac06:	42a6      	cmp	r6, r4
 801ac08:	d105      	bne.n	801ac16 <__libc_init_array+0x2e>
 801ac0a:	bd70      	pop	{r4, r5, r6, pc}
 801ac0c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ac10:	4798      	blx	r3
 801ac12:	3601      	adds	r6, #1
 801ac14:	e7ee      	b.n	801abf4 <__libc_init_array+0xc>
 801ac16:	f855 3b04 	ldr.w	r3, [r5], #4
 801ac1a:	4798      	blx	r3
 801ac1c:	3601      	adds	r6, #1
 801ac1e:	e7f2      	b.n	801ac06 <__libc_init_array+0x1e>
 801ac20:	0801e144 	.word	0x0801e144
 801ac24:	0801e144 	.word	0x0801e144
 801ac28:	0801e144 	.word	0x0801e144
 801ac2c:	0801e148 	.word	0x0801e148

0801ac30 <memcpy>:
 801ac30:	440a      	add	r2, r1
 801ac32:	4291      	cmp	r1, r2
 801ac34:	f100 33ff 	add.w	r3, r0, #4294967295
 801ac38:	d100      	bne.n	801ac3c <memcpy+0xc>
 801ac3a:	4770      	bx	lr
 801ac3c:	b510      	push	{r4, lr}
 801ac3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ac42:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ac46:	4291      	cmp	r1, r2
 801ac48:	d1f9      	bne.n	801ac3e <memcpy+0xe>
 801ac4a:	bd10      	pop	{r4, pc}

0801ac4c <memset>:
 801ac4c:	4402      	add	r2, r0
 801ac4e:	4603      	mov	r3, r0
 801ac50:	4293      	cmp	r3, r2
 801ac52:	d100      	bne.n	801ac56 <memset+0xa>
 801ac54:	4770      	bx	lr
 801ac56:	f803 1b01 	strb.w	r1, [r3], #1
 801ac5a:	e7f9      	b.n	801ac50 <memset+0x4>

0801ac5c <__cvt>:
 801ac5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ac60:	ec55 4b10 	vmov	r4, r5, d0
 801ac64:	2d00      	cmp	r5, #0
 801ac66:	460e      	mov	r6, r1
 801ac68:	4619      	mov	r1, r3
 801ac6a:	462b      	mov	r3, r5
 801ac6c:	bfbb      	ittet	lt
 801ac6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801ac72:	461d      	movlt	r5, r3
 801ac74:	2300      	movge	r3, #0
 801ac76:	232d      	movlt	r3, #45	; 0x2d
 801ac78:	700b      	strb	r3, [r1, #0]
 801ac7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801ac80:	4691      	mov	r9, r2
 801ac82:	f023 0820 	bic.w	r8, r3, #32
 801ac86:	bfbc      	itt	lt
 801ac88:	4622      	movlt	r2, r4
 801ac8a:	4614      	movlt	r4, r2
 801ac8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ac90:	d005      	beq.n	801ac9e <__cvt+0x42>
 801ac92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801ac96:	d100      	bne.n	801ac9a <__cvt+0x3e>
 801ac98:	3601      	adds	r6, #1
 801ac9a:	2102      	movs	r1, #2
 801ac9c:	e000      	b.n	801aca0 <__cvt+0x44>
 801ac9e:	2103      	movs	r1, #3
 801aca0:	ab03      	add	r3, sp, #12
 801aca2:	9301      	str	r3, [sp, #4]
 801aca4:	ab02      	add	r3, sp, #8
 801aca6:	9300      	str	r3, [sp, #0]
 801aca8:	ec45 4b10 	vmov	d0, r4, r5
 801acac:	4653      	mov	r3, sl
 801acae:	4632      	mov	r2, r6
 801acb0:	f000 fe42 	bl	801b938 <_dtoa_r>
 801acb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801acb8:	4607      	mov	r7, r0
 801acba:	d102      	bne.n	801acc2 <__cvt+0x66>
 801acbc:	f019 0f01 	tst.w	r9, #1
 801acc0:	d022      	beq.n	801ad08 <__cvt+0xac>
 801acc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801acc6:	eb07 0906 	add.w	r9, r7, r6
 801acca:	d110      	bne.n	801acee <__cvt+0x92>
 801accc:	783b      	ldrb	r3, [r7, #0]
 801acce:	2b30      	cmp	r3, #48	; 0x30
 801acd0:	d10a      	bne.n	801ace8 <__cvt+0x8c>
 801acd2:	2200      	movs	r2, #0
 801acd4:	2300      	movs	r3, #0
 801acd6:	4620      	mov	r0, r4
 801acd8:	4629      	mov	r1, r5
 801acda:	f7e5 fecd 	bl	8000a78 <__aeabi_dcmpeq>
 801acde:	b918      	cbnz	r0, 801ace8 <__cvt+0x8c>
 801ace0:	f1c6 0601 	rsb	r6, r6, #1
 801ace4:	f8ca 6000 	str.w	r6, [sl]
 801ace8:	f8da 3000 	ldr.w	r3, [sl]
 801acec:	4499      	add	r9, r3
 801acee:	2200      	movs	r2, #0
 801acf0:	2300      	movs	r3, #0
 801acf2:	4620      	mov	r0, r4
 801acf4:	4629      	mov	r1, r5
 801acf6:	f7e5 febf 	bl	8000a78 <__aeabi_dcmpeq>
 801acfa:	b108      	cbz	r0, 801ad00 <__cvt+0xa4>
 801acfc:	f8cd 900c 	str.w	r9, [sp, #12]
 801ad00:	2230      	movs	r2, #48	; 0x30
 801ad02:	9b03      	ldr	r3, [sp, #12]
 801ad04:	454b      	cmp	r3, r9
 801ad06:	d307      	bcc.n	801ad18 <__cvt+0xbc>
 801ad08:	9b03      	ldr	r3, [sp, #12]
 801ad0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ad0c:	1bdb      	subs	r3, r3, r7
 801ad0e:	4638      	mov	r0, r7
 801ad10:	6013      	str	r3, [r2, #0]
 801ad12:	b004      	add	sp, #16
 801ad14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad18:	1c59      	adds	r1, r3, #1
 801ad1a:	9103      	str	r1, [sp, #12]
 801ad1c:	701a      	strb	r2, [r3, #0]
 801ad1e:	e7f0      	b.n	801ad02 <__cvt+0xa6>

0801ad20 <__exponent>:
 801ad20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ad22:	4603      	mov	r3, r0
 801ad24:	2900      	cmp	r1, #0
 801ad26:	bfb8      	it	lt
 801ad28:	4249      	neglt	r1, r1
 801ad2a:	f803 2b02 	strb.w	r2, [r3], #2
 801ad2e:	bfb4      	ite	lt
 801ad30:	222d      	movlt	r2, #45	; 0x2d
 801ad32:	222b      	movge	r2, #43	; 0x2b
 801ad34:	2909      	cmp	r1, #9
 801ad36:	7042      	strb	r2, [r0, #1]
 801ad38:	dd2a      	ble.n	801ad90 <__exponent+0x70>
 801ad3a:	f10d 0407 	add.w	r4, sp, #7
 801ad3e:	46a4      	mov	ip, r4
 801ad40:	270a      	movs	r7, #10
 801ad42:	46a6      	mov	lr, r4
 801ad44:	460a      	mov	r2, r1
 801ad46:	fb91 f6f7 	sdiv	r6, r1, r7
 801ad4a:	fb07 1516 	mls	r5, r7, r6, r1
 801ad4e:	3530      	adds	r5, #48	; 0x30
 801ad50:	2a63      	cmp	r2, #99	; 0x63
 801ad52:	f104 34ff 	add.w	r4, r4, #4294967295
 801ad56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ad5a:	4631      	mov	r1, r6
 801ad5c:	dcf1      	bgt.n	801ad42 <__exponent+0x22>
 801ad5e:	3130      	adds	r1, #48	; 0x30
 801ad60:	f1ae 0502 	sub.w	r5, lr, #2
 801ad64:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ad68:	1c44      	adds	r4, r0, #1
 801ad6a:	4629      	mov	r1, r5
 801ad6c:	4561      	cmp	r1, ip
 801ad6e:	d30a      	bcc.n	801ad86 <__exponent+0x66>
 801ad70:	f10d 0209 	add.w	r2, sp, #9
 801ad74:	eba2 020e 	sub.w	r2, r2, lr
 801ad78:	4565      	cmp	r5, ip
 801ad7a:	bf88      	it	hi
 801ad7c:	2200      	movhi	r2, #0
 801ad7e:	4413      	add	r3, r2
 801ad80:	1a18      	subs	r0, r3, r0
 801ad82:	b003      	add	sp, #12
 801ad84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad86:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ad8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801ad8e:	e7ed      	b.n	801ad6c <__exponent+0x4c>
 801ad90:	2330      	movs	r3, #48	; 0x30
 801ad92:	3130      	adds	r1, #48	; 0x30
 801ad94:	7083      	strb	r3, [r0, #2]
 801ad96:	70c1      	strb	r1, [r0, #3]
 801ad98:	1d03      	adds	r3, r0, #4
 801ad9a:	e7f1      	b.n	801ad80 <__exponent+0x60>

0801ad9c <_printf_float>:
 801ad9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ada0:	ed2d 8b02 	vpush	{d8}
 801ada4:	b08d      	sub	sp, #52	; 0x34
 801ada6:	460c      	mov	r4, r1
 801ada8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801adac:	4616      	mov	r6, r2
 801adae:	461f      	mov	r7, r3
 801adb0:	4605      	mov	r5, r0
 801adb2:	f001 fd67 	bl	801c884 <_localeconv_r>
 801adb6:	f8d0 a000 	ldr.w	sl, [r0]
 801adba:	4650      	mov	r0, sl
 801adbc:	f7e5 f9e0 	bl	8000180 <strlen>
 801adc0:	2300      	movs	r3, #0
 801adc2:	930a      	str	r3, [sp, #40]	; 0x28
 801adc4:	6823      	ldr	r3, [r4, #0]
 801adc6:	9305      	str	r3, [sp, #20]
 801adc8:	f8d8 3000 	ldr.w	r3, [r8]
 801adcc:	f894 b018 	ldrb.w	fp, [r4, #24]
 801add0:	3307      	adds	r3, #7
 801add2:	f023 0307 	bic.w	r3, r3, #7
 801add6:	f103 0208 	add.w	r2, r3, #8
 801adda:	f8c8 2000 	str.w	r2, [r8]
 801adde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ade2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801ade6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801adea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801adee:	9307      	str	r3, [sp, #28]
 801adf0:	f8cd 8018 	str.w	r8, [sp, #24]
 801adf4:	ee08 0a10 	vmov	s16, r0
 801adf8:	4b9f      	ldr	r3, [pc, #636]	; (801b078 <_printf_float+0x2dc>)
 801adfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801adfe:	f04f 32ff 	mov.w	r2, #4294967295
 801ae02:	f7e5 fe6b 	bl	8000adc <__aeabi_dcmpun>
 801ae06:	bb88      	cbnz	r0, 801ae6c <_printf_float+0xd0>
 801ae08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ae0c:	4b9a      	ldr	r3, [pc, #616]	; (801b078 <_printf_float+0x2dc>)
 801ae0e:	f04f 32ff 	mov.w	r2, #4294967295
 801ae12:	f7e5 fe45 	bl	8000aa0 <__aeabi_dcmple>
 801ae16:	bb48      	cbnz	r0, 801ae6c <_printf_float+0xd0>
 801ae18:	2200      	movs	r2, #0
 801ae1a:	2300      	movs	r3, #0
 801ae1c:	4640      	mov	r0, r8
 801ae1e:	4649      	mov	r1, r9
 801ae20:	f7e5 fe34 	bl	8000a8c <__aeabi_dcmplt>
 801ae24:	b110      	cbz	r0, 801ae2c <_printf_float+0x90>
 801ae26:	232d      	movs	r3, #45	; 0x2d
 801ae28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ae2c:	4b93      	ldr	r3, [pc, #588]	; (801b07c <_printf_float+0x2e0>)
 801ae2e:	4894      	ldr	r0, [pc, #592]	; (801b080 <_printf_float+0x2e4>)
 801ae30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801ae34:	bf94      	ite	ls
 801ae36:	4698      	movls	r8, r3
 801ae38:	4680      	movhi	r8, r0
 801ae3a:	2303      	movs	r3, #3
 801ae3c:	6123      	str	r3, [r4, #16]
 801ae3e:	9b05      	ldr	r3, [sp, #20]
 801ae40:	f023 0204 	bic.w	r2, r3, #4
 801ae44:	6022      	str	r2, [r4, #0]
 801ae46:	f04f 0900 	mov.w	r9, #0
 801ae4a:	9700      	str	r7, [sp, #0]
 801ae4c:	4633      	mov	r3, r6
 801ae4e:	aa0b      	add	r2, sp, #44	; 0x2c
 801ae50:	4621      	mov	r1, r4
 801ae52:	4628      	mov	r0, r5
 801ae54:	f000 f9d8 	bl	801b208 <_printf_common>
 801ae58:	3001      	adds	r0, #1
 801ae5a:	f040 8090 	bne.w	801af7e <_printf_float+0x1e2>
 801ae5e:	f04f 30ff 	mov.w	r0, #4294967295
 801ae62:	b00d      	add	sp, #52	; 0x34
 801ae64:	ecbd 8b02 	vpop	{d8}
 801ae68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae6c:	4642      	mov	r2, r8
 801ae6e:	464b      	mov	r3, r9
 801ae70:	4640      	mov	r0, r8
 801ae72:	4649      	mov	r1, r9
 801ae74:	f7e5 fe32 	bl	8000adc <__aeabi_dcmpun>
 801ae78:	b140      	cbz	r0, 801ae8c <_printf_float+0xf0>
 801ae7a:	464b      	mov	r3, r9
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	bfbc      	itt	lt
 801ae80:	232d      	movlt	r3, #45	; 0x2d
 801ae82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801ae86:	487f      	ldr	r0, [pc, #508]	; (801b084 <_printf_float+0x2e8>)
 801ae88:	4b7f      	ldr	r3, [pc, #508]	; (801b088 <_printf_float+0x2ec>)
 801ae8a:	e7d1      	b.n	801ae30 <_printf_float+0x94>
 801ae8c:	6863      	ldr	r3, [r4, #4]
 801ae8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801ae92:	9206      	str	r2, [sp, #24]
 801ae94:	1c5a      	adds	r2, r3, #1
 801ae96:	d13f      	bne.n	801af18 <_printf_float+0x17c>
 801ae98:	2306      	movs	r3, #6
 801ae9a:	6063      	str	r3, [r4, #4]
 801ae9c:	9b05      	ldr	r3, [sp, #20]
 801ae9e:	6861      	ldr	r1, [r4, #4]
 801aea0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801aea4:	2300      	movs	r3, #0
 801aea6:	9303      	str	r3, [sp, #12]
 801aea8:	ab0a      	add	r3, sp, #40	; 0x28
 801aeaa:	e9cd b301 	strd	fp, r3, [sp, #4]
 801aeae:	ab09      	add	r3, sp, #36	; 0x24
 801aeb0:	ec49 8b10 	vmov	d0, r8, r9
 801aeb4:	9300      	str	r3, [sp, #0]
 801aeb6:	6022      	str	r2, [r4, #0]
 801aeb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801aebc:	4628      	mov	r0, r5
 801aebe:	f7ff fecd 	bl	801ac5c <__cvt>
 801aec2:	9b06      	ldr	r3, [sp, #24]
 801aec4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aec6:	2b47      	cmp	r3, #71	; 0x47
 801aec8:	4680      	mov	r8, r0
 801aeca:	d108      	bne.n	801aede <_printf_float+0x142>
 801aecc:	1cc8      	adds	r0, r1, #3
 801aece:	db02      	blt.n	801aed6 <_printf_float+0x13a>
 801aed0:	6863      	ldr	r3, [r4, #4]
 801aed2:	4299      	cmp	r1, r3
 801aed4:	dd41      	ble.n	801af5a <_printf_float+0x1be>
 801aed6:	f1ab 0b02 	sub.w	fp, fp, #2
 801aeda:	fa5f fb8b 	uxtb.w	fp, fp
 801aede:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801aee2:	d820      	bhi.n	801af26 <_printf_float+0x18a>
 801aee4:	3901      	subs	r1, #1
 801aee6:	465a      	mov	r2, fp
 801aee8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801aeec:	9109      	str	r1, [sp, #36]	; 0x24
 801aeee:	f7ff ff17 	bl	801ad20 <__exponent>
 801aef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aef4:	1813      	adds	r3, r2, r0
 801aef6:	2a01      	cmp	r2, #1
 801aef8:	4681      	mov	r9, r0
 801aefa:	6123      	str	r3, [r4, #16]
 801aefc:	dc02      	bgt.n	801af04 <_printf_float+0x168>
 801aefe:	6822      	ldr	r2, [r4, #0]
 801af00:	07d2      	lsls	r2, r2, #31
 801af02:	d501      	bpl.n	801af08 <_printf_float+0x16c>
 801af04:	3301      	adds	r3, #1
 801af06:	6123      	str	r3, [r4, #16]
 801af08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	d09c      	beq.n	801ae4a <_printf_float+0xae>
 801af10:	232d      	movs	r3, #45	; 0x2d
 801af12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af16:	e798      	b.n	801ae4a <_printf_float+0xae>
 801af18:	9a06      	ldr	r2, [sp, #24]
 801af1a:	2a47      	cmp	r2, #71	; 0x47
 801af1c:	d1be      	bne.n	801ae9c <_printf_float+0x100>
 801af1e:	2b00      	cmp	r3, #0
 801af20:	d1bc      	bne.n	801ae9c <_printf_float+0x100>
 801af22:	2301      	movs	r3, #1
 801af24:	e7b9      	b.n	801ae9a <_printf_float+0xfe>
 801af26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801af2a:	d118      	bne.n	801af5e <_printf_float+0x1c2>
 801af2c:	2900      	cmp	r1, #0
 801af2e:	6863      	ldr	r3, [r4, #4]
 801af30:	dd0b      	ble.n	801af4a <_printf_float+0x1ae>
 801af32:	6121      	str	r1, [r4, #16]
 801af34:	b913      	cbnz	r3, 801af3c <_printf_float+0x1a0>
 801af36:	6822      	ldr	r2, [r4, #0]
 801af38:	07d0      	lsls	r0, r2, #31
 801af3a:	d502      	bpl.n	801af42 <_printf_float+0x1a6>
 801af3c:	3301      	adds	r3, #1
 801af3e:	440b      	add	r3, r1
 801af40:	6123      	str	r3, [r4, #16]
 801af42:	65a1      	str	r1, [r4, #88]	; 0x58
 801af44:	f04f 0900 	mov.w	r9, #0
 801af48:	e7de      	b.n	801af08 <_printf_float+0x16c>
 801af4a:	b913      	cbnz	r3, 801af52 <_printf_float+0x1b6>
 801af4c:	6822      	ldr	r2, [r4, #0]
 801af4e:	07d2      	lsls	r2, r2, #31
 801af50:	d501      	bpl.n	801af56 <_printf_float+0x1ba>
 801af52:	3302      	adds	r3, #2
 801af54:	e7f4      	b.n	801af40 <_printf_float+0x1a4>
 801af56:	2301      	movs	r3, #1
 801af58:	e7f2      	b.n	801af40 <_printf_float+0x1a4>
 801af5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801af5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af60:	4299      	cmp	r1, r3
 801af62:	db05      	blt.n	801af70 <_printf_float+0x1d4>
 801af64:	6823      	ldr	r3, [r4, #0]
 801af66:	6121      	str	r1, [r4, #16]
 801af68:	07d8      	lsls	r0, r3, #31
 801af6a:	d5ea      	bpl.n	801af42 <_printf_float+0x1a6>
 801af6c:	1c4b      	adds	r3, r1, #1
 801af6e:	e7e7      	b.n	801af40 <_printf_float+0x1a4>
 801af70:	2900      	cmp	r1, #0
 801af72:	bfd4      	ite	le
 801af74:	f1c1 0202 	rsble	r2, r1, #2
 801af78:	2201      	movgt	r2, #1
 801af7a:	4413      	add	r3, r2
 801af7c:	e7e0      	b.n	801af40 <_printf_float+0x1a4>
 801af7e:	6823      	ldr	r3, [r4, #0]
 801af80:	055a      	lsls	r2, r3, #21
 801af82:	d407      	bmi.n	801af94 <_printf_float+0x1f8>
 801af84:	6923      	ldr	r3, [r4, #16]
 801af86:	4642      	mov	r2, r8
 801af88:	4631      	mov	r1, r6
 801af8a:	4628      	mov	r0, r5
 801af8c:	47b8      	blx	r7
 801af8e:	3001      	adds	r0, #1
 801af90:	d12c      	bne.n	801afec <_printf_float+0x250>
 801af92:	e764      	b.n	801ae5e <_printf_float+0xc2>
 801af94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801af98:	f240 80e0 	bls.w	801b15c <_printf_float+0x3c0>
 801af9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801afa0:	2200      	movs	r2, #0
 801afa2:	2300      	movs	r3, #0
 801afa4:	f7e5 fd68 	bl	8000a78 <__aeabi_dcmpeq>
 801afa8:	2800      	cmp	r0, #0
 801afaa:	d034      	beq.n	801b016 <_printf_float+0x27a>
 801afac:	4a37      	ldr	r2, [pc, #220]	; (801b08c <_printf_float+0x2f0>)
 801afae:	2301      	movs	r3, #1
 801afb0:	4631      	mov	r1, r6
 801afb2:	4628      	mov	r0, r5
 801afb4:	47b8      	blx	r7
 801afb6:	3001      	adds	r0, #1
 801afb8:	f43f af51 	beq.w	801ae5e <_printf_float+0xc2>
 801afbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801afc0:	429a      	cmp	r2, r3
 801afc2:	db02      	blt.n	801afca <_printf_float+0x22e>
 801afc4:	6823      	ldr	r3, [r4, #0]
 801afc6:	07d8      	lsls	r0, r3, #31
 801afc8:	d510      	bpl.n	801afec <_printf_float+0x250>
 801afca:	ee18 3a10 	vmov	r3, s16
 801afce:	4652      	mov	r2, sl
 801afd0:	4631      	mov	r1, r6
 801afd2:	4628      	mov	r0, r5
 801afd4:	47b8      	blx	r7
 801afd6:	3001      	adds	r0, #1
 801afd8:	f43f af41 	beq.w	801ae5e <_printf_float+0xc2>
 801afdc:	f04f 0800 	mov.w	r8, #0
 801afe0:	f104 091a 	add.w	r9, r4, #26
 801afe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801afe6:	3b01      	subs	r3, #1
 801afe8:	4543      	cmp	r3, r8
 801afea:	dc09      	bgt.n	801b000 <_printf_float+0x264>
 801afec:	6823      	ldr	r3, [r4, #0]
 801afee:	079b      	lsls	r3, r3, #30
 801aff0:	f100 8105 	bmi.w	801b1fe <_printf_float+0x462>
 801aff4:	68e0      	ldr	r0, [r4, #12]
 801aff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aff8:	4298      	cmp	r0, r3
 801affa:	bfb8      	it	lt
 801affc:	4618      	movlt	r0, r3
 801affe:	e730      	b.n	801ae62 <_printf_float+0xc6>
 801b000:	2301      	movs	r3, #1
 801b002:	464a      	mov	r2, r9
 801b004:	4631      	mov	r1, r6
 801b006:	4628      	mov	r0, r5
 801b008:	47b8      	blx	r7
 801b00a:	3001      	adds	r0, #1
 801b00c:	f43f af27 	beq.w	801ae5e <_printf_float+0xc2>
 801b010:	f108 0801 	add.w	r8, r8, #1
 801b014:	e7e6      	b.n	801afe4 <_printf_float+0x248>
 801b016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b018:	2b00      	cmp	r3, #0
 801b01a:	dc39      	bgt.n	801b090 <_printf_float+0x2f4>
 801b01c:	4a1b      	ldr	r2, [pc, #108]	; (801b08c <_printf_float+0x2f0>)
 801b01e:	2301      	movs	r3, #1
 801b020:	4631      	mov	r1, r6
 801b022:	4628      	mov	r0, r5
 801b024:	47b8      	blx	r7
 801b026:	3001      	adds	r0, #1
 801b028:	f43f af19 	beq.w	801ae5e <_printf_float+0xc2>
 801b02c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b030:	4313      	orrs	r3, r2
 801b032:	d102      	bne.n	801b03a <_printf_float+0x29e>
 801b034:	6823      	ldr	r3, [r4, #0]
 801b036:	07d9      	lsls	r1, r3, #31
 801b038:	d5d8      	bpl.n	801afec <_printf_float+0x250>
 801b03a:	ee18 3a10 	vmov	r3, s16
 801b03e:	4652      	mov	r2, sl
 801b040:	4631      	mov	r1, r6
 801b042:	4628      	mov	r0, r5
 801b044:	47b8      	blx	r7
 801b046:	3001      	adds	r0, #1
 801b048:	f43f af09 	beq.w	801ae5e <_printf_float+0xc2>
 801b04c:	f04f 0900 	mov.w	r9, #0
 801b050:	f104 0a1a 	add.w	sl, r4, #26
 801b054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b056:	425b      	negs	r3, r3
 801b058:	454b      	cmp	r3, r9
 801b05a:	dc01      	bgt.n	801b060 <_printf_float+0x2c4>
 801b05c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b05e:	e792      	b.n	801af86 <_printf_float+0x1ea>
 801b060:	2301      	movs	r3, #1
 801b062:	4652      	mov	r2, sl
 801b064:	4631      	mov	r1, r6
 801b066:	4628      	mov	r0, r5
 801b068:	47b8      	blx	r7
 801b06a:	3001      	adds	r0, #1
 801b06c:	f43f aef7 	beq.w	801ae5e <_printf_float+0xc2>
 801b070:	f109 0901 	add.w	r9, r9, #1
 801b074:	e7ee      	b.n	801b054 <_printf_float+0x2b8>
 801b076:	bf00      	nop
 801b078:	7fefffff 	.word	0x7fefffff
 801b07c:	0801dd64 	.word	0x0801dd64
 801b080:	0801dd68 	.word	0x0801dd68
 801b084:	0801dd70 	.word	0x0801dd70
 801b088:	0801dd6c 	.word	0x0801dd6c
 801b08c:	0801dd74 	.word	0x0801dd74
 801b090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b092:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b094:	429a      	cmp	r2, r3
 801b096:	bfa8      	it	ge
 801b098:	461a      	movge	r2, r3
 801b09a:	2a00      	cmp	r2, #0
 801b09c:	4691      	mov	r9, r2
 801b09e:	dc37      	bgt.n	801b110 <_printf_float+0x374>
 801b0a0:	f04f 0b00 	mov.w	fp, #0
 801b0a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b0a8:	f104 021a 	add.w	r2, r4, #26
 801b0ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b0ae:	9305      	str	r3, [sp, #20]
 801b0b0:	eba3 0309 	sub.w	r3, r3, r9
 801b0b4:	455b      	cmp	r3, fp
 801b0b6:	dc33      	bgt.n	801b120 <_printf_float+0x384>
 801b0b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b0bc:	429a      	cmp	r2, r3
 801b0be:	db3b      	blt.n	801b138 <_printf_float+0x39c>
 801b0c0:	6823      	ldr	r3, [r4, #0]
 801b0c2:	07da      	lsls	r2, r3, #31
 801b0c4:	d438      	bmi.n	801b138 <_printf_float+0x39c>
 801b0c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b0c8:	9a05      	ldr	r2, [sp, #20]
 801b0ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b0cc:	1a9a      	subs	r2, r3, r2
 801b0ce:	eba3 0901 	sub.w	r9, r3, r1
 801b0d2:	4591      	cmp	r9, r2
 801b0d4:	bfa8      	it	ge
 801b0d6:	4691      	movge	r9, r2
 801b0d8:	f1b9 0f00 	cmp.w	r9, #0
 801b0dc:	dc35      	bgt.n	801b14a <_printf_float+0x3ae>
 801b0de:	f04f 0800 	mov.w	r8, #0
 801b0e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b0e6:	f104 0a1a 	add.w	sl, r4, #26
 801b0ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b0ee:	1a9b      	subs	r3, r3, r2
 801b0f0:	eba3 0309 	sub.w	r3, r3, r9
 801b0f4:	4543      	cmp	r3, r8
 801b0f6:	f77f af79 	ble.w	801afec <_printf_float+0x250>
 801b0fa:	2301      	movs	r3, #1
 801b0fc:	4652      	mov	r2, sl
 801b0fe:	4631      	mov	r1, r6
 801b100:	4628      	mov	r0, r5
 801b102:	47b8      	blx	r7
 801b104:	3001      	adds	r0, #1
 801b106:	f43f aeaa 	beq.w	801ae5e <_printf_float+0xc2>
 801b10a:	f108 0801 	add.w	r8, r8, #1
 801b10e:	e7ec      	b.n	801b0ea <_printf_float+0x34e>
 801b110:	4613      	mov	r3, r2
 801b112:	4631      	mov	r1, r6
 801b114:	4642      	mov	r2, r8
 801b116:	4628      	mov	r0, r5
 801b118:	47b8      	blx	r7
 801b11a:	3001      	adds	r0, #1
 801b11c:	d1c0      	bne.n	801b0a0 <_printf_float+0x304>
 801b11e:	e69e      	b.n	801ae5e <_printf_float+0xc2>
 801b120:	2301      	movs	r3, #1
 801b122:	4631      	mov	r1, r6
 801b124:	4628      	mov	r0, r5
 801b126:	9205      	str	r2, [sp, #20]
 801b128:	47b8      	blx	r7
 801b12a:	3001      	adds	r0, #1
 801b12c:	f43f ae97 	beq.w	801ae5e <_printf_float+0xc2>
 801b130:	9a05      	ldr	r2, [sp, #20]
 801b132:	f10b 0b01 	add.w	fp, fp, #1
 801b136:	e7b9      	b.n	801b0ac <_printf_float+0x310>
 801b138:	ee18 3a10 	vmov	r3, s16
 801b13c:	4652      	mov	r2, sl
 801b13e:	4631      	mov	r1, r6
 801b140:	4628      	mov	r0, r5
 801b142:	47b8      	blx	r7
 801b144:	3001      	adds	r0, #1
 801b146:	d1be      	bne.n	801b0c6 <_printf_float+0x32a>
 801b148:	e689      	b.n	801ae5e <_printf_float+0xc2>
 801b14a:	9a05      	ldr	r2, [sp, #20]
 801b14c:	464b      	mov	r3, r9
 801b14e:	4442      	add	r2, r8
 801b150:	4631      	mov	r1, r6
 801b152:	4628      	mov	r0, r5
 801b154:	47b8      	blx	r7
 801b156:	3001      	adds	r0, #1
 801b158:	d1c1      	bne.n	801b0de <_printf_float+0x342>
 801b15a:	e680      	b.n	801ae5e <_printf_float+0xc2>
 801b15c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b15e:	2a01      	cmp	r2, #1
 801b160:	dc01      	bgt.n	801b166 <_printf_float+0x3ca>
 801b162:	07db      	lsls	r3, r3, #31
 801b164:	d538      	bpl.n	801b1d8 <_printf_float+0x43c>
 801b166:	2301      	movs	r3, #1
 801b168:	4642      	mov	r2, r8
 801b16a:	4631      	mov	r1, r6
 801b16c:	4628      	mov	r0, r5
 801b16e:	47b8      	blx	r7
 801b170:	3001      	adds	r0, #1
 801b172:	f43f ae74 	beq.w	801ae5e <_printf_float+0xc2>
 801b176:	ee18 3a10 	vmov	r3, s16
 801b17a:	4652      	mov	r2, sl
 801b17c:	4631      	mov	r1, r6
 801b17e:	4628      	mov	r0, r5
 801b180:	47b8      	blx	r7
 801b182:	3001      	adds	r0, #1
 801b184:	f43f ae6b 	beq.w	801ae5e <_printf_float+0xc2>
 801b188:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b18c:	2200      	movs	r2, #0
 801b18e:	2300      	movs	r3, #0
 801b190:	f7e5 fc72 	bl	8000a78 <__aeabi_dcmpeq>
 801b194:	b9d8      	cbnz	r0, 801b1ce <_printf_float+0x432>
 801b196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b198:	f108 0201 	add.w	r2, r8, #1
 801b19c:	3b01      	subs	r3, #1
 801b19e:	4631      	mov	r1, r6
 801b1a0:	4628      	mov	r0, r5
 801b1a2:	47b8      	blx	r7
 801b1a4:	3001      	adds	r0, #1
 801b1a6:	d10e      	bne.n	801b1c6 <_printf_float+0x42a>
 801b1a8:	e659      	b.n	801ae5e <_printf_float+0xc2>
 801b1aa:	2301      	movs	r3, #1
 801b1ac:	4652      	mov	r2, sl
 801b1ae:	4631      	mov	r1, r6
 801b1b0:	4628      	mov	r0, r5
 801b1b2:	47b8      	blx	r7
 801b1b4:	3001      	adds	r0, #1
 801b1b6:	f43f ae52 	beq.w	801ae5e <_printf_float+0xc2>
 801b1ba:	f108 0801 	add.w	r8, r8, #1
 801b1be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b1c0:	3b01      	subs	r3, #1
 801b1c2:	4543      	cmp	r3, r8
 801b1c4:	dcf1      	bgt.n	801b1aa <_printf_float+0x40e>
 801b1c6:	464b      	mov	r3, r9
 801b1c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b1cc:	e6dc      	b.n	801af88 <_printf_float+0x1ec>
 801b1ce:	f04f 0800 	mov.w	r8, #0
 801b1d2:	f104 0a1a 	add.w	sl, r4, #26
 801b1d6:	e7f2      	b.n	801b1be <_printf_float+0x422>
 801b1d8:	2301      	movs	r3, #1
 801b1da:	4642      	mov	r2, r8
 801b1dc:	e7df      	b.n	801b19e <_printf_float+0x402>
 801b1de:	2301      	movs	r3, #1
 801b1e0:	464a      	mov	r2, r9
 801b1e2:	4631      	mov	r1, r6
 801b1e4:	4628      	mov	r0, r5
 801b1e6:	47b8      	blx	r7
 801b1e8:	3001      	adds	r0, #1
 801b1ea:	f43f ae38 	beq.w	801ae5e <_printf_float+0xc2>
 801b1ee:	f108 0801 	add.w	r8, r8, #1
 801b1f2:	68e3      	ldr	r3, [r4, #12]
 801b1f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b1f6:	1a5b      	subs	r3, r3, r1
 801b1f8:	4543      	cmp	r3, r8
 801b1fa:	dcf0      	bgt.n	801b1de <_printf_float+0x442>
 801b1fc:	e6fa      	b.n	801aff4 <_printf_float+0x258>
 801b1fe:	f04f 0800 	mov.w	r8, #0
 801b202:	f104 0919 	add.w	r9, r4, #25
 801b206:	e7f4      	b.n	801b1f2 <_printf_float+0x456>

0801b208 <_printf_common>:
 801b208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b20c:	4616      	mov	r6, r2
 801b20e:	4699      	mov	r9, r3
 801b210:	688a      	ldr	r2, [r1, #8]
 801b212:	690b      	ldr	r3, [r1, #16]
 801b214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b218:	4293      	cmp	r3, r2
 801b21a:	bfb8      	it	lt
 801b21c:	4613      	movlt	r3, r2
 801b21e:	6033      	str	r3, [r6, #0]
 801b220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b224:	4607      	mov	r7, r0
 801b226:	460c      	mov	r4, r1
 801b228:	b10a      	cbz	r2, 801b22e <_printf_common+0x26>
 801b22a:	3301      	adds	r3, #1
 801b22c:	6033      	str	r3, [r6, #0]
 801b22e:	6823      	ldr	r3, [r4, #0]
 801b230:	0699      	lsls	r1, r3, #26
 801b232:	bf42      	ittt	mi
 801b234:	6833      	ldrmi	r3, [r6, #0]
 801b236:	3302      	addmi	r3, #2
 801b238:	6033      	strmi	r3, [r6, #0]
 801b23a:	6825      	ldr	r5, [r4, #0]
 801b23c:	f015 0506 	ands.w	r5, r5, #6
 801b240:	d106      	bne.n	801b250 <_printf_common+0x48>
 801b242:	f104 0a19 	add.w	sl, r4, #25
 801b246:	68e3      	ldr	r3, [r4, #12]
 801b248:	6832      	ldr	r2, [r6, #0]
 801b24a:	1a9b      	subs	r3, r3, r2
 801b24c:	42ab      	cmp	r3, r5
 801b24e:	dc26      	bgt.n	801b29e <_printf_common+0x96>
 801b250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b254:	1e13      	subs	r3, r2, #0
 801b256:	6822      	ldr	r2, [r4, #0]
 801b258:	bf18      	it	ne
 801b25a:	2301      	movne	r3, #1
 801b25c:	0692      	lsls	r2, r2, #26
 801b25e:	d42b      	bmi.n	801b2b8 <_printf_common+0xb0>
 801b260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b264:	4649      	mov	r1, r9
 801b266:	4638      	mov	r0, r7
 801b268:	47c0      	blx	r8
 801b26a:	3001      	adds	r0, #1
 801b26c:	d01e      	beq.n	801b2ac <_printf_common+0xa4>
 801b26e:	6823      	ldr	r3, [r4, #0]
 801b270:	68e5      	ldr	r5, [r4, #12]
 801b272:	6832      	ldr	r2, [r6, #0]
 801b274:	f003 0306 	and.w	r3, r3, #6
 801b278:	2b04      	cmp	r3, #4
 801b27a:	bf08      	it	eq
 801b27c:	1aad      	subeq	r5, r5, r2
 801b27e:	68a3      	ldr	r3, [r4, #8]
 801b280:	6922      	ldr	r2, [r4, #16]
 801b282:	bf0c      	ite	eq
 801b284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b288:	2500      	movne	r5, #0
 801b28a:	4293      	cmp	r3, r2
 801b28c:	bfc4      	itt	gt
 801b28e:	1a9b      	subgt	r3, r3, r2
 801b290:	18ed      	addgt	r5, r5, r3
 801b292:	2600      	movs	r6, #0
 801b294:	341a      	adds	r4, #26
 801b296:	42b5      	cmp	r5, r6
 801b298:	d11a      	bne.n	801b2d0 <_printf_common+0xc8>
 801b29a:	2000      	movs	r0, #0
 801b29c:	e008      	b.n	801b2b0 <_printf_common+0xa8>
 801b29e:	2301      	movs	r3, #1
 801b2a0:	4652      	mov	r2, sl
 801b2a2:	4649      	mov	r1, r9
 801b2a4:	4638      	mov	r0, r7
 801b2a6:	47c0      	blx	r8
 801b2a8:	3001      	adds	r0, #1
 801b2aa:	d103      	bne.n	801b2b4 <_printf_common+0xac>
 801b2ac:	f04f 30ff 	mov.w	r0, #4294967295
 801b2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2b4:	3501      	adds	r5, #1
 801b2b6:	e7c6      	b.n	801b246 <_printf_common+0x3e>
 801b2b8:	18e1      	adds	r1, r4, r3
 801b2ba:	1c5a      	adds	r2, r3, #1
 801b2bc:	2030      	movs	r0, #48	; 0x30
 801b2be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b2c2:	4422      	add	r2, r4
 801b2c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b2c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b2cc:	3302      	adds	r3, #2
 801b2ce:	e7c7      	b.n	801b260 <_printf_common+0x58>
 801b2d0:	2301      	movs	r3, #1
 801b2d2:	4622      	mov	r2, r4
 801b2d4:	4649      	mov	r1, r9
 801b2d6:	4638      	mov	r0, r7
 801b2d8:	47c0      	blx	r8
 801b2da:	3001      	adds	r0, #1
 801b2dc:	d0e6      	beq.n	801b2ac <_printf_common+0xa4>
 801b2de:	3601      	adds	r6, #1
 801b2e0:	e7d9      	b.n	801b296 <_printf_common+0x8e>
	...

0801b2e4 <_printf_i>:
 801b2e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b2e8:	7e0f      	ldrb	r7, [r1, #24]
 801b2ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b2ec:	2f78      	cmp	r7, #120	; 0x78
 801b2ee:	4691      	mov	r9, r2
 801b2f0:	4680      	mov	r8, r0
 801b2f2:	460c      	mov	r4, r1
 801b2f4:	469a      	mov	sl, r3
 801b2f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b2fa:	d807      	bhi.n	801b30c <_printf_i+0x28>
 801b2fc:	2f62      	cmp	r7, #98	; 0x62
 801b2fe:	d80a      	bhi.n	801b316 <_printf_i+0x32>
 801b300:	2f00      	cmp	r7, #0
 801b302:	f000 80d8 	beq.w	801b4b6 <_printf_i+0x1d2>
 801b306:	2f58      	cmp	r7, #88	; 0x58
 801b308:	f000 80a3 	beq.w	801b452 <_printf_i+0x16e>
 801b30c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b314:	e03a      	b.n	801b38c <_printf_i+0xa8>
 801b316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b31a:	2b15      	cmp	r3, #21
 801b31c:	d8f6      	bhi.n	801b30c <_printf_i+0x28>
 801b31e:	a101      	add	r1, pc, #4	; (adr r1, 801b324 <_printf_i+0x40>)
 801b320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b324:	0801b37d 	.word	0x0801b37d
 801b328:	0801b391 	.word	0x0801b391
 801b32c:	0801b30d 	.word	0x0801b30d
 801b330:	0801b30d 	.word	0x0801b30d
 801b334:	0801b30d 	.word	0x0801b30d
 801b338:	0801b30d 	.word	0x0801b30d
 801b33c:	0801b391 	.word	0x0801b391
 801b340:	0801b30d 	.word	0x0801b30d
 801b344:	0801b30d 	.word	0x0801b30d
 801b348:	0801b30d 	.word	0x0801b30d
 801b34c:	0801b30d 	.word	0x0801b30d
 801b350:	0801b49d 	.word	0x0801b49d
 801b354:	0801b3c1 	.word	0x0801b3c1
 801b358:	0801b47f 	.word	0x0801b47f
 801b35c:	0801b30d 	.word	0x0801b30d
 801b360:	0801b30d 	.word	0x0801b30d
 801b364:	0801b4bf 	.word	0x0801b4bf
 801b368:	0801b30d 	.word	0x0801b30d
 801b36c:	0801b3c1 	.word	0x0801b3c1
 801b370:	0801b30d 	.word	0x0801b30d
 801b374:	0801b30d 	.word	0x0801b30d
 801b378:	0801b487 	.word	0x0801b487
 801b37c:	682b      	ldr	r3, [r5, #0]
 801b37e:	1d1a      	adds	r2, r3, #4
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	602a      	str	r2, [r5, #0]
 801b384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b38c:	2301      	movs	r3, #1
 801b38e:	e0a3      	b.n	801b4d8 <_printf_i+0x1f4>
 801b390:	6820      	ldr	r0, [r4, #0]
 801b392:	6829      	ldr	r1, [r5, #0]
 801b394:	0606      	lsls	r6, r0, #24
 801b396:	f101 0304 	add.w	r3, r1, #4
 801b39a:	d50a      	bpl.n	801b3b2 <_printf_i+0xce>
 801b39c:	680e      	ldr	r6, [r1, #0]
 801b39e:	602b      	str	r3, [r5, #0]
 801b3a0:	2e00      	cmp	r6, #0
 801b3a2:	da03      	bge.n	801b3ac <_printf_i+0xc8>
 801b3a4:	232d      	movs	r3, #45	; 0x2d
 801b3a6:	4276      	negs	r6, r6
 801b3a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b3ac:	485e      	ldr	r0, [pc, #376]	; (801b528 <_printf_i+0x244>)
 801b3ae:	230a      	movs	r3, #10
 801b3b0:	e019      	b.n	801b3e6 <_printf_i+0x102>
 801b3b2:	680e      	ldr	r6, [r1, #0]
 801b3b4:	602b      	str	r3, [r5, #0]
 801b3b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b3ba:	bf18      	it	ne
 801b3bc:	b236      	sxthne	r6, r6
 801b3be:	e7ef      	b.n	801b3a0 <_printf_i+0xbc>
 801b3c0:	682b      	ldr	r3, [r5, #0]
 801b3c2:	6820      	ldr	r0, [r4, #0]
 801b3c4:	1d19      	adds	r1, r3, #4
 801b3c6:	6029      	str	r1, [r5, #0]
 801b3c8:	0601      	lsls	r1, r0, #24
 801b3ca:	d501      	bpl.n	801b3d0 <_printf_i+0xec>
 801b3cc:	681e      	ldr	r6, [r3, #0]
 801b3ce:	e002      	b.n	801b3d6 <_printf_i+0xf2>
 801b3d0:	0646      	lsls	r6, r0, #25
 801b3d2:	d5fb      	bpl.n	801b3cc <_printf_i+0xe8>
 801b3d4:	881e      	ldrh	r6, [r3, #0]
 801b3d6:	4854      	ldr	r0, [pc, #336]	; (801b528 <_printf_i+0x244>)
 801b3d8:	2f6f      	cmp	r7, #111	; 0x6f
 801b3da:	bf0c      	ite	eq
 801b3dc:	2308      	moveq	r3, #8
 801b3de:	230a      	movne	r3, #10
 801b3e0:	2100      	movs	r1, #0
 801b3e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b3e6:	6865      	ldr	r5, [r4, #4]
 801b3e8:	60a5      	str	r5, [r4, #8]
 801b3ea:	2d00      	cmp	r5, #0
 801b3ec:	bfa2      	ittt	ge
 801b3ee:	6821      	ldrge	r1, [r4, #0]
 801b3f0:	f021 0104 	bicge.w	r1, r1, #4
 801b3f4:	6021      	strge	r1, [r4, #0]
 801b3f6:	b90e      	cbnz	r6, 801b3fc <_printf_i+0x118>
 801b3f8:	2d00      	cmp	r5, #0
 801b3fa:	d04d      	beq.n	801b498 <_printf_i+0x1b4>
 801b3fc:	4615      	mov	r5, r2
 801b3fe:	fbb6 f1f3 	udiv	r1, r6, r3
 801b402:	fb03 6711 	mls	r7, r3, r1, r6
 801b406:	5dc7      	ldrb	r7, [r0, r7]
 801b408:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b40c:	4637      	mov	r7, r6
 801b40e:	42bb      	cmp	r3, r7
 801b410:	460e      	mov	r6, r1
 801b412:	d9f4      	bls.n	801b3fe <_printf_i+0x11a>
 801b414:	2b08      	cmp	r3, #8
 801b416:	d10b      	bne.n	801b430 <_printf_i+0x14c>
 801b418:	6823      	ldr	r3, [r4, #0]
 801b41a:	07de      	lsls	r6, r3, #31
 801b41c:	d508      	bpl.n	801b430 <_printf_i+0x14c>
 801b41e:	6923      	ldr	r3, [r4, #16]
 801b420:	6861      	ldr	r1, [r4, #4]
 801b422:	4299      	cmp	r1, r3
 801b424:	bfde      	ittt	le
 801b426:	2330      	movle	r3, #48	; 0x30
 801b428:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b42c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b430:	1b52      	subs	r2, r2, r5
 801b432:	6122      	str	r2, [r4, #16]
 801b434:	f8cd a000 	str.w	sl, [sp]
 801b438:	464b      	mov	r3, r9
 801b43a:	aa03      	add	r2, sp, #12
 801b43c:	4621      	mov	r1, r4
 801b43e:	4640      	mov	r0, r8
 801b440:	f7ff fee2 	bl	801b208 <_printf_common>
 801b444:	3001      	adds	r0, #1
 801b446:	d14c      	bne.n	801b4e2 <_printf_i+0x1fe>
 801b448:	f04f 30ff 	mov.w	r0, #4294967295
 801b44c:	b004      	add	sp, #16
 801b44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b452:	4835      	ldr	r0, [pc, #212]	; (801b528 <_printf_i+0x244>)
 801b454:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b458:	6829      	ldr	r1, [r5, #0]
 801b45a:	6823      	ldr	r3, [r4, #0]
 801b45c:	f851 6b04 	ldr.w	r6, [r1], #4
 801b460:	6029      	str	r1, [r5, #0]
 801b462:	061d      	lsls	r5, r3, #24
 801b464:	d514      	bpl.n	801b490 <_printf_i+0x1ac>
 801b466:	07df      	lsls	r7, r3, #31
 801b468:	bf44      	itt	mi
 801b46a:	f043 0320 	orrmi.w	r3, r3, #32
 801b46e:	6023      	strmi	r3, [r4, #0]
 801b470:	b91e      	cbnz	r6, 801b47a <_printf_i+0x196>
 801b472:	6823      	ldr	r3, [r4, #0]
 801b474:	f023 0320 	bic.w	r3, r3, #32
 801b478:	6023      	str	r3, [r4, #0]
 801b47a:	2310      	movs	r3, #16
 801b47c:	e7b0      	b.n	801b3e0 <_printf_i+0xfc>
 801b47e:	6823      	ldr	r3, [r4, #0]
 801b480:	f043 0320 	orr.w	r3, r3, #32
 801b484:	6023      	str	r3, [r4, #0]
 801b486:	2378      	movs	r3, #120	; 0x78
 801b488:	4828      	ldr	r0, [pc, #160]	; (801b52c <_printf_i+0x248>)
 801b48a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b48e:	e7e3      	b.n	801b458 <_printf_i+0x174>
 801b490:	0659      	lsls	r1, r3, #25
 801b492:	bf48      	it	mi
 801b494:	b2b6      	uxthmi	r6, r6
 801b496:	e7e6      	b.n	801b466 <_printf_i+0x182>
 801b498:	4615      	mov	r5, r2
 801b49a:	e7bb      	b.n	801b414 <_printf_i+0x130>
 801b49c:	682b      	ldr	r3, [r5, #0]
 801b49e:	6826      	ldr	r6, [r4, #0]
 801b4a0:	6961      	ldr	r1, [r4, #20]
 801b4a2:	1d18      	adds	r0, r3, #4
 801b4a4:	6028      	str	r0, [r5, #0]
 801b4a6:	0635      	lsls	r5, r6, #24
 801b4a8:	681b      	ldr	r3, [r3, #0]
 801b4aa:	d501      	bpl.n	801b4b0 <_printf_i+0x1cc>
 801b4ac:	6019      	str	r1, [r3, #0]
 801b4ae:	e002      	b.n	801b4b6 <_printf_i+0x1d2>
 801b4b0:	0670      	lsls	r0, r6, #25
 801b4b2:	d5fb      	bpl.n	801b4ac <_printf_i+0x1c8>
 801b4b4:	8019      	strh	r1, [r3, #0]
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	6123      	str	r3, [r4, #16]
 801b4ba:	4615      	mov	r5, r2
 801b4bc:	e7ba      	b.n	801b434 <_printf_i+0x150>
 801b4be:	682b      	ldr	r3, [r5, #0]
 801b4c0:	1d1a      	adds	r2, r3, #4
 801b4c2:	602a      	str	r2, [r5, #0]
 801b4c4:	681d      	ldr	r5, [r3, #0]
 801b4c6:	6862      	ldr	r2, [r4, #4]
 801b4c8:	2100      	movs	r1, #0
 801b4ca:	4628      	mov	r0, r5
 801b4cc:	f7e4 fe60 	bl	8000190 <memchr>
 801b4d0:	b108      	cbz	r0, 801b4d6 <_printf_i+0x1f2>
 801b4d2:	1b40      	subs	r0, r0, r5
 801b4d4:	6060      	str	r0, [r4, #4]
 801b4d6:	6863      	ldr	r3, [r4, #4]
 801b4d8:	6123      	str	r3, [r4, #16]
 801b4da:	2300      	movs	r3, #0
 801b4dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b4e0:	e7a8      	b.n	801b434 <_printf_i+0x150>
 801b4e2:	6923      	ldr	r3, [r4, #16]
 801b4e4:	462a      	mov	r2, r5
 801b4e6:	4649      	mov	r1, r9
 801b4e8:	4640      	mov	r0, r8
 801b4ea:	47d0      	blx	sl
 801b4ec:	3001      	adds	r0, #1
 801b4ee:	d0ab      	beq.n	801b448 <_printf_i+0x164>
 801b4f0:	6823      	ldr	r3, [r4, #0]
 801b4f2:	079b      	lsls	r3, r3, #30
 801b4f4:	d413      	bmi.n	801b51e <_printf_i+0x23a>
 801b4f6:	68e0      	ldr	r0, [r4, #12]
 801b4f8:	9b03      	ldr	r3, [sp, #12]
 801b4fa:	4298      	cmp	r0, r3
 801b4fc:	bfb8      	it	lt
 801b4fe:	4618      	movlt	r0, r3
 801b500:	e7a4      	b.n	801b44c <_printf_i+0x168>
 801b502:	2301      	movs	r3, #1
 801b504:	4632      	mov	r2, r6
 801b506:	4649      	mov	r1, r9
 801b508:	4640      	mov	r0, r8
 801b50a:	47d0      	blx	sl
 801b50c:	3001      	adds	r0, #1
 801b50e:	d09b      	beq.n	801b448 <_printf_i+0x164>
 801b510:	3501      	adds	r5, #1
 801b512:	68e3      	ldr	r3, [r4, #12]
 801b514:	9903      	ldr	r1, [sp, #12]
 801b516:	1a5b      	subs	r3, r3, r1
 801b518:	42ab      	cmp	r3, r5
 801b51a:	dcf2      	bgt.n	801b502 <_printf_i+0x21e>
 801b51c:	e7eb      	b.n	801b4f6 <_printf_i+0x212>
 801b51e:	2500      	movs	r5, #0
 801b520:	f104 0619 	add.w	r6, r4, #25
 801b524:	e7f5      	b.n	801b512 <_printf_i+0x22e>
 801b526:	bf00      	nop
 801b528:	0801dd76 	.word	0x0801dd76
 801b52c:	0801dd87 	.word	0x0801dd87

0801b530 <iprintf>:
 801b530:	b40f      	push	{r0, r1, r2, r3}
 801b532:	4b0a      	ldr	r3, [pc, #40]	; (801b55c <iprintf+0x2c>)
 801b534:	b513      	push	{r0, r1, r4, lr}
 801b536:	681c      	ldr	r4, [r3, #0]
 801b538:	b124      	cbz	r4, 801b544 <iprintf+0x14>
 801b53a:	69a3      	ldr	r3, [r4, #24]
 801b53c:	b913      	cbnz	r3, 801b544 <iprintf+0x14>
 801b53e:	4620      	mov	r0, r4
 801b540:	f001 f902 	bl	801c748 <__sinit>
 801b544:	ab05      	add	r3, sp, #20
 801b546:	9a04      	ldr	r2, [sp, #16]
 801b548:	68a1      	ldr	r1, [r4, #8]
 801b54a:	9301      	str	r3, [sp, #4]
 801b54c:	4620      	mov	r0, r4
 801b54e:	f001 feb1 	bl	801d2b4 <_vfiprintf_r>
 801b552:	b002      	add	sp, #8
 801b554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b558:	b004      	add	sp, #16
 801b55a:	4770      	bx	lr
 801b55c:	20000078 	.word	0x20000078

0801b560 <putchar>:
 801b560:	4b09      	ldr	r3, [pc, #36]	; (801b588 <putchar+0x28>)
 801b562:	b513      	push	{r0, r1, r4, lr}
 801b564:	681c      	ldr	r4, [r3, #0]
 801b566:	4601      	mov	r1, r0
 801b568:	b134      	cbz	r4, 801b578 <putchar+0x18>
 801b56a:	69a3      	ldr	r3, [r4, #24]
 801b56c:	b923      	cbnz	r3, 801b578 <putchar+0x18>
 801b56e:	9001      	str	r0, [sp, #4]
 801b570:	4620      	mov	r0, r4
 801b572:	f001 f8e9 	bl	801c748 <__sinit>
 801b576:	9901      	ldr	r1, [sp, #4]
 801b578:	68a2      	ldr	r2, [r4, #8]
 801b57a:	4620      	mov	r0, r4
 801b57c:	b002      	add	sp, #8
 801b57e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b582:	f001 bfc7 	b.w	801d514 <_putc_r>
 801b586:	bf00      	nop
 801b588:	20000078 	.word	0x20000078

0801b58c <_puts_r>:
 801b58c:	b570      	push	{r4, r5, r6, lr}
 801b58e:	460e      	mov	r6, r1
 801b590:	4605      	mov	r5, r0
 801b592:	b118      	cbz	r0, 801b59c <_puts_r+0x10>
 801b594:	6983      	ldr	r3, [r0, #24]
 801b596:	b90b      	cbnz	r3, 801b59c <_puts_r+0x10>
 801b598:	f001 f8d6 	bl	801c748 <__sinit>
 801b59c:	69ab      	ldr	r3, [r5, #24]
 801b59e:	68ac      	ldr	r4, [r5, #8]
 801b5a0:	b913      	cbnz	r3, 801b5a8 <_puts_r+0x1c>
 801b5a2:	4628      	mov	r0, r5
 801b5a4:	f001 f8d0 	bl	801c748 <__sinit>
 801b5a8:	4b2c      	ldr	r3, [pc, #176]	; (801b65c <_puts_r+0xd0>)
 801b5aa:	429c      	cmp	r4, r3
 801b5ac:	d120      	bne.n	801b5f0 <_puts_r+0x64>
 801b5ae:	686c      	ldr	r4, [r5, #4]
 801b5b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b5b2:	07db      	lsls	r3, r3, #31
 801b5b4:	d405      	bmi.n	801b5c2 <_puts_r+0x36>
 801b5b6:	89a3      	ldrh	r3, [r4, #12]
 801b5b8:	0598      	lsls	r0, r3, #22
 801b5ba:	d402      	bmi.n	801b5c2 <_puts_r+0x36>
 801b5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b5be:	f001 f966 	bl	801c88e <__retarget_lock_acquire_recursive>
 801b5c2:	89a3      	ldrh	r3, [r4, #12]
 801b5c4:	0719      	lsls	r1, r3, #28
 801b5c6:	d51d      	bpl.n	801b604 <_puts_r+0x78>
 801b5c8:	6923      	ldr	r3, [r4, #16]
 801b5ca:	b1db      	cbz	r3, 801b604 <_puts_r+0x78>
 801b5cc:	3e01      	subs	r6, #1
 801b5ce:	68a3      	ldr	r3, [r4, #8]
 801b5d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b5d4:	3b01      	subs	r3, #1
 801b5d6:	60a3      	str	r3, [r4, #8]
 801b5d8:	bb39      	cbnz	r1, 801b62a <_puts_r+0x9e>
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	da38      	bge.n	801b650 <_puts_r+0xc4>
 801b5de:	4622      	mov	r2, r4
 801b5e0:	210a      	movs	r1, #10
 801b5e2:	4628      	mov	r0, r5
 801b5e4:	f000 f85c 	bl	801b6a0 <__swbuf_r>
 801b5e8:	3001      	adds	r0, #1
 801b5ea:	d011      	beq.n	801b610 <_puts_r+0x84>
 801b5ec:	250a      	movs	r5, #10
 801b5ee:	e011      	b.n	801b614 <_puts_r+0x88>
 801b5f0:	4b1b      	ldr	r3, [pc, #108]	; (801b660 <_puts_r+0xd4>)
 801b5f2:	429c      	cmp	r4, r3
 801b5f4:	d101      	bne.n	801b5fa <_puts_r+0x6e>
 801b5f6:	68ac      	ldr	r4, [r5, #8]
 801b5f8:	e7da      	b.n	801b5b0 <_puts_r+0x24>
 801b5fa:	4b1a      	ldr	r3, [pc, #104]	; (801b664 <_puts_r+0xd8>)
 801b5fc:	429c      	cmp	r4, r3
 801b5fe:	bf08      	it	eq
 801b600:	68ec      	ldreq	r4, [r5, #12]
 801b602:	e7d5      	b.n	801b5b0 <_puts_r+0x24>
 801b604:	4621      	mov	r1, r4
 801b606:	4628      	mov	r0, r5
 801b608:	f000 f89c 	bl	801b744 <__swsetup_r>
 801b60c:	2800      	cmp	r0, #0
 801b60e:	d0dd      	beq.n	801b5cc <_puts_r+0x40>
 801b610:	f04f 35ff 	mov.w	r5, #4294967295
 801b614:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b616:	07da      	lsls	r2, r3, #31
 801b618:	d405      	bmi.n	801b626 <_puts_r+0x9a>
 801b61a:	89a3      	ldrh	r3, [r4, #12]
 801b61c:	059b      	lsls	r3, r3, #22
 801b61e:	d402      	bmi.n	801b626 <_puts_r+0x9a>
 801b620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b622:	f001 f935 	bl	801c890 <__retarget_lock_release_recursive>
 801b626:	4628      	mov	r0, r5
 801b628:	bd70      	pop	{r4, r5, r6, pc}
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	da04      	bge.n	801b638 <_puts_r+0xac>
 801b62e:	69a2      	ldr	r2, [r4, #24]
 801b630:	429a      	cmp	r2, r3
 801b632:	dc06      	bgt.n	801b642 <_puts_r+0xb6>
 801b634:	290a      	cmp	r1, #10
 801b636:	d004      	beq.n	801b642 <_puts_r+0xb6>
 801b638:	6823      	ldr	r3, [r4, #0]
 801b63a:	1c5a      	adds	r2, r3, #1
 801b63c:	6022      	str	r2, [r4, #0]
 801b63e:	7019      	strb	r1, [r3, #0]
 801b640:	e7c5      	b.n	801b5ce <_puts_r+0x42>
 801b642:	4622      	mov	r2, r4
 801b644:	4628      	mov	r0, r5
 801b646:	f000 f82b 	bl	801b6a0 <__swbuf_r>
 801b64a:	3001      	adds	r0, #1
 801b64c:	d1bf      	bne.n	801b5ce <_puts_r+0x42>
 801b64e:	e7df      	b.n	801b610 <_puts_r+0x84>
 801b650:	6823      	ldr	r3, [r4, #0]
 801b652:	250a      	movs	r5, #10
 801b654:	1c5a      	adds	r2, r3, #1
 801b656:	6022      	str	r2, [r4, #0]
 801b658:	701d      	strb	r5, [r3, #0]
 801b65a:	e7db      	b.n	801b614 <_puts_r+0x88>
 801b65c:	0801de48 	.word	0x0801de48
 801b660:	0801de68 	.word	0x0801de68
 801b664:	0801de28 	.word	0x0801de28

0801b668 <puts>:
 801b668:	4b02      	ldr	r3, [pc, #8]	; (801b674 <puts+0xc>)
 801b66a:	4601      	mov	r1, r0
 801b66c:	6818      	ldr	r0, [r3, #0]
 801b66e:	f7ff bf8d 	b.w	801b58c <_puts_r>
 801b672:	bf00      	nop
 801b674:	20000078 	.word	0x20000078

0801b678 <strncpy>:
 801b678:	b510      	push	{r4, lr}
 801b67a:	3901      	subs	r1, #1
 801b67c:	4603      	mov	r3, r0
 801b67e:	b132      	cbz	r2, 801b68e <strncpy+0x16>
 801b680:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b684:	f803 4b01 	strb.w	r4, [r3], #1
 801b688:	3a01      	subs	r2, #1
 801b68a:	2c00      	cmp	r4, #0
 801b68c:	d1f7      	bne.n	801b67e <strncpy+0x6>
 801b68e:	441a      	add	r2, r3
 801b690:	2100      	movs	r1, #0
 801b692:	4293      	cmp	r3, r2
 801b694:	d100      	bne.n	801b698 <strncpy+0x20>
 801b696:	bd10      	pop	{r4, pc}
 801b698:	f803 1b01 	strb.w	r1, [r3], #1
 801b69c:	e7f9      	b.n	801b692 <strncpy+0x1a>
	...

0801b6a0 <__swbuf_r>:
 801b6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6a2:	460e      	mov	r6, r1
 801b6a4:	4614      	mov	r4, r2
 801b6a6:	4605      	mov	r5, r0
 801b6a8:	b118      	cbz	r0, 801b6b2 <__swbuf_r+0x12>
 801b6aa:	6983      	ldr	r3, [r0, #24]
 801b6ac:	b90b      	cbnz	r3, 801b6b2 <__swbuf_r+0x12>
 801b6ae:	f001 f84b 	bl	801c748 <__sinit>
 801b6b2:	4b21      	ldr	r3, [pc, #132]	; (801b738 <__swbuf_r+0x98>)
 801b6b4:	429c      	cmp	r4, r3
 801b6b6:	d12b      	bne.n	801b710 <__swbuf_r+0x70>
 801b6b8:	686c      	ldr	r4, [r5, #4]
 801b6ba:	69a3      	ldr	r3, [r4, #24]
 801b6bc:	60a3      	str	r3, [r4, #8]
 801b6be:	89a3      	ldrh	r3, [r4, #12]
 801b6c0:	071a      	lsls	r2, r3, #28
 801b6c2:	d52f      	bpl.n	801b724 <__swbuf_r+0x84>
 801b6c4:	6923      	ldr	r3, [r4, #16]
 801b6c6:	b36b      	cbz	r3, 801b724 <__swbuf_r+0x84>
 801b6c8:	6923      	ldr	r3, [r4, #16]
 801b6ca:	6820      	ldr	r0, [r4, #0]
 801b6cc:	1ac0      	subs	r0, r0, r3
 801b6ce:	6963      	ldr	r3, [r4, #20]
 801b6d0:	b2f6      	uxtb	r6, r6
 801b6d2:	4283      	cmp	r3, r0
 801b6d4:	4637      	mov	r7, r6
 801b6d6:	dc04      	bgt.n	801b6e2 <__swbuf_r+0x42>
 801b6d8:	4621      	mov	r1, r4
 801b6da:	4628      	mov	r0, r5
 801b6dc:	f000 ffa0 	bl	801c620 <_fflush_r>
 801b6e0:	bb30      	cbnz	r0, 801b730 <__swbuf_r+0x90>
 801b6e2:	68a3      	ldr	r3, [r4, #8]
 801b6e4:	3b01      	subs	r3, #1
 801b6e6:	60a3      	str	r3, [r4, #8]
 801b6e8:	6823      	ldr	r3, [r4, #0]
 801b6ea:	1c5a      	adds	r2, r3, #1
 801b6ec:	6022      	str	r2, [r4, #0]
 801b6ee:	701e      	strb	r6, [r3, #0]
 801b6f0:	6963      	ldr	r3, [r4, #20]
 801b6f2:	3001      	adds	r0, #1
 801b6f4:	4283      	cmp	r3, r0
 801b6f6:	d004      	beq.n	801b702 <__swbuf_r+0x62>
 801b6f8:	89a3      	ldrh	r3, [r4, #12]
 801b6fa:	07db      	lsls	r3, r3, #31
 801b6fc:	d506      	bpl.n	801b70c <__swbuf_r+0x6c>
 801b6fe:	2e0a      	cmp	r6, #10
 801b700:	d104      	bne.n	801b70c <__swbuf_r+0x6c>
 801b702:	4621      	mov	r1, r4
 801b704:	4628      	mov	r0, r5
 801b706:	f000 ff8b 	bl	801c620 <_fflush_r>
 801b70a:	b988      	cbnz	r0, 801b730 <__swbuf_r+0x90>
 801b70c:	4638      	mov	r0, r7
 801b70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b710:	4b0a      	ldr	r3, [pc, #40]	; (801b73c <__swbuf_r+0x9c>)
 801b712:	429c      	cmp	r4, r3
 801b714:	d101      	bne.n	801b71a <__swbuf_r+0x7a>
 801b716:	68ac      	ldr	r4, [r5, #8]
 801b718:	e7cf      	b.n	801b6ba <__swbuf_r+0x1a>
 801b71a:	4b09      	ldr	r3, [pc, #36]	; (801b740 <__swbuf_r+0xa0>)
 801b71c:	429c      	cmp	r4, r3
 801b71e:	bf08      	it	eq
 801b720:	68ec      	ldreq	r4, [r5, #12]
 801b722:	e7ca      	b.n	801b6ba <__swbuf_r+0x1a>
 801b724:	4621      	mov	r1, r4
 801b726:	4628      	mov	r0, r5
 801b728:	f000 f80c 	bl	801b744 <__swsetup_r>
 801b72c:	2800      	cmp	r0, #0
 801b72e:	d0cb      	beq.n	801b6c8 <__swbuf_r+0x28>
 801b730:	f04f 37ff 	mov.w	r7, #4294967295
 801b734:	e7ea      	b.n	801b70c <__swbuf_r+0x6c>
 801b736:	bf00      	nop
 801b738:	0801de48 	.word	0x0801de48
 801b73c:	0801de68 	.word	0x0801de68
 801b740:	0801de28 	.word	0x0801de28

0801b744 <__swsetup_r>:
 801b744:	4b32      	ldr	r3, [pc, #200]	; (801b810 <__swsetup_r+0xcc>)
 801b746:	b570      	push	{r4, r5, r6, lr}
 801b748:	681d      	ldr	r5, [r3, #0]
 801b74a:	4606      	mov	r6, r0
 801b74c:	460c      	mov	r4, r1
 801b74e:	b125      	cbz	r5, 801b75a <__swsetup_r+0x16>
 801b750:	69ab      	ldr	r3, [r5, #24]
 801b752:	b913      	cbnz	r3, 801b75a <__swsetup_r+0x16>
 801b754:	4628      	mov	r0, r5
 801b756:	f000 fff7 	bl	801c748 <__sinit>
 801b75a:	4b2e      	ldr	r3, [pc, #184]	; (801b814 <__swsetup_r+0xd0>)
 801b75c:	429c      	cmp	r4, r3
 801b75e:	d10f      	bne.n	801b780 <__swsetup_r+0x3c>
 801b760:	686c      	ldr	r4, [r5, #4]
 801b762:	89a3      	ldrh	r3, [r4, #12]
 801b764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b768:	0719      	lsls	r1, r3, #28
 801b76a:	d42c      	bmi.n	801b7c6 <__swsetup_r+0x82>
 801b76c:	06dd      	lsls	r5, r3, #27
 801b76e:	d411      	bmi.n	801b794 <__swsetup_r+0x50>
 801b770:	2309      	movs	r3, #9
 801b772:	6033      	str	r3, [r6, #0]
 801b774:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b778:	81a3      	strh	r3, [r4, #12]
 801b77a:	f04f 30ff 	mov.w	r0, #4294967295
 801b77e:	e03e      	b.n	801b7fe <__swsetup_r+0xba>
 801b780:	4b25      	ldr	r3, [pc, #148]	; (801b818 <__swsetup_r+0xd4>)
 801b782:	429c      	cmp	r4, r3
 801b784:	d101      	bne.n	801b78a <__swsetup_r+0x46>
 801b786:	68ac      	ldr	r4, [r5, #8]
 801b788:	e7eb      	b.n	801b762 <__swsetup_r+0x1e>
 801b78a:	4b24      	ldr	r3, [pc, #144]	; (801b81c <__swsetup_r+0xd8>)
 801b78c:	429c      	cmp	r4, r3
 801b78e:	bf08      	it	eq
 801b790:	68ec      	ldreq	r4, [r5, #12]
 801b792:	e7e6      	b.n	801b762 <__swsetup_r+0x1e>
 801b794:	0758      	lsls	r0, r3, #29
 801b796:	d512      	bpl.n	801b7be <__swsetup_r+0x7a>
 801b798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b79a:	b141      	cbz	r1, 801b7ae <__swsetup_r+0x6a>
 801b79c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b7a0:	4299      	cmp	r1, r3
 801b7a2:	d002      	beq.n	801b7aa <__swsetup_r+0x66>
 801b7a4:	4630      	mov	r0, r6
 801b7a6:	f001 fc7b 	bl	801d0a0 <_free_r>
 801b7aa:	2300      	movs	r3, #0
 801b7ac:	6363      	str	r3, [r4, #52]	; 0x34
 801b7ae:	89a3      	ldrh	r3, [r4, #12]
 801b7b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b7b4:	81a3      	strh	r3, [r4, #12]
 801b7b6:	2300      	movs	r3, #0
 801b7b8:	6063      	str	r3, [r4, #4]
 801b7ba:	6923      	ldr	r3, [r4, #16]
 801b7bc:	6023      	str	r3, [r4, #0]
 801b7be:	89a3      	ldrh	r3, [r4, #12]
 801b7c0:	f043 0308 	orr.w	r3, r3, #8
 801b7c4:	81a3      	strh	r3, [r4, #12]
 801b7c6:	6923      	ldr	r3, [r4, #16]
 801b7c8:	b94b      	cbnz	r3, 801b7de <__swsetup_r+0x9a>
 801b7ca:	89a3      	ldrh	r3, [r4, #12]
 801b7cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b7d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b7d4:	d003      	beq.n	801b7de <__swsetup_r+0x9a>
 801b7d6:	4621      	mov	r1, r4
 801b7d8:	4630      	mov	r0, r6
 801b7da:	f001 f87f 	bl	801c8dc <__smakebuf_r>
 801b7de:	89a0      	ldrh	r0, [r4, #12]
 801b7e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b7e4:	f010 0301 	ands.w	r3, r0, #1
 801b7e8:	d00a      	beq.n	801b800 <__swsetup_r+0xbc>
 801b7ea:	2300      	movs	r3, #0
 801b7ec:	60a3      	str	r3, [r4, #8]
 801b7ee:	6963      	ldr	r3, [r4, #20]
 801b7f0:	425b      	negs	r3, r3
 801b7f2:	61a3      	str	r3, [r4, #24]
 801b7f4:	6923      	ldr	r3, [r4, #16]
 801b7f6:	b943      	cbnz	r3, 801b80a <__swsetup_r+0xc6>
 801b7f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b7fc:	d1ba      	bne.n	801b774 <__swsetup_r+0x30>
 801b7fe:	bd70      	pop	{r4, r5, r6, pc}
 801b800:	0781      	lsls	r1, r0, #30
 801b802:	bf58      	it	pl
 801b804:	6963      	ldrpl	r3, [r4, #20]
 801b806:	60a3      	str	r3, [r4, #8]
 801b808:	e7f4      	b.n	801b7f4 <__swsetup_r+0xb0>
 801b80a:	2000      	movs	r0, #0
 801b80c:	e7f7      	b.n	801b7fe <__swsetup_r+0xba>
 801b80e:	bf00      	nop
 801b810:	20000078 	.word	0x20000078
 801b814:	0801de48 	.word	0x0801de48
 801b818:	0801de68 	.word	0x0801de68
 801b81c:	0801de28 	.word	0x0801de28

0801b820 <quorem>:
 801b820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b824:	6903      	ldr	r3, [r0, #16]
 801b826:	690c      	ldr	r4, [r1, #16]
 801b828:	42a3      	cmp	r3, r4
 801b82a:	4607      	mov	r7, r0
 801b82c:	f2c0 8081 	blt.w	801b932 <quorem+0x112>
 801b830:	3c01      	subs	r4, #1
 801b832:	f101 0814 	add.w	r8, r1, #20
 801b836:	f100 0514 	add.w	r5, r0, #20
 801b83a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b83e:	9301      	str	r3, [sp, #4]
 801b840:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b844:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b848:	3301      	adds	r3, #1
 801b84a:	429a      	cmp	r2, r3
 801b84c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b850:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b854:	fbb2 f6f3 	udiv	r6, r2, r3
 801b858:	d331      	bcc.n	801b8be <quorem+0x9e>
 801b85a:	f04f 0e00 	mov.w	lr, #0
 801b85e:	4640      	mov	r0, r8
 801b860:	46ac      	mov	ip, r5
 801b862:	46f2      	mov	sl, lr
 801b864:	f850 2b04 	ldr.w	r2, [r0], #4
 801b868:	b293      	uxth	r3, r2
 801b86a:	fb06 e303 	mla	r3, r6, r3, lr
 801b86e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b872:	b29b      	uxth	r3, r3
 801b874:	ebaa 0303 	sub.w	r3, sl, r3
 801b878:	f8dc a000 	ldr.w	sl, [ip]
 801b87c:	0c12      	lsrs	r2, r2, #16
 801b87e:	fa13 f38a 	uxtah	r3, r3, sl
 801b882:	fb06 e202 	mla	r2, r6, r2, lr
 801b886:	9300      	str	r3, [sp, #0]
 801b888:	9b00      	ldr	r3, [sp, #0]
 801b88a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b88e:	b292      	uxth	r2, r2
 801b890:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b894:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b898:	f8bd 3000 	ldrh.w	r3, [sp]
 801b89c:	4581      	cmp	r9, r0
 801b89e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b8a2:	f84c 3b04 	str.w	r3, [ip], #4
 801b8a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b8aa:	d2db      	bcs.n	801b864 <quorem+0x44>
 801b8ac:	f855 300b 	ldr.w	r3, [r5, fp]
 801b8b0:	b92b      	cbnz	r3, 801b8be <quorem+0x9e>
 801b8b2:	9b01      	ldr	r3, [sp, #4]
 801b8b4:	3b04      	subs	r3, #4
 801b8b6:	429d      	cmp	r5, r3
 801b8b8:	461a      	mov	r2, r3
 801b8ba:	d32e      	bcc.n	801b91a <quorem+0xfa>
 801b8bc:	613c      	str	r4, [r7, #16]
 801b8be:	4638      	mov	r0, r7
 801b8c0:	f001 fad6 	bl	801ce70 <__mcmp>
 801b8c4:	2800      	cmp	r0, #0
 801b8c6:	db24      	blt.n	801b912 <quorem+0xf2>
 801b8c8:	3601      	adds	r6, #1
 801b8ca:	4628      	mov	r0, r5
 801b8cc:	f04f 0c00 	mov.w	ip, #0
 801b8d0:	f858 2b04 	ldr.w	r2, [r8], #4
 801b8d4:	f8d0 e000 	ldr.w	lr, [r0]
 801b8d8:	b293      	uxth	r3, r2
 801b8da:	ebac 0303 	sub.w	r3, ip, r3
 801b8de:	0c12      	lsrs	r2, r2, #16
 801b8e0:	fa13 f38e 	uxtah	r3, r3, lr
 801b8e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b8e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b8ec:	b29b      	uxth	r3, r3
 801b8ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b8f2:	45c1      	cmp	r9, r8
 801b8f4:	f840 3b04 	str.w	r3, [r0], #4
 801b8f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b8fc:	d2e8      	bcs.n	801b8d0 <quorem+0xb0>
 801b8fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b902:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b906:	b922      	cbnz	r2, 801b912 <quorem+0xf2>
 801b908:	3b04      	subs	r3, #4
 801b90a:	429d      	cmp	r5, r3
 801b90c:	461a      	mov	r2, r3
 801b90e:	d30a      	bcc.n	801b926 <quorem+0x106>
 801b910:	613c      	str	r4, [r7, #16]
 801b912:	4630      	mov	r0, r6
 801b914:	b003      	add	sp, #12
 801b916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b91a:	6812      	ldr	r2, [r2, #0]
 801b91c:	3b04      	subs	r3, #4
 801b91e:	2a00      	cmp	r2, #0
 801b920:	d1cc      	bne.n	801b8bc <quorem+0x9c>
 801b922:	3c01      	subs	r4, #1
 801b924:	e7c7      	b.n	801b8b6 <quorem+0x96>
 801b926:	6812      	ldr	r2, [r2, #0]
 801b928:	3b04      	subs	r3, #4
 801b92a:	2a00      	cmp	r2, #0
 801b92c:	d1f0      	bne.n	801b910 <quorem+0xf0>
 801b92e:	3c01      	subs	r4, #1
 801b930:	e7eb      	b.n	801b90a <quorem+0xea>
 801b932:	2000      	movs	r0, #0
 801b934:	e7ee      	b.n	801b914 <quorem+0xf4>
	...

0801b938 <_dtoa_r>:
 801b938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b93c:	ed2d 8b04 	vpush	{d8-d9}
 801b940:	ec57 6b10 	vmov	r6, r7, d0
 801b944:	b093      	sub	sp, #76	; 0x4c
 801b946:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b948:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b94c:	9106      	str	r1, [sp, #24]
 801b94e:	ee10 aa10 	vmov	sl, s0
 801b952:	4604      	mov	r4, r0
 801b954:	9209      	str	r2, [sp, #36]	; 0x24
 801b956:	930c      	str	r3, [sp, #48]	; 0x30
 801b958:	46bb      	mov	fp, r7
 801b95a:	b975      	cbnz	r5, 801b97a <_dtoa_r+0x42>
 801b95c:	2010      	movs	r0, #16
 801b95e:	f000 fffd 	bl	801c95c <malloc>
 801b962:	4602      	mov	r2, r0
 801b964:	6260      	str	r0, [r4, #36]	; 0x24
 801b966:	b920      	cbnz	r0, 801b972 <_dtoa_r+0x3a>
 801b968:	4ba7      	ldr	r3, [pc, #668]	; (801bc08 <_dtoa_r+0x2d0>)
 801b96a:	21ea      	movs	r1, #234	; 0xea
 801b96c:	48a7      	ldr	r0, [pc, #668]	; (801bc0c <_dtoa_r+0x2d4>)
 801b96e:	f001 fe7f 	bl	801d670 <__assert_func>
 801b972:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b976:	6005      	str	r5, [r0, #0]
 801b978:	60c5      	str	r5, [r0, #12]
 801b97a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b97c:	6819      	ldr	r1, [r3, #0]
 801b97e:	b151      	cbz	r1, 801b996 <_dtoa_r+0x5e>
 801b980:	685a      	ldr	r2, [r3, #4]
 801b982:	604a      	str	r2, [r1, #4]
 801b984:	2301      	movs	r3, #1
 801b986:	4093      	lsls	r3, r2
 801b988:	608b      	str	r3, [r1, #8]
 801b98a:	4620      	mov	r0, r4
 801b98c:	f001 f82e 	bl	801c9ec <_Bfree>
 801b990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b992:	2200      	movs	r2, #0
 801b994:	601a      	str	r2, [r3, #0]
 801b996:	1e3b      	subs	r3, r7, #0
 801b998:	bfaa      	itet	ge
 801b99a:	2300      	movge	r3, #0
 801b99c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801b9a0:	f8c8 3000 	strge.w	r3, [r8]
 801b9a4:	4b9a      	ldr	r3, [pc, #616]	; (801bc10 <_dtoa_r+0x2d8>)
 801b9a6:	bfbc      	itt	lt
 801b9a8:	2201      	movlt	r2, #1
 801b9aa:	f8c8 2000 	strlt.w	r2, [r8]
 801b9ae:	ea33 030b 	bics.w	r3, r3, fp
 801b9b2:	d11b      	bne.n	801b9ec <_dtoa_r+0xb4>
 801b9b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b9b6:	f242 730f 	movw	r3, #9999	; 0x270f
 801b9ba:	6013      	str	r3, [r2, #0]
 801b9bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b9c0:	4333      	orrs	r3, r6
 801b9c2:	f000 8592 	beq.w	801c4ea <_dtoa_r+0xbb2>
 801b9c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b9c8:	b963      	cbnz	r3, 801b9e4 <_dtoa_r+0xac>
 801b9ca:	4b92      	ldr	r3, [pc, #584]	; (801bc14 <_dtoa_r+0x2dc>)
 801b9cc:	e022      	b.n	801ba14 <_dtoa_r+0xdc>
 801b9ce:	4b92      	ldr	r3, [pc, #584]	; (801bc18 <_dtoa_r+0x2e0>)
 801b9d0:	9301      	str	r3, [sp, #4]
 801b9d2:	3308      	adds	r3, #8
 801b9d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b9d6:	6013      	str	r3, [r2, #0]
 801b9d8:	9801      	ldr	r0, [sp, #4]
 801b9da:	b013      	add	sp, #76	; 0x4c
 801b9dc:	ecbd 8b04 	vpop	{d8-d9}
 801b9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9e4:	4b8b      	ldr	r3, [pc, #556]	; (801bc14 <_dtoa_r+0x2dc>)
 801b9e6:	9301      	str	r3, [sp, #4]
 801b9e8:	3303      	adds	r3, #3
 801b9ea:	e7f3      	b.n	801b9d4 <_dtoa_r+0x9c>
 801b9ec:	2200      	movs	r2, #0
 801b9ee:	2300      	movs	r3, #0
 801b9f0:	4650      	mov	r0, sl
 801b9f2:	4659      	mov	r1, fp
 801b9f4:	f7e5 f840 	bl	8000a78 <__aeabi_dcmpeq>
 801b9f8:	ec4b ab19 	vmov	d9, sl, fp
 801b9fc:	4680      	mov	r8, r0
 801b9fe:	b158      	cbz	r0, 801ba18 <_dtoa_r+0xe0>
 801ba00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ba02:	2301      	movs	r3, #1
 801ba04:	6013      	str	r3, [r2, #0]
 801ba06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	f000 856b 	beq.w	801c4e4 <_dtoa_r+0xbac>
 801ba0e:	4883      	ldr	r0, [pc, #524]	; (801bc1c <_dtoa_r+0x2e4>)
 801ba10:	6018      	str	r0, [r3, #0]
 801ba12:	1e43      	subs	r3, r0, #1
 801ba14:	9301      	str	r3, [sp, #4]
 801ba16:	e7df      	b.n	801b9d8 <_dtoa_r+0xa0>
 801ba18:	ec4b ab10 	vmov	d0, sl, fp
 801ba1c:	aa10      	add	r2, sp, #64	; 0x40
 801ba1e:	a911      	add	r1, sp, #68	; 0x44
 801ba20:	4620      	mov	r0, r4
 801ba22:	f001 facb 	bl	801cfbc <__d2b>
 801ba26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801ba2a:	ee08 0a10 	vmov	s16, r0
 801ba2e:	2d00      	cmp	r5, #0
 801ba30:	f000 8084 	beq.w	801bb3c <_dtoa_r+0x204>
 801ba34:	ee19 3a90 	vmov	r3, s19
 801ba38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ba3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801ba40:	4656      	mov	r6, sl
 801ba42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801ba46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801ba4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801ba4e:	4b74      	ldr	r3, [pc, #464]	; (801bc20 <_dtoa_r+0x2e8>)
 801ba50:	2200      	movs	r2, #0
 801ba52:	4630      	mov	r0, r6
 801ba54:	4639      	mov	r1, r7
 801ba56:	f7e4 fbef 	bl	8000238 <__aeabi_dsub>
 801ba5a:	a365      	add	r3, pc, #404	; (adr r3, 801bbf0 <_dtoa_r+0x2b8>)
 801ba5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba60:	f7e4 fda2 	bl	80005a8 <__aeabi_dmul>
 801ba64:	a364      	add	r3, pc, #400	; (adr r3, 801bbf8 <_dtoa_r+0x2c0>)
 801ba66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba6a:	f7e4 fbe7 	bl	800023c <__adddf3>
 801ba6e:	4606      	mov	r6, r0
 801ba70:	4628      	mov	r0, r5
 801ba72:	460f      	mov	r7, r1
 801ba74:	f7e4 fd2e 	bl	80004d4 <__aeabi_i2d>
 801ba78:	a361      	add	r3, pc, #388	; (adr r3, 801bc00 <_dtoa_r+0x2c8>)
 801ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba7e:	f7e4 fd93 	bl	80005a8 <__aeabi_dmul>
 801ba82:	4602      	mov	r2, r0
 801ba84:	460b      	mov	r3, r1
 801ba86:	4630      	mov	r0, r6
 801ba88:	4639      	mov	r1, r7
 801ba8a:	f7e4 fbd7 	bl	800023c <__adddf3>
 801ba8e:	4606      	mov	r6, r0
 801ba90:	460f      	mov	r7, r1
 801ba92:	f7e5 f839 	bl	8000b08 <__aeabi_d2iz>
 801ba96:	2200      	movs	r2, #0
 801ba98:	9000      	str	r0, [sp, #0]
 801ba9a:	2300      	movs	r3, #0
 801ba9c:	4630      	mov	r0, r6
 801ba9e:	4639      	mov	r1, r7
 801baa0:	f7e4 fff4 	bl	8000a8c <__aeabi_dcmplt>
 801baa4:	b150      	cbz	r0, 801babc <_dtoa_r+0x184>
 801baa6:	9800      	ldr	r0, [sp, #0]
 801baa8:	f7e4 fd14 	bl	80004d4 <__aeabi_i2d>
 801baac:	4632      	mov	r2, r6
 801baae:	463b      	mov	r3, r7
 801bab0:	f7e4 ffe2 	bl	8000a78 <__aeabi_dcmpeq>
 801bab4:	b910      	cbnz	r0, 801babc <_dtoa_r+0x184>
 801bab6:	9b00      	ldr	r3, [sp, #0]
 801bab8:	3b01      	subs	r3, #1
 801baba:	9300      	str	r3, [sp, #0]
 801babc:	9b00      	ldr	r3, [sp, #0]
 801babe:	2b16      	cmp	r3, #22
 801bac0:	d85a      	bhi.n	801bb78 <_dtoa_r+0x240>
 801bac2:	9a00      	ldr	r2, [sp, #0]
 801bac4:	4b57      	ldr	r3, [pc, #348]	; (801bc24 <_dtoa_r+0x2ec>)
 801bac6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801baca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bace:	ec51 0b19 	vmov	r0, r1, d9
 801bad2:	f7e4 ffdb 	bl	8000a8c <__aeabi_dcmplt>
 801bad6:	2800      	cmp	r0, #0
 801bad8:	d050      	beq.n	801bb7c <_dtoa_r+0x244>
 801bada:	9b00      	ldr	r3, [sp, #0]
 801badc:	3b01      	subs	r3, #1
 801bade:	9300      	str	r3, [sp, #0]
 801bae0:	2300      	movs	r3, #0
 801bae2:	930b      	str	r3, [sp, #44]	; 0x2c
 801bae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bae6:	1b5d      	subs	r5, r3, r5
 801bae8:	1e6b      	subs	r3, r5, #1
 801baea:	9305      	str	r3, [sp, #20]
 801baec:	bf45      	ittet	mi
 801baee:	f1c5 0301 	rsbmi	r3, r5, #1
 801baf2:	9304      	strmi	r3, [sp, #16]
 801baf4:	2300      	movpl	r3, #0
 801baf6:	2300      	movmi	r3, #0
 801baf8:	bf4c      	ite	mi
 801bafa:	9305      	strmi	r3, [sp, #20]
 801bafc:	9304      	strpl	r3, [sp, #16]
 801bafe:	9b00      	ldr	r3, [sp, #0]
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	db3d      	blt.n	801bb80 <_dtoa_r+0x248>
 801bb04:	9b05      	ldr	r3, [sp, #20]
 801bb06:	9a00      	ldr	r2, [sp, #0]
 801bb08:	920a      	str	r2, [sp, #40]	; 0x28
 801bb0a:	4413      	add	r3, r2
 801bb0c:	9305      	str	r3, [sp, #20]
 801bb0e:	2300      	movs	r3, #0
 801bb10:	9307      	str	r3, [sp, #28]
 801bb12:	9b06      	ldr	r3, [sp, #24]
 801bb14:	2b09      	cmp	r3, #9
 801bb16:	f200 8089 	bhi.w	801bc2c <_dtoa_r+0x2f4>
 801bb1a:	2b05      	cmp	r3, #5
 801bb1c:	bfc4      	itt	gt
 801bb1e:	3b04      	subgt	r3, #4
 801bb20:	9306      	strgt	r3, [sp, #24]
 801bb22:	9b06      	ldr	r3, [sp, #24]
 801bb24:	f1a3 0302 	sub.w	r3, r3, #2
 801bb28:	bfcc      	ite	gt
 801bb2a:	2500      	movgt	r5, #0
 801bb2c:	2501      	movle	r5, #1
 801bb2e:	2b03      	cmp	r3, #3
 801bb30:	f200 8087 	bhi.w	801bc42 <_dtoa_r+0x30a>
 801bb34:	e8df f003 	tbb	[pc, r3]
 801bb38:	59383a2d 	.word	0x59383a2d
 801bb3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801bb40:	441d      	add	r5, r3
 801bb42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801bb46:	2b20      	cmp	r3, #32
 801bb48:	bfc1      	itttt	gt
 801bb4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801bb4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801bb52:	fa0b f303 	lslgt.w	r3, fp, r3
 801bb56:	fa26 f000 	lsrgt.w	r0, r6, r0
 801bb5a:	bfda      	itte	le
 801bb5c:	f1c3 0320 	rsble	r3, r3, #32
 801bb60:	fa06 f003 	lslle.w	r0, r6, r3
 801bb64:	4318      	orrgt	r0, r3
 801bb66:	f7e4 fca5 	bl	80004b4 <__aeabi_ui2d>
 801bb6a:	2301      	movs	r3, #1
 801bb6c:	4606      	mov	r6, r0
 801bb6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801bb72:	3d01      	subs	r5, #1
 801bb74:	930e      	str	r3, [sp, #56]	; 0x38
 801bb76:	e76a      	b.n	801ba4e <_dtoa_r+0x116>
 801bb78:	2301      	movs	r3, #1
 801bb7a:	e7b2      	b.n	801bae2 <_dtoa_r+0x1aa>
 801bb7c:	900b      	str	r0, [sp, #44]	; 0x2c
 801bb7e:	e7b1      	b.n	801bae4 <_dtoa_r+0x1ac>
 801bb80:	9b04      	ldr	r3, [sp, #16]
 801bb82:	9a00      	ldr	r2, [sp, #0]
 801bb84:	1a9b      	subs	r3, r3, r2
 801bb86:	9304      	str	r3, [sp, #16]
 801bb88:	4253      	negs	r3, r2
 801bb8a:	9307      	str	r3, [sp, #28]
 801bb8c:	2300      	movs	r3, #0
 801bb8e:	930a      	str	r3, [sp, #40]	; 0x28
 801bb90:	e7bf      	b.n	801bb12 <_dtoa_r+0x1da>
 801bb92:	2300      	movs	r3, #0
 801bb94:	9308      	str	r3, [sp, #32]
 801bb96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	dc55      	bgt.n	801bc48 <_dtoa_r+0x310>
 801bb9c:	2301      	movs	r3, #1
 801bb9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bba2:	461a      	mov	r2, r3
 801bba4:	9209      	str	r2, [sp, #36]	; 0x24
 801bba6:	e00c      	b.n	801bbc2 <_dtoa_r+0x28a>
 801bba8:	2301      	movs	r3, #1
 801bbaa:	e7f3      	b.n	801bb94 <_dtoa_r+0x25c>
 801bbac:	2300      	movs	r3, #0
 801bbae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bbb0:	9308      	str	r3, [sp, #32]
 801bbb2:	9b00      	ldr	r3, [sp, #0]
 801bbb4:	4413      	add	r3, r2
 801bbb6:	9302      	str	r3, [sp, #8]
 801bbb8:	3301      	adds	r3, #1
 801bbba:	2b01      	cmp	r3, #1
 801bbbc:	9303      	str	r3, [sp, #12]
 801bbbe:	bfb8      	it	lt
 801bbc0:	2301      	movlt	r3, #1
 801bbc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bbc4:	2200      	movs	r2, #0
 801bbc6:	6042      	str	r2, [r0, #4]
 801bbc8:	2204      	movs	r2, #4
 801bbca:	f102 0614 	add.w	r6, r2, #20
 801bbce:	429e      	cmp	r6, r3
 801bbd0:	6841      	ldr	r1, [r0, #4]
 801bbd2:	d93d      	bls.n	801bc50 <_dtoa_r+0x318>
 801bbd4:	4620      	mov	r0, r4
 801bbd6:	f000 fec9 	bl	801c96c <_Balloc>
 801bbda:	9001      	str	r0, [sp, #4]
 801bbdc:	2800      	cmp	r0, #0
 801bbde:	d13b      	bne.n	801bc58 <_dtoa_r+0x320>
 801bbe0:	4b11      	ldr	r3, [pc, #68]	; (801bc28 <_dtoa_r+0x2f0>)
 801bbe2:	4602      	mov	r2, r0
 801bbe4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801bbe8:	e6c0      	b.n	801b96c <_dtoa_r+0x34>
 801bbea:	2301      	movs	r3, #1
 801bbec:	e7df      	b.n	801bbae <_dtoa_r+0x276>
 801bbee:	bf00      	nop
 801bbf0:	636f4361 	.word	0x636f4361
 801bbf4:	3fd287a7 	.word	0x3fd287a7
 801bbf8:	8b60c8b3 	.word	0x8b60c8b3
 801bbfc:	3fc68a28 	.word	0x3fc68a28
 801bc00:	509f79fb 	.word	0x509f79fb
 801bc04:	3fd34413 	.word	0x3fd34413
 801bc08:	0801dda5 	.word	0x0801dda5
 801bc0c:	0801ddbc 	.word	0x0801ddbc
 801bc10:	7ff00000 	.word	0x7ff00000
 801bc14:	0801dda1 	.word	0x0801dda1
 801bc18:	0801dd98 	.word	0x0801dd98
 801bc1c:	0801dd75 	.word	0x0801dd75
 801bc20:	3ff80000 	.word	0x3ff80000
 801bc24:	0801df10 	.word	0x0801df10
 801bc28:	0801de17 	.word	0x0801de17
 801bc2c:	2501      	movs	r5, #1
 801bc2e:	2300      	movs	r3, #0
 801bc30:	9306      	str	r3, [sp, #24]
 801bc32:	9508      	str	r5, [sp, #32]
 801bc34:	f04f 33ff 	mov.w	r3, #4294967295
 801bc38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bc3c:	2200      	movs	r2, #0
 801bc3e:	2312      	movs	r3, #18
 801bc40:	e7b0      	b.n	801bba4 <_dtoa_r+0x26c>
 801bc42:	2301      	movs	r3, #1
 801bc44:	9308      	str	r3, [sp, #32]
 801bc46:	e7f5      	b.n	801bc34 <_dtoa_r+0x2fc>
 801bc48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bc4e:	e7b8      	b.n	801bbc2 <_dtoa_r+0x28a>
 801bc50:	3101      	adds	r1, #1
 801bc52:	6041      	str	r1, [r0, #4]
 801bc54:	0052      	lsls	r2, r2, #1
 801bc56:	e7b8      	b.n	801bbca <_dtoa_r+0x292>
 801bc58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bc5a:	9a01      	ldr	r2, [sp, #4]
 801bc5c:	601a      	str	r2, [r3, #0]
 801bc5e:	9b03      	ldr	r3, [sp, #12]
 801bc60:	2b0e      	cmp	r3, #14
 801bc62:	f200 809d 	bhi.w	801bda0 <_dtoa_r+0x468>
 801bc66:	2d00      	cmp	r5, #0
 801bc68:	f000 809a 	beq.w	801bda0 <_dtoa_r+0x468>
 801bc6c:	9b00      	ldr	r3, [sp, #0]
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	dd32      	ble.n	801bcd8 <_dtoa_r+0x3a0>
 801bc72:	4ab7      	ldr	r2, [pc, #732]	; (801bf50 <_dtoa_r+0x618>)
 801bc74:	f003 030f 	and.w	r3, r3, #15
 801bc78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801bc7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bc80:	9b00      	ldr	r3, [sp, #0]
 801bc82:	05d8      	lsls	r0, r3, #23
 801bc84:	ea4f 1723 	mov.w	r7, r3, asr #4
 801bc88:	d516      	bpl.n	801bcb8 <_dtoa_r+0x380>
 801bc8a:	4bb2      	ldr	r3, [pc, #712]	; (801bf54 <_dtoa_r+0x61c>)
 801bc8c:	ec51 0b19 	vmov	r0, r1, d9
 801bc90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bc94:	f7e4 fdb2 	bl	80007fc <__aeabi_ddiv>
 801bc98:	f007 070f 	and.w	r7, r7, #15
 801bc9c:	4682      	mov	sl, r0
 801bc9e:	468b      	mov	fp, r1
 801bca0:	2503      	movs	r5, #3
 801bca2:	4eac      	ldr	r6, [pc, #688]	; (801bf54 <_dtoa_r+0x61c>)
 801bca4:	b957      	cbnz	r7, 801bcbc <_dtoa_r+0x384>
 801bca6:	4642      	mov	r2, r8
 801bca8:	464b      	mov	r3, r9
 801bcaa:	4650      	mov	r0, sl
 801bcac:	4659      	mov	r1, fp
 801bcae:	f7e4 fda5 	bl	80007fc <__aeabi_ddiv>
 801bcb2:	4682      	mov	sl, r0
 801bcb4:	468b      	mov	fp, r1
 801bcb6:	e028      	b.n	801bd0a <_dtoa_r+0x3d2>
 801bcb8:	2502      	movs	r5, #2
 801bcba:	e7f2      	b.n	801bca2 <_dtoa_r+0x36a>
 801bcbc:	07f9      	lsls	r1, r7, #31
 801bcbe:	d508      	bpl.n	801bcd2 <_dtoa_r+0x39a>
 801bcc0:	4640      	mov	r0, r8
 801bcc2:	4649      	mov	r1, r9
 801bcc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bcc8:	f7e4 fc6e 	bl	80005a8 <__aeabi_dmul>
 801bccc:	3501      	adds	r5, #1
 801bcce:	4680      	mov	r8, r0
 801bcd0:	4689      	mov	r9, r1
 801bcd2:	107f      	asrs	r7, r7, #1
 801bcd4:	3608      	adds	r6, #8
 801bcd6:	e7e5      	b.n	801bca4 <_dtoa_r+0x36c>
 801bcd8:	f000 809b 	beq.w	801be12 <_dtoa_r+0x4da>
 801bcdc:	9b00      	ldr	r3, [sp, #0]
 801bcde:	4f9d      	ldr	r7, [pc, #628]	; (801bf54 <_dtoa_r+0x61c>)
 801bce0:	425e      	negs	r6, r3
 801bce2:	4b9b      	ldr	r3, [pc, #620]	; (801bf50 <_dtoa_r+0x618>)
 801bce4:	f006 020f 	and.w	r2, r6, #15
 801bce8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcf0:	ec51 0b19 	vmov	r0, r1, d9
 801bcf4:	f7e4 fc58 	bl	80005a8 <__aeabi_dmul>
 801bcf8:	1136      	asrs	r6, r6, #4
 801bcfa:	4682      	mov	sl, r0
 801bcfc:	468b      	mov	fp, r1
 801bcfe:	2300      	movs	r3, #0
 801bd00:	2502      	movs	r5, #2
 801bd02:	2e00      	cmp	r6, #0
 801bd04:	d17a      	bne.n	801bdfc <_dtoa_r+0x4c4>
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	d1d3      	bne.n	801bcb2 <_dtoa_r+0x37a>
 801bd0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	f000 8082 	beq.w	801be16 <_dtoa_r+0x4de>
 801bd12:	4b91      	ldr	r3, [pc, #580]	; (801bf58 <_dtoa_r+0x620>)
 801bd14:	2200      	movs	r2, #0
 801bd16:	4650      	mov	r0, sl
 801bd18:	4659      	mov	r1, fp
 801bd1a:	f7e4 feb7 	bl	8000a8c <__aeabi_dcmplt>
 801bd1e:	2800      	cmp	r0, #0
 801bd20:	d079      	beq.n	801be16 <_dtoa_r+0x4de>
 801bd22:	9b03      	ldr	r3, [sp, #12]
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	d076      	beq.n	801be16 <_dtoa_r+0x4de>
 801bd28:	9b02      	ldr	r3, [sp, #8]
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	dd36      	ble.n	801bd9c <_dtoa_r+0x464>
 801bd2e:	9b00      	ldr	r3, [sp, #0]
 801bd30:	4650      	mov	r0, sl
 801bd32:	4659      	mov	r1, fp
 801bd34:	1e5f      	subs	r7, r3, #1
 801bd36:	2200      	movs	r2, #0
 801bd38:	4b88      	ldr	r3, [pc, #544]	; (801bf5c <_dtoa_r+0x624>)
 801bd3a:	f7e4 fc35 	bl	80005a8 <__aeabi_dmul>
 801bd3e:	9e02      	ldr	r6, [sp, #8]
 801bd40:	4682      	mov	sl, r0
 801bd42:	468b      	mov	fp, r1
 801bd44:	3501      	adds	r5, #1
 801bd46:	4628      	mov	r0, r5
 801bd48:	f7e4 fbc4 	bl	80004d4 <__aeabi_i2d>
 801bd4c:	4652      	mov	r2, sl
 801bd4e:	465b      	mov	r3, fp
 801bd50:	f7e4 fc2a 	bl	80005a8 <__aeabi_dmul>
 801bd54:	4b82      	ldr	r3, [pc, #520]	; (801bf60 <_dtoa_r+0x628>)
 801bd56:	2200      	movs	r2, #0
 801bd58:	f7e4 fa70 	bl	800023c <__adddf3>
 801bd5c:	46d0      	mov	r8, sl
 801bd5e:	46d9      	mov	r9, fp
 801bd60:	4682      	mov	sl, r0
 801bd62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801bd66:	2e00      	cmp	r6, #0
 801bd68:	d158      	bne.n	801be1c <_dtoa_r+0x4e4>
 801bd6a:	4b7e      	ldr	r3, [pc, #504]	; (801bf64 <_dtoa_r+0x62c>)
 801bd6c:	2200      	movs	r2, #0
 801bd6e:	4640      	mov	r0, r8
 801bd70:	4649      	mov	r1, r9
 801bd72:	f7e4 fa61 	bl	8000238 <__aeabi_dsub>
 801bd76:	4652      	mov	r2, sl
 801bd78:	465b      	mov	r3, fp
 801bd7a:	4680      	mov	r8, r0
 801bd7c:	4689      	mov	r9, r1
 801bd7e:	f7e4 fea3 	bl	8000ac8 <__aeabi_dcmpgt>
 801bd82:	2800      	cmp	r0, #0
 801bd84:	f040 8295 	bne.w	801c2b2 <_dtoa_r+0x97a>
 801bd88:	4652      	mov	r2, sl
 801bd8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801bd8e:	4640      	mov	r0, r8
 801bd90:	4649      	mov	r1, r9
 801bd92:	f7e4 fe7b 	bl	8000a8c <__aeabi_dcmplt>
 801bd96:	2800      	cmp	r0, #0
 801bd98:	f040 8289 	bne.w	801c2ae <_dtoa_r+0x976>
 801bd9c:	ec5b ab19 	vmov	sl, fp, d9
 801bda0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	f2c0 8148 	blt.w	801c038 <_dtoa_r+0x700>
 801bda8:	9a00      	ldr	r2, [sp, #0]
 801bdaa:	2a0e      	cmp	r2, #14
 801bdac:	f300 8144 	bgt.w	801c038 <_dtoa_r+0x700>
 801bdb0:	4b67      	ldr	r3, [pc, #412]	; (801bf50 <_dtoa_r+0x618>)
 801bdb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bdb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bdba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	f280 80d5 	bge.w	801bf6c <_dtoa_r+0x634>
 801bdc2:	9b03      	ldr	r3, [sp, #12]
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	f300 80d1 	bgt.w	801bf6c <_dtoa_r+0x634>
 801bdca:	f040 826f 	bne.w	801c2ac <_dtoa_r+0x974>
 801bdce:	4b65      	ldr	r3, [pc, #404]	; (801bf64 <_dtoa_r+0x62c>)
 801bdd0:	2200      	movs	r2, #0
 801bdd2:	4640      	mov	r0, r8
 801bdd4:	4649      	mov	r1, r9
 801bdd6:	f7e4 fbe7 	bl	80005a8 <__aeabi_dmul>
 801bdda:	4652      	mov	r2, sl
 801bddc:	465b      	mov	r3, fp
 801bdde:	f7e4 fe69 	bl	8000ab4 <__aeabi_dcmpge>
 801bde2:	9e03      	ldr	r6, [sp, #12]
 801bde4:	4637      	mov	r7, r6
 801bde6:	2800      	cmp	r0, #0
 801bde8:	f040 8245 	bne.w	801c276 <_dtoa_r+0x93e>
 801bdec:	9d01      	ldr	r5, [sp, #4]
 801bdee:	2331      	movs	r3, #49	; 0x31
 801bdf0:	f805 3b01 	strb.w	r3, [r5], #1
 801bdf4:	9b00      	ldr	r3, [sp, #0]
 801bdf6:	3301      	adds	r3, #1
 801bdf8:	9300      	str	r3, [sp, #0]
 801bdfa:	e240      	b.n	801c27e <_dtoa_r+0x946>
 801bdfc:	07f2      	lsls	r2, r6, #31
 801bdfe:	d505      	bpl.n	801be0c <_dtoa_r+0x4d4>
 801be00:	e9d7 2300 	ldrd	r2, r3, [r7]
 801be04:	f7e4 fbd0 	bl	80005a8 <__aeabi_dmul>
 801be08:	3501      	adds	r5, #1
 801be0a:	2301      	movs	r3, #1
 801be0c:	1076      	asrs	r6, r6, #1
 801be0e:	3708      	adds	r7, #8
 801be10:	e777      	b.n	801bd02 <_dtoa_r+0x3ca>
 801be12:	2502      	movs	r5, #2
 801be14:	e779      	b.n	801bd0a <_dtoa_r+0x3d2>
 801be16:	9f00      	ldr	r7, [sp, #0]
 801be18:	9e03      	ldr	r6, [sp, #12]
 801be1a:	e794      	b.n	801bd46 <_dtoa_r+0x40e>
 801be1c:	9901      	ldr	r1, [sp, #4]
 801be1e:	4b4c      	ldr	r3, [pc, #304]	; (801bf50 <_dtoa_r+0x618>)
 801be20:	4431      	add	r1, r6
 801be22:	910d      	str	r1, [sp, #52]	; 0x34
 801be24:	9908      	ldr	r1, [sp, #32]
 801be26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801be2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801be2e:	2900      	cmp	r1, #0
 801be30:	d043      	beq.n	801beba <_dtoa_r+0x582>
 801be32:	494d      	ldr	r1, [pc, #308]	; (801bf68 <_dtoa_r+0x630>)
 801be34:	2000      	movs	r0, #0
 801be36:	f7e4 fce1 	bl	80007fc <__aeabi_ddiv>
 801be3a:	4652      	mov	r2, sl
 801be3c:	465b      	mov	r3, fp
 801be3e:	f7e4 f9fb 	bl	8000238 <__aeabi_dsub>
 801be42:	9d01      	ldr	r5, [sp, #4]
 801be44:	4682      	mov	sl, r0
 801be46:	468b      	mov	fp, r1
 801be48:	4649      	mov	r1, r9
 801be4a:	4640      	mov	r0, r8
 801be4c:	f7e4 fe5c 	bl	8000b08 <__aeabi_d2iz>
 801be50:	4606      	mov	r6, r0
 801be52:	f7e4 fb3f 	bl	80004d4 <__aeabi_i2d>
 801be56:	4602      	mov	r2, r0
 801be58:	460b      	mov	r3, r1
 801be5a:	4640      	mov	r0, r8
 801be5c:	4649      	mov	r1, r9
 801be5e:	f7e4 f9eb 	bl	8000238 <__aeabi_dsub>
 801be62:	3630      	adds	r6, #48	; 0x30
 801be64:	f805 6b01 	strb.w	r6, [r5], #1
 801be68:	4652      	mov	r2, sl
 801be6a:	465b      	mov	r3, fp
 801be6c:	4680      	mov	r8, r0
 801be6e:	4689      	mov	r9, r1
 801be70:	f7e4 fe0c 	bl	8000a8c <__aeabi_dcmplt>
 801be74:	2800      	cmp	r0, #0
 801be76:	d163      	bne.n	801bf40 <_dtoa_r+0x608>
 801be78:	4642      	mov	r2, r8
 801be7a:	464b      	mov	r3, r9
 801be7c:	4936      	ldr	r1, [pc, #216]	; (801bf58 <_dtoa_r+0x620>)
 801be7e:	2000      	movs	r0, #0
 801be80:	f7e4 f9da 	bl	8000238 <__aeabi_dsub>
 801be84:	4652      	mov	r2, sl
 801be86:	465b      	mov	r3, fp
 801be88:	f7e4 fe00 	bl	8000a8c <__aeabi_dcmplt>
 801be8c:	2800      	cmp	r0, #0
 801be8e:	f040 80b5 	bne.w	801bffc <_dtoa_r+0x6c4>
 801be92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801be94:	429d      	cmp	r5, r3
 801be96:	d081      	beq.n	801bd9c <_dtoa_r+0x464>
 801be98:	4b30      	ldr	r3, [pc, #192]	; (801bf5c <_dtoa_r+0x624>)
 801be9a:	2200      	movs	r2, #0
 801be9c:	4650      	mov	r0, sl
 801be9e:	4659      	mov	r1, fp
 801bea0:	f7e4 fb82 	bl	80005a8 <__aeabi_dmul>
 801bea4:	4b2d      	ldr	r3, [pc, #180]	; (801bf5c <_dtoa_r+0x624>)
 801bea6:	4682      	mov	sl, r0
 801bea8:	468b      	mov	fp, r1
 801beaa:	4640      	mov	r0, r8
 801beac:	4649      	mov	r1, r9
 801beae:	2200      	movs	r2, #0
 801beb0:	f7e4 fb7a 	bl	80005a8 <__aeabi_dmul>
 801beb4:	4680      	mov	r8, r0
 801beb6:	4689      	mov	r9, r1
 801beb8:	e7c6      	b.n	801be48 <_dtoa_r+0x510>
 801beba:	4650      	mov	r0, sl
 801bebc:	4659      	mov	r1, fp
 801bebe:	f7e4 fb73 	bl	80005a8 <__aeabi_dmul>
 801bec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bec4:	9d01      	ldr	r5, [sp, #4]
 801bec6:	930f      	str	r3, [sp, #60]	; 0x3c
 801bec8:	4682      	mov	sl, r0
 801beca:	468b      	mov	fp, r1
 801becc:	4649      	mov	r1, r9
 801bece:	4640      	mov	r0, r8
 801bed0:	f7e4 fe1a 	bl	8000b08 <__aeabi_d2iz>
 801bed4:	4606      	mov	r6, r0
 801bed6:	f7e4 fafd 	bl	80004d4 <__aeabi_i2d>
 801beda:	3630      	adds	r6, #48	; 0x30
 801bedc:	4602      	mov	r2, r0
 801bede:	460b      	mov	r3, r1
 801bee0:	4640      	mov	r0, r8
 801bee2:	4649      	mov	r1, r9
 801bee4:	f7e4 f9a8 	bl	8000238 <__aeabi_dsub>
 801bee8:	f805 6b01 	strb.w	r6, [r5], #1
 801beec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801beee:	429d      	cmp	r5, r3
 801bef0:	4680      	mov	r8, r0
 801bef2:	4689      	mov	r9, r1
 801bef4:	f04f 0200 	mov.w	r2, #0
 801bef8:	d124      	bne.n	801bf44 <_dtoa_r+0x60c>
 801befa:	4b1b      	ldr	r3, [pc, #108]	; (801bf68 <_dtoa_r+0x630>)
 801befc:	4650      	mov	r0, sl
 801befe:	4659      	mov	r1, fp
 801bf00:	f7e4 f99c 	bl	800023c <__adddf3>
 801bf04:	4602      	mov	r2, r0
 801bf06:	460b      	mov	r3, r1
 801bf08:	4640      	mov	r0, r8
 801bf0a:	4649      	mov	r1, r9
 801bf0c:	f7e4 fddc 	bl	8000ac8 <__aeabi_dcmpgt>
 801bf10:	2800      	cmp	r0, #0
 801bf12:	d173      	bne.n	801bffc <_dtoa_r+0x6c4>
 801bf14:	4652      	mov	r2, sl
 801bf16:	465b      	mov	r3, fp
 801bf18:	4913      	ldr	r1, [pc, #76]	; (801bf68 <_dtoa_r+0x630>)
 801bf1a:	2000      	movs	r0, #0
 801bf1c:	f7e4 f98c 	bl	8000238 <__aeabi_dsub>
 801bf20:	4602      	mov	r2, r0
 801bf22:	460b      	mov	r3, r1
 801bf24:	4640      	mov	r0, r8
 801bf26:	4649      	mov	r1, r9
 801bf28:	f7e4 fdb0 	bl	8000a8c <__aeabi_dcmplt>
 801bf2c:	2800      	cmp	r0, #0
 801bf2e:	f43f af35 	beq.w	801bd9c <_dtoa_r+0x464>
 801bf32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bf34:	1e6b      	subs	r3, r5, #1
 801bf36:	930f      	str	r3, [sp, #60]	; 0x3c
 801bf38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bf3c:	2b30      	cmp	r3, #48	; 0x30
 801bf3e:	d0f8      	beq.n	801bf32 <_dtoa_r+0x5fa>
 801bf40:	9700      	str	r7, [sp, #0]
 801bf42:	e049      	b.n	801bfd8 <_dtoa_r+0x6a0>
 801bf44:	4b05      	ldr	r3, [pc, #20]	; (801bf5c <_dtoa_r+0x624>)
 801bf46:	f7e4 fb2f 	bl	80005a8 <__aeabi_dmul>
 801bf4a:	4680      	mov	r8, r0
 801bf4c:	4689      	mov	r9, r1
 801bf4e:	e7bd      	b.n	801becc <_dtoa_r+0x594>
 801bf50:	0801df10 	.word	0x0801df10
 801bf54:	0801dee8 	.word	0x0801dee8
 801bf58:	3ff00000 	.word	0x3ff00000
 801bf5c:	40240000 	.word	0x40240000
 801bf60:	401c0000 	.word	0x401c0000
 801bf64:	40140000 	.word	0x40140000
 801bf68:	3fe00000 	.word	0x3fe00000
 801bf6c:	9d01      	ldr	r5, [sp, #4]
 801bf6e:	4656      	mov	r6, sl
 801bf70:	465f      	mov	r7, fp
 801bf72:	4642      	mov	r2, r8
 801bf74:	464b      	mov	r3, r9
 801bf76:	4630      	mov	r0, r6
 801bf78:	4639      	mov	r1, r7
 801bf7a:	f7e4 fc3f 	bl	80007fc <__aeabi_ddiv>
 801bf7e:	f7e4 fdc3 	bl	8000b08 <__aeabi_d2iz>
 801bf82:	4682      	mov	sl, r0
 801bf84:	f7e4 faa6 	bl	80004d4 <__aeabi_i2d>
 801bf88:	4642      	mov	r2, r8
 801bf8a:	464b      	mov	r3, r9
 801bf8c:	f7e4 fb0c 	bl	80005a8 <__aeabi_dmul>
 801bf90:	4602      	mov	r2, r0
 801bf92:	460b      	mov	r3, r1
 801bf94:	4630      	mov	r0, r6
 801bf96:	4639      	mov	r1, r7
 801bf98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801bf9c:	f7e4 f94c 	bl	8000238 <__aeabi_dsub>
 801bfa0:	f805 6b01 	strb.w	r6, [r5], #1
 801bfa4:	9e01      	ldr	r6, [sp, #4]
 801bfa6:	9f03      	ldr	r7, [sp, #12]
 801bfa8:	1bae      	subs	r6, r5, r6
 801bfaa:	42b7      	cmp	r7, r6
 801bfac:	4602      	mov	r2, r0
 801bfae:	460b      	mov	r3, r1
 801bfb0:	d135      	bne.n	801c01e <_dtoa_r+0x6e6>
 801bfb2:	f7e4 f943 	bl	800023c <__adddf3>
 801bfb6:	4642      	mov	r2, r8
 801bfb8:	464b      	mov	r3, r9
 801bfba:	4606      	mov	r6, r0
 801bfbc:	460f      	mov	r7, r1
 801bfbe:	f7e4 fd83 	bl	8000ac8 <__aeabi_dcmpgt>
 801bfc2:	b9d0      	cbnz	r0, 801bffa <_dtoa_r+0x6c2>
 801bfc4:	4642      	mov	r2, r8
 801bfc6:	464b      	mov	r3, r9
 801bfc8:	4630      	mov	r0, r6
 801bfca:	4639      	mov	r1, r7
 801bfcc:	f7e4 fd54 	bl	8000a78 <__aeabi_dcmpeq>
 801bfd0:	b110      	cbz	r0, 801bfd8 <_dtoa_r+0x6a0>
 801bfd2:	f01a 0f01 	tst.w	sl, #1
 801bfd6:	d110      	bne.n	801bffa <_dtoa_r+0x6c2>
 801bfd8:	4620      	mov	r0, r4
 801bfda:	ee18 1a10 	vmov	r1, s16
 801bfde:	f000 fd05 	bl	801c9ec <_Bfree>
 801bfe2:	2300      	movs	r3, #0
 801bfe4:	9800      	ldr	r0, [sp, #0]
 801bfe6:	702b      	strb	r3, [r5, #0]
 801bfe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bfea:	3001      	adds	r0, #1
 801bfec:	6018      	str	r0, [r3, #0]
 801bfee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	f43f acf1 	beq.w	801b9d8 <_dtoa_r+0xa0>
 801bff6:	601d      	str	r5, [r3, #0]
 801bff8:	e4ee      	b.n	801b9d8 <_dtoa_r+0xa0>
 801bffa:	9f00      	ldr	r7, [sp, #0]
 801bffc:	462b      	mov	r3, r5
 801bffe:	461d      	mov	r5, r3
 801c000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c004:	2a39      	cmp	r2, #57	; 0x39
 801c006:	d106      	bne.n	801c016 <_dtoa_r+0x6de>
 801c008:	9a01      	ldr	r2, [sp, #4]
 801c00a:	429a      	cmp	r2, r3
 801c00c:	d1f7      	bne.n	801bffe <_dtoa_r+0x6c6>
 801c00e:	9901      	ldr	r1, [sp, #4]
 801c010:	2230      	movs	r2, #48	; 0x30
 801c012:	3701      	adds	r7, #1
 801c014:	700a      	strb	r2, [r1, #0]
 801c016:	781a      	ldrb	r2, [r3, #0]
 801c018:	3201      	adds	r2, #1
 801c01a:	701a      	strb	r2, [r3, #0]
 801c01c:	e790      	b.n	801bf40 <_dtoa_r+0x608>
 801c01e:	4ba6      	ldr	r3, [pc, #664]	; (801c2b8 <_dtoa_r+0x980>)
 801c020:	2200      	movs	r2, #0
 801c022:	f7e4 fac1 	bl	80005a8 <__aeabi_dmul>
 801c026:	2200      	movs	r2, #0
 801c028:	2300      	movs	r3, #0
 801c02a:	4606      	mov	r6, r0
 801c02c:	460f      	mov	r7, r1
 801c02e:	f7e4 fd23 	bl	8000a78 <__aeabi_dcmpeq>
 801c032:	2800      	cmp	r0, #0
 801c034:	d09d      	beq.n	801bf72 <_dtoa_r+0x63a>
 801c036:	e7cf      	b.n	801bfd8 <_dtoa_r+0x6a0>
 801c038:	9a08      	ldr	r2, [sp, #32]
 801c03a:	2a00      	cmp	r2, #0
 801c03c:	f000 80d7 	beq.w	801c1ee <_dtoa_r+0x8b6>
 801c040:	9a06      	ldr	r2, [sp, #24]
 801c042:	2a01      	cmp	r2, #1
 801c044:	f300 80ba 	bgt.w	801c1bc <_dtoa_r+0x884>
 801c048:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c04a:	2a00      	cmp	r2, #0
 801c04c:	f000 80b2 	beq.w	801c1b4 <_dtoa_r+0x87c>
 801c050:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c054:	9e07      	ldr	r6, [sp, #28]
 801c056:	9d04      	ldr	r5, [sp, #16]
 801c058:	9a04      	ldr	r2, [sp, #16]
 801c05a:	441a      	add	r2, r3
 801c05c:	9204      	str	r2, [sp, #16]
 801c05e:	9a05      	ldr	r2, [sp, #20]
 801c060:	2101      	movs	r1, #1
 801c062:	441a      	add	r2, r3
 801c064:	4620      	mov	r0, r4
 801c066:	9205      	str	r2, [sp, #20]
 801c068:	f000 fd78 	bl	801cb5c <__i2b>
 801c06c:	4607      	mov	r7, r0
 801c06e:	2d00      	cmp	r5, #0
 801c070:	dd0c      	ble.n	801c08c <_dtoa_r+0x754>
 801c072:	9b05      	ldr	r3, [sp, #20]
 801c074:	2b00      	cmp	r3, #0
 801c076:	dd09      	ble.n	801c08c <_dtoa_r+0x754>
 801c078:	42ab      	cmp	r3, r5
 801c07a:	9a04      	ldr	r2, [sp, #16]
 801c07c:	bfa8      	it	ge
 801c07e:	462b      	movge	r3, r5
 801c080:	1ad2      	subs	r2, r2, r3
 801c082:	9204      	str	r2, [sp, #16]
 801c084:	9a05      	ldr	r2, [sp, #20]
 801c086:	1aed      	subs	r5, r5, r3
 801c088:	1ad3      	subs	r3, r2, r3
 801c08a:	9305      	str	r3, [sp, #20]
 801c08c:	9b07      	ldr	r3, [sp, #28]
 801c08e:	b31b      	cbz	r3, 801c0d8 <_dtoa_r+0x7a0>
 801c090:	9b08      	ldr	r3, [sp, #32]
 801c092:	2b00      	cmp	r3, #0
 801c094:	f000 80af 	beq.w	801c1f6 <_dtoa_r+0x8be>
 801c098:	2e00      	cmp	r6, #0
 801c09a:	dd13      	ble.n	801c0c4 <_dtoa_r+0x78c>
 801c09c:	4639      	mov	r1, r7
 801c09e:	4632      	mov	r2, r6
 801c0a0:	4620      	mov	r0, r4
 801c0a2:	f000 fe1b 	bl	801ccdc <__pow5mult>
 801c0a6:	ee18 2a10 	vmov	r2, s16
 801c0aa:	4601      	mov	r1, r0
 801c0ac:	4607      	mov	r7, r0
 801c0ae:	4620      	mov	r0, r4
 801c0b0:	f000 fd6a 	bl	801cb88 <__multiply>
 801c0b4:	ee18 1a10 	vmov	r1, s16
 801c0b8:	4680      	mov	r8, r0
 801c0ba:	4620      	mov	r0, r4
 801c0bc:	f000 fc96 	bl	801c9ec <_Bfree>
 801c0c0:	ee08 8a10 	vmov	s16, r8
 801c0c4:	9b07      	ldr	r3, [sp, #28]
 801c0c6:	1b9a      	subs	r2, r3, r6
 801c0c8:	d006      	beq.n	801c0d8 <_dtoa_r+0x7a0>
 801c0ca:	ee18 1a10 	vmov	r1, s16
 801c0ce:	4620      	mov	r0, r4
 801c0d0:	f000 fe04 	bl	801ccdc <__pow5mult>
 801c0d4:	ee08 0a10 	vmov	s16, r0
 801c0d8:	2101      	movs	r1, #1
 801c0da:	4620      	mov	r0, r4
 801c0dc:	f000 fd3e 	bl	801cb5c <__i2b>
 801c0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	4606      	mov	r6, r0
 801c0e6:	f340 8088 	ble.w	801c1fa <_dtoa_r+0x8c2>
 801c0ea:	461a      	mov	r2, r3
 801c0ec:	4601      	mov	r1, r0
 801c0ee:	4620      	mov	r0, r4
 801c0f0:	f000 fdf4 	bl	801ccdc <__pow5mult>
 801c0f4:	9b06      	ldr	r3, [sp, #24]
 801c0f6:	2b01      	cmp	r3, #1
 801c0f8:	4606      	mov	r6, r0
 801c0fa:	f340 8081 	ble.w	801c200 <_dtoa_r+0x8c8>
 801c0fe:	f04f 0800 	mov.w	r8, #0
 801c102:	6933      	ldr	r3, [r6, #16]
 801c104:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c108:	6918      	ldr	r0, [r3, #16]
 801c10a:	f000 fcd7 	bl	801cabc <__hi0bits>
 801c10e:	f1c0 0020 	rsb	r0, r0, #32
 801c112:	9b05      	ldr	r3, [sp, #20]
 801c114:	4418      	add	r0, r3
 801c116:	f010 001f 	ands.w	r0, r0, #31
 801c11a:	f000 8092 	beq.w	801c242 <_dtoa_r+0x90a>
 801c11e:	f1c0 0320 	rsb	r3, r0, #32
 801c122:	2b04      	cmp	r3, #4
 801c124:	f340 808a 	ble.w	801c23c <_dtoa_r+0x904>
 801c128:	f1c0 001c 	rsb	r0, r0, #28
 801c12c:	9b04      	ldr	r3, [sp, #16]
 801c12e:	4403      	add	r3, r0
 801c130:	9304      	str	r3, [sp, #16]
 801c132:	9b05      	ldr	r3, [sp, #20]
 801c134:	4403      	add	r3, r0
 801c136:	4405      	add	r5, r0
 801c138:	9305      	str	r3, [sp, #20]
 801c13a:	9b04      	ldr	r3, [sp, #16]
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	dd07      	ble.n	801c150 <_dtoa_r+0x818>
 801c140:	ee18 1a10 	vmov	r1, s16
 801c144:	461a      	mov	r2, r3
 801c146:	4620      	mov	r0, r4
 801c148:	f000 fe22 	bl	801cd90 <__lshift>
 801c14c:	ee08 0a10 	vmov	s16, r0
 801c150:	9b05      	ldr	r3, [sp, #20]
 801c152:	2b00      	cmp	r3, #0
 801c154:	dd05      	ble.n	801c162 <_dtoa_r+0x82a>
 801c156:	4631      	mov	r1, r6
 801c158:	461a      	mov	r2, r3
 801c15a:	4620      	mov	r0, r4
 801c15c:	f000 fe18 	bl	801cd90 <__lshift>
 801c160:	4606      	mov	r6, r0
 801c162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c164:	2b00      	cmp	r3, #0
 801c166:	d06e      	beq.n	801c246 <_dtoa_r+0x90e>
 801c168:	ee18 0a10 	vmov	r0, s16
 801c16c:	4631      	mov	r1, r6
 801c16e:	f000 fe7f 	bl	801ce70 <__mcmp>
 801c172:	2800      	cmp	r0, #0
 801c174:	da67      	bge.n	801c246 <_dtoa_r+0x90e>
 801c176:	9b00      	ldr	r3, [sp, #0]
 801c178:	3b01      	subs	r3, #1
 801c17a:	ee18 1a10 	vmov	r1, s16
 801c17e:	9300      	str	r3, [sp, #0]
 801c180:	220a      	movs	r2, #10
 801c182:	2300      	movs	r3, #0
 801c184:	4620      	mov	r0, r4
 801c186:	f000 fc53 	bl	801ca30 <__multadd>
 801c18a:	9b08      	ldr	r3, [sp, #32]
 801c18c:	ee08 0a10 	vmov	s16, r0
 801c190:	2b00      	cmp	r3, #0
 801c192:	f000 81b1 	beq.w	801c4f8 <_dtoa_r+0xbc0>
 801c196:	2300      	movs	r3, #0
 801c198:	4639      	mov	r1, r7
 801c19a:	220a      	movs	r2, #10
 801c19c:	4620      	mov	r0, r4
 801c19e:	f000 fc47 	bl	801ca30 <__multadd>
 801c1a2:	9b02      	ldr	r3, [sp, #8]
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	4607      	mov	r7, r0
 801c1a8:	f300 808e 	bgt.w	801c2c8 <_dtoa_r+0x990>
 801c1ac:	9b06      	ldr	r3, [sp, #24]
 801c1ae:	2b02      	cmp	r3, #2
 801c1b0:	dc51      	bgt.n	801c256 <_dtoa_r+0x91e>
 801c1b2:	e089      	b.n	801c2c8 <_dtoa_r+0x990>
 801c1b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c1b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c1ba:	e74b      	b.n	801c054 <_dtoa_r+0x71c>
 801c1bc:	9b03      	ldr	r3, [sp, #12]
 801c1be:	1e5e      	subs	r6, r3, #1
 801c1c0:	9b07      	ldr	r3, [sp, #28]
 801c1c2:	42b3      	cmp	r3, r6
 801c1c4:	bfbf      	itttt	lt
 801c1c6:	9b07      	ldrlt	r3, [sp, #28]
 801c1c8:	9607      	strlt	r6, [sp, #28]
 801c1ca:	1af2      	sublt	r2, r6, r3
 801c1cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801c1ce:	bfb6      	itet	lt
 801c1d0:	189b      	addlt	r3, r3, r2
 801c1d2:	1b9e      	subge	r6, r3, r6
 801c1d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 801c1d6:	9b03      	ldr	r3, [sp, #12]
 801c1d8:	bfb8      	it	lt
 801c1da:	2600      	movlt	r6, #0
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	bfb7      	itett	lt
 801c1e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801c1e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801c1e8:	1a9d      	sublt	r5, r3, r2
 801c1ea:	2300      	movlt	r3, #0
 801c1ec:	e734      	b.n	801c058 <_dtoa_r+0x720>
 801c1ee:	9e07      	ldr	r6, [sp, #28]
 801c1f0:	9d04      	ldr	r5, [sp, #16]
 801c1f2:	9f08      	ldr	r7, [sp, #32]
 801c1f4:	e73b      	b.n	801c06e <_dtoa_r+0x736>
 801c1f6:	9a07      	ldr	r2, [sp, #28]
 801c1f8:	e767      	b.n	801c0ca <_dtoa_r+0x792>
 801c1fa:	9b06      	ldr	r3, [sp, #24]
 801c1fc:	2b01      	cmp	r3, #1
 801c1fe:	dc18      	bgt.n	801c232 <_dtoa_r+0x8fa>
 801c200:	f1ba 0f00 	cmp.w	sl, #0
 801c204:	d115      	bne.n	801c232 <_dtoa_r+0x8fa>
 801c206:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c20a:	b993      	cbnz	r3, 801c232 <_dtoa_r+0x8fa>
 801c20c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c210:	0d1b      	lsrs	r3, r3, #20
 801c212:	051b      	lsls	r3, r3, #20
 801c214:	b183      	cbz	r3, 801c238 <_dtoa_r+0x900>
 801c216:	9b04      	ldr	r3, [sp, #16]
 801c218:	3301      	adds	r3, #1
 801c21a:	9304      	str	r3, [sp, #16]
 801c21c:	9b05      	ldr	r3, [sp, #20]
 801c21e:	3301      	adds	r3, #1
 801c220:	9305      	str	r3, [sp, #20]
 801c222:	f04f 0801 	mov.w	r8, #1
 801c226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c228:	2b00      	cmp	r3, #0
 801c22a:	f47f af6a 	bne.w	801c102 <_dtoa_r+0x7ca>
 801c22e:	2001      	movs	r0, #1
 801c230:	e76f      	b.n	801c112 <_dtoa_r+0x7da>
 801c232:	f04f 0800 	mov.w	r8, #0
 801c236:	e7f6      	b.n	801c226 <_dtoa_r+0x8ee>
 801c238:	4698      	mov	r8, r3
 801c23a:	e7f4      	b.n	801c226 <_dtoa_r+0x8ee>
 801c23c:	f43f af7d 	beq.w	801c13a <_dtoa_r+0x802>
 801c240:	4618      	mov	r0, r3
 801c242:	301c      	adds	r0, #28
 801c244:	e772      	b.n	801c12c <_dtoa_r+0x7f4>
 801c246:	9b03      	ldr	r3, [sp, #12]
 801c248:	2b00      	cmp	r3, #0
 801c24a:	dc37      	bgt.n	801c2bc <_dtoa_r+0x984>
 801c24c:	9b06      	ldr	r3, [sp, #24]
 801c24e:	2b02      	cmp	r3, #2
 801c250:	dd34      	ble.n	801c2bc <_dtoa_r+0x984>
 801c252:	9b03      	ldr	r3, [sp, #12]
 801c254:	9302      	str	r3, [sp, #8]
 801c256:	9b02      	ldr	r3, [sp, #8]
 801c258:	b96b      	cbnz	r3, 801c276 <_dtoa_r+0x93e>
 801c25a:	4631      	mov	r1, r6
 801c25c:	2205      	movs	r2, #5
 801c25e:	4620      	mov	r0, r4
 801c260:	f000 fbe6 	bl	801ca30 <__multadd>
 801c264:	4601      	mov	r1, r0
 801c266:	4606      	mov	r6, r0
 801c268:	ee18 0a10 	vmov	r0, s16
 801c26c:	f000 fe00 	bl	801ce70 <__mcmp>
 801c270:	2800      	cmp	r0, #0
 801c272:	f73f adbb 	bgt.w	801bdec <_dtoa_r+0x4b4>
 801c276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c278:	9d01      	ldr	r5, [sp, #4]
 801c27a:	43db      	mvns	r3, r3
 801c27c:	9300      	str	r3, [sp, #0]
 801c27e:	f04f 0800 	mov.w	r8, #0
 801c282:	4631      	mov	r1, r6
 801c284:	4620      	mov	r0, r4
 801c286:	f000 fbb1 	bl	801c9ec <_Bfree>
 801c28a:	2f00      	cmp	r7, #0
 801c28c:	f43f aea4 	beq.w	801bfd8 <_dtoa_r+0x6a0>
 801c290:	f1b8 0f00 	cmp.w	r8, #0
 801c294:	d005      	beq.n	801c2a2 <_dtoa_r+0x96a>
 801c296:	45b8      	cmp	r8, r7
 801c298:	d003      	beq.n	801c2a2 <_dtoa_r+0x96a>
 801c29a:	4641      	mov	r1, r8
 801c29c:	4620      	mov	r0, r4
 801c29e:	f000 fba5 	bl	801c9ec <_Bfree>
 801c2a2:	4639      	mov	r1, r7
 801c2a4:	4620      	mov	r0, r4
 801c2a6:	f000 fba1 	bl	801c9ec <_Bfree>
 801c2aa:	e695      	b.n	801bfd8 <_dtoa_r+0x6a0>
 801c2ac:	2600      	movs	r6, #0
 801c2ae:	4637      	mov	r7, r6
 801c2b0:	e7e1      	b.n	801c276 <_dtoa_r+0x93e>
 801c2b2:	9700      	str	r7, [sp, #0]
 801c2b4:	4637      	mov	r7, r6
 801c2b6:	e599      	b.n	801bdec <_dtoa_r+0x4b4>
 801c2b8:	40240000 	.word	0x40240000
 801c2bc:	9b08      	ldr	r3, [sp, #32]
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	f000 80ca 	beq.w	801c458 <_dtoa_r+0xb20>
 801c2c4:	9b03      	ldr	r3, [sp, #12]
 801c2c6:	9302      	str	r3, [sp, #8]
 801c2c8:	2d00      	cmp	r5, #0
 801c2ca:	dd05      	ble.n	801c2d8 <_dtoa_r+0x9a0>
 801c2cc:	4639      	mov	r1, r7
 801c2ce:	462a      	mov	r2, r5
 801c2d0:	4620      	mov	r0, r4
 801c2d2:	f000 fd5d 	bl	801cd90 <__lshift>
 801c2d6:	4607      	mov	r7, r0
 801c2d8:	f1b8 0f00 	cmp.w	r8, #0
 801c2dc:	d05b      	beq.n	801c396 <_dtoa_r+0xa5e>
 801c2de:	6879      	ldr	r1, [r7, #4]
 801c2e0:	4620      	mov	r0, r4
 801c2e2:	f000 fb43 	bl	801c96c <_Balloc>
 801c2e6:	4605      	mov	r5, r0
 801c2e8:	b928      	cbnz	r0, 801c2f6 <_dtoa_r+0x9be>
 801c2ea:	4b87      	ldr	r3, [pc, #540]	; (801c508 <_dtoa_r+0xbd0>)
 801c2ec:	4602      	mov	r2, r0
 801c2ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c2f2:	f7ff bb3b 	b.w	801b96c <_dtoa_r+0x34>
 801c2f6:	693a      	ldr	r2, [r7, #16]
 801c2f8:	3202      	adds	r2, #2
 801c2fa:	0092      	lsls	r2, r2, #2
 801c2fc:	f107 010c 	add.w	r1, r7, #12
 801c300:	300c      	adds	r0, #12
 801c302:	f7fe fc95 	bl	801ac30 <memcpy>
 801c306:	2201      	movs	r2, #1
 801c308:	4629      	mov	r1, r5
 801c30a:	4620      	mov	r0, r4
 801c30c:	f000 fd40 	bl	801cd90 <__lshift>
 801c310:	9b01      	ldr	r3, [sp, #4]
 801c312:	f103 0901 	add.w	r9, r3, #1
 801c316:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c31a:	4413      	add	r3, r2
 801c31c:	9305      	str	r3, [sp, #20]
 801c31e:	f00a 0301 	and.w	r3, sl, #1
 801c322:	46b8      	mov	r8, r7
 801c324:	9304      	str	r3, [sp, #16]
 801c326:	4607      	mov	r7, r0
 801c328:	4631      	mov	r1, r6
 801c32a:	ee18 0a10 	vmov	r0, s16
 801c32e:	f7ff fa77 	bl	801b820 <quorem>
 801c332:	4641      	mov	r1, r8
 801c334:	9002      	str	r0, [sp, #8]
 801c336:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c33a:	ee18 0a10 	vmov	r0, s16
 801c33e:	f000 fd97 	bl	801ce70 <__mcmp>
 801c342:	463a      	mov	r2, r7
 801c344:	9003      	str	r0, [sp, #12]
 801c346:	4631      	mov	r1, r6
 801c348:	4620      	mov	r0, r4
 801c34a:	f000 fdad 	bl	801cea8 <__mdiff>
 801c34e:	68c2      	ldr	r2, [r0, #12]
 801c350:	f109 3bff 	add.w	fp, r9, #4294967295
 801c354:	4605      	mov	r5, r0
 801c356:	bb02      	cbnz	r2, 801c39a <_dtoa_r+0xa62>
 801c358:	4601      	mov	r1, r0
 801c35a:	ee18 0a10 	vmov	r0, s16
 801c35e:	f000 fd87 	bl	801ce70 <__mcmp>
 801c362:	4602      	mov	r2, r0
 801c364:	4629      	mov	r1, r5
 801c366:	4620      	mov	r0, r4
 801c368:	9207      	str	r2, [sp, #28]
 801c36a:	f000 fb3f 	bl	801c9ec <_Bfree>
 801c36e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801c372:	ea43 0102 	orr.w	r1, r3, r2
 801c376:	9b04      	ldr	r3, [sp, #16]
 801c378:	430b      	orrs	r3, r1
 801c37a:	464d      	mov	r5, r9
 801c37c:	d10f      	bne.n	801c39e <_dtoa_r+0xa66>
 801c37e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c382:	d02a      	beq.n	801c3da <_dtoa_r+0xaa2>
 801c384:	9b03      	ldr	r3, [sp, #12]
 801c386:	2b00      	cmp	r3, #0
 801c388:	dd02      	ble.n	801c390 <_dtoa_r+0xa58>
 801c38a:	9b02      	ldr	r3, [sp, #8]
 801c38c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801c390:	f88b a000 	strb.w	sl, [fp]
 801c394:	e775      	b.n	801c282 <_dtoa_r+0x94a>
 801c396:	4638      	mov	r0, r7
 801c398:	e7ba      	b.n	801c310 <_dtoa_r+0x9d8>
 801c39a:	2201      	movs	r2, #1
 801c39c:	e7e2      	b.n	801c364 <_dtoa_r+0xa2c>
 801c39e:	9b03      	ldr	r3, [sp, #12]
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	db04      	blt.n	801c3ae <_dtoa_r+0xa76>
 801c3a4:	9906      	ldr	r1, [sp, #24]
 801c3a6:	430b      	orrs	r3, r1
 801c3a8:	9904      	ldr	r1, [sp, #16]
 801c3aa:	430b      	orrs	r3, r1
 801c3ac:	d122      	bne.n	801c3f4 <_dtoa_r+0xabc>
 801c3ae:	2a00      	cmp	r2, #0
 801c3b0:	ddee      	ble.n	801c390 <_dtoa_r+0xa58>
 801c3b2:	ee18 1a10 	vmov	r1, s16
 801c3b6:	2201      	movs	r2, #1
 801c3b8:	4620      	mov	r0, r4
 801c3ba:	f000 fce9 	bl	801cd90 <__lshift>
 801c3be:	4631      	mov	r1, r6
 801c3c0:	ee08 0a10 	vmov	s16, r0
 801c3c4:	f000 fd54 	bl	801ce70 <__mcmp>
 801c3c8:	2800      	cmp	r0, #0
 801c3ca:	dc03      	bgt.n	801c3d4 <_dtoa_r+0xa9c>
 801c3cc:	d1e0      	bne.n	801c390 <_dtoa_r+0xa58>
 801c3ce:	f01a 0f01 	tst.w	sl, #1
 801c3d2:	d0dd      	beq.n	801c390 <_dtoa_r+0xa58>
 801c3d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c3d8:	d1d7      	bne.n	801c38a <_dtoa_r+0xa52>
 801c3da:	2339      	movs	r3, #57	; 0x39
 801c3dc:	f88b 3000 	strb.w	r3, [fp]
 801c3e0:	462b      	mov	r3, r5
 801c3e2:	461d      	mov	r5, r3
 801c3e4:	3b01      	subs	r3, #1
 801c3e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c3ea:	2a39      	cmp	r2, #57	; 0x39
 801c3ec:	d071      	beq.n	801c4d2 <_dtoa_r+0xb9a>
 801c3ee:	3201      	adds	r2, #1
 801c3f0:	701a      	strb	r2, [r3, #0]
 801c3f2:	e746      	b.n	801c282 <_dtoa_r+0x94a>
 801c3f4:	2a00      	cmp	r2, #0
 801c3f6:	dd07      	ble.n	801c408 <_dtoa_r+0xad0>
 801c3f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c3fc:	d0ed      	beq.n	801c3da <_dtoa_r+0xaa2>
 801c3fe:	f10a 0301 	add.w	r3, sl, #1
 801c402:	f88b 3000 	strb.w	r3, [fp]
 801c406:	e73c      	b.n	801c282 <_dtoa_r+0x94a>
 801c408:	9b05      	ldr	r3, [sp, #20]
 801c40a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c40e:	4599      	cmp	r9, r3
 801c410:	d047      	beq.n	801c4a2 <_dtoa_r+0xb6a>
 801c412:	ee18 1a10 	vmov	r1, s16
 801c416:	2300      	movs	r3, #0
 801c418:	220a      	movs	r2, #10
 801c41a:	4620      	mov	r0, r4
 801c41c:	f000 fb08 	bl	801ca30 <__multadd>
 801c420:	45b8      	cmp	r8, r7
 801c422:	ee08 0a10 	vmov	s16, r0
 801c426:	f04f 0300 	mov.w	r3, #0
 801c42a:	f04f 020a 	mov.w	r2, #10
 801c42e:	4641      	mov	r1, r8
 801c430:	4620      	mov	r0, r4
 801c432:	d106      	bne.n	801c442 <_dtoa_r+0xb0a>
 801c434:	f000 fafc 	bl	801ca30 <__multadd>
 801c438:	4680      	mov	r8, r0
 801c43a:	4607      	mov	r7, r0
 801c43c:	f109 0901 	add.w	r9, r9, #1
 801c440:	e772      	b.n	801c328 <_dtoa_r+0x9f0>
 801c442:	f000 faf5 	bl	801ca30 <__multadd>
 801c446:	4639      	mov	r1, r7
 801c448:	4680      	mov	r8, r0
 801c44a:	2300      	movs	r3, #0
 801c44c:	220a      	movs	r2, #10
 801c44e:	4620      	mov	r0, r4
 801c450:	f000 faee 	bl	801ca30 <__multadd>
 801c454:	4607      	mov	r7, r0
 801c456:	e7f1      	b.n	801c43c <_dtoa_r+0xb04>
 801c458:	9b03      	ldr	r3, [sp, #12]
 801c45a:	9302      	str	r3, [sp, #8]
 801c45c:	9d01      	ldr	r5, [sp, #4]
 801c45e:	ee18 0a10 	vmov	r0, s16
 801c462:	4631      	mov	r1, r6
 801c464:	f7ff f9dc 	bl	801b820 <quorem>
 801c468:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c46c:	9b01      	ldr	r3, [sp, #4]
 801c46e:	f805 ab01 	strb.w	sl, [r5], #1
 801c472:	1aea      	subs	r2, r5, r3
 801c474:	9b02      	ldr	r3, [sp, #8]
 801c476:	4293      	cmp	r3, r2
 801c478:	dd09      	ble.n	801c48e <_dtoa_r+0xb56>
 801c47a:	ee18 1a10 	vmov	r1, s16
 801c47e:	2300      	movs	r3, #0
 801c480:	220a      	movs	r2, #10
 801c482:	4620      	mov	r0, r4
 801c484:	f000 fad4 	bl	801ca30 <__multadd>
 801c488:	ee08 0a10 	vmov	s16, r0
 801c48c:	e7e7      	b.n	801c45e <_dtoa_r+0xb26>
 801c48e:	9b02      	ldr	r3, [sp, #8]
 801c490:	2b00      	cmp	r3, #0
 801c492:	bfc8      	it	gt
 801c494:	461d      	movgt	r5, r3
 801c496:	9b01      	ldr	r3, [sp, #4]
 801c498:	bfd8      	it	le
 801c49a:	2501      	movle	r5, #1
 801c49c:	441d      	add	r5, r3
 801c49e:	f04f 0800 	mov.w	r8, #0
 801c4a2:	ee18 1a10 	vmov	r1, s16
 801c4a6:	2201      	movs	r2, #1
 801c4a8:	4620      	mov	r0, r4
 801c4aa:	f000 fc71 	bl	801cd90 <__lshift>
 801c4ae:	4631      	mov	r1, r6
 801c4b0:	ee08 0a10 	vmov	s16, r0
 801c4b4:	f000 fcdc 	bl	801ce70 <__mcmp>
 801c4b8:	2800      	cmp	r0, #0
 801c4ba:	dc91      	bgt.n	801c3e0 <_dtoa_r+0xaa8>
 801c4bc:	d102      	bne.n	801c4c4 <_dtoa_r+0xb8c>
 801c4be:	f01a 0f01 	tst.w	sl, #1
 801c4c2:	d18d      	bne.n	801c3e0 <_dtoa_r+0xaa8>
 801c4c4:	462b      	mov	r3, r5
 801c4c6:	461d      	mov	r5, r3
 801c4c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c4cc:	2a30      	cmp	r2, #48	; 0x30
 801c4ce:	d0fa      	beq.n	801c4c6 <_dtoa_r+0xb8e>
 801c4d0:	e6d7      	b.n	801c282 <_dtoa_r+0x94a>
 801c4d2:	9a01      	ldr	r2, [sp, #4]
 801c4d4:	429a      	cmp	r2, r3
 801c4d6:	d184      	bne.n	801c3e2 <_dtoa_r+0xaaa>
 801c4d8:	9b00      	ldr	r3, [sp, #0]
 801c4da:	3301      	adds	r3, #1
 801c4dc:	9300      	str	r3, [sp, #0]
 801c4de:	2331      	movs	r3, #49	; 0x31
 801c4e0:	7013      	strb	r3, [r2, #0]
 801c4e2:	e6ce      	b.n	801c282 <_dtoa_r+0x94a>
 801c4e4:	4b09      	ldr	r3, [pc, #36]	; (801c50c <_dtoa_r+0xbd4>)
 801c4e6:	f7ff ba95 	b.w	801ba14 <_dtoa_r+0xdc>
 801c4ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	f47f aa6e 	bne.w	801b9ce <_dtoa_r+0x96>
 801c4f2:	4b07      	ldr	r3, [pc, #28]	; (801c510 <_dtoa_r+0xbd8>)
 801c4f4:	f7ff ba8e 	b.w	801ba14 <_dtoa_r+0xdc>
 801c4f8:	9b02      	ldr	r3, [sp, #8]
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	dcae      	bgt.n	801c45c <_dtoa_r+0xb24>
 801c4fe:	9b06      	ldr	r3, [sp, #24]
 801c500:	2b02      	cmp	r3, #2
 801c502:	f73f aea8 	bgt.w	801c256 <_dtoa_r+0x91e>
 801c506:	e7a9      	b.n	801c45c <_dtoa_r+0xb24>
 801c508:	0801de17 	.word	0x0801de17
 801c50c:	0801dd74 	.word	0x0801dd74
 801c510:	0801dd98 	.word	0x0801dd98

0801c514 <__sflush_r>:
 801c514:	898a      	ldrh	r2, [r1, #12]
 801c516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c51a:	4605      	mov	r5, r0
 801c51c:	0710      	lsls	r0, r2, #28
 801c51e:	460c      	mov	r4, r1
 801c520:	d458      	bmi.n	801c5d4 <__sflush_r+0xc0>
 801c522:	684b      	ldr	r3, [r1, #4]
 801c524:	2b00      	cmp	r3, #0
 801c526:	dc05      	bgt.n	801c534 <__sflush_r+0x20>
 801c528:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	dc02      	bgt.n	801c534 <__sflush_r+0x20>
 801c52e:	2000      	movs	r0, #0
 801c530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c536:	2e00      	cmp	r6, #0
 801c538:	d0f9      	beq.n	801c52e <__sflush_r+0x1a>
 801c53a:	2300      	movs	r3, #0
 801c53c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c540:	682f      	ldr	r7, [r5, #0]
 801c542:	602b      	str	r3, [r5, #0]
 801c544:	d032      	beq.n	801c5ac <__sflush_r+0x98>
 801c546:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c548:	89a3      	ldrh	r3, [r4, #12]
 801c54a:	075a      	lsls	r2, r3, #29
 801c54c:	d505      	bpl.n	801c55a <__sflush_r+0x46>
 801c54e:	6863      	ldr	r3, [r4, #4]
 801c550:	1ac0      	subs	r0, r0, r3
 801c552:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c554:	b10b      	cbz	r3, 801c55a <__sflush_r+0x46>
 801c556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c558:	1ac0      	subs	r0, r0, r3
 801c55a:	2300      	movs	r3, #0
 801c55c:	4602      	mov	r2, r0
 801c55e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c560:	6a21      	ldr	r1, [r4, #32]
 801c562:	4628      	mov	r0, r5
 801c564:	47b0      	blx	r6
 801c566:	1c43      	adds	r3, r0, #1
 801c568:	89a3      	ldrh	r3, [r4, #12]
 801c56a:	d106      	bne.n	801c57a <__sflush_r+0x66>
 801c56c:	6829      	ldr	r1, [r5, #0]
 801c56e:	291d      	cmp	r1, #29
 801c570:	d82c      	bhi.n	801c5cc <__sflush_r+0xb8>
 801c572:	4a2a      	ldr	r2, [pc, #168]	; (801c61c <__sflush_r+0x108>)
 801c574:	40ca      	lsrs	r2, r1
 801c576:	07d6      	lsls	r6, r2, #31
 801c578:	d528      	bpl.n	801c5cc <__sflush_r+0xb8>
 801c57a:	2200      	movs	r2, #0
 801c57c:	6062      	str	r2, [r4, #4]
 801c57e:	04d9      	lsls	r1, r3, #19
 801c580:	6922      	ldr	r2, [r4, #16]
 801c582:	6022      	str	r2, [r4, #0]
 801c584:	d504      	bpl.n	801c590 <__sflush_r+0x7c>
 801c586:	1c42      	adds	r2, r0, #1
 801c588:	d101      	bne.n	801c58e <__sflush_r+0x7a>
 801c58a:	682b      	ldr	r3, [r5, #0]
 801c58c:	b903      	cbnz	r3, 801c590 <__sflush_r+0x7c>
 801c58e:	6560      	str	r0, [r4, #84]	; 0x54
 801c590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c592:	602f      	str	r7, [r5, #0]
 801c594:	2900      	cmp	r1, #0
 801c596:	d0ca      	beq.n	801c52e <__sflush_r+0x1a>
 801c598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c59c:	4299      	cmp	r1, r3
 801c59e:	d002      	beq.n	801c5a6 <__sflush_r+0x92>
 801c5a0:	4628      	mov	r0, r5
 801c5a2:	f000 fd7d 	bl	801d0a0 <_free_r>
 801c5a6:	2000      	movs	r0, #0
 801c5a8:	6360      	str	r0, [r4, #52]	; 0x34
 801c5aa:	e7c1      	b.n	801c530 <__sflush_r+0x1c>
 801c5ac:	6a21      	ldr	r1, [r4, #32]
 801c5ae:	2301      	movs	r3, #1
 801c5b0:	4628      	mov	r0, r5
 801c5b2:	47b0      	blx	r6
 801c5b4:	1c41      	adds	r1, r0, #1
 801c5b6:	d1c7      	bne.n	801c548 <__sflush_r+0x34>
 801c5b8:	682b      	ldr	r3, [r5, #0]
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d0c4      	beq.n	801c548 <__sflush_r+0x34>
 801c5be:	2b1d      	cmp	r3, #29
 801c5c0:	d001      	beq.n	801c5c6 <__sflush_r+0xb2>
 801c5c2:	2b16      	cmp	r3, #22
 801c5c4:	d101      	bne.n	801c5ca <__sflush_r+0xb6>
 801c5c6:	602f      	str	r7, [r5, #0]
 801c5c8:	e7b1      	b.n	801c52e <__sflush_r+0x1a>
 801c5ca:	89a3      	ldrh	r3, [r4, #12]
 801c5cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c5d0:	81a3      	strh	r3, [r4, #12]
 801c5d2:	e7ad      	b.n	801c530 <__sflush_r+0x1c>
 801c5d4:	690f      	ldr	r7, [r1, #16]
 801c5d6:	2f00      	cmp	r7, #0
 801c5d8:	d0a9      	beq.n	801c52e <__sflush_r+0x1a>
 801c5da:	0793      	lsls	r3, r2, #30
 801c5dc:	680e      	ldr	r6, [r1, #0]
 801c5de:	bf08      	it	eq
 801c5e0:	694b      	ldreq	r3, [r1, #20]
 801c5e2:	600f      	str	r7, [r1, #0]
 801c5e4:	bf18      	it	ne
 801c5e6:	2300      	movne	r3, #0
 801c5e8:	eba6 0807 	sub.w	r8, r6, r7
 801c5ec:	608b      	str	r3, [r1, #8]
 801c5ee:	f1b8 0f00 	cmp.w	r8, #0
 801c5f2:	dd9c      	ble.n	801c52e <__sflush_r+0x1a>
 801c5f4:	6a21      	ldr	r1, [r4, #32]
 801c5f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c5f8:	4643      	mov	r3, r8
 801c5fa:	463a      	mov	r2, r7
 801c5fc:	4628      	mov	r0, r5
 801c5fe:	47b0      	blx	r6
 801c600:	2800      	cmp	r0, #0
 801c602:	dc06      	bgt.n	801c612 <__sflush_r+0xfe>
 801c604:	89a3      	ldrh	r3, [r4, #12]
 801c606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c60a:	81a3      	strh	r3, [r4, #12]
 801c60c:	f04f 30ff 	mov.w	r0, #4294967295
 801c610:	e78e      	b.n	801c530 <__sflush_r+0x1c>
 801c612:	4407      	add	r7, r0
 801c614:	eba8 0800 	sub.w	r8, r8, r0
 801c618:	e7e9      	b.n	801c5ee <__sflush_r+0xda>
 801c61a:	bf00      	nop
 801c61c:	20400001 	.word	0x20400001

0801c620 <_fflush_r>:
 801c620:	b538      	push	{r3, r4, r5, lr}
 801c622:	690b      	ldr	r3, [r1, #16]
 801c624:	4605      	mov	r5, r0
 801c626:	460c      	mov	r4, r1
 801c628:	b913      	cbnz	r3, 801c630 <_fflush_r+0x10>
 801c62a:	2500      	movs	r5, #0
 801c62c:	4628      	mov	r0, r5
 801c62e:	bd38      	pop	{r3, r4, r5, pc}
 801c630:	b118      	cbz	r0, 801c63a <_fflush_r+0x1a>
 801c632:	6983      	ldr	r3, [r0, #24]
 801c634:	b90b      	cbnz	r3, 801c63a <_fflush_r+0x1a>
 801c636:	f000 f887 	bl	801c748 <__sinit>
 801c63a:	4b14      	ldr	r3, [pc, #80]	; (801c68c <_fflush_r+0x6c>)
 801c63c:	429c      	cmp	r4, r3
 801c63e:	d11b      	bne.n	801c678 <_fflush_r+0x58>
 801c640:	686c      	ldr	r4, [r5, #4]
 801c642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c646:	2b00      	cmp	r3, #0
 801c648:	d0ef      	beq.n	801c62a <_fflush_r+0xa>
 801c64a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c64c:	07d0      	lsls	r0, r2, #31
 801c64e:	d404      	bmi.n	801c65a <_fflush_r+0x3a>
 801c650:	0599      	lsls	r1, r3, #22
 801c652:	d402      	bmi.n	801c65a <_fflush_r+0x3a>
 801c654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c656:	f000 f91a 	bl	801c88e <__retarget_lock_acquire_recursive>
 801c65a:	4628      	mov	r0, r5
 801c65c:	4621      	mov	r1, r4
 801c65e:	f7ff ff59 	bl	801c514 <__sflush_r>
 801c662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c664:	07da      	lsls	r2, r3, #31
 801c666:	4605      	mov	r5, r0
 801c668:	d4e0      	bmi.n	801c62c <_fflush_r+0xc>
 801c66a:	89a3      	ldrh	r3, [r4, #12]
 801c66c:	059b      	lsls	r3, r3, #22
 801c66e:	d4dd      	bmi.n	801c62c <_fflush_r+0xc>
 801c670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c672:	f000 f90d 	bl	801c890 <__retarget_lock_release_recursive>
 801c676:	e7d9      	b.n	801c62c <_fflush_r+0xc>
 801c678:	4b05      	ldr	r3, [pc, #20]	; (801c690 <_fflush_r+0x70>)
 801c67a:	429c      	cmp	r4, r3
 801c67c:	d101      	bne.n	801c682 <_fflush_r+0x62>
 801c67e:	68ac      	ldr	r4, [r5, #8]
 801c680:	e7df      	b.n	801c642 <_fflush_r+0x22>
 801c682:	4b04      	ldr	r3, [pc, #16]	; (801c694 <_fflush_r+0x74>)
 801c684:	429c      	cmp	r4, r3
 801c686:	bf08      	it	eq
 801c688:	68ec      	ldreq	r4, [r5, #12]
 801c68a:	e7da      	b.n	801c642 <_fflush_r+0x22>
 801c68c:	0801de48 	.word	0x0801de48
 801c690:	0801de68 	.word	0x0801de68
 801c694:	0801de28 	.word	0x0801de28

0801c698 <std>:
 801c698:	2300      	movs	r3, #0
 801c69a:	b510      	push	{r4, lr}
 801c69c:	4604      	mov	r4, r0
 801c69e:	e9c0 3300 	strd	r3, r3, [r0]
 801c6a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c6a6:	6083      	str	r3, [r0, #8]
 801c6a8:	8181      	strh	r1, [r0, #12]
 801c6aa:	6643      	str	r3, [r0, #100]	; 0x64
 801c6ac:	81c2      	strh	r2, [r0, #14]
 801c6ae:	6183      	str	r3, [r0, #24]
 801c6b0:	4619      	mov	r1, r3
 801c6b2:	2208      	movs	r2, #8
 801c6b4:	305c      	adds	r0, #92	; 0x5c
 801c6b6:	f7fe fac9 	bl	801ac4c <memset>
 801c6ba:	4b05      	ldr	r3, [pc, #20]	; (801c6d0 <std+0x38>)
 801c6bc:	6263      	str	r3, [r4, #36]	; 0x24
 801c6be:	4b05      	ldr	r3, [pc, #20]	; (801c6d4 <std+0x3c>)
 801c6c0:	62a3      	str	r3, [r4, #40]	; 0x28
 801c6c2:	4b05      	ldr	r3, [pc, #20]	; (801c6d8 <std+0x40>)
 801c6c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c6c6:	4b05      	ldr	r3, [pc, #20]	; (801c6dc <std+0x44>)
 801c6c8:	6224      	str	r4, [r4, #32]
 801c6ca:	6323      	str	r3, [r4, #48]	; 0x30
 801c6cc:	bd10      	pop	{r4, pc}
 801c6ce:	bf00      	nop
 801c6d0:	0801d5c5 	.word	0x0801d5c5
 801c6d4:	0801d5e7 	.word	0x0801d5e7
 801c6d8:	0801d61f 	.word	0x0801d61f
 801c6dc:	0801d643 	.word	0x0801d643

0801c6e0 <_cleanup_r>:
 801c6e0:	4901      	ldr	r1, [pc, #4]	; (801c6e8 <_cleanup_r+0x8>)
 801c6e2:	f000 b8af 	b.w	801c844 <_fwalk_reent>
 801c6e6:	bf00      	nop
 801c6e8:	0801c621 	.word	0x0801c621

0801c6ec <__sfmoreglue>:
 801c6ec:	b570      	push	{r4, r5, r6, lr}
 801c6ee:	2268      	movs	r2, #104	; 0x68
 801c6f0:	1e4d      	subs	r5, r1, #1
 801c6f2:	4355      	muls	r5, r2
 801c6f4:	460e      	mov	r6, r1
 801c6f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c6fa:	f000 fd3d 	bl	801d178 <_malloc_r>
 801c6fe:	4604      	mov	r4, r0
 801c700:	b140      	cbz	r0, 801c714 <__sfmoreglue+0x28>
 801c702:	2100      	movs	r1, #0
 801c704:	e9c0 1600 	strd	r1, r6, [r0]
 801c708:	300c      	adds	r0, #12
 801c70a:	60a0      	str	r0, [r4, #8]
 801c70c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c710:	f7fe fa9c 	bl	801ac4c <memset>
 801c714:	4620      	mov	r0, r4
 801c716:	bd70      	pop	{r4, r5, r6, pc}

0801c718 <__sfp_lock_acquire>:
 801c718:	4801      	ldr	r0, [pc, #4]	; (801c720 <__sfp_lock_acquire+0x8>)
 801c71a:	f000 b8b8 	b.w	801c88e <__retarget_lock_acquire_recursive>
 801c71e:	bf00      	nop
 801c720:	2000884d 	.word	0x2000884d

0801c724 <__sfp_lock_release>:
 801c724:	4801      	ldr	r0, [pc, #4]	; (801c72c <__sfp_lock_release+0x8>)
 801c726:	f000 b8b3 	b.w	801c890 <__retarget_lock_release_recursive>
 801c72a:	bf00      	nop
 801c72c:	2000884d 	.word	0x2000884d

0801c730 <__sinit_lock_acquire>:
 801c730:	4801      	ldr	r0, [pc, #4]	; (801c738 <__sinit_lock_acquire+0x8>)
 801c732:	f000 b8ac 	b.w	801c88e <__retarget_lock_acquire_recursive>
 801c736:	bf00      	nop
 801c738:	2000884e 	.word	0x2000884e

0801c73c <__sinit_lock_release>:
 801c73c:	4801      	ldr	r0, [pc, #4]	; (801c744 <__sinit_lock_release+0x8>)
 801c73e:	f000 b8a7 	b.w	801c890 <__retarget_lock_release_recursive>
 801c742:	bf00      	nop
 801c744:	2000884e 	.word	0x2000884e

0801c748 <__sinit>:
 801c748:	b510      	push	{r4, lr}
 801c74a:	4604      	mov	r4, r0
 801c74c:	f7ff fff0 	bl	801c730 <__sinit_lock_acquire>
 801c750:	69a3      	ldr	r3, [r4, #24]
 801c752:	b11b      	cbz	r3, 801c75c <__sinit+0x14>
 801c754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c758:	f7ff bff0 	b.w	801c73c <__sinit_lock_release>
 801c75c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c760:	6523      	str	r3, [r4, #80]	; 0x50
 801c762:	4b13      	ldr	r3, [pc, #76]	; (801c7b0 <__sinit+0x68>)
 801c764:	4a13      	ldr	r2, [pc, #76]	; (801c7b4 <__sinit+0x6c>)
 801c766:	681b      	ldr	r3, [r3, #0]
 801c768:	62a2      	str	r2, [r4, #40]	; 0x28
 801c76a:	42a3      	cmp	r3, r4
 801c76c:	bf04      	itt	eq
 801c76e:	2301      	moveq	r3, #1
 801c770:	61a3      	streq	r3, [r4, #24]
 801c772:	4620      	mov	r0, r4
 801c774:	f000 f820 	bl	801c7b8 <__sfp>
 801c778:	6060      	str	r0, [r4, #4]
 801c77a:	4620      	mov	r0, r4
 801c77c:	f000 f81c 	bl	801c7b8 <__sfp>
 801c780:	60a0      	str	r0, [r4, #8]
 801c782:	4620      	mov	r0, r4
 801c784:	f000 f818 	bl	801c7b8 <__sfp>
 801c788:	2200      	movs	r2, #0
 801c78a:	60e0      	str	r0, [r4, #12]
 801c78c:	2104      	movs	r1, #4
 801c78e:	6860      	ldr	r0, [r4, #4]
 801c790:	f7ff ff82 	bl	801c698 <std>
 801c794:	68a0      	ldr	r0, [r4, #8]
 801c796:	2201      	movs	r2, #1
 801c798:	2109      	movs	r1, #9
 801c79a:	f7ff ff7d 	bl	801c698 <std>
 801c79e:	68e0      	ldr	r0, [r4, #12]
 801c7a0:	2202      	movs	r2, #2
 801c7a2:	2112      	movs	r1, #18
 801c7a4:	f7ff ff78 	bl	801c698 <std>
 801c7a8:	2301      	movs	r3, #1
 801c7aa:	61a3      	str	r3, [r4, #24]
 801c7ac:	e7d2      	b.n	801c754 <__sinit+0xc>
 801c7ae:	bf00      	nop
 801c7b0:	0801dd60 	.word	0x0801dd60
 801c7b4:	0801c6e1 	.word	0x0801c6e1

0801c7b8 <__sfp>:
 801c7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7ba:	4607      	mov	r7, r0
 801c7bc:	f7ff ffac 	bl	801c718 <__sfp_lock_acquire>
 801c7c0:	4b1e      	ldr	r3, [pc, #120]	; (801c83c <__sfp+0x84>)
 801c7c2:	681e      	ldr	r6, [r3, #0]
 801c7c4:	69b3      	ldr	r3, [r6, #24]
 801c7c6:	b913      	cbnz	r3, 801c7ce <__sfp+0x16>
 801c7c8:	4630      	mov	r0, r6
 801c7ca:	f7ff ffbd 	bl	801c748 <__sinit>
 801c7ce:	3648      	adds	r6, #72	; 0x48
 801c7d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c7d4:	3b01      	subs	r3, #1
 801c7d6:	d503      	bpl.n	801c7e0 <__sfp+0x28>
 801c7d8:	6833      	ldr	r3, [r6, #0]
 801c7da:	b30b      	cbz	r3, 801c820 <__sfp+0x68>
 801c7dc:	6836      	ldr	r6, [r6, #0]
 801c7de:	e7f7      	b.n	801c7d0 <__sfp+0x18>
 801c7e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c7e4:	b9d5      	cbnz	r5, 801c81c <__sfp+0x64>
 801c7e6:	4b16      	ldr	r3, [pc, #88]	; (801c840 <__sfp+0x88>)
 801c7e8:	60e3      	str	r3, [r4, #12]
 801c7ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c7ee:	6665      	str	r5, [r4, #100]	; 0x64
 801c7f0:	f000 f84c 	bl	801c88c <__retarget_lock_init_recursive>
 801c7f4:	f7ff ff96 	bl	801c724 <__sfp_lock_release>
 801c7f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c7fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c800:	6025      	str	r5, [r4, #0]
 801c802:	61a5      	str	r5, [r4, #24]
 801c804:	2208      	movs	r2, #8
 801c806:	4629      	mov	r1, r5
 801c808:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c80c:	f7fe fa1e 	bl	801ac4c <memset>
 801c810:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c814:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c818:	4620      	mov	r0, r4
 801c81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c81c:	3468      	adds	r4, #104	; 0x68
 801c81e:	e7d9      	b.n	801c7d4 <__sfp+0x1c>
 801c820:	2104      	movs	r1, #4
 801c822:	4638      	mov	r0, r7
 801c824:	f7ff ff62 	bl	801c6ec <__sfmoreglue>
 801c828:	4604      	mov	r4, r0
 801c82a:	6030      	str	r0, [r6, #0]
 801c82c:	2800      	cmp	r0, #0
 801c82e:	d1d5      	bne.n	801c7dc <__sfp+0x24>
 801c830:	f7ff ff78 	bl	801c724 <__sfp_lock_release>
 801c834:	230c      	movs	r3, #12
 801c836:	603b      	str	r3, [r7, #0]
 801c838:	e7ee      	b.n	801c818 <__sfp+0x60>
 801c83a:	bf00      	nop
 801c83c:	0801dd60 	.word	0x0801dd60
 801c840:	ffff0001 	.word	0xffff0001

0801c844 <_fwalk_reent>:
 801c844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c848:	4606      	mov	r6, r0
 801c84a:	4688      	mov	r8, r1
 801c84c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c850:	2700      	movs	r7, #0
 801c852:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c856:	f1b9 0901 	subs.w	r9, r9, #1
 801c85a:	d505      	bpl.n	801c868 <_fwalk_reent+0x24>
 801c85c:	6824      	ldr	r4, [r4, #0]
 801c85e:	2c00      	cmp	r4, #0
 801c860:	d1f7      	bne.n	801c852 <_fwalk_reent+0xe>
 801c862:	4638      	mov	r0, r7
 801c864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c868:	89ab      	ldrh	r3, [r5, #12]
 801c86a:	2b01      	cmp	r3, #1
 801c86c:	d907      	bls.n	801c87e <_fwalk_reent+0x3a>
 801c86e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c872:	3301      	adds	r3, #1
 801c874:	d003      	beq.n	801c87e <_fwalk_reent+0x3a>
 801c876:	4629      	mov	r1, r5
 801c878:	4630      	mov	r0, r6
 801c87a:	47c0      	blx	r8
 801c87c:	4307      	orrs	r7, r0
 801c87e:	3568      	adds	r5, #104	; 0x68
 801c880:	e7e9      	b.n	801c856 <_fwalk_reent+0x12>
	...

0801c884 <_localeconv_r>:
 801c884:	4800      	ldr	r0, [pc, #0]	; (801c888 <_localeconv_r+0x4>)
 801c886:	4770      	bx	lr
 801c888:	200001cc 	.word	0x200001cc

0801c88c <__retarget_lock_init_recursive>:
 801c88c:	4770      	bx	lr

0801c88e <__retarget_lock_acquire_recursive>:
 801c88e:	4770      	bx	lr

0801c890 <__retarget_lock_release_recursive>:
 801c890:	4770      	bx	lr

0801c892 <__swhatbuf_r>:
 801c892:	b570      	push	{r4, r5, r6, lr}
 801c894:	460e      	mov	r6, r1
 801c896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c89a:	2900      	cmp	r1, #0
 801c89c:	b096      	sub	sp, #88	; 0x58
 801c89e:	4614      	mov	r4, r2
 801c8a0:	461d      	mov	r5, r3
 801c8a2:	da08      	bge.n	801c8b6 <__swhatbuf_r+0x24>
 801c8a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c8a8:	2200      	movs	r2, #0
 801c8aa:	602a      	str	r2, [r5, #0]
 801c8ac:	061a      	lsls	r2, r3, #24
 801c8ae:	d410      	bmi.n	801c8d2 <__swhatbuf_r+0x40>
 801c8b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c8b4:	e00e      	b.n	801c8d4 <__swhatbuf_r+0x42>
 801c8b6:	466a      	mov	r2, sp
 801c8b8:	f000 ff1a 	bl	801d6f0 <_fstat_r>
 801c8bc:	2800      	cmp	r0, #0
 801c8be:	dbf1      	blt.n	801c8a4 <__swhatbuf_r+0x12>
 801c8c0:	9a01      	ldr	r2, [sp, #4]
 801c8c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c8c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c8ca:	425a      	negs	r2, r3
 801c8cc:	415a      	adcs	r2, r3
 801c8ce:	602a      	str	r2, [r5, #0]
 801c8d0:	e7ee      	b.n	801c8b0 <__swhatbuf_r+0x1e>
 801c8d2:	2340      	movs	r3, #64	; 0x40
 801c8d4:	2000      	movs	r0, #0
 801c8d6:	6023      	str	r3, [r4, #0]
 801c8d8:	b016      	add	sp, #88	; 0x58
 801c8da:	bd70      	pop	{r4, r5, r6, pc}

0801c8dc <__smakebuf_r>:
 801c8dc:	898b      	ldrh	r3, [r1, #12]
 801c8de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c8e0:	079d      	lsls	r5, r3, #30
 801c8e2:	4606      	mov	r6, r0
 801c8e4:	460c      	mov	r4, r1
 801c8e6:	d507      	bpl.n	801c8f8 <__smakebuf_r+0x1c>
 801c8e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c8ec:	6023      	str	r3, [r4, #0]
 801c8ee:	6123      	str	r3, [r4, #16]
 801c8f0:	2301      	movs	r3, #1
 801c8f2:	6163      	str	r3, [r4, #20]
 801c8f4:	b002      	add	sp, #8
 801c8f6:	bd70      	pop	{r4, r5, r6, pc}
 801c8f8:	ab01      	add	r3, sp, #4
 801c8fa:	466a      	mov	r2, sp
 801c8fc:	f7ff ffc9 	bl	801c892 <__swhatbuf_r>
 801c900:	9900      	ldr	r1, [sp, #0]
 801c902:	4605      	mov	r5, r0
 801c904:	4630      	mov	r0, r6
 801c906:	f000 fc37 	bl	801d178 <_malloc_r>
 801c90a:	b948      	cbnz	r0, 801c920 <__smakebuf_r+0x44>
 801c90c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c910:	059a      	lsls	r2, r3, #22
 801c912:	d4ef      	bmi.n	801c8f4 <__smakebuf_r+0x18>
 801c914:	f023 0303 	bic.w	r3, r3, #3
 801c918:	f043 0302 	orr.w	r3, r3, #2
 801c91c:	81a3      	strh	r3, [r4, #12]
 801c91e:	e7e3      	b.n	801c8e8 <__smakebuf_r+0xc>
 801c920:	4b0d      	ldr	r3, [pc, #52]	; (801c958 <__smakebuf_r+0x7c>)
 801c922:	62b3      	str	r3, [r6, #40]	; 0x28
 801c924:	89a3      	ldrh	r3, [r4, #12]
 801c926:	6020      	str	r0, [r4, #0]
 801c928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c92c:	81a3      	strh	r3, [r4, #12]
 801c92e:	9b00      	ldr	r3, [sp, #0]
 801c930:	6163      	str	r3, [r4, #20]
 801c932:	9b01      	ldr	r3, [sp, #4]
 801c934:	6120      	str	r0, [r4, #16]
 801c936:	b15b      	cbz	r3, 801c950 <__smakebuf_r+0x74>
 801c938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c93c:	4630      	mov	r0, r6
 801c93e:	f000 fee9 	bl	801d714 <_isatty_r>
 801c942:	b128      	cbz	r0, 801c950 <__smakebuf_r+0x74>
 801c944:	89a3      	ldrh	r3, [r4, #12]
 801c946:	f023 0303 	bic.w	r3, r3, #3
 801c94a:	f043 0301 	orr.w	r3, r3, #1
 801c94e:	81a3      	strh	r3, [r4, #12]
 801c950:	89a0      	ldrh	r0, [r4, #12]
 801c952:	4305      	orrs	r5, r0
 801c954:	81a5      	strh	r5, [r4, #12]
 801c956:	e7cd      	b.n	801c8f4 <__smakebuf_r+0x18>
 801c958:	0801c6e1 	.word	0x0801c6e1

0801c95c <malloc>:
 801c95c:	4b02      	ldr	r3, [pc, #8]	; (801c968 <malloc+0xc>)
 801c95e:	4601      	mov	r1, r0
 801c960:	6818      	ldr	r0, [r3, #0]
 801c962:	f000 bc09 	b.w	801d178 <_malloc_r>
 801c966:	bf00      	nop
 801c968:	20000078 	.word	0x20000078

0801c96c <_Balloc>:
 801c96c:	b570      	push	{r4, r5, r6, lr}
 801c96e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c970:	4604      	mov	r4, r0
 801c972:	460d      	mov	r5, r1
 801c974:	b976      	cbnz	r6, 801c994 <_Balloc+0x28>
 801c976:	2010      	movs	r0, #16
 801c978:	f7ff fff0 	bl	801c95c <malloc>
 801c97c:	4602      	mov	r2, r0
 801c97e:	6260      	str	r0, [r4, #36]	; 0x24
 801c980:	b920      	cbnz	r0, 801c98c <_Balloc+0x20>
 801c982:	4b18      	ldr	r3, [pc, #96]	; (801c9e4 <_Balloc+0x78>)
 801c984:	4818      	ldr	r0, [pc, #96]	; (801c9e8 <_Balloc+0x7c>)
 801c986:	2166      	movs	r1, #102	; 0x66
 801c988:	f000 fe72 	bl	801d670 <__assert_func>
 801c98c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c990:	6006      	str	r6, [r0, #0]
 801c992:	60c6      	str	r6, [r0, #12]
 801c994:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c996:	68f3      	ldr	r3, [r6, #12]
 801c998:	b183      	cbz	r3, 801c9bc <_Balloc+0x50>
 801c99a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c99c:	68db      	ldr	r3, [r3, #12]
 801c99e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c9a2:	b9b8      	cbnz	r0, 801c9d4 <_Balloc+0x68>
 801c9a4:	2101      	movs	r1, #1
 801c9a6:	fa01 f605 	lsl.w	r6, r1, r5
 801c9aa:	1d72      	adds	r2, r6, #5
 801c9ac:	0092      	lsls	r2, r2, #2
 801c9ae:	4620      	mov	r0, r4
 801c9b0:	f000 fb60 	bl	801d074 <_calloc_r>
 801c9b4:	b160      	cbz	r0, 801c9d0 <_Balloc+0x64>
 801c9b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c9ba:	e00e      	b.n	801c9da <_Balloc+0x6e>
 801c9bc:	2221      	movs	r2, #33	; 0x21
 801c9be:	2104      	movs	r1, #4
 801c9c0:	4620      	mov	r0, r4
 801c9c2:	f000 fb57 	bl	801d074 <_calloc_r>
 801c9c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c9c8:	60f0      	str	r0, [r6, #12]
 801c9ca:	68db      	ldr	r3, [r3, #12]
 801c9cc:	2b00      	cmp	r3, #0
 801c9ce:	d1e4      	bne.n	801c99a <_Balloc+0x2e>
 801c9d0:	2000      	movs	r0, #0
 801c9d2:	bd70      	pop	{r4, r5, r6, pc}
 801c9d4:	6802      	ldr	r2, [r0, #0]
 801c9d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c9da:	2300      	movs	r3, #0
 801c9dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c9e0:	e7f7      	b.n	801c9d2 <_Balloc+0x66>
 801c9e2:	bf00      	nop
 801c9e4:	0801dda5 	.word	0x0801dda5
 801c9e8:	0801de88 	.word	0x0801de88

0801c9ec <_Bfree>:
 801c9ec:	b570      	push	{r4, r5, r6, lr}
 801c9ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c9f0:	4605      	mov	r5, r0
 801c9f2:	460c      	mov	r4, r1
 801c9f4:	b976      	cbnz	r6, 801ca14 <_Bfree+0x28>
 801c9f6:	2010      	movs	r0, #16
 801c9f8:	f7ff ffb0 	bl	801c95c <malloc>
 801c9fc:	4602      	mov	r2, r0
 801c9fe:	6268      	str	r0, [r5, #36]	; 0x24
 801ca00:	b920      	cbnz	r0, 801ca0c <_Bfree+0x20>
 801ca02:	4b09      	ldr	r3, [pc, #36]	; (801ca28 <_Bfree+0x3c>)
 801ca04:	4809      	ldr	r0, [pc, #36]	; (801ca2c <_Bfree+0x40>)
 801ca06:	218a      	movs	r1, #138	; 0x8a
 801ca08:	f000 fe32 	bl	801d670 <__assert_func>
 801ca0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ca10:	6006      	str	r6, [r0, #0]
 801ca12:	60c6      	str	r6, [r0, #12]
 801ca14:	b13c      	cbz	r4, 801ca26 <_Bfree+0x3a>
 801ca16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801ca18:	6862      	ldr	r2, [r4, #4]
 801ca1a:	68db      	ldr	r3, [r3, #12]
 801ca1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ca20:	6021      	str	r1, [r4, #0]
 801ca22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ca26:	bd70      	pop	{r4, r5, r6, pc}
 801ca28:	0801dda5 	.word	0x0801dda5
 801ca2c:	0801de88 	.word	0x0801de88

0801ca30 <__multadd>:
 801ca30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca34:	690d      	ldr	r5, [r1, #16]
 801ca36:	4607      	mov	r7, r0
 801ca38:	460c      	mov	r4, r1
 801ca3a:	461e      	mov	r6, r3
 801ca3c:	f101 0c14 	add.w	ip, r1, #20
 801ca40:	2000      	movs	r0, #0
 801ca42:	f8dc 3000 	ldr.w	r3, [ip]
 801ca46:	b299      	uxth	r1, r3
 801ca48:	fb02 6101 	mla	r1, r2, r1, r6
 801ca4c:	0c1e      	lsrs	r6, r3, #16
 801ca4e:	0c0b      	lsrs	r3, r1, #16
 801ca50:	fb02 3306 	mla	r3, r2, r6, r3
 801ca54:	b289      	uxth	r1, r1
 801ca56:	3001      	adds	r0, #1
 801ca58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ca5c:	4285      	cmp	r5, r0
 801ca5e:	f84c 1b04 	str.w	r1, [ip], #4
 801ca62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ca66:	dcec      	bgt.n	801ca42 <__multadd+0x12>
 801ca68:	b30e      	cbz	r6, 801caae <__multadd+0x7e>
 801ca6a:	68a3      	ldr	r3, [r4, #8]
 801ca6c:	42ab      	cmp	r3, r5
 801ca6e:	dc19      	bgt.n	801caa4 <__multadd+0x74>
 801ca70:	6861      	ldr	r1, [r4, #4]
 801ca72:	4638      	mov	r0, r7
 801ca74:	3101      	adds	r1, #1
 801ca76:	f7ff ff79 	bl	801c96c <_Balloc>
 801ca7a:	4680      	mov	r8, r0
 801ca7c:	b928      	cbnz	r0, 801ca8a <__multadd+0x5a>
 801ca7e:	4602      	mov	r2, r0
 801ca80:	4b0c      	ldr	r3, [pc, #48]	; (801cab4 <__multadd+0x84>)
 801ca82:	480d      	ldr	r0, [pc, #52]	; (801cab8 <__multadd+0x88>)
 801ca84:	21b5      	movs	r1, #181	; 0xb5
 801ca86:	f000 fdf3 	bl	801d670 <__assert_func>
 801ca8a:	6922      	ldr	r2, [r4, #16]
 801ca8c:	3202      	adds	r2, #2
 801ca8e:	f104 010c 	add.w	r1, r4, #12
 801ca92:	0092      	lsls	r2, r2, #2
 801ca94:	300c      	adds	r0, #12
 801ca96:	f7fe f8cb 	bl	801ac30 <memcpy>
 801ca9a:	4621      	mov	r1, r4
 801ca9c:	4638      	mov	r0, r7
 801ca9e:	f7ff ffa5 	bl	801c9ec <_Bfree>
 801caa2:	4644      	mov	r4, r8
 801caa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801caa8:	3501      	adds	r5, #1
 801caaa:	615e      	str	r6, [r3, #20]
 801caac:	6125      	str	r5, [r4, #16]
 801caae:	4620      	mov	r0, r4
 801cab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cab4:	0801de17 	.word	0x0801de17
 801cab8:	0801de88 	.word	0x0801de88

0801cabc <__hi0bits>:
 801cabc:	0c03      	lsrs	r3, r0, #16
 801cabe:	041b      	lsls	r3, r3, #16
 801cac0:	b9d3      	cbnz	r3, 801caf8 <__hi0bits+0x3c>
 801cac2:	0400      	lsls	r0, r0, #16
 801cac4:	2310      	movs	r3, #16
 801cac6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801caca:	bf04      	itt	eq
 801cacc:	0200      	lsleq	r0, r0, #8
 801cace:	3308      	addeq	r3, #8
 801cad0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801cad4:	bf04      	itt	eq
 801cad6:	0100      	lsleq	r0, r0, #4
 801cad8:	3304      	addeq	r3, #4
 801cada:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801cade:	bf04      	itt	eq
 801cae0:	0080      	lsleq	r0, r0, #2
 801cae2:	3302      	addeq	r3, #2
 801cae4:	2800      	cmp	r0, #0
 801cae6:	db05      	blt.n	801caf4 <__hi0bits+0x38>
 801cae8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801caec:	f103 0301 	add.w	r3, r3, #1
 801caf0:	bf08      	it	eq
 801caf2:	2320      	moveq	r3, #32
 801caf4:	4618      	mov	r0, r3
 801caf6:	4770      	bx	lr
 801caf8:	2300      	movs	r3, #0
 801cafa:	e7e4      	b.n	801cac6 <__hi0bits+0xa>

0801cafc <__lo0bits>:
 801cafc:	6803      	ldr	r3, [r0, #0]
 801cafe:	f013 0207 	ands.w	r2, r3, #7
 801cb02:	4601      	mov	r1, r0
 801cb04:	d00b      	beq.n	801cb1e <__lo0bits+0x22>
 801cb06:	07da      	lsls	r2, r3, #31
 801cb08:	d423      	bmi.n	801cb52 <__lo0bits+0x56>
 801cb0a:	0798      	lsls	r0, r3, #30
 801cb0c:	bf49      	itett	mi
 801cb0e:	085b      	lsrmi	r3, r3, #1
 801cb10:	089b      	lsrpl	r3, r3, #2
 801cb12:	2001      	movmi	r0, #1
 801cb14:	600b      	strmi	r3, [r1, #0]
 801cb16:	bf5c      	itt	pl
 801cb18:	600b      	strpl	r3, [r1, #0]
 801cb1a:	2002      	movpl	r0, #2
 801cb1c:	4770      	bx	lr
 801cb1e:	b298      	uxth	r0, r3
 801cb20:	b9a8      	cbnz	r0, 801cb4e <__lo0bits+0x52>
 801cb22:	0c1b      	lsrs	r3, r3, #16
 801cb24:	2010      	movs	r0, #16
 801cb26:	b2da      	uxtb	r2, r3
 801cb28:	b90a      	cbnz	r2, 801cb2e <__lo0bits+0x32>
 801cb2a:	3008      	adds	r0, #8
 801cb2c:	0a1b      	lsrs	r3, r3, #8
 801cb2e:	071a      	lsls	r2, r3, #28
 801cb30:	bf04      	itt	eq
 801cb32:	091b      	lsreq	r3, r3, #4
 801cb34:	3004      	addeq	r0, #4
 801cb36:	079a      	lsls	r2, r3, #30
 801cb38:	bf04      	itt	eq
 801cb3a:	089b      	lsreq	r3, r3, #2
 801cb3c:	3002      	addeq	r0, #2
 801cb3e:	07da      	lsls	r2, r3, #31
 801cb40:	d403      	bmi.n	801cb4a <__lo0bits+0x4e>
 801cb42:	085b      	lsrs	r3, r3, #1
 801cb44:	f100 0001 	add.w	r0, r0, #1
 801cb48:	d005      	beq.n	801cb56 <__lo0bits+0x5a>
 801cb4a:	600b      	str	r3, [r1, #0]
 801cb4c:	4770      	bx	lr
 801cb4e:	4610      	mov	r0, r2
 801cb50:	e7e9      	b.n	801cb26 <__lo0bits+0x2a>
 801cb52:	2000      	movs	r0, #0
 801cb54:	4770      	bx	lr
 801cb56:	2020      	movs	r0, #32
 801cb58:	4770      	bx	lr
	...

0801cb5c <__i2b>:
 801cb5c:	b510      	push	{r4, lr}
 801cb5e:	460c      	mov	r4, r1
 801cb60:	2101      	movs	r1, #1
 801cb62:	f7ff ff03 	bl	801c96c <_Balloc>
 801cb66:	4602      	mov	r2, r0
 801cb68:	b928      	cbnz	r0, 801cb76 <__i2b+0x1a>
 801cb6a:	4b05      	ldr	r3, [pc, #20]	; (801cb80 <__i2b+0x24>)
 801cb6c:	4805      	ldr	r0, [pc, #20]	; (801cb84 <__i2b+0x28>)
 801cb6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801cb72:	f000 fd7d 	bl	801d670 <__assert_func>
 801cb76:	2301      	movs	r3, #1
 801cb78:	6144      	str	r4, [r0, #20]
 801cb7a:	6103      	str	r3, [r0, #16]
 801cb7c:	bd10      	pop	{r4, pc}
 801cb7e:	bf00      	nop
 801cb80:	0801de17 	.word	0x0801de17
 801cb84:	0801de88 	.word	0x0801de88

0801cb88 <__multiply>:
 801cb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb8c:	4691      	mov	r9, r2
 801cb8e:	690a      	ldr	r2, [r1, #16]
 801cb90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cb94:	429a      	cmp	r2, r3
 801cb96:	bfb8      	it	lt
 801cb98:	460b      	movlt	r3, r1
 801cb9a:	460c      	mov	r4, r1
 801cb9c:	bfbc      	itt	lt
 801cb9e:	464c      	movlt	r4, r9
 801cba0:	4699      	movlt	r9, r3
 801cba2:	6927      	ldr	r7, [r4, #16]
 801cba4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801cba8:	68a3      	ldr	r3, [r4, #8]
 801cbaa:	6861      	ldr	r1, [r4, #4]
 801cbac:	eb07 060a 	add.w	r6, r7, sl
 801cbb0:	42b3      	cmp	r3, r6
 801cbb2:	b085      	sub	sp, #20
 801cbb4:	bfb8      	it	lt
 801cbb6:	3101      	addlt	r1, #1
 801cbb8:	f7ff fed8 	bl	801c96c <_Balloc>
 801cbbc:	b930      	cbnz	r0, 801cbcc <__multiply+0x44>
 801cbbe:	4602      	mov	r2, r0
 801cbc0:	4b44      	ldr	r3, [pc, #272]	; (801ccd4 <__multiply+0x14c>)
 801cbc2:	4845      	ldr	r0, [pc, #276]	; (801ccd8 <__multiply+0x150>)
 801cbc4:	f240 115d 	movw	r1, #349	; 0x15d
 801cbc8:	f000 fd52 	bl	801d670 <__assert_func>
 801cbcc:	f100 0514 	add.w	r5, r0, #20
 801cbd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cbd4:	462b      	mov	r3, r5
 801cbd6:	2200      	movs	r2, #0
 801cbd8:	4543      	cmp	r3, r8
 801cbda:	d321      	bcc.n	801cc20 <__multiply+0x98>
 801cbdc:	f104 0314 	add.w	r3, r4, #20
 801cbe0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801cbe4:	f109 0314 	add.w	r3, r9, #20
 801cbe8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801cbec:	9202      	str	r2, [sp, #8]
 801cbee:	1b3a      	subs	r2, r7, r4
 801cbf0:	3a15      	subs	r2, #21
 801cbf2:	f022 0203 	bic.w	r2, r2, #3
 801cbf6:	3204      	adds	r2, #4
 801cbf8:	f104 0115 	add.w	r1, r4, #21
 801cbfc:	428f      	cmp	r7, r1
 801cbfe:	bf38      	it	cc
 801cc00:	2204      	movcc	r2, #4
 801cc02:	9201      	str	r2, [sp, #4]
 801cc04:	9a02      	ldr	r2, [sp, #8]
 801cc06:	9303      	str	r3, [sp, #12]
 801cc08:	429a      	cmp	r2, r3
 801cc0a:	d80c      	bhi.n	801cc26 <__multiply+0x9e>
 801cc0c:	2e00      	cmp	r6, #0
 801cc0e:	dd03      	ble.n	801cc18 <__multiply+0x90>
 801cc10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cc14:	2b00      	cmp	r3, #0
 801cc16:	d05a      	beq.n	801ccce <__multiply+0x146>
 801cc18:	6106      	str	r6, [r0, #16]
 801cc1a:	b005      	add	sp, #20
 801cc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc20:	f843 2b04 	str.w	r2, [r3], #4
 801cc24:	e7d8      	b.n	801cbd8 <__multiply+0x50>
 801cc26:	f8b3 a000 	ldrh.w	sl, [r3]
 801cc2a:	f1ba 0f00 	cmp.w	sl, #0
 801cc2e:	d024      	beq.n	801cc7a <__multiply+0xf2>
 801cc30:	f104 0e14 	add.w	lr, r4, #20
 801cc34:	46a9      	mov	r9, r5
 801cc36:	f04f 0c00 	mov.w	ip, #0
 801cc3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801cc3e:	f8d9 1000 	ldr.w	r1, [r9]
 801cc42:	fa1f fb82 	uxth.w	fp, r2
 801cc46:	b289      	uxth	r1, r1
 801cc48:	fb0a 110b 	mla	r1, sl, fp, r1
 801cc4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801cc50:	f8d9 2000 	ldr.w	r2, [r9]
 801cc54:	4461      	add	r1, ip
 801cc56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cc5a:	fb0a c20b 	mla	r2, sl, fp, ip
 801cc5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801cc62:	b289      	uxth	r1, r1
 801cc64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801cc68:	4577      	cmp	r7, lr
 801cc6a:	f849 1b04 	str.w	r1, [r9], #4
 801cc6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cc72:	d8e2      	bhi.n	801cc3a <__multiply+0xb2>
 801cc74:	9a01      	ldr	r2, [sp, #4]
 801cc76:	f845 c002 	str.w	ip, [r5, r2]
 801cc7a:	9a03      	ldr	r2, [sp, #12]
 801cc7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801cc80:	3304      	adds	r3, #4
 801cc82:	f1b9 0f00 	cmp.w	r9, #0
 801cc86:	d020      	beq.n	801ccca <__multiply+0x142>
 801cc88:	6829      	ldr	r1, [r5, #0]
 801cc8a:	f104 0c14 	add.w	ip, r4, #20
 801cc8e:	46ae      	mov	lr, r5
 801cc90:	f04f 0a00 	mov.w	sl, #0
 801cc94:	f8bc b000 	ldrh.w	fp, [ip]
 801cc98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801cc9c:	fb09 220b 	mla	r2, r9, fp, r2
 801cca0:	4492      	add	sl, r2
 801cca2:	b289      	uxth	r1, r1
 801cca4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801cca8:	f84e 1b04 	str.w	r1, [lr], #4
 801ccac:	f85c 2b04 	ldr.w	r2, [ip], #4
 801ccb0:	f8be 1000 	ldrh.w	r1, [lr]
 801ccb4:	0c12      	lsrs	r2, r2, #16
 801ccb6:	fb09 1102 	mla	r1, r9, r2, r1
 801ccba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801ccbe:	4567      	cmp	r7, ip
 801ccc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ccc4:	d8e6      	bhi.n	801cc94 <__multiply+0x10c>
 801ccc6:	9a01      	ldr	r2, [sp, #4]
 801ccc8:	50a9      	str	r1, [r5, r2]
 801ccca:	3504      	adds	r5, #4
 801cccc:	e79a      	b.n	801cc04 <__multiply+0x7c>
 801ccce:	3e01      	subs	r6, #1
 801ccd0:	e79c      	b.n	801cc0c <__multiply+0x84>
 801ccd2:	bf00      	nop
 801ccd4:	0801de17 	.word	0x0801de17
 801ccd8:	0801de88 	.word	0x0801de88

0801ccdc <__pow5mult>:
 801ccdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cce0:	4615      	mov	r5, r2
 801cce2:	f012 0203 	ands.w	r2, r2, #3
 801cce6:	4606      	mov	r6, r0
 801cce8:	460f      	mov	r7, r1
 801ccea:	d007      	beq.n	801ccfc <__pow5mult+0x20>
 801ccec:	4c25      	ldr	r4, [pc, #148]	; (801cd84 <__pow5mult+0xa8>)
 801ccee:	3a01      	subs	r2, #1
 801ccf0:	2300      	movs	r3, #0
 801ccf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ccf6:	f7ff fe9b 	bl	801ca30 <__multadd>
 801ccfa:	4607      	mov	r7, r0
 801ccfc:	10ad      	asrs	r5, r5, #2
 801ccfe:	d03d      	beq.n	801cd7c <__pow5mult+0xa0>
 801cd00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801cd02:	b97c      	cbnz	r4, 801cd24 <__pow5mult+0x48>
 801cd04:	2010      	movs	r0, #16
 801cd06:	f7ff fe29 	bl	801c95c <malloc>
 801cd0a:	4602      	mov	r2, r0
 801cd0c:	6270      	str	r0, [r6, #36]	; 0x24
 801cd0e:	b928      	cbnz	r0, 801cd1c <__pow5mult+0x40>
 801cd10:	4b1d      	ldr	r3, [pc, #116]	; (801cd88 <__pow5mult+0xac>)
 801cd12:	481e      	ldr	r0, [pc, #120]	; (801cd8c <__pow5mult+0xb0>)
 801cd14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801cd18:	f000 fcaa 	bl	801d670 <__assert_func>
 801cd1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cd20:	6004      	str	r4, [r0, #0]
 801cd22:	60c4      	str	r4, [r0, #12]
 801cd24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801cd28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cd2c:	b94c      	cbnz	r4, 801cd42 <__pow5mult+0x66>
 801cd2e:	f240 2171 	movw	r1, #625	; 0x271
 801cd32:	4630      	mov	r0, r6
 801cd34:	f7ff ff12 	bl	801cb5c <__i2b>
 801cd38:	2300      	movs	r3, #0
 801cd3a:	f8c8 0008 	str.w	r0, [r8, #8]
 801cd3e:	4604      	mov	r4, r0
 801cd40:	6003      	str	r3, [r0, #0]
 801cd42:	f04f 0900 	mov.w	r9, #0
 801cd46:	07eb      	lsls	r3, r5, #31
 801cd48:	d50a      	bpl.n	801cd60 <__pow5mult+0x84>
 801cd4a:	4639      	mov	r1, r7
 801cd4c:	4622      	mov	r2, r4
 801cd4e:	4630      	mov	r0, r6
 801cd50:	f7ff ff1a 	bl	801cb88 <__multiply>
 801cd54:	4639      	mov	r1, r7
 801cd56:	4680      	mov	r8, r0
 801cd58:	4630      	mov	r0, r6
 801cd5a:	f7ff fe47 	bl	801c9ec <_Bfree>
 801cd5e:	4647      	mov	r7, r8
 801cd60:	106d      	asrs	r5, r5, #1
 801cd62:	d00b      	beq.n	801cd7c <__pow5mult+0xa0>
 801cd64:	6820      	ldr	r0, [r4, #0]
 801cd66:	b938      	cbnz	r0, 801cd78 <__pow5mult+0x9c>
 801cd68:	4622      	mov	r2, r4
 801cd6a:	4621      	mov	r1, r4
 801cd6c:	4630      	mov	r0, r6
 801cd6e:	f7ff ff0b 	bl	801cb88 <__multiply>
 801cd72:	6020      	str	r0, [r4, #0]
 801cd74:	f8c0 9000 	str.w	r9, [r0]
 801cd78:	4604      	mov	r4, r0
 801cd7a:	e7e4      	b.n	801cd46 <__pow5mult+0x6a>
 801cd7c:	4638      	mov	r0, r7
 801cd7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd82:	bf00      	nop
 801cd84:	0801dfd8 	.word	0x0801dfd8
 801cd88:	0801dda5 	.word	0x0801dda5
 801cd8c:	0801de88 	.word	0x0801de88

0801cd90 <__lshift>:
 801cd90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd94:	460c      	mov	r4, r1
 801cd96:	6849      	ldr	r1, [r1, #4]
 801cd98:	6923      	ldr	r3, [r4, #16]
 801cd9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cd9e:	68a3      	ldr	r3, [r4, #8]
 801cda0:	4607      	mov	r7, r0
 801cda2:	4691      	mov	r9, r2
 801cda4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cda8:	f108 0601 	add.w	r6, r8, #1
 801cdac:	42b3      	cmp	r3, r6
 801cdae:	db0b      	blt.n	801cdc8 <__lshift+0x38>
 801cdb0:	4638      	mov	r0, r7
 801cdb2:	f7ff fddb 	bl	801c96c <_Balloc>
 801cdb6:	4605      	mov	r5, r0
 801cdb8:	b948      	cbnz	r0, 801cdce <__lshift+0x3e>
 801cdba:	4602      	mov	r2, r0
 801cdbc:	4b2a      	ldr	r3, [pc, #168]	; (801ce68 <__lshift+0xd8>)
 801cdbe:	482b      	ldr	r0, [pc, #172]	; (801ce6c <__lshift+0xdc>)
 801cdc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 801cdc4:	f000 fc54 	bl	801d670 <__assert_func>
 801cdc8:	3101      	adds	r1, #1
 801cdca:	005b      	lsls	r3, r3, #1
 801cdcc:	e7ee      	b.n	801cdac <__lshift+0x1c>
 801cdce:	2300      	movs	r3, #0
 801cdd0:	f100 0114 	add.w	r1, r0, #20
 801cdd4:	f100 0210 	add.w	r2, r0, #16
 801cdd8:	4618      	mov	r0, r3
 801cdda:	4553      	cmp	r3, sl
 801cddc:	db37      	blt.n	801ce4e <__lshift+0xbe>
 801cdde:	6920      	ldr	r0, [r4, #16]
 801cde0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cde4:	f104 0314 	add.w	r3, r4, #20
 801cde8:	f019 091f 	ands.w	r9, r9, #31
 801cdec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cdf0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801cdf4:	d02f      	beq.n	801ce56 <__lshift+0xc6>
 801cdf6:	f1c9 0e20 	rsb	lr, r9, #32
 801cdfa:	468a      	mov	sl, r1
 801cdfc:	f04f 0c00 	mov.w	ip, #0
 801ce00:	681a      	ldr	r2, [r3, #0]
 801ce02:	fa02 f209 	lsl.w	r2, r2, r9
 801ce06:	ea42 020c 	orr.w	r2, r2, ip
 801ce0a:	f84a 2b04 	str.w	r2, [sl], #4
 801ce0e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce12:	4298      	cmp	r0, r3
 801ce14:	fa22 fc0e 	lsr.w	ip, r2, lr
 801ce18:	d8f2      	bhi.n	801ce00 <__lshift+0x70>
 801ce1a:	1b03      	subs	r3, r0, r4
 801ce1c:	3b15      	subs	r3, #21
 801ce1e:	f023 0303 	bic.w	r3, r3, #3
 801ce22:	3304      	adds	r3, #4
 801ce24:	f104 0215 	add.w	r2, r4, #21
 801ce28:	4290      	cmp	r0, r2
 801ce2a:	bf38      	it	cc
 801ce2c:	2304      	movcc	r3, #4
 801ce2e:	f841 c003 	str.w	ip, [r1, r3]
 801ce32:	f1bc 0f00 	cmp.w	ip, #0
 801ce36:	d001      	beq.n	801ce3c <__lshift+0xac>
 801ce38:	f108 0602 	add.w	r6, r8, #2
 801ce3c:	3e01      	subs	r6, #1
 801ce3e:	4638      	mov	r0, r7
 801ce40:	612e      	str	r6, [r5, #16]
 801ce42:	4621      	mov	r1, r4
 801ce44:	f7ff fdd2 	bl	801c9ec <_Bfree>
 801ce48:	4628      	mov	r0, r5
 801ce4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce4e:	f842 0f04 	str.w	r0, [r2, #4]!
 801ce52:	3301      	adds	r3, #1
 801ce54:	e7c1      	b.n	801cdda <__lshift+0x4a>
 801ce56:	3904      	subs	r1, #4
 801ce58:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce5c:	f841 2f04 	str.w	r2, [r1, #4]!
 801ce60:	4298      	cmp	r0, r3
 801ce62:	d8f9      	bhi.n	801ce58 <__lshift+0xc8>
 801ce64:	e7ea      	b.n	801ce3c <__lshift+0xac>
 801ce66:	bf00      	nop
 801ce68:	0801de17 	.word	0x0801de17
 801ce6c:	0801de88 	.word	0x0801de88

0801ce70 <__mcmp>:
 801ce70:	b530      	push	{r4, r5, lr}
 801ce72:	6902      	ldr	r2, [r0, #16]
 801ce74:	690c      	ldr	r4, [r1, #16]
 801ce76:	1b12      	subs	r2, r2, r4
 801ce78:	d10e      	bne.n	801ce98 <__mcmp+0x28>
 801ce7a:	f100 0314 	add.w	r3, r0, #20
 801ce7e:	3114      	adds	r1, #20
 801ce80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ce84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ce88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ce8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ce90:	42a5      	cmp	r5, r4
 801ce92:	d003      	beq.n	801ce9c <__mcmp+0x2c>
 801ce94:	d305      	bcc.n	801cea2 <__mcmp+0x32>
 801ce96:	2201      	movs	r2, #1
 801ce98:	4610      	mov	r0, r2
 801ce9a:	bd30      	pop	{r4, r5, pc}
 801ce9c:	4283      	cmp	r3, r0
 801ce9e:	d3f3      	bcc.n	801ce88 <__mcmp+0x18>
 801cea0:	e7fa      	b.n	801ce98 <__mcmp+0x28>
 801cea2:	f04f 32ff 	mov.w	r2, #4294967295
 801cea6:	e7f7      	b.n	801ce98 <__mcmp+0x28>

0801cea8 <__mdiff>:
 801cea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ceac:	460c      	mov	r4, r1
 801ceae:	4606      	mov	r6, r0
 801ceb0:	4611      	mov	r1, r2
 801ceb2:	4620      	mov	r0, r4
 801ceb4:	4690      	mov	r8, r2
 801ceb6:	f7ff ffdb 	bl	801ce70 <__mcmp>
 801ceba:	1e05      	subs	r5, r0, #0
 801cebc:	d110      	bne.n	801cee0 <__mdiff+0x38>
 801cebe:	4629      	mov	r1, r5
 801cec0:	4630      	mov	r0, r6
 801cec2:	f7ff fd53 	bl	801c96c <_Balloc>
 801cec6:	b930      	cbnz	r0, 801ced6 <__mdiff+0x2e>
 801cec8:	4b3a      	ldr	r3, [pc, #232]	; (801cfb4 <__mdiff+0x10c>)
 801ceca:	4602      	mov	r2, r0
 801cecc:	f240 2132 	movw	r1, #562	; 0x232
 801ced0:	4839      	ldr	r0, [pc, #228]	; (801cfb8 <__mdiff+0x110>)
 801ced2:	f000 fbcd 	bl	801d670 <__assert_func>
 801ced6:	2301      	movs	r3, #1
 801ced8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cedc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cee0:	bfa4      	itt	ge
 801cee2:	4643      	movge	r3, r8
 801cee4:	46a0      	movge	r8, r4
 801cee6:	4630      	mov	r0, r6
 801cee8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ceec:	bfa6      	itte	ge
 801ceee:	461c      	movge	r4, r3
 801cef0:	2500      	movge	r5, #0
 801cef2:	2501      	movlt	r5, #1
 801cef4:	f7ff fd3a 	bl	801c96c <_Balloc>
 801cef8:	b920      	cbnz	r0, 801cf04 <__mdiff+0x5c>
 801cefa:	4b2e      	ldr	r3, [pc, #184]	; (801cfb4 <__mdiff+0x10c>)
 801cefc:	4602      	mov	r2, r0
 801cefe:	f44f 7110 	mov.w	r1, #576	; 0x240
 801cf02:	e7e5      	b.n	801ced0 <__mdiff+0x28>
 801cf04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801cf08:	6926      	ldr	r6, [r4, #16]
 801cf0a:	60c5      	str	r5, [r0, #12]
 801cf0c:	f104 0914 	add.w	r9, r4, #20
 801cf10:	f108 0514 	add.w	r5, r8, #20
 801cf14:	f100 0e14 	add.w	lr, r0, #20
 801cf18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801cf1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801cf20:	f108 0210 	add.w	r2, r8, #16
 801cf24:	46f2      	mov	sl, lr
 801cf26:	2100      	movs	r1, #0
 801cf28:	f859 3b04 	ldr.w	r3, [r9], #4
 801cf2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801cf30:	fa1f f883 	uxth.w	r8, r3
 801cf34:	fa11 f18b 	uxtah	r1, r1, fp
 801cf38:	0c1b      	lsrs	r3, r3, #16
 801cf3a:	eba1 0808 	sub.w	r8, r1, r8
 801cf3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801cf42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801cf46:	fa1f f888 	uxth.w	r8, r8
 801cf4a:	1419      	asrs	r1, r3, #16
 801cf4c:	454e      	cmp	r6, r9
 801cf4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801cf52:	f84a 3b04 	str.w	r3, [sl], #4
 801cf56:	d8e7      	bhi.n	801cf28 <__mdiff+0x80>
 801cf58:	1b33      	subs	r3, r6, r4
 801cf5a:	3b15      	subs	r3, #21
 801cf5c:	f023 0303 	bic.w	r3, r3, #3
 801cf60:	3304      	adds	r3, #4
 801cf62:	3415      	adds	r4, #21
 801cf64:	42a6      	cmp	r6, r4
 801cf66:	bf38      	it	cc
 801cf68:	2304      	movcc	r3, #4
 801cf6a:	441d      	add	r5, r3
 801cf6c:	4473      	add	r3, lr
 801cf6e:	469e      	mov	lr, r3
 801cf70:	462e      	mov	r6, r5
 801cf72:	4566      	cmp	r6, ip
 801cf74:	d30e      	bcc.n	801cf94 <__mdiff+0xec>
 801cf76:	f10c 0203 	add.w	r2, ip, #3
 801cf7a:	1b52      	subs	r2, r2, r5
 801cf7c:	f022 0203 	bic.w	r2, r2, #3
 801cf80:	3d03      	subs	r5, #3
 801cf82:	45ac      	cmp	ip, r5
 801cf84:	bf38      	it	cc
 801cf86:	2200      	movcc	r2, #0
 801cf88:	441a      	add	r2, r3
 801cf8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801cf8e:	b17b      	cbz	r3, 801cfb0 <__mdiff+0x108>
 801cf90:	6107      	str	r7, [r0, #16]
 801cf92:	e7a3      	b.n	801cedc <__mdiff+0x34>
 801cf94:	f856 8b04 	ldr.w	r8, [r6], #4
 801cf98:	fa11 f288 	uxtah	r2, r1, r8
 801cf9c:	1414      	asrs	r4, r2, #16
 801cf9e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801cfa2:	b292      	uxth	r2, r2
 801cfa4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801cfa8:	f84e 2b04 	str.w	r2, [lr], #4
 801cfac:	1421      	asrs	r1, r4, #16
 801cfae:	e7e0      	b.n	801cf72 <__mdiff+0xca>
 801cfb0:	3f01      	subs	r7, #1
 801cfb2:	e7ea      	b.n	801cf8a <__mdiff+0xe2>
 801cfb4:	0801de17 	.word	0x0801de17
 801cfb8:	0801de88 	.word	0x0801de88

0801cfbc <__d2b>:
 801cfbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cfc0:	4689      	mov	r9, r1
 801cfc2:	2101      	movs	r1, #1
 801cfc4:	ec57 6b10 	vmov	r6, r7, d0
 801cfc8:	4690      	mov	r8, r2
 801cfca:	f7ff fccf 	bl	801c96c <_Balloc>
 801cfce:	4604      	mov	r4, r0
 801cfd0:	b930      	cbnz	r0, 801cfe0 <__d2b+0x24>
 801cfd2:	4602      	mov	r2, r0
 801cfd4:	4b25      	ldr	r3, [pc, #148]	; (801d06c <__d2b+0xb0>)
 801cfd6:	4826      	ldr	r0, [pc, #152]	; (801d070 <__d2b+0xb4>)
 801cfd8:	f240 310a 	movw	r1, #778	; 0x30a
 801cfdc:	f000 fb48 	bl	801d670 <__assert_func>
 801cfe0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801cfe4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cfe8:	bb35      	cbnz	r5, 801d038 <__d2b+0x7c>
 801cfea:	2e00      	cmp	r6, #0
 801cfec:	9301      	str	r3, [sp, #4]
 801cfee:	d028      	beq.n	801d042 <__d2b+0x86>
 801cff0:	4668      	mov	r0, sp
 801cff2:	9600      	str	r6, [sp, #0]
 801cff4:	f7ff fd82 	bl	801cafc <__lo0bits>
 801cff8:	9900      	ldr	r1, [sp, #0]
 801cffa:	b300      	cbz	r0, 801d03e <__d2b+0x82>
 801cffc:	9a01      	ldr	r2, [sp, #4]
 801cffe:	f1c0 0320 	rsb	r3, r0, #32
 801d002:	fa02 f303 	lsl.w	r3, r2, r3
 801d006:	430b      	orrs	r3, r1
 801d008:	40c2      	lsrs	r2, r0
 801d00a:	6163      	str	r3, [r4, #20]
 801d00c:	9201      	str	r2, [sp, #4]
 801d00e:	9b01      	ldr	r3, [sp, #4]
 801d010:	61a3      	str	r3, [r4, #24]
 801d012:	2b00      	cmp	r3, #0
 801d014:	bf14      	ite	ne
 801d016:	2202      	movne	r2, #2
 801d018:	2201      	moveq	r2, #1
 801d01a:	6122      	str	r2, [r4, #16]
 801d01c:	b1d5      	cbz	r5, 801d054 <__d2b+0x98>
 801d01e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d022:	4405      	add	r5, r0
 801d024:	f8c9 5000 	str.w	r5, [r9]
 801d028:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d02c:	f8c8 0000 	str.w	r0, [r8]
 801d030:	4620      	mov	r0, r4
 801d032:	b003      	add	sp, #12
 801d034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d038:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d03c:	e7d5      	b.n	801cfea <__d2b+0x2e>
 801d03e:	6161      	str	r1, [r4, #20]
 801d040:	e7e5      	b.n	801d00e <__d2b+0x52>
 801d042:	a801      	add	r0, sp, #4
 801d044:	f7ff fd5a 	bl	801cafc <__lo0bits>
 801d048:	9b01      	ldr	r3, [sp, #4]
 801d04a:	6163      	str	r3, [r4, #20]
 801d04c:	2201      	movs	r2, #1
 801d04e:	6122      	str	r2, [r4, #16]
 801d050:	3020      	adds	r0, #32
 801d052:	e7e3      	b.n	801d01c <__d2b+0x60>
 801d054:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d058:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d05c:	f8c9 0000 	str.w	r0, [r9]
 801d060:	6918      	ldr	r0, [r3, #16]
 801d062:	f7ff fd2b 	bl	801cabc <__hi0bits>
 801d066:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d06a:	e7df      	b.n	801d02c <__d2b+0x70>
 801d06c:	0801de17 	.word	0x0801de17
 801d070:	0801de88 	.word	0x0801de88

0801d074 <_calloc_r>:
 801d074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d076:	fba1 2402 	umull	r2, r4, r1, r2
 801d07a:	b94c      	cbnz	r4, 801d090 <_calloc_r+0x1c>
 801d07c:	4611      	mov	r1, r2
 801d07e:	9201      	str	r2, [sp, #4]
 801d080:	f000 f87a 	bl	801d178 <_malloc_r>
 801d084:	9a01      	ldr	r2, [sp, #4]
 801d086:	4605      	mov	r5, r0
 801d088:	b930      	cbnz	r0, 801d098 <_calloc_r+0x24>
 801d08a:	4628      	mov	r0, r5
 801d08c:	b003      	add	sp, #12
 801d08e:	bd30      	pop	{r4, r5, pc}
 801d090:	220c      	movs	r2, #12
 801d092:	6002      	str	r2, [r0, #0]
 801d094:	2500      	movs	r5, #0
 801d096:	e7f8      	b.n	801d08a <_calloc_r+0x16>
 801d098:	4621      	mov	r1, r4
 801d09a:	f7fd fdd7 	bl	801ac4c <memset>
 801d09e:	e7f4      	b.n	801d08a <_calloc_r+0x16>

0801d0a0 <_free_r>:
 801d0a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d0a2:	2900      	cmp	r1, #0
 801d0a4:	d044      	beq.n	801d130 <_free_r+0x90>
 801d0a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d0aa:	9001      	str	r0, [sp, #4]
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	f1a1 0404 	sub.w	r4, r1, #4
 801d0b2:	bfb8      	it	lt
 801d0b4:	18e4      	addlt	r4, r4, r3
 801d0b6:	f000 fb61 	bl	801d77c <__malloc_lock>
 801d0ba:	4a1e      	ldr	r2, [pc, #120]	; (801d134 <_free_r+0x94>)
 801d0bc:	9801      	ldr	r0, [sp, #4]
 801d0be:	6813      	ldr	r3, [r2, #0]
 801d0c0:	b933      	cbnz	r3, 801d0d0 <_free_r+0x30>
 801d0c2:	6063      	str	r3, [r4, #4]
 801d0c4:	6014      	str	r4, [r2, #0]
 801d0c6:	b003      	add	sp, #12
 801d0c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d0cc:	f000 bb5c 	b.w	801d788 <__malloc_unlock>
 801d0d0:	42a3      	cmp	r3, r4
 801d0d2:	d908      	bls.n	801d0e6 <_free_r+0x46>
 801d0d4:	6825      	ldr	r5, [r4, #0]
 801d0d6:	1961      	adds	r1, r4, r5
 801d0d8:	428b      	cmp	r3, r1
 801d0da:	bf01      	itttt	eq
 801d0dc:	6819      	ldreq	r1, [r3, #0]
 801d0de:	685b      	ldreq	r3, [r3, #4]
 801d0e0:	1949      	addeq	r1, r1, r5
 801d0e2:	6021      	streq	r1, [r4, #0]
 801d0e4:	e7ed      	b.n	801d0c2 <_free_r+0x22>
 801d0e6:	461a      	mov	r2, r3
 801d0e8:	685b      	ldr	r3, [r3, #4]
 801d0ea:	b10b      	cbz	r3, 801d0f0 <_free_r+0x50>
 801d0ec:	42a3      	cmp	r3, r4
 801d0ee:	d9fa      	bls.n	801d0e6 <_free_r+0x46>
 801d0f0:	6811      	ldr	r1, [r2, #0]
 801d0f2:	1855      	adds	r5, r2, r1
 801d0f4:	42a5      	cmp	r5, r4
 801d0f6:	d10b      	bne.n	801d110 <_free_r+0x70>
 801d0f8:	6824      	ldr	r4, [r4, #0]
 801d0fa:	4421      	add	r1, r4
 801d0fc:	1854      	adds	r4, r2, r1
 801d0fe:	42a3      	cmp	r3, r4
 801d100:	6011      	str	r1, [r2, #0]
 801d102:	d1e0      	bne.n	801d0c6 <_free_r+0x26>
 801d104:	681c      	ldr	r4, [r3, #0]
 801d106:	685b      	ldr	r3, [r3, #4]
 801d108:	6053      	str	r3, [r2, #4]
 801d10a:	4421      	add	r1, r4
 801d10c:	6011      	str	r1, [r2, #0]
 801d10e:	e7da      	b.n	801d0c6 <_free_r+0x26>
 801d110:	d902      	bls.n	801d118 <_free_r+0x78>
 801d112:	230c      	movs	r3, #12
 801d114:	6003      	str	r3, [r0, #0]
 801d116:	e7d6      	b.n	801d0c6 <_free_r+0x26>
 801d118:	6825      	ldr	r5, [r4, #0]
 801d11a:	1961      	adds	r1, r4, r5
 801d11c:	428b      	cmp	r3, r1
 801d11e:	bf04      	itt	eq
 801d120:	6819      	ldreq	r1, [r3, #0]
 801d122:	685b      	ldreq	r3, [r3, #4]
 801d124:	6063      	str	r3, [r4, #4]
 801d126:	bf04      	itt	eq
 801d128:	1949      	addeq	r1, r1, r5
 801d12a:	6021      	streq	r1, [r4, #0]
 801d12c:	6054      	str	r4, [r2, #4]
 801d12e:	e7ca      	b.n	801d0c6 <_free_r+0x26>
 801d130:	b003      	add	sp, #12
 801d132:	bd30      	pop	{r4, r5, pc}
 801d134:	20008850 	.word	0x20008850

0801d138 <sbrk_aligned>:
 801d138:	b570      	push	{r4, r5, r6, lr}
 801d13a:	4e0e      	ldr	r6, [pc, #56]	; (801d174 <sbrk_aligned+0x3c>)
 801d13c:	460c      	mov	r4, r1
 801d13e:	6831      	ldr	r1, [r6, #0]
 801d140:	4605      	mov	r5, r0
 801d142:	b911      	cbnz	r1, 801d14a <sbrk_aligned+0x12>
 801d144:	f000 fa2e 	bl	801d5a4 <_sbrk_r>
 801d148:	6030      	str	r0, [r6, #0]
 801d14a:	4621      	mov	r1, r4
 801d14c:	4628      	mov	r0, r5
 801d14e:	f000 fa29 	bl	801d5a4 <_sbrk_r>
 801d152:	1c43      	adds	r3, r0, #1
 801d154:	d00a      	beq.n	801d16c <sbrk_aligned+0x34>
 801d156:	1cc4      	adds	r4, r0, #3
 801d158:	f024 0403 	bic.w	r4, r4, #3
 801d15c:	42a0      	cmp	r0, r4
 801d15e:	d007      	beq.n	801d170 <sbrk_aligned+0x38>
 801d160:	1a21      	subs	r1, r4, r0
 801d162:	4628      	mov	r0, r5
 801d164:	f000 fa1e 	bl	801d5a4 <_sbrk_r>
 801d168:	3001      	adds	r0, #1
 801d16a:	d101      	bne.n	801d170 <sbrk_aligned+0x38>
 801d16c:	f04f 34ff 	mov.w	r4, #4294967295
 801d170:	4620      	mov	r0, r4
 801d172:	bd70      	pop	{r4, r5, r6, pc}
 801d174:	20008854 	.word	0x20008854

0801d178 <_malloc_r>:
 801d178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d17c:	1ccd      	adds	r5, r1, #3
 801d17e:	f025 0503 	bic.w	r5, r5, #3
 801d182:	3508      	adds	r5, #8
 801d184:	2d0c      	cmp	r5, #12
 801d186:	bf38      	it	cc
 801d188:	250c      	movcc	r5, #12
 801d18a:	2d00      	cmp	r5, #0
 801d18c:	4607      	mov	r7, r0
 801d18e:	db01      	blt.n	801d194 <_malloc_r+0x1c>
 801d190:	42a9      	cmp	r1, r5
 801d192:	d905      	bls.n	801d1a0 <_malloc_r+0x28>
 801d194:	230c      	movs	r3, #12
 801d196:	603b      	str	r3, [r7, #0]
 801d198:	2600      	movs	r6, #0
 801d19a:	4630      	mov	r0, r6
 801d19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1a0:	4e2e      	ldr	r6, [pc, #184]	; (801d25c <_malloc_r+0xe4>)
 801d1a2:	f000 faeb 	bl	801d77c <__malloc_lock>
 801d1a6:	6833      	ldr	r3, [r6, #0]
 801d1a8:	461c      	mov	r4, r3
 801d1aa:	bb34      	cbnz	r4, 801d1fa <_malloc_r+0x82>
 801d1ac:	4629      	mov	r1, r5
 801d1ae:	4638      	mov	r0, r7
 801d1b0:	f7ff ffc2 	bl	801d138 <sbrk_aligned>
 801d1b4:	1c43      	adds	r3, r0, #1
 801d1b6:	4604      	mov	r4, r0
 801d1b8:	d14d      	bne.n	801d256 <_malloc_r+0xde>
 801d1ba:	6834      	ldr	r4, [r6, #0]
 801d1bc:	4626      	mov	r6, r4
 801d1be:	2e00      	cmp	r6, #0
 801d1c0:	d140      	bne.n	801d244 <_malloc_r+0xcc>
 801d1c2:	6823      	ldr	r3, [r4, #0]
 801d1c4:	4631      	mov	r1, r6
 801d1c6:	4638      	mov	r0, r7
 801d1c8:	eb04 0803 	add.w	r8, r4, r3
 801d1cc:	f000 f9ea 	bl	801d5a4 <_sbrk_r>
 801d1d0:	4580      	cmp	r8, r0
 801d1d2:	d13a      	bne.n	801d24a <_malloc_r+0xd2>
 801d1d4:	6821      	ldr	r1, [r4, #0]
 801d1d6:	3503      	adds	r5, #3
 801d1d8:	1a6d      	subs	r5, r5, r1
 801d1da:	f025 0503 	bic.w	r5, r5, #3
 801d1de:	3508      	adds	r5, #8
 801d1e0:	2d0c      	cmp	r5, #12
 801d1e2:	bf38      	it	cc
 801d1e4:	250c      	movcc	r5, #12
 801d1e6:	4629      	mov	r1, r5
 801d1e8:	4638      	mov	r0, r7
 801d1ea:	f7ff ffa5 	bl	801d138 <sbrk_aligned>
 801d1ee:	3001      	adds	r0, #1
 801d1f0:	d02b      	beq.n	801d24a <_malloc_r+0xd2>
 801d1f2:	6823      	ldr	r3, [r4, #0]
 801d1f4:	442b      	add	r3, r5
 801d1f6:	6023      	str	r3, [r4, #0]
 801d1f8:	e00e      	b.n	801d218 <_malloc_r+0xa0>
 801d1fa:	6822      	ldr	r2, [r4, #0]
 801d1fc:	1b52      	subs	r2, r2, r5
 801d1fe:	d41e      	bmi.n	801d23e <_malloc_r+0xc6>
 801d200:	2a0b      	cmp	r2, #11
 801d202:	d916      	bls.n	801d232 <_malloc_r+0xba>
 801d204:	1961      	adds	r1, r4, r5
 801d206:	42a3      	cmp	r3, r4
 801d208:	6025      	str	r5, [r4, #0]
 801d20a:	bf18      	it	ne
 801d20c:	6059      	strne	r1, [r3, #4]
 801d20e:	6863      	ldr	r3, [r4, #4]
 801d210:	bf08      	it	eq
 801d212:	6031      	streq	r1, [r6, #0]
 801d214:	5162      	str	r2, [r4, r5]
 801d216:	604b      	str	r3, [r1, #4]
 801d218:	4638      	mov	r0, r7
 801d21a:	f104 060b 	add.w	r6, r4, #11
 801d21e:	f000 fab3 	bl	801d788 <__malloc_unlock>
 801d222:	f026 0607 	bic.w	r6, r6, #7
 801d226:	1d23      	adds	r3, r4, #4
 801d228:	1af2      	subs	r2, r6, r3
 801d22a:	d0b6      	beq.n	801d19a <_malloc_r+0x22>
 801d22c:	1b9b      	subs	r3, r3, r6
 801d22e:	50a3      	str	r3, [r4, r2]
 801d230:	e7b3      	b.n	801d19a <_malloc_r+0x22>
 801d232:	6862      	ldr	r2, [r4, #4]
 801d234:	42a3      	cmp	r3, r4
 801d236:	bf0c      	ite	eq
 801d238:	6032      	streq	r2, [r6, #0]
 801d23a:	605a      	strne	r2, [r3, #4]
 801d23c:	e7ec      	b.n	801d218 <_malloc_r+0xa0>
 801d23e:	4623      	mov	r3, r4
 801d240:	6864      	ldr	r4, [r4, #4]
 801d242:	e7b2      	b.n	801d1aa <_malloc_r+0x32>
 801d244:	4634      	mov	r4, r6
 801d246:	6876      	ldr	r6, [r6, #4]
 801d248:	e7b9      	b.n	801d1be <_malloc_r+0x46>
 801d24a:	230c      	movs	r3, #12
 801d24c:	603b      	str	r3, [r7, #0]
 801d24e:	4638      	mov	r0, r7
 801d250:	f000 fa9a 	bl	801d788 <__malloc_unlock>
 801d254:	e7a1      	b.n	801d19a <_malloc_r+0x22>
 801d256:	6025      	str	r5, [r4, #0]
 801d258:	e7de      	b.n	801d218 <_malloc_r+0xa0>
 801d25a:	bf00      	nop
 801d25c:	20008850 	.word	0x20008850

0801d260 <__sfputc_r>:
 801d260:	6893      	ldr	r3, [r2, #8]
 801d262:	3b01      	subs	r3, #1
 801d264:	2b00      	cmp	r3, #0
 801d266:	b410      	push	{r4}
 801d268:	6093      	str	r3, [r2, #8]
 801d26a:	da08      	bge.n	801d27e <__sfputc_r+0x1e>
 801d26c:	6994      	ldr	r4, [r2, #24]
 801d26e:	42a3      	cmp	r3, r4
 801d270:	db01      	blt.n	801d276 <__sfputc_r+0x16>
 801d272:	290a      	cmp	r1, #10
 801d274:	d103      	bne.n	801d27e <__sfputc_r+0x1e>
 801d276:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d27a:	f7fe ba11 	b.w	801b6a0 <__swbuf_r>
 801d27e:	6813      	ldr	r3, [r2, #0]
 801d280:	1c58      	adds	r0, r3, #1
 801d282:	6010      	str	r0, [r2, #0]
 801d284:	7019      	strb	r1, [r3, #0]
 801d286:	4608      	mov	r0, r1
 801d288:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d28c:	4770      	bx	lr

0801d28e <__sfputs_r>:
 801d28e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d290:	4606      	mov	r6, r0
 801d292:	460f      	mov	r7, r1
 801d294:	4614      	mov	r4, r2
 801d296:	18d5      	adds	r5, r2, r3
 801d298:	42ac      	cmp	r4, r5
 801d29a:	d101      	bne.n	801d2a0 <__sfputs_r+0x12>
 801d29c:	2000      	movs	r0, #0
 801d29e:	e007      	b.n	801d2b0 <__sfputs_r+0x22>
 801d2a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d2a4:	463a      	mov	r2, r7
 801d2a6:	4630      	mov	r0, r6
 801d2a8:	f7ff ffda 	bl	801d260 <__sfputc_r>
 801d2ac:	1c43      	adds	r3, r0, #1
 801d2ae:	d1f3      	bne.n	801d298 <__sfputs_r+0xa>
 801d2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d2b4 <_vfiprintf_r>:
 801d2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2b8:	460d      	mov	r5, r1
 801d2ba:	b09d      	sub	sp, #116	; 0x74
 801d2bc:	4614      	mov	r4, r2
 801d2be:	4698      	mov	r8, r3
 801d2c0:	4606      	mov	r6, r0
 801d2c2:	b118      	cbz	r0, 801d2cc <_vfiprintf_r+0x18>
 801d2c4:	6983      	ldr	r3, [r0, #24]
 801d2c6:	b90b      	cbnz	r3, 801d2cc <_vfiprintf_r+0x18>
 801d2c8:	f7ff fa3e 	bl	801c748 <__sinit>
 801d2cc:	4b89      	ldr	r3, [pc, #548]	; (801d4f4 <_vfiprintf_r+0x240>)
 801d2ce:	429d      	cmp	r5, r3
 801d2d0:	d11b      	bne.n	801d30a <_vfiprintf_r+0x56>
 801d2d2:	6875      	ldr	r5, [r6, #4]
 801d2d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d2d6:	07d9      	lsls	r1, r3, #31
 801d2d8:	d405      	bmi.n	801d2e6 <_vfiprintf_r+0x32>
 801d2da:	89ab      	ldrh	r3, [r5, #12]
 801d2dc:	059a      	lsls	r2, r3, #22
 801d2de:	d402      	bmi.n	801d2e6 <_vfiprintf_r+0x32>
 801d2e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d2e2:	f7ff fad4 	bl	801c88e <__retarget_lock_acquire_recursive>
 801d2e6:	89ab      	ldrh	r3, [r5, #12]
 801d2e8:	071b      	lsls	r3, r3, #28
 801d2ea:	d501      	bpl.n	801d2f0 <_vfiprintf_r+0x3c>
 801d2ec:	692b      	ldr	r3, [r5, #16]
 801d2ee:	b9eb      	cbnz	r3, 801d32c <_vfiprintf_r+0x78>
 801d2f0:	4629      	mov	r1, r5
 801d2f2:	4630      	mov	r0, r6
 801d2f4:	f7fe fa26 	bl	801b744 <__swsetup_r>
 801d2f8:	b1c0      	cbz	r0, 801d32c <_vfiprintf_r+0x78>
 801d2fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d2fc:	07dc      	lsls	r4, r3, #31
 801d2fe:	d50e      	bpl.n	801d31e <_vfiprintf_r+0x6a>
 801d300:	f04f 30ff 	mov.w	r0, #4294967295
 801d304:	b01d      	add	sp, #116	; 0x74
 801d306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d30a:	4b7b      	ldr	r3, [pc, #492]	; (801d4f8 <_vfiprintf_r+0x244>)
 801d30c:	429d      	cmp	r5, r3
 801d30e:	d101      	bne.n	801d314 <_vfiprintf_r+0x60>
 801d310:	68b5      	ldr	r5, [r6, #8]
 801d312:	e7df      	b.n	801d2d4 <_vfiprintf_r+0x20>
 801d314:	4b79      	ldr	r3, [pc, #484]	; (801d4fc <_vfiprintf_r+0x248>)
 801d316:	429d      	cmp	r5, r3
 801d318:	bf08      	it	eq
 801d31a:	68f5      	ldreq	r5, [r6, #12]
 801d31c:	e7da      	b.n	801d2d4 <_vfiprintf_r+0x20>
 801d31e:	89ab      	ldrh	r3, [r5, #12]
 801d320:	0598      	lsls	r0, r3, #22
 801d322:	d4ed      	bmi.n	801d300 <_vfiprintf_r+0x4c>
 801d324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d326:	f7ff fab3 	bl	801c890 <__retarget_lock_release_recursive>
 801d32a:	e7e9      	b.n	801d300 <_vfiprintf_r+0x4c>
 801d32c:	2300      	movs	r3, #0
 801d32e:	9309      	str	r3, [sp, #36]	; 0x24
 801d330:	2320      	movs	r3, #32
 801d332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d336:	f8cd 800c 	str.w	r8, [sp, #12]
 801d33a:	2330      	movs	r3, #48	; 0x30
 801d33c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d500 <_vfiprintf_r+0x24c>
 801d340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d344:	f04f 0901 	mov.w	r9, #1
 801d348:	4623      	mov	r3, r4
 801d34a:	469a      	mov	sl, r3
 801d34c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d350:	b10a      	cbz	r2, 801d356 <_vfiprintf_r+0xa2>
 801d352:	2a25      	cmp	r2, #37	; 0x25
 801d354:	d1f9      	bne.n	801d34a <_vfiprintf_r+0x96>
 801d356:	ebba 0b04 	subs.w	fp, sl, r4
 801d35a:	d00b      	beq.n	801d374 <_vfiprintf_r+0xc0>
 801d35c:	465b      	mov	r3, fp
 801d35e:	4622      	mov	r2, r4
 801d360:	4629      	mov	r1, r5
 801d362:	4630      	mov	r0, r6
 801d364:	f7ff ff93 	bl	801d28e <__sfputs_r>
 801d368:	3001      	adds	r0, #1
 801d36a:	f000 80aa 	beq.w	801d4c2 <_vfiprintf_r+0x20e>
 801d36e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d370:	445a      	add	r2, fp
 801d372:	9209      	str	r2, [sp, #36]	; 0x24
 801d374:	f89a 3000 	ldrb.w	r3, [sl]
 801d378:	2b00      	cmp	r3, #0
 801d37a:	f000 80a2 	beq.w	801d4c2 <_vfiprintf_r+0x20e>
 801d37e:	2300      	movs	r3, #0
 801d380:	f04f 32ff 	mov.w	r2, #4294967295
 801d384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d388:	f10a 0a01 	add.w	sl, sl, #1
 801d38c:	9304      	str	r3, [sp, #16]
 801d38e:	9307      	str	r3, [sp, #28]
 801d390:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d394:	931a      	str	r3, [sp, #104]	; 0x68
 801d396:	4654      	mov	r4, sl
 801d398:	2205      	movs	r2, #5
 801d39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d39e:	4858      	ldr	r0, [pc, #352]	; (801d500 <_vfiprintf_r+0x24c>)
 801d3a0:	f7e2 fef6 	bl	8000190 <memchr>
 801d3a4:	9a04      	ldr	r2, [sp, #16]
 801d3a6:	b9d8      	cbnz	r0, 801d3e0 <_vfiprintf_r+0x12c>
 801d3a8:	06d1      	lsls	r1, r2, #27
 801d3aa:	bf44      	itt	mi
 801d3ac:	2320      	movmi	r3, #32
 801d3ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d3b2:	0713      	lsls	r3, r2, #28
 801d3b4:	bf44      	itt	mi
 801d3b6:	232b      	movmi	r3, #43	; 0x2b
 801d3b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d3bc:	f89a 3000 	ldrb.w	r3, [sl]
 801d3c0:	2b2a      	cmp	r3, #42	; 0x2a
 801d3c2:	d015      	beq.n	801d3f0 <_vfiprintf_r+0x13c>
 801d3c4:	9a07      	ldr	r2, [sp, #28]
 801d3c6:	4654      	mov	r4, sl
 801d3c8:	2000      	movs	r0, #0
 801d3ca:	f04f 0c0a 	mov.w	ip, #10
 801d3ce:	4621      	mov	r1, r4
 801d3d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d3d4:	3b30      	subs	r3, #48	; 0x30
 801d3d6:	2b09      	cmp	r3, #9
 801d3d8:	d94e      	bls.n	801d478 <_vfiprintf_r+0x1c4>
 801d3da:	b1b0      	cbz	r0, 801d40a <_vfiprintf_r+0x156>
 801d3dc:	9207      	str	r2, [sp, #28]
 801d3de:	e014      	b.n	801d40a <_vfiprintf_r+0x156>
 801d3e0:	eba0 0308 	sub.w	r3, r0, r8
 801d3e4:	fa09 f303 	lsl.w	r3, r9, r3
 801d3e8:	4313      	orrs	r3, r2
 801d3ea:	9304      	str	r3, [sp, #16]
 801d3ec:	46a2      	mov	sl, r4
 801d3ee:	e7d2      	b.n	801d396 <_vfiprintf_r+0xe2>
 801d3f0:	9b03      	ldr	r3, [sp, #12]
 801d3f2:	1d19      	adds	r1, r3, #4
 801d3f4:	681b      	ldr	r3, [r3, #0]
 801d3f6:	9103      	str	r1, [sp, #12]
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	bfbb      	ittet	lt
 801d3fc:	425b      	neglt	r3, r3
 801d3fe:	f042 0202 	orrlt.w	r2, r2, #2
 801d402:	9307      	strge	r3, [sp, #28]
 801d404:	9307      	strlt	r3, [sp, #28]
 801d406:	bfb8      	it	lt
 801d408:	9204      	strlt	r2, [sp, #16]
 801d40a:	7823      	ldrb	r3, [r4, #0]
 801d40c:	2b2e      	cmp	r3, #46	; 0x2e
 801d40e:	d10c      	bne.n	801d42a <_vfiprintf_r+0x176>
 801d410:	7863      	ldrb	r3, [r4, #1]
 801d412:	2b2a      	cmp	r3, #42	; 0x2a
 801d414:	d135      	bne.n	801d482 <_vfiprintf_r+0x1ce>
 801d416:	9b03      	ldr	r3, [sp, #12]
 801d418:	1d1a      	adds	r2, r3, #4
 801d41a:	681b      	ldr	r3, [r3, #0]
 801d41c:	9203      	str	r2, [sp, #12]
 801d41e:	2b00      	cmp	r3, #0
 801d420:	bfb8      	it	lt
 801d422:	f04f 33ff 	movlt.w	r3, #4294967295
 801d426:	3402      	adds	r4, #2
 801d428:	9305      	str	r3, [sp, #20]
 801d42a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d510 <_vfiprintf_r+0x25c>
 801d42e:	7821      	ldrb	r1, [r4, #0]
 801d430:	2203      	movs	r2, #3
 801d432:	4650      	mov	r0, sl
 801d434:	f7e2 feac 	bl	8000190 <memchr>
 801d438:	b140      	cbz	r0, 801d44c <_vfiprintf_r+0x198>
 801d43a:	2340      	movs	r3, #64	; 0x40
 801d43c:	eba0 000a 	sub.w	r0, r0, sl
 801d440:	fa03 f000 	lsl.w	r0, r3, r0
 801d444:	9b04      	ldr	r3, [sp, #16]
 801d446:	4303      	orrs	r3, r0
 801d448:	3401      	adds	r4, #1
 801d44a:	9304      	str	r3, [sp, #16]
 801d44c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d450:	482c      	ldr	r0, [pc, #176]	; (801d504 <_vfiprintf_r+0x250>)
 801d452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d456:	2206      	movs	r2, #6
 801d458:	f7e2 fe9a 	bl	8000190 <memchr>
 801d45c:	2800      	cmp	r0, #0
 801d45e:	d03f      	beq.n	801d4e0 <_vfiprintf_r+0x22c>
 801d460:	4b29      	ldr	r3, [pc, #164]	; (801d508 <_vfiprintf_r+0x254>)
 801d462:	bb1b      	cbnz	r3, 801d4ac <_vfiprintf_r+0x1f8>
 801d464:	9b03      	ldr	r3, [sp, #12]
 801d466:	3307      	adds	r3, #7
 801d468:	f023 0307 	bic.w	r3, r3, #7
 801d46c:	3308      	adds	r3, #8
 801d46e:	9303      	str	r3, [sp, #12]
 801d470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d472:	443b      	add	r3, r7
 801d474:	9309      	str	r3, [sp, #36]	; 0x24
 801d476:	e767      	b.n	801d348 <_vfiprintf_r+0x94>
 801d478:	fb0c 3202 	mla	r2, ip, r2, r3
 801d47c:	460c      	mov	r4, r1
 801d47e:	2001      	movs	r0, #1
 801d480:	e7a5      	b.n	801d3ce <_vfiprintf_r+0x11a>
 801d482:	2300      	movs	r3, #0
 801d484:	3401      	adds	r4, #1
 801d486:	9305      	str	r3, [sp, #20]
 801d488:	4619      	mov	r1, r3
 801d48a:	f04f 0c0a 	mov.w	ip, #10
 801d48e:	4620      	mov	r0, r4
 801d490:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d494:	3a30      	subs	r2, #48	; 0x30
 801d496:	2a09      	cmp	r2, #9
 801d498:	d903      	bls.n	801d4a2 <_vfiprintf_r+0x1ee>
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	d0c5      	beq.n	801d42a <_vfiprintf_r+0x176>
 801d49e:	9105      	str	r1, [sp, #20]
 801d4a0:	e7c3      	b.n	801d42a <_vfiprintf_r+0x176>
 801d4a2:	fb0c 2101 	mla	r1, ip, r1, r2
 801d4a6:	4604      	mov	r4, r0
 801d4a8:	2301      	movs	r3, #1
 801d4aa:	e7f0      	b.n	801d48e <_vfiprintf_r+0x1da>
 801d4ac:	ab03      	add	r3, sp, #12
 801d4ae:	9300      	str	r3, [sp, #0]
 801d4b0:	462a      	mov	r2, r5
 801d4b2:	4b16      	ldr	r3, [pc, #88]	; (801d50c <_vfiprintf_r+0x258>)
 801d4b4:	a904      	add	r1, sp, #16
 801d4b6:	4630      	mov	r0, r6
 801d4b8:	f7fd fc70 	bl	801ad9c <_printf_float>
 801d4bc:	4607      	mov	r7, r0
 801d4be:	1c78      	adds	r0, r7, #1
 801d4c0:	d1d6      	bne.n	801d470 <_vfiprintf_r+0x1bc>
 801d4c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d4c4:	07d9      	lsls	r1, r3, #31
 801d4c6:	d405      	bmi.n	801d4d4 <_vfiprintf_r+0x220>
 801d4c8:	89ab      	ldrh	r3, [r5, #12]
 801d4ca:	059a      	lsls	r2, r3, #22
 801d4cc:	d402      	bmi.n	801d4d4 <_vfiprintf_r+0x220>
 801d4ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d4d0:	f7ff f9de 	bl	801c890 <__retarget_lock_release_recursive>
 801d4d4:	89ab      	ldrh	r3, [r5, #12]
 801d4d6:	065b      	lsls	r3, r3, #25
 801d4d8:	f53f af12 	bmi.w	801d300 <_vfiprintf_r+0x4c>
 801d4dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d4de:	e711      	b.n	801d304 <_vfiprintf_r+0x50>
 801d4e0:	ab03      	add	r3, sp, #12
 801d4e2:	9300      	str	r3, [sp, #0]
 801d4e4:	462a      	mov	r2, r5
 801d4e6:	4b09      	ldr	r3, [pc, #36]	; (801d50c <_vfiprintf_r+0x258>)
 801d4e8:	a904      	add	r1, sp, #16
 801d4ea:	4630      	mov	r0, r6
 801d4ec:	f7fd fefa 	bl	801b2e4 <_printf_i>
 801d4f0:	e7e4      	b.n	801d4bc <_vfiprintf_r+0x208>
 801d4f2:	bf00      	nop
 801d4f4:	0801de48 	.word	0x0801de48
 801d4f8:	0801de68 	.word	0x0801de68
 801d4fc:	0801de28 	.word	0x0801de28
 801d500:	0801dfe4 	.word	0x0801dfe4
 801d504:	0801dfee 	.word	0x0801dfee
 801d508:	0801ad9d 	.word	0x0801ad9d
 801d50c:	0801d28f 	.word	0x0801d28f
 801d510:	0801dfea 	.word	0x0801dfea

0801d514 <_putc_r>:
 801d514:	b570      	push	{r4, r5, r6, lr}
 801d516:	460d      	mov	r5, r1
 801d518:	4614      	mov	r4, r2
 801d51a:	4606      	mov	r6, r0
 801d51c:	b118      	cbz	r0, 801d526 <_putc_r+0x12>
 801d51e:	6983      	ldr	r3, [r0, #24]
 801d520:	b90b      	cbnz	r3, 801d526 <_putc_r+0x12>
 801d522:	f7ff f911 	bl	801c748 <__sinit>
 801d526:	4b1c      	ldr	r3, [pc, #112]	; (801d598 <_putc_r+0x84>)
 801d528:	429c      	cmp	r4, r3
 801d52a:	d124      	bne.n	801d576 <_putc_r+0x62>
 801d52c:	6874      	ldr	r4, [r6, #4]
 801d52e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d530:	07d8      	lsls	r0, r3, #31
 801d532:	d405      	bmi.n	801d540 <_putc_r+0x2c>
 801d534:	89a3      	ldrh	r3, [r4, #12]
 801d536:	0599      	lsls	r1, r3, #22
 801d538:	d402      	bmi.n	801d540 <_putc_r+0x2c>
 801d53a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d53c:	f7ff f9a7 	bl	801c88e <__retarget_lock_acquire_recursive>
 801d540:	68a3      	ldr	r3, [r4, #8]
 801d542:	3b01      	subs	r3, #1
 801d544:	2b00      	cmp	r3, #0
 801d546:	60a3      	str	r3, [r4, #8]
 801d548:	da05      	bge.n	801d556 <_putc_r+0x42>
 801d54a:	69a2      	ldr	r2, [r4, #24]
 801d54c:	4293      	cmp	r3, r2
 801d54e:	db1c      	blt.n	801d58a <_putc_r+0x76>
 801d550:	b2eb      	uxtb	r3, r5
 801d552:	2b0a      	cmp	r3, #10
 801d554:	d019      	beq.n	801d58a <_putc_r+0x76>
 801d556:	6823      	ldr	r3, [r4, #0]
 801d558:	1c5a      	adds	r2, r3, #1
 801d55a:	6022      	str	r2, [r4, #0]
 801d55c:	701d      	strb	r5, [r3, #0]
 801d55e:	b2ed      	uxtb	r5, r5
 801d560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d562:	07da      	lsls	r2, r3, #31
 801d564:	d405      	bmi.n	801d572 <_putc_r+0x5e>
 801d566:	89a3      	ldrh	r3, [r4, #12]
 801d568:	059b      	lsls	r3, r3, #22
 801d56a:	d402      	bmi.n	801d572 <_putc_r+0x5e>
 801d56c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d56e:	f7ff f98f 	bl	801c890 <__retarget_lock_release_recursive>
 801d572:	4628      	mov	r0, r5
 801d574:	bd70      	pop	{r4, r5, r6, pc}
 801d576:	4b09      	ldr	r3, [pc, #36]	; (801d59c <_putc_r+0x88>)
 801d578:	429c      	cmp	r4, r3
 801d57a:	d101      	bne.n	801d580 <_putc_r+0x6c>
 801d57c:	68b4      	ldr	r4, [r6, #8]
 801d57e:	e7d6      	b.n	801d52e <_putc_r+0x1a>
 801d580:	4b07      	ldr	r3, [pc, #28]	; (801d5a0 <_putc_r+0x8c>)
 801d582:	429c      	cmp	r4, r3
 801d584:	bf08      	it	eq
 801d586:	68f4      	ldreq	r4, [r6, #12]
 801d588:	e7d1      	b.n	801d52e <_putc_r+0x1a>
 801d58a:	4629      	mov	r1, r5
 801d58c:	4622      	mov	r2, r4
 801d58e:	4630      	mov	r0, r6
 801d590:	f7fe f886 	bl	801b6a0 <__swbuf_r>
 801d594:	4605      	mov	r5, r0
 801d596:	e7e3      	b.n	801d560 <_putc_r+0x4c>
 801d598:	0801de48 	.word	0x0801de48
 801d59c:	0801de68 	.word	0x0801de68
 801d5a0:	0801de28 	.word	0x0801de28

0801d5a4 <_sbrk_r>:
 801d5a4:	b538      	push	{r3, r4, r5, lr}
 801d5a6:	4d06      	ldr	r5, [pc, #24]	; (801d5c0 <_sbrk_r+0x1c>)
 801d5a8:	2300      	movs	r3, #0
 801d5aa:	4604      	mov	r4, r0
 801d5ac:	4608      	mov	r0, r1
 801d5ae:	602b      	str	r3, [r5, #0]
 801d5b0:	f7e4 fdf4 	bl	800219c <_sbrk>
 801d5b4:	1c43      	adds	r3, r0, #1
 801d5b6:	d102      	bne.n	801d5be <_sbrk_r+0x1a>
 801d5b8:	682b      	ldr	r3, [r5, #0]
 801d5ba:	b103      	cbz	r3, 801d5be <_sbrk_r+0x1a>
 801d5bc:	6023      	str	r3, [r4, #0]
 801d5be:	bd38      	pop	{r3, r4, r5, pc}
 801d5c0:	20008858 	.word	0x20008858

0801d5c4 <__sread>:
 801d5c4:	b510      	push	{r4, lr}
 801d5c6:	460c      	mov	r4, r1
 801d5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d5cc:	f000 f8e2 	bl	801d794 <_read_r>
 801d5d0:	2800      	cmp	r0, #0
 801d5d2:	bfab      	itete	ge
 801d5d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d5d6:	89a3      	ldrhlt	r3, [r4, #12]
 801d5d8:	181b      	addge	r3, r3, r0
 801d5da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d5de:	bfac      	ite	ge
 801d5e0:	6563      	strge	r3, [r4, #84]	; 0x54
 801d5e2:	81a3      	strhlt	r3, [r4, #12]
 801d5e4:	bd10      	pop	{r4, pc}

0801d5e6 <__swrite>:
 801d5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5ea:	461f      	mov	r7, r3
 801d5ec:	898b      	ldrh	r3, [r1, #12]
 801d5ee:	05db      	lsls	r3, r3, #23
 801d5f0:	4605      	mov	r5, r0
 801d5f2:	460c      	mov	r4, r1
 801d5f4:	4616      	mov	r6, r2
 801d5f6:	d505      	bpl.n	801d604 <__swrite+0x1e>
 801d5f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d5fc:	2302      	movs	r3, #2
 801d5fe:	2200      	movs	r2, #0
 801d600:	f000 f898 	bl	801d734 <_lseek_r>
 801d604:	89a3      	ldrh	r3, [r4, #12]
 801d606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d60a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d60e:	81a3      	strh	r3, [r4, #12]
 801d610:	4632      	mov	r2, r6
 801d612:	463b      	mov	r3, r7
 801d614:	4628      	mov	r0, r5
 801d616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d61a:	f000 b817 	b.w	801d64c <_write_r>

0801d61e <__sseek>:
 801d61e:	b510      	push	{r4, lr}
 801d620:	460c      	mov	r4, r1
 801d622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d626:	f000 f885 	bl	801d734 <_lseek_r>
 801d62a:	1c43      	adds	r3, r0, #1
 801d62c:	89a3      	ldrh	r3, [r4, #12]
 801d62e:	bf15      	itete	ne
 801d630:	6560      	strne	r0, [r4, #84]	; 0x54
 801d632:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d636:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d63a:	81a3      	strheq	r3, [r4, #12]
 801d63c:	bf18      	it	ne
 801d63e:	81a3      	strhne	r3, [r4, #12]
 801d640:	bd10      	pop	{r4, pc}

0801d642 <__sclose>:
 801d642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d646:	f000 b831 	b.w	801d6ac <_close_r>
	...

0801d64c <_write_r>:
 801d64c:	b538      	push	{r3, r4, r5, lr}
 801d64e:	4d07      	ldr	r5, [pc, #28]	; (801d66c <_write_r+0x20>)
 801d650:	4604      	mov	r4, r0
 801d652:	4608      	mov	r0, r1
 801d654:	4611      	mov	r1, r2
 801d656:	2200      	movs	r2, #0
 801d658:	602a      	str	r2, [r5, #0]
 801d65a:	461a      	mov	r2, r3
 801d65c:	f7e4 f853 	bl	8001706 <_write>
 801d660:	1c43      	adds	r3, r0, #1
 801d662:	d102      	bne.n	801d66a <_write_r+0x1e>
 801d664:	682b      	ldr	r3, [r5, #0]
 801d666:	b103      	cbz	r3, 801d66a <_write_r+0x1e>
 801d668:	6023      	str	r3, [r4, #0]
 801d66a:	bd38      	pop	{r3, r4, r5, pc}
 801d66c:	20008858 	.word	0x20008858

0801d670 <__assert_func>:
 801d670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d672:	4614      	mov	r4, r2
 801d674:	461a      	mov	r2, r3
 801d676:	4b09      	ldr	r3, [pc, #36]	; (801d69c <__assert_func+0x2c>)
 801d678:	681b      	ldr	r3, [r3, #0]
 801d67a:	4605      	mov	r5, r0
 801d67c:	68d8      	ldr	r0, [r3, #12]
 801d67e:	b14c      	cbz	r4, 801d694 <__assert_func+0x24>
 801d680:	4b07      	ldr	r3, [pc, #28]	; (801d6a0 <__assert_func+0x30>)
 801d682:	9100      	str	r1, [sp, #0]
 801d684:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d688:	4906      	ldr	r1, [pc, #24]	; (801d6a4 <__assert_func+0x34>)
 801d68a:	462b      	mov	r3, r5
 801d68c:	f000 f81e 	bl	801d6cc <fiprintf>
 801d690:	f000 f89f 	bl	801d7d2 <abort>
 801d694:	4b04      	ldr	r3, [pc, #16]	; (801d6a8 <__assert_func+0x38>)
 801d696:	461c      	mov	r4, r3
 801d698:	e7f3      	b.n	801d682 <__assert_func+0x12>
 801d69a:	bf00      	nop
 801d69c:	20000078 	.word	0x20000078
 801d6a0:	0801dff5 	.word	0x0801dff5
 801d6a4:	0801e002 	.word	0x0801e002
 801d6a8:	0801e030 	.word	0x0801e030

0801d6ac <_close_r>:
 801d6ac:	b538      	push	{r3, r4, r5, lr}
 801d6ae:	4d06      	ldr	r5, [pc, #24]	; (801d6c8 <_close_r+0x1c>)
 801d6b0:	2300      	movs	r3, #0
 801d6b2:	4604      	mov	r4, r0
 801d6b4:	4608      	mov	r0, r1
 801d6b6:	602b      	str	r3, [r5, #0]
 801d6b8:	f7e4 fd3b 	bl	8002132 <_close>
 801d6bc:	1c43      	adds	r3, r0, #1
 801d6be:	d102      	bne.n	801d6c6 <_close_r+0x1a>
 801d6c0:	682b      	ldr	r3, [r5, #0]
 801d6c2:	b103      	cbz	r3, 801d6c6 <_close_r+0x1a>
 801d6c4:	6023      	str	r3, [r4, #0]
 801d6c6:	bd38      	pop	{r3, r4, r5, pc}
 801d6c8:	20008858 	.word	0x20008858

0801d6cc <fiprintf>:
 801d6cc:	b40e      	push	{r1, r2, r3}
 801d6ce:	b503      	push	{r0, r1, lr}
 801d6d0:	4601      	mov	r1, r0
 801d6d2:	ab03      	add	r3, sp, #12
 801d6d4:	4805      	ldr	r0, [pc, #20]	; (801d6ec <fiprintf+0x20>)
 801d6d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d6da:	6800      	ldr	r0, [r0, #0]
 801d6dc:	9301      	str	r3, [sp, #4]
 801d6de:	f7ff fde9 	bl	801d2b4 <_vfiprintf_r>
 801d6e2:	b002      	add	sp, #8
 801d6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d6e8:	b003      	add	sp, #12
 801d6ea:	4770      	bx	lr
 801d6ec:	20000078 	.word	0x20000078

0801d6f0 <_fstat_r>:
 801d6f0:	b538      	push	{r3, r4, r5, lr}
 801d6f2:	4d07      	ldr	r5, [pc, #28]	; (801d710 <_fstat_r+0x20>)
 801d6f4:	2300      	movs	r3, #0
 801d6f6:	4604      	mov	r4, r0
 801d6f8:	4608      	mov	r0, r1
 801d6fa:	4611      	mov	r1, r2
 801d6fc:	602b      	str	r3, [r5, #0]
 801d6fe:	f7e4 fd24 	bl	800214a <_fstat>
 801d702:	1c43      	adds	r3, r0, #1
 801d704:	d102      	bne.n	801d70c <_fstat_r+0x1c>
 801d706:	682b      	ldr	r3, [r5, #0]
 801d708:	b103      	cbz	r3, 801d70c <_fstat_r+0x1c>
 801d70a:	6023      	str	r3, [r4, #0]
 801d70c:	bd38      	pop	{r3, r4, r5, pc}
 801d70e:	bf00      	nop
 801d710:	20008858 	.word	0x20008858

0801d714 <_isatty_r>:
 801d714:	b538      	push	{r3, r4, r5, lr}
 801d716:	4d06      	ldr	r5, [pc, #24]	; (801d730 <_isatty_r+0x1c>)
 801d718:	2300      	movs	r3, #0
 801d71a:	4604      	mov	r4, r0
 801d71c:	4608      	mov	r0, r1
 801d71e:	602b      	str	r3, [r5, #0]
 801d720:	f7e4 fd23 	bl	800216a <_isatty>
 801d724:	1c43      	adds	r3, r0, #1
 801d726:	d102      	bne.n	801d72e <_isatty_r+0x1a>
 801d728:	682b      	ldr	r3, [r5, #0]
 801d72a:	b103      	cbz	r3, 801d72e <_isatty_r+0x1a>
 801d72c:	6023      	str	r3, [r4, #0]
 801d72e:	bd38      	pop	{r3, r4, r5, pc}
 801d730:	20008858 	.word	0x20008858

0801d734 <_lseek_r>:
 801d734:	b538      	push	{r3, r4, r5, lr}
 801d736:	4d07      	ldr	r5, [pc, #28]	; (801d754 <_lseek_r+0x20>)
 801d738:	4604      	mov	r4, r0
 801d73a:	4608      	mov	r0, r1
 801d73c:	4611      	mov	r1, r2
 801d73e:	2200      	movs	r2, #0
 801d740:	602a      	str	r2, [r5, #0]
 801d742:	461a      	mov	r2, r3
 801d744:	f7e4 fd1c 	bl	8002180 <_lseek>
 801d748:	1c43      	adds	r3, r0, #1
 801d74a:	d102      	bne.n	801d752 <_lseek_r+0x1e>
 801d74c:	682b      	ldr	r3, [r5, #0]
 801d74e:	b103      	cbz	r3, 801d752 <_lseek_r+0x1e>
 801d750:	6023      	str	r3, [r4, #0]
 801d752:	bd38      	pop	{r3, r4, r5, pc}
 801d754:	20008858 	.word	0x20008858

0801d758 <__ascii_mbtowc>:
 801d758:	b082      	sub	sp, #8
 801d75a:	b901      	cbnz	r1, 801d75e <__ascii_mbtowc+0x6>
 801d75c:	a901      	add	r1, sp, #4
 801d75e:	b142      	cbz	r2, 801d772 <__ascii_mbtowc+0x1a>
 801d760:	b14b      	cbz	r3, 801d776 <__ascii_mbtowc+0x1e>
 801d762:	7813      	ldrb	r3, [r2, #0]
 801d764:	600b      	str	r3, [r1, #0]
 801d766:	7812      	ldrb	r2, [r2, #0]
 801d768:	1e10      	subs	r0, r2, #0
 801d76a:	bf18      	it	ne
 801d76c:	2001      	movne	r0, #1
 801d76e:	b002      	add	sp, #8
 801d770:	4770      	bx	lr
 801d772:	4610      	mov	r0, r2
 801d774:	e7fb      	b.n	801d76e <__ascii_mbtowc+0x16>
 801d776:	f06f 0001 	mvn.w	r0, #1
 801d77a:	e7f8      	b.n	801d76e <__ascii_mbtowc+0x16>

0801d77c <__malloc_lock>:
 801d77c:	4801      	ldr	r0, [pc, #4]	; (801d784 <__malloc_lock+0x8>)
 801d77e:	f7ff b886 	b.w	801c88e <__retarget_lock_acquire_recursive>
 801d782:	bf00      	nop
 801d784:	2000884c 	.word	0x2000884c

0801d788 <__malloc_unlock>:
 801d788:	4801      	ldr	r0, [pc, #4]	; (801d790 <__malloc_unlock+0x8>)
 801d78a:	f7ff b881 	b.w	801c890 <__retarget_lock_release_recursive>
 801d78e:	bf00      	nop
 801d790:	2000884c 	.word	0x2000884c

0801d794 <_read_r>:
 801d794:	b538      	push	{r3, r4, r5, lr}
 801d796:	4d07      	ldr	r5, [pc, #28]	; (801d7b4 <_read_r+0x20>)
 801d798:	4604      	mov	r4, r0
 801d79a:	4608      	mov	r0, r1
 801d79c:	4611      	mov	r1, r2
 801d79e:	2200      	movs	r2, #0
 801d7a0:	602a      	str	r2, [r5, #0]
 801d7a2:	461a      	mov	r2, r3
 801d7a4:	f7e4 fca8 	bl	80020f8 <_read>
 801d7a8:	1c43      	adds	r3, r0, #1
 801d7aa:	d102      	bne.n	801d7b2 <_read_r+0x1e>
 801d7ac:	682b      	ldr	r3, [r5, #0]
 801d7ae:	b103      	cbz	r3, 801d7b2 <_read_r+0x1e>
 801d7b0:	6023      	str	r3, [r4, #0]
 801d7b2:	bd38      	pop	{r3, r4, r5, pc}
 801d7b4:	20008858 	.word	0x20008858

0801d7b8 <__ascii_wctomb>:
 801d7b8:	b149      	cbz	r1, 801d7ce <__ascii_wctomb+0x16>
 801d7ba:	2aff      	cmp	r2, #255	; 0xff
 801d7bc:	bf85      	ittet	hi
 801d7be:	238a      	movhi	r3, #138	; 0x8a
 801d7c0:	6003      	strhi	r3, [r0, #0]
 801d7c2:	700a      	strbls	r2, [r1, #0]
 801d7c4:	f04f 30ff 	movhi.w	r0, #4294967295
 801d7c8:	bf98      	it	ls
 801d7ca:	2001      	movls	r0, #1
 801d7cc:	4770      	bx	lr
 801d7ce:	4608      	mov	r0, r1
 801d7d0:	4770      	bx	lr

0801d7d2 <abort>:
 801d7d2:	b508      	push	{r3, lr}
 801d7d4:	2006      	movs	r0, #6
 801d7d6:	f000 f82b 	bl	801d830 <raise>
 801d7da:	2001      	movs	r0, #1
 801d7dc:	f7e4 fc82 	bl	80020e4 <_exit>

0801d7e0 <_raise_r>:
 801d7e0:	291f      	cmp	r1, #31
 801d7e2:	b538      	push	{r3, r4, r5, lr}
 801d7e4:	4604      	mov	r4, r0
 801d7e6:	460d      	mov	r5, r1
 801d7e8:	d904      	bls.n	801d7f4 <_raise_r+0x14>
 801d7ea:	2316      	movs	r3, #22
 801d7ec:	6003      	str	r3, [r0, #0]
 801d7ee:	f04f 30ff 	mov.w	r0, #4294967295
 801d7f2:	bd38      	pop	{r3, r4, r5, pc}
 801d7f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d7f6:	b112      	cbz	r2, 801d7fe <_raise_r+0x1e>
 801d7f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d7fc:	b94b      	cbnz	r3, 801d812 <_raise_r+0x32>
 801d7fe:	4620      	mov	r0, r4
 801d800:	f000 f830 	bl	801d864 <_getpid_r>
 801d804:	462a      	mov	r2, r5
 801d806:	4601      	mov	r1, r0
 801d808:	4620      	mov	r0, r4
 801d80a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d80e:	f000 b817 	b.w	801d840 <_kill_r>
 801d812:	2b01      	cmp	r3, #1
 801d814:	d00a      	beq.n	801d82c <_raise_r+0x4c>
 801d816:	1c59      	adds	r1, r3, #1
 801d818:	d103      	bne.n	801d822 <_raise_r+0x42>
 801d81a:	2316      	movs	r3, #22
 801d81c:	6003      	str	r3, [r0, #0]
 801d81e:	2001      	movs	r0, #1
 801d820:	e7e7      	b.n	801d7f2 <_raise_r+0x12>
 801d822:	2400      	movs	r4, #0
 801d824:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d828:	4628      	mov	r0, r5
 801d82a:	4798      	blx	r3
 801d82c:	2000      	movs	r0, #0
 801d82e:	e7e0      	b.n	801d7f2 <_raise_r+0x12>

0801d830 <raise>:
 801d830:	4b02      	ldr	r3, [pc, #8]	; (801d83c <raise+0xc>)
 801d832:	4601      	mov	r1, r0
 801d834:	6818      	ldr	r0, [r3, #0]
 801d836:	f7ff bfd3 	b.w	801d7e0 <_raise_r>
 801d83a:	bf00      	nop
 801d83c:	20000078 	.word	0x20000078

0801d840 <_kill_r>:
 801d840:	b538      	push	{r3, r4, r5, lr}
 801d842:	4d07      	ldr	r5, [pc, #28]	; (801d860 <_kill_r+0x20>)
 801d844:	2300      	movs	r3, #0
 801d846:	4604      	mov	r4, r0
 801d848:	4608      	mov	r0, r1
 801d84a:	4611      	mov	r1, r2
 801d84c:	602b      	str	r3, [r5, #0]
 801d84e:	f7e4 fc39 	bl	80020c4 <_kill>
 801d852:	1c43      	adds	r3, r0, #1
 801d854:	d102      	bne.n	801d85c <_kill_r+0x1c>
 801d856:	682b      	ldr	r3, [r5, #0]
 801d858:	b103      	cbz	r3, 801d85c <_kill_r+0x1c>
 801d85a:	6023      	str	r3, [r4, #0]
 801d85c:	bd38      	pop	{r3, r4, r5, pc}
 801d85e:	bf00      	nop
 801d860:	20008858 	.word	0x20008858

0801d864 <_getpid_r>:
 801d864:	f7e4 bc26 	b.w	80020b4 <_getpid>

0801d868 <_init>:
 801d868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d86a:	bf00      	nop
 801d86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d86e:	bc08      	pop	{r3}
 801d870:	469e      	mov	lr, r3
 801d872:	4770      	bx	lr

0801d874 <_fini>:
 801d874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d876:	bf00      	nop
 801d878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d87a:	bc08      	pop	{r3}
 801d87c:	469e      	mov	lr, r3
 801d87e:	4770      	bx	lr
