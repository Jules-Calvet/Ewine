
Complete_Ewine_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f340  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d74  0801f480  0801f480  0002f480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080201f4  080201f4  000301f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080201fc  080201fc  000301fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020200  08020200  00030200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000f4  20000008  08020204  00040008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000972c  20000100  080202f8  00040100  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2000982c  080202f8  0004982c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000400fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0006acdd  00000000  00000000  0004012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007a1e  00000000  00000000  000aae09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003828  00000000  00000000  000b2828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000034f8  00000000  00000000  000b6050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000302bc  00000000  00000000  000b9548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000418bb  00000000  00000000  000e9804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011d5fd  00000000  00000000  0012b0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002486bc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000fe28  00000000  00000000  0024870c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000100 	.word	0x20000100
 800015c:	00000000 	.word	0x00000000
 8000160:	0801f468 	.word	0x0801f468

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000104 	.word	0x20000104
 800017c:	0801f468 	.word	0x0801f468

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__gedf2>:
 80005a8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ac:	e006      	b.n	80005bc <__cmpdf2+0x4>
 80005ae:	bf00      	nop

080005b0 <__ledf2>:
 80005b0:	f04f 0c01 	mov.w	ip, #1
 80005b4:	e002      	b.n	80005bc <__cmpdf2+0x4>
 80005b6:	bf00      	nop

080005b8 <__cmpdf2>:
 80005b8:	f04f 0c01 	mov.w	ip, #1
 80005bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005cc:	bf18      	it	ne
 80005ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005d2:	d01b      	beq.n	800060c <__cmpdf2+0x54>
 80005d4:	b001      	add	sp, #4
 80005d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005da:	bf0c      	ite	eq
 80005dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005e0:	ea91 0f03 	teqne	r1, r3
 80005e4:	bf02      	ittt	eq
 80005e6:	ea90 0f02 	teqeq	r0, r2
 80005ea:	2000      	moveq	r0, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	f110 0f00 	cmn.w	r0, #0
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf58      	it	pl
 80005f8:	4299      	cmppl	r1, r3
 80005fa:	bf08      	it	eq
 80005fc:	4290      	cmpeq	r0, r2
 80005fe:	bf2c      	ite	cs
 8000600:	17d8      	asrcs	r0, r3, #31
 8000602:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000606:	f040 0001 	orr.w	r0, r0, #1
 800060a:	4770      	bx	lr
 800060c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d102      	bne.n	800061c <__cmpdf2+0x64>
 8000616:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800061a:	d107      	bne.n	800062c <__cmpdf2+0x74>
 800061c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000624:	d1d6      	bne.n	80005d4 <__cmpdf2+0x1c>
 8000626:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800062a:	d0d3      	beq.n	80005d4 <__cmpdf2+0x1c>
 800062c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <__aeabi_cdrcmple>:
 8000634:	4684      	mov	ip, r0
 8000636:	4610      	mov	r0, r2
 8000638:	4662      	mov	r2, ip
 800063a:	468c      	mov	ip, r1
 800063c:	4619      	mov	r1, r3
 800063e:	4663      	mov	r3, ip
 8000640:	e000      	b.n	8000644 <__aeabi_cdcmpeq>
 8000642:	bf00      	nop

08000644 <__aeabi_cdcmpeq>:
 8000644:	b501      	push	{r0, lr}
 8000646:	f7ff ffb7 	bl	80005b8 <__cmpdf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	bf48      	it	mi
 800064e:	f110 0f00 	cmnmi.w	r0, #0
 8000652:	bd01      	pop	{r0, pc}

08000654 <__aeabi_dcmpeq>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff fff4 	bl	8000644 <__aeabi_cdcmpeq>
 800065c:	bf0c      	ite	eq
 800065e:	2001      	moveq	r0, #1
 8000660:	2000      	movne	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmplt>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffea 	bl	8000644 <__aeabi_cdcmpeq>
 8000670:	bf34      	ite	cc
 8000672:	2001      	movcc	r0, #1
 8000674:	2000      	movcs	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmple>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffe0 	bl	8000644 <__aeabi_cdcmpeq>
 8000684:	bf94      	ite	ls
 8000686:	2001      	movls	r0, #1
 8000688:	2000      	movhi	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_dcmpge>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff ffce 	bl	8000634 <__aeabi_cdrcmple>
 8000698:	bf94      	ite	ls
 800069a:	2001      	movls	r0, #1
 800069c:	2000      	movhi	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_dcmpgt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffc4 	bl	8000634 <__aeabi_cdrcmple>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmpun>:
 80006b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006c0:	d102      	bne.n	80006c8 <__aeabi_dcmpun+0x10>
 80006c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006c6:	d10a      	bne.n	80006de <__aeabi_dcmpun+0x26>
 80006c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006d0:	d102      	bne.n	80006d8 <__aeabi_dcmpun+0x20>
 80006d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006d6:	d102      	bne.n	80006de <__aeabi_dcmpun+0x26>
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	4770      	bx	lr
 80006de:	f04f 0001 	mov.w	r0, #1
 80006e2:	4770      	bx	lr

080006e4 <__aeabi_d2iz>:
 80006e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80006ec:	d215      	bcs.n	800071a <__aeabi_d2iz+0x36>
 80006ee:	d511      	bpl.n	8000714 <__aeabi_d2iz+0x30>
 80006f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80006f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006f8:	d912      	bls.n	8000720 <__aeabi_d2iz+0x3c>
 80006fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000702:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000706:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800070a:	fa23 f002 	lsr.w	r0, r3, r2
 800070e:	bf18      	it	ne
 8000710:	4240      	negne	r0, r0
 8000712:	4770      	bx	lr
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	4770      	bx	lr
 800071a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800071e:	d105      	bne.n	800072c <__aeabi_d2iz+0x48>
 8000720:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000724:	bf08      	it	eq
 8000726:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <__aeabi_ldivmod>:
 8000734:	b97b      	cbnz	r3, 8000756 <__aeabi_ldivmod+0x22>
 8000736:	b972      	cbnz	r2, 8000756 <__aeabi_ldivmod+0x22>
 8000738:	2900      	cmp	r1, #0
 800073a:	bfbe      	ittt	lt
 800073c:	2000      	movlt	r0, #0
 800073e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000742:	e006      	blt.n	8000752 <__aeabi_ldivmod+0x1e>
 8000744:	bf08      	it	eq
 8000746:	2800      	cmpeq	r0, #0
 8000748:	bf1c      	itt	ne
 800074a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800074e:	f04f 30ff 	movne.w	r0, #4294967295
 8000752:	f000 b9bf 	b.w	8000ad4 <__aeabi_idiv0>
 8000756:	f1ad 0c08 	sub.w	ip, sp, #8
 800075a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800075e:	2900      	cmp	r1, #0
 8000760:	db09      	blt.n	8000776 <__aeabi_ldivmod+0x42>
 8000762:	2b00      	cmp	r3, #0
 8000764:	db1a      	blt.n	800079c <__aeabi_ldivmod+0x68>
 8000766:	f000 f84d 	bl	8000804 <__udivmoddi4>
 800076a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800076e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000772:	b004      	add	sp, #16
 8000774:	4770      	bx	lr
 8000776:	4240      	negs	r0, r0
 8000778:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800077c:	2b00      	cmp	r3, #0
 800077e:	db1b      	blt.n	80007b8 <__aeabi_ldivmod+0x84>
 8000780:	f000 f840 	bl	8000804 <__udivmoddi4>
 8000784:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000788:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800078c:	b004      	add	sp, #16
 800078e:	4240      	negs	r0, r0
 8000790:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000794:	4252      	negs	r2, r2
 8000796:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800079a:	4770      	bx	lr
 800079c:	4252      	negs	r2, r2
 800079e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007a2:	f000 f82f 	bl	8000804 <__udivmoddi4>
 80007a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ae:	b004      	add	sp, #16
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	4770      	bx	lr
 80007b8:	4252      	negs	r2, r2
 80007ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007be:	f000 f821 	bl	8000804 <__udivmoddi4>
 80007c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ca:	b004      	add	sp, #16
 80007cc:	4252      	negs	r2, r2
 80007ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b974 	b.w	8000ad4 <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	4604      	mov	r4, r0
 800080c:	468e      	mov	lr, r1
 800080e:	2b00      	cmp	r3, #0
 8000810:	d14d      	bne.n	80008ae <__udivmoddi4+0xaa>
 8000812:	428a      	cmp	r2, r1
 8000814:	4694      	mov	ip, r2
 8000816:	d969      	bls.n	80008ec <__udivmoddi4+0xe8>
 8000818:	fab2 f282 	clz	r2, r2
 800081c:	b152      	cbz	r2, 8000834 <__udivmoddi4+0x30>
 800081e:	fa01 f302 	lsl.w	r3, r1, r2
 8000822:	f1c2 0120 	rsb	r1, r2, #32
 8000826:	fa20 f101 	lsr.w	r1, r0, r1
 800082a:	fa0c fc02 	lsl.w	ip, ip, r2
 800082e:	ea41 0e03 	orr.w	lr, r1, r3
 8000832:	4094      	lsls	r4, r2
 8000834:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000838:	0c21      	lsrs	r1, r4, #16
 800083a:	fbbe f6f8 	udiv	r6, lr, r8
 800083e:	fa1f f78c 	uxth.w	r7, ip
 8000842:	fb08 e316 	mls	r3, r8, r6, lr
 8000846:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800084a:	fb06 f107 	mul.w	r1, r6, r7
 800084e:	4299      	cmp	r1, r3
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x64>
 8000852:	eb1c 0303 	adds.w	r3, ip, r3
 8000856:	f106 30ff 	add.w	r0, r6, #4294967295
 800085a:	f080 811f 	bcs.w	8000a9c <__udivmoddi4+0x298>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 811c 	bls.w	8000a9c <__udivmoddi4+0x298>
 8000864:	3e02      	subs	r6, #2
 8000866:	4463      	add	r3, ip
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000870:	fb08 3310 	mls	r3, r8, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 f707 	mul.w	r7, r0, r7
 800087c:	42a7      	cmp	r7, r4
 800087e:	d90a      	bls.n	8000896 <__udivmoddi4+0x92>
 8000880:	eb1c 0404 	adds.w	r4, ip, r4
 8000884:	f100 33ff 	add.w	r3, r0, #4294967295
 8000888:	f080 810a 	bcs.w	8000aa0 <__udivmoddi4+0x29c>
 800088c:	42a7      	cmp	r7, r4
 800088e:	f240 8107 	bls.w	8000aa0 <__udivmoddi4+0x29c>
 8000892:	4464      	add	r4, ip
 8000894:	3802      	subs	r0, #2
 8000896:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800089a:	1be4      	subs	r4, r4, r7
 800089c:	2600      	movs	r6, #0
 800089e:	b11d      	cbz	r5, 80008a8 <__udivmoddi4+0xa4>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c5 4300 	strd	r4, r3, [r5]
 80008a8:	4631      	mov	r1, r6
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xc2>
 80008b2:	2d00      	cmp	r5, #0
 80008b4:	f000 80ef 	beq.w	8000a96 <__udivmoddi4+0x292>
 80008b8:	2600      	movs	r6, #0
 80008ba:	e9c5 0100 	strd	r0, r1, [r5]
 80008be:	4630      	mov	r0, r6
 80008c0:	4631      	mov	r1, r6
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f683 	clz	r6, r3
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d14a      	bne.n	8000964 <__udivmoddi4+0x160>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd4>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80f9 	bhi.w	8000aca <__udivmoddi4+0x2c6>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	469e      	mov	lr, r3
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa4>
 80008e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa4>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xec>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 8092 	bne.w	8000a1e <__udivmoddi4+0x21a>
 80008fa:	eba1 010c 	sub.w	r1, r1, ip
 80008fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000902:	fa1f fe8c 	uxth.w	lr, ip
 8000906:	2601      	movs	r6, #1
 8000908:	0c20      	lsrs	r0, r4, #16
 800090a:	fbb1 f3f7 	udiv	r3, r1, r7
 800090e:	fb07 1113 	mls	r1, r7, r3, r1
 8000912:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000916:	fb0e f003 	mul.w	r0, lr, r3
 800091a:	4288      	cmp	r0, r1
 800091c:	d908      	bls.n	8000930 <__udivmoddi4+0x12c>
 800091e:	eb1c 0101 	adds.w	r1, ip, r1
 8000922:	f103 38ff 	add.w	r8, r3, #4294967295
 8000926:	d202      	bcs.n	800092e <__udivmoddi4+0x12a>
 8000928:	4288      	cmp	r0, r1
 800092a:	f200 80cb 	bhi.w	8000ac4 <__udivmoddi4+0x2c0>
 800092e:	4643      	mov	r3, r8
 8000930:	1a09      	subs	r1, r1, r0
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1110 	mls	r1, r7, r0, r1
 800093c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000940:	fb0e fe00 	mul.w	lr, lr, r0
 8000944:	45a6      	cmp	lr, r4
 8000946:	d908      	bls.n	800095a <__udivmoddi4+0x156>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000950:	d202      	bcs.n	8000958 <__udivmoddi4+0x154>
 8000952:	45a6      	cmp	lr, r4
 8000954:	f200 80bb 	bhi.w	8000ace <__udivmoddi4+0x2ca>
 8000958:	4608      	mov	r0, r1
 800095a:	eba4 040e 	sub.w	r4, r4, lr
 800095e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000962:	e79c      	b.n	800089e <__udivmoddi4+0x9a>
 8000964:	f1c6 0720 	rsb	r7, r6, #32
 8000968:	40b3      	lsls	r3, r6
 800096a:	fa22 fc07 	lsr.w	ip, r2, r7
 800096e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000972:	fa20 f407 	lsr.w	r4, r0, r7
 8000976:	fa01 f306 	lsl.w	r3, r1, r6
 800097a:	431c      	orrs	r4, r3
 800097c:	40f9      	lsrs	r1, r7
 800097e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000982:	fa00 f306 	lsl.w	r3, r0, r6
 8000986:	fbb1 f8f9 	udiv	r8, r1, r9
 800098a:	0c20      	lsrs	r0, r4, #16
 800098c:	fa1f fe8c 	uxth.w	lr, ip
 8000990:	fb09 1118 	mls	r1, r9, r8, r1
 8000994:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000998:	fb08 f00e 	mul.w	r0, r8, lr
 800099c:	4288      	cmp	r0, r1
 800099e:	fa02 f206 	lsl.w	r2, r2, r6
 80009a2:	d90b      	bls.n	80009bc <__udivmoddi4+0x1b8>
 80009a4:	eb1c 0101 	adds.w	r1, ip, r1
 80009a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009ac:	f080 8088 	bcs.w	8000ac0 <__udivmoddi4+0x2bc>
 80009b0:	4288      	cmp	r0, r1
 80009b2:	f240 8085 	bls.w	8000ac0 <__udivmoddi4+0x2bc>
 80009b6:	f1a8 0802 	sub.w	r8, r8, #2
 80009ba:	4461      	add	r1, ip
 80009bc:	1a09      	subs	r1, r1, r0
 80009be:	b2a4      	uxth	r4, r4
 80009c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80009c4:	fb09 1110 	mls	r1, r9, r0, r1
 80009c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80009d0:	458e      	cmp	lr, r1
 80009d2:	d908      	bls.n	80009e6 <__udivmoddi4+0x1e2>
 80009d4:	eb1c 0101 	adds.w	r1, ip, r1
 80009d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80009dc:	d26c      	bcs.n	8000ab8 <__udivmoddi4+0x2b4>
 80009de:	458e      	cmp	lr, r1
 80009e0:	d96a      	bls.n	8000ab8 <__udivmoddi4+0x2b4>
 80009e2:	3802      	subs	r0, #2
 80009e4:	4461      	add	r1, ip
 80009e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009ea:	fba0 9402 	umull	r9, r4, r0, r2
 80009ee:	eba1 010e 	sub.w	r1, r1, lr
 80009f2:	42a1      	cmp	r1, r4
 80009f4:	46c8      	mov	r8, r9
 80009f6:	46a6      	mov	lr, r4
 80009f8:	d356      	bcc.n	8000aa8 <__udivmoddi4+0x2a4>
 80009fa:	d053      	beq.n	8000aa4 <__udivmoddi4+0x2a0>
 80009fc:	b15d      	cbz	r5, 8000a16 <__udivmoddi4+0x212>
 80009fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000a02:	eb61 010e 	sbc.w	r1, r1, lr
 8000a06:	fa01 f707 	lsl.w	r7, r1, r7
 8000a0a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a0e:	40f1      	lsrs	r1, r6
 8000a10:	431f      	orrs	r7, r3
 8000a12:	e9c5 7100 	strd	r7, r1, [r5]
 8000a16:	2600      	movs	r6, #0
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	f1c2 0320 	rsb	r3, r2, #32
 8000a22:	40d8      	lsrs	r0, r3
 8000a24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a28:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2c:	4091      	lsls	r1, r2
 8000a2e:	4301      	orrs	r1, r0
 8000a30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a34:	fa1f fe8c 	uxth.w	lr, ip
 8000a38:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a3c:	fb07 3610 	mls	r6, r7, r0, r3
 8000a40:	0c0b      	lsrs	r3, r1, #16
 8000a42:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a46:	fb00 f60e 	mul.w	r6, r0, lr
 8000a4a:	429e      	cmp	r6, r3
 8000a4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x260>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a5a:	d22f      	bcs.n	8000abc <__udivmoddi4+0x2b8>
 8000a5c:	429e      	cmp	r6, r3
 8000a5e:	d92d      	bls.n	8000abc <__udivmoddi4+0x2b8>
 8000a60:	3802      	subs	r0, #2
 8000a62:	4463      	add	r3, ip
 8000a64:	1b9b      	subs	r3, r3, r6
 8000a66:	b289      	uxth	r1, r1
 8000a68:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a6c:	fb07 3316 	mls	r3, r7, r6, r3
 8000a70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a74:	fb06 f30e 	mul.w	r3, r6, lr
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x28a>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a84:	d216      	bcs.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a86:	428b      	cmp	r3, r1
 8000a88:	d914      	bls.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a8a:	3e02      	subs	r6, #2
 8000a8c:	4461      	add	r1, ip
 8000a8e:	1ac9      	subs	r1, r1, r3
 8000a90:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a94:	e738      	b.n	8000908 <__udivmoddi4+0x104>
 8000a96:	462e      	mov	r6, r5
 8000a98:	4628      	mov	r0, r5
 8000a9a:	e705      	b.n	80008a8 <__udivmoddi4+0xa4>
 8000a9c:	4606      	mov	r6, r0
 8000a9e:	e6e3      	b.n	8000868 <__udivmoddi4+0x64>
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	e6f8      	b.n	8000896 <__udivmoddi4+0x92>
 8000aa4:	454b      	cmp	r3, r9
 8000aa6:	d2a9      	bcs.n	80009fc <__udivmoddi4+0x1f8>
 8000aa8:	ebb9 0802 	subs.w	r8, r9, r2
 8000aac:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ab0:	3801      	subs	r0, #1
 8000ab2:	e7a3      	b.n	80009fc <__udivmoddi4+0x1f8>
 8000ab4:	4646      	mov	r6, r8
 8000ab6:	e7ea      	b.n	8000a8e <__udivmoddi4+0x28a>
 8000ab8:	4620      	mov	r0, r4
 8000aba:	e794      	b.n	80009e6 <__udivmoddi4+0x1e2>
 8000abc:	4640      	mov	r0, r8
 8000abe:	e7d1      	b.n	8000a64 <__udivmoddi4+0x260>
 8000ac0:	46d0      	mov	r8, sl
 8000ac2:	e77b      	b.n	80009bc <__udivmoddi4+0x1b8>
 8000ac4:	3b02      	subs	r3, #2
 8000ac6:	4461      	add	r1, ip
 8000ac8:	e732      	b.n	8000930 <__udivmoddi4+0x12c>
 8000aca:	4630      	mov	r0, r6
 8000acc:	e709      	b.n	80008e2 <__udivmoddi4+0xde>
 8000ace:	4464      	add	r4, ip
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	e742      	b.n	800095a <__udivmoddi4+0x156>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ae4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000ae6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000af4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4013      	ands	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000afc:	68fb      	ldr	r3, [r7, #12]
}
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b0e:	2004      	movs	r0, #4
 8000b10:	f7ff ffe2 	bl	8000ad8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b14:	2001      	movs	r0, #1
 8000b16:	f7ff ffdf 	bl	8000ad8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	200b      	movs	r0, #11
 8000b20:	f017 f88f 	bl	8017c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b24:	200b      	movs	r0, #11
 8000b26:	f017 f8a6 	bl	8017c76 <HAL_NVIC_EnableIRQ>

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b085      	sub	sp, #20
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b74:	2004      	movs	r0, #4
 8000b76:	f7ff ffda 	bl	8000b2e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f7ff ffd7 	bl	8000b2e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	2001      	movs	r0, #1
 8000b82:	f7ff ffd4 	bl	8000b2e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b86:	2008      	movs	r0, #8
 8000b88:	f7ff ffd1 	bl	8000b2e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_RST_GPIO_Port, ESP32_RST_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2108      	movs	r1, #8
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b94:	f017 fe22 	bl	80187dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2123      	movs	r1, #35	; 0x23
 8000b9c:	482a      	ldr	r0, [pc, #168]	; (8000c48 <MX_GPIO_Init+0xe8>)
 8000b9e:	f017 fe1d 	bl	80187dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP32_RST_Pin;
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ESP32_RST_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f017 fba9 	bl	8018310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bbe:	2310      	movs	r3, #16
 8000bc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	4619      	mov	r1, r3
 8000bd0:	481e      	ldr	r0, [pc, #120]	; (8000c4c <MX_GPIO_Init+0xec>)
 8000bd2:	f017 fb9d 	bl	8018310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000bd6:	2323      	movs	r3, #35	; 0x23
 8000bd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4619      	mov	r1, r3
 8000bea:	4817      	ldr	r0, [pc, #92]	; (8000c48 <MX_GPIO_Init+0xe8>)
 8000bec:	f017 fb90 	bl	8018310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bf8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	4813      	ldr	r0, [pc, #76]	; (8000c50 <MX_GPIO_Init+0xf0>)
 8000c04:	f017 fb84 	bl	8018310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	4619      	mov	r1, r3
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_GPIO_Init+0xf0>)
 8000c1a:	f017 fb79 	bl	8018310 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2006      	movs	r0, #6
 8000c24:	f017 f80d 	bl	8017c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c28:	2006      	movs	r0, #6
 8000c2a:	f017 f824 	bl	8017c76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	200a      	movs	r0, #10
 8000c34:	f017 f805 	bl	8017c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c38:	200a      	movs	r0, #10
 8000c3a:	f017 f81c 	bl	8017c76 <HAL_NVIC_EnableIRQ>

}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	48000400 	.word	0x48000400
 8000c4c:	48000800 	.word	0x48000800
 8000c50:	48000c00 	.word	0x48000c00

08000c54 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c60:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d013      	beq.n	8000c94 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c70:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c74:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00b      	beq.n	8000c94 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c7c:	e000      	b.n	8000c80 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c7e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0f9      	beq.n	8000c7e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c8a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c94:	687b      	ldr	r3, [r7, #4]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cb2:	f023 0218 	bic.w	r2, r3, #24
 8000cb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd2:	f016 fe31 	bl	8017938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd6:	f000 f815 	bl	8000d04 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000cda:	f000 f889 	bl	8000df0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cde:	f7ff ff3f 	bl	8000b60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ce2:	f7ff ff12 	bl	8000b0a <MX_DMA_Init>
  MX_USB_PCD_Init();
 8000ce6:	f002 fcbf 	bl	8003668 <MX_USB_PCD_Init>
  MX_LPUART1_UART_Init();
 8000cea:	f002 fbb5 	bl	8003458 <MX_LPUART1_UART_Init>
  MX_TIM17_Init();
 8000cee:	f002 fb45 	bl	800337c <MX_TIM17_Init>
  MX_TOF_Init();
 8000cf2:	f01c ff71 	bl	801dbd8 <MX_TOF_Init>
  /* USER CODE BEGIN 2 */

  wifi_init();
 8000cf6:	f01c f893 	bl	801ce20 <wifi_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_TOF_Process();
 8000cfa:	f01c ff73 	bl	801dbe4 <MX_TOF_Process>
	  wifi_process();
 8000cfe:	f01c f8bb 	bl	801ce78 <wifi_process>
	  MX_TOF_Process();
 8000d02:	e7fa      	b.n	8000cfa <main+0x2c>

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b09a      	sub	sp, #104	; 0x68
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	2248      	movs	r2, #72	; 0x48
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f01d fb50 	bl	801e3b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]
 8000d26:	615a      	str	r2, [r3, #20]
 8000d28:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d38:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	f023 0303 	bic.w	r3, r3, #3
 8000d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d4e:	f018 fc91 	bl	8019674 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff ffa5 	bl	8000ca2 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <SystemClock_Config+0xe8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d60:	4a22      	ldr	r2, [pc, #136]	; (8000dec <SystemClock_Config+0xe8>)
 8000d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	4b20      	ldr	r3, [pc, #128]	; (8000dec <SystemClock_Config+0xe8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000d74:	2327      	movs	r3, #39	; 0x27
 8000d76:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d8c:	2340      	movs	r3, #64	; 0x40
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d94:	2360      	movs	r3, #96	; 0x60
 8000d96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9c:	f107 0320 	add.w	r3, r7, #32
 8000da0:	4618      	mov	r0, r3
 8000da2:	f018 fffb 	bl	8019d9c <HAL_RCC_OscConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000dac:	f000 f882 	bl	8000eb4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000db0:	236f      	movs	r3, #111	; 0x6f
 8000db2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000db4:	2302      	movs	r3, #2
 8000db6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f019 fb57 	bl	801a484 <HAL_RCC_ClockConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000ddc:	f000 f86a 	bl	8000eb4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000de0:	f01a f912 	bl	801b008 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000de4:	bf00      	nop
 8000de6:	3768      	adds	r7, #104	; 0x68
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	58000400 	.word	0x58000400

08000df0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b094      	sub	sp, #80	; 0x50
 8000df4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df6:	463b      	mov	r3, r7
 8000df8:	2250      	movs	r2, #80	; 0x50
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f01d fadb 	bl	801e3b8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000e02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e06:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4618      	mov	r0, r3
 8000e14:	f019 ff82 	bl	801ad1c <HAL_RCCEx_PeriphCLKConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000e1e:	f000 f849 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000e22:	bf00      	nop
 8000e24:	3750      	adds	r7, #80	; 0x50
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	printf("CALLBACK LPUART\n");
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <HAL_UART_RxCpltCallback+0x18>)
 8000e36:	f01d fc43 	bl	801e6c0 <puts>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	0801f480 	.word	0x0801f480

08000e48 <_write>:

int _write(int file, char *ptr, int len)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e009      	b.n	8000e6e <_write+0x26>
	{
	//__io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	60ba      	str	r2, [r7, #8]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fef6 	bl	8000c54 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	dbf1      	blt.n	8000e5a <_write+0x12>
	}
	return len;
 8000e76:	687b      	ldr	r3, [r7, #4]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d005      	beq.n	8000e9c <HAL_GPIO_EXTI_Callback+0x1c>
 8000e90:	2b10      	cmp	r3, #16
 8000e92:	d107      	bne.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x24>
	{
	case B1_Pin:
		button_pushed = B1;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x30>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	801a      	strh	r2, [r3, #0]
		break;
 8000e9a:	e003      	b.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x24>
	case B2_Pin:
		button_pushed = B2;
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x30>)
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	801a      	strh	r2, [r3, #0]
		break;
 8000ea2:	bf00      	nop
	}
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	200087b0 	.word	0x200087b0

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
}
 8000eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <Error_Handler+0x8>
	...

08000ec0 <serialize_int>:

static char *parson_float_format = NULL;

// +BCH
int serialize_int(double num, char *buf)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	ed87 0b02 	vstr	d0, [r7, #8]
 8000eca:	6078      	str	r0, [r7, #4]
	if(buf == NULL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d102      	bne.n	8000ed8 <serialize_int+0x18>
		return -1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e00a      	b.n	8000eee <serialize_int+0x2e>

	return sprintf(buf,"%d",(int)num);
 8000ed8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000edc:	f7ff fc02 	bl	80006e4 <__aeabi_d2iz>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4904      	ldr	r1, [pc, #16]	; (8000ef8 <serialize_int+0x38>)
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f01d fc02 	bl	801e6f0 <siprintf>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	0801f490 	.word	0x0801f490

08000efc <parson_strndup>:
        escaped = PARSON_FALSE;
        string++;
    }
}

static char * parson_strndup(const char *string, size_t n) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
    /* We expect the caller has validated that 'n' fits within the input buffer. */
    char *output_string = (char*)parson_malloc(n + 1);
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <parson_strndup+0x40>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	683a      	ldr	r2, [r7, #0]
 8000f0c:	3201      	adds	r2, #1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4798      	blx	r3
 8000f12:	60f8      	str	r0, [r7, #12]
    if (!output_string) {
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <parson_strndup+0x22>
        return NULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e00a      	b.n	8000f34 <parson_strndup+0x38>
    }
    output_string[n] = '\0';
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
    memcpy(output_string, string, n);
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f01d fa1b 	bl	801e368 <memcpy>
    return output_string;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000008 	.word	0x20000008

08000f40 <parson_strdup>:

static char * parson_strdup(const char *string) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    return parson_strndup(string, strlen(string));
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff f919 	bl	8000180 <strlen>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4619      	mov	r1, r3
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffd2 	bl	8000efc <parson_strndup>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <hash_string>:
        }
    }
    return PARSON_TRUE;
}

static unsigned long hash_string(const char *string, size_t n) {
 8000f62:	b480      	push	{r7}
 8000f64:	b087      	sub	sp, #28
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
#ifdef PARSON_FORCE_HASH_COLLISIONS
    (void)string;
    (void)n;
    return 0;
#else
    unsigned long hash = 5381;
 8000f6c:	f241 5305 	movw	r3, #5381	; 0x1505
 8000f70:	617b      	str	r3, [r7, #20]
    unsigned char c;
    size_t i = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
    for (i = 0; i < n; i++) {
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	e011      	b.n	8000fa0 <hash_string+0x3e>
        c = string[i];
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4413      	add	r3, r2
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	73fb      	strb	r3, [r7, #15]
        if (c == '\0') {
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00e      	beq.n	8000faa <hash_string+0x48>
            break;
        }
        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	015a      	lsls	r2, r3, #5
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	441a      	add	r2, r3
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	4413      	add	r3, r2
 8000f98:	617b      	str	r3, [r7, #20]
    for (i = 0; i < n; i++) {
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d3e9      	bcc.n	8000f7c <hash_string+0x1a>
 8000fa8:	e000      	b.n	8000fac <hash_string+0x4a>
            break;
 8000faa:	bf00      	nop
    }
    return hash;
 8000fac:	697b      	ldr	r3, [r7, #20]
#endif
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	371c      	adds	r7, #28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <json_object_make>:

/* JSON Object */
static JSON_Object * json_object_make(JSON_Value *wrapping_value) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    JSON_Status res = JSONFailure;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	60fb      	str	r3, [r7, #12]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <json_object_make+0x50>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2024      	movs	r0, #36	; 0x24
 8000fd0:	4798      	blx	r3
 8000fd2:	60b8      	str	r0, [r7, #8]
    if (new_obj == NULL) {
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <json_object_make+0x22>
        return NULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e011      	b.n	8001002 <json_object_make+0x46>
    }
    new_obj->wrapping_value = wrapping_value;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	601a      	str	r2, [r3, #0]
    res = json_object_init(new_obj, 0);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	68b8      	ldr	r0, [r7, #8]
 8000fe8:	f000 f814 	bl	8001014 <json_object_init>
 8000fec:	60f8      	str	r0, [r7, #12]
    if (res != JSONSuccess) {
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d005      	beq.n	8001000 <json_object_make+0x44>
        parson_free(new_obj);
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <json_object_make+0x54>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	68b8      	ldr	r0, [r7, #8]
 8000ffa:	4798      	blx	r3
        return NULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e000      	b.n	8001002 <json_object_make+0x46>
    }
    return new_obj;
 8001000:	68bb      	ldr	r3, [r7, #8]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008
 8001010:	2000000c 	.word	0x2000000c

08001014 <json_object_init>:

static JSON_Status json_object_init(JSON_Object *object, size_t capacity) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
    unsigned int i = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]

    object->cells = NULL;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]

    object->count = 0;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
    object->cell_capacity = capacity;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	621a      	str	r2, [r3, #32]
    object->item_capacity = (unsigned int)(capacity * 0.7f);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001056:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001174 <json_object_init+0x160>
 800105a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800105e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001062:	ee17 2a90 	vmov	r2, s15
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	61da      	str	r2, [r3, #28]

    if (capacity == 0) {
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <json_object_init+0x60>
        return JSONSuccess;
 8001070:	2300      	movs	r3, #0
 8001072:	e07b      	b.n	800116c <json_object_init+0x158>
    }

    object->cells = (size_t*)parson_malloc(object->cell_capacity * sizeof(*object->cells));
 8001074:	4b40      	ldr	r3, [pc, #256]	; (8001178 <json_object_init+0x164>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6a12      	ldr	r2, [r2, #32]
 800107c:	0092      	lsls	r2, r2, #2
 800107e:	4610      	mov	r0, r2
 8001080:	4798      	blx	r3
 8001082:	4602      	mov	r2, r0
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	605a      	str	r2, [r3, #4]
    object->names = (char**)parson_malloc(object->item_capacity * sizeof(*object->names));
 8001088:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <json_object_init+0x164>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	69d2      	ldr	r2, [r2, #28]
 8001090:	0092      	lsls	r2, r2, #2
 8001092:	4610      	mov	r0, r2
 8001094:	4798      	blx	r3
 8001096:	4602      	mov	r2, r0
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	60da      	str	r2, [r3, #12]
    object->values = (JSON_Value**)parson_malloc(object->item_capacity * sizeof(*object->values));
 800109c:	4b36      	ldr	r3, [pc, #216]	; (8001178 <json_object_init+0x164>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	69d2      	ldr	r2, [r2, #28]
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	4610      	mov	r0, r2
 80010a8:	4798      	blx	r3
 80010aa:	4602      	mov	r2, r0
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	611a      	str	r2, [r3, #16]
    object->cell_ixs = (size_t*)parson_malloc(object->item_capacity * sizeof(*object->cell_ixs));
 80010b0:	4b31      	ldr	r3, [pc, #196]	; (8001178 <json_object_init+0x164>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	69d2      	ldr	r2, [r2, #28]
 80010b8:	0092      	lsls	r2, r2, #2
 80010ba:	4610      	mov	r0, r2
 80010bc:	4798      	blx	r3
 80010be:	4602      	mov	r2, r0
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	615a      	str	r2, [r3, #20]
    object->hashes = (unsigned long*)parson_malloc(object->item_capacity * sizeof(*object->hashes));
 80010c4:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <json_object_init+0x164>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	69d2      	ldr	r2, [r2, #28]
 80010cc:	0092      	lsls	r2, r2, #2
 80010ce:	4610      	mov	r0, r2
 80010d0:	4798      	blx	r3
 80010d2:	4602      	mov	r2, r0
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	609a      	str	r2, [r3, #8]
    if (object->cells == NULL
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d024      	beq.n	800112a <json_object_init+0x116>
        || object->names == NULL
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d020      	beq.n	800112a <json_object_init+0x116>
        || object->values == NULL
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d01c      	beq.n	800112a <json_object_init+0x116>
        || object->cell_ixs == NULL
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d018      	beq.n	800112a <json_object_init+0x116>
        || object->hashes == NULL) {
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d014      	beq.n	800112a <json_object_init+0x116>
        goto error;
    }
    for (i = 0; i < object->cell_capacity; i++) {
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	e00a      	b.n	800111c <json_object_init+0x108>
        object->cells[i] = OBJECT_INVALID_IX;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->cell_capacity; i++) {
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3301      	adds	r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	429a      	cmp	r2, r3
 8001124:	d3ef      	bcc.n	8001106 <json_object_init+0xf2>
    }
    return JSONSuccess;
 8001126:	2300      	movs	r3, #0
 8001128:	e020      	b.n	800116c <json_object_init+0x158>
        goto error;
 800112a:	bf00      	nop
error:
    parson_free(object->cells);
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <json_object_init+0x168>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	6852      	ldr	r2, [r2, #4]
 8001134:	4610      	mov	r0, r2
 8001136:	4798      	blx	r3
    parson_free(object->names);
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <json_object_init+0x168>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	68d2      	ldr	r2, [r2, #12]
 8001140:	4610      	mov	r0, r2
 8001142:	4798      	blx	r3
    parson_free(object->values);
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <json_object_init+0x168>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6912      	ldr	r2, [r2, #16]
 800114c:	4610      	mov	r0, r2
 800114e:	4798      	blx	r3
    parson_free(object->cell_ixs);
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <json_object_init+0x168>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6952      	ldr	r2, [r2, #20]
 8001158:	4610      	mov	r0, r2
 800115a:	4798      	blx	r3
    parson_free(object->hashes);
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <json_object_init+0x168>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	6892      	ldr	r2, [r2, #8]
 8001164:	4610      	mov	r0, r2
 8001166:	4798      	blx	r3
    return JSONFailure;
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	3f333333 	.word	0x3f333333
 8001178:	20000008 	.word	0x20000008
 800117c:	2000000c 	.word	0x2000000c

08001180 <json_object_deinit>:

static void json_object_deinit(JSON_Object *object, parson_bool_t free_keys, parson_bool_t free_values) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
    unsigned int i = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < object->count; i++) {
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e01b      	b.n	80011ce <json_object_deinit+0x4e>
        if (free_keys) {
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d009      	beq.n	80011b0 <json_object_deinit+0x30>
            parson_free(object->names[i]);
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <json_object_deinit+0xcc>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	68d1      	ldr	r1, [r2, #12]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	0092      	lsls	r2, r2, #2
 80011a8:	440a      	add	r2, r1
 80011aa:	6812      	ldr	r2, [r2, #0]
 80011ac:	4610      	mov	r0, r2
 80011ae:	4798      	blx	r3
        }
        if (free_values) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d008      	beq.n	80011c8 <json_object_deinit+0x48>
            json_value_free(object->values[i]);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	691a      	ldr	r2, [r3, #16]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fb92 	bl	80028ec <json_value_free>
    for (i = 0; i < object->count; i++) {
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3301      	adds	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d3de      	bcc.n	8001196 <json_object_deinit+0x16>
        }
    }

    object->count = 0;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
    object->item_capacity = 0;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
    object->cell_capacity = 0;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]

    parson_free(object->cells);
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <json_object_deinit+0xcc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	6852      	ldr	r2, [r2, #4]
 80011f2:	4610      	mov	r0, r2
 80011f4:	4798      	blx	r3
    parson_free(object->names);
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <json_object_deinit+0xcc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	68d2      	ldr	r2, [r2, #12]
 80011fe:	4610      	mov	r0, r2
 8001200:	4798      	blx	r3
    parson_free(object->values);
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <json_object_deinit+0xcc>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	6912      	ldr	r2, [r2, #16]
 800120a:	4610      	mov	r0, r2
 800120c:	4798      	blx	r3
    parson_free(object->cell_ixs);
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <json_object_deinit+0xcc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	6952      	ldr	r2, [r2, #20]
 8001216:	4610      	mov	r0, r2
 8001218:	4798      	blx	r3
    parson_free(object->hashes);
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <json_object_deinit+0xcc>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	6892      	ldr	r2, [r2, #8]
 8001222:	4610      	mov	r0, r2
 8001224:	4798      	blx	r3

    object->cells = NULL;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
}
 8001244:	bf00      	nop
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2000000c 	.word	0x2000000c

08001250 <json_object_grow_and_rehash>:

static JSON_Status json_object_grow_and_rehash(JSON_Object *object) {
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	b092      	sub	sp, #72	; 0x48
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
    JSON_Value *wrapping_value = NULL;
 8001258:	2300      	movs	r3, #0
 800125a:	643b      	str	r3, [r7, #64]	; 0x40
    JSON_Object new_object;
    char *key = NULL;
 800125c:	2300      	movs	r3, #0
 800125e:	63fb      	str	r3, [r7, #60]	; 0x3c
    JSON_Value *value = NULL;
 8001260:	2300      	movs	r3, #0
 8001262:	63bb      	str	r3, [r7, #56]	; 0x38
    unsigned int i = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	647b      	str	r3, [r7, #68]	; 0x44
    size_t new_capacity = MAX(object->cell_capacity * 2, STARTING_CAPACITY);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2b10      	cmp	r3, #16
 8001270:	bf38      	it	cc
 8001272:	2310      	movcc	r3, #16
 8001274:	637b      	str	r3, [r7, #52]	; 0x34
    JSON_Status res = json_object_init(&new_object, new_capacity);
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fec9 	bl	8001014 <json_object_init>
 8001282:	6338      	str	r0, [r7, #48]	; 0x30
    if (res != JSONSuccess) {
 8001284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <json_object_grow_and_rehash+0x40>
        return JSONFailure;
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	e046      	b.n	800131e <json_object_grow_and_rehash+0xce>
    }

    wrapping_value = json_object_get_wrapping_value(object);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f001 fa52 	bl	800273a <json_object_get_wrapping_value>
 8001296:	6438      	str	r0, [r7, #64]	; 0x40
    new_object.wrapping_value = wrapping_value;
 8001298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800129a:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < object->count; i++) {
 800129c:	2300      	movs	r3, #0
 800129e:	647b      	str	r3, [r7, #68]	; 0x44
 80012a0:	e028      	b.n	80012f4 <json_object_grow_and_rehash+0xa4>
        key = object->names[i];
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        value = object->values[i];
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	63bb      	str	r3, [r7, #56]	; 0x38
        res = json_object_add(&new_object, key, value);
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f897 	bl	80013fa <json_object_add>
 80012cc:	6338      	str	r0, [r7, #48]	; 0x30
        if (res != JSONSuccess) {
 80012ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d009      	beq.n	80012e8 <json_object_grow_and_rehash+0x98>
            json_object_deinit(&new_object, PARSON_FALSE, PARSON_FALSE);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff4f 	bl	8001180 <json_object_deinit>
            return JSONFailure;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	e01a      	b.n	800131e <json_object_grow_and_rehash+0xce>
        }
        value->parent = wrapping_value;
 80012e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012ec:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->count; i++) {
 80012ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012f0:	3301      	adds	r3, #1
 80012f2:	647b      	str	r3, [r7, #68]	; 0x44
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d3d1      	bcc.n	80012a2 <json_object_grow_and_rehash+0x52>
    }
    json_object_deinit(object, PARSON_FALSE, PARSON_FALSE);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff3c 	bl	8001180 <json_object_deinit>
    *object = new_object;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	461d      	mov	r5, r3
 800130c:	f107 040c 	add.w	r4, r7, #12
 8001310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001318:	6823      	ldr	r3, [r4, #0]
 800131a:	602b      	str	r3, [r5, #0]
    return JSONSuccess;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3748      	adds	r7, #72	; 0x48
 8001322:	46bd      	mov	sp, r7
 8001324:	bdb0      	pop	{r4, r5, r7, pc}

08001326 <json_object_get_cell_ix>:

static size_t json_object_get_cell_ix(const JSON_Object *object, const char *key, size_t key_len, unsigned long hash, parson_bool_t *out_found) {
 8001326:	b580      	push	{r7, lr}
 8001328:	b08c      	sub	sp, #48	; 0x30
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	603b      	str	r3, [r7, #0]
    size_t cell_ix = hash & (object->cell_capacity - 1);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	3b01      	subs	r3, #1
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	4013      	ands	r3, r2
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t cell = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    size_t ix = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
    unsigned int i = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
    unsigned long hash_to_check = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
    const char *key_to_check = NULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
    size_t key_to_check_len = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

    *out_found = PARSON_FALSE;
 8001358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]

    for (i = 0; i < object->cell_capacity; i++) {
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001362:	e03f      	b.n	80013e4 <json_object_get_cell_ix+0xbe>
        ix = (cell_ix + i) & (object->cell_capacity - 1);
 8001364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001368:	441a      	add	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	3b01      	subs	r3, #1
 8001370:	4013      	ands	r3, r2
 8001372:	623b      	str	r3, [r7, #32]
        cell = object->cells[ix];
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
        if (cell == OBJECT_INVALID_IX) {
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001388:	d101      	bne.n	800138e <json_object_get_cell_ix+0x68>
            return ix;
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	e031      	b.n	80013f2 <json_object_get_cell_ix+0xcc>
        }
        hash_to_check = object->hashes[cell];
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	61fb      	str	r3, [r7, #28]
        if (hash != hash_to_check) {
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d11b      	bne.n	80013dc <json_object_get_cell_ix+0xb6>
            continue;
        }
        key_to_check = object->names[cell];
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	61bb      	str	r3, [r7, #24]
        key_to_check_len = strlen(key_to_check);
 80013b2:	69b8      	ldr	r0, [r7, #24]
 80013b4:	f7fe fee4 	bl	8000180 <strlen>
 80013b8:	6178      	str	r0, [r7, #20]
        if (key_to_check_len == key_len && strncmp(key, key_to_check, key_len) == 0) {
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d10d      	bne.n	80013de <json_object_get_cell_ix+0xb8>
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	69b9      	ldr	r1, [r7, #24]
 80013c6:	68b8      	ldr	r0, [r7, #8]
 80013c8:	f01d f9f5 	bl	801e7b6 <strncmp>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d105      	bne.n	80013de <json_object_get_cell_ix+0xb8>
            *out_found = PARSON_TRUE;
 80013d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
            return ix;
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	e00a      	b.n	80013f2 <json_object_get_cell_ix+0xcc>
            continue;
 80013dc:	bf00      	nop
    for (i = 0; i < object->cell_capacity; i++) {
 80013de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e0:	3301      	adds	r3, #1
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d3ba      	bcc.n	8001364 <json_object_get_cell_ix+0x3e>
        }
    }
    return OBJECT_INVALID_IX;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3730      	adds	r7, #48	; 0x30
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, char *name, JSON_Value *value) {
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b08a      	sub	sp, #40	; 0x28
 80013fe:	af02      	add	r7, sp, #8
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
    parson_bool_t found = PARSON_FALSE;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
    size_t cell_ix = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    JSON_Status res = JSONFailure;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	617b      	str	r3, [r7, #20]

    if (!object || !name || !value) {
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <json_object_add+0x30>
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <json_object_add+0x30>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d102      	bne.n	8001430 <json_object_add+0x36>
        return JSONFailure;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	e06e      	b.n	800150e <json_object_add+0x114>
    }

    hash = hash_string(name, strlen(name));
 8001430:	68b8      	ldr	r0, [r7, #8]
 8001432:	f7fe fea5 	bl	8000180 <strlen>
 8001436:	4603      	mov	r3, r0
 8001438:	4619      	mov	r1, r3
 800143a:	68b8      	ldr	r0, [r7, #8]
 800143c:	f7ff fd91 	bl	8000f62 <hash_string>
 8001440:	61b8      	str	r0, [r7, #24]
    found = PARSON_FALSE;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8001446:	68b8      	ldr	r0, [r7, #8]
 8001448:	f7fe fe9a 	bl	8000180 <strlen>
 800144c:	4602      	mov	r2, r0
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f7ff ff64 	bl	8001326 <json_object_get_cell_ix>
 800145e:	61f8      	str	r0, [r7, #28]
    if (found) {
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d002      	beq.n	800146c <json_object_add+0x72>
        return JSONFailure;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
 800146a:	e050      	b.n	800150e <json_object_add+0x114>
    }

    if (object->count >= object->item_capacity) {
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	699a      	ldr	r2, [r3, #24]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	429a      	cmp	r2, r3
 8001476:	d316      	bcc.n	80014a6 <json_object_add+0xac>
        res = json_object_grow_and_rehash(object);
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f7ff fee9 	bl	8001250 <json_object_grow_and_rehash>
 800147e:	6178      	str	r0, [r7, #20]
        if (res != JSONSuccess) {
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <json_object_add+0x92>
            return JSONFailure;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e040      	b.n	800150e <json_object_add+0x114>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 800148c:	68b8      	ldr	r0, [r7, #8]
 800148e:	f7fe fe77 	bl	8000180 <strlen>
 8001492:	4602      	mov	r2, r0
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f7ff ff41 	bl	8001326 <json_object_get_cell_ix>
 80014a4:	61f8      	str	r0, [r7, #28]
    }

    object->names[object->count] = name;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	6992      	ldr	r2, [r2, #24]
 80014c4:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	691a      	ldr	r2, [r3, #16]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	695a      	ldr	r2, [r3, #20]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	601a      	str	r2, [r3, #0]
    object->count++;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f001 f91a 	bl	800273a <json_object_get_wrapping_value>
 8001506:	4602      	mov	r2, r0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	601a      	str	r2, [r3, #0]

    return JSONSuccess;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3720      	adds	r7, #32
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <json_object_free>:
    }
    temp_object = json_value_get_object(temp_value);
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
}

static void json_object_free(JSON_Object *object) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
    json_object_deinit(object, PARSON_TRUE, PARSON_TRUE);
 8001520:	2201      	movs	r2, #1
 8001522:	2101      	movs	r1, #1
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fe2b 	bl	8001180 <json_object_deinit>
    parson_free(object);
 800152a:	4b04      	ldr	r3, [pc, #16]	; (800153c <json_object_free+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2000000c 	.word	0x2000000c

08001540 <json_array_free>:
    array->items = new_items;
    array->capacity = new_capacity;
    return JSONSuccess;
}

static void json_array_free(JSON_Array *array) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e00b      	b.n	8001566 <json_array_free+0x26>
        json_value_free(array->items[i]);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f001 f9c6 	bl	80028ec <json_value_free>
    for (i = 0; i < array->count; i++) {
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3301      	adds	r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	429a      	cmp	r2, r3
 800156e:	d3ee      	bcc.n	800154e <json_array_free+0xe>
    }
    parson_free(array->items);
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <json_array_free+0x4c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6852      	ldr	r2, [r2, #4]
 8001578:	4610      	mov	r0, r2
 800157a:	4798      	blx	r3
    parson_free(array);
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <json_array_free+0x4c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	4798      	blx	r3
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2000000c 	.word	0x2000000c

08001590 <json_serialize_to_buffer_r>:
                                    APPEND_STRING(PARSON_INDENT_STR);\
                                }\
                            } while (0)

static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, parson_bool_t is_pretty, char *num_buf)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b098      	sub	sp, #96	; 0x60
 8001594:	af02      	add	r7, sp, #8
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
    const char *key = NULL, *string = NULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
    JSON_Value *temp_value = NULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
    JSON_Array *array = NULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Object *object = NULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t i = 0, count = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	657b      	str	r3, [r7, #84]	; 0x54
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
    double num = 0.0;
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int written = -1, written_total = 0;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	653b      	str	r3, [r7, #80]	; 0x50
 80015cc:	2300      	movs	r3, #0
 80015ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t len = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]

    switch (json_value_get_type(value)) {
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f001 f8ed 	bl	80027b4 <json_value_get_type>
 80015da:	4603      	mov	r3, r0
 80015dc:	3301      	adds	r3, #1
 80015de:	2b07      	cmp	r3, #7
 80015e0:	f200 8355 	bhi.w	8001c8e <json_serialize_to_buffer_r+0x6fe>
 80015e4:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <json_serialize_to_buffer_r+0x5c>)
 80015e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ea:	bf00      	nop
 80015ec:	08001c89 	.word	0x08001c89
 80015f0:	08001c8f 	.word	0x08001c8f
 80015f4:	08001c55 	.word	0x08001c55
 80015f8:	08001b1b 	.word	0x08001b1b
 80015fc:	08001bdb 	.word	0x08001bdb
 8001600:	08001839 	.word	0x08001839
 8001604:	0800160d 	.word	0x0800160d
 8001608:	08001b69 	.word	0x08001b69
        case JSONArray:
            array = json_value_get_array(value);
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f001 f8f5 	bl	80027fc <json_value_get_array>
 8001612:	62f8      	str	r0, [r7, #44]	; 0x2c
            count = json_array_get_count(array);
 8001614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001616:	f001 f8bc 	bl	8002792 <json_array_get_count>
 800161a:	6278      	str	r0, [r7, #36]	; 0x24
            APPEND_STRING("[");
 800161c:	2301      	movs	r3, #1
 800161e:	653b      	str	r3, [r7, #80]	; 0x50
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00e      	beq.n	8001644 <json_serialize_to_buffer_r+0xb4>
 8001626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001628:	461a      	mov	r2, r3
 800162a:	497e      	ldr	r1, [pc, #504]	; (8001824 <json_serialize_to_buffer_r+0x294>)
 800162c:	68b8      	ldr	r0, [r7, #8]
 800162e:	f01c fe9b 	bl	801e368 <memcpy>
 8001632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	4413      	add	r3, r2
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	4413      	add	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001648:	4413      	add	r3, r2
 800164a:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (count > 0 && is_pretty) {
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	2b00      	cmp	r3, #0
 8001650:	d01a      	beq.n	8001688 <json_serialize_to_buffer_r+0xf8>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d017      	beq.n	8001688 <json_serialize_to_buffer_r+0xf8>
                APPEND_STRING("\n");
 8001658:	2301      	movs	r3, #1
 800165a:	653b      	str	r3, [r7, #80]	; 0x50
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00e      	beq.n	8001680 <json_serialize_to_buffer_r+0xf0>
 8001662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001664:	461a      	mov	r2, r3
 8001666:	4970      	ldr	r1, [pc, #448]	; (8001828 <json_serialize_to_buffer_r+0x298>)
 8001668:	68b8      	ldr	r0, [r7, #8]
 800166a:	f01c fe7d 	bl	801e368 <memcpy>
 800166e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	4413      	add	r3, r2
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
 8001678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	4413      	add	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001684:	4413      	add	r3, r2
 8001686:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            for (i = 0; i < count; i++) {
 8001688:	2300      	movs	r3, #0
 800168a:	657b      	str	r3, [r7, #84]	; 0x54
 800168c:	e081      	b.n	8001792 <json_serialize_to_buffer_r+0x202>
                if (is_pretty) {
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d023      	beq.n	80016dc <json_serialize_to_buffer_r+0x14c>
                    APPEND_INDENT(level+1);
 8001694:	2300      	movs	r3, #0
 8001696:	64bb      	str	r3, [r7, #72]	; 0x48
 8001698:	2300      	movs	r3, #0
 800169a:	64bb      	str	r3, [r7, #72]	; 0x48
 800169c:	e01a      	b.n	80016d4 <json_serialize_to_buffer_r+0x144>
 800169e:	2304      	movs	r3, #4
 80016a0:	653b      	str	r3, [r7, #80]	; 0x50
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00e      	beq.n	80016c6 <json_serialize_to_buffer_r+0x136>
 80016a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016aa:	461a      	mov	r2, r3
 80016ac:	495f      	ldr	r1, [pc, #380]	; (800182c <json_serialize_to_buffer_r+0x29c>)
 80016ae:	68b8      	ldr	r0, [r7, #8]
 80016b0:	f01c fe5a 	bl	801e368 <memcpy>
 80016b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	4413      	add	r3, r2
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
 80016be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	4413      	add	r3, r2
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ca:	4413      	add	r3, r2
 80016cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016d0:	3301      	adds	r3, #1
 80016d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016d8:	429a      	cmp	r2, r3
 80016da:	dae0      	bge.n	800169e <json_serialize_to_buffer_r+0x10e>
                }
                temp_value = json_array_get_value(array, i);
 80016dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80016de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016e0:	f001 f83c 	bl	800275c <json_array_get_value>
 80016e4:	6338      	str	r0, [r7, #48]	; 0x30
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016f4:	f7ff ff4c 	bl	8001590 <json_serialize_to_buffer_r>
 80016f8:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 80016fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	da02      	bge.n	8001706 <json_serialize_to_buffer_r+0x176>
                    return -1;
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
 8001704:	e2c5      	b.n	8001c92 <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <json_serialize_to_buffer_r+0x184>
                    buf += written;
 800170c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	4413      	add	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 8001714:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001718:	4413      	add	r3, r2
 800171a:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (i < (count - 1)) {
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	3b01      	subs	r3, #1
 8001720:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001722:	429a      	cmp	r2, r3
 8001724:	d217      	bcs.n	8001756 <json_serialize_to_buffer_r+0x1c6>
                    APPEND_STRING(",");
 8001726:	2301      	movs	r3, #1
 8001728:	653b      	str	r3, [r7, #80]	; 0x50
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00e      	beq.n	800174e <json_serialize_to_buffer_r+0x1be>
 8001730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001732:	461a      	mov	r2, r3
 8001734:	493e      	ldr	r1, [pc, #248]	; (8001830 <json_serialize_to_buffer_r+0x2a0>)
 8001736:	68b8      	ldr	r0, [r7, #8]
 8001738:	f01c fe16 	bl	801e368 <memcpy>
 800173c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	4413      	add	r3, r2
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	4413      	add	r3, r2
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001752:	4413      	add	r3, r2
 8001754:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                if (is_pretty) {
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d017      	beq.n	800178c <json_serialize_to_buffer_r+0x1fc>
                    APPEND_STRING("\n");
 800175c:	2301      	movs	r3, #1
 800175e:	653b      	str	r3, [r7, #80]	; 0x50
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00e      	beq.n	8001784 <json_serialize_to_buffer_r+0x1f4>
 8001766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001768:	461a      	mov	r2, r3
 800176a:	492f      	ldr	r1, [pc, #188]	; (8001828 <json_serialize_to_buffer_r+0x298>)
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f01c fdfb 	bl	801e368 <memcpy>
 8001772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	4413      	add	r3, r2
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	4413      	add	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001788:	4413      	add	r3, r2
 800178a:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (i = 0; i < count; i++) {
 800178c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800178e:	3301      	adds	r3, #1
 8001790:	657b      	str	r3, [r7, #84]	; 0x54
 8001792:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	429a      	cmp	r2, r3
 8001798:	f4ff af79 	bcc.w	800168e <json_serialize_to_buffer_r+0xfe>
                }
            }
            if (count > 0 && is_pretty) {
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d026      	beq.n	80017f0 <json_serialize_to_buffer_r+0x260>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d023      	beq.n	80017f0 <json_serialize_to_buffer_r+0x260>
                APPEND_INDENT(level);
 80017a8:	2300      	movs	r3, #0
 80017aa:	647b      	str	r3, [r7, #68]	; 0x44
 80017ac:	2300      	movs	r3, #0
 80017ae:	647b      	str	r3, [r7, #68]	; 0x44
 80017b0:	e01a      	b.n	80017e8 <json_serialize_to_buffer_r+0x258>
 80017b2:	2304      	movs	r3, #4
 80017b4:	653b      	str	r3, [r7, #80]	; 0x50
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00e      	beq.n	80017da <json_serialize_to_buffer_r+0x24a>
 80017bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017be:	461a      	mov	r2, r3
 80017c0:	491a      	ldr	r1, [pc, #104]	; (800182c <json_serialize_to_buffer_r+0x29c>)
 80017c2:	68b8      	ldr	r0, [r7, #8]
 80017c4:	f01c fdd0 	bl	801e368 <memcpy>
 80017c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	4413      	add	r3, r2
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	4413      	add	r3, r2
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017de:	4413      	add	r3, r2
 80017e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017e4:	3301      	adds	r3, #1
 80017e6:	647b      	str	r3, [r7, #68]	; 0x44
 80017e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	dbe0      	blt.n	80017b2 <json_serialize_to_buffer_r+0x222>
            }
            APPEND_STRING("]");
 80017f0:	2301      	movs	r3, #1
 80017f2:	653b      	str	r3, [r7, #80]	; 0x50
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00e      	beq.n	8001818 <json_serialize_to_buffer_r+0x288>
 80017fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017fc:	461a      	mov	r2, r3
 80017fe:	490d      	ldr	r1, [pc, #52]	; (8001834 <json_serialize_to_buffer_r+0x2a4>)
 8001800:	68b8      	ldr	r0, [r7, #8]
 8001802:	f01c fdb1 	bl	801e368 <memcpy>
 8001806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	4413      	add	r3, r2
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
 8001810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	4413      	add	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800181a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800181c:	4413      	add	r3, r2
 800181e:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 8001820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001822:	e236      	b.n	8001c92 <json_serialize_to_buffer_r+0x702>
 8001824:	0801f4b8 	.word	0x0801f4b8
 8001828:	0801f4bc 	.word	0x0801f4bc
 800182c:	0801f4c0 	.word	0x0801f4c0
 8001830:	0801f4c8 	.word	0x0801f4c8
 8001834:	0801f4cc 	.word	0x0801f4cc
        case JSONObject:
            object = json_value_get_object(value);
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 ffcd 	bl	80027d8 <json_value_get_object>
 800183e:	62b8      	str	r0, [r7, #40]	; 0x28
            count  = json_object_get_count(object);
 8001840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001842:	f000 ff33 	bl	80026ac <json_object_get_count>
 8001846:	6278      	str	r0, [r7, #36]	; 0x24
            APPEND_STRING("{");
 8001848:	2301      	movs	r3, #1
 800184a:	653b      	str	r3, [r7, #80]	; 0x50
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00e      	beq.n	8001870 <json_serialize_to_buffer_r+0x2e0>
 8001852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001854:	461a      	mov	r2, r3
 8001856:	498e      	ldr	r1, [pc, #568]	; (8001a90 <json_serialize_to_buffer_r+0x500>)
 8001858:	68b8      	ldr	r0, [r7, #8]
 800185a:	f01c fd85 	bl	801e368 <memcpy>
 800185e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	4413      	add	r3, r2
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	4413      	add	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001874:	4413      	add	r3, r2
 8001876:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (count > 0 && is_pretty) {
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	2b00      	cmp	r3, #0
 800187c:	d01a      	beq.n	80018b4 <json_serialize_to_buffer_r+0x324>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d017      	beq.n	80018b4 <json_serialize_to_buffer_r+0x324>
                APPEND_STRING("\n");
 8001884:	2301      	movs	r3, #1
 8001886:	653b      	str	r3, [r7, #80]	; 0x50
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00e      	beq.n	80018ac <json_serialize_to_buffer_r+0x31c>
 800188e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001890:	461a      	mov	r2, r3
 8001892:	4980      	ldr	r1, [pc, #512]	; (8001a94 <json_serialize_to_buffer_r+0x504>)
 8001894:	68b8      	ldr	r0, [r7, #8]
 8001896:	f01c fd67 	bl	801e368 <memcpy>
 800189a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	4413      	add	r3, r2
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	4413      	add	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018b0:	4413      	add	r3, r2
 80018b2:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            for (i = 0; i < count; i++) {
 80018b4:	2300      	movs	r3, #0
 80018b6:	657b      	str	r3, [r7, #84]	; 0x54
 80018b8:	e0da      	b.n	8001a70 <json_serialize_to_buffer_r+0x4e0>
                key = json_object_get_name(object, i);
 80018ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80018bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018be:	f000 ff06 	bl	80026ce <json_object_get_name>
 80018c2:	63b8      	str	r0, [r7, #56]	; 0x38
                if (key == NULL) {
 80018c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d102      	bne.n	80018d0 <json_serialize_to_buffer_r+0x340>
                    return -1;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	e1e0      	b.n	8001c92 <json_serialize_to_buffer_r+0x702>
                }
                if (is_pretty) {
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d023      	beq.n	800191e <json_serialize_to_buffer_r+0x38e>
                    APPEND_INDENT(level+1);
 80018d6:	2300      	movs	r3, #0
 80018d8:	643b      	str	r3, [r7, #64]	; 0x40
 80018da:	2300      	movs	r3, #0
 80018dc:	643b      	str	r3, [r7, #64]	; 0x40
 80018de:	e01a      	b.n	8001916 <json_serialize_to_buffer_r+0x386>
 80018e0:	2304      	movs	r3, #4
 80018e2:	653b      	str	r3, [r7, #80]	; 0x50
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00e      	beq.n	8001908 <json_serialize_to_buffer_r+0x378>
 80018ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018ec:	461a      	mov	r2, r3
 80018ee:	496a      	ldr	r1, [pc, #424]	; (8001a98 <json_serialize_to_buffer_r+0x508>)
 80018f0:	68b8      	ldr	r0, [r7, #8]
 80018f2:	f01c fd39 	bl	801e368 <memcpy>
 80018f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	4413      	add	r3, r2
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	4413      	add	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800190a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800190c:	4413      	add	r3, r2
 800190e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001912:	3301      	adds	r3, #1
 8001914:	643b      	str	r3, [r7, #64]	; 0x40
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800191a:	429a      	cmp	r2, r3
 800191c:	dae0      	bge.n	80018e0 <json_serialize_to_buffer_r+0x350>
                }
                /* We do not support key names with embedded \0 chars */
                written = json_serialize_string(key, strlen(key), buf);
 800191e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001920:	f7fe fc2e 	bl	8000180 <strlen>
 8001924:	4603      	mov	r3, r0
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	4619      	mov	r1, r3
 800192a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800192c:	f000 f9c6 	bl	8001cbc <json_serialize_string>
 8001930:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 8001932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001934:	2b00      	cmp	r3, #0
 8001936:	da02      	bge.n	800193e <json_serialize_to_buffer_r+0x3ae>
                    return -1;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
 800193c:	e1a9      	b.n	8001c92 <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <json_serialize_to_buffer_r+0x3bc>
                    buf += written;
 8001944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	4413      	add	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 800194c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800194e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001950:	4413      	add	r3, r2
 8001952:	64fb      	str	r3, [r7, #76]	; 0x4c
                APPEND_STRING(":");
 8001954:	2301      	movs	r3, #1
 8001956:	653b      	str	r3, [r7, #80]	; 0x50
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00e      	beq.n	800197c <json_serialize_to_buffer_r+0x3ec>
 800195e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001960:	461a      	mov	r2, r3
 8001962:	494e      	ldr	r1, [pc, #312]	; (8001a9c <json_serialize_to_buffer_r+0x50c>)
 8001964:	68b8      	ldr	r0, [r7, #8]
 8001966:	f01c fcff 	bl	801e368 <memcpy>
 800196a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	4413      	add	r3, r2
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	4413      	add	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800197e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001980:	4413      	add	r3, r2
 8001982:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (is_pretty) {
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d017      	beq.n	80019ba <json_serialize_to_buffer_r+0x42a>
                    APPEND_STRING(" ");
 800198a:	2301      	movs	r3, #1
 800198c:	653b      	str	r3, [r7, #80]	; 0x50
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00e      	beq.n	80019b2 <json_serialize_to_buffer_r+0x422>
 8001994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001996:	461a      	mov	r2, r3
 8001998:	4941      	ldr	r1, [pc, #260]	; (8001aa0 <json_serialize_to_buffer_r+0x510>)
 800199a:	68b8      	ldr	r0, [r7, #8]
 800199c:	f01c fce4 	bl	801e368 <memcpy>
 80019a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	4413      	add	r3, r2
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	4413      	add	r3, r2
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019b6:	4413      	add	r3, r2
 80019b8:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                temp_value = json_object_get_value_at(object, i);
 80019ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80019bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019be:	f000 fea1 	bl	8002704 <json_object_get_value_at>
 80019c2:	6338      	str	r0, [r7, #48]	; 0x30
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68b9      	ldr	r1, [r7, #8]
 80019d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019d2:	f7ff fddd 	bl	8001590 <json_serialize_to_buffer_r>
 80019d6:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 80019d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019da:	2b00      	cmp	r3, #0
 80019dc:	da02      	bge.n	80019e4 <json_serialize_to_buffer_r+0x454>
                    return -1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	e156      	b.n	8001c92 <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <json_serialize_to_buffer_r+0x462>
                    buf += written;
 80019ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	4413      	add	r3, r2
 80019f0:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 80019f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019f6:	4413      	add	r3, r2
 80019f8:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (i < (count - 1)) {
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	3b01      	subs	r3, #1
 80019fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d217      	bcs.n	8001a34 <json_serialize_to_buffer_r+0x4a4>
                    APPEND_STRING(",");
 8001a04:	2301      	movs	r3, #1
 8001a06:	653b      	str	r3, [r7, #80]	; 0x50
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00e      	beq.n	8001a2c <json_serialize_to_buffer_r+0x49c>
 8001a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a10:	461a      	mov	r2, r3
 8001a12:	4924      	ldr	r1, [pc, #144]	; (8001aa4 <json_serialize_to_buffer_r+0x514>)
 8001a14:	68b8      	ldr	r0, [r7, #8]
 8001a16:	f01c fca7 	bl	801e368 <memcpy>
 8001a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	4413      	add	r3, r2
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
 8001a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	4413      	add	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a30:	4413      	add	r3, r2
 8001a32:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                if (is_pretty) {
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d017      	beq.n	8001a6a <json_serialize_to_buffer_r+0x4da>
                    APPEND_STRING("\n");
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00e      	beq.n	8001a62 <json_serialize_to_buffer_r+0x4d2>
 8001a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a46:	461a      	mov	r2, r3
 8001a48:	4912      	ldr	r1, [pc, #72]	; (8001a94 <json_serialize_to_buffer_r+0x504>)
 8001a4a:	68b8      	ldr	r0, [r7, #8]
 8001a4c:	f01c fc8c 	bl	801e368 <memcpy>
 8001a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	4413      	add	r3, r2
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a66:	4413      	add	r3, r2
 8001a68:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (i = 0; i < count; i++) {
 8001a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	657b      	str	r3, [r7, #84]	; 0x54
 8001a70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	429a      	cmp	r2, r3
 8001a76:	f4ff af20 	bcc.w	80018ba <json_serialize_to_buffer_r+0x32a>
                }
            }
            if (count > 0 && is_pretty) {
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d032      	beq.n	8001ae6 <json_serialize_to_buffer_r+0x556>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d02f      	beq.n	8001ae6 <json_serialize_to_buffer_r+0x556>
                APPEND_INDENT(level);
 8001a86:	2300      	movs	r3, #0
 8001a88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a8e:	e026      	b.n	8001ade <json_serialize_to_buffer_r+0x54e>
 8001a90:	0801f4d0 	.word	0x0801f4d0
 8001a94:	0801f4bc 	.word	0x0801f4bc
 8001a98:	0801f4c0 	.word	0x0801f4c0
 8001a9c:	0801f4d4 	.word	0x0801f4d4
 8001aa0:	0801f4d8 	.word	0x0801f4d8
 8001aa4:	0801f4c8 	.word	0x0801f4c8
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	653b      	str	r3, [r7, #80]	; 0x50
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00e      	beq.n	8001ad0 <json_serialize_to_buffer_r+0x540>
 8001ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4979      	ldr	r1, [pc, #484]	; (8001c9c <json_serialize_to_buffer_r+0x70c>)
 8001ab8:	68b8      	ldr	r0, [r7, #8]
 8001aba:	f01c fc55 	bl	801e368 <memcpy>
 8001abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	4413      	add	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ad4:	4413      	add	r3, r2
 8001ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ada:	3301      	adds	r3, #1
 8001adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ade:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	dbe0      	blt.n	8001aa8 <json_serialize_to_buffer_r+0x518>
            }
            APPEND_STRING("}");
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	653b      	str	r3, [r7, #80]	; 0x50
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00e      	beq.n	8001b0e <json_serialize_to_buffer_r+0x57e>
 8001af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001af2:	461a      	mov	r2, r3
 8001af4:	496a      	ldr	r1, [pc, #424]	; (8001ca0 <json_serialize_to_buffer_r+0x710>)
 8001af6:	68b8      	ldr	r0, [r7, #8]
 8001af8:	f01c fc36 	bl	801e368 <memcpy>
 8001afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	4413      	add	r3, r2
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b12:	4413      	add	r3, r2
 8001b14:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 8001b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b18:	e0bb      	b.n	8001c92 <json_serialize_to_buffer_r+0x702>
        case JSONString:
            string = json_value_get_string(value);
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 fe92 	bl	8002844 <json_value_get_string>
 8001b20:	6378      	str	r0, [r7, #52]	; 0x34
            if (string == NULL) {
 8001b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <json_serialize_to_buffer_r+0x59e>
                return -1;
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2c:	e0b1      	b.n	8001c92 <json_serialize_to_buffer_r+0x702>
            }
            len = json_value_get_string_len(value);
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 fe9b 	bl	800286a <json_value_get_string_len>
 8001b34:	6178      	str	r0, [r7, #20]
            written = json_serialize_string(string, len, buf);
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	6979      	ldr	r1, [r7, #20]
 8001b3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b3c:	f000 f8be 	bl	8001cbc <json_serialize_string>
 8001b40:	6538      	str	r0, [r7, #80]	; 0x50
            if (written < 0) {
 8001b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	da02      	bge.n	8001b4e <json_serialize_to_buffer_r+0x5be>
                return -1;
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4c:	e0a1      	b.n	8001c92 <json_serialize_to_buffer_r+0x702>
            }
            if (buf != NULL) {
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <json_serialize_to_buffer_r+0x5cc>
                buf += written;
 8001b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	4413      	add	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 8001b5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b60:	4413      	add	r3, r2
 8001b62:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 8001b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b66:	e094      	b.n	8001c92 <json_serialize_to_buffer_r+0x702>
        case JSONBoolean:
            if (json_value_get_boolean(value)) {
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 feac 	bl	80028c6 <json_value_get_boolean>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d018      	beq.n	8001ba6 <json_serialize_to_buffer_r+0x616>
                APPEND_STRING("true");
 8001b74:	2304      	movs	r3, #4
 8001b76:	653b      	str	r3, [r7, #80]	; 0x50
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00e      	beq.n	8001b9c <json_serialize_to_buffer_r+0x60c>
 8001b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b80:	461a      	mov	r2, r3
 8001b82:	4948      	ldr	r1, [pc, #288]	; (8001ca4 <json_serialize_to_buffer_r+0x714>)
 8001b84:	68b8      	ldr	r0, [r7, #8]
 8001b86:	f01c fbef 	bl	801e368 <memcpy>
 8001b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	4413      	add	r3, r2
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	4413      	add	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba0:	4413      	add	r3, r2
 8001ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ba4:	e017      	b.n	8001bd6 <json_serialize_to_buffer_r+0x646>
            } else {
                APPEND_STRING("false");
 8001ba6:	2305      	movs	r3, #5
 8001ba8:	653b      	str	r3, [r7, #80]	; 0x50
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00e      	beq.n	8001bce <json_serialize_to_buffer_r+0x63e>
 8001bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	493c      	ldr	r1, [pc, #240]	; (8001ca8 <json_serialize_to_buffer_r+0x718>)
 8001bb6:	68b8      	ldr	r0, [r7, #8]
 8001bb8:	f01c fbd6 	bl	801e368 <memcpy>
 8001bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	4413      	add	r3, r2
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bd2:	4413      	add	r3, r2
 8001bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            return written_total;
 8001bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd8:	e05b      	b.n	8001c92 <json_serialize_to_buffer_r+0x702>
        case JSONNumber:
            num = json_value_get_number(value);
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 fe58 	bl	8002890 <json_value_get_number>
 8001be0:	ed87 0b06 	vstr	d0, [r7, #24]
            if (buf != NULL) {
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <json_serialize_to_buffer_r+0x65e>
                num_buf = buf;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	663b      	str	r3, [r7, #96]	; 0x60
            }
            if (parson_number_serialization_function) {
 8001bee:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <json_serialize_to_buffer_r+0x71c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <json_serialize_to_buffer_r+0x676>
                written = parson_number_serialization_function(num, num_buf);
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <json_serialize_to_buffer_r+0x71c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001bfc:	ed97 0b06 	vldr	d0, [r7, #24]
 8001c00:	4798      	blx	r3
 8001c02:	6538      	str	r0, [r7, #80]	; 0x50
 8001c04:	e013      	b.n	8001c2e <json_serialize_to_buffer_r+0x69e>
            } else if (parson_float_format) {
 8001c06:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <json_serialize_to_buffer_r+0x720>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d008      	beq.n	8001c20 <json_serialize_to_buffer_r+0x690>
                written = sprintf(num_buf, parson_float_format, num);
 8001c0e:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <json_serialize_to_buffer_r+0x720>)
 8001c10:	6819      	ldr	r1, [r3, #0]
 8001c12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c16:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001c18:	f01c fd6a 	bl	801e6f0 <siprintf>
 8001c1c:	6538      	str	r0, [r7, #80]	; 0x50
 8001c1e:	e006      	b.n	8001c2e <json_serialize_to_buffer_r+0x69e>
            } else {
                written = sprintf(num_buf, PARSON_DEFAULT_FLOAT_FORMAT, num);
 8001c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c24:	4923      	ldr	r1, [pc, #140]	; (8001cb4 <json_serialize_to_buffer_r+0x724>)
 8001c26:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001c28:	f01c fd62 	bl	801e6f0 <siprintf>
 8001c2c:	6538      	str	r0, [r7, #80]	; 0x50
            }
            if (written < 0) {
 8001c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	da02      	bge.n	8001c3a <json_serialize_to_buffer_r+0x6aa>
                return -1;
 8001c34:	f04f 33ff 	mov.w	r3, #4294967295
 8001c38:	e02b      	b.n	8001c92 <json_serialize_to_buffer_r+0x702>
            }
            if (buf != NULL) {
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <json_serialize_to_buffer_r+0x6b8>
                buf += written;
 8001c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	4413      	add	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 8001c48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c4c:	4413      	add	r3, r2
 8001c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 8001c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c52:	e01e      	b.n	8001c92 <json_serialize_to_buffer_r+0x702>
        case JSONNull:
            APPEND_STRING("null");
 8001c54:	2304      	movs	r3, #4
 8001c56:	653b      	str	r3, [r7, #80]	; 0x50
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00e      	beq.n	8001c7c <json_serialize_to_buffer_r+0x6ec>
 8001c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c60:	461a      	mov	r2, r3
 8001c62:	4915      	ldr	r1, [pc, #84]	; (8001cb8 <json_serialize_to_buffer_r+0x728>)
 8001c64:	68b8      	ldr	r0, [r7, #8]
 8001c66:	f01c fb7f 	bl	801e368 <memcpy>
 8001c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	4413      	add	r3, r2
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	4413      	add	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c80:	4413      	add	r3, r2
 8001c82:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 8001c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c86:	e004      	b.n	8001c92 <json_serialize_to_buffer_r+0x702>
        case JSONError:
            return -1;
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8c:	e001      	b.n	8001c92 <json_serialize_to_buffer_r+0x702>
        default:
            return -1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3758      	adds	r7, #88	; 0x58
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	0801f4c0 	.word	0x0801f4c0
 8001ca0:	0801f4dc 	.word	0x0801f4dc
 8001ca4:	0801f4a0 	.word	0x0801f4a0
 8001ca8:	0801f4a8 	.word	0x0801f4a8
 8001cac:	20000014 	.word	0x20000014
 8001cb0:	20000128 	.word	0x20000128
 8001cb4:	0801f4e0 	.word	0x0801f4e0
 8001cb8:	0801f4b0 	.word	0x0801f4b0

08001cbc <json_serialize_string>:

static int json_serialize_string(const char *string, size_t len, char *buf) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
    char c = '\0';
 8001ccc:	2300      	movs	r3, #0
 8001cce:	75fb      	strb	r3, [r7, #23]
    int written = -1, written_total = 0;
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
    // +BCH
    //APPEND_STRING("\"");
    APPEND_STRING("\\\"");
 8001cda:	2302      	movs	r3, #2
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00e      	beq.n	8001d02 <json_serialize_string+0x46>
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	49b8      	ldr	r1, [pc, #736]	; (8001fcc <json_serialize_string+0x310>)
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f01c fb3c 	bl	801e368 <memcpy>
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4413      	add	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++) {
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	f000 bc9b 	b.w	8002648 <json_serialize_string+0x98c>
        c = string[i];
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	4413      	add	r3, r2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	75fb      	strb	r3, [r7, #23]
        switch (c) {
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
 8001d1e:	2b5c      	cmp	r3, #92	; 0x5c
 8001d20:	f200 8482 	bhi.w	8002628 <json_serialize_string+0x96c>
 8001d24:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <json_serialize_string+0x70>)
 8001d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2a:	bf00      	nop
 8001d2c:	08002017 	.word	0x08002017
 8001d30:	08002049 	.word	0x08002049
 8001d34:	0800207b 	.word	0x0800207b
 8001d38:	080020ad 	.word	0x080020ad
 8001d3c:	080020df 	.word	0x080020df
 8001d40:	08002111 	.word	0x08002111
 8001d44:	08002143 	.word	0x08002143
 8001d48:	08002175 	.word	0x08002175
 8001d4c:	08001f05 	.word	0x08001f05
 8001d50:	08001fe5 	.word	0x08001fe5
 8001d54:	08001f69 	.word	0x08001f69
 8001d58:	080021a7 	.word	0x080021a7
 8001d5c:	08001f37 	.word	0x08001f37
 8001d60:	08001f9b 	.word	0x08001f9b
 8001d64:	080021d9 	.word	0x080021d9
 8001d68:	0800220b 	.word	0x0800220b
 8001d6c:	0800226d 	.word	0x0800226d
 8001d70:	0800229f 	.word	0x0800229f
 8001d74:	080022d1 	.word	0x080022d1
 8001d78:	08002303 	.word	0x08002303
 8001d7c:	08002335 	.word	0x08002335
 8001d80:	08002367 	.word	0x08002367
 8001d84:	08002399 	.word	0x08002399
 8001d88:	080023cb 	.word	0x080023cb
 8001d8c:	080023fd 	.word	0x080023fd
 8001d90:	0800242f 	.word	0x0800242f
 8001d94:	08002461 	.word	0x08002461
 8001d98:	08002493 	.word	0x08002493
 8001d9c:	080024f5 	.word	0x080024f5
 8001da0:	08002527 	.word	0x08002527
 8001da4:	08002559 	.word	0x08002559
 8001da8:	0800258b 	.word	0x0800258b
 8001dac:	08002629 	.word	0x08002629
 8001db0:	08002629 	.word	0x08002629
 8001db4:	08001ea1 	.word	0x08001ea1
 8001db8:	08002629 	.word	0x08002629
 8001dbc:	08002629 	.word	0x08002629
 8001dc0:	08002629 	.word	0x08002629
 8001dc4:	08002629 	.word	0x08002629
 8001dc8:	08002629 	.word	0x08002629
 8001dcc:	08002629 	.word	0x08002629
 8001dd0:	08002629 	.word	0x08002629
 8001dd4:	08002629 	.word	0x08002629
 8001dd8:	08002629 	.word	0x08002629
 8001ddc:	08002629 	.word	0x08002629
 8001de0:	08002629 	.word	0x08002629
 8001de4:	08002629 	.word	0x08002629
 8001de8:	080025bd 	.word	0x080025bd
 8001dec:	08002629 	.word	0x08002629
 8001df0:	08002629 	.word	0x08002629
 8001df4:	08002629 	.word	0x08002629
 8001df8:	08002629 	.word	0x08002629
 8001dfc:	08002629 	.word	0x08002629
 8001e00:	08002629 	.word	0x08002629
 8001e04:	08002629 	.word	0x08002629
 8001e08:	08002629 	.word	0x08002629
 8001e0c:	08002629 	.word	0x08002629
 8001e10:	08002629 	.word	0x08002629
 8001e14:	08002629 	.word	0x08002629
 8001e18:	08002629 	.word	0x08002629
 8001e1c:	08002629 	.word	0x08002629
 8001e20:	08002629 	.word	0x08002629
 8001e24:	08002629 	.word	0x08002629
 8001e28:	08002629 	.word	0x08002629
 8001e2c:	08002629 	.word	0x08002629
 8001e30:	08002629 	.word	0x08002629
 8001e34:	08002629 	.word	0x08002629
 8001e38:	08002629 	.word	0x08002629
 8001e3c:	08002629 	.word	0x08002629
 8001e40:	08002629 	.word	0x08002629
 8001e44:	08002629 	.word	0x08002629
 8001e48:	08002629 	.word	0x08002629
 8001e4c:	08002629 	.word	0x08002629
 8001e50:	08002629 	.word	0x08002629
 8001e54:	08002629 	.word	0x08002629
 8001e58:	08002629 	.word	0x08002629
 8001e5c:	08002629 	.word	0x08002629
 8001e60:	08002629 	.word	0x08002629
 8001e64:	08002629 	.word	0x08002629
 8001e68:	08002629 	.word	0x08002629
 8001e6c:	08002629 	.word	0x08002629
 8001e70:	08002629 	.word	0x08002629
 8001e74:	08002629 	.word	0x08002629
 8001e78:	08002629 	.word	0x08002629
 8001e7c:	08002629 	.word	0x08002629
 8001e80:	08002629 	.word	0x08002629
 8001e84:	08002629 	.word	0x08002629
 8001e88:	08002629 	.word	0x08002629
 8001e8c:	08002629 	.word	0x08002629
 8001e90:	08002629 	.word	0x08002629
 8001e94:	08002629 	.word	0x08002629
 8001e98:	08002629 	.word	0x08002629
 8001e9c:	08001ed3 	.word	0x08001ed3
        	case '\"': APPEND_STRING("\\\""); break;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00e      	beq.n	8001ec8 <json_serialize_string+0x20c>
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4947      	ldr	r1, [pc, #284]	; (8001fcc <json_serialize_string+0x310>)
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f01c fa59 	bl	801e368 <memcpy>
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	4413      	add	r3, r2
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4413      	add	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
 8001ed0:	e3b7      	b.n	8002642 <json_serialize_string+0x986>
            case '\\': APPEND_STRING("\\\\"); break;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00e      	beq.n	8001efa <json_serialize_string+0x23e>
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	493b      	ldr	r1, [pc, #236]	; (8001fd0 <json_serialize_string+0x314>)
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f01c fa40 	bl	801e368 <memcpy>
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	e39e      	b.n	8002642 <json_serialize_string+0x986>
            case '\b': APPEND_STRING("\\b"); break;
 8001f04:	2302      	movs	r3, #2
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00e      	beq.n	8001f2c <json_serialize_string+0x270>
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	461a      	mov	r2, r3
 8001f12:	4930      	ldr	r1, [pc, #192]	; (8001fd4 <json_serialize_string+0x318>)
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f01c fa27 	bl	801e368 <memcpy>
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	e385      	b.n	8002642 <json_serialize_string+0x986>
            case '\f': APPEND_STRING("\\f"); break;
 8001f36:	2302      	movs	r3, #2
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00e      	beq.n	8001f5e <json_serialize_string+0x2a2>
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	461a      	mov	r2, r3
 8001f44:	4924      	ldr	r1, [pc, #144]	; (8001fd8 <json_serialize_string+0x31c>)
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f01c fa0e 	bl	801e368 <memcpy>
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	e36c      	b.n	8002642 <json_serialize_string+0x986>
            case '\n': APPEND_STRING("\\n"); break;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00e      	beq.n	8001f90 <json_serialize_string+0x2d4>
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	461a      	mov	r2, r3
 8001f76:	4919      	ldr	r1, [pc, #100]	; (8001fdc <json_serialize_string+0x320>)
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f01c f9f5 	bl	801e368 <memcpy>
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4413      	add	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
 8001f98:	e353      	b.n	8002642 <json_serialize_string+0x986>
            case '\r': APPEND_STRING("\\r"); break;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00e      	beq.n	8001fc2 <json_serialize_string+0x306>
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	490d      	ldr	r1, [pc, #52]	; (8001fe0 <json_serialize_string+0x324>)
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f01c f9dc 	bl	801e368 <memcpy>
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	701a      	strb	r2, [r3, #0]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	e33a      	b.n	8002642 <json_serialize_string+0x986>
 8001fcc:	0801f4e8 	.word	0x0801f4e8
 8001fd0:	0801f4ec 	.word	0x0801f4ec
 8001fd4:	0801f4f0 	.word	0x0801f4f0
 8001fd8:	0801f4f4 	.word	0x0801f4f4
 8001fdc:	0801f4f8 	.word	0x0801f4f8
 8001fe0:	0801f4fc 	.word	0x0801f4fc
            case '\t': APPEND_STRING("\\t"); break;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00e      	beq.n	800200c <json_serialize_string+0x350>
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4992      	ldr	r1, [pc, #584]	; (800223c <json_serialize_string+0x580>)
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f01c f9b7 	bl	801e368 <memcpy>
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4413      	add	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	e315      	b.n	8002642 <json_serialize_string+0x986>
            case '\x00': APPEND_STRING("\\u0000"); break;
 8002016:	2306      	movs	r3, #6
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00e      	beq.n	800203e <json_serialize_string+0x382>
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	461a      	mov	r2, r3
 8002024:	4986      	ldr	r1, [pc, #536]	; (8002240 <json_serialize_string+0x584>)
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f01c f99e 	bl	801e368 <memcpy>
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	4413      	add	r3, r2
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4413      	add	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	e2fc      	b.n	8002642 <json_serialize_string+0x986>
            case '\x01': APPEND_STRING("\\u0001"); break;
 8002048:	2306      	movs	r3, #6
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00e      	beq.n	8002070 <json_serialize_string+0x3b4>
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	461a      	mov	r2, r3
 8002056:	497b      	ldr	r1, [pc, #492]	; (8002244 <json_serialize_string+0x588>)
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f01c f985 	bl	801e368 <memcpy>
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4413      	add	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	e2e3      	b.n	8002642 <json_serialize_string+0x986>
            case '\x02': APPEND_STRING("\\u0002"); break;
 800207a:	2306      	movs	r3, #6
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00e      	beq.n	80020a2 <json_serialize_string+0x3e6>
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	461a      	mov	r2, r3
 8002088:	496f      	ldr	r1, [pc, #444]	; (8002248 <json_serialize_string+0x58c>)
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f01c f96c 	bl	801e368 <memcpy>
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4413      	add	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	e2ca      	b.n	8002642 <json_serialize_string+0x986>
            case '\x03': APPEND_STRING("\\u0003"); break;
 80020ac:	2306      	movs	r3, #6
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00e      	beq.n	80020d4 <json_serialize_string+0x418>
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4964      	ldr	r1, [pc, #400]	; (800224c <json_serialize_string+0x590>)
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f01c f953 	bl	801e368 <memcpy>
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4413      	add	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	e2b1      	b.n	8002642 <json_serialize_string+0x986>
            case '\x04': APPEND_STRING("\\u0004"); break;
 80020de:	2306      	movs	r3, #6
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00e      	beq.n	8002106 <json_serialize_string+0x44a>
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	461a      	mov	r2, r3
 80020ec:	4958      	ldr	r1, [pc, #352]	; (8002250 <json_serialize_string+0x594>)
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f01c f93a 	bl	801e368 <memcpy>
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	e298      	b.n	8002642 <json_serialize_string+0x986>
            case '\x05': APPEND_STRING("\\u0005"); break;
 8002110:	2306      	movs	r3, #6
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00e      	beq.n	8002138 <json_serialize_string+0x47c>
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	461a      	mov	r2, r3
 800211e:	494d      	ldr	r1, [pc, #308]	; (8002254 <json_serialize_string+0x598>)
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f01c f921 	bl	801e368 <memcpy>
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	4413      	add	r3, r2
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4413      	add	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	e27f      	b.n	8002642 <json_serialize_string+0x986>
            case '\x06': APPEND_STRING("\\u0006"); break;
 8002142:	2306      	movs	r3, #6
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00e      	beq.n	800216a <json_serialize_string+0x4ae>
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	461a      	mov	r2, r3
 8002150:	4941      	ldr	r1, [pc, #260]	; (8002258 <json_serialize_string+0x59c>)
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f01c f908 	bl	801e368 <memcpy>
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	4413      	add	r3, r2
 8002168:	607b      	str	r3, [r7, #4]
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4413      	add	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	e266      	b.n	8002642 <json_serialize_string+0x986>
            case '\x07': APPEND_STRING("\\u0007"); break;
 8002174:	2306      	movs	r3, #6
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00e      	beq.n	800219c <json_serialize_string+0x4e0>
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	461a      	mov	r2, r3
 8002182:	4936      	ldr	r1, [pc, #216]	; (800225c <json_serialize_string+0x5a0>)
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f01c f8ef 	bl	801e368 <memcpy>
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4413      	add	r3, r2
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	e24d      	b.n	8002642 <json_serialize_string+0x986>
            /* '\x08' duplicate: '\b' */
            /* '\x09' duplicate: '\t' */
            /* '\x0a' duplicate: '\n' */
            case '\x0b': APPEND_STRING("\\u000b"); break;
 80021a6:	2306      	movs	r3, #6
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00e      	beq.n	80021ce <json_serialize_string+0x512>
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	461a      	mov	r2, r3
 80021b4:	492a      	ldr	r1, [pc, #168]	; (8002260 <json_serialize_string+0x5a4>)
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f01c f8d6 	bl	801e368 <memcpy>
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	e234      	b.n	8002642 <json_serialize_string+0x986>
            /* '\x0c' duplicate: '\f' */
            /* '\x0d' duplicate: '\r' */
            case '\x0e': APPEND_STRING("\\u000e"); break;
 80021d8:	2306      	movs	r3, #6
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00e      	beq.n	8002200 <json_serialize_string+0x544>
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	461a      	mov	r2, r3
 80021e6:	491f      	ldr	r1, [pc, #124]	; (8002264 <json_serialize_string+0x5a8>)
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f01c f8bd 	bl	801e368 <memcpy>
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	4413      	add	r3, r2
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	e21b      	b.n	8002642 <json_serialize_string+0x986>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 800220a:	2306      	movs	r3, #6
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00e      	beq.n	8002232 <json_serialize_string+0x576>
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	461a      	mov	r2, r3
 8002218:	4913      	ldr	r1, [pc, #76]	; (8002268 <json_serialize_string+0x5ac>)
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f01c f8a4 	bl	801e368 <memcpy>
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	4413      	add	r3, r2
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4413      	add	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	e202      	b.n	8002642 <json_serialize_string+0x986>
 800223c:	0801f500 	.word	0x0801f500
 8002240:	0801f504 	.word	0x0801f504
 8002244:	0801f50c 	.word	0x0801f50c
 8002248:	0801f514 	.word	0x0801f514
 800224c:	0801f51c 	.word	0x0801f51c
 8002250:	0801f524 	.word	0x0801f524
 8002254:	0801f52c 	.word	0x0801f52c
 8002258:	0801f534 	.word	0x0801f534
 800225c:	0801f53c 	.word	0x0801f53c
 8002260:	0801f544 	.word	0x0801f544
 8002264:	0801f54c 	.word	0x0801f54c
 8002268:	0801f554 	.word	0x0801f554
            case '\x10': APPEND_STRING("\\u0010"); break;
 800226c:	2306      	movs	r3, #6
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00e      	beq.n	8002294 <json_serialize_string+0x5d8>
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	461a      	mov	r2, r3
 800227a:	4992      	ldr	r1, [pc, #584]	; (80024c4 <json_serialize_string+0x808>)
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f01c f873 	bl	801e368 <memcpy>
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	4413      	add	r3, r2
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4413      	add	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	e1d1      	b.n	8002642 <json_serialize_string+0x986>
            case '\x11': APPEND_STRING("\\u0011"); break;
 800229e:	2306      	movs	r3, #6
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00e      	beq.n	80022c6 <json_serialize_string+0x60a>
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	461a      	mov	r2, r3
 80022ac:	4986      	ldr	r1, [pc, #536]	; (80024c8 <json_serialize_string+0x80c>)
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f01c f85a 	bl	801e368 <memcpy>
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4413      	add	r3, r2
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	e1b8      	b.n	8002642 <json_serialize_string+0x986>
            case '\x12': APPEND_STRING("\\u0012"); break;
 80022d0:	2306      	movs	r3, #6
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00e      	beq.n	80022f8 <json_serialize_string+0x63c>
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	461a      	mov	r2, r3
 80022de:	497b      	ldr	r1, [pc, #492]	; (80024cc <json_serialize_string+0x810>)
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f01c f841 	bl	801e368 <memcpy>
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	4413      	add	r3, r2
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
 8002300:	e19f      	b.n	8002642 <json_serialize_string+0x986>
            case '\x13': APPEND_STRING("\\u0013"); break;
 8002302:	2306      	movs	r3, #6
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00e      	beq.n	800232a <json_serialize_string+0x66e>
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	461a      	mov	r2, r3
 8002310:	496f      	ldr	r1, [pc, #444]	; (80024d0 <json_serialize_string+0x814>)
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f01c f828 	bl	801e368 <memcpy>
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	4413      	add	r3, r2
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4413      	add	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	e186      	b.n	8002642 <json_serialize_string+0x986>
            case '\x14': APPEND_STRING("\\u0014"); break;
 8002334:	2306      	movs	r3, #6
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00e      	beq.n	800235c <json_serialize_string+0x6a0>
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	461a      	mov	r2, r3
 8002342:	4964      	ldr	r1, [pc, #400]	; (80024d4 <json_serialize_string+0x818>)
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f01c f80f 	bl	801e368 <memcpy>
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4413      	add	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
 8002364:	e16d      	b.n	8002642 <json_serialize_string+0x986>
            case '\x15': APPEND_STRING("\\u0015"); break;
 8002366:	2306      	movs	r3, #6
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00e      	beq.n	800238e <json_serialize_string+0x6d2>
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	461a      	mov	r2, r3
 8002374:	4958      	ldr	r1, [pc, #352]	; (80024d8 <json_serialize_string+0x81c>)
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f01b fff6 	bl	801e368 <memcpy>
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4413      	add	r3, r2
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	e154      	b.n	8002642 <json_serialize_string+0x986>
            case '\x16': APPEND_STRING("\\u0016"); break;
 8002398:	2306      	movs	r3, #6
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00e      	beq.n	80023c0 <json_serialize_string+0x704>
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	461a      	mov	r2, r3
 80023a6:	494d      	ldr	r1, [pc, #308]	; (80024dc <json_serialize_string+0x820>)
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f01b ffdd 	bl	801e368 <memcpy>
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	4413      	add	r3, r2
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4413      	add	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	e13b      	b.n	8002642 <json_serialize_string+0x986>
            case '\x17': APPEND_STRING("\\u0017"); break;
 80023ca:	2306      	movs	r3, #6
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00e      	beq.n	80023f2 <json_serialize_string+0x736>
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	461a      	mov	r2, r3
 80023d8:	4941      	ldr	r1, [pc, #260]	; (80024e0 <json_serialize_string+0x824>)
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f01b ffc4 	bl	801e368 <memcpy>
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4413      	add	r3, r2
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	e122      	b.n	8002642 <json_serialize_string+0x986>
            case '\x18': APPEND_STRING("\\u0018"); break;
 80023fc:	2306      	movs	r3, #6
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00e      	beq.n	8002424 <json_serialize_string+0x768>
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	461a      	mov	r2, r3
 800240a:	4936      	ldr	r1, [pc, #216]	; (80024e4 <json_serialize_string+0x828>)
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f01b ffab 	bl	801e368 <memcpy>
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4413      	add	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	e109      	b.n	8002642 <json_serialize_string+0x986>
            case '\x19': APPEND_STRING("\\u0019"); break;
 800242e:	2306      	movs	r3, #6
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00e      	beq.n	8002456 <json_serialize_string+0x79a>
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	461a      	mov	r2, r3
 800243c:	492a      	ldr	r1, [pc, #168]	; (80024e8 <json_serialize_string+0x82c>)
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f01b ff92 	bl	801e368 <memcpy>
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	e0f0      	b.n	8002642 <json_serialize_string+0x986>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 8002460:	2306      	movs	r3, #6
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00e      	beq.n	8002488 <json_serialize_string+0x7cc>
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	461a      	mov	r2, r3
 800246e:	491f      	ldr	r1, [pc, #124]	; (80024ec <json_serialize_string+0x830>)
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f01b ff79 	bl	801e368 <memcpy>
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	4413      	add	r3, r2
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4413      	add	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
 8002490:	e0d7      	b.n	8002642 <json_serialize_string+0x986>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 8002492:	2306      	movs	r3, #6
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00e      	beq.n	80024ba <json_serialize_string+0x7fe>
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	461a      	mov	r2, r3
 80024a0:	4913      	ldr	r1, [pc, #76]	; (80024f0 <json_serialize_string+0x834>)
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f01b ff60 	bl	801e368 <memcpy>
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4413      	add	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	e0be      	b.n	8002642 <json_serialize_string+0x986>
 80024c4:	0801f55c 	.word	0x0801f55c
 80024c8:	0801f564 	.word	0x0801f564
 80024cc:	0801f56c 	.word	0x0801f56c
 80024d0:	0801f574 	.word	0x0801f574
 80024d4:	0801f57c 	.word	0x0801f57c
 80024d8:	0801f584 	.word	0x0801f584
 80024dc:	0801f58c 	.word	0x0801f58c
 80024e0:	0801f594 	.word	0x0801f594
 80024e4:	0801f59c 	.word	0x0801f59c
 80024e8:	0801f5a4 	.word	0x0801f5a4
 80024ec:	0801f5ac 	.word	0x0801f5ac
 80024f0:	0801f5b4 	.word	0x0801f5b4
            case '\x1c': APPEND_STRING("\\u001c"); break;
 80024f4:	2306      	movs	r3, #6
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00e      	beq.n	800251c <json_serialize_string+0x860>
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	461a      	mov	r2, r3
 8002502:	4962      	ldr	r1, [pc, #392]	; (800268c <json_serialize_string+0x9d0>)
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f01b ff2f 	bl	801e368 <memcpy>
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
 8002524:	e08d      	b.n	8002642 <json_serialize_string+0x986>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 8002526:	2306      	movs	r3, #6
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00e      	beq.n	800254e <json_serialize_string+0x892>
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	461a      	mov	r2, r3
 8002534:	4956      	ldr	r1, [pc, #344]	; (8002690 <json_serialize_string+0x9d4>)
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f01b ff16 	bl	801e368 <memcpy>
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	4413      	add	r3, r2
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	e074      	b.n	8002642 <json_serialize_string+0x986>
            case '\x1e': APPEND_STRING("\\u001e"); break;
 8002558:	2306      	movs	r3, #6
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00e      	beq.n	8002580 <json_serialize_string+0x8c4>
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	461a      	mov	r2, r3
 8002566:	494b      	ldr	r1, [pc, #300]	; (8002694 <json_serialize_string+0x9d8>)
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f01b fefd 	bl	801e368 <memcpy>
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	4413      	add	r3, r2
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4413      	add	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	e05b      	b.n	8002642 <json_serialize_string+0x986>
            case '\x1f': APPEND_STRING("\\u001f"); break;
 800258a:	2306      	movs	r3, #6
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00e      	beq.n	80025b2 <json_serialize_string+0x8f6>
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	461a      	mov	r2, r3
 8002598:	493f      	ldr	r1, [pc, #252]	; (8002698 <json_serialize_string+0x9dc>)
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f01b fee4 	bl	801e368 <memcpy>
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	4413      	add	r3, r2
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4413      	add	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	e042      	b.n	8002642 <json_serialize_string+0x986>
            case '/':
                if (parson_escape_slashes) {
 80025bc:	4b37      	ldr	r3, [pc, #220]	; (800269c <json_serialize_string+0x9e0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d018      	beq.n	80025f6 <json_serialize_string+0x93a>
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 80025c4:	2302      	movs	r3, #2
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00e      	beq.n	80025ec <json_serialize_string+0x930>
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4933      	ldr	r1, [pc, #204]	; (80026a0 <json_serialize_string+0x9e4>)
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f01b fec7 	bl	801e368 <memcpy>
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	4413      	add	r3, r2
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	607b      	str	r3, [r7, #4]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4413      	add	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
                } else {
                    APPEND_STRING("/");
                }
                break;
 80025f4:	e025      	b.n	8002642 <json_serialize_string+0x986>
                    APPEND_STRING("/");
 80025f6:	2301      	movs	r3, #1
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00e      	beq.n	800261e <json_serialize_string+0x962>
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	461a      	mov	r2, r3
 8002604:	4927      	ldr	r1, [pc, #156]	; (80026a4 <json_serialize_string+0x9e8>)
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f01b feae 	bl	801e368 <memcpy>
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	4413      	add	r3, r2
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4413      	add	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
                break;
 8002626:	e00c      	b.n	8002642 <json_serialize_string+0x986>
            default:
                if (buf != NULL) {
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <json_serialize_string+0x97e>
                    buf[0] = c;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	7dfa      	ldrb	r2, [r7, #23]
 8002632:	701a      	strb	r2, [r3, #0]
                    buf += 1;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3301      	adds	r3, #1
 8002638:	607b      	str	r3, [r7, #4]
                }
                written_total += 1;
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	3301      	adds	r3, #1
 800263e:	61bb      	str	r3, [r7, #24]
                break;
 8002640:	bf00      	nop
    for (i = 0; i < len; i++) {
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3301      	adds	r3, #1
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	429a      	cmp	r2, r3
 800264e:	f4ff ab60 	bcc.w	8001d12 <json_serialize_string+0x56>
        }
    }
    // +BCH
	//APPEND_STRING("\"");
	APPEND_STRING("\\\"");
 8002652:	2302      	movs	r3, #2
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00e      	beq.n	800267a <json_serialize_string+0x9be>
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	461a      	mov	r2, r3
 8002660:	4911      	ldr	r1, [pc, #68]	; (80026a8 <json_serialize_string+0x9ec>)
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f01b fe80 	bl	801e368 <memcpy>
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4413      	add	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
    return written_total;
 8002682:	69bb      	ldr	r3, [r7, #24]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3720      	adds	r7, #32
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	0801f5bc 	.word	0x0801f5bc
 8002690:	0801f5c4 	.word	0x0801f5c4
 8002694:	0801f5cc 	.word	0x0801f5cc
 8002698:	0801f5d4 	.word	0x0801f5d4
 800269c:	20000010 	.word	0x20000010
 80026a0:	0801f5dc 	.word	0x0801f5dc
 80026a4:	0801f5e0 	.word	0x0801f5e0
 80026a8:	0801f4e8 	.word	0x0801f4e8

080026ac <json_object_get_count>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_dotget_value(object, name));
}

size_t json_object_get_count(const JSON_Object *object) {
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <json_object_get_count+0x14>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	e000      	b.n	80026c2 <json_object_get_count+0x16>
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <json_object_get_name>:

const char * json_object_get_name(const JSON_Object *object, size_t index) {
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <json_object_get_name+0x1e>
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ffe4 	bl	80026ac <json_object_get_count>
 80026e4:	4602      	mov	r2, r0
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d301      	bcc.n	80026f0 <json_object_get_name+0x22>
        return NULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e005      	b.n	80026fc <json_object_get_name+0x2e>
    }
    return object->names[index];
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <json_object_get_value_at>:

JSON_Value * json_object_get_value_at(const JSON_Object *object, size_t index) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d006      	beq.n	8002722 <json_object_get_value_at+0x1e>
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ffc9 	bl	80026ac <json_object_get_count>
 800271a:	4602      	mov	r2, r0
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4293      	cmp	r3, r2
 8002720:	d301      	bcc.n	8002726 <json_object_get_value_at+0x22>
        return NULL;
 8002722:	2300      	movs	r3, #0
 8002724:	e005      	b.n	8002732 <json_object_get_value_at+0x2e>
    }
    return object->values[index];
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	681b      	ldr	r3, [r3, #0]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <json_object_get_wrapping_value>:

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
    if (!object) {
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <json_object_get_wrapping_value+0x12>
        return NULL;
 8002748:	2300      	movs	r3, #0
 800274a:	e001      	b.n	8002750 <json_object_get_wrapping_value+0x16>
    }
    return object->wrapping_value;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <json_array_get_value>:
    JSON_Value *val = json_object_dotget_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
    if (array == NULL || index >= json_array_get_count(array)) {
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d006      	beq.n	800277a <json_array_get_value+0x1e>
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f810 	bl	8002792 <json_array_get_count>
 8002772:	4602      	mov	r2, r0
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	4293      	cmp	r3, r2
 8002778:	d301      	bcc.n	800277e <json_array_get_value+0x22>
        return NULL;
 800277a:	2300      	movs	r3, #0
 800277c:	e005      	b.n	800278a <json_array_get_value+0x2e>
    }
    return array->items[index];
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	681b      	ldr	r3, [r3, #0]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <json_array_get_count+0x14>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	e000      	b.n	80027a8 <json_array_get_count+0x16>
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <json_value_get_type>:
    }
    return array->wrapping_value;
}

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <json_value_get_type+0x14>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	e001      	b.n	80027cc <json_value_get_type+0x18>
 80027c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ffe7 	bl	80027b4 <json_value_get_type>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d102      	bne.n	80027f2 <json_value_get_object+0x1a>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	e000      	b.n	80027f4 <json_value_get_object+0x1c>
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ffd5 	bl	80027b4 <json_value_get_type>
 800280a:	4603      	mov	r3, r0
 800280c:	2b05      	cmp	r3, #5
 800280e:	d102      	bne.n	8002816 <json_value_get_array+0x1a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	e000      	b.n	8002818 <json_value_get_array+0x1c>
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <json_value_get_string_desc>:

static const JSON_String * json_value_get_string_desc(const JSON_Value *value) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? &value->value.string : NULL;
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ffc3 	bl	80027b4 <json_value_get_type>
 800282e:	4603      	mov	r3, r0
 8002830:	2b02      	cmp	r3, #2
 8002832:	d102      	bne.n	800283a <json_value_get_string_desc+0x1a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3308      	adds	r3, #8
 8002838:	e000      	b.n	800283c <json_value_get_string_desc+0x1c>
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ffe7 	bl	8002820 <json_value_get_string_desc>
 8002852:	60f8      	str	r0, [r7, #12]
    return str ? str->chars : NULL;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <json_value_get_string+0x1c>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	e000      	b.n	8002862 <json_value_get_string+0x1e>
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <json_value_get_string_len>:

size_t json_value_get_string_len(const JSON_Value *value) {
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ffd4 	bl	8002820 <json_value_get_string_desc>
 8002878:	60f8      	str	r0, [r7, #12]
    return str ? str->length : 0;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <json_value_get_string_len+0x1c>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	e000      	b.n	8002888 <json_value_get_string_len+0x1e>
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <json_value_get_number>:

double json_value_get_number(const JSON_Value *value) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff8b 	bl	80027b4 <json_value_get_type>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d103      	bne.n	80028ac <json_value_get_number+0x1c>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80028aa:	e003      	b.n	80028b4 <json_value_get_number+0x24>
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	ec43 2b17 	vmov	d7, r2, r3
}
 80028b8:	eeb0 0a47 	vmov.f32	s0, s14
 80028bc:	eef0 0a67 	vmov.f32	s1, s15
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <json_value_get_boolean>:

int json_value_get_boolean(const JSON_Value *value) {
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ff70 	bl	80027b4 <json_value_get_type>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d102      	bne.n	80028e0 <json_value_get_boolean+0x1a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	e001      	b.n	80028e4 <json_value_get_boolean+0x1e>
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff5d 	bl	80027b4 <json_value_get_type>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b05      	cmp	r3, #5
 80028fe:	d012      	beq.n	8002926 <json_value_free+0x3a>
 8002900:	2b05      	cmp	r3, #5
 8002902:	dc16      	bgt.n	8002932 <json_value_free+0x46>
 8002904:	2b02      	cmp	r3, #2
 8002906:	d007      	beq.n	8002918 <json_value_free+0x2c>
 8002908:	2b04      	cmp	r3, #4
 800290a:	d112      	bne.n	8002932 <json_value_free+0x46>
        case JSONObject:
            json_object_free(value->value.object);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe fe01 	bl	8001518 <json_object_free>
            break;
 8002916:	e00d      	b.n	8002934 <json_value_free+0x48>
        case JSONString:
            parson_free(value->value.string.chars);
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <json_value_free+0x58>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6892      	ldr	r2, [r2, #8]
 8002920:	4610      	mov	r0, r2
 8002922:	4798      	blx	r3
            break;
 8002924:	e006      	b.n	8002934 <json_value_free+0x48>
        case JSONArray:
            json_array_free(value->value.array);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe fe08 	bl	8001540 <json_array_free>
            break;
 8002930:	e000      	b.n	8002934 <json_value_free+0x48>
        default:
            break;
 8002932:	bf00      	nop
    }
    parson_free(value);
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <json_value_free+0x58>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	2000000c 	.word	0x2000000c

08002948 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 800294e:	4b12      	ldr	r3, [pc, #72]	; (8002998 <json_value_init_object+0x50>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2010      	movs	r0, #16
 8002954:	4798      	blx	r3
 8002956:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <json_value_init_object+0x1a>
        return NULL;
 800295e:	2300      	movs	r3, #0
 8002960:	e016      	b.n	8002990 <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2204      	movs	r2, #4
 800296c:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_make(new_value);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fe fb24 	bl	8000fbc <json_object_make>
 8002974:	4602      	mov	r2, r0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d105      	bne.n	800298e <json_value_init_object+0x46>
        parson_free(new_value);
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <json_value_init_object+0x54>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
        return NULL;
 800298a:	2300      	movs	r3, #0
 800298c:	e000      	b.n	8002990 <json_value_init_object+0x48>
    }
    return new_value;
 800298e:	687b      	ldr	r3, [r7, #4]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000008 	.word	0x20000008
 800299c:	2000000c 	.word	0x2000000c

080029a0 <json_value_init_number>:
        parson_free(copy);
    }
    return value;
}

JSON_Value * json_value_init_number(double number) {
 80029a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 80029ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029b6:	f7fd fe7f 	bl	80006b8 <__aeabi_dcmpun>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d121      	bne.n	8002a04 <json_value_init_number+0x64>
 80029c0:	683c      	ldr	r4, [r7, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80029c8:	2301      	movs	r3, #1
 80029ca:	461e      	mov	r6, r3
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <json_value_init_number+0x9c>)
 80029d2:	4620      	mov	r0, r4
 80029d4:	4629      	mov	r1, r5
 80029d6:	f7fd fe6f 	bl	80006b8 <__aeabi_dcmpun>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10b      	bne.n	80029f8 <json_value_init_number+0x58>
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <json_value_init_number+0x9c>)
 80029e6:	4620      	mov	r0, r4
 80029e8:	4629      	mov	r1, r5
 80029ea:	f7fd fe47 	bl	800067c <__aeabi_dcmple>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <json_value_init_number+0x58>
 80029f4:	2300      	movs	r3, #0
 80029f6:	461e      	mov	r6, r3
 80029f8:	b2f3      	uxtb	r3, r6
 80029fa:	f083 0301 	eor.w	r3, r3, #1
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <json_value_init_number+0x68>
        return NULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e015      	b.n	8002a34 <json_value_init_number+0x94>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <json_value_init_number+0xa0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2010      	movs	r0, #16
 8002a0e:	4798      	blx	r3
 8002a10:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <json_value_init_number+0x7c>
        return NULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e00b      	b.n	8002a34 <json_value_init_number+0x94>
    }
    new_value->parent = NULL;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2203      	movs	r2, #3
 8002a26:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 8002a28:	68f9      	ldr	r1, [r7, #12]
 8002a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a2e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return new_value;
 8002a32:	68fb      	ldr	r3, [r7, #12]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a3c:	7fefffff 	.word	0x7fefffff
 8002a40:	20000008 	.word	0x20000008

08002a44 <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b096      	sub	sp, #88	; 0x58
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	6078      	str	r0, [r7, #4]
    char num_buf[PARSON_NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, PARSON_FALSE, num_buf);
 8002a4c:	f107 030c 	add.w	r3, r7, #12
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2300      	movs	r3, #0
 8002a54:	2200      	movs	r2, #0
 8002a56:	2100      	movs	r1, #0
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7fe fd99 	bl	8001590 <json_serialize_to_buffer_r>
 8002a5e:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res) + 1;
 8002a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	db02      	blt.n	8002a6c <json_serialization_size+0x28>
 8002a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a68:	3301      	adds	r3, #1
 8002a6a:	e000      	b.n	8002a6e <json_serialization_size+0x2a>
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3750      	adds	r7, #80	; 0x50
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b088      	sub	sp, #32
 8002a7a:	af02      	add	r7, sp, #8
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
    int written = -1;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295
 8002a86:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size(value);
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f7ff ffdb 	bl	8002a44 <json_serialization_size>
 8002a8e:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <json_serialize_to_buffer+0x28>
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d202      	bcs.n	8002aa4 <json_serialize_to_buffer+0x2e>
        return JSONFailure;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa2:	e00f      	b.n	8002ac4 <json_serialize_to_buffer+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, PARSON_FALSE, NULL);
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2200      	movs	r2, #0
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f7fe fd6e 	bl	8001590 <json_serialize_to_buffer_r>
 8002ab4:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	da02      	bge.n	8002ac2 <json_serialize_to_buffer+0x4c>
        return JSONFailure;
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac0:	e000      	b.n	8002ac4 <json_serialize_to_buffer+0x4e>
    }
    return JSONSuccess;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad8:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size(value);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ffb2 	bl	8002a44 <json_serialization_size>
 8002ae0:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <json_serialize_to_string+0x24>
        return NULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e018      	b.n	8002b22 <json_serialize_to_string+0x56>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 8002af0:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <json_serialize_to_string+0x60>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6938      	ldr	r0, [r7, #16]
 8002af6:	4798      	blx	r3
 8002af8:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <json_serialize_to_string+0x38>
        return NULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	e00e      	b.n	8002b22 <json_serialize_to_string+0x56>
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	68f9      	ldr	r1, [r7, #12]
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ffb4 	bl	8002a76 <json_serialize_to_buffer>
 8002b0e:	6178      	str	r0, [r7, #20]
    if (serialization_result != JSONSuccess) {
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d004      	beq.n	8002b20 <json_serialize_to_string+0x54>
        json_free_serialized_string(buf);
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f80a 	bl	8002b30 <json_free_serialized_string>
        return NULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e000      	b.n	8002b22 <json_serialize_to_string+0x56>
    }
    return buf;
 8002b20:	68fb      	ldr	r3, [r7, #12]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000008 	.word	0x20000008

08002b30 <json_free_serialized_string>:
        return NULL;
    }
    return buf;
}

void json_free_serialized_string(char *string) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    parson_free(string);
 8002b38:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <json_free_serialized_string+0x18>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	4798      	blx	r3
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	2000000c 	.word	0x2000000c

08002b4c <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08e      	sub	sp, #56	; 0x38
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    parson_bool_t found = PARSON_FALSE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
    size_t cell_ix = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t item_ix = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
    JSON_Value *old_value = NULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	623b      	str	r3, [r7, #32]
    char *key_copy = NULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61fb      	str	r3, [r7, #28]

    if (!object || !name || !value || value->parent) {
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <json_object_set_value+0x3e>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d006      	beq.n	8002b8a <json_object_set_value+0x3e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <json_object_set_value+0x3e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <json_object_set_value+0x44>
        return JSONFailure;
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8e:	e095      	b.n	8002cbc <json_object_set_value+0x170>
    }
    hash = hash_string(name, strlen(name));
 8002b90:	68b8      	ldr	r0, [r7, #8]
 8002b92:	f7fd faf5 	bl	8000180 <strlen>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4619      	mov	r1, r3
 8002b9a:	68b8      	ldr	r0, [r7, #8]
 8002b9c:	f7fe f9e1 	bl	8000f62 <hash_string>
 8002ba0:	62b8      	str	r0, [r7, #40]	; 0x28
    found = PARSON_FALSE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8002ba6:	68b8      	ldr	r0, [r7, #8]
 8002ba8:	f7fd faea 	bl	8000180 <strlen>
 8002bac:	4602      	mov	r2, r0
 8002bae:	f107 0314 	add.w	r3, r7, #20
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f7fe fbb4 	bl	8001326 <json_object_get_cell_ix>
 8002bbe:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (found) {
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d01f      	beq.n	8002c06 <json_object_set_value+0xba>
        item_ix = object->cells[cell_ix];
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
        old_value = object->values[item_ix];
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	623b      	str	r3, [r7, #32]
        json_value_free(old_value);
 8002be2:	6a38      	ldr	r0, [r7, #32]
 8002be4:	f7ff fe82 	bl	80028ec <json_value_free>
        object->values[item_ix] = value;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	601a      	str	r2, [r3, #0]
        value->parent = json_object_get_wrapping_value(object);
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f7ff fd9f 	bl	800273a <json_object_get_wrapping_value>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	601a      	str	r2, [r3, #0]
        return JSONSuccess;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e05a      	b.n	8002cbc <json_object_set_value+0x170>
    }
    if (object->count >= object->item_capacity) {
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d316      	bcc.n	8002c40 <json_object_set_value+0xf4>
        JSON_Status res = json_object_grow_and_rehash(object);
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f7fe fb1c 	bl	8001250 <json_object_grow_and_rehash>
 8002c18:	61b8      	str	r0, [r7, #24]
        if (res != JSONSuccess) {
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <json_object_set_value+0xda>
            return JSONFailure;
 8002c20:	f04f 33ff 	mov.w	r3, #4294967295
 8002c24:	e04a      	b.n	8002cbc <json_object_set_value+0x170>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8002c26:	68b8      	ldr	r0, [r7, #8]
 8002c28:	f7fd faaa 	bl	8000180 <strlen>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	f107 0314 	add.w	r3, r7, #20
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f7fe fb74 	bl	8001326 <json_object_get_cell_ix>
 8002c3e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    key_copy = parson_strdup(name);
 8002c40:	68b8      	ldr	r0, [r7, #8]
 8002c42:	f7fe f97d 	bl	8000f40 <parson_strdup>
 8002c46:	61f8      	str	r0, [r7, #28]
    if (!key_copy) {
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <json_object_set_value+0x108>
        return JSONFailure;
 8002c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c52:	e033      	b.n	8002cbc <json_object_set_value+0x170>
    }
    object->names[object->count] = key_copy;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	6992      	ldr	r2, [r2, #24]
 8002c72:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c92:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ca2:	601a      	str	r2, [r3, #0]
    object->count++;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff fd43 	bl	800273a <json_object_get_wrapping_value>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3730      	adds	r7, #48	; 0x30
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <json_object_set_number>:
        json_value_free(value);
    }
    return status;
}

JSON_Status json_object_set_number(JSON_Object *object, const char *name, double number) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 8002cd2:	ed97 0b00 	vldr	d0, [r7]
 8002cd6:	f7ff fe63 	bl	80029a0 <json_value_init_number>
 8002cda:	6178      	str	r0, [r7, #20]
    JSON_Status status = json_object_set_value(object, name, value);
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f7ff ff33 	bl	8002b4c <json_object_set_value>
 8002ce6:	6138      	str	r0, [r7, #16]
    if (status != JSONSuccess) {
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <json_object_set_number+0x30>
        json_value_free(value);
 8002cee:	6978      	ldr	r0, [r7, #20]
 8002cf0:	f7ff fdfc 	bl	80028ec <json_value_free>
    }
    return status;
 8002cf4:	693b      	ldr	r3, [r7, #16]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d02:	bf00      	nop
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d10:	e7fe      	b.n	8002d10 <NMI_Handler+0x4>

08002d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d16:	e7fe      	b.n	8002d16 <HardFault_Handler+0x4>

08002d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d1c:	e7fe      	b.n	8002d1c <MemManage_Handler+0x4>

08002d1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d22:	e7fe      	b.n	8002d22 <BusFault_Handler+0x4>

08002d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d28:	e7fe      	b.n	8002d28 <UsageFault_Handler+0x4>

08002d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d58:	f014 fe48 	bl	80179ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d5c:	bf00      	nop
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8002d64:	2001      	movs	r0, #1
 8002d66:	f015 fd6b 	bl	8018840 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002d72:	2010      	movs	r0, #16
 8002d74:	f015 fd64 	bl	8018840 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002d80:	4802      	ldr	r0, [pc, #8]	; (8002d8c <DMA1_Channel1_IRQHandler+0x10>)
 8002d82:	f015 f974 	bl	801806e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000268 	.word	0x20000268

08002d90 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	607b      	str	r3, [r7, #4]
	uint32_t temp;
	tmp_flag = __HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_IDLE);
 8002d9a:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <LPUART1_IRQHandler+0xa8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET)) {
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d039      	beq.n	8002e2a <LPUART1_IRQHandler+0x9a>
		__HAL_UART_CLEAR_IDLEFLAG(&hlpuart1);
 8002db6:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <LPUART1_IRQHandler+0xa8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2210      	movs	r2, #16
 8002dbc:	621a      	str	r2, [r3, #32]
		temp = hlpuart1.Instance->ISR;
 8002dbe:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <LPUART1_IRQHandler+0xa8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	603b      	str	r3, [r7, #0]
		temp = hlpuart1.Instance->RDR;
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <LPUART1_IRQHandler+0xa8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	603b      	str	r3, [r7, #0]
		//HAL_UART_DMAStop(&hlpuart1);
		temp = hlpuart1.hdmarx->Instance->CNDTR;
 8002dce:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <LPUART1_IRQHandler+0xa8>)
 8002dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
		// reset index dma buffer to 1024 (countdown)
		__HAL_DMA_DISABLE(hlpuart1.hdmarx);
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <LPUART1_IRQHandler+0xa8>)
 8002ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <LPUART1_IRQHandler+0xa8>)
 8002de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
		hlpuart1.hdmarx->Instance->CNDTR = UART_ESP32_MAX_RECVLEN;
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <LPUART1_IRQHandler+0xa8>)
 8002df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dfe:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(hlpuart1.hdmarx);
 8002e00:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <LPUART1_IRQHandler+0xa8>)
 8002e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <LPUART1_IRQHandler+0xa8>)
 8002e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
		UART_ESP32_RxLen = UART_ESP32_MAX_RECVLEN - temp;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	425b      	negs	r3, r3
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <LPUART1_IRQHandler+0xac>)
 8002e22:	701a      	strb	r2, [r3, #0]
		UART_ESP32_RecvEndFlag = 1;
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <LPUART1_IRQHandler+0xb0>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002e2a:	4803      	ldr	r0, [pc, #12]	; (8002e38 <LPUART1_IRQHandler+0xa8>)
 8002e2c:	f018 fc08 	bl	801b640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	200001d4 	.word	0x200001d4
 8002e3c:	200097b4 	.word	0x200097b4
 8002e40:	200097b5 	.word	0x200097b5

08002e44 <LL_AHB2_GRP1_EnableClock>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4013      	ands	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e68:	68fb      	ldr	r3, [r7, #12]
}
 8002e6a:	bf00      	nop
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4013      	ands	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	658b      	str	r3, [r1, #88]	; 0x58
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002eda:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <BSP_I2C1_Init+0x70>)
 8002edc:	4a19      	ldr	r2, [pc, #100]	; (8002f44 <BSP_I2C1_Init+0x74>)
 8002ede:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002ee0:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <BSP_I2C1_Init+0x78>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	4918      	ldr	r1, [pc, #96]	; (8002f48 <BSP_I2C1_Init+0x78>)
 8002ee8:	600a      	str	r2, [r1, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d122      	bne.n	8002f34 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002eee:	4814      	ldr	r0, [pc, #80]	; (8002f40 <BSP_I2C1_Init+0x70>)
 8002ef0:	f015 ff7a 	bl	8018de8 <HAL_I2C_GetState>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d11c      	bne.n	8002f34 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002efa:	4811      	ldr	r0, [pc, #68]	; (8002f40 <BSP_I2C1_Init+0x70>)
 8002efc:	f000 f8ee 	bl	80030dc <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d116      	bne.n	8002f34 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002f06:	480e      	ldr	r0, [pc, #56]	; (8002f40 <BSP_I2C1_Init+0x70>)
 8002f08:	f000 f8a4 	bl	8003054 <MX_I2C1_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002f12:	f06f 0307 	mvn.w	r3, #7
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	e00c      	b.n	8002f34 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4808      	ldr	r0, [pc, #32]	; (8002f40 <BSP_I2C1_Init+0x70>)
 8002f1e:	f016 fa0f 	bl	8019340 <HAL_I2CEx_ConfigAnalogFilter>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002f28:	f06f 0307 	mvn.w	r3, #7
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	e001      	b.n	8002f34 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002f34:	687b      	ldr	r3, [r7, #4]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	2000012c 	.word	0x2000012c
 8002f44:	40005400 	.word	0x40005400
 8002f48:	20000180 	.word	0x20000180

08002f4c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002f52:	2300      	movs	r3, #0
 8002f54:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002f56:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <BSP_I2C1_DeInit+0x48>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d014      	beq.n	8002f88 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <BSP_I2C1_DeInit+0x48>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	4a0b      	ldr	r2, [pc, #44]	; (8002f94 <BSP_I2C1_DeInit+0x48>)
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <BSP_I2C1_DeInit+0x48>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10b      	bne.n	8002f88 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002f70:	4809      	ldr	r0, [pc, #36]	; (8002f98 <BSP_I2C1_DeInit+0x4c>)
 8002f72:	f000 f8f7 	bl	8003164 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002f76:	4808      	ldr	r0, [pc, #32]	; (8002f98 <BSP_I2C1_DeInit+0x4c>)
 8002f78:	f015 fd09 	bl	801898e <HAL_I2C_DeInit>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002f82:	f06f 0307 	mvn.w	r3, #7
 8002f86:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002f88:	687b      	ldr	r3, [r7, #4]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000180 	.word	0x20000180
 8002f98:	2000012c 	.word	0x2000012c

08002f9c <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	6039      	str	r1, [r7, #0]
 8002fa6:	80fb      	strh	r3, [r7, #6]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002fb0:	88bb      	ldrh	r3, [r7, #4]
 8002fb2:	88f9      	ldrh	r1, [r7, #6]
 8002fb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fb8:	9200      	str	r2, [sp, #0]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	480b      	ldr	r0, [pc, #44]	; (8002fec <BSP_I2C1_Send+0x50>)
 8002fbe:	f015 fd29 	bl	8018a14 <HAL_I2C_Master_Transmit>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00c      	beq.n	8002fe2 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8002fc8:	4808      	ldr	r0, [pc, #32]	; (8002fec <BSP_I2C1_Send+0x50>)
 8002fca:	f015 ff1b 	bl	8018e04 <HAL_I2C_GetError>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d003      	beq.n	8002fdc <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002fd4:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	e002      	b.n	8002fe2 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002fdc:	f06f 0303 	mvn.w	r3, #3
 8002fe0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	2000012c 	.word	0x2000012c

08002ff0 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	6039      	str	r1, [r7, #0]
 8002ffa:	80fb      	strh	r3, [r7, #6]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8003004:	88bb      	ldrh	r3, [r7, #4]
 8003006:	88f9      	ldrh	r1, [r7, #6]
 8003008:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800300c:	9200      	str	r2, [sp, #0]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	480b      	ldr	r0, [pc, #44]	; (8003040 <BSP_I2C1_Recv+0x50>)
 8003012:	f015 fdf3 	bl	8018bfc <HAL_I2C_Master_Receive>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00c      	beq.n	8003036 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800301c:	4808      	ldr	r0, [pc, #32]	; (8003040 <BSP_I2C1_Recv+0x50>)
 800301e:	f015 fef1 	bl	8018e04 <HAL_I2C_GetError>
 8003022:	4603      	mov	r3, r0
 8003024:	2b04      	cmp	r3, #4
 8003026:	d003      	beq.n	8003030 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003028:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	e002      	b.n	8003036 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003030:	f06f 0303 	mvn.w	r3, #3
 8003034:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8003036:	68fb      	ldr	r3, [r7, #12]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	2000012c 	.word	0x2000012c

08003044 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003048:	f014 fce4 	bl	8017a14 <HAL_GetTick>
 800304c:	4603      	mov	r3, r0
}
 800304e:	4618      	mov	r0, r3
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a1c      	ldr	r2, [pc, #112]	; (80030d4 <MX_I2C1_Init+0x80>)
 8003064:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a1b      	ldr	r2, [pc, #108]	; (80030d8 <MX_I2C1_Init+0x84>)
 800306a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f015 fbea 	bl	8018870 <HAL_I2C_Init>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80030a6:	2100      	movs	r1, #0
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f016 f949 	bl	8019340 <HAL_I2CEx_ConfigAnalogFilter>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80030b8:	2100      	movs	r1, #0
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f016 f98b 	bl	80193d6 <HAL_I2CEx_ConfigDigitalFilter>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40005400 	.word	0x40005400
 80030d8:	00707cbb 	.word	0x00707cbb

080030dc <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b09c      	sub	sp, #112	; 0x70
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030e4:	f107 030c 	add.w	r3, r7, #12
 80030e8:	2250      	movs	r2, #80	; 0x50
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f01b f963 	bl	801e3b8 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030f2:	2304      	movs	r3, #4
 80030f4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80030f6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80030fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80030fc:	f107 030c 	add.w	r3, r7, #12
 8003100:	4618      	mov	r0, r3
 8003102:	f017 fe0b 	bl	801ad1c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003106:	2002      	movs	r0, #2
 8003108:	f7ff fe9c 	bl	8002e44 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800310c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003110:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003112:	2312      	movs	r3, #18
 8003114:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311a:	2300      	movs	r3, #0
 800311c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800311e:	2304      	movs	r3, #4
 8003120:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003122:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003126:	4619      	mov	r1, r3
 8003128:	480d      	ldr	r0, [pc, #52]	; (8003160 <I2C1_MspInit+0x84>)
 800312a:	f015 f8f1 	bl	8018310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800312e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003132:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003134:	2312      	movs	r3, #18
 8003136:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313c:	2300      	movs	r3, #0
 800313e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8003140:	2304      	movs	r3, #4
 8003142:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003144:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003148:	4619      	mov	r1, r3
 800314a:	4805      	ldr	r0, [pc, #20]	; (8003160 <I2C1_MspInit+0x84>)
 800314c:	f015 f8e0 	bl	8018310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003150:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003154:	f7ff fe8f 	bl	8002e76 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8003158:	bf00      	nop
 800315a:	3770      	adds	r7, #112	; 0x70
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	48000400 	.word	0x48000400

08003164 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800316c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003170:	f7ff fe9a 	bl	8002ea8 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8003174:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003178:	4805      	ldr	r0, [pc, #20]	; (8003190 <I2C1_MspDeInit+0x2c>)
 800317a:	f015 fa39 	bl	80185f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800317e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003182:	4803      	ldr	r0, [pc, #12]	; (8003190 <I2C1_MspDeInit+0x2c>)
 8003184:	f015 fa34 	bl	80185f0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	48000400 	.word	0x48000400

08003194 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	e00a      	b.n	80031bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031a6:	f3af 8000 	nop.w
 80031aa:	4601      	mov	r1, r0
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	60ba      	str	r2, [r7, #8]
 80031b2:	b2ca      	uxtb	r2, r1
 80031b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	3301      	adds	r3, #1
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	dbf0      	blt.n	80031a6 <_read+0x12>
  }

  return len;
 80031c4:	687b      	ldr	r3, [r7, #4]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <_close>:
  }
  return len;
}

int _close(int file)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031f6:	605a      	str	r2, [r3, #4]
  return 0;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <_isatty>:

int _isatty(int file)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800320e:	2301      	movs	r3, #1
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003240:	4a14      	ldr	r2, [pc, #80]	; (8003294 <_sbrk+0x5c>)
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <_sbrk+0x60>)
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800324c:	4b13      	ldr	r3, [pc, #76]	; (800329c <_sbrk+0x64>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <_sbrk+0x64>)
 8003256:	4a12      	ldr	r2, [pc, #72]	; (80032a0 <_sbrk+0x68>)
 8003258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <_sbrk+0x64>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	429a      	cmp	r2, r3
 8003266:	d207      	bcs.n	8003278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003268:	f01a fe24 	bl	801deb4 <__errno>
 800326c:	4603      	mov	r3, r0
 800326e:	220c      	movs	r2, #12
 8003270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003272:	f04f 33ff 	mov.w	r3, #4294967295
 8003276:	e009      	b.n	800328c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <_sbrk+0x64>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800327e:	4b07      	ldr	r3, [pc, #28]	; (800329c <_sbrk+0x64>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4413      	add	r3, r2
 8003286:	4a05      	ldr	r2, [pc, #20]	; (800329c <_sbrk+0x64>)
 8003288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800328a:	68fb      	ldr	r3, [r7, #12]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20030000 	.word	0x20030000
 8003298:	00000400 	.word	0x00000400
 800329c:	20000184 	.word	0x20000184
 80032a0:	20009830 	.word	0x20009830

080032a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80032a8:	4b24      	ldr	r3, [pc, #144]	; (800333c <SystemInit+0x98>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	4a23      	ldr	r2, [pc, #140]	; (800333c <SystemInit+0x98>)
 80032b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80032b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80032c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032cc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80032d0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80032d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032dc:	4b18      	ldr	r3, [pc, #96]	; (8003340 <SystemInit+0x9c>)
 80032de:	4013      	ands	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80032e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ee:	f023 0305 	bic.w	r3, r3, #5
 80032f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80032f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800330a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800330e:	4a0d      	ldr	r2, [pc, #52]	; (8003344 <SystemInit+0xa0>)
 8003310:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003316:	4a0b      	ldr	r2, [pc, #44]	; (8003344 <SystemInit+0xa0>)
 8003318:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800331a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003328:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800332a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332e:	2200      	movs	r2, #0
 8003330:	619a      	str	r2, [r3, #24]
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000ed00 	.word	0xe000ed00
 8003340:	faf6fefb 	.word	0xfaf6fefb
 8003344:	22041000 	.word	0x22041000

08003348 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003354:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4313      	orrs	r3, r2
 800335e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003364:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4013      	ands	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800336c:	68fb      	ldr	r3, [r7, #12]
}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003380:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <MX_TIM17_Init+0x48>)
 8003382:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <MX_TIM17_Init+0x4c>)
 8003384:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 32000;
 8003386:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <MX_TIM17_Init+0x48>)
 8003388:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800338c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800338e:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <MX_TIM17_Init+0x48>)
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 30000;
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <MX_TIM17_Init+0x48>)
 8003396:	f247 5230 	movw	r2, #30000	; 0x7530
 800339a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800339c:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <MX_TIM17_Init+0x48>)
 800339e:	2200      	movs	r2, #0
 80033a0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80033a2:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <MX_TIM17_Init+0x48>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <MX_TIM17_Init+0x48>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80033ae:	4805      	ldr	r0, [pc, #20]	; (80033c4 <MX_TIM17_Init+0x48>)
 80033b0:	f017 ff41 	bl	801b236 <HAL_TIM_Base_Init>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80033ba:	f7fd fd7b 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000188 	.word	0x20000188
 80033c8:	40014800 	.word	0x40014800

080033cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a05      	ldr	r2, [pc, #20]	; (80033f0 <HAL_TIM_Base_MspInit+0x24>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d103      	bne.n	80033e6 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80033de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80033e2:	f7ff ffb1 	bl	8003348 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40014800 	.word	0x40014800

080033f4 <LL_AHB2_GRP1_EnableClock>:
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80033fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003400:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003402:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4313      	orrs	r3, r2
 800340a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800340c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003410:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4013      	ands	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003418:	68fb      	ldr	r3, [r7, #12]
}
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <LL_APB1_GRP2_EnableClock>:
{
 8003426:	b480      	push	{r7}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800342e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003432:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003434:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4313      	orrs	r3, r2
 800343c:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800343e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003442:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4013      	ands	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800344a:	68fb      	ldr	r3, [r7, #12]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800345c:	4b29      	ldr	r3, [pc, #164]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 800345e:	4a2a      	ldr	r2, [pc, #168]	; (8003508 <MX_LPUART1_UART_Init+0xb0>)
 8003460:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003462:	4b28      	ldr	r3, [pc, #160]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 8003464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003468:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800346a:	4b26      	ldr	r3, [pc, #152]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003470:	4b24      	ldr	r3, [pc, #144]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 8003472:	2200      	movs	r2, #0
 8003474:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003476:	4b23      	ldr	r3, [pc, #140]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 8003478:	2200      	movs	r2, #0
 800347a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800347c:	4b21      	ldr	r3, [pc, #132]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 800347e:	220c      	movs	r2, #12
 8003480:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003482:	4b20      	ldr	r3, [pc, #128]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 8003484:	2200      	movs	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003488:	4b1e      	ldr	r3, [pc, #120]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 800348a:	2200      	movs	r2, #0
 800348c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800348e:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 8003490:	2200      	movs	r2, #0
 8003492:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003494:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 8003496:	2200      	movs	r2, #0
 8003498:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800349a:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 800349c:	2200      	movs	r2, #0
 800349e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80034a0:	4818      	ldr	r0, [pc, #96]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 80034a2:	f017 ffa3 	bl	801b3ec <HAL_UART_Init>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80034ac:	f7fd fd02 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034b0:	2100      	movs	r1, #0
 80034b2:	4814      	ldr	r0, [pc, #80]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 80034b4:	f019 fac8 	bl	801ca48 <HAL_UARTEx_SetTxFifoThreshold>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80034be:	f7fd fcf9 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034c2:	2100      	movs	r1, #0
 80034c4:	480f      	ldr	r0, [pc, #60]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 80034c6:	f019 fafd 	bl	801cac4 <HAL_UARTEx_SetRxFifoThreshold>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80034d0:	f7fd fcf0 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80034d4:	480b      	ldr	r0, [pc, #44]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 80034d6:	f019 fa7e 	bl	801c9d6 <HAL_UARTEx_DisableFifoMode>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80034e0:	f7fd fce8 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_IDLE);
 80034e4:	4b07      	ldr	r3, [pc, #28]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0210 	orr.w	r2, r2, #16
 80034f2:	601a      	str	r2, [r3, #0]
      	HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 80034f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034f8:	4904      	ldr	r1, [pc, #16]	; (800350c <MX_LPUART1_UART_Init+0xb4>)
 80034fa:	4802      	ldr	r0, [pc, #8]	; (8003504 <MX_LPUART1_UART_Init+0xac>)
 80034fc:	f018 f854 	bl	801b5a8 <HAL_UART_Receive_DMA>
  /* USER CODE END LPUART1_Init 2 */

}
 8003500:	bf00      	nop
 8003502:	bd80      	pop	{r7, pc}
 8003504:	200001d4 	.word	0x200001d4
 8003508:	40008000 	.word	0x40008000
 800350c:	20008fb4 	.word	0x20008fb4

08003510 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b09c      	sub	sp, #112	; 0x70
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003518:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	60da      	str	r2, [r3, #12]
 8003526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003528:	f107 030c 	add.w	r3, r7, #12
 800352c:	2250      	movs	r2, #80	; 0x50
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f01a ff41 	bl	801e3b8 <memset>
  if(uartHandle->Instance==LPUART1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2e      	ldr	r2, [pc, #184]	; (80035f4 <HAL_UART_MspInit+0xe4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d155      	bne.n	80035ec <HAL_UART_MspInit+0xdc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003540:	2302      	movs	r3, #2
 8003542:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003544:	2300      	movs	r3, #0
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003548:	f107 030c 	add.w	r3, r7, #12
 800354c:	4618      	mov	r0, r3
 800354e:	f017 fbe5 	bl	801ad1c <HAL_RCCEx_PeriphCLKConfig>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003558:	f7fd fcac 	bl	8000eb4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800355c:	2001      	movs	r0, #1
 800355e:	f7ff ff62 	bl	8003426 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003562:	2004      	movs	r0, #4
 8003564:	f7ff ff46 	bl	80033f4 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ESP32_RX_Pin|ESP32_TX_Pin;
 8003568:	2303      	movs	r3, #3
 800356a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356c:	2302      	movs	r3, #2
 800356e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003570:	2300      	movs	r3, #0
 8003572:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003574:	2300      	movs	r3, #0
 8003576:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003578:	2308      	movs	r3, #8
 800357a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800357c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003580:	4619      	mov	r1, r3
 8003582:	481d      	ldr	r0, [pc, #116]	; (80035f8 <HAL_UART_MspInit+0xe8>)
 8003584:	f014 fec4 	bl	8018310 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8003588:	4b1c      	ldr	r3, [pc, #112]	; (80035fc <HAL_UART_MspInit+0xec>)
 800358a:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <HAL_UART_MspInit+0xf0>)
 800358c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800358e:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <HAL_UART_MspInit+0xec>)
 8003590:	2210      	movs	r2, #16
 8003592:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003594:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_UART_MspInit+0xec>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800359a:	4b18      	ldr	r3, [pc, #96]	; (80035fc <HAL_UART_MspInit+0xec>)
 800359c:	2200      	movs	r2, #0
 800359e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035a0:	4b16      	ldr	r3, [pc, #88]	; (80035fc <HAL_UART_MspInit+0xec>)
 80035a2:	2280      	movs	r2, #128	; 0x80
 80035a4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035a6:	4b15      	ldr	r3, [pc, #84]	; (80035fc <HAL_UART_MspInit+0xec>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035ac:	4b13      	ldr	r3, [pc, #76]	; (80035fc <HAL_UART_MspInit+0xec>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_UART_MspInit+0xec>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035b8:	4b10      	ldr	r3, [pc, #64]	; (80035fc <HAL_UART_MspInit+0xec>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80035be:	480f      	ldr	r0, [pc, #60]	; (80035fc <HAL_UART_MspInit+0xec>)
 80035c0:	f014 fb74 	bl	8017cac <HAL_DMA_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 80035ca:	f7fd fc73 	bl	8000eb4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <HAL_UART_MspInit+0xec>)
 80035d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80035d6:	4a09      	ldr	r2, [pc, #36]	; (80035fc <HAL_UART_MspInit+0xec>)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80035dc:	2200      	movs	r2, #0
 80035de:	2100      	movs	r1, #0
 80035e0:	2025      	movs	r0, #37	; 0x25
 80035e2:	f014 fb2e 	bl	8017c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80035e6:	2025      	movs	r0, #37	; 0x25
 80035e8:	f014 fb45 	bl	8017c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80035ec:	bf00      	nop
 80035ee:	3770      	adds	r7, #112	; 0x70
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40008000 	.word	0x40008000
 80035f8:	48000800 	.word	0x48000800
 80035fc:	20000268 	.word	0x20000268
 8003600:	40020008 	.word	0x40020008

08003604 <LL_AHB2_GRP1_EnableClock>:
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800360c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003610:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003612:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4313      	orrs	r3, r2
 800361a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800361c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003620:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4013      	ands	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003628:	68fb      	ldr	r3, [r7, #12]
}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <LL_APB1_GRP1_EnableClock>:
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800363e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003642:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003644:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4313      	orrs	r3, r2
 800364c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800364e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003652:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4013      	ands	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800365a:	68fb      	ldr	r3, [r7, #12]
}
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800366c:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <MX_USB_PCD_Init+0x48>)
 800366e:	4a11      	ldr	r2, [pc, #68]	; (80036b4 <MX_USB_PCD_Init+0x4c>)
 8003670:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003672:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <MX_USB_PCD_Init+0x48>)
 8003674:	2208      	movs	r2, #8
 8003676:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003678:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <MX_USB_PCD_Init+0x48>)
 800367a:	2202      	movs	r2, #2
 800367c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <MX_USB_PCD_Init+0x48>)
 8003680:	2202      	movs	r2, #2
 8003682:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <MX_USB_PCD_Init+0x48>)
 8003686:	2200      	movs	r2, #0
 8003688:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <MX_USB_PCD_Init+0x48>)
 800368c:	2200      	movs	r2, #0
 800368e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003690:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <MX_USB_PCD_Init+0x48>)
 8003692:	2200      	movs	r2, #0
 8003694:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <MX_USB_PCD_Init+0x48>)
 8003698:	2200      	movs	r2, #0
 800369a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800369c:	4804      	ldr	r0, [pc, #16]	; (80036b0 <MX_USB_PCD_Init+0x48>)
 800369e:	f015 fee6 	bl	801946e <HAL_PCD_Init>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80036a8:	f7fd fc04 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80036ac:	bf00      	nop
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	200002c8 	.word	0x200002c8
 80036b4:	40006800 	.word	0x40006800

080036b8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b09c      	sub	sp, #112	; 0x70
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036d0:	f107 030c 	add.w	r3, r7, #12
 80036d4:	2250      	movs	r2, #80	; 0x50
 80036d6:	2100      	movs	r1, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	f01a fe6d 	bl	801e3b8 <memset>
  if(pcdHandle->Instance==USB)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <HAL_PCD_MspInit+0xa8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d136      	bne.n	8003756 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80036e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ec:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80036ee:	2318      	movs	r3, #24
 80036f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80036f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036f6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80036f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80036fe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003702:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8003704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003708:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800370a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800370e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003710:	f107 030c 	add.w	r3, r7, #12
 8003714:	4618      	mov	r0, r3
 8003716:	f017 fb01 	bl	801ad1c <HAL_RCCEx_PeriphCLKConfig>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8003720:	f7fd fbc8 	bl	8000eb4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003724:	2001      	movs	r0, #1
 8003726:	f7ff ff6d 	bl	8003604 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800372a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800372e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003730:	2302      	movs	r3, #2
 8003732:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003734:	2300      	movs	r3, #0
 8003736:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003738:	2300      	movs	r3, #0
 800373a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800373c:	230a      	movs	r3, #10
 800373e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003740:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003744:	4619      	mov	r1, r3
 8003746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800374a:	f014 fde1 	bl	8018310 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800374e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003752:	f7ff ff70 	bl	8003636 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003756:	bf00      	nop
 8003758:	3770      	adds	r7, #112	; 0x70
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40006800 	.word	0x40006800

08003764 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003764:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003766:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003768:	3304      	adds	r3, #4

0800376a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800376a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800376c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800376e:	d3f9      	bcc.n	8003764 <CopyDataInit>
  bx lr
 8003770:	4770      	bx	lr

08003772 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003772:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003774:	3004      	adds	r0, #4

08003776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003776:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003778:	d3fb      	bcc.n	8003772 <FillZerobss>
  bx lr
 800377a:	4770      	bx	lr

0800377c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800377c:	480c      	ldr	r0, [pc, #48]	; (80037b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800377e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003780:	f7ff fd90 	bl	80032a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003784:	480b      	ldr	r0, [pc, #44]	; (80037b4 <LoopForever+0x6>)
 8003786:	490c      	ldr	r1, [pc, #48]	; (80037b8 <LoopForever+0xa>)
 8003788:	4a0c      	ldr	r2, [pc, #48]	; (80037bc <LoopForever+0xe>)
 800378a:	2300      	movs	r3, #0
 800378c:	f7ff ffed 	bl	800376a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003790:	480b      	ldr	r0, [pc, #44]	; (80037c0 <LoopForever+0x12>)
 8003792:	490c      	ldr	r1, [pc, #48]	; (80037c4 <LoopForever+0x16>)
 8003794:	4a0c      	ldr	r2, [pc, #48]	; (80037c8 <LoopForever+0x1a>)
 8003796:	2300      	movs	r3, #0
 8003798:	f7ff ffe7 	bl	800376a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800379c:	480b      	ldr	r0, [pc, #44]	; (80037cc <LoopForever+0x1e>)
 800379e:	490c      	ldr	r1, [pc, #48]	; (80037d0 <LoopForever+0x22>)
 80037a0:	2300      	movs	r3, #0
 80037a2:	f7ff ffe8 	bl	8003776 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80037a6:	f01a fd43 	bl	801e230 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80037aa:	f7fd fa90 	bl	8000cce <main>

080037ae <LoopForever>:

LoopForever:
  b LoopForever
 80037ae:	e7fe      	b.n	80037ae <LoopForever>
  ldr   r0, =_estack
 80037b0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80037b4:	20000008 	.word	0x20000008
 80037b8:	200000fc 	.word	0x200000fc
 80037bc:	08020204 	.word	0x08020204
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80037c0:	20030000 	.word	0x20030000
 80037c4:	20030000 	.word	0x20030000
 80037c8:	080202f8 	.word	0x080202f8
  INIT_BSS _sbss, _ebss
 80037cc:	20000100 	.word	0x20000100
 80037d0:	2000982c 	.word	0x2000982c

080037d4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037d4:	e7fe      	b.n	80037d4 <ADC1_IRQHandler>

080037d6 <LL_AHB2_GRP1_EnableClock>:
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80037de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80037ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4013      	ands	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037fa:	68fb      	ldr	r3, [r7, #12]
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <VL53L1A2_Init>:
  * @brief Initialize X-NUCLEO-53L1A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L1A2_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
  int32_t status = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 8003812:	4b36      	ldr	r3, [pc, #216]	; (80038ec <VL53L1A2_Init+0xe4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	4934      	ldr	r1, [pc, #208]	; (80038ec <VL53L1A2_Init+0xe4>)
 800381a:	600a      	str	r2, [r1, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d154      	bne.n	80038ca <VL53L1A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 8003820:	f000 f8d4 	bl	80039cc <_I2cFailRecover>
 8003824:	4602      	mov	r2, r0
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4313      	orrs	r3, r2
 800382a:	607b      	str	r3, [r7, #4]
    status |= VL53L1A2_I2C_Init();
 800382c:	f7ff fb50 	bl	8002ed0 <BSP_I2C1_Init>
 8003830:	4602      	mov	r2, r0
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4313      	orrs	r3, r2
 8003836:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d147      	bne.n	80038ce <VL53L1A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 800383e:	463a      	mov	r2, r7
 8003840:	2302      	movs	r3, #2
 8003842:	2100      	movs	r1, #0
 8003844:	2086      	movs	r0, #134	; 0x86
 8003846:	f000 f953 	bl	8003af0 <_ExpanderRd>
 800384a:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d13f      	bne.n	80038d2 <VL53L1A2_Init+0xca>
 8003852:	783b      	ldrb	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d13c      	bne.n	80038d2 <VL53L1A2_Init+0xca>
 8003858:	787b      	ldrb	r3, [r7, #1]
 800385a:	2b16      	cmp	r3, #22
 800385c:	d139      	bne.n	80038d2 <VL53L1A2_Init+0xca>
	  {
      VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 800385e:	463a      	mov	r2, r7
 8003860:	2302      	movs	r3, #2
 8003862:	2100      	movs	r1, #0
 8003864:	2084      	movs	r0, #132	; 0x84
 8003866:	f000 f943 	bl	8003af0 <_ExpanderRd>
 800386a:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d131      	bne.n	80038d6 <VL53L1A2_Init+0xce>
 8003872:	783b      	ldrb	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d12e      	bne.n	80038d6 <VL53L1A2_Init+0xce>
 8003878:	787b      	ldrb	r3, [r7, #1]
 800387a:	2b16      	cmp	r3, #22
 800387c:	d12b      	bne.n	80038d6 <VL53L1A2_Init+0xce>
	  {
		  VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 800387e:	4b1c      	ldr	r3, [pc, #112]	; (80038f0 <VL53L1A2_Init+0xe8>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8003884:	23ff      	movs	r3, #255	; 0xff
 8003886:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 8003888:	23ff      	movs	r3, #255	; 0xff
 800388a:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 800388c:	463a      	mov	r2, r7
 800388e:	2302      	movs	r3, #2
 8003890:	2114      	movs	r1, #20
 8003892:	2086      	movs	r0, #134	; 0x86
 8003894:	f000 f95e 	bl	8003b54 <_ExpanderWR>
 8003898:	6078      	str	r0, [r7, #4]

	  if (status)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d11c      	bne.n	80038da <VL53L1A2_Init+0xd2>
	  {
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 80038a0:	23ff      	movs	r3, #255	; 0xff
 80038a2:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 80038a4:	23bf      	movs	r3, #191	; 0xbf
 80038a6:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 80038a8:	463a      	mov	r2, r7
 80038aa:	2302      	movs	r3, #2
 80038ac:	2114      	movs	r1, #20
 80038ae:	2084      	movs	r0, #132	; 0x84
 80038b0:	f000 f950 	bl	8003b54 <_ExpanderWR>
 80038b4:	6078      	str	r0, [r7, #4]

	  if (status)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d110      	bne.n	80038de <VL53L1A2_Init+0xd6>
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 80038bc:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <VL53L1A2_Init+0xe8>)
 80038be:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 80038c2:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 80038c4:	f000 f8f4 	bl	8003ab0 <_ExpandersSetAllIO>
 80038c8:	6078      	str	r0, [r7, #4]
	  {
		VL53L1A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 80038ca:	bf00      	nop
 80038cc:	e008      	b.n	80038e0 <VL53L1A2_Init+0xd8>
      goto done_err;
 80038ce:	bf00      	nop
 80038d0:	e006      	b.n	80038e0 <VL53L1A2_Init+0xd8>
      goto done_err;
 80038d2:	bf00      	nop
 80038d4:	e004      	b.n	80038e0 <VL53L1A2_Init+0xd8>
		  goto done_err;
 80038d6:	bf00      	nop
 80038d8:	e002      	b.n	80038e0 <VL53L1A2_Init+0xd8>
		goto done_err;
 80038da:	bf00      	nop
 80038dc:	e000      	b.n	80038e0 <VL53L1A2_Init+0xd8>
		goto done_err;
 80038de:	bf00      	nop
  return status;
 80038e0:	687b      	ldr	r3, [r7, #4]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	200005bc 	.word	0x200005bc
 80038f0:	200005c0 	.word	0x200005c0

080038f4 <VL53L1A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L1A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L1A2_ResetId(uint8_t DevNo, uint8_t state)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	460a      	mov	r2, r1
 80038fe:	71fb      	strb	r3, [r7, #7]
 8003900:	4613      	mov	r3, r2
 8003902:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d037      	beq.n	800397a <VL53L1A2_ResetId+0x86>
 800390a:	2b02      	cmp	r3, #2
 800390c:	dc4e      	bgt.n	80039ac <VL53L1A2_ResetId+0xb8>
 800390e:	2b00      	cmp	r3, #0
 8003910:	d01a      	beq.n	8003948 <VL53L1A2_ResetId+0x54>
 8003912:	2b01      	cmp	r3, #1
 8003914:	d14a      	bne.n	80039ac <VL53L1A2_ResetId+0xb8>
  {
    case VL53L1A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 8003916:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <VL53L1A2_ResetId+0xcc>)
 8003918:	78db      	ldrb	r3, [r3, #3]
 800391a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800391e:	b2da      	uxtb	r2, r3
 8003920:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <VL53L1A2_ResetId+0xcc>)
 8003922:	70da      	strb	r2, [r3, #3]

      if (state)
 8003924:	79bb      	ldrb	r3, [r7, #6]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d006      	beq.n	8003938 <VL53L1A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 800392a:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <VL53L1A2_ResetId+0xcc>)
 800392c:	78db      	ldrb	r3, [r3, #3]
 800392e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003932:	b2da      	uxtb	r2, r3
 8003934:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <VL53L1A2_ResetId+0xcc>)
 8003936:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8003938:	2301      	movs	r3, #1
 800393a:	4a22      	ldr	r2, [pc, #136]	; (80039c4 <VL53L1A2_ResetId+0xd0>)
 800393c:	2113      	movs	r1, #19
 800393e:	2084      	movs	r0, #132	; 0x84
 8003940:	f000 f908 	bl	8003b54 <_ExpanderWR>
 8003944:	60f8      	str	r0, [r7, #12]
      break;
 8003946:	e035      	b.n	80039b4 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 8003948:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <VL53L1A2_ResetId+0xcc>)
 800394a:	785b      	ldrb	r3, [r3, #1]
 800394c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003950:	b2da      	uxtb	r2, r3
 8003952:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <VL53L1A2_ResetId+0xcc>)
 8003954:	705a      	strb	r2, [r3, #1]

      if (state)
 8003956:	79bb      	ldrb	r3, [r7, #6]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d006      	beq.n	800396a <VL53L1A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 800395c:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <VL53L1A2_ResetId+0xcc>)
 800395e:	785b      	ldrb	r3, [r3, #1]
 8003960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003964:	b2da      	uxtb	r2, r3
 8003966:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <VL53L1A2_ResetId+0xcc>)
 8003968:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800396a:	2301      	movs	r3, #1
 800396c:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <VL53L1A2_ResetId+0xd4>)
 800396e:	2113      	movs	r1, #19
 8003970:	2086      	movs	r0, #134	; 0x86
 8003972:	f000 f8ef 	bl	8003b54 <_ExpanderWR>
 8003976:	60f8      	str	r0, [r7, #12]
      break;
 8003978:	e01c      	b.n	80039b4 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 800397a:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <VL53L1A2_ResetId+0xcc>)
 800397c:	785b      	ldrb	r3, [r3, #1]
 800397e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003982:	b2da      	uxtb	r2, r3
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <VL53L1A2_ResetId+0xcc>)
 8003986:	705a      	strb	r2, [r3, #1]

      if (state)
 8003988:	79bb      	ldrb	r3, [r7, #6]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d006      	beq.n	800399c <VL53L1A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 800398e:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <VL53L1A2_ResetId+0xcc>)
 8003990:	785b      	ldrb	r3, [r3, #1]
 8003992:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003996:	b2da      	uxtb	r2, r3
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <VL53L1A2_ResetId+0xcc>)
 800399a:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800399c:	2301      	movs	r3, #1
 800399e:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <VL53L1A2_ResetId+0xd4>)
 80039a0:	2113      	movs	r1, #19
 80039a2:	2086      	movs	r0, #134	; 0x86
 80039a4:	f000 f8d6 	bl	8003b54 <_ExpanderWR>
 80039a8:	60f8      	str	r0, [r7, #12]
      break;
 80039aa:	e003      	b.n	80039b4 <VL53L1A2_ResetId+0xc0>

    default:
      VL53L1A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 80039ac:	f04f 33ff 	mov.w	r3, #4294967295
 80039b0:	60fb      	str	r3, [r7, #12]
      goto done;
 80039b2:	e000      	b.n	80039b6 <VL53L1A2_ResetId+0xc2>
  if (status)
  {
    VL53L1A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 80039b4:	bf00      	nop
  return status;
 80039b6:	68fb      	ldr	r3, [r7, #12]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	200005c0 	.word	0x200005c0
 80039c4:	200005c3 	.word	0x200005c3
 80039c8:	200005c1 	.word	0x200005c1

080039cc <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	75bb      	strb	r3, [r7, #22]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 80039d6:	4b34      	ldr	r3, [pc, #208]	; (8003aa8 <_I2cFailRecover+0xdc>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 80039de:	2300      	movs	r3, #0
 80039e0:	e05e      	b.n	8003aa0 <_I2cFailRecover+0xd4>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e2:	2002      	movs	r0, #2
 80039e4:	f7ff fef7 	bl	80037d6 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SCL_GPIO_PIN;
 80039e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039ec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80039ee:	2311      	movs	r3, #17
 80039f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039f2:	2301      	movs	r3, #1
 80039f4:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 80039f6:	463b      	mov	r3, r7
 80039f8:	4619      	mov	r1, r3
 80039fa:	482c      	ldr	r0, [pc, #176]	; (8003aac <_I2cFailRecover+0xe0>)
 80039fc:	f014 fc88 	bl	8018310 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SDA_GPIO_PIN;
 8003a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a04:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003a06:	2311      	movs	r3, #17
 8003a08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003a0e:	463b      	mov	r3, r7
 8003a10:	4619      	mov	r1, r3
 8003a12:	4826      	ldr	r0, [pc, #152]	; (8003aac <_I2cFailRecover+0xe0>)
 8003a14:	f014 fc7c 	bl	8018310 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a1e:	4823      	ldr	r0, [pc, #140]	; (8003aac <_I2cFailRecover+0xe0>)
 8003a20:	f014 fedc 	bl	80187dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 8003a24:	2201      	movs	r2, #1
 8003a26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a2a:	4820      	ldr	r0, [pc, #128]	; (8003aac <_I2cFailRecover+0xe0>)
 8003a2c:	f014 fed6 	bl	80187dc <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8003a30:	2300      	movs	r3, #0
 8003a32:	75fb      	strb	r3, [r7, #23]
 8003a34:	e014      	b.n	8003a60 <_I2cFailRecover+0x94>
    {
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 8003a36:	2200      	movs	r2, #0
 8003a38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a3c:	481b      	ldr	r0, [pc, #108]	; (8003aac <_I2cFailRecover+0xe0>)
 8003a3e:	f014 fecd 	bl	80187dc <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003a42:	2001      	movs	r0, #1
 8003a44:	f013 fffe 	bl	8017a44 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a4e:	4817      	ldr	r0, [pc, #92]	; (8003aac <_I2cFailRecover+0xe0>)
 8003a50:	f014 fec4 	bl	80187dc <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003a54:	2001      	movs	r0, #1
 8003a56:	f013 fff5 	bl	8017a44 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	75fb      	strb	r3, [r7, #23]
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	2b09      	cmp	r3, #9
 8003a64:	d9e7      	bls.n	8003a36 <_I2cFailRecover+0x6a>
    }
    retry_cnt++;
 8003a66:	7dbb      	ldrb	r3, [r7, #22]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	75bb      	strb	r3, [r7, #22]
  } while ((HAL_GPIO_ReadPin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 8003a6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a70:	480e      	ldr	r0, [pc, #56]	; (8003aac <_I2cFailRecover+0xe0>)
 8003a72:	f014 fe9b 	bl	80187ac <HAL_GPIO_ReadPin>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <_I2cFailRecover+0xb6>
 8003a7c:	7dbb      	ldrb	r3, [r7, #22]
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	d9d6      	bls.n	8003a30 <_I2cFailRecover+0x64>

  if (HAL_GPIO_ReadPin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 8003a82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a86:	4809      	ldr	r0, [pc, #36]	; (8003aac <_I2cFailRecover+0xe0>)
 8003a88:	f014 fe90 	bl	80187ac <HAL_GPIO_ReadPin>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <_I2cFailRecover+0xcc>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8003a92:	f06f 0304 	mvn.w	r3, #4
 8003a96:	e003      	b.n	8003aa0 <_I2cFailRecover+0xd4>
  }

  is_already_init = 1U;
 8003a98:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <_I2cFailRecover+0xdc>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	200005c4 	.word	0x200005c4
 8003aac:	48000400 	.word	0x48000400

08003ab0 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	4a0b      	ldr	r2, [pc, #44]	; (8003ae8 <_ExpandersSetAllIO+0x38>)
 8003aba:	2112      	movs	r1, #18
 8003abc:	2086      	movs	r0, #134	; 0x86
 8003abe:	f000 f849 	bl	8003b54 <_ExpanderWR>
 8003ac2:	6078      	str	r0, [r7, #4]

  if (status)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d107      	bne.n	8003ada <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 8003aca:	2302      	movs	r3, #2
 8003acc:	4a07      	ldr	r2, [pc, #28]	; (8003aec <_ExpandersSetAllIO+0x3c>)
 8003ace:	2112      	movs	r1, #18
 8003ad0:	2084      	movs	r0, #132	; 0x84
 8003ad2:	f000 f83f 	bl	8003b54 <_ExpanderWR>
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	e000      	b.n	8003adc <_ExpandersSetAllIO+0x2c>
    goto done_err;
 8003ada:	bf00      	nop

done_err:
  return status;
 8003adc:	687b      	ldr	r3, [r7, #4]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	200005c0 	.word	0x200005c0
 8003aec:	200005c2 	.word	0x200005c2

08003af0 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	74fb      	strb	r3, [r7, #19]
  VL53L1A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	b299      	uxth	r1, r3
 8003b08:	f107 0213 	add.w	r2, r7, #19
 8003b0c:	2364      	movs	r3, #100	; 0x64
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	2301      	movs	r3, #1
 8003b12:	480f      	ldr	r0, [pc, #60]	; (8003b50 <_ExpanderRd+0x60>)
 8003b14:	f014 ff7e 	bl	8018a14 <HAL_I2C_Master_Transmit>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	617b      	str	r3, [r7, #20]

    if (status)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d110      	bne.n	8003b44 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L1A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	b299      	uxth	r1, r3
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2064      	movs	r0, #100	; 0x64
 8003b2e:	fb00 f303 	mul.w	r3, r0, r3
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	4613      	mov	r3, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4805      	ldr	r0, [pc, #20]	; (8003b50 <_ExpanderRd+0x60>)
 8003b3a:	f015 f85f 	bl	8018bfc <HAL_I2C_Master_Receive>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	e000      	b.n	8003b46 <_ExpanderRd+0x56>
      break;
 8003b44:	bf00      	nop
  } while (0);

  VL53L1A2_PutI2cBus();

  return status;
 8003b46:	697b      	ldr	r3, [r7, #20]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	2000012c 	.word	0x2000012c

08003b54 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08c      	sub	sp, #48	; 0x30
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 8003b68:	f107 0314 	add.w	r3, r7, #20
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f01a fbf8 	bl	801e368 <memcpy>

  VL53L1A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	b299      	uxth	r1, r3
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3301      	adds	r3, #1
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	f107 0214 	add.w	r2, r7, #20
 8003b88:	2064      	movs	r0, #100	; 0x64
 8003b8a:	9000      	str	r0, [sp, #0]
 8003b8c:	4804      	ldr	r0, [pc, #16]	; (8003ba0 <_ExpanderWR+0x4c>)
 8003b8e:	f014 ff41 	bl	8018a14 <HAL_I2C_Master_Transmit>
 8003b92:	4603      	mov	r3, r0
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L1A2_PutI2cBus();

  return status;
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3728      	adds	r7, #40	; 0x28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	2000012c 	.word	0x2000012c

08003ba4 <VL53L1A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d903      	bls.n	8003bba <VL53L1A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003bb2:	f06f 0301 	mvn.w	r3, #1
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e014      	b.n	8003be4 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L1A2_Init() != 0)
 8003bba:	f7ff fe25 	bl	8003808 <VL53L1A2_Init>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <VL53L1A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8003bc4:	f06f 0303 	mvn.w	r3, #3
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	e00b      	b.n	8003be4 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 8003bcc:	2101      	movs	r1, #1
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f8fc 	bl	8003dcc <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f8f8 	bl	8003dcc <VL53L1A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L1CB_Probe(Instance);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f935 	bl	8003e4c <VL53L1CB_Probe>
 8003be2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003be4:	68fb      	ldr	r3, [r7, #12]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <VL53L1A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d903      	bls.n	8003c08 <VL53L1A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003c00:	f06f 0301 	mvn.w	r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	e012      	b.n	8003c2e <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ReadID(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <VL53L1A2_RANGING_SENSOR_ReadID+0x48>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	490b      	ldr	r1, [pc, #44]	; (8003c3c <VL53L1A2_RANGING_SENSOR_ReadID+0x4c>)
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003c16:	6839      	ldr	r1, [r7, #0]
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4798      	blx	r3
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	da03      	bge.n	8003c2a <VL53L1A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003c22:	f06f 0304 	mvn.w	r3, #4
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	e001      	b.n	8003c2e <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	200005d4 	.word	0x200005d4
 8003c3c:	200005c8 	.word	0x200005c8

08003c40 <VL53L1A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d903      	bls.n	8003c58 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003c50:	f06f 0301 	mvn.w	r3, #1
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	e012      	b.n	8003c7e <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8003c58:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x48>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	490b      	ldr	r1, [pc, #44]	; (8003c8c <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003c66:	6839      	ldr	r1, [r7, #0]
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4798      	blx	r3
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	da03      	bge.n	8003c7a <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003c72:	f06f 0304 	mvn.w	r3, #4
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e001      	b.n	8003c7e <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	200005d4 	.word	0x200005d4
 8003c8c:	200005c8 	.word	0x200005c8

08003c90 <VL53L1A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d903      	bls.n	8003ca8 <VL53L1A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003ca0:	f06f 0301 	mvn.w	r3, #1
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	e012      	b.n	8003cce <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->GetDistance(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <VL53L1A2_RANGING_SENSOR_GetDistance+0x48>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	490b      	ldr	r1, [pc, #44]	; (8003cdc <VL53L1A2_RANGING_SENSOR_GetDistance+0x4c>)
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003cb6:	6839      	ldr	r1, [r7, #0]
 8003cb8:	4610      	mov	r0, r2
 8003cba:	4798      	blx	r3
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	da03      	bge.n	8003cca <VL53L1A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003cc2:	f06f 0304 	mvn.w	r3, #4
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e001      	b.n	8003cce <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003cce:	68fb      	ldr	r3, [r7, #12]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	200005d4 	.word	0x200005d4
 8003cdc:	200005c8 	.word	0x200005c8

08003ce0 <VL53L1A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d903      	bls.n	8003cf8 <VL53L1A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003cf0:	f06f 0301 	mvn.w	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	e012      	b.n	8003d1e <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Start(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <VL53L1A2_RANGING_SENSOR_Start+0x48>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	490b      	ldr	r1, [pc, #44]	; (8003d2c <VL53L1A2_RANGING_SENSOR_Start+0x4c>)
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003d06:	6839      	ldr	r1, [r7, #0]
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4798      	blx	r3
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	da03      	bge.n	8003d1a <VL53L1A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d12:	f06f 0304 	mvn.w	r3, #4
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	e001      	b.n	8003d1e <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	200005d4 	.word	0x200005d4
 8003d2c:	200005c8 	.word	0x200005c8

08003d30 <VL53L1A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d903      	bls.n	8003d46 <VL53L1A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003d3e:	f06f 0301 	mvn.w	r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	e011      	b.n	8003d6a <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Stop(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 8003d46:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <VL53L1A2_RANGING_SENSOR_Stop+0x44>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	490a      	ldr	r1, [pc, #40]	; (8003d78 <VL53L1A2_RANGING_SENSOR_Stop+0x48>)
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003d54:	4610      	mov	r0, r2
 8003d56:	4798      	blx	r3
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	da03      	bge.n	8003d66 <VL53L1A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d5e:	f06f 0304 	mvn.w	r3, #4
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	e001      	b.n	8003d6a <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	200005d4 	.word	0x200005d4
 8003d78:	200005c8 	.word	0x200005c8

08003d7c <VL53L1A2_RANGING_SENSOR_SetAddress>:
  * @param Instance    Ranging sensor instance.
  * @param Address     New I2C address.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetAddress(uint32_t Instance, uint32_t Address)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d903      	bls.n	8003d94 <VL53L1A2_RANGING_SENSOR_SetAddress+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003d8c:	f06f 0301 	mvn.w	r3, #1
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	e012      	b.n	8003dba <VL53L1A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->SetAddress(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Address) < 0)
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <VL53L1A2_RANGING_SENSOR_SetAddress+0x48>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	490b      	ldr	r1, [pc, #44]	; (8003dc8 <VL53L1A2_RANGING_SENSOR_SetAddress+0x4c>)
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003da2:	6839      	ldr	r1, [r7, #0]
 8003da4:	4610      	mov	r0, r2
 8003da6:	4798      	blx	r3
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	da03      	bge.n	8003db6 <VL53L1A2_RANGING_SENSOR_SetAddress+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003dae:	f06f 0304 	mvn.w	r3, #4
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	e001      	b.n	8003dba <VL53L1A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003dba:	68fb      	ldr	r3, [r7, #12]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	200005d4 	.word	0x200005d4
 8003dc8:	200005c8 	.word	0x200005c8

08003dcc <VL53L1A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d903      	bls.n	8003de4 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003ddc:	f06f 0301 	mvn.w	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	e02e      	b.n	8003e42 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d112      	bne.n	8003e10 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 1) < 0)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2101      	movs	r1, #1
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fd7f 	bl	80038f4 <VL53L1A2_ResetId>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	da03      	bge.n	8003e04 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003dfc:	f06f 0303 	mvn.w	r3, #3
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	e01e      	b.n	8003e42 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8003e04:	2002      	movs	r0, #2
 8003e06:	f013 fe1d 	bl	8017a44 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e018      	b.n	8003e42 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d112      	bne.n	8003e3c <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 0) < 0)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fd69 	bl	80038f4 <VL53L1A2_ResetId>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	da03      	bge.n	8003e30 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003e28:	f06f 0303 	mvn.w	r3, #3
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	e008      	b.n	8003e42 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8003e30:	2002      	movs	r0, #2
 8003e32:	f013 fe07 	bl	8017a44 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	e002      	b.n	8003e42 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003e3c:	f06f 0301 	mvn.w	r3, #1
 8003e40:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003e42:	68fb      	ldr	r3, [r7, #12]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <VL53L1CB_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L1CB_Probe(uint32_t Instance)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	; 0x28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  VL53L1CB_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L1CB_Object_t   VL53L1CBObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L1CB_ADDRESS;
 8003e54:	2352      	movs	r3, #82	; 0x52
 8003e56:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L1A2_I2C_Init;
 8003e58:	4b38      	ldr	r3, [pc, #224]	; (8003f3c <VL53L1CB_Probe+0xf0>)
 8003e5a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L1A2_I2C_DeInit;
 8003e5c:	4b38      	ldr	r3, [pc, #224]	; (8003f40 <VL53L1CB_Probe+0xf4>)
 8003e5e:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L1A2_I2C_WriteReg;
 8003e60:	4b38      	ldr	r3, [pc, #224]	; (8003f44 <VL53L1CB_Probe+0xf8>)
 8003e62:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L1A2_I2C_ReadReg;
 8003e64:	4b38      	ldr	r3, [pc, #224]	; (8003f48 <VL53L1CB_Probe+0xfc>)
 8003e66:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L1A2_GetTick;
 8003e68:	4b38      	ldr	r3, [pc, #224]	; (8003f4c <VL53L1CB_Probe+0x100>)
 8003e6a:	623b      	str	r3, [r7, #32]

  if (VL53L1CB_RegisterBusIO(&(VL53L1CBObj[Instance]), &IOCtx) != VL53L1CB_OK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f642 2290 	movw	r2, #10896	; 0x2a90
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	4a36      	ldr	r2, [pc, #216]	; (8003f50 <VL53L1CB_Probe+0x104>)
 8003e78:	4413      	add	r3, r2
 8003e7a:	f107 020c 	add.w	r2, r7, #12
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f013 f824 	bl	8016ece <VL53L1CB_RegisterBusIO>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <VL53L1CB_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003e8c:	f06f 0304 	mvn.w	r3, #4
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
 8003e92:	e04d      	b.n	8003f30 <VL53L1CB_Probe+0xe4>
  }
  else if (VL53L1CB_ReadID(&(VL53L1CBObj[Instance]), &id) != VL53L1CB_OK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f642 2290 	movw	r2, #10896	; 0x2a90
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	4a2c      	ldr	r2, [pc, #176]	; (8003f50 <VL53L1CB_Probe+0x104>)
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f107 0208 	add.w	r2, r7, #8
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f013 f8cc 	bl	8017046 <VL53L1CB_ReadID>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <VL53L1CB_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003eb4:	f06f 0304 	mvn.w	r3, #4
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eba:	e039      	b.n	8003f30 <VL53L1CB_Probe+0xe4>
  }
  else
  {
    if (id != VL53L1CB_ID)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f64e 22cc 	movw	r2, #60108	; 0xeacc
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d003      	beq.n	8003ece <VL53L1CB_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003ec6:	f06f 0306 	mvn.w	r3, #6
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
 8003ecc:	e030      	b.n	8003f30 <VL53L1CB_Probe+0xe4>
    }
    else
    {
      VL53L1A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L1CB_RANGING_SENSOR_Driver;
 8003ece:	4b21      	ldr	r3, [pc, #132]	; (8003f54 <VL53L1CB_Probe+0x108>)
 8003ed0:	4a21      	ldr	r2, [pc, #132]	; (8003f58 <VL53L1CB_Probe+0x10c>)
 8003ed2:	601a      	str	r2, [r3, #0]
      VL53L1A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L1CBObj[Instance]);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f642 2290 	movw	r2, #10896	; 0x2a90
 8003eda:	fb02 f303 	mul.w	r3, r2, r3
 8003ede:	4a1c      	ldr	r2, [pc, #112]	; (8003f50 <VL53L1CB_Probe+0x104>)
 8003ee0:	441a      	add	r2, r3
 8003ee2:	491e      	ldr	r1, [pc, #120]	; (8003f5c <VL53L1CB_Probe+0x110>)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L1A2_RANGING_SENSOR_Drv->Init(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) != VL53L1CB_OK)
 8003eea:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <VL53L1CB_Probe+0x108>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	491a      	ldr	r1, [pc, #104]	; (8003f5c <VL53L1CB_Probe+0x110>)
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4798      	blx	r3
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <VL53L1CB_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f02:	f06f 0304 	mvn.w	r3, #4
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
 8003f08:	e012      	b.n	8003f30 <VL53L1CB_Probe+0xe4>
      }
      else if (VL53L1A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L1A2_RANGING_SENSOR_CompObj[Instance], &VL53L1A2_RANGING_SENSOR_Cap) != VL53L1CB_OK)
 8003f0a:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <VL53L1CB_Probe+0x108>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4912      	ldr	r1, [pc, #72]	; (8003f5c <VL53L1CB_Probe+0x110>)
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003f18:	4911      	ldr	r1, [pc, #68]	; (8003f60 <VL53L1CB_Probe+0x114>)
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	4798      	blx	r3
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <VL53L1CB_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f24:	f06f 0304 	mvn.w	r3, #4
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2a:	e001      	b.n	8003f30 <VL53L1CB_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3728      	adds	r7, #40	; 0x28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	08002ed1 	.word	0x08002ed1
 8003f40:	08002f4d 	.word	0x08002f4d
 8003f44:	08002f9d 	.word	0x08002f9d
 8003f48:	08002ff1 	.word	0x08002ff1
 8003f4c:	08003045 	.word	0x08003045
 8003f50:	200005e8 	.word	0x200005e8
 8003f54:	200005d4 	.word	0x200005d4
 8003f58:	20000048 	.word	0x20000048
 8003f5c:	200005c8 	.word	0x200005c8
 8003f60:	200005d8 	.word	0x200005d8

08003f64 <CheckValidRectRoi>:

}


static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8003f70:	793b      	ldrb	r3, [r7, #4]
 8003f72:	2b0f      	cmp	r3, #15
 8003f74:	d808      	bhi.n	8003f88 <CheckValidRectRoi+0x24>
 8003f76:	797b      	ldrb	r3, [r7, #5]
 8003f78:	2b0f      	cmp	r3, #15
 8003f7a:	d805      	bhi.n	8003f88 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8003f7c:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8003f7e:	2b0f      	cmp	r3, #15
 8003f80:	d802      	bhi.n	8003f88 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	2b0f      	cmp	r3, #15
 8003f86:	d901      	bls.n	8003f8c <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003f88:	23fc      	movs	r3, #252	; 0xfc
 8003f8a:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8003f8c:	793a      	ldrb	r2, [r7, #4]
 8003f8e:	79bb      	ldrb	r3, [r7, #6]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d803      	bhi.n	8003f9c <CheckValidRectRoi+0x38>
 8003f94:	797a      	ldrb	r2, [r7, #5]
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d201      	bcs.n	8003fa0 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003f9c:	23fc      	movs	r3, #252	; 0xfc
 8003f9e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8003fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <VL53L1_SetDeviceAddress>:




VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3318      	adds	r3, #24
 8003fc4:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8003fcc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	085b      	lsrs	r3, r3, #1
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f012 fd7d 	bl	8016ad8 <VL53L1_WrByte>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	085b      	lsrs	r3, r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b084      	sub	sp, #16
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004006:	2300      	movs	r3, #0
 8004008:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800400a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d105      	bne.n	800401e <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8004012:	2101      	movs	r1, #1
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f002 fc56 	bl	80068c6 <VL53L1_data_init>
 800401a:	4603      	mov	r3, r0
 800401c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 800401e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10b      	bne.n	800403e <VL53L1_DataInit+0x40>
		pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3318      	adds	r3, #24
 800402a:	60bb      	str	r3, [r7, #8]
		memset(&pdev->per_vcsel_cal_data, 0,
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8004032:	3308      	adds	r3, #8
 8004034:	220c      	movs	r2, #12
 8004036:	2100      	movs	r1, #0
 8004038:	4618      	mov	r0, r3
 800403a:	f01a f9bd 	bl	801e3b8 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53L1_ERROR_NONE)
 800403e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d105      	bne.n	8004052 <VL53L1_DataInit+0x54>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004052:	2300      	movs	r3, #0
 8004054:	73bb      	strb	r3, [r7, #14]
 8004056:	e012      	b.n	800407e <VL53L1_DataInit+0x80>
		if (Status == VL53L1_ERROR_NONE)
 8004058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d112      	bne.n	8004086 <VL53L1_DataInit+0x88>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8004060:	7bbb      	ldrb	r3, [r7, #14]
 8004062:	b29b      	uxth	r3, r3
 8004064:	2201      	movs	r2, #1
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fc90 	bl	800498e <VL53L1_SetLimitCheckEnable>
 800406e:	4603      	mov	r3, r0
 8004070:	461a      	mov	r2, r3
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	4313      	orrs	r3, r2
 8004076:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004078:	7bbb      	ldrb	r3, [r7, #14]
 800407a:	3301      	adds	r3, #1
 800407c:	73bb      	strb	r3, [r7, #14]
 800407e:	7bbb      	ldrb	r3, [r7, #14]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d9e9      	bls.n	8004058 <VL53L1_DataInit+0x5a>
 8004084:	e000      	b.n	8004088 <VL53L1_DataInit+0x8a>
		else
			break;
 8004086:	bf00      	nop

	}


	if (Status == VL53L1_ERROR_NONE) {
 8004088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d105      	bne.n	800409c <VL53L1_DataInit+0x9e>
		Status = VL53L1_set_dmax_mode(Dev,
 8004090:	2102      	movs	r1, #2
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f005 faef 	bl	8009676 <VL53L1_set_dmax_mode>
 8004098:	4603      	mov	r3, r0
 800409a:	73fb      	strb	r3, [r7, #15]
				VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800409c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80040b0:	2300      	movs	r3, #0
 80040b2:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80040ba:	2203      	movs	r2, #3
 80040bc:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80040c0:	2320      	movs	r3, #32
 80040c2:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	7bba      	ldrb	r2, [r7, #14]
 80040c8:	76da      	strb	r2, [r3, #27]

	Status = VL53L1_SetPresetMode(Dev,
 80040ca:	2101      	movs	r1, #1
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f947 	bl	8004360 <VL53L1_SetPresetMode>
 80040d2:	4603      	mov	r3, r0
 80040d4:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_RANGING);
	VL53L1_SetDistanceMode(Dev,
 80040d6:	2102      	movs	r1, #2
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f98b 	bl	80043f4 <VL53L1_SetDistanceMode>
			VL53L1_DISTANCEMODE_MEDIUM);
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	VL53L1_SmudgeCorrectionEnable(Dev,
 80040ea:	2100      	movs	r1, #0
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f001 fe69 	bl	8005dc4 <VL53L1_SmudgeCorrectionEnable>
			VL53L1_SMUDGE_CORRECTION_NONE);

	LOG_FUNCTION_END(Status);
	return Status;
 80040f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004106:	2300      	movs	r3, #0
 8004108:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800410a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f011 ffa1 	bl	8016056 <VL53L1_poll_for_boot_completion>
 8004114:	4603      	mov	r3, r0
 8004116:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8004118:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <ComputeDevicePresetMode>:

static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8004124:	b480      	push	{r7}
 8004126:	b089      	sub	sp, #36	; 0x24
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	603a      	str	r2, [r7, #0]
 800412e:	71fb      	strb	r3, [r7, #7]
 8004130:	460b      	mov	r3, r1
 8004132:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004134:	2300      	movs	r3, #0
 8004136:	77fb      	strb	r3, [r7, #31]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8004138:	4a48      	ldr	r2, [pc, #288]	; (800425c <ComputeDevicePresetMode+0x138>)
 800413a:	f107 0318 	add.w	r3, r7, #24
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	4611      	mov	r1, r2
 8004142:	8019      	strh	r1, [r3, #0]
 8004144:	3302      	adds	r3, #2
 8004146:	0c12      	lsrs	r2, r2, #16
 8004148:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes RangingModes[3] = {
 800414a:	4a45      	ldr	r2, [pc, #276]	; (8004260 <ComputeDevicePresetMode+0x13c>)
 800414c:	f107 0314 	add.w	r3, r7, #20
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	4611      	mov	r1, r2
 8004154:	8019      	strh	r1, [r3, #0]
 8004156:	3302      	adds	r3, #2
 8004158:	0c12      	lsrs	r2, r2, #16
 800415a:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	VL53L1_DevicePresetModes ScanningModes[3] = {
 800415c:	4a41      	ldr	r2, [pc, #260]	; (8004264 <ComputeDevicePresetMode+0x140>)
 800415e:	f107 0310 	add.w	r3, r7, #16
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	4611      	mov	r1, r2
 8004166:	8019      	strh	r1, [r3, #0]
 8004168:	3302      	adds	r3, #2
 800416a:	0c12      	lsrs	r2, r2, #16
 800416c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE};

	VL53L1_DevicePresetModes TimedModes[3] = {
 800416e:	4a3e      	ldr	r2, [pc, #248]	; (8004268 <ComputeDevicePresetMode+0x144>)
 8004170:	f107 030c 	add.w	r3, r7, #12
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	4611      	mov	r1, r2
 8004178:	8019      	strh	r1, [r3, #0]
 800417a:	3302      	adds	r3, #2
 800417c:	0c12      	lsrs	r2, r2, #16
 800417e:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8004180:	4a3a      	ldr	r2, [pc, #232]	; (800426c <ComputeDevicePresetMode+0x148>)
 8004182:	f107 0308 	add.w	r3, r7, #8
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	4611      	mov	r1, r2
 800418a:	8019      	strh	r1, [r3, #0]
 800418c:	3302      	adds	r3, #2
 800418e:	0c12      	lsrs	r2, r2, #16
 8004190:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2201      	movs	r2, #1
 8004196:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8004198:	79bb      	ldrb	r3, [r7, #6]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d002      	beq.n	80041a4 <ComputeDevicePresetMode+0x80>
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d003      	beq.n	80041aa <ComputeDevicePresetMode+0x86>
 80041a2:	e005      	b.n	80041b0 <ComputeDevicePresetMode+0x8c>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	77bb      	strb	r3, [r7, #30]
		break;
 80041a8:	e004      	b.n	80041b4 <ComputeDevicePresetMode+0x90>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80041aa:	2301      	movs	r3, #1
 80041ac:	77bb      	strb	r3, [r7, #30]
		break;
 80041ae:	e001      	b.n	80041b4 <ComputeDevicePresetMode+0x90>
	default:
		DistIdx = 2;
 80041b0:	2302      	movs	r3, #2
 80041b2:	77bb      	strb	r3, [r7, #30]
	}

	switch (PresetMode) {
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d845      	bhi.n	8004248 <ComputeDevicePresetMode+0x124>
 80041bc:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <ComputeDevicePresetMode+0xa0>)
 80041be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c2:	bf00      	nop
 80041c4:	080041f9 	.word	0x080041f9
 80041c8:	08004209 	.word	0x08004209
 80041cc:	08004219 	.word	0x08004219
 80041d0:	080041e9 	.word	0x080041e9
 80041d4:	08004249 	.word	0x08004249
 80041d8:	08004249 	.word	0x08004249
 80041dc:	08004239 	.word	0x08004239
 80041e0:	08004229 	.word	0x08004229
 80041e4:	08004241 	.word	0x08004241
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 80041e8:	7fbb      	ldrb	r3, [r7, #30]
 80041ea:	3320      	adds	r3, #32
 80041ec:	443b      	add	r3, r7
 80041ee:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	701a      	strb	r2, [r3, #0]
		break;
 80041f6:	e029      	b.n	800424c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_RANGING:
		*pDevicePresetMode = RangingModes[DistIdx];
 80041f8:	7fbb      	ldrb	r3, [r7, #30]
 80041fa:	3320      	adds	r3, #32
 80041fc:	443b      	add	r3, r7
 80041fe:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	701a      	strb	r2, [r3, #0]
		break;
 8004206:	e021      	b.n	800424c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		*pDevicePresetMode = ScanningModes[DistIdx];
 8004208:	7fbb      	ldrb	r3, [r7, #30]
 800420a:	3320      	adds	r3, #32
 800420c:	443b      	add	r3, r7
 800420e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	701a      	strb	r2, [r3, #0]
		break;
 8004216:	e019      	b.n	800424c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8004218:	7fbb      	ldrb	r3, [r7, #30]
 800421a:	3320      	adds	r3, #32
 800421c:	443b      	add	r3, r7
 800421e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	701a      	strb	r2, [r3, #0]
		break;
 8004226:	e011      	b.n	800424c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8004228:	7fbb      	ldrb	r3, [r7, #30]
 800422a:	3320      	adds	r3, #32
 800422c:	443b      	add	r3, r7
 800422e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	701a      	strb	r2, [r3, #0]
		break;
 8004236:	e009      	b.n	800424c <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_OLT:
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2211      	movs	r2, #17
 800423c:	701a      	strb	r2, [r3, #0]
		break;
 800423e:	e005      	b.n	800424c <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
		*pDevicePresetMode =
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2227      	movs	r2, #39	; 0x27
 8004244:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE;
		break;
 8004246:	e001      	b.n	800424c <ComputeDevicePresetMode+0x128>

	default:

		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8004248:	23f8      	movs	r3, #248	; 0xf8
 800424a:	77fb      	strb	r3, [r7, #31]
	}

	return Status;
 800424c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3724      	adds	r7, #36	; 0x24
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	0801f620 	.word	0x0801f620
 8004260:	0801f624 	.word	0x0801f624
 8004264:	0801f628 	.word	0x0801f628
 8004268:	0801f62c 	.word	0x0801f62c
 800426c:	0801f630 	.word	0x0801f630

08004270 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8004270:	b5b0      	push	{r4, r5, r7, lr}
 8004272:	b08e      	sub	sp, #56	; 0x38
 8004274:	af04      	add	r7, sp, #16
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	460b      	mov	r3, r1
 800427c:	72fb      	strb	r3, [r7, #11]
 800427e:	4613      	mov	r3, r2
 8004280:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004282:	2300      	movs	r3, #0
 8004284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8004298:	7afb      	ldrb	r3, [r7, #11]
 800429a:	2b03      	cmp	r3, #3
 800429c:	d002      	beq.n	80042a4 <SetPresetMode+0x34>
 800429e:	7afb      	ldrb	r3, [r7, #11]
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d103      	bne.n	80042ac <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80042a4:	2340      	movs	r3, #64	; 0x40
 80042a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80042aa:	e002      	b.n	80042b2 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80042ac:	2320      	movs	r3, #32
 80042ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 80042b2:	f107 0225 	add.w	r2, r7, #37	; 0x25
 80042b6:	7ab9      	ldrb	r1, [r7, #10]
 80042b8:	7afb      	ldrb	r3, [r7, #11]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff ff32 	bl	8004124 <ComputeDevicePresetMode>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 80042c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d112      	bne.n	80042f4 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 80042ce:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80042d2:	f107 001c 	add.w	r0, r7, #28
 80042d6:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80042da:	f107 0314 	add.w	r3, r7, #20
 80042de:	9301      	str	r3, [sp, #4]
 80042e0:	f107 0318 	add.w	r3, r7, #24
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	4603      	mov	r3, r0
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f002 ffaf 	bl	800724c <VL53L1_get_preset_mode_timing_cfg>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 80042f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d112      	bne.n	8004322 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 80042fc:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8004300:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8004302:	69fd      	ldr	r5, [r7, #28]
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	9102      	str	r1, [sp, #8]
 800430c:	9201      	str	r2, [sp, #4]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	462b      	mov	r3, r5
 8004312:	4622      	mov	r2, r4
 8004314:	4601      	mov	r1, r0
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f003 f8ee 	bl	80074f8 <VL53L1_set_preset_mode>
 800431c:	4603      	mov	r3, r0
 800431e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8004322:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004326:	2b00      	cmp	r3, #0
 8004328:	d103      	bne.n	8004332 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004330:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8004332:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <SetPresetMode+0xd8>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004340:	461a      	mov	r2, r3
 8004342:	7afb      	ldrb	r3, [r7, #11]
 8004344:	f882 3a6c 	strb.w	r3, [r2, #2668]	; 0xa6c

	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	LOG_FUNCTION_END(Status);
	return Status;
 8004354:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004358:	4618      	mov	r0, r3
 800435a:	3728      	adds	r7, #40	; 0x28
 800435c:	46bd      	mov	sp, r7
 800435e:	bdb0      	pop	{r4, r5, r7, pc}

08004360 <VL53L1_SetPresetMode>:


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800436c:	2300      	movs	r3, #0
 800436e:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8004370:	2303      	movs	r3, #3
 8004372:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);


	Status = VL53L1_low_power_auto_data_init(Dev);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f00c f94a 	bl	801060e <VL53L1_low_power_auto_data_init>
 800437a:	4603      	mov	r3, r0
 800437c:	73fb      	strb	r3, [r7, #15]

	if (PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE)
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	2b09      	cmp	r3, #9
 8004382:	d101      	bne.n	8004388 <VL53L1_SetPresetMode+0x28>
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8004384:	2301      	movs	r3, #1
 8004386:	73bb      	strb	r3, [r7, #14]
	Status = SetPresetMode(Dev,
 8004388:	7bba      	ldrb	r2, [r7, #14]
 800438a:	78f9      	ldrb	r1, [r7, #3]
 800438c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff ff6d 	bl	8004270 <SetPresetMode>
 8004396:	4603      	mov	r3, r0
 8004398:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800439a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d117      	bne.n	80043d2 <VL53L1_SetPresetMode+0x72>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d005      	beq.n	80043b4 <VL53L1_SetPresetMode+0x54>
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d002      	beq.n	80043b4 <VL53L1_SetPresetMode+0x54>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d107      	bne.n	80043c4 <VL53L1_SetPresetMode+0x64>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80043b4:	f24a 0128 	movw	r1, #41000	; 0xa028
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f8a9 	bl	8004510 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80043be:	4603      	mov	r3, r0
 80043c0:	73fb      	strb	r3, [r7, #15]
 80043c2:	e006      	b.n	80043d2 <VL53L1_SetPresetMode+0x72>
				Dev, 41000);
		else

			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80043c4:	f248 2135 	movw	r1, #33333	; 0x8235
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f8a1 	bl	8004510 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80043ce:	4603      	mov	r3, r0
 80043d0:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80043d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <VL53L1_SetPresetMode+0x88>

		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 80043da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fa68 	bl	80048b4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 80043e4:	4603      	mov	r3, r0
 80043e6:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80043e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b0a2      	sub	sp, #136	; 0x88
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	460b      	mov	r3, r1
 80043fe:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004400:	2300      	movs	r3, #0
 8004402:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t MmTimeoutUs = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t PhaseCalTimeoutUs = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	677b      	str	r3, [r7, #116]	; 0x74
	VL53L1_zone_config_t zone_config;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004418:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 800441c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86



	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 8004420:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8004424:	2b09      	cmp	r3, #9
 8004426:	d105      	bne.n	8004434 <VL53L1_SetDistanceMode+0x40>
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d002      	beq.n	8004434 <VL53L1_SetDistanceMode+0x40>
		(DistanceMode != VL53L1_DISTANCEMODE_SHORT))
		return VL53L1_ERROR_INVALID_PARAMS;
 800442e:	f06f 0303 	mvn.w	r3, #3
 8004432:	e069      	b.n	8004508 <VL53L1_SetDistanceMode+0x114>
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d008      	beq.n	800444c <VL53L1_SetDistanceMode+0x58>
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d005      	beq.n	800444c <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	2b03      	cmp	r3, #3
 8004444:	d002      	beq.n	800444c <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8004446:	f06f 0303 	mvn.w	r3, #3
 800444a:	e05d      	b.n	8004508 <VL53L1_SetDistanceMode+0x114>

	if (Status == VL53L1_ERROR_NONE)
 800444c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8004450:	2b00      	cmp	r3, #0
 8004452:	d108      	bne.n	8004466 <VL53L1_SetDistanceMode+0x72>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 8004454:	f107 0308 	add.w	r3, r7, #8
 8004458:	4619      	mov	r1, r3
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f002 fede 	bl	800721c <VL53L1_get_zone_config>
 8004460:	4603      	mov	r3, r0
 8004462:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800446e:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10b      	bne.n	800448e <VL53L1_SetDistanceMode+0x9a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8004476:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800447a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800447e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f002 fd8a 	bl	8006f9c <VL53L1_get_timeouts_us>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800448e:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <VL53L1_SetDistanceMode+0xb8>
		Status = SetPresetMode(Dev,
 8004496:	78fa      	ldrb	r2, [r7, #3]
 8004498:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 800449c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff fee5 	bl	8004270 <SetPresetMode>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 80044ac:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d106      	bne.n	80044c2 <VL53L1_SetDistanceMode+0xce>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80044ba:	461a      	mov	r2, r3
 80044bc:	78fb      	ldrb	r3, [r7, #3]
 80044be:	f882 3a6e 	strb.w	r3, [r2, #2670]	; 0xa6e
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80044c2:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10f      	bne.n	80044ea <VL53L1_SetDistanceMode+0xf6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80044ca:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80044cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f002 fd2a 	bl	8006f2a <VL53L1_set_timeouts_us>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 80044dc:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <VL53L1_SetDistanceMode+0xf6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 80044e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 80044ea:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d108      	bne.n	8004504 <VL53L1_SetDistanceMode+0x110>
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 80044f2:	f107 0308 	add.w	r3, r7, #8
 80044f6:	4619      	mov	r1, r3
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f002 fe4c 	bl	8007196 <VL53L1_set_zone_config>
 80044fe:	4603      	mov	r3, r0
 8004500:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	LOG_FUNCTION_END(Status);
	return Status;
 8004504:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
}
 8004508:	4618      	mov	r0, r3
 800450a:	3788      	adds	r7, #136	; 0x88
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08c      	sub	sp, #48	; 0x30
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800451a:	2300      	movs	r3, #0
 800451c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800452c:	2300      	movs	r3, #0
 800452e:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8004534:	4b75      	ldr	r3, [pc, #468]	; (800470c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1fc>)
 8004536:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	4a75      	ldr	r2, [pc, #468]	; (8004710 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x200>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d902      	bls.n	8004546 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004540:	23fc      	movs	r3, #252	; 0xfc
 8004542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8004546:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800454e:	f107 031a 	add.w	r3, r7, #26
 8004552:	461a      	mov	r2, r3
 8004554:	2105      	movs	r1, #5
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fb9a 	bl	8004c90 <VL53L1_GetSequenceStepEnable>
 800455c:	4603      	mov	r3, r0
 800455e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8004562:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800456a:	f107 0319 	add.w	r3, r7, #25
 800456e:	461a      	mov	r2, r3
 8004570:	2106      	movs	r1, #6
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fb8c 	bl	8004c90 <VL53L1_GetSequenceStepEnable>
 8004578:	4603      	mov	r3, r0
 800457a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800457e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10b      	bne.n	800459e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8004586:	f107 0314 	add.w	r3, r7, #20
 800458a:	f107 0210 	add.w	r2, r7, #16
 800458e:	f107 010c 	add.w	r1, r7, #12
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f002 fd02 	bl	8006f9c <VL53L1_get_timeouts_us>
 8004598:	4603      	mov	r3, r0
 800459a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800459e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f040 80a0 	bne.w	80046e8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
		PresetMode = VL53L1DevDataGet(Dev,
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80045ae:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80045b2:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 80045b8:	2301      	movs	r3, #1
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 80045bc:	7efb      	ldrb	r3, [r7, #27]
 80045be:	3b01      	subs	r3, #1
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d861      	bhi.n	8004688 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
 80045c4:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbc>)
 80045c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ca:	bf00      	nop
 80045cc:	08004671 	.word	0x08004671
 80045d0:	08004671 	.word	0x08004671
 80045d4:	0800460d 	.word	0x0800460d
 80045d8:	080045f1 	.word	0x080045f1
 80045dc:	08004689 	.word	0x08004689
 80045e0:	08004689 	.word	0x08004689
 80045e4:	0800467d 	.word	0x0800467d
 80045e8:	08004633 	.word	0x08004633
 80045ec:	08004671 	.word	0x08004671
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80045f0:	7ebb      	ldrb	r3, [r7, #26]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d002      	beq.n	80045fc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 80045f6:	7e7b      	ldrb	r3, [r7, #25]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d103      	bne.n	8004604 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
				TimingGuard = 5000;
 80045fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8004602:	e044      	b.n	800468e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
				TimingGuard = 1000;
 8004604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004608:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800460a:	e040      	b.n	800468e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004612:	7ebb      	ldrb	r3, [r7, #26]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d002      	beq.n	800461e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10e>
 8004618:	7e7b      	ldrb	r3, [r7, #25]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d103      	bne.n	8004626 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x116>
				TimingGuard = 26600;
 800461e:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8004622:	62bb      	str	r3, [r7, #40]	; 0x28
 8004624:	e002      	b.n	800462c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
			else
				TimingGuard = 21600;
 8004626:	f245 4360 	movw	r3, #21600	; 0x5460
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800462c:	2302      	movs	r3, #2
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8004630:	e02d      	b.n	800468e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8004638:	23f5      	movs	r3, #245	; 0xf5
 800463a:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800463c:	f107 0308 	add.w	r3, r7, #8
 8004640:	461a      	mov	r2, r3
 8004642:	f248 0188 	movw	r1, #32904	; 0x8088
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f005 f88c 	bl	8009764 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	dd07      	ble.n	8004662 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x152>
				vhv += vhv_loops *
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	22f5      	movs	r2, #245	; 0xf5
 8004656:	fb02 f303 	mul.w	r3, r2, r3
 800465a:	461a      	mov	r2, r3
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	4413      	add	r3, r2
 8004660:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800466a:	2302      	movs	r3, #2
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800466e:	e00e      	b.n	800468e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			TimingGuard = 1700;
 8004670:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8004674:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 6;
 8004676:	2306      	movs	r3, #6
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800467a:	e008      	b.n	800468e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_OLT:
			TimingGuard = MmTimeoutUs + 5000;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004682:	3308      	adds	r3, #8
 8004684:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8004686:	e002      	b.n	800468e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8004688:	23f8      	movs	r3, #248	; 0xf8
 800468a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	429a      	cmp	r2, r3
 8004694:	d803      	bhi.n	800469e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8004696:	23fc      	movs	r3, #252	; 0xfc
 8004698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800469c:	e003      	b.n	80046a6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a2:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80046a4:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 80046a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d11c      	bne.n	80046e8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d203      	bcs.n	80046be <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ae>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 80046b6:	23fc      	movs	r3, #252	; 0xfc
 80046b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80046bc:	e00d      	b.n	80046da <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ca>
			else {
				TimingBudget /= divisor;
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c6:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 80046c8:	68f9      	ldr	r1, [r7, #12]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f002 fc2b 	bl	8006f2a <VL53L1_set_timeouts_us>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 80046da:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d102      	bne.n	80046e8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
				VL53L1DevDataSet(Dev,
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	629a      	str	r2, [r3, #40]	; 0x28
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 80046e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d106      	bne.n	80046fe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ee>
		VL53L1DevDataSet(Dev,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80046f6:	461a      	mov	r2, r3
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f8c2 3a70 	str.w	r3, [r2, #2672]	; 0xa70
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80046fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004702:	4618      	mov	r0, r3
 8004704:	3730      	adds	r7, #48	; 0x30
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	00086470 	.word	0x00086470
 8004710:	00989680 	.word	0x00989680

08004714 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08c      	sub	sp, #48	; 0x30
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800471e:	2300      	movs	r3, #0
 8004720:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 800472c:	2300      	movs	r3, #0
 800472e:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8004730:	2300      	movs	r3, #0
 8004732:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8004734:	2300      	movs	r3, #0
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8004742:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004746:	2b00      	cmp	r3, #0
 8004748:	d109      	bne.n	800475e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800474a:	f107 031b 	add.w	r3, r7, #27
 800474e:	461a      	mov	r2, r3
 8004750:	2105      	movs	r1, #5
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fa9c 	bl	8004c90 <VL53L1_GetSequenceStepEnable>
 8004758:	4603      	mov	r3, r0
 800475a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800475e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004766:	f107 031a 	add.w	r3, r7, #26
 800476a:	461a      	mov	r2, r3
 800476c:	2106      	movs	r1, #6
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fa8e 	bl	8004c90 <VL53L1_GetSequenceStepEnable>
 8004774:	4603      	mov	r3, r0
 8004776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800477a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10b      	bne.n	800479a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8004782:	f107 0310 	add.w	r3, r7, #16
 8004786:	f107 0214 	add.w	r2, r7, #20
 800478a:	f107 010c 	add.w	r1, r7, #12
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f002 fc04 	bl	8006f9c <VL53L1_get_timeouts_us>
 8004794:	4603      	mov	r3, r0
 8004796:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800479a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d179      	bne.n	8004896 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80047a8:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80047ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 80047b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047b4:	3b01      	subs	r3, #1
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d869      	bhi.n	800488e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x17a>
 80047ba:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xac>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	0800486d 	.word	0x0800486d
 80047c4:	0800486d 	.word	0x0800486d
 80047c8:	08004807 	.word	0x08004807
 80047cc:	080047e5 	.word	0x080047e5
 80047d0:	0800488f 	.word	0x0800488f
 80047d4:	0800488f 	.word	0x0800488f
 80047d8:	0800487f 	.word	0x0800487f
 80047dc:	0800482f 	.word	0x0800482f
 80047e0:	0800486d 	.word	0x0800486d
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80047e4:	7efb      	ldrb	r3, [r7, #27]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d002      	beq.n	80047f0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
 80047ea:	7ebb      	ldrb	r3, [r7, #26]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d105      	bne.n	80047fc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80047f6:	3308      	adds	r3, #8
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 80047fa:	e04d      	b.n	8004898 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004802:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8004804:	e048      	b.n	8004898 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004806:	7efb      	ldrb	r3, [r7, #27]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d002      	beq.n	8004812 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xfe>
 800480c:	7ebb      	ldrb	r3, [r7, #26]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d106      	bne.n	8004820 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x10c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8004818:	3334      	adds	r3, #52	; 0x34
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800481e:	e03b      	b.n	8004898 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8004826:	3330      	adds	r3, #48	; 0x30
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800482c:	e034      	b.n	8004898 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800482e:	23f5      	movs	r3, #245	; 0xf5
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8004832:	f107 0308 	add.w	r3, r7, #8
 8004836:	461a      	mov	r2, r3
 8004838:	f248 0188 	movw	r1, #32904	; 0x8088
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f004 ff91 	bl	8009764 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	dd07      	ble.n	8004858 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x144>
				vhv += vhv_loops *
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	22f5      	movs	r2, #245	; 0xf5
 800484c:	fb02 f303 	mul.w	r3, r2, r3
 8004850:	461a      	mov	r2, r3
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	4413      	add	r3, r2
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800485e:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	4413      	add	r3, r2
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800486a:	e015      	b.n	8004898 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4613      	mov	r3, r2
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	4413      	add	r3, r2
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 800487a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800487c:	e00c      	b.n	8004898 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_OLT:
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	4413      	add	r3, r2
 8004884:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004888:	3308      	adds	r3, #8
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800488c:	e004      	b.n	8004898 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800488e:	23f8      	movs	r3, #248	; 0xf8
 8004890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004894:	e000      	b.n	8004898 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		}
	}
 8004896:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 8004898:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800489c:	2b00      	cmp	r3, #0
 800489e:	d102      	bne.n	80048a6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x192>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a4:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80048a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3730      	adds	r7, #48	; 0x30
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop

080048b4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80048be:	2300      	movs	r3, #0
 80048c0:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");


	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	019b      	lsls	r3, r3, #6
 80048ca:	4a09      	ldr	r2, [pc, #36]	; (80048f0 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 80048cc:	fba2 2303 	umull	r2, r3, r2, r3
 80048d0:	099b      	lsrs	r3, r3, #6
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4413      	add	r3, r2
 80048d6:	60bb      	str	r3, [r7, #8]

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f002 facc 	bl	8006e78 <VL53L1_set_inter_measurement_period_ms>
 80048e0:	4603      	mov	r3, r0
 80048e2:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 80048e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	10624dd3 	.word	0x10624dd3

080048f4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80048fe:	2300      	movs	r3, #0
 8004900:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8004902:	f107 0308 	add.w	r3, r7, #8
 8004906:	4619      	mov	r1, r3
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f002 fae3 	bl	8006ed4 <VL53L1_get_inter_measurement_period_ms>
 800490e:	4603      	mov	r3, r0
 8004910:	73fb      	strb	r3, [r7, #15]

	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	019b      	lsls	r3, r3, #6
 8004918:	4907      	ldr	r1, [pc, #28]	; (8004938 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800491a:	fba1 1303 	umull	r1, r3, r1, r3
 800491e:	099b      	lsrs	r3, r3, #6
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 800492a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	10624dd3 	.word	0x10624dd3

0800493c <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	460b      	mov	r3, r1
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800494a:	2300      	movs	r3, #0
 800494c:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800494e:	897b      	ldrh	r3, [r7, #10]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <SetLimitValue+0x1e>
 8004954:	2b01      	cmp	r3, #1
 8004956:	d009      	beq.n	800496c <SetLimitValue+0x30>
 8004958:	e011      	b.n	800497e <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	0b9b      	lsrs	r3, r3, #14
 800495e:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8004960:	8abb      	ldrh	r3, [r7, #20]
 8004962:	4619      	mov	r1, r3
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f003 f988 	bl	8007c7a <VL53L1_set_lite_sigma_threshold>
		break;
 800496a:	e00a      	b.n	8004982 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	0a5b      	lsrs	r3, r3, #9
 8004970:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8004972:	8abb      	ldrh	r3, [r7, #20]
 8004974:	4619      	mov	r1, r3
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f003 f9ad 	bl	8007cd6 <VL53L1_set_lite_min_count_rate>
		break;
 800497c:	e001      	b.n	8004982 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800497e:	23fc      	movs	r3, #252	; 0xfc
 8004980:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004982:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	460b      	mov	r3, r1
 8004998:	807b      	strh	r3, [r7, #2]
 800499a:	4613      	mov	r3, r2
 800499c:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800499e:	2300      	movs	r3, #0
 80049a0:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80049a6:	887b      	ldrh	r3, [r7, #2]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d902      	bls.n	80049b2 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80049ac:	23fc      	movs	r3, #252	; 0xfc
 80049ae:	73fb      	strb	r3, [r7, #15]
 80049b0:	e015      	b.n	80049de <VL53L1_SetLimitCheckEnable+0x50>
	} else {

		if (LimitCheckEnable == 0)
 80049b2:	787b      	ldrb	r3, [r7, #1]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d102      	bne.n	80049be <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	60bb      	str	r3, [r7, #8]
 80049bc:	e007      	b.n	80049ce <VL53L1_SetLimitCheckEnable+0x40>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80049be:	887b      	ldrh	r3, [r7, #2]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 80049ce:	887b      	ldrh	r3, [r7, #2]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	4619      	mov	r1, r3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7ff ffb1 	bl	800493c <SetLimitValue>
 80049da:	4603      	mov	r3, r0
 80049dc:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 80049de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10e      	bne.n	8004a04 <VL53L1_SetLimitCheckEnable+0x76>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80049e6:	787b      	ldrb	r3, [r7, #1]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf14      	ite	ne
 80049ec:	2301      	movne	r3, #1
 80049ee:	2300      	moveq	r3, #0
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	887b      	ldrh	r3, [r7, #2]
 80049f4:	4611      	mov	r1, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80049fe:	3334      	adds	r3, #52	; 0x34
 8004a00:	460a      	mov	r2, r1
 8004a02:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8004a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004a22:	897b      	ldrh	r3, [r7, #10]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d905      	bls.n	8004a34 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004a28:	23fc      	movs	r3, #252	; 0xfc
 8004a2a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	701a      	strb	r2, [r3, #0]
 8004a32:	e00a      	b.n	8004a4a <VL53L1_GetLimitCheckEnable+0x3a>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004a34:	897b      	ldrh	r3, [r7, #10]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8004a3e:	3334      	adds	r3, #52	; 0x34
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	7dba      	ldrb	r2, [r7, #22]
 8004a48:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004a4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	371c      	adds	r7, #28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b088      	sub	sp, #32
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	60f8      	str	r0, [r7, #12]
 8004a62:	460b      	mov	r3, r1
 8004a64:	607a      	str	r2, [r7, #4]
 8004a66:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004a70:	897b      	ldrh	r3, [r7, #10]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <VL53L1_GetLimitCheckValue+0x22>
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d00c      	beq.n	8004a94 <VL53L1_GetLimitCheckValue+0x3a>
 8004a7a:	e017      	b.n	8004aac <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8004a7c:	f107 0314 	add.w	r3, r7, #20
 8004a80:	4619      	mov	r1, r3
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f003 f8e2 	bl	8007c4c <VL53L1_get_lite_sigma_threshold>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8004a8c:	8abb      	ldrh	r3, [r7, #20]
 8004a8e:	039b      	lsls	r3, r3, #14
 8004a90:	61bb      	str	r3, [r7, #24]
		break;
 8004a92:	e00d      	b.n	8004ab0 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8004a94:	f107 0316 	add.w	r3, r7, #22
 8004a98:	4619      	mov	r1, r3
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f003 f904 	bl	8007ca8 <VL53L1_get_lite_min_count_rate>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8004aa4:	8afb      	ldrh	r3, [r7, #22]
 8004aa6:	025b      	lsls	r3, r3, #9
 8004aa8:	61bb      	str	r3, [r7, #24]
		break;
 8004aaa:	e001      	b.n	8004ab0 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004aac:	23fc      	movs	r3, #252	; 0xfc
 8004aae:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8004ab0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d129      	bne.n	8004b0c <VL53L1_GetLimitCheckValue+0xb2>

		if (TempFix1616 == 0) {
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d113      	bne.n	8004ae6 <VL53L1_GetLimitCheckValue+0x8c>

			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8004abe:	897b      	ldrh	r3, [r7, #10]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004ad4:	897b      	ldrh	r3, [r7, #10]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8004ade:	3334      	adds	r3, #52	; 0x34
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	701a      	strb	r2, [r3, #0]
 8004ae4:	e012      	b.n	8004b0c <VL53L1_GetLimitCheckValue+0xb2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004aec:	897b      	ldrh	r3, [r7, #10]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004afc:	897b      	ldrh	r3, [r7, #10]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8004b06:	3334      	adds	r3, #52	; 0x34
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8004b0c:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <VL53L1_SetROI>:
	return Status;
}

VL53L1_Error VL53L1_SetROI(VL53L1_DEV Dev,
		VL53L1_RoiConfig_t *pRoiConfig)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b0a0      	sub	sp, #128	; 0x80
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004b22:	2300      	movs	r3, #0
 8004b24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	VL53L1_PresetModes PresetMode;
	uint8_t MaxNumberOfROI = 1;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t  width, height;

	LOG_FUNCTION_START("");


	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004b34:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8004b38:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c


	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 8004b3c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d102      	bne.n	8004b4a <VL53L1_SetROI+0x32>
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 8004b44:	2310      	movs	r3, #16
 8004b46:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d303      	bcc.n	8004b5e <VL53L1_SetROI+0x46>
			(pRoiConfig->NumberOfRoi < 1))
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d102      	bne.n	8004b64 <VL53L1_SetROI+0x4c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004b5e:	23fc      	movs	r3, #252	; 0xfc
 8004b60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (Status == VL53L1_ERROR_NONE) {
 8004b64:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d17e      	bne.n	8004c6a <VL53L1_SetROI+0x152>


		zone_cfg.max_zones = MaxNumberOfROI;
 8004b6c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004b70:	733b      	strb	r3, [r7, #12]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8004b82:	e06a      	b.n	8004c5a <VL53L1_SetROI+0x142>
			CurrROI = pRoiConfig->UserRois[i];
 8004b84:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f107 0208 	add.w	r2, r7, #8
 8004b92:	3301      	adds	r3, #1
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	6010      	str	r0, [r2, #0]

			Status = CheckValidRectRoi(CurrROI);
 8004b98:	68b8      	ldr	r0, [r7, #8]
 8004b9a:	f7ff f9e3 	bl	8003f64 <CheckValidRectRoi>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (Status != VL53L1_ERROR_NONE)
 8004ba4:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d15d      	bne.n	8004c68 <VL53L1_SetROI+0x150>
				break;

			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 8004bac:	7abb      	ldrb	r3, [r7, #10]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	7a3b      	ldrb	r3, [r7, #8]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	3301      	adds	r3, #1
					/ 2;
 8004bb6:	0fda      	lsrs	r2, r3, #31
 8004bb8:	4413      	add	r3, r2
 8004bba:	105b      	asrs	r3, r3, #1
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 8004bbc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8004bc0:	7a7b      	ldrb	r3, [r7, #9]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	7afb      	ldrb	r3, [r7, #11]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	3301      	adds	r3, #1
					/ 2;
 8004bca:	0fda      	lsrs	r2, r3, #31
 8004bcc:	4413      	add	r3, r2
 8004bce:	105b      	asrs	r3, r3, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8004bd0:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 8004bd4:	7aba      	ldrb	r2, [r7, #10]
 8004bd6:	7a3b      	ldrb	r3, [r7, #8]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 8004bde:	7a7a      	ldrb	r2, [r7, #9]
 8004be0:	7afb      	ldrb	r3, [r7, #11]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			if ((width < 3) || (height < 3)) {
 8004be8:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d903      	bls.n	8004bf8 <VL53L1_SetROI+0xe0>
 8004bf0:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d803      	bhi.n	8004c00 <VL53L1_SetROI+0xe8>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8004bf8:	23fc      	movs	r3, #252	; 0xfc
 8004bfa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 8004bfe:	e034      	b.n	8004c6a <VL53L1_SetROI+0x152>
			}
			zone_cfg.user_zones[i].x_centre = x_centre;
 8004c00:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8004c04:	3306      	adds	r3, #6
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	3380      	adds	r3, #128	; 0x80
 8004c0a:	443b      	add	r3, r7
 8004c0c:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8004c10:	f803 2c70 	strb.w	r2, [r3, #-112]
			zone_cfg.user_zones[i].y_centre = y_centre;
 8004c14:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8004c18:	3306      	adds	r3, #6
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	3380      	adds	r3, #128	; 0x80
 8004c1e:	443b      	add	r3, r7
 8004c20:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8004c24:	f803 2c6f 	strb.w	r2, [r3, #-111]
			zone_cfg.user_zones[i].width = width;
 8004c28:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8004c2c:	3306      	adds	r3, #6
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	3380      	adds	r3, #128	; 0x80
 8004c32:	443b      	add	r3, r7
 8004c34:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 8004c38:	f803 2c6e 	strb.w	r2, [r3, #-110]
			zone_cfg.user_zones[i].height = height;
 8004c3c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8004c40:	3306      	adds	r3, #6
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	3380      	adds	r3, #128	; 0x80
 8004c46:	443b      	add	r3, r7
 8004c48:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8004c4c:	f803 2c6d 	strb.w	r2, [r3, #-109]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8004c50:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8004c54:	3301      	adds	r3, #1
 8004c56:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d38e      	bcc.n	8004b84 <VL53L1_SetROI+0x6c>
 8004c66:	e000      	b.n	8004c6a <VL53L1_SetROI+0x152>
				break;
 8004c68:	bf00      	nop
		}
	}

	if (Status == VL53L1_ERROR_NONE)
 8004c6a:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d108      	bne.n	8004c84 <VL53L1_SetROI+0x16c>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 8004c72:	f107 030c 	add.w	r3, r7, #12
 8004c76:	4619      	mov	r1, r3
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f002 fa8c 	bl	8007196 <VL53L1_set_zone_config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	LOG_FUNCTION_END(Status);
	return Status;
 8004c84:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3780      	adds	r7, #128	; 0x80
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8004ca2:	7afb      	ldrb	r3, [r7, #11]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f002 f9e3 	bl	8007074 <VL53L1_get_sequence_config_bit>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8004cb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <VL53L1_StartMeasurement>:




VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	77fb      	strb	r3, [r7, #31]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;
	uint8_t i;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3318      	adds	r3, #24
 8004cd0:	61bb      	str	r3, [r7, #24]


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	7edb      	ldrb	r3, [r3, #27]
 8004cd6:	75fb      	strb	r3, [r7, #23]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
 8004cda:	2b40      	cmp	r3, #64	; 0x40
 8004cdc:	d002      	beq.n	8004ce4 <VL53L1_StartMeasurement+0x24>
		VL53L1_load_patch(Dev);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f001 fc8e 	bl	8006600 <VL53L1_load_patch>
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	77bb      	strb	r3, [r7, #30]
 8004ce8:	e01a      	b.n	8004d20 <VL53L1_StartMeasurement+0x60>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8004cea:	7fbb      	ldrb	r3, [r7, #30]
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8004cf2:	330c      	adds	r3, #12
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8004cfa:	7fbb      	ldrb	r3, [r7, #30]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004d04:	3320      	adds	r3, #32
 8004d06:	22ff      	movs	r2, #255	; 0xff
 8004d08:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8004d0a:	7fbb      	ldrb	r3, [r7, #30]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004d14:	3324      	adds	r3, #36	; 0x24
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8004d1a:	7fbb      	ldrb	r3, [r7, #30]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	77bb      	strb	r3, [r7, #30]
 8004d20:	7fbb      	ldrb	r3, [r7, #30]
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d9e1      	bls.n	8004cea <VL53L1_StartMeasurement+0x2a>
	}
	pdev->PreviousStreamCount = 0;
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	pdev->PreviousRangeActiveResults = 0;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004d44:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 8004d48:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 8004d4a:	7dbb      	ldrb	r3, [r7, #22]
 8004d4c:	2b63      	cmp	r3, #99	; 0x63
 8004d4e:	dc12      	bgt.n	8004d76 <VL53L1_StartMeasurement+0xb6>
 8004d50:	2b62      	cmp	r3, #98	; 0x62
 8004d52:	da0d      	bge.n	8004d70 <VL53L1_StartMeasurement+0xb0>
 8004d54:	2b05      	cmp	r3, #5
 8004d56:	dc0e      	bgt.n	8004d76 <VL53L1_StartMeasurement+0xb6>
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	da09      	bge.n	8004d70 <VL53L1_StartMeasurement+0xb0>
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	dc02      	bgt.n	8004d66 <VL53L1_StartMeasurement+0xa6>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	da05      	bge.n	8004d70 <VL53L1_StartMeasurement+0xb0>
 8004d64:	e007      	b.n	8004d76 <VL53L1_StartMeasurement+0xb6>
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d105      	bne.n	8004d76 <VL53L1_StartMeasurement+0xb6>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	77fb      	strb	r3, [r7, #31]
		break;
 8004d6e:	e004      	b.n	8004d7a <VL53L1_StartMeasurement+0xba>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8004d70:	23f2      	movs	r3, #242	; 0xf2
 8004d72:	77fb      	strb	r3, [r7, #31]
		break;
 8004d74:	e001      	b.n	8004d7a <VL53L1_StartMeasurement+0xba>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8004d76:	23fd      	movs	r3, #253	; 0xfd
 8004d78:	77fb      	strb	r3, [r7, #31]
	}


	if ((Status == VL53L1_ERROR_NONE) &&
 8004d7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d11f      	bne.n	8004dc2 <VL53L1_StartMeasurement+0x102>
 8004d82:	7dfb      	ldrb	r3, [r7, #23]
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d11c      	bne.n	8004dc2 <VL53L1_StartMeasurement+0x102>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004d88:	f107 0310 	add.w	r3, r7, #16
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff fcc0 	bl	8004714 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8004d94:	4603      	mov	r3, r0
 8004d96:	757b      	strb	r3, [r7, #21]
				&MTBus);

		MTBus /= 1000;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	4a18      	ldr	r2, [pc, #96]	; (8004dfc <VL53L1_StartMeasurement+0x13c>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	099b      	lsrs	r3, r3, #6
 8004da2:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004da4:	f107 030c 	add.w	r3, r7, #12
 8004da8:	4619      	mov	r1, r3
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff fda2 	bl	80048f4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8004db0:	4603      	mov	r3, r0
 8004db2:	757b      	strb	r3, [r7, #21]
				&IMPms);

		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1d1a      	adds	r2, r3, #4
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d901      	bls.n	8004dc2 <VL53L1_StartMeasurement+0x102>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8004dbe:	23fc      	movs	r3, #252	; 0xfc
 8004dc0:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE)
 8004dc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d107      	bne.n	8004dda <VL53L1_StartMeasurement+0x11a>
		Status = VL53L1_init_and_start_range(
 8004dca:	7dfb      	ldrb	r3, [r7, #23]
 8004dcc:	2206      	movs	r2, #6
 8004dce:	4619      	mov	r1, r3
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f002 ff97 	bl	8007d04 <VL53L1_init_and_start_range>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	77fb      	strb	r3, [r7, #31]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);


	if (Status == VL53L1_ERROR_NONE)
 8004dda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d105      	bne.n	8004dee <VL53L1_StartMeasurement+0x12e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004de8:	2204      	movs	r2, #4
 8004dea:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	LOG_FUNCTION_END(Status);
	return Status;
 8004dee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	10624dd3 	.word	0x10624dd3

08004e00 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f003 fa47 	bl	80082a0 <VL53L1_stop_range>
 8004e12:	4603      	mov	r3, r0
 8004e14:	73fb      	strb	r3, [r7, #15]
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	7edb      	ldrb	r3, [r3, #27]
 8004e1a:	73bb      	strb	r3, [r7, #14]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8004e1c:	7bbb      	ldrb	r3, [r7, #14]
 8004e1e:	2b40      	cmp	r3, #64	; 0x40
 8004e20:	d002      	beq.n	8004e28 <VL53L1_StopMeasurement+0x28>
		VL53L1_unload_patch(Dev);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f001 fd1a 	bl	800685c <VL53L1_unload_patch>

	if (Status == VL53L1_ERROR_NONE)
 8004e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d105      	bne.n	8004e3c <VL53L1_StopMeasurement+0x3c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004e36:	2203      	movs	r2, #3
 8004e38:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	LOG_FUNCTION_END(Status);
	return Status;
 8004e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004e50:	2300      	movs	r3, #0
 8004e52:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	7edb      	ldrb	r3, [r3, #27]
 8004e58:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8004e5a:	7bbb      	ldrb	r3, [r7, #14]
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f003 ff4b 	bl	8008cfa <VL53L1_clear_interrupt_and_enable_next_range>
 8004e64:	4603      	mov	r3, r0
 8004e66:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8004e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8004e82:	6839      	ldr	r1, [r7, #0]
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f011 f8ac 	bl	8015fe2 <VL53L1_is_new_data_ready>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <GenNewPresetMode>:
}

static void GenNewPresetMode(int16_t RefRange,
		VL53L1_DistanceModes InternalDistanceMode,
		VL53L1_DistanceModes *pNewDistanceMode)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b085      	sub	sp, #20
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	603a      	str	r2, [r7, #0]
 8004ea4:	80fb      	strh	r3, [r7, #6]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	717b      	strb	r3, [r7, #5]
	uint16_t HRLI = 600;
 8004eaa:	f44f 7316 	mov.w	r3, #600	; 0x258
 8004eae:	81fb      	strh	r3, [r7, #14]
	uint16_t HRLH = 700;
 8004eb0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8004eb4:	81bb      	strh	r3, [r7, #12]
	uint16_t MRLI = 1400;
 8004eb6:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8004eba:	817b      	strh	r3, [r7, #10]
	uint16_t MRLH = 1500;
 8004ebc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004ec0:	813b      	strh	r3, [r7, #8]

	switch (InternalDistanceMode) {
 8004ec2:	797b      	ldrb	r3, [r7, #5]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d002      	beq.n	8004ece <GenNewPresetMode+0x34>
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d012      	beq.n	8004ef2 <GenNewPresetMode+0x58>
 8004ecc:	e023      	b.n	8004f16 <GenNewPresetMode+0x7c>
	case VL53L1_DISTANCEMODE_SHORT:

		if (RefRange > MRLH)
 8004ece:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ed2:	893b      	ldrh	r3, [r7, #8]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	dd03      	ble.n	8004ee0 <GenNewPresetMode+0x46>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2203      	movs	r2, #3
 8004edc:	701a      	strb	r2, [r3, #0]
		else if (RefRange > HRLH)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8004ede:	e02c      	b.n	8004f3a <GenNewPresetMode+0xa0>
		else if (RefRange > HRLH)
 8004ee0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ee4:	89bb      	ldrh	r3, [r7, #12]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	dd27      	ble.n	8004f3a <GenNewPresetMode+0xa0>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2202      	movs	r2, #2
 8004eee:	701a      	strb	r2, [r3, #0]
		break;
 8004ef0:	e023      	b.n	8004f3a <GenNewPresetMode+0xa0>
	case VL53L1_DISTANCEMODE_MEDIUM:

		if (RefRange > MRLH)
 8004ef2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ef6:	893b      	ldrh	r3, [r7, #8]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	dd03      	ble.n	8004f04 <GenNewPresetMode+0x6a>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2203      	movs	r2, #3
 8004f00:	701a      	strb	r2, [r3, #0]
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
 8004f02:	e01c      	b.n	8004f3e <GenNewPresetMode+0xa4>
		else if (RefRange < HRLI)
 8004f04:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f08:	89fb      	ldrh	r3, [r7, #14]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	da17      	bge.n	8004f3e <GenNewPresetMode+0xa4>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]
		break;
 8004f14:	e013      	b.n	8004f3e <GenNewPresetMode+0xa4>
	default:

		if (RefRange < HRLI)
 8004f16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f1a:	89fb      	ldrh	r3, [r7, #14]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	da03      	bge.n	8004f28 <GenNewPresetMode+0x8e>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2201      	movs	r2, #1
 8004f24:	701a      	strb	r2, [r3, #0]
		else if (RefRange < MRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8004f26:	e00c      	b.n	8004f42 <GenNewPresetMode+0xa8>
		else if (RefRange < MRLI)
 8004f28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f2c:	897b      	ldrh	r3, [r7, #10]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	da07      	bge.n	8004f42 <GenNewPresetMode+0xa8>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2202      	movs	r2, #2
 8004f36:	701a      	strb	r2, [r3, #0]
		break;
 8004f38:	e003      	b.n	8004f42 <GenNewPresetMode+0xa8>
		break;
 8004f3a:	bf00      	nop
 8004f3c:	e002      	b.n	8004f44 <GenNewPresetMode+0xaa>
		break;
 8004f3e:	bf00      	nop
 8004f40:	e000      	b.n	8004f44 <GenNewPresetMode+0xaa>
		break;
 8004f42:	bf00      	nop
	}
}
 8004f44:	bf00      	nop
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <CheckAndChangeDistanceMode>:
static void CheckAndChangeDistanceMode(VL53L1_DEV Dev,
		VL53L1_TargetRangeData_t *pRangeData,
		int16_t Ambient100DmaxMm,
		VL53L1_DistanceModes *pNewDistanceMode
)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08a      	sub	sp, #40	; 0x28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	603b      	str	r3, [r7, #0]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	80fb      	strh	r3, [r7, #6]
	VL53L1_DistanceModes DistanceMode;
	uint8_t RangeStatus = pRangeData->RangeStatus;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	7ddb      	ldrb	r3, [r3, #23]
 8004f64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DmaxValid;
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 8004f68:	4b28      	ldr	r3, [pc, #160]	; (800500c <CheckAndChangeDistanceMode+0xbc>)
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	623b      	str	r3, [r7, #32]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3318      	adds	r3, #24
 8004f72:	61fb      	str	r3, [r7, #28]
	int32_t  tmpint32;


	switch (RangeStatus) {
 8004f74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f78:	2bff      	cmp	r3, #255	; 0xff
 8004f7a:	d042      	beq.n	8005002 <CheckAndChangeDistanceMode+0xb2>
 8004f7c:	2bff      	cmp	r3, #255	; 0xff
 8004f7e:	dc07      	bgt.n	8004f90 <CheckAndChangeDistanceMode+0x40>
 8004f80:	2b07      	cmp	r3, #7
 8004f82:	dc02      	bgt.n	8004f8a <CheckAndChangeDistanceMode+0x3a>
 8004f84:	2b06      	cmp	r3, #6
 8004f86:	da3c      	bge.n	8005002 <CheckAndChangeDistanceMode+0xb2>
	case VL53L1_RANGESTATUS_SYNCRONISATION_INT:
	case VL53L1_RANGESTATUS_NONE:
		return;
	default:

		break;
 8004f88:	e002      	b.n	8004f90 <CheckAndChangeDistanceMode+0x40>
 8004f8a:	3b0a      	subs	r3, #10
	switch (RangeStatus) {
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d938      	bls.n	8005002 <CheckAndChangeDistanceMode+0xb2>
		break;
 8004f90:	bf00      	nop
	}

	DmaxValid = 1;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tmpint32 = pdev->hist_data.VL53L1_p_004;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8004f9e:	61bb      	str	r3, [r7, #24]
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	db03      	blt.n	8004fb0 <CheckAndChangeDistanceMode+0x60>
 8004fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d102      	bne.n	8004fb6 <CheckAndChangeDistanceMode+0x66>
		DmaxValid = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	DistanceMode = VL53L1DevDataGet(Dev,
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004fbc:	f893 3a6e 	ldrb.w	r3, [r3, #2670]	; 0xa6e
 8004fc0:	75fb      	strb	r3, [r7, #23]
			CurrentParameters.DistanceMode);

	*pNewDistanceMode = DistanceMode;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	7dfa      	ldrb	r2, [r7, #23]
 8004fc6:	701a      	strb	r2, [r3, #0]

	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8004fc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d108      	bne.n	8004fe2 <CheckAndChangeDistanceMode+0x92>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004fd6:	7df9      	ldrb	r1, [r7, #23]
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff ff5d 	bl	8004e9a <GenNewPresetMode>
 8004fe0:	e010      	b.n	8005004 <CheckAndChangeDistanceMode+0xb4>
				DistanceMode, pNewDistanceMode);
	else {
		if (DmaxValid)
 8004fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <CheckAndChangeDistanceMode+0xaa>
			GenNewPresetMode(Ambient100DmaxMm,
 8004fea:	7df9      	ldrb	r1, [r7, #23]
 8004fec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff ff51 	bl	8004e9a <GenNewPresetMode>
 8004ff8:	e004      	b.n	8005004 <CheckAndChangeDistanceMode+0xb4>
					DistanceMode, pNewDistanceMode);
		else
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2203      	movs	r2, #3
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	e000      	b.n	8005004 <CheckAndChangeDistanceMode+0xb4>
		return;
 8005002:	bf00      	nop
	}
}
 8005004:	3728      	adds	r7, #40	; 0x28
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	2000001c 	.word	0x2000001c

08005010 <ComputeRQL>:

static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8005010:	b480      	push	{r7}
 8005012:	b08d      	sub	sp, #52	; 0x34
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	603a      	str	r2, [r7, #0]
 800501a:	71fb      	strb	r3, [r7, #7]
 800501c:	460b      	mov	r3, r1
 800501e:	71bb      	strb	r3, [r7, #6]
	int16_t T_Wide = 150;
 8005020:	2396      	movs	r3, #150	; 0x96
 8005022:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t SRL = 300;
 8005024:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005028:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t SRAS = 30;
 800502a:	231e      	movs	r3, #30
 800502c:	843b      	strh	r3, [r7, #32]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587;
 800502e:	4b39      	ldr	r3, [pc, #228]	; (8005114 <ComputeRQL+0x104>)
 8005030:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157;
 8005032:	4b39      	ldr	r3, [pc, #228]	; (8005118 <ComputeRQL+0x108>)
 8005034:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;
 8005036:	f641 139a 	movw	r3, #6554	; 0x199a
 800503a:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d103      	bne.n	800504a <ComputeRQL+0x3a>
		returnvalue = 0;
 8005042:	2300      	movs	r3, #0
 8005044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005048:	e05b      	b.n	8005102 <ComputeRQL+0xf2>
	else if (((presults_data->max_range_mm -
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8005050:	461a      	mov	r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
	else if (((presults_data->max_range_mm -
 8005058:	1ad2      	subs	r2, r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 800505a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	else if (((presults_data->max_range_mm -
 800505e:	429a      	cmp	r2, r3
 8005060:	da02      	bge.n	8005068 <ComputeRQL+0x58>
			presults_data->min_range_mm) >= T_Wide) ||
 8005062:	79bb      	ldrb	r3, [r7, #6]
 8005064:	2b07      	cmp	r3, #7
 8005066:	d103      	bne.n	8005070 <ComputeRQL+0x60>
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
 8005068:	2332      	movs	r3, #50	; 0x32
 800506a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800506e:	e048      	b.n	8005102 <ComputeRQL+0xf2>
	else {
		if (presults_data->median_range_mm < SRL)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005076:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800507a:	429a      	cmp	r2, r3
 800507c:	dd03      	ble.n	8005086 <ComputeRQL+0x76>
			RAS = SRAS * 65536;
 800507e:	8c3b      	ldrh	r3, [r7, #32]
 8005080:	041b      	lsls	r3, r3, #16
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005084:	e007      	b.n	8005096 <ComputeRQL+0x86>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800508c:	461a      	mov	r2, r3
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	fb02 f303 	mul.w	r3, r2, r3
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c


		if (RAS != 0) {
 8005096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d020      	beq.n	80050de <ComputeRQL+0xce>
			partial = (GGm * presults_data->VL53L1_p_005);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80050a0:	461a      	mov	r2, r3
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	fb02 f303 	mul.w	r3, r2, r3
 80050a8:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 80050aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ac:	085b      	lsrs	r3, r3, #1
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4413      	add	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050bc:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	041b      	lsls	r3, r3, #16
 80050c2:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d804      	bhi.n	80050d6 <ComputeRQL+0xc6>
				SRQL = GI - partial;
 80050cc:	69fa      	ldr	r2, [r7, #28]
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80050d4:	e006      	b.n	80050e4 <ComputeRQL+0xd4>
			else
				SRQL = 50 * 65536;
 80050d6:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28
 80050dc:	e002      	b.n	80050e4 <ComputeRQL+0xd4>
		} else
			SRQL = 100 * 65536;
 80050de:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 80050e2:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	0c1b      	lsrs	r3, r3, #16
 80050e8:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b32      	cmp	r3, #50	; 0x32
 80050ee:	d905      	bls.n	80050fc <ComputeRQL+0xec>
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b64      	cmp	r3, #100	; 0x64
 80050f4:	bf28      	it	cs
 80050f6:	2364      	movcs	r3, #100	; 0x64
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	e000      	b.n	80050fe <ComputeRQL+0xee>
 80050fc:	2332      	movs	r3, #50	; 0x32
 80050fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8005102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005106:	4618      	mov	r0, r3
 8005108:	3734      	adds	r7, #52	; 0x34
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	0075b333 	.word	0x0075b333
 8005118:	0030cccd 	.word	0x0030cccd

0800511c <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8005126:	79fb      	ldrb	r3, [r7, #7]
 8005128:	3b04      	subs	r3, #4
 800512a:	2b0f      	cmp	r3, #15
 800512c:	d83d      	bhi.n	80051aa <ConvertStatusLite+0x8e>
 800512e:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <ConvertStatusLite+0x18>)
 8005130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005134:	08005187 	.word	0x08005187
 8005138:	08005181 	.word	0x08005181
 800513c:	0800518d 	.word	0x0800518d
 8005140:	08005193 	.word	0x08005193
 8005144:	0800519f 	.word	0x0800519f
 8005148:	080051a5 	.word	0x080051a5
 800514c:	080051ab 	.word	0x080051ab
 8005150:	080051ab 	.word	0x080051ab
 8005154:	08005199 	.word	0x08005199
 8005158:	080051ab 	.word	0x080051ab
 800515c:	080051ab 	.word	0x080051ab
 8005160:	080051ab 	.word	0x080051ab
 8005164:	080051ab 	.word	0x080051ab
 8005168:	080051ab 	.word	0x080051ab
 800516c:	08005175 	.word	0x08005175
 8005170:	0800517b 	.word	0x0800517b
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8005174:	230a      	movs	r3, #10
 8005176:	73fb      	strb	r3, [r7, #15]
		break;
 8005178:	e019      	b.n	80051ae <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800517a:	2306      	movs	r3, #6
 800517c:	73fb      	strb	r3, [r7, #15]
		break;
 800517e:	e016      	b.n	80051ae <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8005180:	2304      	movs	r3, #4
 8005182:	73fb      	strb	r3, [r7, #15]
		break;
 8005184:	e013      	b.n	80051ae <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8005186:	2302      	movs	r3, #2
 8005188:	73fb      	strb	r3, [r7, #15]
		break;
 800518a:	e010      	b.n	80051ae <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800518c:	2301      	movs	r3, #1
 800518e:	73fb      	strb	r3, [r7, #15]
		break;
 8005190:	e00d      	b.n	80051ae <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8005192:	2307      	movs	r3, #7
 8005194:	73fb      	strb	r3, [r7, #15]
		break;
 8005196:	e00a      	b.n	80051ae <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8005198:	2309      	movs	r3, #9
 800519a:	73fb      	strb	r3, [r7, #15]
		break;
 800519c:	e007      	b.n	80051ae <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800519e:	2303      	movs	r3, #3
 80051a0:	73fb      	strb	r3, [r7, #15]
		break;
 80051a2:	e004      	b.n	80051ae <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80051a4:	2300      	movs	r3, #0
 80051a6:	73fb      	strb	r3, [r7, #15]
		break;
 80051a8:	e001      	b.n	80051ae <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 80051aa:	23ff      	movs	r3, #255	; 0xff
 80051ac:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <ConvertStatusHisto>:


static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	4603      	mov	r3, r0
 80051c4:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	3b05      	subs	r3, #5
 80051ca:	2b12      	cmp	r3, #18
 80051cc:	d840      	bhi.n	8005250 <ConvertStatusHisto+0x94>
 80051ce:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <ConvertStatusHisto+0x18>)
 80051d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d4:	08005221 	.word	0x08005221
 80051d8:	08005227 	.word	0x08005227
 80051dc:	08005233 	.word	0x08005233
 80051e0:	08005251 	.word	0x08005251
 80051e4:	0800524b 	.word	0x0800524b
 80051e8:	08005251 	.word	0x08005251
 80051ec:	08005251 	.word	0x08005251
 80051f0:	08005251 	.word	0x08005251
 80051f4:	08005251 	.word	0x08005251
 80051f8:	08005251 	.word	0x08005251
 80051fc:	08005251 	.word	0x08005251
 8005200:	08005251 	.word	0x08005251
 8005204:	08005251 	.word	0x08005251
 8005208:	08005251 	.word	0x08005251
 800520c:	0800522d 	.word	0x0800522d
 8005210:	0800523f 	.word	0x0800523f
 8005214:	08005251 	.word	0x08005251
 8005218:	08005245 	.word	0x08005245
 800521c:	08005239 	.word	0x08005239
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8005220:	2304      	movs	r3, #4
 8005222:	73fb      	strb	r3, [r7, #15]
		break;
 8005224:	e016      	b.n	8005254 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8005226:	2301      	movs	r3, #1
 8005228:	73fb      	strb	r3, [r7, #15]
		break;
 800522a:	e013      	b.n	8005254 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800522c:	2306      	movs	r3, #6
 800522e:	73fb      	strb	r3, [r7, #15]
		break;
 8005230:	e010      	b.n	8005254 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8005232:	2307      	movs	r3, #7
 8005234:	73fb      	strb	r3, [r7, #15]
		break;
 8005236:	e00d      	b.n	8005254 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8005238:	230c      	movs	r3, #12
 800523a:	73fb      	strb	r3, [r7, #15]
		break;
 800523c:	e00a      	b.n	8005254 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800523e:	2307      	movs	r3, #7
 8005240:	73fb      	strb	r3, [r7, #15]
		break;
 8005242:	e007      	b.n	8005254 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8005244:	230b      	movs	r3, #11
 8005246:	73fb      	strb	r3, [r7, #15]
		break;
 8005248:	e004      	b.n	8005254 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800524a:	2300      	movs	r3, #0
 800524c:	73fb      	strb	r3, [r7, #15]
		break;
 800524e:	e001      	b.n	8005254 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8005250:	23ff      	movs	r3, #255	; 0xff
 8005252:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8005254:	7bfb      	ldrb	r3, [r7, #15]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop

08005264 <SetTargetData>:

static VL53L1_Error SetTargetData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53L1_range_data_t *presults_data,
	VL53L1_TargetRangeData_t *pRangeData)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b092      	sub	sp, #72	; 0x48
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	4608      	mov	r0, r1
 800526e:	4611      	mov	r1, r2
 8005270:	461a      	mov	r2, r3
 8005272:	4603      	mov	r3, r0
 8005274:	70fb      	strb	r3, [r7, #3]
 8005276:	460b      	mov	r3, r1
 8005278:	70bb      	strb	r3, [r7, #2]
 800527a:	4613      	mov	r3, r2
 800527c:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800527e:	2300      	movs	r3, #0
 8005280:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	VL53L1_LLDriverData_t *pdev =
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3318      	adds	r3, #24
 8005288:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_tuning_parm_storage_t *tp =
 800528a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005290:	63bb      	str	r3, [r7, #56]	; 0x38
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	VL53L1_PresetModes PresetMode;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;
	int32_t TuningMinValidSignal;
	FixPoint1616_t MinValidSignal;

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8005296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005298:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 80052a4:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff feaf 	bl	8005010 <ComputeRQL>
 80052b2:	4603      	mov	r3, r0
 80052b4:	461a      	mov	r2, r3
 80052b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052b8:	701a      	strb	r2, [r3, #0]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80052ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052bc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80052be:	025b      	lsls	r3, r3, #9
 80052c0:	633b      	str	r3, [r7, #48]	; 0x30
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 80052c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052c6:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80052c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80052cc:	025b      	lsls	r3, r3, #9
 80052ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 80052d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d4:	60da      	str	r2, [r3, #12]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80052d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052d8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80052da:	025b      	lsls	r3, r3, #9
 80052dc:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);

	pRangeData->SigmaMilliMeter = TempFix1616;
 80052de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e2:	611a      	str	r2, [r3, #16]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80052e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e6:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80052ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052ec:	829a      	strh	r2, [r3, #20]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 80052ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052f0:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80052f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052f6:	805a      	strh	r2, [r3, #2]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 80052f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052fa:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 80052fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005300:	809a      	strh	r2, [r3, #4]

	pRangeData->RangeFractionalPart = 0;
 8005302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005304:	2200      	movs	r2, #0
 8005306:	759a      	strb	r2, [r3, #22]


	switch (device_status) {
 8005308:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800530c:	2b11      	cmp	r3, #17
 800530e:	d009      	beq.n	8005324 <SetTargetData+0xc0>
 8005310:	2b11      	cmp	r3, #17
 8005312:	dc0f      	bgt.n	8005334 <SetTargetData+0xd0>
 8005314:	2b03      	cmp	r3, #3
 8005316:	dc02      	bgt.n	800531e <SetTargetData+0xba>
 8005318:	2b00      	cmp	r3, #0
 800531a:	dc03      	bgt.n	8005324 <SetTargetData+0xc0>
 800531c:	e00a      	b.n	8005334 <SetTargetData+0xd0>
 800531e:	2b0d      	cmp	r3, #13
 8005320:	d004      	beq.n	800532c <SetTargetData+0xc8>
 8005322:	e007      	b.n	8005334 <SetTargetData+0xd0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8005324:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005326:	2205      	movs	r2, #5
 8005328:	75da      	strb	r2, [r3, #23]
		break;
 800532a:	e006      	b.n	800533a <SetTargetData+0xd6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800532c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800532e:	220d      	movs	r2, #13
 8005330:	75da      	strb	r2, [r3, #23]
		break;
 8005332:	e002      	b.n	800533a <SetTargetData+0xd6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8005334:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005336:	2200      	movs	r2, #0
 8005338:	75da      	strb	r2, [r3, #23]
	}


	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800533a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800533c:	7ddb      	ldrb	r3, [r3, #23]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d117      	bne.n	8005372 <SetTargetData+0x10e>
 8005342:	78fb      	ldrb	r3, [r7, #3]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d114      	bne.n	8005372 <SetTargetData+0x10e>
		(active_results == 0)) {
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 8005348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800534a:	22ff      	movs	r2, #255	; 0xff
 800534c:	75da      	strb	r2, [r3, #23]
		pRangeData->SignalRateRtnMegaCps = 0;
 800534e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005350:	2200      	movs	r2, #0
 8005352:	609a      	str	r2, [r3, #8]
		pRangeData->SigmaMilliMeter = 0;
 8005354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005356:	2200      	movs	r2, #0
 8005358:	611a      	str	r2, [r3, #16]
		pRangeData->RangeMilliMeter = 8191;
 800535a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800535c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8005360:	829a      	strh	r2, [r3, #20]
		pRangeData->RangeMaxMilliMeter = 8191;
 8005362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005364:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8005368:	805a      	strh	r2, [r3, #2]
		pRangeData->RangeMinMilliMeter = 8191;
 800536a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800536c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8005370:	809a      	strh	r2, [r3, #4]
	}


	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8005372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005374:	7ddb      	ldrb	r3, [r3, #23]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d125      	bne.n	80053c6 <SetTargetData+0x162>
		PresetMode = VL53L1DevDataGet(Dev,
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005380:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8005384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				CurrentParameters.PresetMode);
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 8005388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800538c:	2b02      	cmp	r3, #2
 800538e:	d007      	beq.n	80053a0 <SetTargetData+0x13c>
 8005390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005394:	2b01      	cmp	r3, #1
 8005396:	d003      	beq.n	80053a0 <SetTargetData+0x13c>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 8005398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800539c:	2b09      	cmp	r3, #9
 800539e:	d109      	bne.n	80053b4 <SetTargetData+0x150>
			(PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE))
			pRangeData->RangeStatus =
				ConvertStatusHisto(FilteredRangeStatus);
 80053a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff ff09 	bl	80051bc <ConvertStatusHisto>
 80053aa:	4603      	mov	r3, r0
 80053ac:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 80053ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053b0:	75da      	strb	r2, [r3, #23]
 80053b2:	e008      	b.n	80053c6 <SetTargetData+0x162>
		else
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 80053b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff feaf 	bl	800511c <ConvertStatusLite>
 80053be:	4603      	mov	r3, r0
 80053c0:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 80053c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053c4:	75da      	strb	r2, [r3, #23]
	}


	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80053c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80053ca:	025b      	lsls	r3, r3, #9
 80053cc:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053d4:	461a      	mov	r2, r3
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80053dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053de:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80053e0:	025b      	lsls	r3, r3, #9
 80053e2:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053ea:	461a      	mov	r2, r3
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	f8c2 3a84 	str.w	r3, [r2, #2692]	; 0xa84
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);



	VL53L1_GetLimitCheckValue(Dev,
 80053f2:	f107 0310 	add.w	r3, r7, #16
 80053f6:	461a      	mov	r2, r3
 80053f8:	2100      	movs	r1, #0
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7ff fb2d 	bl	8004a5a <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8005400:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005404:	2b06      	cmp	r3, #6
 8005406:	bf0c      	ite	eq
 8005408:	2301      	moveq	r3, #1
 800540a:	2300      	movne	r3, #0
 800540c:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 800540e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_GetLimitCheckEnable(Dev,
 8005412:	f107 0315 	add.w	r3, r7, #21
 8005416:	461a      	mov	r2, r3
 8005418:	2100      	movs	r1, #0
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff faf8 	bl	8004a10 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8005420:	7d7b      	ldrb	r3, [r7, #21]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d105      	bne.n	8005432 <SetTargetData+0x1ce>
 8005426:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800542a:	2b01      	cmp	r3, #1
 800542c:	d101      	bne.n	8005432 <SetTargetData+0x1ce>
 800542e:	2301      	movs	r3, #1
 8005430:	e000      	b.n	8005434 <SetTargetData+0x1d0>
 8005432:	2300      	movs	r3, #0
 8005434:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800543e:	461a      	mov	r2, r3
 8005440:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005444:	f882 3a76 	strb.w	r3, [r2, #2678]	; 0xa76
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);


	VL53L1_GetLimitCheckValue(Dev,
 8005448:	f107 0310 	add.w	r3, r7, #16
 800544c:	461a      	mov	r2, r3
 800544e:	2101      	movs	r1, #1
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff fb02 	bl	8004a5a <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8005456:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800545a:	2b04      	cmp	r3, #4
 800545c:	bf0c      	ite	eq
 800545e:	2301      	moveq	r3, #1
 8005460:	2300      	movne	r3, #0
 8005462:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8005464:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	VL53L1_GetLimitCheckEnable(Dev,
 8005468:	f107 0315 	add.w	r3, r7, #21
 800546c:	461a      	mov	r2, r3
 800546e:	2101      	movs	r1, #1
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff facd 	bl	8004a10 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8005476:	7d7b      	ldrb	r3, [r7, #21]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d105      	bne.n	8005488 <SetTargetData+0x224>
 800547c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <SetTargetData+0x224>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <SetTargetData+0x226>
 8005488:	2300      	movs	r3, #0
 800548a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005494:	461a      	mov	r2, r3
 8005496:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800549a:	f882 3a77 	strb.w	r3, [r2, #2679]	; 0xa77
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800549e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054a0:	8a9b      	ldrh	r3, [r3, #20]
 80054a2:	847b      	strh	r3, [r7, #34]	; 0x22
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80054a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054a6:	7ddb      	ldrb	r3, [r3, #23]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d110      	bne.n	80054ce <SetTargetData+0x26a>
 80054ac:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	da0c      	bge.n	80054ce <SetTargetData+0x26a>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 80054b4:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80054b8:	4ba3      	ldr	r3, [pc, #652]	; (8005748 <SetTargetData+0x4e4>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	429a      	cmp	r2, r3
 80054be:	da03      	bge.n	80054c8 <SetTargetData+0x264>
			pRangeData->RangeStatus =
 80054c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054c2:	220e      	movs	r2, #14
 80054c4:	75da      	strb	r2, [r3, #23]
 80054c6:	e002      	b.n	80054ce <SetTargetData+0x26a>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 80054c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054ca:	2200      	movs	r2, #0
 80054cc:	829a      	strh	r2, [r3, #20]
	}


	VL53L1_get_tuning_parm(Dev,
 80054ce:	f107 0308 	add.w	r3, r7, #8
 80054d2:	461a      	mov	r2, r3
 80054d4:	f248 01be 	movw	r1, #32958	; 0x80be
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f004 f943 	bl	8009764 <VL53L1_get_tuning_parm>
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS,
		&TuningMinValidSignal);
	MinValidSignal = (FixPoint1616_t)TuningMinValidSignal;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	61fb      	str	r3, [r7, #28]
	if ((iteration > 0) &&
 80054e2:	787b      	ldrb	r3, [r7, #1]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00b      	beq.n	8005500 <SetTargetData+0x29c>
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 80054e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054ea:	7ddb      	ldrb	r3, [r3, #23]
	if ((iteration > 0) &&
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d107      	bne.n	8005500 <SetTargetData+0x29c>
		(pRangeData->SignalRateRtnMegaCps < MinValidSignal))
 80054f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054f2:	689b      	ldr	r3, [r3, #8]
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d902      	bls.n	8005500 <SetTargetData+0x29c>
		pRangeData->RangeStatus =
 80054fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054fc:	220c      	movs	r2, #12
 80054fe:	75da      	strb	r2, [r3, #23]
			VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;




	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 8005500:	f107 030c 	add.w	r3, r7, #12
 8005504:	461a      	mov	r2, r3
 8005506:	f248 0191 	movw	r1, #32913	; 0x8091
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f004 f92a 	bl	8009764 <VL53L1_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8005510:	78bb      	ldrb	r3, [r7, #2]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	76fb      	strb	r3, [r7, #27]
	uwr_status = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 800551e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005520:	8a9b      	ldrh	r3, [r3, #20]
 8005522:	833b      	strh	r3, [r7, #24]
	AddOffset = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	pRangeData->ExtendedRange = 0;
 800552a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800552c:	2200      	movs	r2, #0
 800552e:	761a      	strb	r2, [r3, #24]

	if ((active_results != 1) ||
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d106      	bne.n	8005544 <SetTargetData+0x2e0>
		(pdev->PreviousRangeActiveResults != 1))
 8005536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005538:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800553c:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
	if ((active_results != 1) ||
 8005540:	2b01      	cmp	r3, #1
 8005542:	d001      	beq.n	8005548 <SetTargetData+0x2e4>
		ExtendedRangeEnabled = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 8250 	beq.w	80059f0 <SetTargetData+0x78c>
		(pRangeData->RangeStatus ==
 8005550:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005552:	7ddb      	ldrb	r3, [r3, #23]
	if (ExtendedRangeEnabled &&
 8005554:	2b07      	cmp	r3, #7
 8005556:	d004      	beq.n	8005562 <SetTargetData+0x2fe>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8005558:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800555a:	7ddb      	ldrb	r3, [r3, #23]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 800555c:	2b04      	cmp	r3, #4
 800555e:	f040 8247 	bne.w	80059f0 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8005562:	787b      	ldrb	r3, [r7, #1]
 8005564:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005566:	4413      	add	r3, r2
 8005568:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800556c:	3320      	adds	r3, #32
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b07      	cmp	r3, #7
 8005572:	d01c      	beq.n	80055ae <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8005574:	787b      	ldrb	r3, [r7, #1]
 8005576:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005578:	4413      	add	r3, r2
 800557a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800557e:	3320      	adds	r3, #32
 8005580:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8005582:	2b04      	cmp	r3, #4
 8005584:	d013      	beq.n	80055ae <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8005586:	787b      	ldrb	r3, [r7, #1]
 8005588:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800558a:	4413      	add	r3, r2
 800558c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8005590:	3320      	adds	r3, #32
 8005592:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8005594:	2b00      	cmp	r3, #0
 8005596:	f040 822b 	bne.w	80059f0 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 800559a:	787b      	ldrb	r3, [r7, #1]
 800559c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800559e:	4413      	add	r3, r2
 80055a0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80055a4:	3324      	adds	r3, #36	; 0x24
 80055a6:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_RANGE_VALID &&
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	f040 8221 	bne.w	80059f0 <SetTargetData+0x78c>
	{
		if (((pdev->PreviousStreamCount) ==
 80055ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055b4:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80055b8:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 80055ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055bc:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 80055c0:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d00c      	beq.n	80055e0 <SetTargetData+0x37c>
		|| ((pdev->PreviousStreamCount) ==
 80055c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055cc:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80055d0:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 80055d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d4:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 80055d8:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 80055da:	429a      	cmp	r2, r3
 80055dc:	f040 81dc 	bne.w	8005998 <SetTargetData+0x734>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 80055e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055e2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80055e6:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 80055e8:	787b      	ldrb	r3, [r7, #1]
 80055ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055ec:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80055f0:	330c      	adds	r3, #12
 80055f2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80055f6:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	82fb      	strh	r3, [r7, #22]

		uwr_status = 1;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		switch (pdev->preset_mode) {
 8005604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005606:	785b      	ldrb	r3, [r3, #1]
 8005608:	2b21      	cmp	r3, #33	; 0x21
 800560a:	d008      	beq.n	800561e <SetTargetData+0x3ba>
 800560c:	2b21      	cmp	r3, #33	; 0x21
 800560e:	f300 81bf 	bgt.w	8005990 <SetTargetData+0x72c>
 8005612:	2b1b      	cmp	r3, #27
 8005614:	f000 8113 	beq.w	800583e <SetTargetData+0x5da>
 8005618:	2b1e      	cmp	r3, #30
 800561a:	d004      	beq.n	8005626 <SetTargetData+0x3c2>
 800561c:	e1b8      	b.n	8005990 <SetTargetData+0x72c>
			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 800561e:	2300      	movs	r3, #0
 8005620:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8005624:	e1b9      	b.n	800599a <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 800562c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005630:	429a      	cmp	r2, r3
 8005632:	dd0f      	ble.n	8005654 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800563a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800563e:	429a      	cmp	r2, r3
 8005640:	da08      	bge.n	8005654 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8005642:	7efb      	ldrb	r3, [r7, #27]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d105      	bne.n	8005654 <SetTargetData+0x3f0>
					sequency == 1) {
					AddOffset =
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800564e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005652:	e0f3      	b.n	800583c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8005654:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565a:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 800565e:	425b      	negs	r3, r3
 8005660:	429a      	cmp	r2, r3
 8005662:	da10      	bge.n	8005686 <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8005664:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 800566e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8005670:	429a      	cmp	r2, r3
 8005672:	dd08      	ble.n	8005686 <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8005674:	7efb      	ldrb	r3, [r7, #27]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d105      	bne.n	8005686 <SetTargetData+0x422>
					sequency == 0) {
					AddOffset =
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8005680:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005684:	e0da      	b.n	800583c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 800568c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005690:	429a      	cmp	r2, r3
 8005692:	dd0f      	ble.n	80056b4 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8005694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005696:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 800569a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800569e:	429a      	cmp	r2, r3
 80056a0:	da08      	bge.n	80056b4 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80056a2:	7efb      	ldrb	r3, [r7, #27]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d105      	bne.n	80056b4 <SetTargetData+0x450>
					sequency == 0) {
					AddOffset =
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80056ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80056b2:	e0c3      	b.n	800583c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80056b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80056be:	425b      	negs	r3, r3
 80056c0:	429a      	cmp	r2, r3
 80056c2:	da10      	bge.n	80056e6 <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80056c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 80056ce:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80056d0:	429a      	cmp	r2, r3
 80056d2:	dd08      	ble.n	80056e6 <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80056d4:	7efb      	ldrb	r3, [r7, #27]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d105      	bne.n	80056e6 <SetTargetData+0x482>
					sequency == 1) {
					AddOffset =
 80056da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056dc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80056e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80056e4:	e0aa      	b.n	800583c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80056e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e8:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 80056ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	dd0f      	ble.n	8005714 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80056f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f6:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80056fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80056fe:	429a      	cmp	r2, r3
 8005700:	da08      	bge.n	8005714 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8005702:	7efb      	ldrb	r3, [r7, #27]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d105      	bne.n	8005714 <SetTargetData+0x4b0>
					sequency == 1) {
					AddOffset =
 8005708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800570e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005712:	e093      	b.n	800583c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8005714:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571a:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 800571e:	425b      	negs	r3, r3
 8005720:	429a      	cmp	r2, r3
 8005722:	da13      	bge.n	800574c <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8005724:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572a:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 800572e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8005730:	429a      	cmp	r2, r3
 8005732:	dd0b      	ble.n	800574c <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8005734:	7efb      	ldrb	r3, [r7, #27]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d108      	bne.n	800574c <SetTargetData+0x4e8>
					sequency == 0) {
					AddOffset =
 800573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573c:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8005740:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005744:	e07a      	b.n	800583c <SetTargetData+0x5d8>
 8005746:	bf00      	nop
 8005748:	2000001c 	.word	0x2000001c
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 800574c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574e:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8005752:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005756:	429a      	cmp	r2, r3
 8005758:	dd0f      	ble.n	800577a <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 800575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575c:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8005760:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005764:	429a      	cmp	r2, r3
 8005766:	da08      	bge.n	800577a <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8005768:	7efb      	ldrb	r3, [r7, #27]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d105      	bne.n	800577a <SetTargetData+0x516>
					sequency == 0) {
					AddOffset =
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8005774:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005778:	e060      	b.n	800583c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800577a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800577e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005780:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8005784:	425b      	negs	r3, r3
 8005786:	429a      	cmp	r2, r3
 8005788:	da10      	bge.n	80057ac <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800578a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005790:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8005794:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8005796:	429a      	cmp	r2, r3
 8005798:	dd08      	ble.n	80057ac <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800579a:	7efb      	ldrb	r3, [r7, #27]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d105      	bne.n	80057ac <SetTargetData+0x548>
					sequency == 1) {
					AddOffset =
 80057a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a2:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80057a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80057aa:	e047      	b.n	800583c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80057ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ae:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 80057b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	da0c      	bge.n	80057d4 <SetTargetData+0x570>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80057c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	dd05      	ble.n	80057d4 <SetTargetData+0x570>
					AddOffset =
 80057c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ca:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 80057ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80057d2:	e033      	b.n	800583c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_5_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 80057d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d6:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 80057da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80057de:	429a      	cmp	r2, r3
 80057e0:	dd0f      	ble.n	8005802 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 80057e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	da08      	bge.n	8005802 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 80057f0:	7efb      	ldrb	r3, [r7, #27]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d105      	bne.n	8005802 <SetTargetData+0x59e>
					sequency == 1) {
					AddOffset =
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80057fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005800:	e01c      	b.n	800583c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8005802:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 800580c:	425b      	negs	r3, r3
 800580e:	429a      	cmp	r2, r3
 8005810:	da10      	bge.n	8005834 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8005812:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 800581c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 800581e:	429a      	cmp	r2, r3
 8005820:	dd08      	ble.n	8005834 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8005822:	7efb      	ldrb	r3, [r7, #27]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d105      	bne.n	8005834 <SetTargetData+0x5d0>
					sequency == 0) {
					AddOffset =
 8005828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800582e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005832:	e003      	b.n	800583c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangea;
				}
				else
					uwr_status = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800583a:	e0ae      	b.n	800599a <SetTargetData+0x736>
 800583c:	e0ad      	b.n	800599a <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8005844:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005848:	429a      	cmp	r2, r3
 800584a:	dd0f      	ble.n	800586c <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8005852:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005856:	429a      	cmp	r2, r3
 8005858:	da08      	bge.n	800586c <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 800585a:	7efb      	ldrb	r3, [r7, #27]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d105      	bne.n	800586c <SetTargetData+0x608>
					sequency == 0) {
					AddOffset =
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8005866:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800586a:	e090      	b.n	800598e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 800586c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005872:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8005876:	425b      	negs	r3, r3
 8005878:	429a      	cmp	r2, r3
 800587a:	da10      	bge.n	800589e <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 800587c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005882:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8005886:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8005888:	429a      	cmp	r2, r3
 800588a:	dd08      	ble.n	800589e <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 800588c:	7efb      	ldrb	r3, [r7, #27]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d105      	bne.n	800589e <SetTargetData+0x63a>
					sequency == 1) {
					AddOffset =
 8005892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005894:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 8005898:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800589c:	e077      	b.n	800598e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 800589e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a0:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 80058a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	dd0f      	ble.n	80058cc <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80058ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ae:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80058b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	da08      	bge.n	80058cc <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80058ba:	7efb      	ldrb	r3, [r7, #27]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d105      	bne.n	80058cc <SetTargetData+0x668>
					sequency == 1) {
					AddOffset =
 80058c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c2:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 80058c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80058ca:	e060      	b.n	800598e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80058cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80058d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d2:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 80058d6:	425b      	negs	r3, r3
 80058d8:	429a      	cmp	r2, r3
 80058da:	da10      	bge.n	80058fe <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80058dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 80058e6:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80058e8:	429a      	cmp	r2, r3
 80058ea:	dd08      	ble.n	80058fe <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80058ec:	7efb      	ldrb	r3, [r7, #27]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d105      	bne.n	80058fe <SetTargetData+0x69a>
					sequency == 0) {
					AddOffset =
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 80058f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80058fc:	e047      	b.n	800598e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8005904:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005908:	429a      	cmp	r2, r3
 800590a:	da0c      	bge.n	8005926 <SetTargetData+0x6c2>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8005912:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005916:	429a      	cmp	r2, r3
 8005918:	dd05      	ble.n	8005926 <SetTargetData+0x6c2>
					AddOffset =
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 8005920:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005924:	e033      	b.n	800598e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 8005926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005928:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 800592c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005930:	429a      	cmp	r2, r3
 8005932:	dd0f      	ble.n	8005954 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8005934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005936:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 800593a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800593e:	429a      	cmp	r2, r3
 8005940:	da08      	bge.n	8005954 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8005942:	7efb      	ldrb	r3, [r7, #27]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d105      	bne.n	8005954 <SetTargetData+0x6f0>
					sequency == 1) {
					AddOffset =
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800594e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005952:	e01c      	b.n	800598e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8005954:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595a:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 800595e:	425b      	negs	r3, r3
 8005960:	429a      	cmp	r2, r3
 8005962:	da10      	bge.n	8005986 <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8005964:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596a:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 800596e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8005970:	429a      	cmp	r2, r3
 8005972:	dd08      	ble.n	8005986 <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8005974:	7efb      	ldrb	r3, [r7, #27]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d105      	bne.n	8005986 <SetTargetData+0x722>
					sequency == 0) {
					AddOffset =
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 8005980:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005984:	e003      	b.n	800598e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangea;
				}
				else
					uwr_status = 0;
 8005986:	2300      	movs	r3, #0
 8005988:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800598c:	e005      	b.n	800599a <SetTargetData+0x736>
 800598e:	e004      	b.n	800599a <SetTargetData+0x736>

			default:
				uwr_status = 0;
 8005990:	2300      	movs	r3, #0
 8005992:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8005996:	e000      	b.n	800599a <SetTargetData+0x736>
			}
		}
 8005998:	bf00      	nop

		if (uwr_status) {
 800599a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d026      	beq.n	80059f0 <SetTargetData+0x78c>
			pRangeData->RangeMilliMeter += AddOffset;
 80059a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059a4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059ae:	4413      	add	r3, r2
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	b21a      	sxth	r2, r3
 80059b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059b6:	829a      	strh	r2, [r3, #20]
			pRangeData->RangeMinMilliMeter += AddOffset;
 80059b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80059be:	b29a      	uxth	r2, r3
 80059c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059c4:	4413      	add	r3, r2
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	b21a      	sxth	r2, r3
 80059ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059cc:	809a      	strh	r2, [r3, #4]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 80059ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059da:	4413      	add	r3, r2
 80059dc:	b29b      	uxth	r3, r3
 80059de:	b21a      	sxth	r2, r3
 80059e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059e2:	805a      	strh	r2, [r3, #2]
			pRangeData->ExtendedRange = 1;
 80059e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059e6:	2201      	movs	r2, #1
 80059e8:	761a      	strb	r2, [r3, #24]
			pRangeData->RangeStatus = 0;
 80059ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059ec:	2200      	movs	r2, #0
 80059ee:	75da      	strb	r2, [r3, #23]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 80059f0:	787b      	ldrb	r3, [r7, #1]
 80059f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059f4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80059f8:	330c      	adds	r3, #12
 80059fa:	8b39      	ldrh	r1, [r7, #24]
 80059fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8005a00:	787b      	ldrb	r3, [r7, #1]
 8005a02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a04:	7dd1      	ldrb	r1, [r2, #23]
 8005a06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8005a0e:	3320      	adds	r3, #32
 8005a10:	460a      	mov	r2, r1
 8005a12:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8005a14:	787b      	ldrb	r3, [r7, #1]
 8005a16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a18:	7e11      	ldrb	r1, [r2, #24]
 8005a1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8005a22:	3324      	adds	r3, #36	; 0x24
 8005a24:	460a      	mov	r2, r1
 8005a26:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8005a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a2e:	461a      	mov	r2, r3
 8005a30:	78fb      	ldrb	r3, [r7, #3]
 8005a32:	f882 30e8 	strb.w	r3, [r2, #232]	; 0xe8

	return Status;
 8005a36:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3748      	adds	r7, #72	; 0x48
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop

08005a44 <SetMeasurementData>:
}

static VL53L1_Error SetMeasurementData(VL53L1_DEV Dev,
	VL53L1_range_results_t *presults,
	VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8005a44:	b590      	push	{r4, r7, lr}
 8005a46:	b091      	sub	sp, #68	; 0x44
 8005a48:	af04      	add	r7, sp, #16
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	3318      	adds	r3, #24
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;
	uint8_t iteration;
	VL53L1_TargetRangeData_t *pRangeData;
	VL53L1_range_data_t *presults_data;
	int16_t dmax_min;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t Furthest_idx = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	int16_t Furthest_range = 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t ActiveResults, amb_idx;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	7c9a      	ldrb	r2, [r3, #18]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	719a      	strb	r2, [r3, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	789a      	ldrb	r2, [r3, #2]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	bfa8      	it	ge
 8005a92:	4613      	movge	r3, r2
 8005a94:	847b      	strh	r3, [r7, #34]	; 0x22
			presults->VL53L1_p_007[DMAX_REFLECTANCE_IDX]);
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005a9a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c


	pMultiRangingData->TimeStamp = 0;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	78da      	ldrb	r2, [r3, #3]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	711a      	strb	r2, [r3, #4]

	pMultiRangingData->RecommendedDistanceMode =
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ab2:	f893 2a6e 	ldrb.w	r2, [r3, #2670]	; 0xa6e
	pMultiRangingData->RecommendedDistanceMode =
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	ActiveResults = presults->active_results;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	7c9b      	ldrb	r3, [r3, #18]
 8005ac0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (ActiveResults < 1)
 8005ac4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d103      	bne.n	8005ad4 <SetMeasurementData+0x90>

		iteration = 1;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005ad2:	e003      	b.n	8005adc <SetMeasurementData+0x98>
	else
		iteration = ActiveResults;
 8005ad4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005ad8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < iteration; i++) {
 8005adc:	2300      	movs	r3, #0
 8005ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005ae2:	e048      	b.n	8005b76 <SetMeasurementData+0x132>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 8005ae4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005ae8:	4613      	mov	r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	1a9b      	subs	r3, r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	3308      	adds	r3, #8
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	4413      	add	r3, r2
 8005af6:	61fb      	str	r3, [r7, #28]

		presults_data = &(presults->VL53L1_p_002[i]);
 8005af8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005afc:	224c      	movs	r2, #76	; 0x4c
 8005afe:	fb02 f303 	mul.w	r3, r2, r3
 8005b02:	3310      	adds	r3, #16
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	4413      	add	r3, r2
 8005b08:	3304      	adds	r3, #4
 8005b0a:	617b      	str	r3, [r7, #20]
		if (Status == VL53L1_ERROR_NONE)
 8005b0c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d114      	bne.n	8005b3e <SetMeasurementData+0xfa>
			Status = SetTargetData(Dev, ActiveResults,
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	7918      	ldrb	r0, [r3, #4]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	7c1b      	ldrb	r3, [r3, #16]
 8005b1c:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8005b20:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8005b24:	69fa      	ldr	r2, [r7, #28]
 8005b26:	9202      	str	r2, [sp, #8]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	9201      	str	r2, [sp, #4]
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	4623      	mov	r3, r4
 8005b30:	4602      	mov	r2, r0
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7ff fb96 	bl	8005264 <SetTargetData>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53L1_p_006;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	7ddb      	ldrb	r3, [r3, #23]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10d      	bne.n	8005b6c <SetMeasurementData+0x128>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005b56:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	da06      	bge.n	8005b6c <SetMeasurementData+0x128>
			Furthest_range = pRangeData->RangeMilliMeter;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	8a9b      	ldrh	r3, [r3, #20]
 8005b62:	857b      	strh	r3, [r7, #42]	; 0x2a
			Furthest_idx = i;
 8005b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	for (i = 0; i < iteration; i++) {
 8005b6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b70:	3301      	adds	r3, #1
 8005b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005b76:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005b7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d3b0      	bcc.n	8005ae4 <SetMeasurementData+0xa0>
		}
	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	f893 2483 	ldrb.w	r2, [r3, #1155]	; 0x483
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b8e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8005b92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005b9a:	e01f      	b.n	8005bdc <SetMeasurementData+0x198>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8005b9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba2:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8005ba6:	330c      	adds	r3, #12
 8005ba8:	2100      	movs	r1, #0
 8005baa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8005bae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8005bba:	3320      	adds	r3, #32
 8005bbc:	22ff      	movs	r2, #255	; 0xff
 8005bbe:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8005bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8005bcc:	3324      	adds	r3, #36	; 0x24
 8005bce:	2200      	movs	r2, #0
 8005bd0:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8005bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005bdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d9db      	bls.n	8005b9c <SetMeasurementData+0x158>
	}

	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 8005be4:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d11b      	bne.n	8005c24 <SetMeasurementData+0x1e0>
 8005bec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d017      	beq.n	8005c24 <SetMeasurementData+0x1e0>
		pRangeData = &(pMultiRangingData->RangeData[Furthest_idx]);
 8005bf4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	1a9b      	subs	r3, r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	3308      	adds	r3, #8
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	4413      	add	r3, r2
 8005c06:	61fb      	str	r3, [r7, #28]
		amb_idx = VL53L1_MAX_AMBIENT_DMAX_VALUES-1;
 8005c08:	2304      	movs	r3, #4
 8005c0a:	76fb      	strb	r3, [r7, #27]
		CheckAndChangeDistanceMode(Dev, pRangeData,
 8005c0c:	7efb      	ldrb	r3, [r7, #27]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	4413      	add	r3, r2
 8005c14:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	337e      	adds	r3, #126	; 0x7e
 8005c1c:	69f9      	ldr	r1, [r7, #28]
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f7ff f996 	bl	8004f50 <CheckAndChangeDistanceMode>
			presults->VL53L1_p_007[amb_idx],
			&pMultiRangingData->RecommendedDistanceMode);
	}

	return Status;
 8005c24:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3734      	adds	r7, #52	; 0x34
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd90      	pop	{r4, r7, pc}

08005c30 <VL53L1_GetMultiRangingData>:

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3318      	adds	r3, #24
 8005c42:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	60fb      	str	r3, [r7, #12]
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8005c4e:	2280      	movs	r2, #128	; 0x80
 8005c50:	21ff      	movs	r1, #255	; 0xff
 8005c52:	6838      	ldr	r0, [r7, #0]
 8005c54:	f018 fbb0 	bl	801e3b8 <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	2102      	movs	r1, #2
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f002 fc2e 	bl	80084be <VL53L1_get_device_results>
 8005c62:	4603      	mov	r3, r0
 8005c64:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 8005c66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d118      	bne.n	8005ca0 <VL53L1_GetMultiRangingData+0x70>
		switch (presults->rd_device_state) {
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	785b      	ldrb	r3, [r3, #1]
 8005c72:	2b07      	cmp	r3, #7
 8005c74:	d002      	beq.n	8005c7c <VL53L1_GetMultiRangingData+0x4c>
 8005c76:	2b08      	cmp	r3, #8
 8005c78:	d004      	beq.n	8005c84 <VL53L1_GetMultiRangingData+0x54>
 8005c7a:	e007      	b.n	8005c8c <VL53L1_GetMultiRangingData+0x5c>
		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pMultiRangingData->RoiStatus =
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_NOT_LAST;
			break;
 8005c82:	e006      	b.n	8005c92 <VL53L1_GetMultiRangingData+0x62>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2202      	movs	r2, #2
 8005c88:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_LAST;
			break;
 8005c8a:	e002      	b.n	8005c92 <VL53L1_GetMultiRangingData+0x62>
		default:
			pMultiRangingData->RoiStatus =
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_NOT_VALID;
		}

		Status = SetMeasurementData(Dev,
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	68f9      	ldr	r1, [r7, #12]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff fed4 	bl	8005a44 <SetMeasurementData>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	75fb      	strb	r3, [r7, #23]
					pMultiRangingData);

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005ca0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b090      	sub	sp, #64	; 0x40
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]

	SUPPRESS_UNUSED_WARNING(Dev);

	LOG_FUNCTION_START("");
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8005cba:	f240 3305 	movw	r3, #773	; 0x305
 8005cbe:	81bb      	strh	r3, [r7, #12]
	VL53L1_customer_nvm_managed_t *pc;
	VL53L1_PresetModes PresetMode;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3318      	adds	r3, #24
 8005cc4:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	3348      	adds	r3, #72	; 0x48
 8005cca:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53L1_ERROR_NONE) {
 8005ccc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d11c      	bne.n	8005d0e <VL53L1_PerformRefSpadManagement+0x62>
		PresetMode = VL53L1DevDataGet(Dev,
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005cda:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8005cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.PresetMode);
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 8005ce2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f8e3 	bl	8005eb4 <VL53L1_run_ref_spad_char>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L1_ERROR_NONE)
 8005cf4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d108      	bne.n	8005d0e <VL53L1_PerformRefSpadManagement+0x62>
			Status = VL53L1_SetPresetMode(Dev, PresetMode);
 8005cfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fe fb2c 	bl	8004360 <VL53L1_SetPresetMode>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8005d0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005d12:	f113 0f1d 	cmn.w	r3, #29
 8005d16:	d14e      	bne.n	8005db6 <VL53L1_PerformRefSpadManagement+0x10a>

		Status = VL53L1_read_nvm_raw_data(Dev,
 8005d18:	f107 0310 	add.w	r3, r7, #16
 8005d1c:	2206      	movs	r2, #6
 8005d1e:	2128      	movs	r1, #40	; 0x28
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f00e fbf6 	bl	8014512 <VL53L1_read_nvm_raw_data>
 8005d26:	4603      	mov	r3, r0
 8005d28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53L1_ERROR_NONE)
 8005d2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d109      	bne.n	8005d48 <VL53L1_PerformRefSpadManagement+0x9c>
			Status = VL53L1_WriteMulti(Dev,
 8005d34:	f107 020c 	add.w	r2, r7, #12
 8005d38:	2302      	movs	r3, #2
 8005d3a:	2114      	movs	r1, #20
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f010 fe5f 	bl	8016a00 <VL53L1_WriteMulti>
 8005d42:	4603      	mov	r3, r0
 8005d44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53L1_ERROR_NONE) {
 8005d48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d105      	bne.n	8005d5c <VL53L1_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8005d50:	7b3a      	ldrb	r2, [r7, #12]
 8005d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d54:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 8005d56:	7b7a      	ldrb	r2, [r7, #13]
 8005d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5a:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8005d5c:	f107 0310 	add.w	r3, r7, #16
 8005d60:	3310      	adds	r3, #16
 8005d62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (Status == VL53L1_ERROR_NONE)
 8005d64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d108      	bne.n	8005d7e <VL53L1_PerformRefSpadManagement+0xd2>
			Status = VL53L1_WriteMulti(Dev,
 8005d6c:	2306      	movs	r3, #6
 8005d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d70:	210d      	movs	r1, #13
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f010 fe44 	bl	8016a00 <VL53L1_WriteMulti>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53L1_ERROR_NONE) {
 8005d7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d117      	bne.n	8005db6 <VL53L1_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 8005d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d88:	781a      	ldrb	r2, [r3, #0]
 8005d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8c:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8005d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d90:	785a      	ldrb	r2, [r3, #1]
 8005d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d94:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	789a      	ldrb	r2, [r3, #2]
 8005d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9c:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8005d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da0:	78da      	ldrb	r2, [r3, #3]
 8005da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da4:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8005da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da8:	791a      	ldrb	r2, [r3, #4]
 8005daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dac:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db0:	795a      	ldrb	r2, [r3, #5]
 8005db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db4:	715a      	strb	r2, [r3, #5]
	}

#endif

	LOG_FUNCTION_END(Status);
	return Status;
 8005db6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3740      	adds	r7, #64	; 0x40
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <VL53L1_SmudgeCorrectionEnable>:

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	73fb      	strb	r3, [r7, #15]
	VL53L1_Error s1 = VL53L1_ERROR_NONE;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	73bb      	strb	r3, [r7, #14]
	VL53L1_Error s2 = VL53L1_ERROR_NONE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	737b      	strb	r3, [r7, #13]
	VL53L1_Error s3 = VL53L1_ERROR_NONE;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8005de0:	78fb      	ldrb	r3, [r7, #3]
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d84a      	bhi.n	8005e7c <VL53L1_SmudgeCorrectionEnable+0xb8>
 8005de6:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <VL53L1_SmudgeCorrectionEnable+0x28>)
 8005de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dec:	08005dfd 	.word	0x08005dfd
 8005df0:	08005e1d 	.word	0x08005e1d
 8005df4:	08005e3d 	.word	0x08005e3d
 8005df8:	08005e5d 	.word	0x08005e5d
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f004 fbee 	bl	800a5de <VL53L1_dynamic_xtalk_correction_disable>
 8005e02:	4603      	mov	r3, r0
 8005e04:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f004 fc17 	bl	800a63a <VL53L1_dynamic_xtalk_correction_apply_disable>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f004 fc40 	bl	800a696 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8005e16:	4603      	mov	r3, r0
 8005e18:	733b      	strb	r3, [r7, #12]
		break;
 8005e1a:	e032      	b.n	8005e82 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f004 fbc7 	bl	800a5b0 <VL53L1_dynamic_xtalk_correction_enable>
 8005e22:	4603      	mov	r3, r0
 8005e24:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f004 fbf0 	bl	800a60c <VL53L1_dynamic_xtalk_correction_apply_enable>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f004 fc30 	bl	800a696 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8005e36:	4603      	mov	r3, r0
 8005e38:	733b      	strb	r3, [r7, #12]
		break;
 8005e3a:	e022      	b.n	8005e82 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f004 fbb7 	bl	800a5b0 <VL53L1_dynamic_xtalk_correction_enable>
 8005e42:	4603      	mov	r3, r0
 8005e44:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f004 fbe0 	bl	800a60c <VL53L1_dynamic_xtalk_correction_apply_enable>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f004 fc09 	bl	800a668 <VL53L1_dynamic_xtalk_correction_single_apply_enable>
 8005e56:	4603      	mov	r3, r0
 8005e58:	733b      	strb	r3, [r7, #12]
		break;
 8005e5a:	e012      	b.n	8005e82 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f004 fba7 	bl	800a5b0 <VL53L1_dynamic_xtalk_correction_enable>
 8005e62:	4603      	mov	r3, r0
 8005e64:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f004 fbe7 	bl	800a63a <VL53L1_dynamic_xtalk_correction_apply_disable>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f004 fc10 	bl	800a696 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8005e76:	4603      	mov	r3, r0
 8005e78:	733b      	strb	r3, [r7, #12]
		break;
 8005e7a:	e002      	b.n	8005e82 <VL53L1_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005e7c:	23fc      	movs	r3, #252	; 0xfc
 8005e7e:	73fb      	strb	r3, [r7, #15]
		break;
 8005e80:	bf00      	nop
	}

	if (Status == VL53L1_ERROR_NONE) {
 8005e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10d      	bne.n	8005ea6 <VL53L1_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8005e8a:	7bbb      	ldrb	r3, [r7, #14]
 8005e8c:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8005e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <VL53L1_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8005e96:	7b7b      	ldrb	r3, [r7, #13]
 8005e98:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8005e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <VL53L1_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8005ea2:	7b3b      	ldrb	r3, [r7, #12]
 8005ea4:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop

08005eb4 <VL53L1_run_ref_spad_char>:


VL53L1_Error VL53L1_run_ref_spad_char(
	VL53L1_DEV        Dev,
	VL53L1_Error     *pcal_status)
{
 8005eb4:	b5b0      	push	{r4, r5, r7, lr}
 8005eb6:	b08c      	sub	sp, #48	; 0x30
 8005eb8:	af04      	add	r7, sp, #16
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3318      	adds	r3, #24
 8005ec6:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53L1_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8005ece:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8005ed0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d104      	bne.n	8005ee2 <VL53L1_run_ref_spad_char+0x2e>
		status = VL53L1_enable_powerforce(Dev);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f007 fc99 	bl	800d810 <VL53L1_enable_powerforce>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8005ee2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d117      	bne.n	8005f1a <VL53L1_run_ref_spad_char+0x66>
		status =
		VL53L1_set_ref_spad_char_config(
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	7858      	ldrb	r0, [r3, #1]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	685c      	ldr	r4, [r3, #4]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	891d      	ldrh	r5, [r3, #8]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	899b      	ldrh	r3, [r3, #12]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	8952      	ldrh	r2, [r2, #10]
 8005efe:	69b9      	ldr	r1, [r7, #24]
 8005f00:	f8b1 1322 	ldrh.w	r1, [r1, #802]	; 0x322
 8005f04:	9102      	str	r1, [sp, #8]
 8005f06:	9201      	str	r2, [sp, #4]
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	462b      	mov	r3, r5
 8005f0c:	4622      	mov	r2, r4
 8005f0e:	4601      	mov	r1, r0
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f009 fbda 	bl	800f6ca <VL53L1_set_ref_spad_char_config>
 8005f16:	4603      	mov	r3, r0
 8005f18:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53L1_ERROR_NONE)
 8005f1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d107      	bne.n	8005f32 <VL53L1_run_ref_spad_char+0x7e>
		status = VL53L1_run_device_test(
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f891 	bl	8006050 <VL53L1_run_device_test>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53L1_ERROR_NONE)
 8005f32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d108      	bne.n	8005f4c <VL53L1_run_ref_spad_char+0x98>
		status =
		VL53L1_ReadMulti(
 8005f3a:	f107 020c 	add.w	r2, r7, #12
 8005f3e:	2302      	movs	r3, #2
 8005f40:	21d9      	movs	r1, #217	; 0xd9
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f010 fd92 	bl	8016a6c <VL53L1_ReadMulti>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53L1_ERROR_NONE) {
 8005f4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10b      	bne.n	8005f6c <VL53L1_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8005f54:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f5c:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8005f60:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f68:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
	}



	if (status == VL53L1_ERROR_NONE)
 8005f6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d108      	bne.n	8005f86 <VL53L1_run_ref_spad_char+0xd2>
		status =
			VL53L1_WriteMulti(
 8005f74:	f107 020c 	add.w	r2, r7, #12
 8005f78:	2302      	movs	r3, #2
 8005f7a:	2114      	movs	r1, #20
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f010 fd3f 	bl	8016a00 <VL53L1_WriteMulti>
 8005f82:	4603      	mov	r3, r0
 8005f84:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8005f86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d107      	bne.n	8005f9e <VL53L1_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8005f8e:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8005f96:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53L1_ERROR_NONE)
 8005f9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d108      	bne.n	8005fb8 <VL53L1_run_ref_spad_char+0x104>
		status =
			VL53L1_ReadMulti(
 8005fa6:	f107 020c 	add.w	r2, r7, #12
 8005faa:	2306      	movs	r3, #6
 8005fac:	21ac      	movs	r1, #172	; 0xac
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f010 fd5c 	bl	8016a6c <VL53L1_ReadMulti>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53L1_ERROR_NONE)
 8005fb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d108      	bne.n	8005fd2 <VL53L1_run_ref_spad_char+0x11e>
		status =
			VL53L1_WriteMulti(
 8005fc0:	f107 020c 	add.w	r2, r7, #12
 8005fc4:	2306      	movs	r3, #6
 8005fc6:	210d      	movs	r1, #13
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f010 fd19 	bl	8016a00 <VL53L1_WriteMulti>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53L1_ERROR_NONE) {
 8005fd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d117      	bne.n	800600a <VL53L1_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8005fda:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8005fe2:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8005fea:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8005ff2:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8005ffa:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8006002:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53L1_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53L1_ERROR_NONE) {
 800600a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d114      	bne.n	800603c <VL53L1_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8006018:	2b10      	cmp	r3, #16
 800601a:	d00c      	beq.n	8006036 <VL53L1_run_ref_spad_char+0x182>
 800601c:	2b10      	cmp	r3, #16
 800601e:	dc0e      	bgt.n	800603e <VL53L1_run_ref_spad_char+0x18a>
 8006020:	2b0e      	cmp	r3, #14
 8006022:	d002      	beq.n	800602a <VL53L1_run_ref_spad_char+0x176>
 8006024:	2b0f      	cmp	r3, #15
 8006026:	d003      	beq.n	8006030 <VL53L1_run_ref_spad_char+0x17c>
 8006028:	e009      	b.n	800603e <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 800602a:	23e4      	movs	r3, #228	; 0xe4
 800602c:	77fb      	strb	r3, [r7, #31]
			break;
 800602e:	e006      	b.n	800603e <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8006030:	23e3      	movs	r3, #227	; 0xe3
 8006032:	77fb      	strb	r3, [r7, #31]
			break;
 8006034:	e003      	b.n	800603e <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8006036:	23e2      	movs	r3, #226	; 0xe2
 8006038:	77fb      	strb	r3, [r7, #31]
			break;
 800603a:	e000      	b.n	800603e <VL53L1_run_ref_spad_char+0x18a>
		}
	}
 800603c:	bf00      	nop



	*pcal_status = status;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	7ffa      	ldrb	r2, [r7, #31]
 8006042:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8006044:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3720      	adds	r7, #32
 800604c:	46bd      	mov	sp, r7
 800604e:	bdb0      	pop	{r4, r5, r7, pc}

08006050 <VL53L1_run_device_test>:


VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800605c:	2300      	movs	r3, #0
 800605e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3318      	adds	r3, #24
 8006064:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 800606a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d108      	bne.n	8006084 <VL53L1_run_device_test+0x34>
		status =
			VL53L1_RdByte(
 8006072:	f107 030b 	add.w	r3, r7, #11
 8006076:	461a      	mov	r2, r3
 8006078:	2130      	movs	r1, #48	; 0x30
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f010 fd88 	bl	8016b90 <VL53L1_RdByte>
 8006080:	4603      	mov	r3, r0
 8006082:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 8006084:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d103      	bne.n	8006094 <VL53L1_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 800608c:	7afa      	ldrb	r2, [r7, #11]
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e


	if (status == VL53L1_ERROR_NONE)
 8006094:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <VL53L1_run_device_test+0x5a>
		status = VL53L1_start_test(
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f007 fb39 	bl	800d718 <VL53L1_start_test>
 80060a6:	4603      	mov	r3, r0
 80060a8:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53L1_ERROR_NONE)
 80060aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d104      	bne.n	80060bc <VL53L1_run_device_test+0x6c>
		status = VL53L1_wait_for_test_completion(Dev);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f00f ff5c 	bl	8015f70 <VL53L1_wait_for_test_completion>
 80060b8:	4603      	mov	r3, r0
 80060ba:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 80060bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d108      	bne.n	80060d6 <VL53L1_run_device_test+0x86>
		status =
			VL53L1_ReadMulti(
 80060c4:	f107 020c 	add.w	r2, r7, #12
 80060c8:	2302      	movs	r3, #2
 80060ca:	2189      	movs	r1, #137	; 0x89
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f010 fccd 	bl	8016a6c <VL53L1_ReadMulti>
 80060d2:	4603      	mov	r3, r0
 80060d4:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 80060d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d107      	bne.n	80060ee <VL53L1_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 80060de:	7b3a      	ldrb	r2, [r7, #12]
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		pdev->sys_results.result__report_status = comms_buffer[1];
 80060e6:	7b7a      	ldrb	r2, [r7, #13]
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
	}



	pdev->sys_results.result__range_status &=
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 80060f4:	f003 031f 	and.w	r3, r3, #31
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 8006100:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d108      	bne.n	800611a <VL53L1_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53L1_ERROR_NONE)
 8006108:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d104      	bne.n	800611a <VL53L1_run_device_test+0xca>
			status = VL53L1_clear_interrupt(Dev);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f007 fba1 	bl	800d858 <VL53L1_clear_interrupt>
 8006116:	4603      	mov	r3, r0
 8006118:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53L1_ERROR_NONE)
 800611a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d105      	bne.n	800612e <VL53L1_run_device_test+0xde>
		status =
			VL53L1_start_test(
 8006122:	2100      	movs	r1, #0
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f007 faf7 	bl	800d718 <VL53L1_start_test>
 800612a:	4603      	mov	r3, r0
 800612c:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 800612e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <select_offset_per_vcsel>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53L1_MAX_I2C_XFER_SIZE 256

static VL53L1_Error select_offset_per_vcsel(VL53L1_LLDriverData_t *pdev,
		int16_t *poffset) {
 800613a:	b480      	push	{r7}
 800613c:	b085      	sub	sp, #20
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	6039      	str	r1, [r7, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006144:	2300      	movs	r3, #0
 8006146:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	785b      	ldrb	r3, [r3, #1]
 800614c:	2b21      	cmp	r3, #33	; 0x21
 800614e:	d006      	beq.n	800615e <select_offset_per_vcsel+0x24>
 8006150:	2b21      	cmp	r3, #33	; 0x21
 8006152:	dc2b      	bgt.n	80061ac <select_offset_per_vcsel+0x72>
 8006154:	2b1b      	cmp	r3, #27
 8006156:	d01c      	beq.n	8006192 <select_offset_per_vcsel+0x58>
 8006158:	2b1e      	cmp	r3, #30
 800615a:	d00d      	beq.n	8006178 <select_offset_per_vcsel+0x3e>
 800615c:	e026      	b.n	80061ac <select_offset_per_vcsel+0x72>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006164:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	; 0xc48
 8006168:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006170:	f8b3 3c4a 	ldrh.w	r3, [r3, #3146]	; 0xc4a
 8006174:	817b      	strh	r3, [r7, #10]
		break;
 8006176:	e02b      	b.n	80061d0 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800617e:	f8b3 3c4c 	ldrh.w	r3, [r3, #3148]	; 0xc4c
 8006182:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800618a:	f8b3 3c4e 	ldrh.w	r3, [r3, #3150]	; 0xc4e
 800618e:	817b      	strh	r3, [r7, #10]
		break;
 8006190:	e01e      	b.n	80061d0 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006198:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 800619c:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a4:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 80061a8:	817b      	strh	r3, [r7, #10]
		break;
 80061aa:	e011      	b.n	80061d0 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061b2:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 80061b6:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061be:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 80061c2:	817b      	strh	r3, [r7, #10]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80061c4:	23fc      	movs	r3, #252	; 0xfc
 80061c6:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2200      	movs	r2, #0
 80061cc:	801a      	strh	r2, [r3, #0]
		break;
 80061ce:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80061d6:	727b      	strb	r3, [r7, #9]
	if (status == VL53L1_ERROR_NONE)
 80061d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10b      	bne.n	80061f8 <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 80061e0:	7a7b      	ldrb	r3, [r7, #9]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <select_offset_per_vcsel+0xb6>
 80061ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80061ee:	e001      	b.n	80061f4 <select_offset_per_vcsel+0xba>
 80061f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	8013      	strh	r3, [r2, #0]

	return status;
 80061f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <vl53l1_diff_histo_stddev>:

static void vl53l1_diff_histo_stddev(VL53L1_LLDriverData_t *pdev,
	VL53L1_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8006208:	b490      	push	{r4, r7}
 800620a:	b08a      	sub	sp, #40	; 0x28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	4611      	mov	r1, r2
 8006214:	461a      	mov	r2, r3
 8006216:	460b      	mov	r3, r1
 8006218:	71fb      	strb	r3, [r7, #7]
 800621a:	4613      	mov	r3, r2
 800621c:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8006226:	2300      	movs	r3, #0
 8006228:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 800622a:	2300      	movs	r3, #0
 800622c:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 800622e:	2300      	movs	r3, #0
 8006230:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	b29b      	uxth	r3, r3
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	84fb      	strh	r3, [r7, #38]	; 0x26
 800623a:	e021      	b.n	8006280 <vl53l1_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 800623c:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8006240:	79fb      	ldrb	r3, [r7, #7]
 8006242:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	461a      	mov	r2, r3
 8006248:	0052      	lsls	r2, r2, #1
 800624a:	441a      	add	r2, r3
 800624c:	00d3      	lsls	r3, r2, #3
 800624e:	461a      	mov	r2, r3
 8006250:	460b      	mov	r3, r1
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	440b      	add	r3, r1
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	4413      	add	r3, r2
 800625a:	4423      	add	r3, r4
 800625c:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8006260:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8006264:	6a3a      	ldr	r2, [r7, #32]
 8006266:	4413      	add	r3, r2
 8006268:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 800626a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	3206      	adds	r2, #6
 8006270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006274:	69fa      	ldr	r2, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 800627a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800627c:	3301      	adds	r3, #1
 800627e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006280:	79bb      	ldrb	r3, [r7, #6]
 8006282:	b29b      	uxth	r3, r3
 8006284:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006286:	429a      	cmp	r2, r3
 8006288:	d3d8      	bcc.n	800623c <vl53l1_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d047      	beq.n	8006320 <vl53l1_diff_histo_stddev+0x118>
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d044      	beq.n	8006320 <vl53l1_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	b29b      	uxth	r3, r3
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800629e:	e03a      	b.n	8006316 <vl53l1_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 80062a0:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	461a      	mov	r2, r3
 80062ac:	0052      	lsls	r2, r2, #1
 80062ae:	441a      	add	r2, r3
 80062b0:	00d3      	lsls	r3, r2, #3
 80062b2:	461a      	mov	r2, r3
 80062b4:	460b      	mov	r3, r1
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	440b      	add	r3, r1
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	4413      	add	r3, r2
 80062be:	4423      	add	r3, r4
 80062c0:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80062c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80062c8:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062d0:	fb03 f202 	mul.w	r2, r3, r2
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80062da:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 80062dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	3206      	adds	r2, #6
 80062e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062ea:	fb03 f202 	mul.w	r2, r3, r2
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80062f4:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 80062f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	69b9      	ldr	r1, [r7, #24]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8006300:	69b8      	ldr	r0, [r7, #24]
 8006302:	6979      	ldr	r1, [r7, #20]
 8006304:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8006306:	fb01 f303 	mul.w	r3, r1, r3
 800630a:	441a      	add	r2, r3
 800630c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630e:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8006310:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006312:	3301      	adds	r3, #1
 8006314:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006316:	79bb      	ldrb	r3, [r7, #6]
 8006318:	b29b      	uxth	r3, r3
 800631a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800631c:	429a      	cmp	r2, r3
 800631e:	d3bf      	bcc.n	80062a0 <vl53l1_diff_histo_stddev+0x98>
	}
}
 8006320:	bf00      	nop
 8006322:	3728      	adds	r7, #40	; 0x28
 8006324:	46bd      	mov	sp, r7
 8006326:	bc90      	pop	{r4, r7}
 8006328:	4770      	bx	lr

0800632a <vl53l1_histo_merge>:

static void vl53l1_histo_merge(VL53L1_DEV Dev,
		VL53L1_histogram_bin_data_t *pdata) {
 800632a:	b5b0      	push	{r4, r5, r7, lr}
 800632c:	b08c      	sub	sp, #48	; 0x30
 800632e:	af02      	add	r7, sp, #8
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev =
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3318      	adds	r3, #24
 8006338:	61fb      	str	r3, [r7, #28]
			VL53L1DevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 800633a:	2300      	movs	r3, #0
 800633c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8006344:	2300      	movs	r3, #0
 8006346:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8006348:	2300      	movs	r3, #0
 800634a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 800634e:	2300      	movs	r3, #0
 8006350:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8006352:	2300      	movs	r3, #0
 8006354:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800635a:	2318      	movs	r3, #24
 800635c:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 800635e:	f107 0314 	add.w	r3, r7, #20
 8006362:	461a      	mov	r2, r3
 8006364:	f248 018f 	movw	r1, #32911	; 0x808f
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f003 f9fb 	bl	8009764 <VL53L1_get_tuning_parm>
			&TuningBinRecSize);

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 800636e:	f107 0310 	add.w	r3, r7, #16
 8006372:	461a      	mov	r2, r3
 8006374:	f248 018e 	movw	r1, #32910	; 0x808e
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f003 f9f3 	bl	8009764 <VL53L1_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006384:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8006388:	2b00      	cmp	r3, #0
 800638a:	f040 811b 	bne.w	80065c4 <vl53l1_histo_merge+0x29a>

		timing = 1 - pdata->result__stream_count % 2;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	bf0c      	ite	eq
 800639c:	2301      	moveq	r3, #1
 800639e:	2300      	movne	r3, #0
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 80063a8:	7efb      	ldrb	r3, [r7, #27]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	7eba      	ldrb	r2, [r7, #26]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ba:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d008      	beq.n	80063d4 <vl53l1_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063c8:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80063cc:	3b01      	subs	r3, #1
 80063ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063d2:	e004      	b.n	80063de <vl53l1_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	3b01      	subs	r3, #1
 80063da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 80063de:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80063e2:	7efb      	ldrb	r3, [r7, #27]
 80063e4:	69f8      	ldr	r0, [r7, #28]
 80063e6:	461a      	mov	r2, r3
 80063e8:	0052      	lsls	r2, r2, #1
 80063ea:	441a      	add	r2, r3
 80063ec:	0153      	lsls	r3, r2, #5
 80063ee:	461a      	mov	r2, r3
 80063f0:	460b      	mov	r3, r1
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	440b      	add	r3, r1
 80063f6:	019b      	lsls	r3, r3, #6
 80063f8:	4413      	add	r3, r2
 80063fa:	4403      	add	r3, r0
 80063fc:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 8006400:	3308      	adds	r3, #8
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	dd0c      	ble.n	8006422 <vl53l1_histo_merge+0xf8>
			vl53l1_diff_histo_stddev(pdev, pdata,
 8006408:	7e79      	ldrb	r1, [r7, #25]
 800640a:	7efa      	ldrb	r2, [r7, #27]
 800640c:	f107 030c 	add.w	r3, r7, #12
 8006410:	9301      	str	r3, [sp, #4]
 8006412:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	460b      	mov	r3, r1
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	69f8      	ldr	r0, [r7, #28]
 800641e:	f7ff fef3 	bl	8006208 <vl53l1_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	429a      	cmp	r2, r3
 8006428:	db23      	blt.n	8006472 <vl53l1_histo_merge+0x148>
			memset(pdev->multi_bins_rec, 0,
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8006430:	3318      	adds	r3, #24
 8006432:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8006436:	2100      	movs	r1, #0
 8006438:	4618      	mov	r0, r3
 800643a:	f017 ffbd 	bl	801e3b8 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

			recom_been_reset = 1;
 800644a:	2301      	movs	r3, #1
 800644c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8006450:	7efb      	ldrb	r3, [r7, #27]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <vl53l1_histo_merge+0x13a>
				pdev->pos_before_next_recom =
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800645c:	2206      	movs	r2, #6
 800645e:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8006462:	e034      	b.n	80064ce <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800646a:	2207      	movs	r2, #7
 800646c:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8006470:	e02d      	b.n	80064ce <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006478:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800647c:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 800647e:	2300      	movs	r3, #0
 8006480:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006484:	e01e      	b.n	80064c4 <vl53l1_histo_merge+0x19a>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8006486:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 800648a:	7e39      	ldrb	r1, [r7, #24]
 800648c:	7efb      	ldrb	r3, [r7, #27]
 800648e:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	3006      	adds	r0, #6
 8006496:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 800649a:	69f8      	ldr	r0, [r7, #28]
 800649c:	461a      	mov	r2, r3
 800649e:	0052      	lsls	r2, r2, #1
 80064a0:	441a      	add	r2, r3
 80064a2:	00d3      	lsls	r3, r2, #3
 80064a4:	461a      	mov	r2, r3
 80064a6:	460b      	mov	r3, r1
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	440b      	add	r3, r1
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	4413      	add	r3, r2
 80064b0:	442b      	add	r3, r5
 80064b2:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80064b6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 80064ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80064be:	3301      	adds	r3, #1
 80064c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80064c4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80064c8:	7ebb      	ldrb	r3, [r7, #26]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d3db      	bcc.n	8006486 <vl53l1_histo_merge+0x15c>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d4:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80064d8:	461a      	mov	r2, r3
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	3b01      	subs	r3, #1
 80064de:	429a      	cmp	r2, r3
 80064e0:	d109      	bne.n	80064f6 <vl53l1_histo_merge+0x1cc>
 80064e2:	7efb      	ldrb	r3, [r7, #27]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d106      	bne.n	80064f6 <vl53l1_histo_merge+0x1cc>
			pdev->bin_rec_pos = 0;
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
 80064f4:	e00e      	b.n	8006514 <vl53l1_histo_merge+0x1ea>
		else if (timing == 1)
 80064f6:	7efb      	ldrb	r3, [r7, #27]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d10b      	bne.n	8006514 <vl53l1_histo_merge+0x1ea>
			pdev->bin_rec_pos++;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006502:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8006506:	3301      	adds	r3, #1
 8006508:	b2da      	uxtb	r2, r3
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006510:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8006514:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006518:	2b01      	cmp	r3, #1
 800651a:	d102      	bne.n	8006522 <vl53l1_histo_merge+0x1f8>
 800651c:	7efb      	ldrb	r3, [r7, #27]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d069      	beq.n	80065f6 <vl53l1_histo_merge+0x2cc>
			 (pdev->pos_before_next_recom == 0)) {
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006528:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 800652c:	2b00      	cmp	r3, #0
 800652e:	d162      	bne.n	80065f6 <vl53l1_histo_merge+0x2cc>

			for (bin = 0; bin < BuffSize; bin++)
 8006530:	2300      	movs	r3, #0
 8006532:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006534:	e008      	b.n	8006548 <vl53l1_histo_merge+0x21e>
				pdata->bin_data[bin] = 0;
 8006536:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	3206      	adds	r2, #6
 800653c:	2100      	movs	r1, #0
 800653e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8006542:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006544:	3301      	adds	r3, #1
 8006546:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006548:	7ebb      	ldrb	r3, [r7, #26]
 800654a:	b29b      	uxth	r3, r3
 800654c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800654e:	429a      	cmp	r2, r3
 8006550:	d3f1      	bcc.n	8006536 <vl53l1_histo_merge+0x20c>

			for (bin = 0; bin < BuffSize; bin++)
 8006552:	2300      	movs	r3, #0
 8006554:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006556:	e02f      	b.n	80065b8 <vl53l1_histo_merge+0x28e>
				for (i = 0; i < TuningBinRecSize; i++)
 8006558:	2300      	movs	r3, #0
 800655a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800655e:	e023      	b.n	80065a8 <vl53l1_histo_merge+0x27e>
					pdata->bin_data[bin] +=
 8006560:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	3206      	adds	r2, #6
 8006566:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 800656a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800656e:	7efb      	ldrb	r3, [r7, #27]
 8006570:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8006572:	69fc      	ldr	r4, [r7, #28]
 8006574:	461a      	mov	r2, r3
 8006576:	0052      	lsls	r2, r2, #1
 8006578:	441a      	add	r2, r3
 800657a:	00d3      	lsls	r3, r2, #3
 800657c:	461a      	mov	r2, r3
 800657e:	460b      	mov	r3, r1
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	440b      	add	r3, r1
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	4413      	add	r3, r2
 8006588:	442b      	add	r3, r5
 800658a:	f203 7316 	addw	r3, r3, #1814	; 0x716
 800658e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8006592:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006594:	18c1      	adds	r1, r0, r3
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	3206      	adds	r2, #6
 800659a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 800659e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80065a2:	3301      	adds	r3, #1
 80065a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80065a8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	dbd6      	blt.n	8006560 <vl53l1_histo_merge+0x236>
			for (bin = 0; bin < BuffSize; bin++)
 80065b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065b4:	3301      	adds	r3, #1
 80065b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80065b8:	7ebb      	ldrb	r3, [r7, #26]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80065be:	429a      	cmp	r2, r3
 80065c0:	d3ca      	bcc.n	8006558 <vl53l1_histo_merge+0x22e>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 80065c2:	e018      	b.n	80065f6 <vl53l1_histo_merge+0x2cc>
		pdev->pos_before_next_recom--;
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ca:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d8:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
		if (pdev->pos_before_next_recom == 255)
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e2:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 80065e6:	2bff      	cmp	r3, #255	; 0xff
 80065e8:	d105      	bne.n	80065f6 <vl53l1_histo_merge+0x2cc>
			pdev->pos_before_next_recom = 0;
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
}
 80065f6:	bf00      	nop
 80065f8:	3728      	adds	r7, #40	; 0x28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006600 <VL53L1_load_patch>:

VL53L1_Error VL53L1_load_patch(
	VL53L1_DEV Dev) {
 8006600:	b580      	push	{r7, lr}
 8006602:	b0c6      	sub	sp, #280	; 0x118
 8006604:	af00      	add	r7, sp, #0
 8006606:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800660a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800660e:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006610:	2300      	movs	r3, #0
 8006612:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800661c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10b      	bne.n	800663c <VL53L1_load_patch+0x3c>
		status = VL53L1_WrByte(Dev,
 8006624:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006628:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800662c:	2200      	movs	r2, #0
 800662e:	2185      	movs	r1, #133	; 0x85
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	f010 fa51 	bl	8016ad8 <VL53L1_WrByte>
 8006636:	4603      	mov	r3, r0
 8006638:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 800663c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006640:	2b00      	cmp	r3, #0
 8006642:	d106      	bne.n	8006652 <VL53L1_load_patch+0x52>
		VL53L1_enable_powerforce(Dev);
 8006644:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006648:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800664c:	6818      	ldr	r0, [r3, #0]
 800664e:	f007 f8df 	bl	800d810 <VL53L1_enable_powerforce>

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 8006652:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8006656:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800665a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800665e:	f248 018c 	movw	r1, #32908	; 0x808c
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	f003 f87e 	bl	8009764 <VL53L1_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8006668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800666c:	2b03      	cmp	r3, #3
 800666e:	d81b      	bhi.n	80066a8 <VL53L1_load_patch+0xa8>
 8006670:	a201      	add	r2, pc, #4	; (adr r2, 8006678 <VL53L1_load_patch+0x78>)
 8006672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006676:	bf00      	nop
 8006678:	08006689 	.word	0x08006689
 800667c:	08006691 	.word	0x08006691
 8006680:	08006699 	.word	0x08006699
 8006684:	080066a1 	.word	0x080066a1
	case 0:
		patch_power = 0x00;
 8006688:	2300      	movs	r3, #0
 800668a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800668e:	e00e      	b.n	80066ae <VL53L1_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 8006690:	2310      	movs	r3, #16
 8006692:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8006696:	e00a      	b.n	80066ae <VL53L1_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 8006698:	2320      	movs	r3, #32
 800669a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800669e:	e006      	b.n	80066ae <VL53L1_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 80066a0:	2340      	movs	r3, #64	; 0x40
 80066a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80066a6:	e002      	b.n	80066ae <VL53L1_load_patch+0xae>
	default:
		patch_power = 0x00;
 80066a8:	2300      	movs	r3, #0
 80066aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53L1_ERROR_NONE) {
 80066ae:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d134      	bne.n	8006720 <VL53L1_load_patch+0x120>

		comms_buffer[0] = 0x29;
 80066b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80066ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066be:	2229      	movs	r2, #41	; 0x29
 80066c0:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80066c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80066c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066ca:	22c9      	movs	r2, #201	; 0xc9
 80066cc:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 80066ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80066d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066d6:	220e      	movs	r2, #14
 80066d8:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 80066da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80066de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066e2:	2240      	movs	r2, #64	; 0x40
 80066e4:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 80066e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80066ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066ee:	2228      	movs	r2, #40	; 0x28
 80066f0:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 80066f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80066fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006700:	715a      	strb	r2, [r3, #5]

		status = VL53L1_WriteMulti(Dev,
 8006702:	f107 020c 	add.w	r2, r7, #12
 8006706:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800670a:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800670e:	2306      	movs	r3, #6
 8006710:	f240 4176 	movw	r1, #1142	; 0x476
 8006714:	6800      	ldr	r0, [r0, #0]
 8006716:	f010 f973 	bl	8016a00 <VL53L1_WriteMulti>
 800671a:	4603      	mov	r3, r0
 800671c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8006720:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006724:	2b00      	cmp	r3, #0
 8006726:	d132      	bne.n	800678e <VL53L1_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8006728:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800672c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006730:	2203      	movs	r2, #3
 8006732:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8006734:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006738:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800673c:	226d      	movs	r2, #109	; 0x6d
 800673e:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8006740:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006744:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006748:	2203      	movs	r2, #3
 800674a:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800674c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006750:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006754:	226f      	movs	r2, #111	; 0x6f
 8006756:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8006758:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800675c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006760:	2207      	movs	r2, #7
 8006762:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8006764:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006768:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800676c:	2229      	movs	r2, #41	; 0x29
 800676e:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(Dev,
 8006770:	f107 020c 	add.w	r2, r7, #12
 8006774:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006778:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800677c:	2306      	movs	r3, #6
 800677e:	f240 4196 	movw	r1, #1174	; 0x496
 8006782:	6800      	ldr	r0, [r0, #0]
 8006784:	f010 f93c 	bl	8016a00 <VL53L1_WriteMulti>
 8006788:	4603      	mov	r3, r0
 800678a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 800678e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006792:	2b00      	cmp	r3, #0
 8006794:	d11a      	bne.n	80067cc <VL53L1_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 8006796:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800679a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800679e:	2200      	movs	r2, #0
 80067a0:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80067a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80067a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067aa:	2207      	movs	r2, #7
 80067ac:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 80067ae:	f107 020c 	add.w	r2, r7, #12
 80067b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80067b6:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80067ba:	2302      	movs	r3, #2
 80067bc:	f240 4172 	movw	r1, #1138	; 0x472
 80067c0:	6800      	ldr	r0, [r0, #0]
 80067c2:	f010 f91d 	bl	8016a00 <VL53L1_WriteMulti>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE) {
 80067cc:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d11a      	bne.n	800680a <VL53L1_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 80067d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80067d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067dc:	2200      	movs	r2, #0
 80067de:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80067e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80067e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067e8:	2207      	movs	r2, #7
 80067ea:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 80067ec:	f107 020c 	add.w	r2, r7, #12
 80067f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80067f4:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80067f8:	2302      	movs	r3, #2
 80067fa:	f240 4174 	movw	r1, #1140	; 0x474
 80067fe:	6800      	ldr	r0, [r0, #0]
 8006800:	f010 f8fe 	bl	8016a00 <VL53L1_WriteMulti>
 8006804:	4603      	mov	r3, r0
 8006806:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE)
 800680a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10c      	bne.n	800682c <VL53L1_load_patch+0x22c>
		status = VL53L1_WrByte(Dev,
 8006812:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006816:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800681a:	2201      	movs	r2, #1
 800681c:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	f010 f959 	bl	8016ad8 <VL53L1_WrByte>
 8006826:	4603      	mov	r3, r0
 8006828:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__CTRL, 0x01);

	if (status == VL53L1_ERROR_NONE)
 800682c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10b      	bne.n	800684c <VL53L1_load_patch+0x24c>
		status = VL53L1_WrByte(Dev,
 8006834:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006838:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800683c:	2201      	movs	r2, #1
 800683e:	2185      	movs	r1, #133	; 0x85
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	f010 f949 	bl	8016ad8 <VL53L1_WrByte>
 8006846:	4603      	mov	r3, r0
 8006848:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800684c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8006850:	4618      	mov	r0, r3
 8006852:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop

0800685c <VL53L1_unload_patch>:

VL53L1_Error VL53L1_unload_patch(
	VL53L1_DEV Dev) {
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006864:	2300      	movs	r3, #0
 8006866:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8006868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d106      	bne.n	800687e <VL53L1_unload_patch+0x22>
		status = VL53L1_WrByte(Dev,
 8006870:	2200      	movs	r2, #0
 8006872:	2185      	movs	r1, #133	; 0x85
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f010 f92f 	bl	8016ad8 <VL53L1_WrByte>
 800687a:	4603      	mov	r3, r0
 800687c:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 800687e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d102      	bne.n	800688c <VL53L1_unload_patch+0x30>
		VL53L1_disable_powerforce(Dev);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f006 ffd4 	bl	800d834 <VL53L1_disable_powerforce>

	if (status == VL53L1_ERROR_NONE)
 800688c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d107      	bne.n	80068a4 <VL53L1_unload_patch+0x48>
		status = VL53L1_WrByte(Dev,
 8006894:	2200      	movs	r2, #0
 8006896:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f010 f91c 	bl	8016ad8 <VL53L1_WrByte>
 80068a0:	4603      	mov	r3, r0
 80068a2:	73fb      	strb	r3, [r7, #15]
		VL53L1_PATCH__CTRL, 0x00);

	if (status == VL53L1_ERROR_NONE)
 80068a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d106      	bne.n	80068ba <VL53L1_unload_patch+0x5e>
		status = VL53L1_WrByte(Dev,
 80068ac:	2201      	movs	r2, #1
 80068ae:	2185      	movs	r1, #133	; 0x85
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f010 f911 	bl	8016ad8 <VL53L1_WrByte>
 80068b6:	4603      	mov	r3, r0
 80068b8:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 80068ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 80068c6:	b5b0      	push	{r4, r5, r7, lr}
 80068c8:	b08a      	sub	sp, #40	; 0x28
 80068ca:	af04      	add	r7, sp, #16
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	460b      	mov	r3, r1
 80068d0:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80068d2:	2300      	movs	r3, #0
 80068d4:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t    *pdev =
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	3318      	adds	r3, #24
 80068da:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80068e2:	3308      	adds	r3, #8
 80068e4:	60fb      	str	r3, [r7, #12]



	VL53L1_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 80068e6:	2300      	movs	r3, #0
 80068e8:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53L1_init_ll_driver_state(
 80068ea:	2162      	movs	r1, #98	; 0x62
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f006 f810 	bl	800c912 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2204      	movs	r2, #4
 80068f6:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2210      	movs	r2, #16
 8006902:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800690e:	2300      	movs	r3, #0
 8006910:	75bb      	strb	r3, [r7, #22]
 8006912:	e01b      	b.n	800694c <VL53L1_data_init+0x86>
		pobjects = &(pres->zone_results.VL53L1_p_002[i]);
 8006914:	7dba      	ldrb	r2, [r7, #22]
 8006916:	4613      	mov	r3, r2
 8006918:	011b      	lsls	r3, r3, #4
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	3308      	adds	r3, #8
 8006928:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53L1_p_020 = 0;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2200      	movs	r2, #0
 800692e:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53L1_p_021  = 0;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2200      	movs	r2, #0
 8006934:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53L1_p_014          = 0;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2200      	movs	r2, #0
 800693a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8006946:	7dbb      	ldrb	r3, [r7, #22]
 8006948:	3301      	adds	r3, #1
 800694a:	75bb      	strb	r3, [r7, #22]
 800694c:	7dbb      	ldrb	r3, [r7, #22]
 800694e:	2b0f      	cmp	r3, #15
 8006950:	d9e0      	bls.n	8006914 <VL53L1_data_init+0x4e>
				VL53L1_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2210      	movs	r2, #16
 8006956:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2210      	movs	r2, #16
 8006966:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8006972:	2300      	movs	r3, #0
 8006974:	75bb      	strb	r3, [r7, #22]
 8006976:	e039      	b.n	80069ec <VL53L1_data_init+0x126>
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 8006978:	7dba      	ldrb	r2, [r7, #22]
 800697a:	68f9      	ldr	r1, [r7, #12]
 800697c:	4613      	mov	r3, r2
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	1a9b      	subs	r3, r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	440b      	add	r3, r1
 8006986:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 800698a:	2200      	movs	r2, #0
 800698c:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 800698e:	7dba      	ldrb	r2, [r7, #22]
 8006990:	68f9      	ldr	r1, [r7, #12]
 8006992:	4613      	mov	r3, r2
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	1a9b      	subs	r3, r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	440b      	add	r3, r1
 800699c:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 80069a4:	7dba      	ldrb	r2, [r7, #22]
 80069a6:	68f9      	ldr	r1, [r7, #12]
 80069a8:	4613      	mov	r3, r2
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	1a9b      	subs	r3, r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	440b      	add	r3, r1
 80069b2:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 80069b6:	2200      	movs	r2, #0
 80069b8:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].median_range_mm = 0;
 80069ba:	7dba      	ldrb	r2, [r7, #22]
 80069bc:	68f9      	ldr	r1, [r7, #12]
 80069be:	4613      	mov	r3, r2
 80069c0:	00db      	lsls	r3, r3, #3
 80069c2:	1a9b      	subs	r3, r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	440b      	add	r3, r1
 80069c8:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 80069cc:	2200      	movs	r2, #0
 80069ce:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 80069d0:	7dba      	ldrb	r2, [r7, #22]
 80069d2:	68f9      	ldr	r1, [r7, #12]
 80069d4:	4613      	mov	r3, r2
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	1a9b      	subs	r3, r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	440b      	add	r3, r1
 80069de:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80069e6:	7dbb      	ldrb	r3, [r7, #22]
 80069e8:	3301      	adds	r3, #1
 80069ea:	75bb      	strb	r3, [r7, #22]
 80069ec:	7dbb      	ldrb	r3, [r7, #22]
 80069ee:	2b0f      	cmp	r3, #15
 80069f0:	d9c2      	bls.n	8006978 <VL53L1_data_init+0xb2>
	}

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	2200      	movs	r2, #0
 80069f6:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	2201      	movs	r2, #1
 80069fc:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = VL53L1_DEVICEZONEPRESET_NONE;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	2200      	movs	r2, #0
 8006a02:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2200      	movs	r2, #0
 8006a08:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	2201      	movs	r2, #1
 8006a14:	715a      	strb	r2, [r3, #5]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	719a      	strb	r2, [r3, #6]
		VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a22:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006a2a:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006a32:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	2264      	movs	r2, #100	; 0x64
 8006a38:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006a40:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a50:	2203      	movs	r2, #3
 8006a52:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	pdev->offset_results.active_results = 0;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327



	pdev->gain_cal.standard_ranging_gain_factor =
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f240 72db 	movw	r2, #2011	; 0x7db
 8006a68:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8006a72:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53L1_init_version(Dev);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f005 ff2e 	bl	800c8d8 <VL53L1_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8006a82:	3318      	adds	r3, #24
 8006a84:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8006a88:	2100      	movs	r1, #0
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f017 fc94 	bl	801e3b8 <memset>
	pdev->bin_rec_pos = 0;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
	pdev->pos_before_next_recom = 0;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55



	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d008      	beq.n	8006ac0 <VL53L1_data_init+0x1fa>
 8006aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d104      	bne.n	8006ac0 <VL53L1_data_init+0x1fa>
		status = VL53L1_read_p2p_data(Dev);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f8b8 	bl	8006c2c <VL53L1_read_p2p_data>
 8006abc:	4603      	mov	r3, r0
 8006abe:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8006ac0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d107      	bne.n	8006ad8 <VL53L1_data_init+0x212>
		status = VL53L1_init_refspadchar_config_struct(
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f003 fdf8 	bl	800a6c4 <VL53L1_init_refspadchar_config_struct>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53L1_ERROR_NONE)
 8006ad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d107      	bne.n	8006af0 <VL53L1_data_init+0x22a>
		status = VL53L1_init_ssc_config_struct(
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f003 fe10 	bl	800a70c <VL53L1_init_ssc_config_struct>
 8006aec:	4603      	mov	r3, r0
 8006aee:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53L1_ERROR_NONE)
 8006af0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10b      	bne.n	8006b10 <VL53L1_data_init+0x24a>
		status = VL53L1_init_xtalk_config_struct(
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8006b04:	4619      	mov	r1, r3
 8006b06:	4610      	mov	r0, r2
 8006b08:	f003 fe21 	bl	800a74e <VL53L1_init_xtalk_config_struct>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53L1_ERROR_NONE)
 8006b10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d107      	bne.n	8006b28 <VL53L1_data_init+0x262>
		status = VL53L1_init_xtalk_extract_config_struct(
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f003 fe89 	bl	800a836 <VL53L1_init_xtalk_extract_config_struct>
 8006b24:	4603      	mov	r3, r0
 8006b26:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53L1_ERROR_NONE)
 8006b28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d107      	bne.n	8006b40 <VL53L1_data_init+0x27a>
		status = VL53L1_init_offset_cal_config_struct(
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8006b36:	4618      	mov	r0, r3
 8006b38:	f003 feac 	bl	800a894 <VL53L1_init_offset_cal_config_struct>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8006b40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d107      	bne.n	8006b58 <VL53L1_data_init+0x292>
		status = VL53L1_init_zone_cal_config_struct(
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f003 fec7 	bl	800a8e2 <VL53L1_init_zone_cal_config_struct>
 8006b54:	4603      	mov	r3, r0
 8006b56:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8006b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10b      	bne.n	8006b78 <VL53L1_data_init+0x2b2>
		status = VL53L1_init_hist_post_process_config_struct(
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f003 fedb 	bl	800a92a <VL53L1_init_hist_post_process_config_struct>
 8006b74:	4603      	mov	r3, r0
 8006b76:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53L1_ERROR_NONE)
 8006b78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d107      	bne.n	8006b90 <VL53L1_data_init+0x2ca>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8006b86:	4618      	mov	r0, r3
 8006b88:	f004 f8f6 	bl	800ad78 <VL53L1_init_hist_gen3_dmax_config_struct>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53L1_ERROR_NONE)
 8006b90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d107      	bne.n	8006ba8 <VL53L1_data_init+0x2e2>
		status = VL53L1_init_tuning_parm_storage_struct(
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f003 ff32 	bl	800aa08 <VL53L1_init_tuning_parm_storage_struct>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53L1_ERROR_NONE)
 8006ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d116      	bne.n	8006bde <VL53L1_data_init+0x318>
		status = VL53L1_set_preset_mode(
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	7858      	ldrb	r0, [r3, #1]
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	8b1c      	ldrh	r4, [r3, #24]
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	689d      	ldr	r5, [r3, #8]
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	6912      	ldr	r2, [r2, #16]
 8006bc4:	6939      	ldr	r1, [r7, #16]
 8006bc6:	6949      	ldr	r1, [r1, #20]
 8006bc8:	9102      	str	r1, [sp, #8]
 8006bca:	9201      	str	r2, [sp, #4]
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	462b      	mov	r3, r5
 8006bd0:	4622      	mov	r2, r4
 8006bd2:	4601      	mov	r1, r0
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fc8f 	bl	80074f8 <VL53L1_set_preset_mode>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53L1_init_histogram_bin_data_struct(
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006be4:	461a      	mov	r2, r3
 8006be6:	2118      	movs	r1, #24
 8006be8:	2000      	movs	r0, #0
 8006bea:	f00a fa90 	bl	801110e <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53L1_init_histogram_bin_data_struct(
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	2118      	movs	r1, #24
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	f00a fa88 	bl	801110e <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53L1_init_xtalk_bin_data_struct(
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8006c04:	461a      	mov	r2, r3
 8006c06:	210c      	movs	r1, #12
 8006c08:	2000      	movs	r0, #0
 8006c0a:	f006 fc26 	bl	800d45a <VL53L1_init_xtalk_bin_data_struct>
			VL53L1_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53L1_xtalk_cal_data_init(
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f009 fcd2 	bl	80105b8 <VL53L1_xtalk_cal_data_init>
			Dev
			);



	VL53L1_dynamic_xtalk_correction_data_init(
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f009 fbd1 	bl	80103bc <VL53L1_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53L1_low_power_auto_data_init(
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f009 fcf7 	bl	801060e <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8006c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bdb0      	pop	{r4, r5, r7, pc}

08006c2c <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8006c2c:	b590      	push	{r4, r7, lr}
 8006c2e:	b091      	sub	sp, #68	; 0x44
 8006c30:	af04      	add	r7, sp, #16
 8006c32:	6078      	str	r0, [r7, #4]



	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8006c34:	2300      	movs	r3, #0
 8006c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	3318      	adds	r3, #24
 8006c3e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	3348      	adds	r3, #72	; 0x48
 8006c4c:	623b      	str	r3, [r7, #32]
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	339c      	adds	r3, #156	; 0x9c
 8006c52:	61fb      	str	r3, [r7, #28]

	VL53L1_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8006c54:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d109      	bne.n	8006c70 <VL53L1_read_p2p_data+0x44>
		status = VL53L1_get_static_nvm_managed(
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f00d fdd1 	bl	801480c <VL53L1_get_static_nvm_managed>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8006c70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d108      	bne.n	8006c8a <VL53L1_read_p2p_data+0x5e>
		status = VL53L1_get_customer_nvm_managed(
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	3348      	adds	r3, #72	; 0x48
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f00d ff02 	bl	8014a88 <VL53L1_get_customer_nvm_managed>
 8006c84:	4603      	mov	r3, r0
 8006c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8006c8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d117      	bne.n	8006cc2 <VL53L1_read_p2p_data+0x96>

		status = VL53L1_get_nvm_copy_data(
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	f203 33d6 	addw	r3, r3, #982	; 0x3d6
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f00e fdda 	bl	8015854 <VL53L1_get_nvm_copy_data>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53L1_ERROR_NONE)
 8006ca6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <VL53L1_read_p2p_data+0x96>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8006cba:	4619      	mov	r1, r3
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	f006 f921 	bl	800cf04 <VL53L1_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53L1_ERROR_NONE) {
 8006cc2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10e      	bne.n	8006ce8 <VL53L1_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	895b      	ldrh	r3, [r3, #10]
 8006cce:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53L1_ERROR_NONE)
 8006ce8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d108      	bne.n	8006d02 <VL53L1_read_p2p_data+0xd6>
		status =
			VL53L1_read_nvm_optical_centre(
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	33c0      	adds	r3, #192	; 0xc0
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f00d fc3c 	bl	8014574 <VL53L1_read_nvm_optical_centre>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53L1_ERROR_NONE)
 8006d02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d108      	bne.n	8006d1c <VL53L1_read_p2p_data+0xf0>
		status =
			VL53L1_read_nvm_cal_peak_rate_map(
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	3360      	adds	r3, #96	; 0x60
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f00d fc52 	bl	80145ba <VL53L1_read_nvm_cal_peak_rate_map>
 8006d16:	4603      	mov	r3, r0
 8006d18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53L1_ERROR_NONE) {
 8006d1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d12d      	bne.n	8006d80 <VL53L1_read_p2p_data+0x154>

		status =
			VL53L1_read_nvm_additional_offset_cal_data(
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	339c      	adds	r3, #156	; 0x9c
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f00d fc6b 	bl	8014606 <VL53L1_read_nvm_additional_offset_cal_data>
 8006d30:	4603      	mov	r3, r0
 8006d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	889b      	ldrh	r3, [r3, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d120      	bne.n	8006d80 <VL53L1_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d11c      	bne.n	8006d80 <VL53L1_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	2280      	movs	r2, #128	; 0x80
 8006d4a:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006d52:	80da      	strh	r2, [r3, #6]



			VL53L1_calc_mm_effective_spads(
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	f893 0406 	ldrb.w	r0, [r3, #1030]	; 0x406
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	f893 4407 	ldrb.w	r4, [r3, #1031]	; 0x407
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8006d66:	69fa      	ldr	r2, [r7, #28]
 8006d68:	69f9      	ldr	r1, [r7, #28]
 8006d6a:	3102      	adds	r1, #2
 8006d6c:	9103      	str	r1, [sp, #12]
 8006d6e:	9202      	str	r2, [sp, #8]
 8006d70:	2238      	movs	r2, #56	; 0x38
 8006d72:	9201      	str	r2, [sp, #4]
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	23ff      	movs	r3, #255	; 0xff
 8006d78:	22c7      	movs	r2, #199	; 0xc7
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	f008 f934 	bl	800efe8 <VL53L1_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53L1_ERROR_NONE) {
 8006d80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d12f      	bne.n	8006de8 <VL53L1_read_p2p_data+0x1bc>

		status =
			VL53L1_read_nvm_fmt_range_results_data(
 8006d88:	f107 030c 	add.w	r3, r7, #12
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f00d fc5a 	bl	801464c <VL53L1_read_nvm_fmt_range_results_data>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53L1_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53L1_ERROR_NONE) {
 8006d9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d120      	bne.n	8006de8 <VL53L1_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8006da6:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8006dae:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8006db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db2:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8006db6:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8006dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d006      	beq.n	8006dd6 <VL53L1_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8006dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8006dd4:	e003      	b.n	8006dde <VL53L1_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8006dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd8:	2214      	movs	r2, #20
 8006dda:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006de4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53L1_ERROR_NONE)
 8006de8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10b      	bne.n	8006e08 <VL53L1_read_p2p_data+0x1dc>
		status =
			VL53L1_RdWord(
 8006df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df2:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006df6:	3308      	adds	r3, #8
 8006df8:	461a      	mov	r2, r3
 8006dfa:	21de      	movs	r1, #222	; 0xde
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f00f fefb 	bl	8016bf8 <VL53L1_RdWord>
 8006e02:	4603      	mov	r3, r0
 8006e04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L1_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8006e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e12:	d204      	bcs.n	8006e1e <VL53L1_read_p2p_data+0x1f2>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8006e1a:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	}



	if (status == VL53L1_ERROR_NONE)
 8006e1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d108      	bne.n	8006e38 <VL53L1_read_p2p_data+0x20c>
		status =
			VL53L1_get_mode_mitigation_roi(
 8006e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e28:	33bc      	adds	r3, #188	; 0xbc
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f97d 	bl	800712c <VL53L1_get_mode_mitigation_roi>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8006e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d114      	bne.n	8006e6c <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8006e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e44:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10f      	bne.n	8006e6c <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8006e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e58:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8006e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8006e62:	011b      	lsls	r3, r3, #4
 8006e64:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8006e6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3734      	adds	r7, #52	; 0x34
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd90      	pop	{r4, r7, pc}

08006e78 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e82:	2300      	movs	r3, #0
 8006e84:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	3318      	adds	r3, #24
 8006e8a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e92:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <VL53L1_set_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8006e9a:	23f1      	movs	r3, #241	; 0xf1
 8006e9c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8006e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10e      	bne.n	8006ec4 <VL53L1_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb2:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8006eb6:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	}

	LOG_FUNCTION_END(status);

	return status;
 8006ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	3318      	adds	r3, #24
 8006ee6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eee:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <VL53L1_get_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8006ef6:	23f1      	movs	r3, #241	; 0xf1
 8006ef8:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8006efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10b      	bne.n	8006f1a <VL53L1_get_inter_measurement_period_ms+0x46>
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f0e:	f8b2 23a8 	ldrh.w	r2, [r2, #936]	; 0x3a8
			pdev->tim_cfg.system__intermeasurement_period /
 8006f12:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms =
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8006f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b088      	sub	sp, #32
 8006f2e:	af02      	add	r7, sp, #8
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	607a      	str	r2, [r7, #4]
 8006f36:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3318      	adds	r3, #24
 8006f40:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <VL53L1_set_timeouts_us+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8006f4c:	23f1      	movs	r3, #241	; 0xf1
 8006f4e:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8006f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d11b      	bne.n	8006f90 <VL53L1_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	611a      	str	r2, [r3, #16]

		status =
		VL53L1_calc_timeout_register_values(
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f8b3 1322 	ldrh.w	r1, [r3, #802]	; 0x322
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f203 3362 	addw	r3, r3, #866	; 0x362
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	f502 725e 	add.w	r2, r2, #888	; 0x378
 8006f7c:	9201      	str	r2, [sp, #4]
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	460b      	mov	r3, r1
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	6879      	ldr	r1, [r7, #4]
 8006f86:	68b8      	ldr	r0, [r7, #8]
 8006f88:	f006 fe0b 	bl	800dba2 <VL53L1_calc_timeout_register_values>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8006f90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006faa:	2300      	movs	r3, #0
 8006fac:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3318      	adds	r3, #24
 8006fb2:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <VL53L1_get_timeouts_us+0x2e>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8006fc6:	23f1      	movs	r3, #241	; 0xf1
 8006fc8:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8006fca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d14a      	bne.n	8007068 <VL53L1_get_timeouts_us+0xcc>


		macro_period_us =
			VL53L1_calc_macro_period_us(
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8006fde:	4619      	mov	r1, r3
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	f006 fc56 	bl	800d892 <VL53L1_calc_macro_period_us>
 8006fe6:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
			VL53L1_calc_timeout_us(
 8006fee:	6979      	ldr	r1, [r7, #20]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f006 fd14 	bl	800da1e <VL53L1_calc_timeout_us>
 8006ff6:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
		timeout_encoded =
 8007002:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8007004:	8a7b      	ldrh	r3, [r7, #18]
 8007006:	021b      	lsls	r3, r3, #8
 8007008:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 8007010:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8007012:	4413      	add	r3, r2
 8007014:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8007016:	8a7b      	ldrh	r3, [r7, #18]
 8007018:	6979      	ldr	r1, [r7, #20]
 800701a:	4618      	mov	r0, r3
 800701c:	f006 fd66 	bl	800daec <VL53L1_calc_decoded_timeout_us>
 8007020:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
		timeout_encoded =
 800702c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800702e:	8a7b      	ldrh	r3, [r7, #18]
 8007030:	021b      	lsls	r3, r3, #8
 8007032:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	f893 337d 	ldrb.w	r3, [r3, #893]	; 0x37d
 800703a:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800703c:	4413      	add	r3, r2
 800703e:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8007040:	8a7b      	ldrh	r3, [r7, #18]
 8007042:	6979      	ldr	r1, [r7, #20]
 8007044:	4618      	mov	r0, r3
 8007046:	f006 fd51 	bl	800daec <VL53L1_calc_decoded_timeout_us>
 800704a:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8007068:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3720      	adds	r7, #32
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	460b      	mov	r3, r1
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007082:	2300      	movs	r3, #0
 8007084:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	3318      	adds	r3, #24
 800708a:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 800708c:	2301      	movs	r3, #1
 800708e:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8007090:	7afb      	ldrb	r3, [r7, #11]
 8007092:	2b07      	cmp	r3, #7
 8007094:	d81c      	bhi.n	80070d0 <VL53L1_get_sequence_config_bit+0x5c>

		if (bit_id > 0)
 8007096:	7afb      	ldrb	r3, [r7, #11]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d004      	beq.n	80070a6 <VL53L1_get_sequence_config_bit+0x32>
			bit_mask  = 0x01 << bit_id;
 800709c:	7afb      	ldrb	r3, [r7, #11]
 800709e:	2201      	movs	r2, #1
 80070a0:	fa02 f303 	lsl.w	r3, r2, r3
 80070a4:	75bb      	strb	r3, [r7, #22]

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f893 23a1 	ldrb.w	r2, [r3, #929]	; 0x3a1
		*pvalue =
 80070ac:	7dbb      	ldrb	r3, [r7, #22]
 80070ae:	4013      	ands	r3, r2
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0)
 80070b6:	7afb      	ldrb	r3, [r7, #11]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00b      	beq.n	80070d4 <VL53L1_get_sequence_config_bit+0x60>
			*pvalue  = *pvalue >> bit_id;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	461a      	mov	r2, r3
 80070c2:	7afb      	ldrb	r3, [r7, #11]
 80070c4:	fa42 f303 	asr.w	r3, r2, r3
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	e001      	b.n	80070d4 <VL53L1_get_sequence_config_bit+0x60>

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 80070d0:	23fc      	movs	r3, #252	; 0xfc
 80070d2:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 80070d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	3318      	adds	r3, #24
 80070f6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	7858      	ldrb	r0, [r3, #1]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	7819      	ldrb	r1, [r3, #0]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f203 339f 	addw	r3, r3, #927	; 0x39f
 8007106:	461a      	mov	r2, r3
 8007108:	f007 fdeb 	bl	800ece2 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	7898      	ldrb	r0, [r3, #2]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	78d9      	ldrb	r1, [r3, #3]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 800711a:	461a      	mov	r2, r3
 800711c:	f007 fe20 	bl	800ed60 <VL53L1_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8007120:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007136:	2300      	movs	r3, #0
 8007138:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3318      	adds	r3, #24
 800713e:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8007140:	2300      	movs	r3, #0
 8007142:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8007148:	2300      	movs	r3, #0
 800714a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8007152:	f107 020e 	add.w	r2, r7, #14
 8007156:	f107 010d 	add.w	r1, r7, #13
 800715a:	4618      	mov	r0, r3
 800715c:	f00a f880 	bl	8011260 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8007160:	7bba      	ldrb	r2, [r7, #14]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8007166:	7b7a      	ldrb	r2, [r7, #13]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8007172:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8007174:	7bfb      	ldrb	r3, [r7, #15]
 8007176:	091b      	lsrs	r3, r3, #4
 8007178:	b2da      	uxtb	r2, r3
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	b2da      	uxtb	r2, r3
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800718a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80071a0:	2300      	movs	r3, #0
 80071a2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	3318      	adds	r3, #24
 80071a8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f103 00de 	add.w	r0, r3, #222	; 0xde
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	331c      	adds	r3, #28
 80071b4:	2240      	movs	r2, #64	; 0x40
 80071b6:	4619      	mov	r1, r3
 80071b8:	f017 f8d6 	bl	801e368 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	781a      	ldrb	r2, [r3, #0]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	785a      	ldrb	r2, [r3, #1]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	33c2      	adds	r3, #194	; 0xc2
 80071d4:	4618      	mov	r0, r3
 80071d6:	f00f fbce 	bl	8016976 <VL53L1_init_zone_config_histogram_bins>
 80071da:	4603      	mov	r3, r0
 80071dc:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d104      	bne.n	80071f0 <VL53L1_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 80071ee:	e00f      	b.n	8007210 <VL53L1_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	785b      	ldrb	r3, [r3, #1]
 80071f4:	2b0f      	cmp	r3, #15
 80071f6:	d807      	bhi.n	8007208 <VL53L1_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	785b      	ldrb	r3, [r3, #1]
 80071fc:	3301      	adds	r3, #1
 80071fe:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8007206:	e003      	b.n	8007210 <VL53L1_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2211      	movs	r2, #17
 800720c:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
				VL53L1_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8007210:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007226:	2300      	movs	r3, #0
 8007228:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3318      	adds	r3, #24
 800722e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	33c2      	adds	r3, #194	; 0xc2
 8007234:	226c      	movs	r2, #108	; 0x6c
 8007236:	4619      	mov	r1, r3
 8007238:	6838      	ldr	r0, [r7, #0]
 800723a:	f017 f895 	bl	801e368 <memcpy>

	LOG_FUNCTION_END(status);

	return status;
 800723e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	607a      	str	r2, [r7, #4]
 8007256:	603b      	str	r3, [r7, #0]
 8007258:	460b      	mov	r3, r1
 800725a:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800725c:	2300      	movs	r3, #0
 800725e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3318      	adds	r3, #24
 8007264:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8007266:	7afb      	ldrb	r3, [r7, #11]
 8007268:	3b01      	subs	r3, #1
 800726a:	2b26      	cmp	r3, #38	; 0x26
 800726c:	f200 8139 	bhi.w	80074e2 <VL53L1_get_preset_mode_timing_cfg+0x296>
 8007270:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <VL53L1_get_preset_mode_timing_cfg+0x2c>)
 8007272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007276:	bf00      	nop
 8007278:	08007315 	.word	0x08007315
 800727c:	08007315 	.word	0x08007315
 8007280:	08007315 	.word	0x08007315
 8007284:	08007315 	.word	0x08007315
 8007288:	08007315 	.word	0x08007315
 800728c:	0800733f 	.word	0x0800733f
 8007290:	0800733f 	.word	0x0800733f
 8007294:	0800733f 	.word	0x0800733f
 8007298:	080074e3 	.word	0x080074e3
 800729c:	080074e3 	.word	0x080074e3
 80072a0:	08007393 	.word	0x08007393
 80072a4:	0800743b 	.word	0x0800743b
 80072a8:	08007393 	.word	0x08007393
 80072ac:	080074e3 	.word	0x080074e3
 80072b0:	080074e3 	.word	0x080074e3
 80072b4:	080074e3 	.word	0x080074e3
 80072b8:	08007315 	.word	0x08007315
 80072bc:	0800733f 	.word	0x0800733f
 80072c0:	08007393 	.word	0x08007393
 80072c4:	08007393 	.word	0x08007393
 80072c8:	08007393 	.word	0x08007393
 80072cc:	08007393 	.word	0x08007393
 80072d0:	08007393 	.word	0x08007393
 80072d4:	080073bd 	.word	0x080073bd
 80072d8:	080073e7 	.word	0x080073e7
 80072dc:	08007411 	.word	0x08007411
 80072e0:	08007393 	.word	0x08007393
 80072e4:	08007393 	.word	0x08007393
 80072e8:	08007393 	.word	0x08007393
 80072ec:	08007465 	.word	0x08007465
 80072f0:	08007465 	.word	0x08007465
 80072f4:	08007465 	.word	0x08007465
 80072f8:	0800748f 	.word	0x0800748f
 80072fc:	0800748f 	.word	0x0800748f
 8007300:	0800748f 	.word	0x0800748f
 8007304:	08007369 	.word	0x08007369
 8007308:	08007369 	.word	0x08007369
 800730c:	08007369 	.word	0x08007369
 8007310:	080074b9 	.word	0x080074b9
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
		*pdss_config__target_total_rate_mcps =
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*pphasecal_config_timeout_us =
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
		*pmm_config_timeout_us =
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
		*prange_config_timeout_us =
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	601a      	str	r2, [r3, #0]
	break;
 800733c:	e0d4      	b.n	80074e8 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
		*pmm_config_timeout_us =
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
		*prange_config_timeout_us =
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	601a      	str	r2, [r3, #0]
	break;
 8007366:	e0bf      	b.n	80074e8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
		*pmm_config_timeout_us =
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		*prange_config_timeout_us =
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	601a      	str	r2, [r3, #0]
	break;
 8007390:	e0aa      	b.n	80074e8 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	601a      	str	r2, [r3, #0]

	break;
 80073ba:	e095      	b.n	80074e8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
		*pphasecal_config_timeout_us =
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	601a      	str	r2, [r3, #0]
	break;
 80073e4:	e080      	b.n	80074e8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
		*pphasecal_config_timeout_us =
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	601a      	str	r2, [r3, #0]
	break;
 800740e:	e06b      	b.n	80074e8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
		*pphasecal_config_timeout_us =
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	601a      	str	r2, [r3, #0]
	break;
 8007438:	e056      	b.n	80074e8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	601a      	str	r2, [r3, #0]
	break;
 8007462:	e041      	b.n	80074e8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	601a      	str	r2, [r3, #0]
	break;
 800748c:	e02c      	b.n	80074e8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	601a      	str	r2, [r3, #0]
	break;
 80074b6:	e017      	b.n	80074e8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
		*pdss_config__target_total_rate_mcps =
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	601a      	str	r2, [r3, #0]
	break;
 80074e0:	e002      	b.n	80074e8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80074e2:	23fc      	movs	r3, #252	; 0xfc
 80074e4:	75fb      	strb	r3, [r7, #23]
		break;
 80074e6:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80074e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	371c      	adds	r7, #28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b098      	sub	sp, #96	; 0x60
 80074fc:	af06      	add	r7, sp, #24
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	607b      	str	r3, [r7, #4]
 8007502:	460b      	mov	r3, r1
 8007504:	72fb      	strb	r3, [r7, #11]
 8007506:	4613      	mov	r3, r2
 8007508:	813b      	strh	r3, [r7, #8]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800750a:	2300      	movs	r3, #0
 800750c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53L1_LLDriverData_t *pdev =
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3318      	adds	r3, #24
 8007514:	643b      	str	r3, [r7, #64]	; 0x40
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800751c:	3308      	adds	r3, #8
 800751e:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_hist_post_process_config_t *phistpostprocess =
 8007520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007522:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8007526:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8007528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800752a:	f203 3342 	addw	r3, r3, #834	; 0x342
 800752e:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8007530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007532:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8007536:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8007538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800753a:	f203 3362 	addw	r3, r3, #866	; 0x362
 800753e:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8007540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007542:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8007546:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8007548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800754a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800754e:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8007550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007552:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8007556:	623b      	str	r3, [r7, #32]
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8007558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800755a:	33c2      	adds	r3, #194	; 0xc2
 800755c:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800755e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007560:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8007564:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8007566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007568:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800756c:	3318      	adds	r3, #24
 800756e:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8007570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007572:	7afa      	ldrb	r2, [r7, #11]
 8007574:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8007576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007578:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800757a:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800757c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800757e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007580:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8007582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007584:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007586:	615a      	str	r2, [r3, #20]



	VL53L1_init_ll_driver_state(
 8007588:	2103      	movs	r1, #3
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f005 f9c1 	bl	800c912 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8007590:	7afb      	ldrb	r3, [r7, #11]
 8007592:	3b01      	subs	r3, #1
 8007594:	2b26      	cmp	r3, #38	; 0x26
 8007596:	f200 8321 	bhi.w	8007bdc <VL53L1_set_preset_mode+0x6e4>
 800759a:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <VL53L1_set_preset_mode+0xa8>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	0800763d 	.word	0x0800763d
 80075a4:	08007661 	.word	0x08007661
 80075a8:	08007685 	.word	0x08007685
 80075ac:	080076a9 	.word	0x080076a9
 80075b0:	080076cd 	.word	0x080076cd
 80075b4:	080076f1 	.word	0x080076f1
 80075b8:	08007715 	.word	0x08007715
 80075bc:	08007739 	.word	0x08007739
 80075c0:	08007bdd 	.word	0x08007bdd
 80075c4:	08007bdd 	.word	0x08007bdd
 80075c8:	0800775d 	.word	0x0800775d
 80075cc:	080078c5 	.word	0x080078c5
 80075d0:	08007a55 	.word	0x08007a55
 80075d4:	08007a7d 	.word	0x08007a7d
 80075d8:	08007aa5 	.word	0x08007aa5
 80075dc:	08007acd 	.word	0x08007acd
 80075e0:	08007af5 	.word	0x08007af5
 80075e4:	08007b19 	.word	0x08007b19
 80075e8:	0800789d 	.word	0x0800789d
 80075ec:	08007785 	.word	0x08007785
 80075f0:	080077ad 	.word	0x080077ad
 80075f4:	080077d5 	.word	0x080077d5
 80075f8:	080077fd 	.word	0x080077fd
 80075fc:	08007825 	.word	0x08007825
 8007600:	0800784d 	.word	0x0800784d
 8007604:	08007875 	.word	0x08007875
 8007608:	080078ed 	.word	0x080078ed
 800760c:	08007915 	.word	0x08007915
 8007610:	0800793d 	.word	0x0800793d
 8007614:	08007965 	.word	0x08007965
 8007618:	0800798d 	.word	0x0800798d
 800761c:	080079b5 	.word	0x080079b5
 8007620:	080079dd 	.word	0x080079dd
 8007624:	08007a05 	.word	0x08007a05
 8007628:	08007a2d 	.word	0x08007a2d
 800762c:	08007b3d 	.word	0x08007b3d
 8007630:	08007b65 	.word	0x08007b65
 8007634:	08007b8d 	.word	0x08007b8d
 8007638:	08007bb5 	.word	0x08007bb5

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	9303      	str	r3, [sp, #12]
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	9302      	str	r3, [sp, #8]
 8007644:	6a3b      	ldr	r3, [r7, #32]
 8007646:	9301      	str	r3, [sp, #4]
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007650:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007652:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007654:	f003 fbc6 	bl	800ade4 <VL53L1_preset_mode_standard_ranging>
 8007658:	4603      	mov	r3, r0
 800765a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800765e:	e2c1      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	9303      	str	r3, [sp, #12]
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	9302      	str	r3, [sp, #8]
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007674:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007676:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007678:	f003 fd2d 	bl	800b0d6 <VL53L1_preset_mode_standard_ranging_short_range>
 800767c:	4603      	mov	r3, r0
 800767e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007682:	e2af      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	9303      	str	r3, [sp, #12]
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	9302      	str	r3, [sp, #8]
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800769a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800769c:	f003 fd60 	bl	800b160 <VL53L1_preset_mode_standard_ranging_long_range>
 80076a0:	4603      	mov	r3, r0
 80076a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80076a6:	e29d      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	9303      	str	r3, [sp, #12]
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	9302      	str	r3, [sp, #8]
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	9301      	str	r3, [sp, #4]
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80076c0:	f003 fd93 	bl	800b1ea <VL53L1_preset_mode_standard_ranging_mm1_cal>
 80076c4:	4603      	mov	r3, r0
 80076c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80076ca:	e28b      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	9303      	str	r3, [sp, #12]
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	9302      	str	r3, [sp, #8]
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80076e4:	f003 fdaa 	bl	800b23c <VL53L1_preset_mode_standard_ranging_mm2_cal>
 80076e8:	4603      	mov	r3, r0
 80076ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80076ee:	e279      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	9303      	str	r3, [sp, #12]
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	9302      	str	r3, [sp, #8]
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	9301      	str	r3, [sp, #4]
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007704:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007706:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007708:	f003 fdc1 	bl	800b28e <VL53L1_preset_mode_timed_ranging>
 800770c:	4603      	mov	r3, r0
 800770e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007712:	e267      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	9303      	str	r3, [sp, #12]
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	9302      	str	r3, [sp, #8]
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	9301      	str	r3, [sp, #4]
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007728:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800772a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800772c:	f003 fded 	bl	800b30a <VL53L1_preset_mode_timed_ranging_short_range>
 8007730:	4603      	mov	r3, r0
 8007732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007736:	e255      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	9303      	str	r3, [sp, #12]
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	9302      	str	r3, [sp, #8]
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	9301      	str	r3, [sp, #4]
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800774c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800774e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007750:	f003 fe19 	bl	800b386 <VL53L1_preset_mode_timed_ranging_long_range>
 8007754:	4603      	mov	r3, r0
 8007756:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800775a:	e243      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING:
		status = VL53L1_preset_mode_histogram_ranging(
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	9304      	str	r3, [sp, #16]
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	9303      	str	r3, [sp, #12]
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	9302      	str	r3, [sp, #8]
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007774:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007776:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007778:	f003 fefb 	bl	800b572 <VL53L1_preset_mode_histogram_ranging>
 800777c:	4603      	mov	r3, r0
 800777e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007782:	e22f      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM1:
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	9304      	str	r3, [sp, #16]
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	9303      	str	r3, [sp, #12]
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	9302      	str	r3, [sp, #8]
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	9301      	str	r3, [sp, #4]
 8007794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800779c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800779e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077a0:	f003 ff7c 	bl	800b69c <VL53L1_preset_mode_histogram_ranging_with_mm1>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80077aa:	e21b      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM2:
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	9304      	str	r3, [sp, #16]
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	9303      	str	r3, [sp, #12]
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	9302      	str	r3, [sp, #8]
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	9301      	str	r3, [sp, #4]
 80077bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80077c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077c8:	f003 ffcc 	bl	800b764 <VL53L1_preset_mode_histogram_ranging_with_mm2>
 80077cc:	4603      	mov	r3, r0
 80077ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80077d2:	e207      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	9304      	str	r3, [sp, #16]
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	9303      	str	r3, [sp, #12]
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	9302      	str	r3, [sp, #8]
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	9301      	str	r3, [sp, #4]
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80077ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077f0:	f003 ffe0 	bl	800b7b4 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 80077f4:	4603      	mov	r3, r0
 80077f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80077fa:	e1f3      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	9304      	str	r3, [sp, #16]
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	9303      	str	r3, [sp, #12]
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	9302      	str	r3, [sp, #8]
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	9301      	str	r3, [sp, #4]
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007814:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007816:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007818:	f004 f830 	bl	800b87c <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 800781c:	4603      	mov	r3, r0
 800781e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007822:	e1df      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		status = VL53L1_preset_mode_histogram_multizone(
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	9304      	str	r3, [sp, #16]
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	9303      	str	r3, [sp, #12]
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	9302      	str	r3, [sp, #8]
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	9301      	str	r3, [sp, #4]
 8007834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800783c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800783e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007840:	f004 fe25 	bl	800c48e <VL53L1_preset_mode_histogram_multizone>
 8007844:	4603      	mov	r3, r0
 8007846:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800784a:	e1cb      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	9304      	str	r3, [sp, #16]
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	9303      	str	r3, [sp, #12]
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	9302      	str	r3, [sp, #8]
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	9301      	str	r3, [sp, #4]
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007864:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007866:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007868:	f004 fe63 	bl	800c532 <VL53L1_preset_mode_histogram_multizone_short_range>
 800786c:	4603      	mov	r3, r0
 800786e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007872:	e1b7      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	9304      	str	r3, [sp, #16]
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	9303      	str	r3, [sp, #12]
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	9302      	str	r3, [sp, #8]
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	9301      	str	r3, [sp, #4]
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800788c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800788e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007890:	f004 fea1 	bl	800c5d6 <VL53L1_preset_mode_histogram_multizone_long_range>
 8007894:	4603      	mov	r3, r0
 8007896:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800789a:	e1a3      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_REF_ARRAY:
		status = VL53L1_preset_mode_histogram_ranging_ref(
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	9304      	str	r3, [sp, #16]
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	9303      	str	r3, [sp, #12]
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	9302      	str	r3, [sp, #8]
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	9301      	str	r3, [sp, #4]
 80078ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80078b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078b8:	f004 ffde 	bl	800c878 <VL53L1_preset_mode_histogram_ranging_ref>
 80078bc:	4603      	mov	r3, r0
 80078be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80078c2:	e18f      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	9304      	str	r3, [sp, #16]
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	9303      	str	r3, [sp, #12]
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	9302      	str	r3, [sp, #8]
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	9301      	str	r3, [sp, #4]
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80078de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078e0:	f003 fff4 	bl	800b8cc <VL53L1_preset_mode_histogram_ranging_short_timing>
 80078e4:	4603      	mov	r3, r0
 80078e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80078ea:	e17b      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_long_range(
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	9304      	str	r3, [sp, #16]
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	9303      	str	r3, [sp, #12]
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	9302      	str	r3, [sp, #8]
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	9301      	str	r3, [sp, #4]
 80078fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007904:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007906:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007908:	f004 f86c 	bl	800b9e4 <VL53L1_preset_mode_histogram_long_range>
 800790c:	4603      	mov	r3, r0
 800790e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007912:	e167      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	9304      	str	r3, [sp, #16]
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	9303      	str	r3, [sp, #12]
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	9302      	str	r3, [sp, #8]
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	9301      	str	r3, [sp, #4]
 8007924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800792c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800792e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007930:	f004 f8f6 	bl	800bb20 <VL53L1_preset_mode_histogram_long_range_mm1>
 8007934:	4603      	mov	r3, r0
 8007936:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800793a:	e153      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	9304      	str	r3, [sp, #16]
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	9303      	str	r3, [sp, #12]
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	9302      	str	r3, [sp, #8]
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	9301      	str	r3, [sp, #4]
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007954:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007956:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007958:	f004 f943 	bl	800bbe2 <VL53L1_preset_mode_histogram_long_range_mm2>
 800795c:	4603      	mov	r3, r0
 800795e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007962:	e13f      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53L1_preset_mode_histogram_medium_range(
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	9304      	str	r3, [sp, #16]
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	9303      	str	r3, [sp, #12]
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	9302      	str	r3, [sp, #8]
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	9301      	str	r3, [sp, #4]
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800797c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800797e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007980:	f004 f957 	bl	800bc32 <VL53L1_preset_mode_histogram_medium_range>
 8007984:	4603      	mov	r3, r0
 8007986:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800798a:	e12b      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	9304      	str	r3, [sp, #16]
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	9303      	str	r3, [sp, #12]
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	9302      	str	r3, [sp, #8]
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	9301      	str	r3, [sp, #4]
 800799c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80079a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079a8:	f004 f9e1 	bl	800bd6e <VL53L1_preset_mode_histogram_medium_range_mm1>
 80079ac:	4603      	mov	r3, r0
 80079ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80079b2:	e117      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	9304      	str	r3, [sp, #16]
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	9303      	str	r3, [sp, #12]
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	9302      	str	r3, [sp, #8]
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	9301      	str	r3, [sp, #4]
 80079c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80079ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079d0:	f004 fa2e 	bl	800be30 <VL53L1_preset_mode_histogram_medium_range_mm2>
 80079d4:	4603      	mov	r3, r0
 80079d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80079da:	e103      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_short_range(
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	9304      	str	r3, [sp, #16]
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	9303      	str	r3, [sp, #12]
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	9302      	str	r3, [sp, #8]
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	9301      	str	r3, [sp, #4]
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80079f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079f8:	f004 fa42 	bl	800be80 <VL53L1_preset_mode_histogram_short_range>
 80079fc:	4603      	mov	r3, r0
 80079fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007a02:	e0ef      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	9304      	str	r3, [sp, #16]
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	9303      	str	r3, [sp, #12]
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	9302      	str	r3, [sp, #8]
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	9301      	str	r3, [sp, #4]
 8007a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a20:	f004 fb4c 	bl	800c0bc <VL53L1_preset_mode_histogram_short_range_mm1>
 8007a24:	4603      	mov	r3, r0
 8007a26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007a2a:	e0db      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	9304      	str	r3, [sp, #16]
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	9303      	str	r3, [sp, #12]
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	9302      	str	r3, [sp, #8]
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	9301      	str	r3, [sp, #4]
 8007a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a48:	f004 fb99 	bl	800c17e <VL53L1_preset_mode_histogram_short_range_mm2>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007a52:	e0c7      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		status = VL53L1_preset_mode_histogram_characterisation(
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	9304      	str	r3, [sp, #16]
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	9303      	str	r3, [sp, #12]
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	9302      	str	r3, [sp, #8]
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	9301      	str	r3, [sp, #4]
 8007a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a70:	f004 fbad 	bl	800c1ce <VL53L1_preset_mode_histogram_characterisation>
 8007a74:	4603      	mov	r3, r0
 8007a76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007a7a:	e0b3      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_PLANAR:
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	9304      	str	r3, [sp, #16]
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	9303      	str	r3, [sp, #12]
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	9302      	str	r3, [sp, #8]
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	9301      	str	r3, [sp, #4]
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a96:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a98:	f004 fbca 	bl	800c230 <VL53L1_preset_mode_histogram_xtalk_planar>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007aa2:	e09f      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM1:
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	9304      	str	r3, [sp, #16]
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	9303      	str	r3, [sp, #12]
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	9302      	str	r3, [sp, #8]
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	9301      	str	r3, [sp, #4]
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007abc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007abe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ac0:	f004 fc2d 	bl	800c31e <VL53L1_preset_mode_histogram_xtalk_mm1>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007aca:	e08b      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM2:
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	9304      	str	r3, [sp, #16]
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	9303      	str	r3, [sp, #12]
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	9302      	str	r3, [sp, #8]
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	9301      	str	r3, [sp, #4]
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ae4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ae6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ae8:	f004 fcad 	bl	800c446 <VL53L1_preset_mode_histogram_xtalk_mm2>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007af2:	e077      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	9303      	str	r3, [sp, #12]
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	9302      	str	r3, [sp, #8]
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007b0c:	f004 fdb5 	bl	800c67a <VL53L1_preset_mode_olt>
 8007b10:	4603      	mov	r3, r0
 8007b12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007b16:	e065      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	9303      	str	r3, [sp, #12]
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	9302      	str	r3, [sp, #8]
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	9301      	str	r3, [sp, #4]
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007b30:	f003 fce5 	bl	800b4fe <VL53L1_preset_mode_singleshot_ranging>
 8007b34:	4603      	mov	r3, r0
 8007b36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007b3a:	e053      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	9304      	str	r3, [sp, #16]
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	9303      	str	r3, [sp, #12]
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	9302      	str	r3, [sp, #8]
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b56:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007b58:	f003 fc7d 	bl	800b456 <VL53L1_preset_mode_low_power_auto_short_ranging>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8007b62:	e03f      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	9304      	str	r3, [sp, #16]
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	9303      	str	r3, [sp, #12]
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	9302      	str	r3, [sp, #8]
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	9301      	str	r3, [sp, #4]
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007b80:	f003 fc3f 	bl	800b402 <VL53L1_preset_mode_low_power_auto_ranging>
 8007b84:	4603      	mov	r3, r0
 8007b86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8007b8a:	e02b      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	9304      	str	r3, [sp, #16]
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	9303      	str	r3, [sp, #12]
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	9302      	str	r3, [sp, #8]
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	9301      	str	r3, [sp, #4]
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ba4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ba6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007ba8:	f003 fc7f 	bl	800b4aa <VL53L1_preset_mode_low_power_auto_long_ranging>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8007bb2:	e017      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>


	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_special_histogram_short_range(
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	9304      	str	r3, [sp, #16]
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	9303      	str	r3, [sp, #12]
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	9302      	str	r3, [sp, #8]
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	9301      	str	r3, [sp, #4]
 8007bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007bce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bd0:	f004 f9f4 	bl	800bfbc <VL53L1_preset_mode_special_histogram_short_range>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
	break;
 8007bda:	e003      	b.n	8007be4 <VL53L1_set_preset_mode+0x6ec>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8007bdc:	23fc      	movs	r3, #252	; 0xfc
 8007bde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
 8007be2:	bf00      	nop

	}



	if (status == VL53L1_ERROR_NONE) {
 8007be4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d105      	bne.n	8007bf8 <VL53L1_set_preset_mode+0x700>

		pstatic->dss_config__target_total_rate_mcps =
 8007bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bee:	893a      	ldrh	r2, [r7, #8]
 8007bf0:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8007bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf4:	893a      	ldrh	r2, [r7, #8]
 8007bf6:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53L1_ERROR_NONE)
 8007bf8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d108      	bne.n	8007c12 <VL53L1_set_preset_mode+0x71a>
		status =
			VL53L1_set_timeouts_us(
 8007c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c04:	6879      	ldr	r1, [r7, #4]
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f7ff f98f 	bl	8006f2a <VL53L1_set_timeouts_us>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8007c12:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d106      	bne.n	8007c28 <VL53L1_set_preset_mode+0x730>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8007c1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f7ff f92b 	bl	8006e78 <VL53L1_set_inter_measurement_period_ms>
 8007c22:	4603      	mov	r3, r0
 8007c24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8007c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c2a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8007c2e:	3301      	adds	r3, #1
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c34:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	f005 fa82 	bl	800d144 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8007c40:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3748      	adds	r7, #72	; 0x48
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007c56:	2300      	movs	r3, #0
 8007c58:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	3318      	adds	r3, #24
 8007c5e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f8b3 2382 	ldrh.w	r2, [r3, #898]	; 0x382
	*plite_sigma =
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8007c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b085      	sub	sp, #20
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	460b      	mov	r3, r1
 8007c84:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007c86:	2300      	movs	r3, #0
 8007c88:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	3318      	adds	r3, #24
 8007c8e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	887a      	ldrh	r2, [r7, #2]
 8007c94:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382

	LOG_FUNCTION_END(status);

	return status;
 8007c98:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3318      	adds	r3, #24
 8007cba:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f8b3 2384 	ldrh.w	r2, [r3, #900]	; 0x384
	*plite_mincountrate =
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8007cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b085      	sub	sp, #20
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	3318      	adds	r3, #24
 8007cea:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	887a      	ldrh	r2, [r7, #2]
 8007cf0:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8007cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b0d2      	sub	sp, #328	; 0x148
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007d0e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007d12:	6018      	str	r0, [r3, #0]
 8007d14:	4608      	mov	r0, r1
 8007d16:	4611      	mov	r1, r2
 8007d18:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007d1c:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8007d20:	4602      	mov	r2, r0
 8007d22:	701a      	strb	r2, [r3, #0]
 8007d24:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007d28:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8007d2c:	460a      	mov	r2, r1
 8007d2e:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007d30:	2300      	movs	r3, #0
 8007d32:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007d36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007d3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3318      	adds	r3, #24
 8007d42:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53L1_LLDriverResults_t  *pres =
 8007d46:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007d4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007d54:	3308      	adds	r3, #8
 8007d56:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8007d5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007d5e:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8007d62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8007d66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007d6a:	3348      	adds	r3, #72	; 0x48
 8007d6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8007d70:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007d74:	f203 3342 	addw	r3, r3, #834	; 0x342
 8007d78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8007d7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007d80:	f203 3362 	addw	r3, r3, #866	; 0x362
 8007d84:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8007d88:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007d8c:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8007d90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8007d94:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007d98:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8007d9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8007da0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007da4:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8007da8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8007dac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007db0:	332c      	adds	r3, #44	; 0x2c
 8007db2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8007db6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007dba:	3348      	adds	r3, #72	; 0x48
 8007dbc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8007dc0:	f107 030c 	add.w	r3, r7, #12
 8007dc4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8007de0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007de4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007de8:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 8007dec:	7812      	ldrb	r2, [r2, #0]
 8007dee:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8007df0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007df4:	791b      	ldrb	r3, [r3, #4]
 8007df6:	b25b      	sxtb	r3, r3
 8007df8:	f003 030f 	and.w	r3, r3, #15
 8007dfc:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8007dfe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e02:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8007e06:	f993 3000 	ldrsb.w	r3, [r3]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	b25b      	sxtb	r3, r3
 8007e0e:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8007e10:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e14:	711a      	strb	r2, [r3, #4]


	status =
		VL53L1_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8007e16:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007e1a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53L1_set_user_zone(
 8007e1e:	3336      	adds	r3, #54	; 0x36
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8007e26:	4413      	add	r3, r2
 8007e28:	1d9a      	adds	r2, r3, #6
 8007e2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007e32:	4611      	mov	r1, r2
 8007e34:	6818      	ldr	r0, [r3, #0]
 8007e36:	f7ff f955 	bl	80070e4 <VL53L1_set_user_zone>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8007e40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007e44:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d019      	beq.n	8007e80 <VL53L1_init_and_start_range+0x17c>
		status =
		VL53L1_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id])
 8007e4c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007e50:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007e54:	461a      	mov	r2, r3
		VL53L1_set_zone_dss_config(
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8007e62:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8007e66:	4413      	add	r3, r2
 8007e68:	1c9a      	adds	r2, r3, #2
 8007e6a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007e6e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007e72:	4611      	mov	r1, r2
 8007e74:	6818      	ldr	r0, [r3, #0]
 8007e76:	f001 fbd7 	bl	8009628 <VL53L1_set_zone_dss_config>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8007e80:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007e84:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10d      	bne.n	8007eac <VL53L1_init_and_start_range+0x1a8>
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8007e90:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007e94:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d107      	bne.n	8007eac <VL53L1_init_and_start_range+0x1a8>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8007e9c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007ea0:	f8b3 22e8 	ldrh.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8007ea4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007ea8:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8007eac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb4:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8007eb8:	2bff      	cmp	r3, #255	; 0xff
 8007eba:	d106      	bne.n	8007eca <VL53L1_init_and_start_range+0x1c6>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8007ebc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8007eca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed2:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d139      	bne.n	8007f4e <VL53L1_init_and_start_range+0x24a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8007eda:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee2:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d131      	bne.n	8007f4e <VL53L1_init_and_start_range+0x24a>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8007eea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007eee:	f893 2364 	ldrb.w	r2, [r3, #868]	; 0x364
		pdev->low_power_auto_data.saved_interrupt_config =
 8007ef2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007efa:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8007efe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007f02:	2220      	movs	r2, #32
 8007f04:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364

		if ((pdev->dyn_cfg.system__sequence_config & (
 8007f08:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007f0c:	f893 33a1 	ldrb.w	r3, [r3, #929]	; 0x3a1
 8007f10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d109      	bne.n	8007f2c <VL53L1_init_and_start_range+0x228>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8007f18:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f1c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8007f20:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8007f22:	b21a      	sxth	r2, r3
 8007f24:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f28:	825a      	strh	r2, [r3, #18]
 8007f2a:	e003      	b.n	8007f34 <VL53L1_init_and_start_range+0x230>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8007f2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f30:	2200      	movs	r2, #0
 8007f32:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8007f34:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007f38:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	2b04      	cmp	r3, #4
 8007f40:	d805      	bhi.n	8007f4e <VL53L1_init_and_start_range+0x24a>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8007f42:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007f46:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8007f4a:	2205      	movs	r2, #5
 8007f4c:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8007f4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f56:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d117      	bne.n	8007f8e <VL53L1_init_and_start_range+0x28a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8007f5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f66:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d10f      	bne.n	8007f8e <VL53L1_init_and_start_range+0x28a>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8007f6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f76:	f893 243b 	ldrb.w	r2, [r3, #1083]	; 0x43b
		pdev->gen_cfg.system__interrupt_config_gpio =
 8007f7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007f7e:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364


		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8007f82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007f86:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8007f8a:	2206      	movs	r2, #6
 8007f8c:	701a      	strb	r2, [r3, #0]





	if (status == VL53L1_ERROR_NONE)
 8007f8e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d109      	bne.n	8007faa <VL53L1_init_and_start_range+0x2a6>
		status = VL53L1_save_cfg_data(Dev);
 8007f96:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007f9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007f9e:	6818      	ldr	r0, [r3, #0]
 8007fa0:	f007 f98c 	bl	800f2bc <VL53L1_save_cfg_data>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8007faa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007fae:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	2b05      	cmp	r3, #5
 8007fb8:	d826      	bhi.n	8008008 <VL53L1_init_and_start_range+0x304>
 8007fba:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <VL53L1_init_and_start_range+0x2bc>)
 8007fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc0:	08008001 	.word	0x08008001
 8007fc4:	08007ff9 	.word	0x08007ff9
 8007fc8:	08007ff1 	.word	0x08007ff1
 8007fcc:	08007fe9 	.word	0x08007fe9
 8007fd0:	08007fe1 	.word	0x08007fe1
 8007fd4:	08007fd9 	.word	0x08007fd9
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8007fde:	e017      	b.n	8008010 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8007fe0:	230d      	movs	r3, #13
 8007fe2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8007fe6:	e013      	b.n	8008010 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8007fe8:	2324      	movs	r3, #36	; 0x24
 8007fea:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8007fee:	e00f      	b.n	8008010 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8007ff0:	2344      	movs	r3, #68	; 0x44
 8007ff2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8007ff6:	e00b      	b.n	8008010 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8007ff8:	235a      	movs	r3, #90	; 0x5a
 8007ffa:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8007ffe:	e007      	b.n	8008010 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8008000:	2371      	movs	r3, #113	; 0x71
 8008002:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8008006:	e003      	b.n	8008010 <VL53L1_init_and_start_range+0x30c>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8008008:	2383      	movs	r3, #131	; 0x83
 800800a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800800e:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8008010:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8008014:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8008018:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 800801c:	f107 030c 	add.w	r3, r7, #12
 8008020:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8008024:	2300      	movs	r3, #0
 8008026:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800802a:	e00b      	b.n	8008044 <VL53L1_init_and_start_range+0x340>
		*pbuffer++ = 0;
 800802c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8008036:	2200      	movs	r2, #0
 8008038:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 800803a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800803e:	3301      	adds	r3, #1
 8008040:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8008044:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8008048:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800804c:	429a      	cmp	r2, r3
 800804e:	d3ed      	bcc.n	800802c <VL53L1_init_and_start_range+0x328>



	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8008050:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008054:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	2b05      	cmp	r3, #5
 800805c:	d917      	bls.n	800808e <VL53L1_init_and_start_range+0x38a>
 800805e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8008062:	2b00      	cmp	r3, #0
 8008064:	d113      	bne.n	800808e <VL53L1_init_and_start_range+0x38a>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8008066:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800806a:	f1c3 0301 	rsb	r3, r3, #1
 800806e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8008072:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8008076:	f107 020c 	add.w	r2, r7, #12
 800807a:	4413      	add	r3, r2
 800807c:	461a      	mov	r2, r3
 800807e:	210b      	movs	r1, #11
 8008080:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8008084:	f00c fb0d 	bl	80146a2 <VL53L1_i2c_encode_static_nvm_managed>
 8008088:	4603      	mov	r3, r0
 800808a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800808e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008092:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b04      	cmp	r3, #4
 800809a:	d917      	bls.n	80080cc <VL53L1_init_and_start_range+0x3c8>
 800809c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d113      	bne.n	80080cc <VL53L1_init_and_start_range+0x3c8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80080a4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80080a8:	f1c3 030d 	rsb	r3, r3, #13
 80080ac:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80080b0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 80080b4:	f107 020c 	add.w	r2, r7, #12
 80080b8:	4413      	add	r3, r2
 80080ba:	461a      	mov	r2, r3
 80080bc:	2117      	movs	r1, #23
 80080be:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80080c2:	f00c fbca 	bl	801485a <VL53L1_i2c_encode_customer_nvm_managed>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80080cc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80080d0:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d917      	bls.n	800810a <VL53L1_init_and_start_range+0x406>
 80080da:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d113      	bne.n	800810a <VL53L1_init_and_start_range+0x406>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80080e2:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80080e6:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 80080ea:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80080ee:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 80080f2:	f107 020c 	add.w	r2, r7, #12
 80080f6:	4413      	add	r3, r2
 80080f8:	461a      	mov	r2, r3
 80080fa:	2120      	movs	r1, #32
 80080fc:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8008100:	f00c fce9 	bl	8014ad6 <VL53L1_i2c_encode_static_config>
 8008104:	4603      	mov	r3, r0
 8008106:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800810a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800810e:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	2b02      	cmp	r3, #2
 8008116:	d917      	bls.n	8008148 <VL53L1_init_and_start_range+0x444>
 8008118:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800811c:	2b00      	cmp	r3, #0
 800811e:	d113      	bne.n	8008148 <VL53L1_init_and_start_range+0x444>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8008120:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8008124:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8008128:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800812c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8008130:	f107 020c 	add.w	r2, r7, #12
 8008134:	4413      	add	r3, r2
 8008136:	461a      	mov	r2, r3
 8008138:	2116      	movs	r1, #22
 800813a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800813e:	f00c fdad 	bl	8014c9c <VL53L1_i2c_encode_general_config>
 8008142:	4603      	mov	r3, r0
 8008144:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8008148:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800814c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d917      	bls.n	8008186 <VL53L1_init_and_start_range+0x482>
 8008156:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800815a:	2b00      	cmp	r3, #0
 800815c:	d113      	bne.n	8008186 <VL53L1_init_and_start_range+0x482>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800815e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8008162:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8008166:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800816a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800816e:	f107 020c 	add.w	r2, r7, #12
 8008172:	4413      	add	r3, r2
 8008174:	461a      	mov	r2, r3
 8008176:	2117      	movs	r1, #23
 8008178:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800817c:	f00c fe12 	bl	8014da4 <VL53L1_i2c_encode_timing_config>
 8008180:	4603      	mov	r3, r0
 8008182:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8008186:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800818a:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d036      	beq.n	8008202 <VL53L1_init_and_start_range+0x4fe>
 8008194:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8008198:	2b00      	cmp	r3, #0
 800819a:	d132      	bne.n	8008202 <VL53L1_init_and_start_range+0x4fe>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800819c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80081a0:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 80081a4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 80081a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80081ac:	791b      	ldrb	r3, [r3, #4]
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d017      	beq.n	80081e6 <VL53L1_init_and_start_range+0x4e2>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 80081b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ba:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 80081bc:	f043 0301 	orr.w	r3, r3, #1
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80081c6:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 80081c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081cc:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 80081ce:	f043 0301 	orr.w	r3, r3, #1
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80081d8:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 80081da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081de:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 80081e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80081e4:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80081e6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 80081ea:	f107 020c 	add.w	r2, r7, #12
 80081ee:	4413      	add	r3, r2
 80081f0:	461a      	mov	r2, r3
 80081f2:	2112      	movs	r1, #18
 80081f4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80081f8:	f00c fe56 	bl	8014ea8 <VL53L1_i2c_encode_dynamic_config>
 80081fc:	4603      	mov	r3, r0
 80081fe:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53L1_ERROR_NONE) {
 8008202:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8008206:	2b00      	cmp	r3, #0
 8008208:	d113      	bne.n	8008232 <VL53L1_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 800820a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800820e:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8008212:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8008216:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800821a:	f107 020c 	add.w	r2, r7, #12
 800821e:	4413      	add	r3, r2
 8008220:	461a      	mov	r2, r3
 8008222:	2105      	movs	r1, #5
 8008224:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8008228:	f00c fec3 	bl	8014fb2 <VL53L1_i2c_encode_system_control>
 800822c:	4603      	mov	r3, r0
 800822e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53L1_ERROR_NONE) {
 8008232:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10f      	bne.n	800825a <VL53L1_init_and_start_range+0x556>
		status =
			VL53L1_WriteMulti(
 800823a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800823e:	f107 020c 	add.w	r2, r7, #12
 8008242:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 8008246:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800824a:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 800824e:	6800      	ldr	r0, [r0, #0]
 8008250:	f00e fbd6 	bl	8016a00 <VL53L1_WriteMulti>
 8008254:	4603      	mov	r3, r0
 8008256:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53L1_ERROR_NONE)
 800825a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800825e:	2b00      	cmp	r3, #0
 8008260:	d109      	bne.n	8008276 <VL53L1_init_and_start_range+0x572>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8008262:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008266:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800826a:	6818      	ldr	r0, [r3, #0]
 800826c:	f004 fb82 	bl	800c974 <VL53L1_update_ll_driver_rd_state>
 8008270:	4603      	mov	r3, r0
 8008272:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53L1_ERROR_NONE)
 8008276:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800827a:	2b00      	cmp	r3, #0
 800827c:	d109      	bne.n	8008292 <VL53L1_init_and_start_range+0x58e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800827e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008282:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	f004 fd15 	bl	800ccb6 <VL53L1_update_ll_driver_cfg_state>
 800828c:	4603      	mov	r3, r0
 800828e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8008292:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8008296:	4618      	mov	r0, r3
 8008298:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80082a8:	2300      	movs	r3, #0
 80082aa:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev =
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	3318      	adds	r3, #24
 80082b0:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80082b8:	3308      	adds	r3, #8
 80082ba:	60fb      	str	r3, [r7, #12]
			VL53L1DevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 80082c2:	b25b      	sxtb	r3, r3
 80082c4:	f003 030f 	and.w	r3, r3, #15
 80082c8:	b25b      	sxtb	r3, r3
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80082ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80082ce:	b25b      	sxtb	r3, r3
 80082d0:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f00c fea1 	bl	8015028 <VL53L1_set_system_control>
 80082e6:	4603      	mov	r3, r0
 80082e8:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 80082f0:	f003 030f 	and.w	r3, r3, #15
 80082f4:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53L1_init_ll_driver_state(
 80082fc:	2103      	movs	r1, #3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f004 fb07 	bl	800c912 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 800830a:	3301      	adds	r3, #1
 800830c:	b2da      	uxtb	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8008314:	4619      	mov	r1, r3
 8008316:	4610      	mov	r0, r2
 8008318:	f004 ff14 	bl	800d144 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f004 ff46 	bl	800d1ae <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008328:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 800832c:	2b01      	cmp	r3, #1
 800832e:	d102      	bne.n	8008336 <VL53L1_stop_range+0x96>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f008 f9b4 	bl	801069e <VL53L1_low_power_auto_data_stop_range>

	return status;
 8008336:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3718      	adds	r7, #24
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b0c8      	sub	sp, #288	; 0x120
 8008346:	af00      	add	r7, sp, #0
 8008348:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800834c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008350:	6018      	str	r0, [r3, #0]
 8008352:	460a      	mov	r2, r1
 8008354:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008358:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800835c:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800835e:	2300      	movs	r3, #0
 8008360:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008364:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008368:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3318      	adds	r3, #24
 8008370:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8008374:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008378:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800837c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8008380:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008384:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8008388:	331c      	adds	r3, #28
 800838a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800838e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008392:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8008396:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800839a:	2388      	movs	r3, #136	; 0x88
 800839c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 80083a0:	2300      	movs	r3, #0
 80083a2:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 80083a6:	2300      	movs	r3, #0
 80083a8:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 80083ac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80083b0:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d008      	beq.n	80083cc <VL53L1_get_measurement_results+0x8a>
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d10d      	bne.n	80083da <VL53L1_get_measurement_results+0x98>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 80083be:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80083c2:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 80083c6:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80083ca:	e00a      	b.n	80083e2 <VL53L1_get_measurement_results+0xa0>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 80083cc:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80083d0:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 80083d4:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80083d8:	e003      	b.n	80083e2 <VL53L1_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 80083da:	232c      	movs	r3, #44	; 0x2c
 80083dc:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80083e0:	bf00      	nop
	}



	if (status == VL53L1_ERROR_NONE)
 80083e2:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10f      	bne.n	800840a <VL53L1_get_measurement_results+0xc8>
		status =
			VL53L1_ReadMulti(
 80083ea:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80083ee:	f107 0208 	add.w	r2, r7, #8
 80083f2:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 80083f6:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80083fa:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 80083fe:	6800      	ldr	r0, [r0, #0]
 8008400:	f00e fb34 	bl	8016a6c <VL53L1_ReadMulti>
 8008404:	4603      	mov	r3, r0
 8008406:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800840a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800840e:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d917      	bls.n	8008448 <VL53L1_get_measurement_results+0x106>
 8008418:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800841c:	2b00      	cmp	r3, #0
 800841e:	d113      	bne.n	8008448 <VL53L1_get_measurement_results+0x106>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8008420:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8008424:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8008428:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800842c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 8008430:	f107 0208 	add.w	r2, r7, #8
 8008434:	4413      	add	r3, r2
 8008436:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800843a:	4619      	mov	r1, r3
 800843c:	2038      	movs	r0, #56	; 0x38
 800843e:	f00c ff71 	bl	8015324 <VL53L1_i2c_decode_debug_results>
 8008442:	4603      	mov	r3, r0
 8008444:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8008448:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800844c:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d017      	beq.n	8008486 <VL53L1_get_measurement_results+0x144>
 8008456:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800845a:	2b00      	cmp	r3, #0
 800845c:	d113      	bne.n	8008486 <VL53L1_get_measurement_results+0x144>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800845e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8008462:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8008466:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800846a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800846e:	f107 0208 	add.w	r2, r7, #8
 8008472:	4413      	add	r3, r2
 8008474:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8008478:	4619      	mov	r1, r3
 800847a:	2021      	movs	r0, #33	; 0x21
 800847c:	f00c fef1 	bl	8015262 <VL53L1_i2c_decode_core_results>
 8008480:	4603      	mov	r3, r0
 8008482:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8008486:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800848a:	2b00      	cmp	r3, #0
 800848c:	d110      	bne.n	80084b0 <VL53L1_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 800848e:	2300      	movs	r3, #0
 8008490:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8008494:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 8008498:	f107 0208 	add.w	r2, r7, #8
 800849c:	4413      	add	r3, r2
 800849e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80084a2:	4619      	mov	r1, r3
 80084a4:	202c      	movs	r0, #44	; 0x2c
 80084a6:	f00c fde6 	bl	8015076 <VL53L1_i2c_decode_system_results>
 80084aa:	4603      	mov	r3, r0
 80084ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 80084b0:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 80084be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084c2:	b0a0      	sub	sp, #128	; 0x80
 80084c4:	af06      	add	r7, sp, #24
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	460b      	mov	r3, r1
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80084ce:	2300      	movs	r3, #0
 80084d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53L1_LLDriverData_t *pdev =
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3318      	adds	r3, #24
 80084d8:	663b      	str	r3, [r7, #96]	; 0x60
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80084e0:	3308      	adds	r3, #8
 80084e2:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults =
 80084e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084e6:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53L1_zone_objects_t    *pobjects =
 80084e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084ea:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80084ee:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53L1_p_002[0]);
	VL53L1_ll_driver_state_t *pstate   =
 80084f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084f2:	332c      	adds	r3, #44	; 0x2c
 80084f4:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53L1_zone_config_t     *pzone_cfg =
 80084f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084f8:	33c2      	adds	r3, #194	; 0xc2
 80084fa:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53L1_zone_hist_info_t  *phist_info =
 80084fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084fe:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8008502:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53L1_p_002[0]);

	VL53L1_dmax_calibration_data_t   dmax_cal;
	VL53L1_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8008504:	f107 0314 	add.w	r3, r7, #20
 8008508:	647b      	str	r3, [r7, #68]	; 0x44
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800850a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800850c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8008510:	643b      	str	r3, [r7, #64]	; 0x40
	VL53L1_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8008512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008514:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8008518:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53L1_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 800851a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800851c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8008520:	3318      	adds	r3, #24
 8008522:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8008524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008526:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800852a:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 800852c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800852e:	3348      	adds	r3, #72	; 0x48
 8008530:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_zone_histograms_t *pZH = &(pres->zone_hists);
 8008532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008534:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8008538:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 800853a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800853c:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8008540:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t merge_enabled;
	VL53L1_range_data_t *pdata;

	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8008542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008544:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8008548:	2b01      	cmp	r3, #1
 800854a:	d108      	bne.n	800855e <VL53L1_get_device_results+0xa0>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008552:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8008556:	2b01      	cmp	r3, #1
 8008558:	d101      	bne.n	800855e <VL53L1_get_device_results+0xa0>
 800855a:	2301      	movs	r3, #1
 800855c:	e000      	b.n	8008560 <VL53L1_get_device_results+0xa2>
 800855e:	2300      	movs	r3, #0
 8008560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 VL53L1_PRESETMODE_RANGING);

	if ((pdev->sys_ctrl.system__mode_start &
 8008564:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008566:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 82a9 	beq.w	8008ac6 <VL53L1_get_device_results+0x608>
		 VL53L1_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53L1_get_histogram_bin_data(
 8008574:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008576:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800857a:	4619      	mov	r1, r3
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 fbd7 	bl	8008d30 <VL53L1_get_histogram_bin_data>
 8008582:	4603      	mov	r3, r0
 8008584:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53L1_ERROR_NONE &&
 8008588:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800858c:	2b00      	cmp	r3, #0
 800858e:	d118      	bne.n	80085c2 <VL53L1_get_device_results+0x104>
			pHD->number_of_ambient_bins == 0) {
 8008590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008592:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53L1_ERROR_NONE &&
 8008594:	2b00      	cmp	r3, #0
 8008596:	d114      	bne.n	80085c2 <VL53L1_get_device_results+0x104>
			zid = pdev->ll_state.rd_zone_id;
 8008598:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800859a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800859e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
			&(pZH->VL53L1_p_002[zid]),
 80085a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
 80085a6:	011b      	lsls	r3, r3, #4
 80085a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085aa:	4413      	add	r3, r2
 80085ac:	1d1a      	adds	r2, r3, #4
 80085ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085b0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80085b4:	4619      	mov	r1, r3
 80085b6:	4610      	mov	r0, r2
 80085b8:	f005 fb6c 	bl	800dc94 <VL53L1_hist_copy_and_scale_ambient_info>
 80085bc:	4603      	mov	r3, r0
 80085be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53L1_ERROR_NONE)
 80085c2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f040 8220 	bne.w	8008a0c <VL53L1_get_device_results+0x54e>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80085cc:	f107 0313 	add.w	r3, r7, #19
 80085d0:	4619      	mov	r1, r3
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f008 f91a 	bl	801080c <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 80085d8:	7cfb      	ldrb	r3, [r7, #19]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <VL53L1_get_device_results+0x124>
			histo_merge_nb = 1;
 80085de:	2301      	movs	r3, #1
 80085e0:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 80085e2:	7cfb      	ldrb	r3, [r7, #19]
 80085e4:	3b01      	subs	r3, #1
 80085e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (merge_enabled)
 80085ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d007      	beq.n	8008602 <VL53L1_get_device_results+0x144>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 80085f2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80085f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f8:	3202      	adds	r2, #2
 80085fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80085fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008600:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8008602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008604:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 8008608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800860a:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 800860c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008612:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008616:	4619      	mov	r1, r3
 8008618:	4610      	mov	r0, r2
 800861a:	f005 fa41 	bl	800daa0 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 800861e:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8008620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008622:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8008624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008626:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800862a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800862c:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800862e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008630:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8008634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008636:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 8008638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800863a:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 800863c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800863e:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8008642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008644:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8008646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008648:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 800864c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800864e:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8008650:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008652:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8008656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008658:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 800865c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800865e:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8008662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008664:	f893 2375 	ldrb.w	r2, [r3, #885]	; 0x375
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8008668:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800866a:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 800866e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008670:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8008674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008676:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8008678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800867a:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 800867e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008680:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8008682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008684:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8008686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008688:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 800868a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800868c:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 800868e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008690:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53L1_copy_rtn_good_spads_to_buffer(
 8008692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008694:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8008698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800869a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800869e:	4619      	mov	r1, r3
 80086a0:	4610      	mov	r0, r2
 80086a2:	f004 fc2f 	bl	800cf04 <VL53L1_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 80086a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086a8:	795b      	ldrb	r3, [r3, #5]
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d048      	beq.n	8008740 <VL53L1_get_device_results+0x282>
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	dc56      	bgt.n	8008760 <VL53L1_get_device_results+0x2a2>
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d002      	beq.n	80086bc <VL53L1_get_device_results+0x1fe>
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d02e      	beq.n	8008718 <VL53L1_get_device_results+0x25a>
 80086ba:	e051      	b.n	8008760 <VL53L1_get_device_results+0x2a2>

		case VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 80086bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086be:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
 80086c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			VL53L1_hist_combine_mm1_mm2_offsets(
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 80086cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ce:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 80086d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086d4:	f893 e406 	ldrb.w	lr, [r3, #1030]	; 0x406
 80086d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086da:	f893 8407 	ldrb.w	r8, [r3, #1031]	; 0x407
 80086de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80086e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086e6:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 80086ea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80086ec:	319c      	adds	r1, #156	; 0x9c
 80086ee:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80086f0:	f500 7007 	add.w	r0, r0, #540	; 0x21c
 80086f4:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 80086f8:	b2a4      	uxth	r4, r4
 80086fa:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 80086fc:	351c      	adds	r5, #28
 80086fe:	9505      	str	r5, [sp, #20]
 8008700:	9404      	str	r4, [sp, #16]
 8008702:	9003      	str	r0, [sp, #12]
 8008704:	9102      	str	r1, [sp, #8]
 8008706:	9201      	str	r2, [sp, #4]
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	4643      	mov	r3, r8
 800870c:	4672      	mov	r2, lr
 800870e:	4661      	mov	r1, ip
 8008710:	4630      	mov	r0, r6
 8008712:	f006 fa36 	bl	800eb82 <VL53L1_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8008716:	e027      	b.n	8008768 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_ZONE_OFFSETS:
			zid = pdev->ll_state.rd_zone_id;
 8008718:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800871a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800871e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			pHP->range_offset_mm = (int16_t)(
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 8008722:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008726:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008728:	4613      	mov	r3, r2
 800872a:	00db      	lsls	r3, r3, #3
 800872c:	1a9b      	subs	r3, r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	440b      	add	r3, r1
 8008732:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8008736:	681b      	ldr	r3, [r3, #0]
			pHP->range_offset_mm = (int16_t)(
 8008738:	b21a      	sxth	r2, r3
 800873a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800873c:	839a      	strh	r2, [r3, #28]
		break;
 800873e:	e013      	b.n	8008768 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8008740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008742:	331c      	adds	r3, #28
 8008744:	4619      	mov	r1, r3
 8008746:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008748:	f7fd fcf7 	bl	800613a <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 800874c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800874e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8008752:	b29b      	uxth	r3, r3
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	b29b      	uxth	r3, r3
 8008758:	b21a      	sxth	r2, r3
 800875a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800875c:	839a      	strh	r2, [r3, #28]
		break;
 800875e:	e003      	b.n	8008768 <VL53L1_get_device_results+0x2aa>
		default:
			pHP->range_offset_mm = 0;
 8008760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008762:	2200      	movs	r2, #0
 8008764:	839a      	strh	r2, [r3, #28]
		break;
 8008766:	bf00      	nop

		}



		if (status != VL53L1_ERROR_NONE)
 8008768:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800876c:	2b00      	cmp	r3, #0
 800876e:	f040 814f 	bne.w	8008a10 <VL53L1_get_device_results+0x552>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53L1_calc_max_effective_spads(
 8008772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008774:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 8008778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877a:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 800877e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008780:	f503 7207 	add.w	r2, r3, #540	; 0x21c
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8008784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008786:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
		VL53L1_calc_max_effective_spads(
 800878a:	b29c      	uxth	r4, r3
 800878c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800878e:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	4623      	mov	r3, r4
 8008796:	f006 fb99 	bl	800eecc <VL53L1_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53L1_get_dmax_calibration_data(
 800879a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800879c:	7999      	ldrb	r1, [r3, #6]
 800879e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087a0:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80087a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f000 ff7b 	bl	80096a2 <VL53L1_get_dmax_calibration_data>
 80087ac:	4603      	mov	r3, r0
 80087ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				pdev->ll_state.rd_zone_id,
				pdmax_cal);



		if (status != VL53L1_ERROR_NONE)
 80087b2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f040 812c 	bne.w	8008a14 <VL53L1_get_device_results+0x556>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_ipp_hist_process_data(
 80087bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087be:	f503 7526 	add.w	r5, r3, #664	; 0x298
 80087c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087c4:	f503 7616 	add.w	r6, r3, #600	; 0x258
 80087c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087ca:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 80087ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087d0:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 80087d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087d6:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80087da:	3308      	adds	r3, #8
				pdev->wArea2,
 80087dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087de:	f502 52d2 	add.w	r2, r2, #6720	; 0x1a40
 80087e2:	3208      	adds	r2, #8
		status = VL53L1_ipp_hist_process_data(
 80087e4:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80087e6:	9405      	str	r4, [sp, #20]
 80087e8:	f107 0413 	add.w	r4, r7, #19
 80087ec:	9404      	str	r4, [sp, #16]
 80087ee:	9203      	str	r2, [sp, #12]
 80087f0:	9302      	str	r3, [sp, #8]
 80087f2:	9001      	str	r0, [sp, #4]
 80087f4:	9100      	str	r1, [sp, #0]
 80087f6:	4633      	mov	r3, r6
 80087f8:	462a      	mov	r2, r5
 80087fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f00e fb45 	bl	8016e8c <VL53L1_ipp_hist_process_data>
 8008802:	4603      	mov	r3, r0
 8008804:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((merge_enabled) && (histo_merge_nb > 1))
 8008808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800880c:	2b00      	cmp	r3, #0
 800880e:	d050      	beq.n	80088b2 <VL53L1_get_device_results+0x3f4>
 8008810:	7cfb      	ldrb	r3, [r7, #19]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d94d      	bls.n	80088b2 <VL53L1_get_device_results+0x3f4>
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8008816:	2300      	movs	r3, #0
 8008818:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800881c:	e045      	b.n	80088aa <VL53L1_get_device_results+0x3ec>
			pdata = &(presults->VL53L1_p_002[i]);
 800881e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8008822:	224c      	movs	r2, #76	; 0x4c
 8008824:	fb02 f303 	mul.w	r3, r2, r3
 8008828:	3310      	adds	r3, #16
 800882a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800882c:	4413      	add	r3, r2
 800882e:	3304      	adds	r3, #4
 8008830:	623b      	str	r3, [r7, #32]
			pdata->VL53L1_p_020 /= histo_merge_nb;
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	7cfa      	ldrb	r2, [r7, #19]
 8008838:	fbb3 f2f2 	udiv	r2, r3, r2
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53L1_p_021 /= histo_merge_nb;
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008844:	7cfa      	ldrb	r2, [r7, #19]
 8008846:	fbb3 f2f2 	udiv	r2, r3, r2
 800884a:	6a3b      	ldr	r3, [r7, #32]
 800884c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 /= histo_merge_nb;
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008852:	7cfa      	ldrb	r2, [r7, #19]
 8008854:	fb93 f2f2 	sdiv	r2, r3, r2
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008860:	461a      	mov	r2, r3
 8008862:	7cfb      	ldrb	r3, [r7, #19]
 8008864:	fb92 f3f3 	sdiv	r3, r2, r3
 8008868:	b29a      	uxth	r2, r3
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008872:	461a      	mov	r2, r3
 8008874:	7cfb      	ldrb	r3, [r7, #19]
 8008876:	fb92 f3f3 	sdiv	r3, r2, r3
 800887a:	b29a      	uxth	r2, r3
 800887c:	6a3b      	ldr	r3, [r7, #32]
 800887e:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008884:	461a      	mov	r2, r3
 8008886:	7cfb      	ldrb	r3, [r7, #19]
 8008888:	fb92 f3f3 	sdiv	r3, r2, r3
 800888c:	b29a      	uxth	r2, r3
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_012 /= histo_merge_nb;
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008896:	7cfa      	ldrb	r2, [r7, #19]
 8008898:	fbb3 f2f2 	udiv	r2, r3, r2
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80088a0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80088a4:	3301      	adds	r3, #1
 80088a6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80088aa:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	d9b5      	bls.n	800881e <VL53L1_get_device_results+0x360>
		}


		if (status != VL53L1_ERROR_NONE)
 80088b2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f040 80ae 	bne.w	8008a18 <VL53L1_get_device_results+0x55a>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_hist_wrap_dmax(
 80088bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088be:	f503 7016 	add.w	r0, r3, #600	; 0x258
 80088c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088c4:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 80088c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088ca:	330e      	adds	r3, #14
 80088cc:	461a      	mov	r2, r3
 80088ce:	f006 f922 	bl	800eb16 <VL53L1_hist_wrap_dmax>
 80088d2:	4603      	mov	r3, r0
 80088d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53L1_ERROR_NONE)
 80088d8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f040 809d 	bne.w	8008a1c <VL53L1_get_device_results+0x55e>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80088e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80088e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 80088ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 80088f0:	011b      	lsls	r3, r3, #4
 80088f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088f4:	4413      	add	r3, r2
 80088f6:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 80088f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 80088fc:	4613      	mov	r3, r2
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	4413      	add	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8008908:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800890a:	4413      	add	r3, r2
 800890c:	f103 0208 	add.w	r2, r3, #8
 8008910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f005 fc1d 	bl	800e152 <VL53L1_hist_phase_consistency_check>
 8008918:	4603      	mov	r3, r0
 800891a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53L1_ERROR_NONE)
 800891e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008922:	2b00      	cmp	r3, #0
 8008924:	d17c      	bne.n	8008a20 <VL53L1_get_device_results+0x562>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8008926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008928:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800892c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8008930:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8008934:	011b      	lsls	r3, r3, #4
 8008936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008938:	4413      	add	r3, r2
 800893a:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 800893c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8008940:	4613      	mov	r3, r2
 8008942:	011b      	lsls	r3, r3, #4
 8008944:	4413      	add	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800894c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800894e:	4413      	add	r3, r2
 8008950:	f103 0208 	add.w	r2, r3, #8
 8008954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008956:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f006 f883 	bl	800ea66 <VL53L1_hist_xmonitor_consistency_check>
 8008960:	4603      	mov	r3, r0
 8008962:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53L1_ERROR_NONE)
 8008966:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800896a:	2b00      	cmp	r3, #0
 800896c:	d15a      	bne.n	8008a24 <VL53L1_get_device_results+0x566>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 800896e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008970:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008974:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 8008978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897a:	2210      	movs	r2, #16
 800897c:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 800897e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008980:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008984:	3301      	adds	r3, #1
 8008986:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8008988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898a:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 800898c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008992:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8008994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008996:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 800899a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800899e:	429a      	cmp	r2, r3
 80089a0:	d222      	bcs.n	80089e8 <VL53L1_get_device_results+0x52a>

			phist_info =
			&(pZH->VL53L1_p_002[zid]);
 80089a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			phist_info =
 80089a6:	011b      	lsls	r3, r3, #4
 80089a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089aa:	4413      	add	r3, r2
 80089ac:	3304      	adds	r3, #4
 80089ae:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 80089b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b2:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 80089b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089b6:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 80089b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ba:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 80089bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089be:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 80089c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c2:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 80089c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089c8:	805a      	strh	r2, [r3, #2]

			phist_info->VL53L1_p_009 =
				pHD->VL53L1_p_009;
 80089ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089cc:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53L1_p_009 =
 80089d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089d2:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 80089d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 80089da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089dc:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 80089de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 80089e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089e6:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53L1_ERROR_NONE)
 80089e8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d11b      	bne.n	8008a28 <VL53L1_get_device_results+0x56a>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_hist_copy_results_to_sys_and_core(
 80089f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089f2:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 80089f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089f8:	f203 32aa 	addw	r2, r3, #938	; 0x3aa
 80089fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089fe:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8008a02:	331c      	adds	r3, #28
 8008a04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a06:	f006 fbbe 	bl	800f186 <VL53L1_hist_copy_results_to_sys_and_core>
 8008a0a:	e00e      	b.n	8008a2a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8008a0c:	bf00      	nop
 8008a0e:	e00c      	b.n	8008a2a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8008a10:	bf00      	nop
 8008a12:	e00a      	b.n	8008a2a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8008a14:	bf00      	nop
 8008a16:	e008      	b.n	8008a2a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8008a18:	bf00      	nop
 8008a1a:	e006      	b.n	8008a2a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8008a1c:	bf00      	nop
 8008a1e:	e004      	b.n	8008a2a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8008a20:	bf00      	nop
 8008a22:	e002      	b.n	8008a2a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8008a24:	bf00      	nop
 8008a26:	e000      	b.n	8008a2a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8008a28:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 8008a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a2c:	785b      	ldrb	r3, [r3, #1]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d036      	beq.n	8008aa0 <VL53L1_get_device_results+0x5e2>
			if (pstate->rd_device_state !=
 8008a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a34:	79db      	ldrb	r3, [r3, #7]
 8008a36:	2b06      	cmp	r3, #6
 8008a38:	d00a      	beq.n	8008a50 <VL53L1_get_device_results+0x592>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53L1_ERROR_NONE) {
 8008a3a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d106      	bne.n	8008a50 <VL53L1_get_device_results+0x592>
					status = VL53L1_dynamic_zone_update(
 8008a42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f006 fc73 	bl	800f330 <VL53L1_dynamic_zone_update>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8008a50:	2300      	movs	r3, #0
 8008a52:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8008a56:	e015      	b.n	8008a84 <VL53L1_get_device_results+0x5c6>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8008a58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a5a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 8008a5e:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <VL53L1_get_device_results+0x5ac>
 8008a66:	2103      	movs	r1, #3
 8008a68:	e000      	b.n	8008a6c <VL53L1_get_device_results+0x5ae>
 8008a6a:	2101      	movs	r1, #1
 8008a6c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8008a70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a72:	4413      	add	r3, r2
 8008a74:	460a      	mov	r2, r1
 8008a76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8008a7a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8008a7e:	3301      	adds	r3, #1
 8008a80:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8008a84:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8008a88:	2b0f      	cmp	r3, #15
 8008a8a:	d9e5      	bls.n	8008a58 <VL53L1_get_device_results+0x59a>
					VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53L1_ERROR_NONE)
 8008a8c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d105      	bne.n	8008aa0 <VL53L1_get_device_results+0x5e2>
				status = VL53L1_multizone_hist_bins_update(Dev);
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f006 fcc6 	bl	800f426 <VL53L1_multizone_hist_bins_update>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53L1_ERROR_NONE)
 8008aa0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d105      	bne.n	8008ab4 <VL53L1_get_device_results+0x5f6>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f007 f9d3 	bl	800fe54 <VL53L1_dynamic_xtalk_correction_corrector>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53L1_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (merge_enabled)
 8008ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d043      	beq.n	8008b44 <VL53L1_get_device_results+0x686>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8008abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abe:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8008ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	e03e      	b.n	8008b44 <VL53L1_get_device_results+0x686>
	} else {

		if (status == VL53L1_ERROR_NONE)
 8008ac6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d107      	bne.n	8008ade <VL53L1_get_device_results+0x620>
			status = VL53L1_get_measurement_results(
 8008ace:	7afb      	ldrb	r3, [r7, #11]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f7ff fc35 	bl	8008342 <VL53L1_get_measurement_results>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53L1_ERROR_NONE)
 8008ade:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10d      	bne.n	8008b02 <VL53L1_get_device_results+0x644>
			VL53L1_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8008ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ae8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53L1_copy_sys_and_core_results_to_range_results(
 8008aec:	4618      	mov	r0, r3
 8008aee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008af0:	f203 31aa 	addw	r1, r3, #938	; 0x3aa
 8008af4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008af6:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 8008afa:	321c      	adds	r2, #28
 8008afc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008afe:	f000 fc1f 	bl	8009340 <VL53L1_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8008b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b04:	785b      	ldrb	r3, [r3, #1]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d11c      	bne.n	8008b44 <VL53L1_get_device_results+0x686>

			if ((status == VL53L1_ERROR_NONE) &&
 8008b0a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10d      	bne.n	8008b2e <VL53L1_get_device_results+0x670>
				(pL->low_power_auto_range_count == 0)) {
 8008b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b14:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53L1_ERROR_NONE) &&
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d109      	bne.n	8008b2e <VL53L1_get_device_results+0x670>

				status =
				VL53L1_low_power_auto_setup_manual_calibration(
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f007 fe24 	bl	8010768 <VL53L1_low_power_auto_setup_manual_calibration>
 8008b20:	4603      	mov	r3, r0
 8008b22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8008b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b28:	2201      	movs	r2, #1
 8008b2a:	709a      	strb	r2, [r3, #2]
 8008b2c:	e00a      	b.n	8008b44 <VL53L1_get_device_results+0x686>
			} else if ((status == VL53L1_ERROR_NONE) &&
 8008b2e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d106      	bne.n	8008b44 <VL53L1_get_device_results+0x686>
				(pL->low_power_auto_range_count == 1)) {
 8008b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b38:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53L1_ERROR_NONE) &&
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d102      	bne.n	8008b44 <VL53L1_get_device_results+0x686>
				pL->low_power_auto_range_count = 2;
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b40:	2202      	movs	r2, #2
 8008b42:	709a      	strb	r2, [r3, #2]
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8008b44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b46:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b4c:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8008b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b50:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8008b54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b56:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8008b58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b5a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8008b5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b60:	709a      	strb	r2, [r3, #2]

	if (status == VL53L1_ERROR_NONE) {
 8008b62:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f040 80b0 	bne.w	8008ccc <VL53L1_get_device_results+0x80e>


		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 8008b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b6e:	2210      	movs	r2, #16
 8008b70:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8008b74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b76:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	b2da      	uxtb	r2, r3
 8008b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b80:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 8008b84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		if (zid < pres->zone_results.max_zones) {
 8008b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b90:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8008b94:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	f080 8097 	bcs.w	8008ccc <VL53L1_get_device_results+0x80e>

			pobjects =
			&(pres->zone_results.VL53L1_p_002[zid]);
 8008b9e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
			pobjects =
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	011b      	lsls	r3, r3, #4
 8008ba6:	4413      	add	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8008bae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008bb0:	4413      	add	r3, r2
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8008bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bb8:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8008bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bbc:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8008bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bc0:	785a      	ldrb	r2, [r3, #1]
 8008bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bc4:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8008bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bc8:	789a      	ldrb	r2, [r3, #2]
 8008bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bcc:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8008bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bd0:	78da      	ldrb	r2, [r3, #3]
 8008bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bd4:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53L1_p_020 =
				presults->xmonitor.VL53L1_p_020;
 8008bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bd8:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53L1_p_020 =
 8008bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bde:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53L1_p_021 =
				presults->xmonitor.VL53L1_p_021;
 8008be0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008be2:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53L1_p_021 =
 8008be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008be8:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53L1_p_014 =
				presults->xmonitor.VL53L1_p_014;
 8008bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bec:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53L1_p_014 =
 8008bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8008bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bf8:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 8008bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 8008c02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c04:	7c5a      	ldrb	r2, [r3, #17]
 8008c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c08:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8008c0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c0c:	7c9a      	ldrb	r2, [r3, #18]
 8008c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c10:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8008c12:	2300      	movs	r3, #0
 8008c14:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8008c18:	e052      	b.n	8008cc0 <VL53L1_get_device_results+0x802>
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
					presults->VL53L1_p_002[i].VL53L1_p_020;
 8008c1a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8008c1e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_020;
 8008c22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c24:	204c      	movs	r0, #76	; 0x4c
 8008c26:	fb00 f303 	mul.w	r3, r0, r3
 8008c2a:	440b      	add	r3, r1
 8008c2c:	3338      	adds	r3, #56	; 0x38
 8008c2e:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8008c30:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008c32:	4613      	mov	r3, r2
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	4413      	add	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4403      	add	r3, r0
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8008c40:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8008c44:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8008c48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c4a:	204c      	movs	r0, #76	; 0x4c
 8008c4c:	fb00 f303 	mul.w	r3, r0, r3
 8008c50:	440b      	add	r3, r1
 8008c52:	333c      	adds	r3, #60	; 0x3c
 8008c54:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8008c56:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008c58:	4613      	mov	r3, r2
 8008c5a:	005b      	lsls	r3, r3, #1
 8008c5c:	4413      	add	r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4403      	add	r3, r0
 8008c62:	330c      	adds	r3, #12
 8008c64:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
					presults->VL53L1_p_002[i].VL53L1_p_014;
 8008c66:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 8008c6a:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_014;
 8008c6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c70:	204c      	movs	r0, #76	; 0x4c
 8008c72:	fb00 f303 	mul.w	r3, r0, r3
 8008c76:	440b      	add	r3, r1
 8008c78:	3354      	adds	r3, #84	; 0x54
 8008c7a:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 8008c7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c7e:	4613      	mov	r3, r2
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	440b      	add	r3, r1
 8008c88:	3310      	adds	r3, #16
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	801a      	strh	r2, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
					presults->VL53L1_p_002[i].range_status;
 8008c8e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].range_status =
 8008c92:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].range_status;
 8008c96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c98:	204c      	movs	r0, #76	; 0x4c
 8008c9a:	fb00 f303 	mul.w	r3, r0, r3
 8008c9e:	440b      	add	r3, r1
 8008ca0:	335e      	adds	r3, #94	; 0x5e
 8008ca2:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
 8008ca4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	4413      	add	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	440b      	add	r3, r1
 8008cb0:	3312      	adds	r3, #18
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8008cb6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8008cba:	3301      	adds	r3, #1
 8008cbc:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8008cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cc2:	7c9b      	ldrb	r3, [r3, #18]
 8008cc4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d3a6      	bcc.n	8008c1a <VL53L1_get_device_results+0x75c>
		}
	}



	memcpy(
 8008ccc:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8008cd0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f015 fb48 	bl	801e368 <memcpy>
		presults,
		sizeof(VL53L1_range_results_t));



	if (status == VL53L1_ERROR_NONE)
 8008cd8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d105      	bne.n	8008cec <VL53L1_get_device_results+0x82e>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f003 ff35 	bl	800cb50 <VL53L1_check_ll_driver_rd_state>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8008cec:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3768      	adds	r7, #104	; 0x68
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008cfa <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b084      	sub	sp, #16
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	460b      	mov	r3, r1
 8008d04:	70fb      	strb	r3, [r7, #3]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]





	if (status == VL53L1_ERROR_NONE)
 8008d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d107      	bne.n	8008d22 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8008d12:	78fb      	ldrb	r3, [r7, #3]
 8008d14:	2203      	movs	r2, #3
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7fe fff3 	bl	8007d04 <VL53L1_init_and_start_range>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8008d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
	...

08008d30 <VL53L1_get_histogram_bin_data>:


VL53L1_Error VL53L1_get_histogram_bin_data(
		VL53L1_DEV                   Dev,
		VL53L1_histogram_bin_data_t *pdata)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b0d2      	sub	sp, #328	; 0x148
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008d3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8008d3e:	6018      	str	r0, [r3, #0]
 8008d40:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008d44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008d48:	6019      	str	r1, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev =
 8008d50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008d54:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3318      	adds	r3, #24
 8008d5c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8008d60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008d64:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008d6e:	3308      	adds	r3, #8
 8008d70:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53L1_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8008d74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d78:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8008d7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8008d80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d84:	f203 3342 	addw	r3, r3, #834	; 0x342
 8008d88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8008d8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d90:	f203 3362 	addw	r3, r3, #866	; 0x362
 8008d94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8008d98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d9c:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8008da0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_range_results_t        *presults  = &(pres->range_results);
 8008da4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008da8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53L1_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8008dac:	f107 030c 	add.w	r3, r7, #12
 8008db0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8008db4:	2300      	movs	r3, #0
 8008db6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint32_t   pll_period_us            = 0;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t    i                        = 0;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	int32_t    hist_merge				= 0;
 8008dde:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008de2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008de6:	2200      	movs	r2, #0
 8008de8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8008dea:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10d      	bne.n	8008e0e <VL53L1_get_histogram_bin_data+0xde>
		status = VL53L1_ReadMulti(
 8008df2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008df6:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8008dfa:	2353      	movs	r3, #83	; 0x53
 8008dfc:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008e00:	2188      	movs	r1, #136	; 0x88
 8008e02:	6800      	ldr	r0, [r0, #0]
 8008e04:	f00d fe32 	bl	8016a6c <VL53L1_ReadMulti>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53L1_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8008e0e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008e12:	781a      	ldrb	r2, [r3, #0]
 8008e14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008e18:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8008e22:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008e26:	785a      	ldrb	r2, [r3, #1]
 8008e28:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008e2c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8008e36:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008e3a:	789a      	ldrb	r2, [r3, #2]
 8008e3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008e40:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8008e4a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008e4e:	78da      	ldrb	r2, [r3, #3]
 8008e50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008e54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 8008e5e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008e62:	3304      	adds	r3, #4
 8008e64:	4619      	mov	r1, r3
 8008e66:	2002      	movs	r0, #2
 8008e68:	f004 fb75 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8008e70:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008e74:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8008e7e:	234e      	movs	r3, #78	; 0x4e
 8008e80:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8008e84:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8008e88:	f107 020c 	add.w	r2, r7, #12
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8008e92:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008e96:	2002      	movs	r0, #2
 8008e98:	f004 fb5d 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8008ea0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008ea4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8008eae:	2350      	movs	r3, #80	; 0x50
 8008eb0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__VCSEL_START -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8008eb4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8008eb8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8008ebc:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8008ec0:	5cd2      	ldrb	r2, [r2, r3]
 8008ec2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008ec6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8008ed0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008ed4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8008ede:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ee6:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8008eea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008eee:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8008ef8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f00:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2



	i2c_buffer_offset_bytes =
 8008f04:	2351      	movs	r3, #81	; 0x51
 8008f06:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8008f0a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8008f0e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8008f12:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8008f16:	5cd3      	ldrb	r3, [r2, r3]
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8008f1e:	2352      	movs	r3, #82	; 0x52
 8008f20:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8008f24:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8008f28:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8008f2c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8008f30:	5cd2      	ldrb	r2, [r2, r3]
 8008f32:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008f36:	4413      	add	r3, r2
 8008f38:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8008f3c:	234d      	movs	r3, #77	; 0x4d
 8008f3e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8008f42:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8008f46:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8008f4a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8008f4e:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8008f52:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8008f54:	2306      	movs	r3, #6
 8008f56:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_0_2 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8008f5a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8008f5e:	f107 020c 	add.w	r2, r7, #12
 8008f62:	4413      	add	r3, r2
 8008f64:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8008f68:	2300      	movs	r3, #0
 8008f6a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8008f6e:	e01a      	b.n	8008fa6 <VL53L1_get_histogram_bin_data+0x276>
		pdata->bin_data[bin] =
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8008f70:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008f74:	2003      	movs	r0, #3
 8008f76:	f004 fb8d 	bl	800d694 <VL53L1_i2c_decode_uint32_t>
 8008f7a:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8008f7c:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8008f80:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8008f82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008f86:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	3206      	adds	r2, #6
 8008f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8008f92:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008f96:	3303      	adds	r3, #3
 8008f98:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8008f9c:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8008fa6:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8008faa:	2b17      	cmp	r3, #23
 8008fac:	d9e0      	bls.n	8008f70 <VL53L1_get_histogram_bin_data+0x240>
	}

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 8008fae:	f107 0208 	add.w	r2, r7, #8
 8008fb2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008fb6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8008fba:	f248 018d 	movw	r1, #32909	; 0x808d
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	f000 fbd0 	bl	8009764 <VL53L1_get_tuning_parm>
			&hist_merge);

	if (pdata->result__stream_count == 0) {
 8008fc4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008fc8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d118      	bne.n	8009008 <VL53L1_get_histogram_bin_data+0x2d8>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8008fd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008fda:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8008fde:	3318      	adds	r3, #24
 8008fe0:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f015 f9e6 	bl	801e3b8 <memset>
		pdev->bin_rec_pos = 0;
 8008fec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
		pdev->pos_before_next_recom = 0;
 8008ffa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
	}

	if (hist_merge == 1)
 8009008:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800900c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d10b      	bne.n	800902e <VL53L1_get_histogram_bin_data+0x2fe>
		vl53l1_histo_merge(Dev, pdata);
 8009016:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800901a:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 800901e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009022:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009026:	6811      	ldr	r1, [r2, #0]
 8009028:	6818      	ldr	r0, [r3, #0]
 800902a:	f7fd f97e 	bl	800632a <vl53l1_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 800902e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009032:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8009036:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800903a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	709a      	strb	r2, [r3, #2]
	pdata->VL53L1_p_022               = 0;
 8009042:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009046:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2200      	movs	r2, #0
 800904e:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023             = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8009050:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009054:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2218      	movs	r2, #24
 800905c:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800905e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009062:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2218      	movs	r2, #24
 800906a:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 800906c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009070:	78da      	ldrb	r2, [r3, #3]
 8009072:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009076:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8009080:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009084:	799b      	ldrb	r3, [r3, #6]
 8009086:	b29b      	uxth	r3, r3
 8009088:	011b      	lsls	r3, r3, #4
 800908a:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 800908c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009090:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 800909a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800909e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 80090a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090ac:	7c1b      	ldrb	r3, [r3, #16]
 80090ae:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 80090b0:	4413      	add	r3, r2
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80090b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53L1_p_019 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 80090c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090c6:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53L1_p_019 =
 80090c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80090cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 80090d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80090da:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 80090de:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80090e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80090e6:	6811      	ldr	r1, [r2, #0]
 80090e8:	6818      	ldr	r0, [r3, #0]
 80090ea:	f004 fed4 	bl	800de96 <VL53L1_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 80090ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d117      	bne.n	800912a <VL53L1_get_histogram_bin_data+0x3fa>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 80090fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80090fe:	791b      	ldrb	r3, [r3, #4]
 8009100:	b29b      	uxth	r3, r3
 8009102:	021b      	lsls	r3, r3, #8
 8009104:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8009106:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800910a:	795b      	ldrb	r3, [r3, #5]
 800910c:	b29b      	uxth	r3, r3
		encoded_timeout =
 800910e:	4413      	add	r3, r2
 8009110:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 8009114:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009118:	799a      	ldrb	r2, [r3, #6]
 800911a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800911e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8009128:	e016      	b.n	8009158 <VL53L1_get_histogram_bin_data+0x428>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 800912a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800912e:	79db      	ldrb	r3, [r3, #7]
 8009130:	b29b      	uxth	r3, r3
 8009132:	021b      	lsls	r3, r3, #8
 8009134:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8009136:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800913a:	7a1b      	ldrb	r3, [r3, #8]
 800913c:	b29b      	uxth	r3, r3
		encoded_timeout =
 800913e:	4413      	add	r3, r2
 8009140:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 8009144:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009148:	7a5a      	ldrb	r2, [r3, #9]
 800914a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800914e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8009158:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800915c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2200      	movs	r2, #0
 8009164:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8009166:	2300      	movs	r3, #0
 8009168:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 800916c:	e01f      	b.n	80091ae <VL53L1_get_histogram_bin_data+0x47e>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 800916e:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8009172:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009176:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 800917a:	6812      	ldr	r2, [r2, #0]
 800917c:	4413      	add	r3, r2
 800917e:	7b1b      	ldrb	r3, [r3, #12]
 8009180:	f003 0307 	and.w	r3, r3, #7
 8009184:	2b07      	cmp	r3, #7
 8009186:	d10d      	bne.n	80091a4 <VL53L1_get_histogram_bin_data+0x474>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8009188:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800918c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	7adb      	ldrb	r3, [r3, #11]
 8009194:	3304      	adds	r3, #4
 8009196:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8009198:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800919c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 80091a4:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80091a8:	3301      	adds	r3, #1
 80091aa:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 80091ae:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80091b2:	2b05      	cmp	r3, #5
 80091b4:	d9db      	bls.n	800916e <VL53L1_get_histogram_bin_data+0x43e>
	}

	pdata->total_periods_elapsed =
		VL53L1_decode_timeout(encoded_timeout);
 80091b6:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80091ba:	4618      	mov	r0, r3
 80091bc:	f004 fcdb 	bl	800db76 <VL53L1_decode_timeout>
 80091c0:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 80091c2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80091c6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 80091d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80091d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80091de:	4618      	mov	r0, r3
 80091e0:	f007 fb54 	bl	801088c <VL53L1_calc_pll_period_us>
 80091e4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 80091e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80091ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091f6:	3301      	adds	r3, #1
 80091f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 80091fc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009200:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53L1_duration_maths(
 800920a:	4619      	mov	r1, r3
 800920c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009214:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8009218:	f007 fb4f 	bl	80108ba <VL53L1_duration_maths>
 800921c:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 800921e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009222:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 800922c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009230:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2200      	movs	r2, #0
 8009238:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53L1_hist_calc_zero_distance_phase(pdata);
 800923c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009240:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009244:	6818      	ldr	r0, [r3, #0]
 8009246:	f007 fc5e 	bl	8010b06 <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 800924a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800924e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009252:	6818      	ldr	r0, [r3, #0]
 8009254:	f008 f875 	bl	8011342 <VL53L1_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 8009258:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800925c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009260:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009264:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 800926c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009270:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8009274:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009278:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 8009280:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009284:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	789b      	ldrb	r3, [r3, #2]
 800928c:	461a      	mov	r2, r3
 800928e:	4613      	mov	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800929a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800929e:	4413      	add	r3, r2
 80092a0:	3302      	adds	r3, #2
 80092a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 80092a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092aa:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 80092ac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80092b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 80092ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092be:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 80092c0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80092c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 80092ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80092d2:	2200      	movs	r2, #0
 80092d4:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 80092d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80092da:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80092e4:	f003 031f 	and.w	r3, r3, #31
 80092e8:	2b11      	cmp	r3, #17
 80092ea:	bf8c      	ite	hi
 80092ec:	2201      	movhi	r2, #1
 80092ee:	2200      	movls	r2, #0
 80092f0:	b2d2      	uxtb	r2, r2
 80092f2:	2a00      	cmp	r2, #0
 80092f4:	d11b      	bne.n	800932e <VL53L1_get_histogram_bin_data+0x5fe>
 80092f6:	2201      	movs	r2, #1
 80092f8:	409a      	lsls	r2, r3
 80092fa:	4b10      	ldr	r3, [pc, #64]	; (800933c <VL53L1_get_histogram_bin_data+0x60c>)
 80092fc:	4013      	ands	r3, r2
 80092fe:	2b00      	cmp	r3, #0
 8009300:	bf14      	ite	ne
 8009302:	2301      	movne	r3, #1
 8009304:	2300      	moveq	r3, #0
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b00      	cmp	r3, #0
 800930a:	d010      	beq.n	800932e <VL53L1_get_histogram_bin_data+0x5fe>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 800930c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009310:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800931a:	f003 031f 	and.w	r3, r3, #31
 800931e:	b2da      	uxtb	r2, r3
 8009320:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009324:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53L1_ERROR_RANGE_ERROR;
 8009326:	23fa      	movs	r3, #250	; 0xfa
 8009328:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 800932c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800932e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8009332:	4618      	mov	r0, r3
 8009334:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	0002200e 	.word	0x0002200e

08009340 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8009340:	b480      	push	{r7}
 8009342:	b08b      	sub	sp, #44	; 0x2c
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
 800934c:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8009358:	2300      	movs	r3, #0
 800935a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2200      	movs	r2, #0
 8009360:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	78da      	ldrb	r2, [r3, #3]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2200      	movs	r2, #0
 800936e:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	2204      	movs	r2, #4
 8009374:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2201      	movs	r2, #1
 800937a:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	8a1b      	ldrh	r3, [r3, #16]
 8009380:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	8a9b      	ldrh	r3, [r3, #20]
 8009386:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	8a5b      	ldrh	r3, [r3, #18]
 800938c:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 800938e:	2300      	movs	r3, #0
 8009390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009394:	e00b      	b.n	80093ae <VL53L1_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53L1_p_007[i] = 0;
 8009396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	4413      	add	r3, r2
 80093a0:	2200      	movs	r2, #0
 80093a2:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 80093a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093a8:	3301      	adds	r3, #1
 80093aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80093ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	d9ef      	bls.n	8009396 <VL53L1_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53L1_p_002[0]);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	3314      	adds	r3, #20
 80093ba:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 80093bc:	2300      	movs	r3, #0
 80093be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80093c2:	e0fe      	b.n	80095c2 <VL53L1_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80093ca:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	2200      	movs	r2, #0
 80093d0:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	78db      	ldrb	r3, [r3, #3]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10a      	bne.n	80093f0 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	785b      	ldrb	r3, [r3, #1]
 80093de:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 80093e2:	2b09      	cmp	r3, #9
 80093e4:	d104      	bne.n	80093f0 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	2213      	movs	r2, #19
 80093ea:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80093ee:	e007      	b.n	8009400 <VL53L1_copy_sys_and_core_results_to_range_results+0xc0>
				VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	785b      	ldrb	r3, [r3, #1]
 80093f4:	f003 031f 	and.w	r3, r3, #31
 80093f8:	b2da      	uxtb	r2, r3
			pdata->range_status =
 80093fa:	6a3b      	ldr	r3, [r7, #32]
 80093fc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53L1_p_015 = 0;
 8009400:	6a3b      	ldr	r3, [r7, #32]
 8009402:	2200      	movs	r2, #0
 8009404:	721a      	strb	r2, [r3, #8]
		pdata->VL53L1_p_022    = 0;
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	2200      	movs	r2, #0
 800940a:	725a      	strb	r2, [r3, #9]
		pdata->VL53L1_p_025   = 0;
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	2200      	movs	r2, #0
 8009410:	729a      	strb	r2, [r3, #10]
		pdata->VL53L1_p_026     = 0;
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	2200      	movs	r2, #0
 8009416:	72da      	strb	r2, [r3, #11]
		pdata->VL53L1_p_016   = 0;
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	2200      	movs	r2, #0
 800941c:	731a      	strb	r2, [r3, #12]
		pdata->VL53L1_p_027    = 0;
 800941e:	6a3b      	ldr	r3, [r7, #32]
 8009420:	2200      	movs	r2, #0
 8009422:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8009424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009428:	2b00      	cmp	r3, #0
 800942a:	d002      	beq.n	8009432 <VL53L1_copy_sys_and_core_results_to_range_results+0xf2>
 800942c:	2b01      	cmp	r3, #1
 800942e:	d05c      	beq.n	80094ea <VL53L1_copy_sys_and_core_results_to_range_results+0x1aa>
 8009430:	e0a8      	b.n	8009584 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	789b      	ldrb	r3, [r3, #2]
 8009436:	2b07      	cmp	r3, #7
 8009438:	d103      	bne.n	8009442 <VL53L1_copy_sys_and_core_results_to_range_results+0x102>
				VL53L1_DEVICEREPORTSTATUS_MM1)
				pdata->VL53L1_p_006 =
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	8a7a      	ldrh	r2, [r7, #18]
 800943e:	82da      	strh	r2, [r3, #22]
 8009440:	e00b      	b.n	800945a <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	789b      	ldrb	r3, [r3, #2]
 8009446:	2b08      	cmp	r3, #8
 8009448:	d103      	bne.n	8009452 <VL53L1_copy_sys_and_core_results_to_range_results+0x112>
					VL53L1_DEVICEREPORTSTATUS_MM2)
				pdata->VL53L1_p_006 =
 800944a:	6a3b      	ldr	r3, [r7, #32]
 800944c:	8aba      	ldrh	r2, [r7, #20]
 800944e:	82da      	strh	r2, [r3, #22]
 8009450:	e003      	b.n	800945a <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd0;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53L1_p_006 =
 8009456:	6a3b      	ldr	r3, [r7, #32]
 8009458:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	8afa      	ldrh	r2, [r7, #22]
 800945e:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8009464:	6a3b      	ldr	r3, [r7, #32]
 8009466:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800946c:	6a3b      	ldr	r3, [r7, #32]
 800946e:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	895b      	ldrh	r3, [r3, #10]
 8009474:	015b      	lsls	r3, r3, #5
 8009476:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800947e:	d302      	bcc.n	8009486 <VL53L1_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8009480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009484:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	b29a      	uxth	r2, r3
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd0;
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53L1_p_014 =
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 800949c:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	fb02 f303 	mul.w	r3, r2, r3
 80094a6:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094ae:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	da01      	bge.n	80094ba <VL53L1_copy_sys_and_core_results_to_range_results+0x17a>
 80094b6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80094ba:	12db      	asrs	r3, r3, #11
 80094bc:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	b21a      	sxth	r2, r3
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd0;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685a      	ldr	r2, [r3, #4]
			pdata->VL53L1_p_021 =
 80094cc:	6a3b      	ldr	r3, [r7, #32]
 80094ce:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd0;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689a      	ldr	r2, [r3, #8]
			pdata->VL53L1_p_013 =
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 80094dc:	6a3b      	ldr	r3, [r7, #32]
 80094de:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd0;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681a      	ldr	r2, [r3, #0]
			pdata->VL53L1_p_020 =
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 80094e8:	e04c      	b.n	8009584 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd1;
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53L1_p_006 =
 80094ee:	6a3b      	ldr	r3, [r7, #32]
 80094f0:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009500:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	8bdb      	ldrh	r3, [r3, #30]
 800950e:	015b      	lsls	r3, r3, #5
 8009510:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009518:	d302      	bcc.n	8009520 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 800951a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800951e:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	b29a      	uxth	r2, r3
 8009524:	6a3b      	ldr	r3, [r7, #32]
 8009526:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd1;
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53L1_p_014 =
 800952c:	6a3b      	ldr	r3, [r7, #32]
 800952e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 8009536:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	fb02 f303 	mul.w	r3, r2, r3
 8009540:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009548:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	2b00      	cmp	r3, #0
 800954e:	da01      	bge.n	8009554 <VL53L1_copy_sys_and_core_results_to_range_results+0x214>
 8009550:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8009554:	12db      	asrs	r3, r3, #11
 8009556:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	b21a      	sxth	r2, r3
 800955c:	6a3b      	ldr	r3, [r7, #32]
 800955e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd1;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	695a      	ldr	r2, [r3, #20]
			pdata->VL53L1_p_021 =
 8009566:	6a3b      	ldr	r3, [r7, #32]
 8009568:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd1;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	699a      	ldr	r2, [r3, #24]
			pdata->VL53L1_p_013 =
 800956e:	6a3b      	ldr	r3, [r7, #32]
 8009570:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8009576:	6a3b      	ldr	r3, [r7, #32]
 8009578:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd1;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	691a      	ldr	r2, [r3, #16]
			pdata->VL53L1_p_020 =
 800957e:	6a3b      	ldr	r3, [r7, #32]
 8009580:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8009582:	bf00      	nop
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800958a:	6a3b      	ldr	r3, [r7, #32]
 800958c:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 800958e:	6a3b      	ldr	r3, [r7, #32]
 8009590:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80095a0:	6a3b      	ldr	r3, [r7, #32]
 80095a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 80095a6:	6a3b      	ldr	r3, [r7, #32]
 80095a8:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 80095b2:	6a3b      	ldr	r3, [r7, #32]
 80095b4:	334c      	adds	r3, #76	; 0x4c
 80095b6:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 80095b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095bc:	3301      	adds	r3, #1
 80095be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80095c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	f67f aefc 	bls.w	80093c4 <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2200      	movs	r2, #0
 80095d0:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	785b      	ldrb	r3, [r3, #1]
 80095d6:	f003 031f 	and.w	r3, r3, #31
 80095da:	2b11      	cmp	r3, #17
 80095dc:	bf8c      	ite	hi
 80095de:	2201      	movhi	r2, #1
 80095e0:	2200      	movls	r2, #0
 80095e2:	b2d2      	uxtb	r2, r2
 80095e4:	2a00      	cmp	r2, #0
 80095e6:	d116      	bne.n	8009616 <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
 80095e8:	2201      	movs	r2, #1
 80095ea:	409a      	lsls	r2, r3
 80095ec:	4b0d      	ldr	r3, [pc, #52]	; (8009624 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e4>)
 80095ee:	4013      	ands	r3, r2
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	bf14      	ite	ne
 80095f4:	2301      	movne	r3, #1
 80095f6:	2300      	moveq	r3, #0
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00b      	beq.n	8009616 <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	785b      	ldrb	r3, [r3, #1]
 8009602:	f003 031f 	and.w	r3, r3, #31
 8009606:	b2da      	uxtb	r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53L1_p_002[0].range_status =
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53L1_DEVICEERROR_NOUPDATE;
	break;
 8009614:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8009616:	bf00      	nop
 8009618:	372c      	adds	r7, #44	; 0x2c
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	0002200e 	.word	0x0002200e

08009628 <VL53L1_set_zone_dss_config>:


VL53L1_Error VL53L1_set_zone_dss_config(
	VL53L1_DEV                      Dev,
	VL53L1_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8009628:	b480      	push	{r7}
 800962a:	b087      	sub	sp, #28
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009632:	2300      	movs	r3, #0
 8009634:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	3318      	adds	r3, #24
 800963a:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	332c      	adds	r3, #44	; 0x2c
 8009640:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	2b05      	cmp	r3, #5
 8009648:	d109      	bne.n	800965e <VL53L1_set_zone_dss_config+0x36>
		VL53L1_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	2202      	movs	r2, #2
 800964e:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
 800965c:	e003      	b.n	8009666 <VL53L1_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 8009666:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800966a:	4618      	mov	r0, r3
 800966c:	371c      	adds	r7, #28
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <VL53L1_set_dmax_mode>:


VL53L1_Error VL53L1_set_dmax_mode(
	VL53L1_DEV               Dev,
	VL53L1_DeviceDmaxMode    dmax_mode)
{
 8009676:	b480      	push	{r7}
 8009678:	b085      	sub	sp, #20
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	460b      	mov	r3, r1
 8009680:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009682:	2300      	movs	r3, #0
 8009684:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	3318      	adds	r3, #24
 800968a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	78fa      	ldrb	r2, [r7, #3]
 8009690:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8009692:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <VL53L1_get_dmax_calibration_data>:
VL53L1_Error VL53L1_get_dmax_calibration_data(
	VL53L1_DEV                      Dev,
	VL53L1_DeviceDmaxMode           dmax_mode,
	uint8_t                         zone_id,
	VL53L1_dmax_calibration_data_t *pdmax_cal)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b088      	sub	sp, #32
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	60f8      	str	r0, [r7, #12]
 80096aa:	607b      	str	r3, [r7, #4]
 80096ac:	460b      	mov	r3, r1
 80096ae:	72fb      	strb	r3, [r7, #11]
 80096b0:	4613      	mov	r3, r2
 80096b2:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80096b4:	2300      	movs	r3, #0
 80096b6:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t    *pdev =
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3318      	adds	r3, #24
 80096bc:	61bb      	str	r3, [r7, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80096c4:	3308      	adds	r3, #8
 80096c6:	617b      	str	r3, [r7, #20]
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 80096c8:	7afb      	ldrb	r3, [r7, #11]
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d006      	beq.n	80096dc <VL53L1_get_dmax_calibration_data+0x3a>
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	dc3e      	bgt.n	8009750 <VL53L1_get_dmax_calibration_data+0xae>
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d034      	beq.n	8009740 <VL53L1_get_dmax_calibration_data+0x9e>
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d02a      	beq.n	8009730 <VL53L1_get_dmax_calibration_data+0x8e>
 80096da:	e039      	b.n	8009750 <VL53L1_get_dmax_calibration_data+0xae>

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 80096dc:	7aba      	ldrb	r2, [r7, #10]
 80096de:	6979      	ldr	r1, [r7, #20]
 80096e0:	4613      	mov	r3, r2
 80096e2:	00db      	lsls	r3, r3, #3
 80096e4:	1a9b      	subs	r3, r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	440b      	add	r3, r1
 80096ea:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	b29a      	uxth	r2, r3
		pdmax_cal->ref__actual_effective_spads =
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	801a      	strh	r2, [r3, #0]
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 80096f6:	7aba      	ldrb	r2, [r7, #10]
 80096f8:	6979      	ldr	r1, [r7, #20]
 80096fa:	4613      	mov	r3, r2
 80096fc:	00db      	lsls	r3, r3, #3
 80096fe:	1a9b      	subs	r3, r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	440b      	add	r3, r1
 8009704:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	b29a      	uxth	r2, r3
		pdmax_cal->ref__peak_signal_count_rate_mcps =
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
		pres->zone_cal.cal_distance_mm;
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	f9b3 3792 	ldrsh.w	r3, [r3, #1938]	; 0x792
 8009716:	b29a      	uxth	r2, r3
		pdmax_cal->ref__distance_mm =
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	809a      	strh	r2, [r3, #4]
		pdmax_cal->ref_reflectance_pc =
		pres->zone_cal.cal_reflectance_pc;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f8b3 2794 	ldrh.w	r2, [r3, #1940]	; 0x794
		pdmax_cal->ref_reflectance_pc =
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	80da      	strh	r2, [r3, #6]
		pdmax_cal->coverglass_transmission = 0x0100;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f44f 7280 	mov.w	r2, #256	; 0x100
 800972c:	811a      	strh	r2, [r3, #8]
	break;
 800972e:	e012      	b.n	8009756 <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8009734:	220a      	movs	r2, #10
 8009736:	4619      	mov	r1, r3
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f014 fe15 	bl	801e368 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 800973e:	e00a      	b.n	8009756 <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8009744:	220a      	movs	r2, #10
 8009746:	4619      	mov	r1, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f014 fe0d 	bl	801e368 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 800974e:	e002      	b.n	8009756 <VL53L1_get_dmax_calibration_data+0xb4>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009750:	23fc      	movs	r3, #252	; 0xfc
 8009752:	77fb      	strb	r3, [r7, #31]
	break;
 8009754:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8009756:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3720      	adds	r7, #32
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
	...

08009764 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8009764:	b480      	push	{r7}
 8009766:	b089      	sub	sp, #36	; 0x24
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	460b      	mov	r3, r1
 800976e:	607a      	str	r2, [r7, #4]
 8009770:	817b      	strh	r3, [r7, #10]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009772:	2300      	movs	r3, #0
 8009774:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	3318      	adds	r3, #24
 800977a:	61bb      	str	r3, [r7, #24]
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8009782:	617b      	str	r3, [r7, #20]
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800978a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800978c:	897b      	ldrh	r3, [r7, #10]
 800978e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009792:	2bbe      	cmp	r3, #190	; 0xbe
 8009794:	f200 86fc 	bhi.w	800a590 <VL53L1_get_tuning_parm+0xe2c>
 8009798:	a201      	add	r2, pc, #4	; (adr r2, 80097a0 <VL53L1_get_tuning_parm+0x3c>)
 800979a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979e:	bf00      	nop
 80097a0:	08009a9d 	.word	0x08009a9d
 80097a4:	08009aad 	.word	0x08009aad
 80097a8:	08009abd 	.word	0x08009abd
 80097ac:	08009acd 	.word	0x08009acd
 80097b0:	08009adb 	.word	0x08009adb
 80097b4:	08009ae9 	.word	0x08009ae9
 80097b8:	08009af7 	.word	0x08009af7
 80097bc:	08009b05 	.word	0x08009b05
 80097c0:	08009b13 	.word	0x08009b13
 80097c4:	08009b21 	.word	0x08009b21
 80097c8:	08009b2f 	.word	0x08009b2f
 80097cc:	08009b3b 	.word	0x08009b3b
 80097d0:	08009b49 	.word	0x08009b49
 80097d4:	08009b57 	.word	0x08009b57
 80097d8:	08009b63 	.word	0x08009b63
 80097dc:	08009b71 	.word	0x08009b71
 80097e0:	08009b7f 	.word	0x08009b7f
 80097e4:	08009b8f 	.word	0x08009b8f
 80097e8:	08009b9f 	.word	0x08009b9f
 80097ec:	08009bad 	.word	0x08009bad
 80097f0:	08009bbd 	.word	0x08009bbd
 80097f4:	08009bcb 	.word	0x08009bcb
 80097f8:	08009bdb 	.word	0x08009bdb
 80097fc:	08009beb 	.word	0x08009beb
 8009800:	08009bfb 	.word	0x08009bfb
 8009804:	08009c0b 	.word	0x08009c0b
 8009808:	08009c1b 	.word	0x08009c1b
 800980c:	08009c2b 	.word	0x08009c2b
 8009810:	08009c3b 	.word	0x08009c3b
 8009814:	08009c4b 	.word	0x08009c4b
 8009818:	08009c5b 	.word	0x08009c5b
 800981c:	08009c69 	.word	0x08009c69
 8009820:	08009c79 	.word	0x08009c79
 8009824:	08009c89 	.word	0x08009c89
 8009828:	08009c99 	.word	0x08009c99
 800982c:	08009ca9 	.word	0x08009ca9
 8009830:	08009cb9 	.word	0x08009cb9
 8009834:	08009cc9 	.word	0x08009cc9
 8009838:	08009cd9 	.word	0x08009cd9
 800983c:	08009ce9 	.word	0x08009ce9
 8009840:	08009cf9 	.word	0x08009cf9
 8009844:	08009d09 	.word	0x08009d09
 8009848:	08009d19 	.word	0x08009d19
 800984c:	08009d29 	.word	0x08009d29
 8009850:	08009d39 	.word	0x08009d39
 8009854:	08009d49 	.word	0x08009d49
 8009858:	08009d59 	.word	0x08009d59
 800985c:	08009d69 	.word	0x08009d69
 8009860:	08009d79 	.word	0x08009d79
 8009864:	08009d89 	.word	0x08009d89
 8009868:	08009d99 	.word	0x08009d99
 800986c:	08009da7 	.word	0x08009da7
 8009870:	08009db5 	.word	0x08009db5
 8009874:	08009dc3 	.word	0x08009dc3
 8009878:	08009dd1 	.word	0x08009dd1
 800987c:	08009ddf 	.word	0x08009ddf
 8009880:	08009ded 	.word	0x08009ded
 8009884:	08009dfb 	.word	0x08009dfb
 8009888:	08009e09 	.word	0x08009e09
 800988c:	08009e17 	.word	0x08009e17
 8009890:	08009e25 	.word	0x08009e25
 8009894:	08009e33 	.word	0x08009e33
 8009898:	08009e41 	.word	0x08009e41
 800989c:	08009e4f 	.word	0x08009e4f
 80098a0:	08009e5d 	.word	0x08009e5d
 80098a4:	08009e6b 	.word	0x08009e6b
 80098a8:	08009e79 	.word	0x08009e79
 80098ac:	08009e87 	.word	0x08009e87
 80098b0:	08009e95 	.word	0x08009e95
 80098b4:	08009ea3 	.word	0x08009ea3
 80098b8:	08009eb1 	.word	0x08009eb1
 80098bc:	08009ebf 	.word	0x08009ebf
 80098c0:	08009ecd 	.word	0x08009ecd
 80098c4:	08009edb 	.word	0x08009edb
 80098c8:	08009ee7 	.word	0x08009ee7
 80098cc:	08009ef5 	.word	0x08009ef5
 80098d0:	08009f03 	.word	0x08009f03
 80098d4:	08009f0f 	.word	0x08009f0f
 80098d8:	08009f1b 	.word	0x08009f1b
 80098dc:	08009f27 	.word	0x08009f27
 80098e0:	08009f33 	.word	0x08009f33
 80098e4:	08009f3f 	.word	0x08009f3f
 80098e8:	08009f4b 	.word	0x08009f4b
 80098ec:	08009f59 	.word	0x08009f59
 80098f0:	08009f67 	.word	0x08009f67
 80098f4:	08009f75 	.word	0x08009f75
 80098f8:	08009f83 	.word	0x08009f83
 80098fc:	08009f91 	.word	0x08009f91
 8009900:	08009f9f 	.word	0x08009f9f
 8009904:	08009fad 	.word	0x08009fad
 8009908:	08009fbb 	.word	0x08009fbb
 800990c:	08009fc9 	.word	0x08009fc9
 8009910:	08009fd7 	.word	0x08009fd7
 8009914:	08009fe5 	.word	0x08009fe5
 8009918:	08009ff3 	.word	0x08009ff3
 800991c:	0800a001 	.word	0x0800a001
 8009920:	0800a00f 	.word	0x0800a00f
 8009924:	0800a01d 	.word	0x0800a01d
 8009928:	0800a02b 	.word	0x0800a02b
 800992c:	0800a039 	.word	0x0800a039
 8009930:	0800a047 	.word	0x0800a047
 8009934:	0800a055 	.word	0x0800a055
 8009938:	0800a063 	.word	0x0800a063
 800993c:	0800a071 	.word	0x0800a071
 8009940:	0800a07f 	.word	0x0800a07f
 8009944:	0800a08d 	.word	0x0800a08d
 8009948:	0800a09b 	.word	0x0800a09b
 800994c:	0800a0a9 	.word	0x0800a0a9
 8009950:	0800a0b7 	.word	0x0800a0b7
 8009954:	0800a0c5 	.word	0x0800a0c5
 8009958:	0800a0d3 	.word	0x0800a0d3
 800995c:	0800a0e1 	.word	0x0800a0e1
 8009960:	0800a0ef 	.word	0x0800a0ef
 8009964:	0800a0fd 	.word	0x0800a0fd
 8009968:	0800a10b 	.word	0x0800a10b
 800996c:	0800a119 	.word	0x0800a119
 8009970:	0800a127 	.word	0x0800a127
 8009974:	0800a135 	.word	0x0800a135
 8009978:	0800a143 	.word	0x0800a143
 800997c:	0800a155 	.word	0x0800a155
 8009980:	0800a167 	.word	0x0800a167
 8009984:	0800a179 	.word	0x0800a179
 8009988:	0800a18b 	.word	0x0800a18b
 800998c:	0800a19d 	.word	0x0800a19d
 8009990:	0800a1af 	.word	0x0800a1af
 8009994:	0800a1c1 	.word	0x0800a1c1
 8009998:	0800a1d3 	.word	0x0800a1d3
 800999c:	0800a1e5 	.word	0x0800a1e5
 80099a0:	0800a1f7 	.word	0x0800a1f7
 80099a4:	0800a209 	.word	0x0800a209
 80099a8:	0800a21b 	.word	0x0800a21b
 80099ac:	0800a22d 	.word	0x0800a22d
 80099b0:	0800a23f 	.word	0x0800a23f
 80099b4:	0800a251 	.word	0x0800a251
 80099b8:	0800a263 	.word	0x0800a263
 80099bc:	0800a275 	.word	0x0800a275
 80099c0:	0800a287 	.word	0x0800a287
 80099c4:	0800a299 	.word	0x0800a299
 80099c8:	0800a2a7 	.word	0x0800a2a7
 80099cc:	0800a2b5 	.word	0x0800a2b5
 80099d0:	0800a2c3 	.word	0x0800a2c3
 80099d4:	0800a2d1 	.word	0x0800a2d1
 80099d8:	0800a2df 	.word	0x0800a2df
 80099dc:	0800a2ed 	.word	0x0800a2ed
 80099e0:	0800a2fb 	.word	0x0800a2fb
 80099e4:	0800a30d 	.word	0x0800a30d
 80099e8:	0800a31b 	.word	0x0800a31b
 80099ec:	0800a329 	.word	0x0800a329
 80099f0:	0800a337 	.word	0x0800a337
 80099f4:	0800a345 	.word	0x0800a345
 80099f8:	0800a353 	.word	0x0800a353
 80099fc:	0800a361 	.word	0x0800a361
 8009a00:	0800a36f 	.word	0x0800a36f
 8009a04:	0800a37d 	.word	0x0800a37d
 8009a08:	0800a38b 	.word	0x0800a38b
 8009a0c:	0800a399 	.word	0x0800a399
 8009a10:	0800a3a7 	.word	0x0800a3a7
 8009a14:	0800a3b5 	.word	0x0800a3b5
 8009a18:	0800a3c3 	.word	0x0800a3c3
 8009a1c:	0800a3d1 	.word	0x0800a3d1
 8009a20:	0800a3df 	.word	0x0800a3df
 8009a24:	0800a3ed 	.word	0x0800a3ed
 8009a28:	0800a3fb 	.word	0x0800a3fb
 8009a2c:	0800a409 	.word	0x0800a409
 8009a30:	0800a417 	.word	0x0800a417
 8009a34:	0800a425 	.word	0x0800a425
 8009a38:	0800a433 	.word	0x0800a433
 8009a3c:	0800a441 	.word	0x0800a441
 8009a40:	0800a44f 	.word	0x0800a44f
 8009a44:	0800a45d 	.word	0x0800a45d
 8009a48:	0800a46b 	.word	0x0800a46b
 8009a4c:	0800a479 	.word	0x0800a479
 8009a50:	0800a487 	.word	0x0800a487
 8009a54:	0800a495 	.word	0x0800a495
 8009a58:	0800a4a3 	.word	0x0800a4a3
 8009a5c:	0800a4b1 	.word	0x0800a4b1
 8009a60:	0800a4bf 	.word	0x0800a4bf
 8009a64:	0800a4cd 	.word	0x0800a4cd
 8009a68:	0800a4db 	.word	0x0800a4db
 8009a6c:	0800a4e9 	.word	0x0800a4e9
 8009a70:	0800a4f7 	.word	0x0800a4f7
 8009a74:	0800a505 	.word	0x0800a505
 8009a78:	0800a513 	.word	0x0800a513
 8009a7c:	0800a521 	.word	0x0800a521
 8009a80:	0800a52f 	.word	0x0800a52f
 8009a84:	0800a53d 	.word	0x0800a53d
 8009a88:	0800a54b 	.word	0x0800a54b
 8009a8c:	0800a559 	.word	0x0800a559
 8009a90:	0800a567 	.word	0x0800a567
 8009a94:	0800a575 	.word	0x0800a575
 8009a98:	0800a583 	.word	0x0800a583

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 8009aa2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	601a      	str	r2, [r3, #0]
	break;
 8009aa8:	f000 bd79 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 8009ab2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	601a      	str	r2, [r3, #0]
	break;
 8009ab8:	f000 bd71 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 8009ac2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	601a      	str	r2, [r3, #0]
	break;
 8009ac8:	f000 bd69 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	601a      	str	r2, [r3, #0]
	break;
 8009ad6:	f000 bd62 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	785b      	ldrb	r3, [r3, #1]
 8009ade:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	601a      	str	r2, [r3, #0]
	break;
 8009ae4:	f000 bd5b 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	789b      	ldrb	r3, [r3, #2]
 8009aec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	601a      	str	r2, [r3, #0]
	break;
 8009af2:	f000 bd54 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	78db      	ldrb	r3, [r3, #3]
 8009afa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	601a      	str	r2, [r3, #0]
	break;
 8009b00:	f000 bd4d 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	791b      	ldrb	r3, [r3, #4]
 8009b08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	601a      	str	r2, [r3, #0]
	break;
 8009b0e:	f000 bd46 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	795b      	ldrb	r3, [r3, #5]
 8009b16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	601a      	str	r2, [r3, #0]
	break;
 8009b1c:	f000 bd3f 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	799b      	ldrb	r3, [r3, #6]
 8009b24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	601a      	str	r2, [r3, #0]
	break;
 8009b2a:	f000 bd38 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	601a      	str	r2, [r3, #0]
	break;
 8009b36:	f000 bd32 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	891b      	ldrh	r3, [r3, #8]
 8009b3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	601a      	str	r2, [r3, #0]
	break;
 8009b44:	f000 bd2b 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	8a1b      	ldrh	r3, [r3, #16]
 8009b4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	601a      	str	r2, [r3, #0]
	break;
 8009b52:	f000 bd24 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	601a      	str	r2, [r3, #0]
	break;
 8009b5e:	f000 bd1e 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	7e1b      	ldrb	r3, [r3, #24]
 8009b66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	601a      	str	r2, [r3, #0]
	break;
 8009b6c:	f000 bd17 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	8b5b      	ldrh	r3, [r3, #26]
 8009b74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	601a      	str	r2, [r3, #0]
	break;
 8009b7a:	f000 bd10 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8009b84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	601a      	str	r2, [r3, #0]
	break;
 8009b8a:	f000 bd08 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009b94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	601a      	str	r2, [r3, #0]
	break;
 8009b9a:	f000 bd00 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ba2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	601a      	str	r2, [r3, #0]
	break;
 8009ba8:	f000 bcf9 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009bb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	601a      	str	r2, [r3, #0]
	break;
 8009bb8:	f000 bcf1 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009bc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	601a      	str	r2, [r3, #0]
	break;
 8009bc6:	f000 bcea 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8009bd0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	601a      	str	r2, [r3, #0]
	break;
 8009bd6:	f000 bce2 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8009be0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	601a      	str	r2, [r3, #0]
	break;
 8009be6:	f000 bcda 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8009bf0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	601a      	str	r2, [r3, #0]
	break;
 8009bf6:	f000 bcd2 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8009c00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	601a      	str	r2, [r3, #0]
	break;
 8009c06:	f000 bcca 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8009c10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	601a      	str	r2, [r3, #0]
	break;
 8009c16:	f000 bcc2 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8009c20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	601a      	str	r2, [r3, #0]
	break;
 8009c26:	f000 bcba 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	f9b3 32ea 	ldrsh.w	r3, [r3, #746]	; 0x2ea
		*ptuning_parm_value = (int32_t)(
 8009c30:	461a      	mov	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	601a      	str	r2, [r3, #0]
	break;
 8009c36:	f000 bcb2 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	f9b3 32ec 	ldrsh.w	r3, [r3, #748]	; 0x2ec
		*ptuning_parm_value = (int32_t)(
 8009c40:	461a      	mov	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	601a      	str	r2, [r3, #0]
	break;
 8009c46:	f000 bcaa 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8009c50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	601a      	str	r2, [r3, #0]
	break;
 8009c56:	f000 bca2 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	601a      	str	r2, [r3, #0]
	break;
 8009c64:	f000 bc9b 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
		*ptuning_parm_value = (int32_t)(
 8009c6e:	461a      	mov	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	601a      	str	r2, [r3, #0]
	break;
 8009c74:	f000 bc93 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	601a      	str	r2, [r3, #0]
	break;
 8009c84:	f000 bc8b 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	f9b3 32e2 	ldrsh.w	r3, [r3, #738]	; 0x2e2
 8009c8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	601a      	str	r2, [r3, #0]
	break;
 8009c94:	f000 bc83 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8009c9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	601a      	str	r2, [r3, #0]
	break;
 8009ca4:	f000 bc7b 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8009cae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	601a      	str	r2, [r3, #0]
	break;
 8009cb4:	f000 bc73 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8009cbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	601a      	str	r2, [r3, #0]
	break;
 8009cc4:	f000 bc6b 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8009cce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	601a      	str	r2, [r3, #0]
	break;
 8009cd4:	f000 bc63 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 8009cde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	601a      	str	r2, [r3, #0]
	break;
 8009ce4:	f000 bc5b 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 8009cee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	601a      	str	r2, [r3, #0]
	break;
 8009cf4:	f000 bc53 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8009cfe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	601a      	str	r2, [r3, #0]
	break;
 8009d04:	f000 bc4b 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 8009d0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	601a      	str	r2, [r3, #0]
	break;
 8009d14:	f000 bc43 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 8009d1e:	461a      	mov	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	601a      	str	r2, [r3, #0]
	break;
 8009d24:	f000 bc3b 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8009d2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	601a      	str	r2, [r3, #0]
	break;
 8009d34:	f000 bc33 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 8009d3e:	461a      	mov	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	601a      	str	r2, [r3, #0]
	break;
 8009d44:	f000 bc2b 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8009d4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	601a      	str	r2, [r3, #0]
	break;
 8009d54:	f000 bc23 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 8009d5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	601a      	str	r2, [r3, #0]
	break;
 8009d64:	f000 bc1b 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 8009d6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	601a      	str	r2, [r3, #0]
	break;
 8009d74:	f000 bc13 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8009d7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	601a      	str	r2, [r3, #0]
	break;
 8009d84:	f000 bc0b 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 8009d8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	601a      	str	r2, [r3, #0]
	break;
 8009d94:	f000 bc03 	b.w	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8009d9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	601a      	str	r2, [r3, #0]
	break;
 8009da4:	e3fb      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 8009dac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	601a      	str	r2, [r3, #0]
	break;
 8009db2:	e3f4      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	f9b3 32e4 	ldrsh.w	r3, [r3, #740]	; 0x2e4
 8009dba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	601a      	str	r2, [r3, #0]
	break;
 8009dc0:	e3ed      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8009dc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	601a      	str	r2, [r3, #0]
	break;
 8009dce:	e3e6      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8009dd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	601a      	str	r2, [r3, #0]
	break;
 8009ddc:	e3df      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8009de4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	601a      	str	r2, [r3, #0]
	break;
 8009dea:	e3d8      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8009df2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	601a      	str	r2, [r3, #0]
	break;
 8009df8:	e3d1      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8009e00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	601a      	str	r2, [r3, #0]
	break;
 8009e06:	e3ca      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8009e0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	601a      	str	r2, [r3, #0]
	break;
 8009e14:	e3c3      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8009e1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	601a      	str	r2, [r3, #0]
	break;
 8009e22:	e3bc      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8009e2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	601a      	str	r2, [r3, #0]
	break;
 8009e30:	e3b5      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	; 0x2a4
 8009e38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	601a      	str	r2, [r3, #0]
	break;
 8009e3e:	e3ae      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	; 0x2a6
 8009e46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	601a      	str	r2, [r3, #0]
	break;
 8009e4c:	e3a7      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 8009e54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	601a      	str	r2, [r3, #0]
	break;
 8009e5a:	e3a0      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 8009e62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	601a      	str	r2, [r3, #0]
	break;
 8009e68:	e399      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8009e70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	601a      	str	r2, [r3, #0]
	break;
 8009e76:	e392      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8009e7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	601a      	str	r2, [r3, #0]
	break;
 8009e84:	e38b      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8009e8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	601a      	str	r2, [r3, #0]
	break;
 8009e92:	e384      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 8009e9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	601a      	str	r2, [r3, #0]
	break;
 8009ea0:	e37d      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8009ea8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	601a      	str	r2, [r3, #0]
	break;
 8009eae:	e376      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 8009eb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	601a      	str	r2, [r3, #0]
	break;
 8009ebc:	e36f      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8009ec4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	601a      	str	r2, [r3, #0]
	break;
 8009eca:	e368      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8009ed2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	601a      	str	r2, [r3, #0]
	break;
 8009ed8:	e361      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	7c1b      	ldrb	r3, [r3, #16]
 8009ede:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	601a      	str	r2, [r3, #0]
	break;
 8009ee4:	e35b      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009eec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	601a      	str	r2, [r3, #0]
	break;
 8009ef2:	e354      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009efa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	601a      	str	r2, [r3, #0]
	break;
 8009f00:	e34d      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	881b      	ldrh	r3, [r3, #0]
 8009f06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	601a      	str	r2, [r3, #0]
	break;
 8009f0c:	e347      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	601a      	str	r2, [r3, #0]
	break;
 8009f18:	e341      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	8adb      	ldrh	r3, [r3, #22]
 8009f1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	601a      	str	r2, [r3, #0]
	break;
 8009f24:	e33b      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	8b1b      	ldrh	r3, [r3, #24]
 8009f2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	601a      	str	r2, [r3, #0]
	break;
 8009f30:	e335      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	601a      	str	r2, [r3, #0]
	break;
 8009f3c:	e32f      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	601a      	str	r2, [r3, #0]
	break;
 8009f48:	e329      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	f8b3 32f4 	ldrh.w	r3, [r3, #756]	; 0x2f4
 8009f50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	601a      	str	r2, [r3, #0]
	break;
 8009f56:	e322      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8009f5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	601a      	str	r2, [r3, #0]
	break;
 8009f64:	e31b      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	601a      	str	r2, [r3, #0]
	break;
 8009f72:	e314      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8009f7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	601a      	str	r2, [r3, #0]
	break;
 8009f80:	e30d      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 8009f88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	601a      	str	r2, [r3, #0]
	break;
 8009f8e:	e306      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8009f96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	601a      	str	r2, [r3, #0]
	break;
 8009f9c:	e2ff      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 8009fa4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	601a      	str	r2, [r3, #0]
	break;
 8009faa:	e2f8      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 8009fb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	601a      	str	r2, [r3, #0]
	break;
 8009fb8:	e2f1      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 8009fc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	601a      	str	r2, [r3, #0]
	break;
 8009fc6:	e2ea      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8009fce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	601a      	str	r2, [r3, #0]
	break;
 8009fd4:	e2e3      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	f8b3 3318 	ldrh.w	r3, [r3, #792]	; 0x318
 8009fdc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	601a      	str	r2, [r3, #0]
	break;
 8009fe2:	e2dc      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8009fea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	601a      	str	r2, [r3, #0]
	break;
 8009ff0:	e2d5      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	f8b3 331a 	ldrh.w	r3, [r3, #794]	; 0x31a
 8009ff8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	601a      	str	r2, [r3, #0]
	break;
 8009ffe:	e2ce      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 800a006:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	601a      	str	r2, [r3, #0]
	break;
 800a00c:	e2c7      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
 800a014:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	601a      	str	r2, [r3, #0]
	break;
 800a01a:	e2c0      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	f8b3 3254 	ldrh.w	r3, [r3, #596]	; 0x254
 800a022:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	601a      	str	r2, [r3, #0]
	break;
 800a028:	e2b9      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 800a030:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	601a      	str	r2, [r3, #0]
	break;
 800a036:	e2b2      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800a03e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	601a      	str	r2, [r3, #0]
	break;
 800a044:	e2ab      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800a04c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	601a      	str	r2, [r3, #0]
	break;
 800a052:	e2a4      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a05a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	601a      	str	r2, [r3, #0]
	break;
 800a060:	e29d      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a068:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	601a      	str	r2, [r3, #0]
	break;
 800a06e:	e296      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800a076:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	601a      	str	r2, [r3, #0]
	break;
 800a07c:	e28f      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800a084:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	601a      	str	r2, [r3, #0]
	break;
 800a08a:	e288      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800a092:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	601a      	str	r2, [r3, #0]
	break;
 800a098:	e281      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800a0a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	601a      	str	r2, [r3, #0]
	break;
 800a0a6:	e27a      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800a0ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	601a      	str	r2, [r3, #0]
	break;
 800a0b4:	e273      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800a0bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	601a      	str	r2, [r3, #0]
	break;
 800a0c2:	e26c      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800a0ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	601a      	str	r2, [r3, #0]
	break;
 800a0d0:	e265      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800a0d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	601a      	str	r2, [r3, #0]
	break;
 800a0de:	e25e      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800a0e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	601a      	str	r2, [r3, #0]
	break;
 800a0ec:	e257      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800a0f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	601a      	str	r2, [r3, #0]
	break;
 800a0fa:	e250      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800a102:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	601a      	str	r2, [r3, #0]
	break;
 800a108:	e249      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800a110:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	601a      	str	r2, [r3, #0]
	break;
 800a116:	e242      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a11e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	601a      	str	r2, [r3, #0]
	break;
 800a124:	e23b      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a12c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	601a      	str	r2, [r3, #0]
	break;
 800a132:	e234      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800a13a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	601a      	str	r2, [r3, #0]
	break;
 800a140:	e22d      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a148:	f8b3 33dc 	ldrh.w	r3, [r3, #988]	; 0x3dc
 800a14c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	601a      	str	r2, [r3, #0]
	break;
 800a152:	e224      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a15a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a15e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	601a      	str	r2, [r3, #0]
	break;
 800a164:	e21b      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a16c:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 800a170:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	601a      	str	r2, [r3, #0]
	break;
 800a176:	e212      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a17e:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 800a182:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	601a      	str	r2, [r3, #0]
	break;
 800a188:	e209      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a190:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800a194:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	601a      	str	r2, [r3, #0]
	break;
 800a19a:	e200      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1a2:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 800a1a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	601a      	str	r2, [r3, #0]
	break;
 800a1ac:	e1f7      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1b4:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 800a1b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	601a      	str	r2, [r3, #0]
	break;
 800a1be:	e1ee      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c6:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800a1ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	601a      	str	r2, [r3, #0]
	break;
 800a1d0:	e1e5      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d8:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800a1dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	601a      	str	r2, [r3, #0]
	break;
 800a1e2:	e1dc      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ea:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
 800a1ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	601a      	str	r2, [r3, #0]
	break;
 800a1f4:	e1d3      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1fc:	f9b3 3404 	ldrsh.w	r3, [r3, #1028]	; 0x404
 800a200:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	601a      	str	r2, [r3, #0]
	break;
 800a206:	e1ca      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a20e:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800a212:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	601a      	str	r2, [r3, #0]
	break;
 800a218:	e1c1      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a220:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 800a224:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	601a      	str	r2, [r3, #0]
	break;
 800a22a:	e1b8      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a232:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
		*ptuning_parm_value = (int32_t)(
 800a236:	461a      	mov	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	601a      	str	r2, [r3, #0]
	break;
 800a23c:	e1af      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a244:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800a248:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	601a      	str	r2, [r3, #0]
	break;
 800a24e:	e1a6      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a256:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800a25a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	601a      	str	r2, [r3, #0]
	break;
 800a260:	e19d      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a268:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800a26c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	601a      	str	r2, [r3, #0]
	break;
 800a272:	e194      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a27a:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 800a27e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	601a      	str	r2, [r3, #0]
	break;
 800a284:	e18b      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a28c:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800a290:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	601a      	str	r2, [r3, #0]
	break;
 800a296:	e182      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800a29e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	601a      	str	r2, [r3, #0]
	break;
 800a2a4:	e17b      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800a2ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	601a      	str	r2, [r3, #0]
	break;
 800a2b2:	e174      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a2ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	601a      	str	r2, [r3, #0]
	break;
 800a2c0:	e16d      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800a2c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	601a      	str	r2, [r3, #0]
	break;
 800a2ce:	e166      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800a2d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	601a      	str	r2, [r3, #0]
	break;
 800a2dc:	e15f      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800a2e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	601a      	str	r2, [r3, #0]
	break;
 800a2ea:	e158      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800a2f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	601a      	str	r2, [r3, #0]
	break;
 800a2f8:	e151      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a300:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800a304:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	601a      	str	r2, [r3, #0]
	break;
 800a30a:	e148      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 800a312:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	601a      	str	r2, [r3, #0]
	break;
 800a318:	e141      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 800a320:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	601a      	str	r2, [r3, #0]
	break;
 800a326:	e13a      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 800a32e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	601a      	str	r2, [r3, #0]
	break;
 800a334:	e133      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 800a33c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	601a      	str	r2, [r3, #0]
	break;
 800a342:	e12c      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 800a34a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	601a      	str	r2, [r3, #0]
	break;
 800a350:	e125      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 800a358:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	601a      	str	r2, [r3, #0]
	break;
 800a35e:	e11e      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 800a366:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	601a      	str	r2, [r3, #0]
	break;
 800a36c:	e117      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 800a374:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	601a      	str	r2, [r3, #0]
	break;
 800a37a:	e110      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 800a382:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	601a      	str	r2, [r3, #0]
	break;
 800a388:	e109      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 800a390:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	601a      	str	r2, [r3, #0]
	break;
 800a396:	e102      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 800a39e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	601a      	str	r2, [r3, #0]
	break;
 800a3a4:	e0fb      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 800a3ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	601a      	str	r2, [r3, #0]
	break;
 800a3b2:	e0f4      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 800a3ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	601a      	str	r2, [r3, #0]
	break;
 800a3c0:	e0ed      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 800a3c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	601a      	str	r2, [r3, #0]
	break;
 800a3ce:	e0e6      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 800a3d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	601a      	str	r2, [r3, #0]
	break;
 800a3dc:	e0df      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 800a3e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	601a      	str	r2, [r3, #0]
	break;
 800a3ea:	e0d8      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 800a3f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	601a      	str	r2, [r3, #0]
	break;
 800a3f8:	e0d1      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 800a400:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	601a      	str	r2, [r3, #0]
	break;
 800a406:	e0ca      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 800a40e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	601a      	str	r2, [r3, #0]
	break;
 800a414:	e0c3      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 800a41c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	601a      	str	r2, [r3, #0]
	break;
 800a422:	e0bc      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 800a42a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	601a      	str	r2, [r3, #0]
	break;
 800a430:	e0b5      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 800a438:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	601a      	str	r2, [r3, #0]
	break;
 800a43e:	e0ae      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 800a446:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	601a      	str	r2, [r3, #0]
	break;
 800a44c:	e0a7      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 800a454:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	601a      	str	r2, [r3, #0]
	break;
 800a45a:	e0a0      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 800a462:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	601a      	str	r2, [r3, #0]
	break;
 800a468:	e099      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 800a470:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	601a      	str	r2, [r3, #0]
	break;
 800a476:	e092      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 800a47e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	601a      	str	r2, [r3, #0]
	break;
 800a484:	e08b      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 800a48c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	601a      	str	r2, [r3, #0]
	break;
 800a492:	e084      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 800a49a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	601a      	str	r2, [r3, #0]
	break;
 800a4a0:	e07d      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 800a4a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	601a      	str	r2, [r3, #0]
	break;
 800a4ae:	e076      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 800a4b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	601a      	str	r2, [r3, #0]
	break;
 800a4bc:	e06f      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 800a4c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	601a      	str	r2, [r3, #0]
	break;
 800a4ca:	e068      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 800a4d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	601a      	str	r2, [r3, #0]
	break;
 800a4d8:	e061      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 800a4e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	601a      	str	r2, [r3, #0]
	break;
 800a4e6:	e05a      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 800a4ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	601a      	str	r2, [r3, #0]
	break;
 800a4f4:	e053      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 800a4fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	601a      	str	r2, [r3, #0]
	break;
 800a502:	e04c      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 800a50a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	601a      	str	r2, [r3, #0]
	break;
 800a510:	e045      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 800a518:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	601a      	str	r2, [r3, #0]
	break;
 800a51e:	e03e      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 800a526:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	601a      	str	r2, [r3, #0]
	break;
 800a52c:	e037      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 800a534:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	601a      	str	r2, [r3, #0]
	break;
 800a53a:	e030      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 800a542:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	601a      	str	r2, [r3, #0]
	break;
 800a548:	e029      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	f9b3 320e 	ldrsh.w	r3, [r3, #526]	; 0x20e
 800a550:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	601a      	str	r2, [r3, #0]
	break;
 800a556:	e022      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	f9b3 3210 	ldrsh.w	r3, [r3, #528]	; 0x210
 800a55e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	601a      	str	r2, [r3, #0]
	break;
 800a564:	e01b      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	f9b3 3212 	ldrsh.w	r3, [r3, #530]	; 0x212
 800a56c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	601a      	str	r2, [r3, #0]
	break;
 800a572:	e014      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	f9b3 3214 	ldrsh.w	r3, [r3, #532]	; 0x214
 800a57a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	601a      	str	r2, [r3, #0]
	break;
 800a580:	e00d      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_min_signal_secondary_targets;
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a588:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	601a      	str	r2, [r3, #0]
	break;
 800a58e:	e006      	b.n	800a59e <VL53L1_get_tuning_parm+0xe3a>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800a596:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800a598:	23fc      	movs	r3, #252	; 0xfc
 800a59a:	77fb      	strb	r3, [r7, #31]
	break;
 800a59c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800a59e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3724      	adds	r7, #36	; 0x24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop

0800a5b0 <VL53L1_dynamic_xtalk_correction_enable>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_enable(
	VL53L1_DEV                          Dev
	)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	3318      	adds	r3, #24
 800a5c0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 800a5ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr

0800a5de <VL53L1_dynamic_xtalk_correction_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_disable(
	VL53L1_DEV                          Dev
	)
{
 800a5de:	b480      	push	{r7}
 800a5e0:	b085      	sub	sp, #20
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	3318      	adds	r3, #24
 800a5ee:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 800a5fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a600:	4618      	mov	r0, r3
 800a602:	3714      	adds	r7, #20
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <VL53L1_dynamic_xtalk_correction_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a614:	2300      	movs	r3, #0
 800a616:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	3318      	adds	r3, #24
 800a61c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a624:	2201      	movs	r2, #1
 800a626:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 800a62a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3714      	adds	r7, #20
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <VL53L1_dynamic_xtalk_correction_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 800a63a:	b480      	push	{r7}
 800a63c:	b085      	sub	sp, #20
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a642:	2300      	movs	r3, #0
 800a644:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	3318      	adds	r3, #24
 800a64a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a652:	2200      	movs	r2, #0
 800a654:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 800a658:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3714      	adds	r7, #20
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a670:	2300      	movs	r3, #0
 800a672:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	3318      	adds	r3, #24
 800a678:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a680:	2201      	movs	r2, #1
 800a682:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 800a686:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr

0800a696 <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 800a696:	b480      	push	{r7}
 800a698:	b085      	sub	sp, #20
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3318      	adds	r3, #24
 800a6a6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 800a6b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3714      	adds	r7, #20
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <VL53L1_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2208      	movs	r2, #8
 800a6d4:	701a      	strb	r2, [r3, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	220b      	movs	r2, #11
 800a6da:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a6e2:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800a6ea:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800a6f2:	815a      	strh	r2, [r3, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800a6fa:	819a      	strh	r2, [r3, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800a6fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3714      	adds	r7, #20
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <VL53L1_init_ssc_config_struct>:


VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a714:	2300      	movs	r3, #0
 800a716:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	701a      	strb	r2, [r3, #0]


	pdata->VL53L1_p_009 =
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2212      	movs	r2, #18
 800a722:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	220f      	movs	r2, #15
 800a728:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2202      	movs	r2, #2
 800a72e:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800a736:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	220c      	movs	r2, #12
 800a73c:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800a73e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3714      	adds	r7, #20
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b084      	sub	sp, #16
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
 800a756:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a758:	2300      	movs	r3, #0
 800a75a:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	895b      	ldrh	r3, [r3, #10]
 800a760:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	895b      	ldrh	r3, [r3, #10]
 800a77e:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a79e:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	2240      	movs	r2, #64	; 0x40
 800a7aa:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10d      	bne.n	800a7d0 <VL53L1_init_xtalk_config_struct+0x82>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d108      	bne.n	800a7d0 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d103      	bne.n	800a7d0 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	741a      	strb	r2, [r3, #16]
 800a7ce:	e002      	b.n	800a7d6 <VL53L1_init_xtalk_config_struct+0x88>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800a7d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d114      	bne.n	800a808 <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d110      	bne.n	800a808 <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53L1_calc_range_ignore_threshold(
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	6818      	ldr	r0, [r3, #0]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	7d9b      	ldrb	r3, [r3, #22]
 800a7fa:	f003 f879 	bl	800d8f0 <VL53L1_calc_range_ignore_threshold>
 800a7fe:	4603      	mov	r3, r0
 800a800:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	831a      	strh	r2, [r3, #24]
 800a806:	e002      	b.n	800a80e <VL53L1_init_xtalk_config_struct+0xc0>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	2200      	movs	r2, #0
 800a80c:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	f64f 72ce 	movw	r2, #65486	; 0xffce
 800a814:	835a      	strh	r2, [r3, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	2232      	movs	r2, #50	; 0x32
 800a81a:	839a      	strh	r2, [r3, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800a822:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	228c      	movs	r2, #140	; 0x8c
 800a828:	841a      	strh	r2, [r3, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800a82a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <VL53L1_init_xtalk_extract_config_struct>:

VL53L1_Error VL53L1_init_xtalk_extract_config_struct(
	VL53L1_xtalkextract_config_t   *pdata)
{
 800a836:	b480      	push	{r7}
 800a838:	b085      	sub	sp, #20
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a83e:	2300      	movs	r3, #0
 800a840:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800a848:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a850:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2207      	movs	r2, #7
 800a856:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a85e:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f242 7210 	movw	r2, #10000	; 0x2710
 800a866:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f64f 72ba 	movw	r2, #65466	; 0xffba
 800a86e:	825a      	strh	r2, [r3, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2246      	movs	r2, #70	; 0x46
 800a874:	829a      	strh	r2, [r3, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800a87c:	82da      	strh	r2, [r3, #22]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	228c      	movs	r2, #140	; 0x8c
 800a882:	831a      	strh	r2, [r3, #24]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800a884:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3714      	adds	r7, #20
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <VL53L1_init_offset_cal_config_struct>:


VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a89c:	2300      	movs	r3, #0
 800a89e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800a8a6:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a8ae:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800a8b6:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800a8be:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2208      	movs	r2, #8
 800a8c4:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2228      	movs	r2, #40	; 0x28
 800a8ca:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2209      	movs	r2, #9
 800a8d0:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800a8d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3714      	adds	r7, #20
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <VL53L1_init_zone_cal_config_struct>:

VL53L1_Error VL53L1_init_zone_cal_config_struct(
	VL53L1_zonecal_config_t   *pdata)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b085      	sub	sp, #20
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800a8f4:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a8fc:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a904:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a90c:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2210      	movs	r2, #16
 800a912:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2208      	movs	r2, #8
 800a918:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800a91a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <VL53L1_init_hist_post_process_config_struct>:


VL53L1_Error VL53L1_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53L1_hist_post_process_config_t   *pdata)
{
 800a92a:	b480      	push	{r7}
 800a92c:	b085      	sub	sp, #20
 800a92e:	af00      	add	r7, sp, #0
 800a930:	4603      	mov	r3, r0
 800a932:	6039      	str	r1, [r7, #0]
 800a934:	71fb      	strb	r3, [r7, #7]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a936:	2300      	movs	r3, #0
 800a938:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	2204      	movs	r2, #4
 800a93e:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	2201      	movs	r2, #1
 800a944:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2201      	movs	r2, #1
 800a94a:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	2202      	movs	r2, #2
 800a950:	70da      	strb	r2, [r3, #3]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	2201      	movs	r2, #1
 800a956:	711a      	strb	r2, [r3, #4]
			VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	2250      	movs	r2, #80	; 0x50
 800a95c:	715a      	strb	r2, [r3, #5]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2270      	movs	r2, #112	; 0x70
 800a962:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	f241 023d 	movw	r2, #4157	; 0x103d
 800a96a:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	2210      	movs	r2, #16
 800a970:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	2232      	movs	r2, #50	; 0x32
 800a976:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	2264      	movs	r2, #100	; 0x64
 800a97c:	615a      	str	r2, [r3, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	2201      	movs	r2, #1
 800a982:	761a      	strb	r2, [r3, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	22a0      	movs	r2, #160	; 0xa0
 800a988:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	2200      	movs	r2, #0
 800a98e:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	f240 72c3 	movw	r2, #1987	; 0x7c3
 800a996:	83da      	strh	r2, [r3, #30]
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	2208      	movs	r2, #8
 800a99c:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2288      	movs	r2, #136	; 0x88
 800a9a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	2208      	movs	r2, #8
 800a9ac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9be:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	22fa      	movs	r2, #250	; 0xfa
 800a9c4:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	79fa      	ldrb	r2, [r7, #7]
 800a9ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	f64f 72ce 	movw	r2, #65486	; 0xffce
 800a9d4:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	2232      	movs	r2, #50	; 0x32
 800a9da:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800a9e2:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	228c      	movs	r2, #140	; 0x8c
 800a9e8:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2250      	movs	r2, #80	; 0x50
 800a9ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2232      	movs	r2, #50	; 0x32
 800a9f6:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 800a9f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <VL53L1_init_tuning_parm_storage_struct>:
}


VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800aa10:	2300      	movs	r3, #0
 800aa12:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2220      	movs	r2, #32
 800aa18:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	220e      	movs	r2, #14
 800aa1e:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f642 7294 	movw	r2, #12180	; 0x2f94
 800aa26:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	220e      	movs	r2, #14
 800aa2c:	719a      	strb	r2, [r3, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	220a      	movs	r2, #10
 800aa32:	71da      	strb	r2, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2206      	movs	r2, #6
 800aa38:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	220e      	movs	r2, #14
 800aa3e:	725a      	strb	r2, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	220a      	movs	r2, #10
 800aa44:	729a      	strb	r2, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2206      	movs	r2, #6
 800aa4a:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2209      	movs	r2, #9
 800aa50:	731a      	strb	r2, [r3, #12]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2205      	movs	r2, #5
 800aa56:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2203      	movs	r2, #3
 800aa5c:	739a      	strb	r2, [r3, #14]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2206      	movs	r2, #6
 800aa62:	73da      	strb	r2, [r3, #15]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2206      	movs	r2, #6
 800aa68:	741a      	strb	r2, [r3, #16]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2206      	movs	r2, #6
 800aa6e:	745a      	strb	r2, [r3, #17]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2202      	movs	r2, #2
 800aa74:	749a      	strb	r2, [r3, #18]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2221      	movs	r2, #33	; 0x21
 800aa7a:	74da      	strb	r2, [r3, #19]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	223c      	movs	r2, #60	; 0x3c
 800aa8c:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	223c      	movs	r2, #60	; 0x3c
 800aa92:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	223c      	movs	r2, #60	; 0x3c
 800aa98:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2280      	movs	r2, #128	; 0x80
 800aa9e:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2280      	movs	r2, #128	; 0x80
 800aaa4:	841a      	strh	r2, [r3, #32]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2280      	movs	r2, #128	; 0x80
 800aaaa:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2208      	movs	r2, #8
 800aab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2210      	movs	r2, #16
 800aab8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2202      	movs	r2, #2
 800aac8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2202      	movs	r2, #2
 800aad8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800aaea:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800aaf2:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800aafa:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800ab02:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab0a:	639a      	str	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f643 2298 	movw	r2, #15000	; 0x3a98
 800ab12:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f242 3228 	movw	r2, #9000	; 0x2328
 800ab1a:	641a      	str	r2, [r3, #64]	; 0x40
	VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f241 7270 	movw	r2, #6000	; 0x1770
 800ab22:	645a      	str	r2, [r3, #68]	; 0x44
	VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f643 2298 	movw	r2, #15000	; 0x3a98
 800ab2a:	649a      	str	r2, [r3, #72]	; 0x48
	VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f242 3228 	movw	r2, #9000	; 0x2328
 800ab32:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f241 7270 	movw	r2, #6000	; 0x1770
 800ab3a:	651a      	str	r2, [r3, #80]	; 0x50
		VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab42:	655a      	str	r2, [r3, #84]	; 0x54
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ab4a:	659a      	str	r2, [r3, #88]	; 0x58
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ab52:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ab5a:	661a      	str	r2, [r3, #96]	; 0x60
			VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ab62:	665a      	str	r2, [r3, #100]	; 0x64
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f24f 6218 	movw	r2, #63000	; 0xf618
 800ab6a:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800ab72:	671a      	str	r2, [r3, #112]	; 0x70
		VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800ab7a:	675a      	str	r2, [r3, #116]	; 0x74
			VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800ab82:	679a      	str	r2, [r3, #120]	; 0x78
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	669a      	str	r2, [r3, #104]	; 0x68
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800ab90:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ab98:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53L1_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f242 7210 	movw	r2, #10000	; 0x2710
 800abb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2206      	movs	r2, #6
 800abb8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	pdata->tp_uwr_enable =
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53L1_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800abca:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f640 22be 	movw	r2, #2750	; 0xabe
 800abd4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	22fa      	movs	r2, #250	; 0xfa
 800abdc:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800abe6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800abf0:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800abfa:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800ac04:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800ac0e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f64f 7238 	movw	r2, #65336	; 0xff38
 800ac18:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	22c8      	movs	r2, #200	; 0xc8
 800ac20:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_z_6_min =
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	22fa      	movs	r2, #250	; 0xfa
 800ac28:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN_DEFAULT;
	pdata->tp_uwr_med_z_6_max =
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800ac32:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f640 1206 	movw	r2, #2310	; 0x906
 800ac3c:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f640 1206 	movw	r2, #2310	; 0x906
 800ac4e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f640 421c 	movw	r2, #3100	; 0xc1c
 800ac58:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 800ac62:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f640 421c 	movw	r2, #3100	; 0xc1c
 800ac6c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 800ac76:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f641 022e 	movw	r2, #6190	; 0x182e
 800ac80:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangea =
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f641 3230 	movw	r2, #6960	; 0x1b30
 800ac9a:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f641 022e 	movw	r2, #6190	; 0x182e
 800aca4:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	22fa      	movs	r2, #250	; 0xfa
 800acac:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800acb6:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f640 42b2 	movw	r2, #3250	; 0xcb2
 800acc0:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f241 1294 	movw	r2, #4500	; 0x1194
 800acca:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f64f 7238 	movw	r2, #65336	; 0xff38
 800acd4:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	22c8      	movs	r2, #200	; 0xc8
 800acdc:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f640 3222 	movw	r2, #2850	; 0xb22
 800ace6:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f640 42e4 	movw	r2, #3300	; 0xce4
 800acf0:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f640 721e 	movw	r2, #3870	; 0xf1e
 800ad0a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f241 222a 	movw	r2, #4650	; 0x122a
 800ad14:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f640 720a 	movw	r2, #3850	; 0xf0a
 800ad1e:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f641 6214 	movw	r2, #7700	; 0x1e14
 800ad40:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 800ad4a:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_min_signal_secondary_targets =
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f641 1288 	movw	r2, #6536	; 0x1988
 800ad64:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS_DEFAULT;
	LOG_FUNCTION_END(status);

	return status;
 800ad68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3714      	adds	r7, #20
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <VL53L1_init_hist_gen3_dmax_config_struct>:


VL53L1_Error VL53L1_init_hist_gen3_dmax_config_struct(
	VL53L1_hist_gen3_dmax_config_t   *pdata)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b085      	sub	sp, #20
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ad80:	2300      	movs	r3, #0
 800ad82:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800ad8a:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2238      	movs	r2, #56	; 0x38
 800ad90:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2220      	movs	r2, #32
 800ad96:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2270      	movs	r2, #112	; 0x70
 800ad9c:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2210      	movs	r2, #16
 800ada2:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2264      	movs	r2, #100	; 0x64
 800ada8:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adb0:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	220f      	movs	r2, #15
 800adb6:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2234      	movs	r2, #52	; 0x34
 800adbc:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	22c8      	movs	r2, #200	; 0xc8
 800adc2:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800adca:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800add2:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800add4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b087      	sub	sp, #28
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
 800adf0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800adf2:	2300      	movs	r3, #0
 800adf4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800adfc:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2200      	movs	r2, #0
 800ae08:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2200      	movs	r2, #0
 800ae26:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2200      	movs	r2, #0
 800ae38:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2211      	movs	r2, #17
 800ae3e:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2202      	movs	r2, #2
 800ae44:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2202      	movs	r2, #2
 800ae50:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2208      	movs	r2, #8
 800ae56:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800ae5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae60:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800ae68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800ae72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae74:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2200      	movs	r2, #0
 800ae86:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2200      	movs	r2, #0
 800ae92:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	22ff      	movs	r2, #255	; 0xff
 800ae98:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800ae9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9c:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800aea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea4:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2220      	movs	r2, #32
 800aecc:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	220b      	movs	r2, #11
 800aed2:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800aed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed6:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2202      	movs	r2, #2
 800aee0:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	220d      	movs	r2, #13
 800aee6:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800aee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeea:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2201      	movs	r2, #1
 800aefa:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800af0e:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2238      	movs	r2, #56	; 0x38
 800af1a:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	22ff      	movs	r2, #255	; 0xff
 800af20:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	2200      	movs	r2, #0
 800af2c:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	221a      	movs	r2, #26
 800af32:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	2200      	movs	r2, #0
 800af38:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	2220      	movs	r2, #32
 800af3e:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	2201      	movs	r2, #1
 800af44:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	22cc      	movs	r2, #204	; 0xcc
 800af4a:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	220b      	movs	r2, #11
 800af50:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	2201      	movs	r2, #1
 800af56:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	22f5      	movs	r2, #245	; 0xf5
 800af5c:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	2209      	movs	r2, #9
 800af62:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800af64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af66:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800af6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6e:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	2208      	movs	r2, #8
 800af78:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	2278      	movs	r2, #120	; 0x78
 800af7e:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	2200      	movs	r2, #0
 800af84:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	2200      	movs	r2, #0
 800af8a:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	2207      	movs	r2, #7
 800af90:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2221      	movs	r2, #33	; 0x21
 800af96:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	2243      	movs	r2, #67	; 0x43
 800af9c:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2210      	movs	r2, #16
 800afa2:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	2232      	movs	r2, #50	; 0x32
 800afa8:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	2254      	movs	r2, #84	; 0x54
 800afae:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	2207      	movs	r2, #7
 800afb4:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	2221      	movs	r2, #33	; 0x21
 800afba:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	2243      	movs	r2, #67	; 0x43
 800afc0:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	2210      	movs	r2, #16
 800afc6:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	2202      	movs	r2, #2
 800afcc:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2243      	movs	r2, #67	; 0x43
 800afd2:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	2205      	movs	r2, #5
 800afd8:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	2200      	movs	r2, #0
 800afde:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	2207      	movs	r2, #7
 800afe4:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	2221      	movs	r2, #33	; 0x21
 800afea:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	2243      	movs	r2, #67	; 0x43
 800aff0:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	2210      	movs	r2, #16
 800aff6:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	2232      	movs	r2, #50	; 0x32
 800affc:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	2254      	movs	r2, #84	; 0x54
 800b002:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b00a:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b012:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	2200      	movs	r2, #0
 800b018:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 800b01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01c:	2210      	movs	r2, #16
 800b01e:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 800b020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b022:	2200      	movs	r2, #0
 800b024:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 800b026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b028:	220f      	movs	r2, #15
 800b02a:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 800b02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02e:	220f      	movs	r2, #15
 800b030:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 800b032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b034:	2208      	movs	r2, #8
 800b036:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 800b038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03a:	2208      	movs	r2, #8
 800b03c:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 800b03e:	6a3b      	ldr	r3, [r7, #32]
 800b040:	2201      	movs	r2, #1
 800b042:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	2200      	movs	r2, #0
 800b048:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 800b04a:	6a3b      	ldr	r3, [r7, #32]
 800b04c:	2200      	movs	r2, #0
 800b04e:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 800b050:	6a3b      	ldr	r3, [r7, #32]
 800b052:	2200      	movs	r2, #0
 800b054:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800b056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b058:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 800b05c:	6a3b      	ldr	r3, [r7, #32]
 800b05e:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 800b060:	6a3b      	ldr	r3, [r7, #32]
 800b062:	220b      	movs	r2, #11
 800b064:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 800b066:	6a3b      	ldr	r3, [r7, #32]
 800b068:	2209      	movs	r2, #9
 800b06a:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800b06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06e:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800b070:	6a3b      	ldr	r3, [r7, #32]
 800b072:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 800b074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b076:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800b078:	6a3b      	ldr	r3, [r7, #32]
 800b07a:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 800b07c:	6a3b      	ldr	r3, [r7, #32]
 800b07e:	2201      	movs	r2, #1
 800b080:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800b082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b084:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 800b088:	6a3b      	ldr	r3, [r7, #32]
 800b08a:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800b08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 800b092:	6a3b      	ldr	r3, [r7, #32]
 800b094:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 800b096:	6a3b      	ldr	r3, [r7, #32]
 800b098:	22c7      	movs	r2, #199	; 0xc7
 800b09a:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800b09c:	6a3b      	ldr	r3, [r7, #32]
 800b09e:	22ff      	movs	r2, #255	; 0xff
 800b0a0:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 800b0a2:	6a3b      	ldr	r3, [r7, #32]
 800b0a4:	22db      	movs	r2, #219	; 0xdb
 800b0a6:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 800b0a8:	6a3b      	ldr	r3, [r7, #32]
 800b0aa:	2202      	movs	r2, #2
 800b0ac:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 800b0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 800b0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	2201      	movs	r2, #1
 800b0be:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c2:	2221      	movs	r2, #33	; 0x21
 800b0c4:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD |
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800b0c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	371c      	adds	r7, #28
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr

0800b0d6 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b08a      	sub	sp, #40	; 0x28
 800b0da:	af04      	add	r7, sp, #16
 800b0dc:	60f8      	str	r0, [r7, #12]
 800b0de:	60b9      	str	r1, [r7, #8]
 800b0e0:	607a      	str	r2, [r7, #4]
 800b0e2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ea:	9303      	str	r3, [sp, #12]
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	9302      	str	r3, [sp, #8]
 800b0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f2:	9301      	str	r3, [sp, #4]
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	68b9      	ldr	r1, [r7, #8]
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f7ff fe70 	bl	800ade4 <VL53L1_preset_mode_standard_ranging>
 800b104:	4603      	mov	r3, r0
 800b106:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b108:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d121      	bne.n	800b154 <VL53L1_preset_mode_standard_ranging_short_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x07;
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	2207      	movs	r2, #7
 800b114:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	2205      	movs	r2, #5
 800b11a:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800b11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11e:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__sigma_thresh                  =
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	2208      	movs	r2, #8
 800b130:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2238      	movs	r2, #56	; 0x38
 800b136:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x07;
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	2207      	movs	r2, #7
 800b13c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 800b13e:	6a3b      	ldr	r3, [r7, #32]
 800b140:	2205      	movs	r2, #5
 800b142:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800b144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b146:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800b148:	6a3b      	ldr	r3, [r7, #32]
 800b14a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800b14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14e:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800b150:	6a3b      	ldr	r3, [r7, #32]
 800b152:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b154:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3718      	adds	r7, #24
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b08a      	sub	sp, #40	; 0x28
 800b164:	af04      	add	r7, sp, #16
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
 800b16c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b16e:	2300      	movs	r3, #0
 800b170:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b174:	9303      	str	r3, [sp, #12]
 800b176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b178:	9302      	str	r3, [sp, #8]
 800b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17c:	9301      	str	r3, [sp, #4]
 800b17e:	6a3b      	ldr	r3, [r7, #32]
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	68b9      	ldr	r1, [r7, #8]
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	f7ff fe2b 	bl	800ade4 <VL53L1_preset_mode_standard_ranging>
 800b18e:	4603      	mov	r3, r0
 800b190:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b192:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d121      	bne.n	800b1de <VL53L1_preset_mode_standard_ranging_long_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x0F;
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	220f      	movs	r2, #15
 800b19e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	220d      	movs	r2, #13
 800b1a4:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800b1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a8:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__sigma_thresh                  =
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800b1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b0:	8bda      	ldrh	r2, [r3, #30]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	2208      	movs	r2, #8
 800b1ba:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	22b8      	movs	r2, #184	; 0xb8
 800b1c0:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x0F;
 800b1c2:	6a3b      	ldr	r3, [r7, #32]
 800b1c4:	220f      	movs	r2, #15
 800b1c6:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 800b1c8:	6a3b      	ldr	r3, [r7, #32]
 800b1ca:	220d      	movs	r2, #13
 800b1cc:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800b1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d0:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800b1d2:	6a3b      	ldr	r3, [r7, #32]
 800b1d4:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800b1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d8:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800b1da:	6a3b      	ldr	r3, [r7, #32]
 800b1dc:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b1de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3718      	adds	r7, #24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b08a      	sub	sp, #40	; 0x28
 800b1ee:	af04      	add	r7, sp, #16
 800b1f0:	60f8      	str	r0, [r7, #12]
 800b1f2:	60b9      	str	r1, [r7, #8]
 800b1f4:	607a      	str	r2, [r7, #4]
 800b1f6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fe:	9303      	str	r3, [sp, #12]
 800b200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b202:	9302      	str	r3, [sp, #8]
 800b204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b206:	9301      	str	r3, [sp, #4]
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	9300      	str	r3, [sp, #0]
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	68b9      	ldr	r1, [r7, #8]
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f7ff fde6 	bl	800ade4 <VL53L1_preset_mode_standard_ranging>
 800b218:	4603      	mov	r3, r0
 800b21a:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b21c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d105      	bne.n	800b230 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2202      	movs	r2, #2
 800b228:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	223b      	movs	r2, #59	; 0x3b
 800b22e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b230:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3718      	adds	r7, #24
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b08a      	sub	sp, #40	; 0x28
 800b240:	af04      	add	r7, sp, #16
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
 800b248:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b24a:	2300      	movs	r3, #0
 800b24c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b250:	9303      	str	r3, [sp, #12]
 800b252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b254:	9302      	str	r3, [sp, #8]
 800b256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b258:	9301      	str	r3, [sp, #4]
 800b25a:	6a3b      	ldr	r3, [r7, #32]
 800b25c:	9300      	str	r3, [sp, #0]
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	68b9      	ldr	r1, [r7, #8]
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f7ff fdbd 	bl	800ade4 <VL53L1_preset_mode_standard_ranging>
 800b26a:	4603      	mov	r3, r0
 800b26c:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b26e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d105      	bne.n	800b282 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2202      	movs	r2, #2
 800b27a:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 800b27c:	6a3b      	ldr	r3, [r7, #32]
 800b27e:	225b      	movs	r2, #91	; 0x5b
 800b280:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b282:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b286:	4618      	mov	r0, r3
 800b288:	3718      	adds	r7, #24
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b08a      	sub	sp, #40	; 0x28
 800b292:	af04      	add	r7, sp, #16
 800b294:	60f8      	str	r0, [r7, #12]
 800b296:	60b9      	str	r1, [r7, #8]
 800b298:	607a      	str	r2, [r7, #4]
 800b29a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b29c:	2300      	movs	r3, #0
 800b29e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a2:	9303      	str	r3, [sp, #12]
 800b2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a6:	9302      	str	r3, [sp, #8]
 800b2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2aa:	9301      	str	r3, [sp, #4]
 800b2ac:	6a3b      	ldr	r3, [r7, #32]
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	68b9      	ldr	r1, [r7, #8]
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f7ff fd94 	bl	800ade4 <VL53L1_preset_mode_standard_ranging>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b2c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d11a      	bne.n	800b2fe <VL53L1_preset_mode_timed_ranging+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800b2c8:	6a3b      	ldr	r3, [r7, #32]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	749a      	strb	r2, [r3, #18]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	22b1      	movs	r2, #177	; 0xb1
 800b2d8:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	22d4      	movs	r2, #212	; 0xd4
 800b2e4:	721a      	strb	r2, [r3, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b2ec:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800b2f4:	6a3b      	ldr	r3, [r7, #32]
 800b2f6:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fa:	2240      	movs	r2, #64	; 0x40
 800b2fc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b2fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3718      	adds	r7, #24
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b08a      	sub	sp, #40	; 0x28
 800b30e:	af04      	add	r7, sp, #16
 800b310:	60f8      	str	r0, [r7, #12]
 800b312:	60b9      	str	r1, [r7, #8]
 800b314:	607a      	str	r2, [r7, #4]
 800b316:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b318:	2300      	movs	r3, #0
 800b31a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 800b31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31e:	9303      	str	r3, [sp, #12]
 800b320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b322:	9302      	str	r3, [sp, #8]
 800b324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b326:	9301      	str	r3, [sp, #4]
 800b328:	6a3b      	ldr	r3, [r7, #32]
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	68b9      	ldr	r1, [r7, #8]
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f7ff fecf 	bl	800b0d6 <VL53L1_preset_mode_standard_ranging_short_range>
 800b338:	4603      	mov	r3, r0
 800b33a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b33c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d11a      	bne.n	800b37a <VL53L1_preset_mode_timed_ranging_short_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800b344:	6a3b      	ldr	r3, [r7, #32]
 800b346:	2200      	movs	r2, #0
 800b348:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	2201      	movs	r2, #1
 800b34e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	2284      	movs	r2, #132	; 0x84
 800b354:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2201      	movs	r2, #1
 800b35a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	22b1      	movs	r2, #177	; 0xb1
 800b360:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b368:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800b370:	6a3b      	ldr	r3, [r7, #32]
 800b372:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800b374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b376:	2240      	movs	r2, #64	; 0x40
 800b378:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b37a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b08a      	sub	sp, #40	; 0x28
 800b38a:	af04      	add	r7, sp, #16
 800b38c:	60f8      	str	r0, [r7, #12]
 800b38e:	60b9      	str	r1, [r7, #8]
 800b390:	607a      	str	r2, [r7, #4]
 800b392:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b394:	2300      	movs	r3, #0
 800b396:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 800b398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39a:	9303      	str	r3, [sp, #12]
 800b39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39e:	9302      	str	r3, [sp, #8]
 800b3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a2:	9301      	str	r3, [sp, #4]
 800b3a4:	6a3b      	ldr	r3, [r7, #32]
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	68b9      	ldr	r1, [r7, #8]
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f7ff fed6 	bl	800b160 <VL53L1_preset_mode_standard_ranging_long_range>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b3b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d11a      	bne.n	800b3f6 <VL53L1_preset_mode_timed_ranging_long_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800b3c0:	6a3b      	ldr	r3, [r7, #32]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	2297      	movs	r2, #151	; 0x97
 800b3d0:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	22b1      	movs	r2, #177	; 0xb1
 800b3dc:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b3e4:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f2:	2240      	movs	r2, #64	; 0x40
 800b3f4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b3f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3718      	adds	r7, #24
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b08a      	sub	sp, #40	; 0x28
 800b406:	af04      	add	r7, sp, #16
 800b408:	60f8      	str	r0, [r7, #12]
 800b40a:	60b9      	str	r1, [r7, #8]
 800b40c:	607a      	str	r2, [r7, #4]
 800b40e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b410:	2300      	movs	r3, #0
 800b412:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 800b414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b416:	9303      	str	r3, [sp, #12]
 800b418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41a:	9302      	str	r3, [sp, #8]
 800b41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41e:	9301      	str	r3, [sp, #4]
 800b420:	6a3b      	ldr	r3, [r7, #32]
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	68b9      	ldr	r1, [r7, #8]
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f7ff ff2f 	bl	800b28e <VL53L1_preset_mode_timed_ranging>
 800b430:	4603      	mov	r3, r0
 800b432:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b434:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d106      	bne.n	800b44a <VL53L1_preset_mode_low_power_auto_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800b43c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b43e:	6a39      	ldr	r1, [r7, #32]
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f005 f978 	bl	8010736 <VL53L1_config_low_power_auto_mode>
 800b446:	4603      	mov	r3, r0
 800b448:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b44a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3718      	adds	r7, #24
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b08a      	sub	sp, #40	; 0x28
 800b45a:	af04      	add	r7, sp, #16
 800b45c:	60f8      	str	r0, [r7, #12]
 800b45e:	60b9      	str	r1, [r7, #8]
 800b460:	607a      	str	r2, [r7, #4]
 800b462:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b464:	2300      	movs	r3, #0
 800b466:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 800b468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46a:	9303      	str	r3, [sp, #12]
 800b46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b46e:	9302      	str	r3, [sp, #8]
 800b470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b472:	9301      	str	r3, [sp, #4]
 800b474:	6a3b      	ldr	r3, [r7, #32]
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	68b9      	ldr	r1, [r7, #8]
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f7ff ff43 	bl	800b30a <VL53L1_preset_mode_timed_ranging_short_range>
 800b484:	4603      	mov	r3, r0
 800b486:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b488:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d106      	bne.n	800b49e <VL53L1_preset_mode_low_power_auto_short_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800b490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b492:	6a39      	ldr	r1, [r7, #32]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f005 f94e 	bl	8010736 <VL53L1_config_low_power_auto_mode>
 800b49a:	4603      	mov	r3, r0
 800b49c:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b49e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3718      	adds	r7, #24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b08a      	sub	sp, #40	; 0x28
 800b4ae:	af04      	add	r7, sp, #16
 800b4b0:	60f8      	str	r0, [r7, #12]
 800b4b2:	60b9      	str	r1, [r7, #8]
 800b4b4:	607a      	str	r2, [r7, #4]
 800b4b6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 800b4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4be:	9303      	str	r3, [sp, #12]
 800b4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c2:	9302      	str	r3, [sp, #8]
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c6:	9301      	str	r3, [sp, #4]
 800b4c8:	6a3b      	ldr	r3, [r7, #32]
 800b4ca:	9300      	str	r3, [sp, #0]
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	68b9      	ldr	r1, [r7, #8]
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f7ff ff57 	bl	800b386 <VL53L1_preset_mode_timed_ranging_long_range>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b4dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d106      	bne.n	800b4f2 <VL53L1_preset_mode_low_power_auto_long_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800b4e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4e6:	6a39      	ldr	r1, [r7, #32]
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f005 f924 	bl	8010736 <VL53L1_config_low_power_auto_mode>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b4f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3718      	adds	r7, #24
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b08a      	sub	sp, #40	; 0x28
 800b502:	af04      	add	r7, sp, #16
 800b504:	60f8      	str	r0, [r7, #12]
 800b506:	60b9      	str	r1, [r7, #8]
 800b508:	607a      	str	r2, [r7, #4]
 800b50a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b50c:	2300      	movs	r3, #0
 800b50e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b512:	9303      	str	r3, [sp, #12]
 800b514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b516:	9302      	str	r3, [sp, #8]
 800b518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51a:	9301      	str	r3, [sp, #4]
 800b51c:	6a3b      	ldr	r3, [r7, #32]
 800b51e:	9300      	str	r3, [sp, #0]
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	68b9      	ldr	r1, [r7, #8]
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f7ff fc5c 	bl	800ade4 <VL53L1_preset_mode_standard_ranging>
 800b52c:	4603      	mov	r3, r0
 800b52e:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b530:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d116      	bne.n	800b566 <VL53L1_preset_mode_singleshot_ranging+0x68>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800b538:	6a3b      	ldr	r3, [r7, #32]
 800b53a:	2200      	movs	r2, #0
 800b53c:	749a      	strb	r2, [r3, #18]




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	2200      	movs	r2, #0
 800b542:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	22b1      	movs	r2, #177	; 0xb1
 800b548:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	2200      	movs	r2, #0
 800b54e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	22d4      	movs	r2, #212	; 0xd4
 800b554:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b558:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800b55c:	6a3b      	ldr	r3, [r7, #32]
 800b55e:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800b560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b562:	2210      	movs	r2, #16
 800b564:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b566:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3718      	adds	r7, #24
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <VL53L1_preset_mode_histogram_ranging>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b572:	b580      	push	{r7, lr}
 800b574:	b090      	sub	sp, #64	; 0x40
 800b576:	af0a      	add	r7, sp, #40	; 0x28
 800b578:	60f8      	str	r0, [r7, #12]
 800b57a:	60b9      	str	r1, [r7, #8]
 800b57c:	607a      	str	r2, [r7, #4]
 800b57e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b580:	2300      	movs	r3, #0
 800b582:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_standard_ranging(
 800b584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b586:	9303      	str	r3, [sp, #12]
 800b588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58a:	9302      	str	r3, [sp, #8]
 800b58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58e:	9301      	str	r3, [sp, #4]
 800b590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	6a3b      	ldr	r3, [r7, #32]
 800b596:	683a      	ldr	r2, [r7, #0]
 800b598:	6879      	ldr	r1, [r7, #4]
 800b59a:	68b8      	ldr	r0, [r7, #8]
 800b59c:	f7ff fc22 	bl	800ade4 <VL53L1_preset_mode_standard_ranging>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b5a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d171      	bne.n	800b690 <VL53L1_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800b5b2:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	9308      	str	r3, [sp, #32]
 800b5b8:	2305      	movs	r3, #5
 800b5ba:	9307      	str	r3, [sp, #28]
 800b5bc:	2304      	movs	r3, #4
 800b5be:	9306      	str	r3, [sp, #24]
 800b5c0:	2303      	movs	r3, #3
 800b5c2:	9305      	str	r3, [sp, #20]
 800b5c4:	2302      	movs	r3, #2
 800b5c6:	9304      	str	r3, [sp, #16]
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	9303      	str	r3, [sp, #12]
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	9302      	str	r3, [sp, #8]
 800b5d0:	2304      	movs	r3, #4
 800b5d2:	9301      	str	r3, [sp, #4]
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	2302      	movs	r3, #2
 800b5da:	2201      	movs	r2, #1
 800b5dc:	2100      	movs	r1, #0
 800b5de:	2007      	movs	r0, #7
 800b5e0:	f001 fe1b 	bl	800d21a <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800b5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e6:	3302      	adds	r3, #2
 800b5e8:	9308      	str	r3, [sp, #32]
 800b5ea:	2305      	movs	r3, #5
 800b5ec:	9307      	str	r3, [sp, #28]
 800b5ee:	2304      	movs	r3, #4
 800b5f0:	9306      	str	r3, [sp, #24]
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	9305      	str	r3, [sp, #20]
 800b5f6:	2302      	movs	r3, #2
 800b5f8:	9304      	str	r3, [sp, #16]
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	9303      	str	r3, [sp, #12]
 800b5fe:	2300      	movs	r3, #0
 800b600:	9302      	str	r3, [sp, #8]
 800b602:	2304      	movs	r3, #4
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	2303      	movs	r3, #3
 800b608:	9300      	str	r3, [sp, #0]
 800b60a:	2302      	movs	r3, #2
 800b60c:	2201      	movs	r2, #1
 800b60e:	2100      	movs	r1, #0
 800b610:	2007      	movs	r0, #7
 800b612:	f001 fe92 	bl	800d33a <VL53L1_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 800b616:	6a3b      	ldr	r3, [r7, #32]
 800b618:	2209      	movs	r2, #9
 800b61a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 800b61c:	6a3b      	ldr	r3, [r7, #32]
 800b61e:	220b      	movs	r2, #11
 800b620:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 800b622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b624:	2209      	movs	r2, #9
 800b626:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800b628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62a:	220b      	movs	r2, #11
 800b62c:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800b62e:	6a3b      	ldr	r3, [r7, #32]
 800b630:	2200      	movs	r2, #0
 800b632:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 800b634:	6a3b      	ldr	r3, [r7, #32]
 800b636:	2220      	movs	r2, #32
 800b638:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800b63a:	6a3b      	ldr	r3, [r7, #32]
 800b63c:	2200      	movs	r2, #0
 800b63e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 800b640:	6a3b      	ldr	r3, [r7, #32]
 800b642:	221a      	movs	r2, #26
 800b644:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800b646:	6a3b      	ldr	r3, [r7, #32]
 800b648:	2200      	movs	r2, #0
 800b64a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 800b64c:	6a3b      	ldr	r3, [r7, #32]
 800b64e:	2228      	movs	r2, #40	; 0x28
 800b650:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800b652:	6a3b      	ldr	r3, [r7, #32]
 800b654:	2200      	movs	r2, #0
 800b656:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	2221      	movs	r2, #33	; 0x21
 800b65c:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	22f5      	movs	r2, #245	; 0xf5
 800b662:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2208      	movs	r2, #8
 800b668:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2288      	movs	r2, #136	; 0x88
 800b670:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53L1_copy_hist_cfg_to_static_cfg(
 800b674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b676:	9300      	str	r3, [sp, #0]
 800b678:	6a3b      	ldr	r3, [r7, #32]
 800b67a:	683a      	ldr	r2, [r7, #0]
 800b67c:	68b9      	ldr	r1, [r7, #8]
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f001 f821 	bl	800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	229b      	movs	r2, #155	; 0x9b
 800b688:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800b68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68c:	2226      	movs	r2, #38	; 0x26
 800b68e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b690:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3718      	adds	r7, #24
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <VL53L1_preset_mode_histogram_ranging_with_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b090      	sub	sp, #64	; 0x40
 800b6a0:	af0a      	add	r7, sp, #40	; 0x28
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	607a      	str	r2, [r7, #4]
 800b6a8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	9304      	str	r3, [sp, #16]
 800b6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b4:	9303      	str	r3, [sp, #12]
 800b6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b8:	9302      	str	r3, [sp, #8]
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6bc:	9301      	str	r3, [sp, #4]
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	9300      	str	r3, [sp, #0]
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	68b9      	ldr	r1, [r7, #8]
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f7ff ff52 	bl	800b572 <VL53L1_preset_mode_histogram_ranging>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b6d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d13e      	bne.n	800b758 <VL53L1_preset_mode_histogram_ranging_with_mm1+0xbc>



		VL53L1_init_histogram_config_structure(
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	9308      	str	r3, [sp, #32]
 800b6de:	2305      	movs	r3, #5
 800b6e0:	9307      	str	r3, [sp, #28]
 800b6e2:	2304      	movs	r3, #4
 800b6e4:	9306      	str	r3, [sp, #24]
 800b6e6:	2303      	movs	r3, #3
 800b6e8:	9305      	str	r3, [sp, #20]
 800b6ea:	230a      	movs	r3, #10
 800b6ec:	9304      	str	r3, [sp, #16]
 800b6ee:	2309      	movs	r3, #9
 800b6f0:	9303      	str	r3, [sp, #12]
 800b6f2:	2308      	movs	r3, #8
 800b6f4:	9302      	str	r3, [sp, #8]
 800b6f6:	2304      	movs	r3, #4
 800b6f8:	9301      	str	r3, [sp, #4]
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	9300      	str	r3, [sp, #0]
 800b6fe:	2302      	movs	r3, #2
 800b700:	2201      	movs	r2, #1
 800b702:	2100      	movs	r1, #0
 800b704:	2007      	movs	r0, #7
 800b706:	f001 fd88 	bl	800d21a <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800b70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70c:	3302      	adds	r3, #2
 800b70e:	9308      	str	r3, [sp, #32]
 800b710:	2305      	movs	r3, #5
 800b712:	9307      	str	r3, [sp, #28]
 800b714:	2304      	movs	r3, #4
 800b716:	9306      	str	r3, [sp, #24]
 800b718:	2303      	movs	r3, #3
 800b71a:	9305      	str	r3, [sp, #20]
 800b71c:	230a      	movs	r3, #10
 800b71e:	9304      	str	r3, [sp, #16]
 800b720:	2309      	movs	r3, #9
 800b722:	9303      	str	r3, [sp, #12]
 800b724:	2308      	movs	r3, #8
 800b726:	9302      	str	r3, [sp, #8]
 800b728:	2304      	movs	r3, #4
 800b72a:	9301      	str	r3, [sp, #4]
 800b72c:	2303      	movs	r3, #3
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	2302      	movs	r3, #2
 800b732:	2201      	movs	r2, #1
 800b734:	2100      	movs	r1, #0
 800b736:	2007      	movs	r0, #7
 800b738:	f001 fdff 	bl	800d33a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800b73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	6a3b      	ldr	r3, [r7, #32]
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	68b9      	ldr	r1, [r7, #8]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 ffbd 	bl	800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800b74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74e:	22bb      	movs	r2, #187	; 0xbb
 800b750:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN |
				VL53L1_SEQUENCE_RANGE_EN;



		psystem->system__mode_start =
 800b752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b754:	2226      	movs	r2, #38	; 0x26
 800b756:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b758:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3718      	adds	r7, #24
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <VL53L1_preset_mode_histogram_ranging_with_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b08c      	sub	sp, #48	; 0x30
 800b768:	af06      	add	r7, sp, #24
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b772:	2300      	movs	r3, #0
 800b774:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 800b776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b778:	9304      	str	r3, [sp, #16]
 800b77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77c:	9303      	str	r3, [sp, #12]
 800b77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b780:	9302      	str	r3, [sp, #8]
 800b782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b784:	9301      	str	r3, [sp, #4]
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	68b9      	ldr	r1, [r7, #8]
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f7ff ff83 	bl	800b69c <VL53L1_preset_mode_histogram_ranging_with_mm1>
 800b796:	4603      	mov	r3, r0
 800b798:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b79a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d102      	bne.n	800b7a8 <VL53L1_preset_mode_histogram_ranging_with_mm2+0x44>



		pdynamic->system__sequence_config =
 800b7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a4:	22db      	movs	r2, #219	; 0xdb
 800b7a6:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b7a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3718      	adds	r7, #24
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b090      	sub	sp, #64	; 0x40
 800b7b8:	af0a      	add	r7, sp, #40	; 0x28
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
 800b7c0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c8:	9304      	str	r3, [sp, #16]
 800b7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7cc:	9303      	str	r3, [sp, #12]
 800b7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d0:	9302      	str	r3, [sp, #8]
 800b7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	6a3b      	ldr	r3, [r7, #32]
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	68b9      	ldr	r1, [r7, #8]
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f7ff fec6 	bl	800b572 <VL53L1_preset_mode_histogram_ranging>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b7ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d13e      	bne.n	800b870 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0xbc>



		VL53L1_init_histogram_config_structure(
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	9308      	str	r3, [sp, #32]
 800b7f6:	230d      	movs	r3, #13
 800b7f8:	9307      	str	r3, [sp, #28]
 800b7fa:	230c      	movs	r3, #12
 800b7fc:	9306      	str	r3, [sp, #24]
 800b7fe:	230b      	movs	r3, #11
 800b800:	9305      	str	r3, [sp, #20]
 800b802:	230a      	movs	r3, #10
 800b804:	9304      	str	r3, [sp, #16]
 800b806:	2309      	movs	r3, #9
 800b808:	9303      	str	r3, [sp, #12]
 800b80a:	2308      	movs	r3, #8
 800b80c:	9302      	str	r3, [sp, #8]
 800b80e:	230c      	movs	r3, #12
 800b810:	9301      	str	r3, [sp, #4]
 800b812:	230b      	movs	r3, #11
 800b814:	9300      	str	r3, [sp, #0]
 800b816:	230a      	movs	r3, #10
 800b818:	2209      	movs	r2, #9
 800b81a:	2108      	movs	r1, #8
 800b81c:	2007      	movs	r0, #7
 800b81e:	f001 fcfc 	bl	800d21a <VL53L1_init_histogram_config_structure>
				  7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800b822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b824:	3302      	adds	r3, #2
 800b826:	9308      	str	r3, [sp, #32]
 800b828:	230d      	movs	r3, #13
 800b82a:	9307      	str	r3, [sp, #28]
 800b82c:	230c      	movs	r3, #12
 800b82e:	9306      	str	r3, [sp, #24]
 800b830:	230b      	movs	r3, #11
 800b832:	9305      	str	r3, [sp, #20]
 800b834:	230a      	movs	r3, #10
 800b836:	9304      	str	r3, [sp, #16]
 800b838:	2309      	movs	r3, #9
 800b83a:	9303      	str	r3, [sp, #12]
 800b83c:	2308      	movs	r3, #8
 800b83e:	9302      	str	r3, [sp, #8]
 800b840:	230c      	movs	r3, #12
 800b842:	9301      	str	r3, [sp, #4]
 800b844:	230b      	movs	r3, #11
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	230a      	movs	r3, #10
 800b84a:	2209      	movs	r2, #9
 800b84c:	2108      	movs	r1, #8
 800b84e:	2007      	movs	r0, #7
 800b850:	f001 fd73 	bl	800d33a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	6a3b      	ldr	r3, [r7, #32]
 800b85a:	683a      	ldr	r2, [r7, #0]
 800b85c:	68b9      	ldr	r1, [r7, #8]
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 ff31 	bl	800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pgeneral->dss_config__roi_mode_control =
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	2202      	movs	r2, #2
 800b868:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;



		pdynamic->system__sequence_config =
 800b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86c:	22bb      	movs	r2, #187	; 0xbb
 800b86e:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800b870:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3718      	adds	r7, #24
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b08c      	sub	sp, #48	; 0x30
 800b880:	af06      	add	r7, sp, #24
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
 800b888:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b88a:	2300      	movs	r3, #0
 800b88c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 800b88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b894:	9303      	str	r3, [sp, #12]
 800b896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b898:	9302      	str	r3, [sp, #8]
 800b89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89c:	9301      	str	r3, [sp, #4]
 800b89e:	6a3b      	ldr	r3, [r7, #32]
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	68b9      	ldr	r1, [r7, #8]
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f7ff ff83 	bl	800b7b4 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	75fb      	strb	r3, [r7, #23]
				pdynamic,
				psystem,
				ptuning_parms,
				pzone_cfg);

	if (status == VL53L1_ERROR_NONE) {
 800b8b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d102      	bne.n	800b8c0 <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x44>



		pdynamic->system__sequence_config =
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8bc:	22db      	movs	r2, #219	; 0xdb
 800b8be:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800b8c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3718      	adds	r7, #24
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <VL53L1_preset_mode_histogram_ranging_short_timing>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b090      	sub	sp, #64	; 0x40
 800b8d0:	af0a      	add	r7, sp, #40	; 0x28
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
 800b8d8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800b8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e0:	9304      	str	r3, [sp, #16]
 800b8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e4:	9303      	str	r3, [sp, #12]
 800b8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e8:	9302      	str	r3, [sp, #8]
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ec:	9301      	str	r3, [sp, #4]
 800b8ee:	6a3b      	ldr	r3, [r7, #32]
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	68b9      	ldr	r1, [r7, #8]
 800b8f8:	68f8      	ldr	r0, [r7, #12]
 800b8fa:	f7ff fe3a 	bl	800b572 <VL53L1_preset_mode_histogram_ranging>
 800b8fe:	4603      	mov	r3, r0
 800b900:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b902:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d166      	bne.n	800b9d8 <VL53L1_preset_mode_histogram_ranging_short_timing+0x10c>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800b910:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	9308      	str	r3, [sp, #32]
 800b916:	2304      	movs	r3, #4
 800b918:	9307      	str	r3, [sp, #28]
 800b91a:	2303      	movs	r3, #3
 800b91c:	9306      	str	r3, [sp, #24]
 800b91e:	2302      	movs	r3, #2
 800b920:	9305      	str	r3, [sp, #20]
 800b922:	2301      	movs	r3, #1
 800b924:	9304      	str	r3, [sp, #16]
 800b926:	2300      	movs	r3, #0
 800b928:	9303      	str	r3, [sp, #12]
 800b92a:	2307      	movs	r3, #7
 800b92c:	9302      	str	r3, [sp, #8]
 800b92e:	2304      	movs	r3, #4
 800b930:	9301      	str	r3, [sp, #4]
 800b932:	2303      	movs	r3, #3
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	2302      	movs	r3, #2
 800b938:	2201      	movs	r2, #1
 800b93a:	2100      	movs	r1, #0
 800b93c:	2007      	movs	r0, #7
 800b93e:	f001 fc6c 	bl	800d21a <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				7, 0, 1, 2, 3, 4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800b942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b944:	3302      	adds	r3, #2
 800b946:	9308      	str	r3, [sp, #32]
 800b948:	2304      	movs	r3, #4
 800b94a:	9307      	str	r3, [sp, #28]
 800b94c:	2303      	movs	r3, #3
 800b94e:	9306      	str	r3, [sp, #24]
 800b950:	2302      	movs	r3, #2
 800b952:	9305      	str	r3, [sp, #20]
 800b954:	2301      	movs	r3, #1
 800b956:	9304      	str	r3, [sp, #16]
 800b958:	2300      	movs	r3, #0
 800b95a:	9303      	str	r3, [sp, #12]
 800b95c:	2307      	movs	r3, #7
 800b95e:	9302      	str	r3, [sp, #8]
 800b960:	2304      	movs	r3, #4
 800b962:	9301      	str	r3, [sp, #4]
 800b964:	2303      	movs	r3, #3
 800b966:	9300      	str	r3, [sp, #0]
 800b968:	2302      	movs	r3, #2
 800b96a:	2201      	movs	r2, #1
 800b96c:	2100      	movs	r1, #0
 800b96e:	2007      	movs	r0, #7
 800b970:	f001 fce3 	bl	800d33a <VL53L1_init_histogram_multizone_config_structure>
				7, 0, 1, 2, 3, 4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800b974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	6a3b      	ldr	r3, [r7, #32]
 800b97a:	683a      	ldr	r2, [r7, #0]
 800b97c:	68b9      	ldr	r1, [r7, #8]
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 fea1 	bl	800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x04;
 800b984:	6a3b      	ldr	r3, [r7, #32]
 800b986:	2204      	movs	r2, #4
 800b988:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 800b98a:	6a3b      	ldr	r3, [r7, #32]
 800b98c:	2203      	movs	r2, #3
 800b98e:	725a      	strb	r2, [r3, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800b990:	6a3b      	ldr	r3, [r7, #32]
 800b992:	2200      	movs	r2, #0
 800b994:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x42;
 800b996:	6a3b      	ldr	r3, [r7, #32]
 800b998:	2242      	movs	r2, #66	; 0x42
 800b99a:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x42;
 800b9a2:	6a3b      	ldr	r3, [r7, #32]
 800b9a4:	2242      	movs	r2, #66	; 0x42
 800b9a6:	70da      	strb	r2, [r3, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800b9a8:	6a3b      	ldr	r3, [r7, #32]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x52;
 800b9ae:	6a3b      	ldr	r3, [r7, #32]
 800b9b0:	2252      	movs	r2, #82	; 0x52
 800b9b2:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800b9b4:	6a3b      	ldr	r3, [r7, #32]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 800b9ba:	6a3b      	ldr	r3, [r7, #32]
 800b9bc:	2266      	movs	r2, #102	; 0x66
 800b9be:	721a      	strb	r2, [r3, #8]

		pgeneral->cal_config__vcsel_start = 0x04;
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	2204      	movs	r2, #4
 800b9c4:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	22a4      	movs	r2, #164	; 0xa4
 800b9ca:	71da      	strb	r2, [r3, #7]



		pdynamic->system__sequence_config =
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ce:	229b      	movs	r2, #155	; 0x9b
 800b9d0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	2226      	movs	r2, #38	; 0x26
 800b9d6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b9d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3718      	adds	r7, #24
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <VL53L1_preset_mode_histogram_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b090      	sub	sp, #64	; 0x40
 800b9e8:	af0a      	add	r7, sp, #40	; 0x28
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
 800b9f0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800b9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f8:	9304      	str	r3, [sp, #16]
 800b9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fc:	9303      	str	r3, [sp, #12]
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	9302      	str	r3, [sp, #8]
 800ba02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba04:	9301      	str	r3, [sp, #4]
 800ba06:	6a3b      	ldr	r3, [r7, #32]
 800ba08:	9300      	str	r3, [sp, #0]
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	68b9      	ldr	r1, [r7, #8]
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f7ff fdae 	bl	800b572 <VL53L1_preset_mode_histogram_ranging>
 800ba16:	4603      	mov	r3, r0
 800ba18:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800ba1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d178      	bne.n	800bb14 <VL53L1_preset_mode_histogram_long_range+0x130>





		VL53L1_init_histogram_config_structure(
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	9308      	str	r3, [sp, #32]
 800ba26:	2305      	movs	r3, #5
 800ba28:	9307      	str	r3, [sp, #28]
 800ba2a:	2304      	movs	r3, #4
 800ba2c:	9306      	str	r3, [sp, #24]
 800ba2e:	2303      	movs	r3, #3
 800ba30:	9305      	str	r3, [sp, #20]
 800ba32:	2302      	movs	r3, #2
 800ba34:	9304      	str	r3, [sp, #16]
 800ba36:	2301      	movs	r3, #1
 800ba38:	9303      	str	r3, [sp, #12]
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	9302      	str	r3, [sp, #8]
 800ba3e:	2304      	movs	r3, #4
 800ba40:	9301      	str	r3, [sp, #4]
 800ba42:	2303      	movs	r3, #3
 800ba44:	9300      	str	r3, [sp, #0]
 800ba46:	2302      	movs	r3, #2
 800ba48:	2201      	movs	r2, #1
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	2007      	movs	r0, #7
 800ba4e:	f001 fbe4 	bl	800d21a <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800ba52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba54:	3302      	adds	r3, #2
 800ba56:	9308      	str	r3, [sp, #32]
 800ba58:	2305      	movs	r3, #5
 800ba5a:	9307      	str	r3, [sp, #28]
 800ba5c:	2304      	movs	r3, #4
 800ba5e:	9306      	str	r3, [sp, #24]
 800ba60:	2303      	movs	r3, #3
 800ba62:	9305      	str	r3, [sp, #20]
 800ba64:	2302      	movs	r3, #2
 800ba66:	9304      	str	r3, [sp, #16]
 800ba68:	2301      	movs	r3, #1
 800ba6a:	9303      	str	r3, [sp, #12]
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	9302      	str	r3, [sp, #8]
 800ba70:	2304      	movs	r3, #4
 800ba72:	9301      	str	r3, [sp, #4]
 800ba74:	2303      	movs	r3, #3
 800ba76:	9300      	str	r3, [sp, #0]
 800ba78:	2302      	movs	r3, #2
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	2007      	movs	r0, #7
 800ba80:	f001 fc5b 	bl	800d33a <VL53L1_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800ba84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	6a3b      	ldr	r3, [r7, #32]
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	68b9      	ldr	r1, [r7, #8]
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 fe19 	bl	800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800ba94:	6a3b      	ldr	r3, [r7, #32]
 800ba96:	2209      	movs	r2, #9
 800ba98:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 800ba9a:	6a3b      	ldr	r3, [r7, #32]
 800ba9c:	220b      	movs	r2, #11
 800ba9e:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800baa0:	6a3b      	ldr	r3, [r7, #32]
 800baa2:	2200      	movs	r2, #0
 800baa4:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800baa6:	6a3b      	ldr	r3, [r7, #32]
 800baa8:	2221      	movs	r2, #33	; 0x21
 800baaa:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800baac:	6a3b      	ldr	r3, [r7, #32]
 800baae:	2200      	movs	r2, #0
 800bab0:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 800bab2:	6a3b      	ldr	r3, [r7, #32]
 800bab4:	221b      	movs	r2, #27
 800bab6:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800bab8:	6a3b      	ldr	r3, [r7, #32]
 800baba:	2200      	movs	r2, #0
 800babc:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800babe:	6a3b      	ldr	r3, [r7, #32]
 800bac0:	2229      	movs	r2, #41	; 0x29
 800bac2:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800bac4:	6a3b      	ldr	r3, [r7, #32]
 800bac6:	2200      	movs	r2, #0
 800bac8:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800baca:	6a3b      	ldr	r3, [r7, #32]
 800bacc:	2222      	movs	r2, #34	; 0x22
 800bace:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	2209      	movs	r2, #9
 800bad4:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	22f5      	movs	r2, #245	; 0xf5
 800bada:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	2209      	movs	r2, #9
 800bae0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800bae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae4:	220b      	movs	r2, #11
 800bae6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 800bae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baea:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 800baec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baee:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 800baf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf2:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 800baf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf6:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2208      	movs	r2, #8
 800bafc:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2288      	movs	r2, #136	; 0x88
 800bb04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800bb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0a:	229b      	movs	r2, #155	; 0x9b
 800bb0c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800bb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb10:	2226      	movs	r2, #38	; 0x26
 800bb12:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bb14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3718      	adds	r7, #24
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <VL53L1_preset_mode_histogram_long_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b090      	sub	sp, #64	; 0x40
 800bb24:	af0a      	add	r7, sp, #40	; 0x28
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
 800bb2c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800bb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb34:	9304      	str	r3, [sp, #16]
 800bb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb38:	9303      	str	r3, [sp, #12]
 800bb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3c:	9302      	str	r3, [sp, #8]
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb40:	9301      	str	r3, [sp, #4]
 800bb42:	6a3b      	ldr	r3, [r7, #32]
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	68b9      	ldr	r1, [r7, #8]
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	f7ff ff49 	bl	800b9e4 <VL53L1_preset_mode_histogram_long_range>
 800bb52:	4603      	mov	r3, r0
 800bb54:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800bb56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d13b      	bne.n	800bbd6 <VL53L1_preset_mode_histogram_long_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	9308      	str	r3, [sp, #32]
 800bb62:	2305      	movs	r3, #5
 800bb64:	9307      	str	r3, [sp, #28]
 800bb66:	2304      	movs	r3, #4
 800bb68:	9306      	str	r3, [sp, #24]
 800bb6a:	2303      	movs	r3, #3
 800bb6c:	9305      	str	r3, [sp, #20]
 800bb6e:	230a      	movs	r3, #10
 800bb70:	9304      	str	r3, [sp, #16]
 800bb72:	2309      	movs	r3, #9
 800bb74:	9303      	str	r3, [sp, #12]
 800bb76:	2308      	movs	r3, #8
 800bb78:	9302      	str	r3, [sp, #8]
 800bb7a:	2304      	movs	r3, #4
 800bb7c:	9301      	str	r3, [sp, #4]
 800bb7e:	2303      	movs	r3, #3
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	2302      	movs	r3, #2
 800bb84:	2201      	movs	r2, #1
 800bb86:	2100      	movs	r1, #0
 800bb88:	2007      	movs	r0, #7
 800bb8a:	f001 fb46 	bl	800d21a <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800bb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb90:	3302      	adds	r3, #2
 800bb92:	9308      	str	r3, [sp, #32]
 800bb94:	2305      	movs	r3, #5
 800bb96:	9307      	str	r3, [sp, #28]
 800bb98:	2304      	movs	r3, #4
 800bb9a:	9306      	str	r3, [sp, #24]
 800bb9c:	2303      	movs	r3, #3
 800bb9e:	9305      	str	r3, [sp, #20]
 800bba0:	230a      	movs	r3, #10
 800bba2:	9304      	str	r3, [sp, #16]
 800bba4:	2309      	movs	r3, #9
 800bba6:	9303      	str	r3, [sp, #12]
 800bba8:	2308      	movs	r3, #8
 800bbaa:	9302      	str	r3, [sp, #8]
 800bbac:	2304      	movs	r3, #4
 800bbae:	9301      	str	r3, [sp, #4]
 800bbb0:	2303      	movs	r3, #3
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	2100      	movs	r1, #0
 800bbba:	2007      	movs	r0, #7
 800bbbc:	f001 fbbd 	bl	800d33a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc2:	9300      	str	r3, [sp, #0]
 800bbc4:	6a3b      	ldr	r3, [r7, #32]
 800bbc6:	683a      	ldr	r2, [r7, #0]
 800bbc8:	68b9      	ldr	r1, [r7, #8]
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 fd7b 	bl	800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	22bb      	movs	r2, #187	; 0xbb
 800bbd4:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bbd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3718      	adds	r7, #24
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <VL53L1_preset_mode_histogram_long_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t      *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b08c      	sub	sp, #48	; 0x30
 800bbe6:	af06      	add	r7, sp, #24
 800bbe8:	60f8      	str	r0, [r7, #12]
 800bbea:	60b9      	str	r1, [r7, #8]
 800bbec:	607a      	str	r2, [r7, #4]
 800bbee:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range_mm1(
 800bbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf6:	9304      	str	r3, [sp, #16]
 800bbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfa:	9303      	str	r3, [sp, #12]
 800bbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfe:	9302      	str	r3, [sp, #8]
 800bc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc02:	9301      	str	r3, [sp, #4]
 800bc04:	6a3b      	ldr	r3, [r7, #32]
 800bc06:	9300      	str	r3, [sp, #0]
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	68b9      	ldr	r1, [r7, #8]
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f7ff ff86 	bl	800bb20 <VL53L1_preset_mode_histogram_long_range_mm1>
 800bc14:	4603      	mov	r3, r0
 800bc16:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800bc18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d102      	bne.n	800bc26 <VL53L1_preset_mode_histogram_long_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800bc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc22:	22db      	movs	r2, #219	; 0xdb
 800bc24:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bc26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3718      	adds	r7, #24
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <VL53L1_preset_mode_histogram_medium_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b090      	sub	sp, #64	; 0x40
 800bc36:	af0a      	add	r7, sp, #40	; 0x28
 800bc38:	60f8      	str	r0, [r7, #12]
 800bc3a:	60b9      	str	r1, [r7, #8]
 800bc3c:	607a      	str	r2, [r7, #4]
 800bc3e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bc40:	2300      	movs	r3, #0
 800bc42:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800bc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc46:	9304      	str	r3, [sp, #16]
 800bc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4a:	9303      	str	r3, [sp, #12]
 800bc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4e:	9302      	str	r3, [sp, #8]
 800bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc52:	9301      	str	r3, [sp, #4]
 800bc54:	6a3b      	ldr	r3, [r7, #32]
 800bc56:	9300      	str	r3, [sp, #0]
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	68b9      	ldr	r1, [r7, #8]
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f7ff fc87 	bl	800b572 <VL53L1_preset_mode_histogram_ranging>
 800bc64:	4603      	mov	r3, r0
 800bc66:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800bc68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d178      	bne.n	800bd62 <VL53L1_preset_mode_histogram_medium_range+0x130>





		VL53L1_init_histogram_config_structure(
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	9308      	str	r3, [sp, #32]
 800bc74:	2303      	movs	r3, #3
 800bc76:	9307      	str	r3, [sp, #28]
 800bc78:	2302      	movs	r3, #2
 800bc7a:	9306      	str	r3, [sp, #24]
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	9305      	str	r3, [sp, #20]
 800bc80:	2302      	movs	r3, #2
 800bc82:	9304      	str	r3, [sp, #16]
 800bc84:	2301      	movs	r3, #1
 800bc86:	9303      	str	r3, [sp, #12]
 800bc88:	2300      	movs	r3, #0
 800bc8a:	9302      	str	r3, [sp, #8]
 800bc8c:	2302      	movs	r3, #2
 800bc8e:	9301      	str	r3, [sp, #4]
 800bc90:	2302      	movs	r3, #2
 800bc92:	9300      	str	r3, [sp, #0]
 800bc94:	2301      	movs	r3, #1
 800bc96:	2201      	movs	r2, #1
 800bc98:	2100      	movs	r1, #0
 800bc9a:	2007      	movs	r0, #7
 800bc9c:	f001 fabd 	bl	800d21a <VL53L1_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800bca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca2:	3302      	adds	r3, #2
 800bca4:	9308      	str	r3, [sp, #32]
 800bca6:	2303      	movs	r3, #3
 800bca8:	9307      	str	r3, [sp, #28]
 800bcaa:	2302      	movs	r3, #2
 800bcac:	9306      	str	r3, [sp, #24]
 800bcae:	2301      	movs	r3, #1
 800bcb0:	9305      	str	r3, [sp, #20]
 800bcb2:	2302      	movs	r3, #2
 800bcb4:	9304      	str	r3, [sp, #16]
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	9303      	str	r3, [sp, #12]
 800bcba:	2300      	movs	r3, #0
 800bcbc:	9302      	str	r3, [sp, #8]
 800bcbe:	2302      	movs	r3, #2
 800bcc0:	9301      	str	r3, [sp, #4]
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	9300      	str	r3, [sp, #0]
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	2201      	movs	r2, #1
 800bcca:	2100      	movs	r1, #0
 800bccc:	2007      	movs	r0, #7
 800bcce:	f001 fb34 	bl	800d33a <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	6a3b      	ldr	r3, [r7, #32]
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	68b9      	ldr	r1, [r7, #8]
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 fcf2 	bl	800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 800bce2:	6a3b      	ldr	r3, [r7, #32]
 800bce4:	2205      	movs	r2, #5
 800bce6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 800bce8:	6a3b      	ldr	r3, [r7, #32]
 800bcea:	2207      	movs	r2, #7
 800bcec:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800bcee:	6a3b      	ldr	r3, [r7, #32]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 800bcf4:	6a3b      	ldr	r3, [r7, #32]
 800bcf6:	2236      	movs	r2, #54	; 0x36
 800bcf8:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800bcfa:	6a3b      	ldr	r3, [r7, #32]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 800bd00:	6a3b      	ldr	r3, [r7, #32]
 800bd02:	2228      	movs	r2, #40	; 0x28
 800bd04:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800bd06:	6a3b      	ldr	r3, [r7, #32]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 800bd0c:	6a3b      	ldr	r3, [r7, #32]
 800bd0e:	2244      	movs	r2, #68	; 0x44
 800bd10:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800bd12:	6a3b      	ldr	r3, [r7, #32]
 800bd14:	2200      	movs	r2, #0
 800bd16:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 800bd18:	6a3b      	ldr	r3, [r7, #32]
 800bd1a:	2233      	movs	r2, #51	; 0x33
 800bd1c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	2205      	movs	r2, #5
 800bd22:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	22f5      	movs	r2, #245	; 0xf5
 800bd28:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 800bd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2c:	2205      	movs	r2, #5
 800bd2e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 800bd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd32:	2207      	movs	r2, #7
 800bd34:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 800bd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd38:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 800bd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 800bd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd40:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 800bd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd44:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2208      	movs	r2, #8
 800bd4a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2248      	movs	r2, #72	; 0x48
 800bd52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800bd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd58:	229b      	movs	r2, #155	; 0x9b
 800bd5a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800bd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5e:	2226      	movs	r2, #38	; 0x26
 800bd60:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bd62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3718      	adds	r7, #24
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <VL53L1_preset_mode_histogram_medium_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b090      	sub	sp, #64	; 0x40
 800bd72:	af0a      	add	r7, sp, #40	; 0x28
 800bd74:	60f8      	str	r0, [r7, #12]
 800bd76:	60b9      	str	r1, [r7, #8]
 800bd78:	607a      	str	r2, [r7, #4]
 800bd7a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800bd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd82:	9304      	str	r3, [sp, #16]
 800bd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd86:	9303      	str	r3, [sp, #12]
 800bd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8a:	9302      	str	r3, [sp, #8]
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8e:	9301      	str	r3, [sp, #4]
 800bd90:	6a3b      	ldr	r3, [r7, #32]
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	68b9      	ldr	r1, [r7, #8]
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f7ff ff49 	bl	800bc32 <VL53L1_preset_mode_histogram_medium_range>
 800bda0:	4603      	mov	r3, r0
 800bda2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800bda4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d13b      	bne.n	800be24 <VL53L1_preset_mode_histogram_medium_range_mm1+0xb6>



		VL53L1_init_histogram_config_structure(
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	9308      	str	r3, [sp, #32]
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	9307      	str	r3, [sp, #28]
 800bdb4:	2302      	movs	r3, #2
 800bdb6:	9306      	str	r3, [sp, #24]
 800bdb8:	2301      	movs	r3, #1
 800bdba:	9305      	str	r3, [sp, #20]
 800bdbc:	230a      	movs	r3, #10
 800bdbe:	9304      	str	r3, [sp, #16]
 800bdc0:	2309      	movs	r3, #9
 800bdc2:	9303      	str	r3, [sp, #12]
 800bdc4:	2308      	movs	r3, #8
 800bdc6:	9302      	str	r3, [sp, #8]
 800bdc8:	2302      	movs	r3, #2
 800bdca:	9301      	str	r3, [sp, #4]
 800bdcc:	2302      	movs	r3, #2
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	2007      	movs	r0, #7
 800bdd8:	f001 fa1f 	bl	800d21a <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 1, 2, 2,
				8+0, 8+1, 8+2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800bddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdde:	3302      	adds	r3, #2
 800bde0:	9308      	str	r3, [sp, #32]
 800bde2:	2303      	movs	r3, #3
 800bde4:	9307      	str	r3, [sp, #28]
 800bde6:	2302      	movs	r3, #2
 800bde8:	9306      	str	r3, [sp, #24]
 800bdea:	2301      	movs	r3, #1
 800bdec:	9305      	str	r3, [sp, #20]
 800bdee:	230a      	movs	r3, #10
 800bdf0:	9304      	str	r3, [sp, #16]
 800bdf2:	2309      	movs	r3, #9
 800bdf4:	9303      	str	r3, [sp, #12]
 800bdf6:	2308      	movs	r3, #8
 800bdf8:	9302      	str	r3, [sp, #8]
 800bdfa:	2302      	movs	r3, #2
 800bdfc:	9301      	str	r3, [sp, #4]
 800bdfe:	2302      	movs	r3, #2
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	2301      	movs	r3, #1
 800be04:	2201      	movs	r2, #1
 800be06:	2100      	movs	r1, #0
 800be08:	2007      	movs	r0, #7
 800be0a:	f001 fa96 	bl	800d33a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800be0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be10:	9300      	str	r3, [sp, #0]
 800be12:	6a3b      	ldr	r3, [r7, #32]
 800be14:	683a      	ldr	r2, [r7, #0]
 800be16:	68b9      	ldr	r1, [r7, #8]
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fc54 	bl	800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800be1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be20:	22bb      	movs	r2, #187	; 0xbb
 800be22:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800be24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3718      	adds	r7, #24
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <VL53L1_preset_mode_histogram_medium_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b08c      	sub	sp, #48	; 0x30
 800be34:	af06      	add	r7, sp, #24
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
 800be3c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be3e:	2300      	movs	r3, #0
 800be40:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range_mm1(
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	9304      	str	r3, [sp, #16]
 800be46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be48:	9303      	str	r3, [sp, #12]
 800be4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4c:	9302      	str	r3, [sp, #8]
 800be4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be50:	9301      	str	r3, [sp, #4]
 800be52:	6a3b      	ldr	r3, [r7, #32]
 800be54:	9300      	str	r3, [sp, #0]
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	68b9      	ldr	r1, [r7, #8]
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f7ff ff86 	bl	800bd6e <VL53L1_preset_mode_histogram_medium_range_mm1>
 800be62:	4603      	mov	r3, r0
 800be64:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800be66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d102      	bne.n	800be74 <VL53L1_preset_mode_histogram_medium_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800be6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be70:	22db      	movs	r2, #219	; 0xdb
 800be72:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800be74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3718      	adds	r7, #24
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <VL53L1_preset_mode_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b090      	sub	sp, #64	; 0x40
 800be84:	af0a      	add	r7, sp, #40	; 0x28
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be8e:	2300      	movs	r3, #0
 800be90:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800be92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be94:	9304      	str	r3, [sp, #16]
 800be96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be98:	9303      	str	r3, [sp, #12]
 800be9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9c:	9302      	str	r3, [sp, #8]
 800be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea0:	9301      	str	r3, [sp, #4]
 800bea2:	6a3b      	ldr	r3, [r7, #32]
 800bea4:	9300      	str	r3, [sp, #0]
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	68b9      	ldr	r1, [r7, #8]
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f7ff fb60 	bl	800b572 <VL53L1_preset_mode_histogram_ranging>
 800beb2:	4603      	mov	r3, r0
 800beb4:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800beb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d178      	bne.n	800bfb0 <VL53L1_preset_mode_histogram_short_range+0x130>





		VL53L1_init_histogram_config_structure(
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	9308      	str	r3, [sp, #32]
 800bec2:	2302      	movs	r3, #2
 800bec4:	9307      	str	r3, [sp, #28]
 800bec6:	2302      	movs	r3, #2
 800bec8:	9306      	str	r3, [sp, #24]
 800beca:	2301      	movs	r3, #1
 800becc:	9305      	str	r3, [sp, #20]
 800bece:	2301      	movs	r3, #1
 800bed0:	9304      	str	r3, [sp, #16]
 800bed2:	2301      	movs	r3, #1
 800bed4:	9303      	str	r3, [sp, #12]
 800bed6:	2300      	movs	r3, #0
 800bed8:	9302      	str	r3, [sp, #8]
 800beda:	2301      	movs	r3, #1
 800bedc:	9301      	str	r3, [sp, #4]
 800bede:	2301      	movs	r3, #1
 800bee0:	9300      	str	r3, [sp, #0]
 800bee2:	2301      	movs	r3, #1
 800bee4:	2200      	movs	r2, #0
 800bee6:	2107      	movs	r1, #7
 800bee8:	2007      	movs	r0, #7
 800beea:	f001 f996 	bl	800d21a <VL53L1_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800beee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef0:	3302      	adds	r3, #2
 800bef2:	9308      	str	r3, [sp, #32]
 800bef4:	2302      	movs	r3, #2
 800bef6:	9307      	str	r3, [sp, #28]
 800bef8:	2302      	movs	r3, #2
 800befa:	9306      	str	r3, [sp, #24]
 800befc:	2301      	movs	r3, #1
 800befe:	9305      	str	r3, [sp, #20]
 800bf00:	2301      	movs	r3, #1
 800bf02:	9304      	str	r3, [sp, #16]
 800bf04:	2301      	movs	r3, #1
 800bf06:	9303      	str	r3, [sp, #12]
 800bf08:	2300      	movs	r3, #0
 800bf0a:	9302      	str	r3, [sp, #8]
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	2301      	movs	r3, #1
 800bf12:	9300      	str	r3, [sp, #0]
 800bf14:	2301      	movs	r3, #1
 800bf16:	2200      	movs	r2, #0
 800bf18:	2107      	movs	r1, #7
 800bf1a:	2007      	movs	r0, #7
 800bf1c:	f001 fa0d 	bl	800d33a <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800bf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf22:	9300      	str	r3, [sp, #0]
 800bf24:	6a3b      	ldr	r3, [r7, #32]
 800bf26:	683a      	ldr	r2, [r7, #0]
 800bf28:	68b9      	ldr	r1, [r7, #8]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fbcb 	bl	800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 800bf30:	6a3b      	ldr	r3, [r7, #32]
 800bf32:	2203      	movs	r2, #3
 800bf34:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 800bf36:	6a3b      	ldr	r3, [r7, #32]
 800bf38:	2205      	movs	r2, #5
 800bf3a:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800bf3c:	6a3b      	ldr	r3, [r7, #32]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 800bf42:	6a3b      	ldr	r3, [r7, #32]
 800bf44:	2252      	movs	r2, #82	; 0x52
 800bf46:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800bf48:	6a3b      	ldr	r3, [r7, #32]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 800bf4e:	6a3b      	ldr	r3, [r7, #32]
 800bf50:	2237      	movs	r2, #55	; 0x37
 800bf52:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800bf54:	6a3b      	ldr	r3, [r7, #32]
 800bf56:	2200      	movs	r2, #0
 800bf58:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 800bf5a:	6a3b      	ldr	r3, [r7, #32]
 800bf5c:	2266      	movs	r2, #102	; 0x66
 800bf5e:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800bf60:	6a3b      	ldr	r3, [r7, #32]
 800bf62:	2200      	movs	r2, #0
 800bf64:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 800bf66:	6a3b      	ldr	r3, [r7, #32]
 800bf68:	2244      	movs	r2, #68	; 0x44
 800bf6a:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	2203      	movs	r2, #3
 800bf70:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	22f5      	movs	r2, #245	; 0xf5
 800bf76:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 800bf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7a:	2203      	movs	r2, #3
 800bf7c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 800bf7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf80:	2205      	movs	r2, #5
 800bf82:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800bf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf86:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800bf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800bf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8e:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800bf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf92:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2208      	movs	r2, #8
 800bf98:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2228      	movs	r2, #40	; 0x28
 800bfa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa6:	22bb      	movs	r2, #187	; 0xbb
 800bfa8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfac:	2226      	movs	r2, #38	; 0x26
 800bfae:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bfb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3718      	adds	r7, #24
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <VL53L1_preset_mode_special_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b090      	sub	sp, #64	; 0x40
 800bfc0:	af0a      	add	r7, sp, #40	; 0x28
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
 800bfc8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	9304      	str	r3, [sp, #16]
 800bfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd4:	9303      	str	r3, [sp, #12]
 800bfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd8:	9302      	str	r3, [sp, #8]
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	9301      	str	r3, [sp, #4]
 800bfde:	6a3b      	ldr	r3, [r7, #32]
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	68b9      	ldr	r1, [r7, #8]
 800bfe8:	68f8      	ldr	r0, [r7, #12]
 800bfea:	f7ff ff49 	bl	800be80 <VL53L1_preset_mode_histogram_short_range>
 800bfee:	4603      	mov	r3, r0
 800bff0:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800bff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d15a      	bne.n	800c0b0 <VL53L1_preset_mode_special_histogram_short_range+0xf4>





		VL53L1_init_histogram_config_structure(
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	9308      	str	r3, [sp, #32]
 800bffe:	2301      	movs	r3, #1
 800c000:	9307      	str	r3, [sp, #28]
 800c002:	2301      	movs	r3, #1
 800c004:	9306      	str	r3, [sp, #24]
 800c006:	2301      	movs	r3, #1
 800c008:	9305      	str	r3, [sp, #20]
 800c00a:	2300      	movs	r3, #0
 800c00c:	9304      	str	r3, [sp, #16]
 800c00e:	2300      	movs	r3, #0
 800c010:	9303      	str	r3, [sp, #12]
 800c012:	2300      	movs	r3, #0
 800c014:	9302      	str	r3, [sp, #8]
 800c016:	2301      	movs	r3, #1
 800c018:	9301      	str	r3, [sp, #4]
 800c01a:	2301      	movs	r3, #1
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	2300      	movs	r3, #0
 800c020:	2200      	movs	r2, #0
 800c022:	2107      	movs	r1, #7
 800c024:	2007      	movs	r0, #7
 800c026:	f001 f8f8 	bl	800d21a <VL53L1_init_histogram_config_structure>
				7, 7, 0, 0, 1, 1,
				0, 0, 0, 1, 1, 1,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800c02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02c:	3302      	adds	r3, #2
 800c02e:	9308      	str	r3, [sp, #32]
 800c030:	2301      	movs	r3, #1
 800c032:	9307      	str	r3, [sp, #28]
 800c034:	2301      	movs	r3, #1
 800c036:	9306      	str	r3, [sp, #24]
 800c038:	2301      	movs	r3, #1
 800c03a:	9305      	str	r3, [sp, #20]
 800c03c:	2300      	movs	r3, #0
 800c03e:	9304      	str	r3, [sp, #16]
 800c040:	2300      	movs	r3, #0
 800c042:	9303      	str	r3, [sp, #12]
 800c044:	2300      	movs	r3, #0
 800c046:	9302      	str	r3, [sp, #8]
 800c048:	2301      	movs	r3, #1
 800c04a:	9301      	str	r3, [sp, #4]
 800c04c:	2301      	movs	r3, #1
 800c04e:	9300      	str	r3, [sp, #0]
 800c050:	2300      	movs	r3, #0
 800c052:	2200      	movs	r2, #0
 800c054:	2107      	movs	r1, #7
 800c056:	2007      	movs	r0, #7
 800c058:	f001 f96f 	bl	800d33a <VL53L1_init_histogram_multizone_config_structure>
				0, 0, 0, 1, 1, 1,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05e:	9300      	str	r3, [sp, #0]
 800c060:	6a3b      	ldr	r3, [r7, #32]
 800c062:	683a      	ldr	r2, [r7, #0]
 800c064:	68b9      	ldr	r1, [r7, #8]
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 fb2d 	bl	800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x02;
 800c06c:	6a3b      	ldr	r3, [r7, #32]
 800c06e:	2202      	movs	r2, #2
 800c070:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 800c072:	6a3b      	ldr	r3, [r7, #32]
 800c074:	2203      	movs	r2, #3
 800c076:	725a      	strb	r2, [r3, #9]



		pgeneral->cal_config__vcsel_start = 0x00;
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	2200      	movs	r2, #0
 800c07c:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__target = 0x31;
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	2231      	movs	r2, #49	; 0x31
 800c082:	721a      	strb	r2, [r3, #8]



		pdynamic->sd_config__woi_sd0 = 0x02;
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	2202      	movs	r2, #2
 800c088:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x03;
 800c08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08c:	2203      	movs	r2, #3
 800c08e:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800c090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c092:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800c094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c096:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800c098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09a:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800c09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09e:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x10;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2210      	movs	r2, #16
 800c0a4:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x18;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2218      	movs	r2, #24
 800c0ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	}

	LOG_FUNCTION_END(status);

	return status;
 800c0b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3718      	adds	r7, #24
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <VL53L1_preset_mode_histogram_short_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b090      	sub	sp, #64	; 0x40
 800c0c0:	af0a      	add	r7, sp, #40	; 0x28
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	607a      	str	r2, [r7, #4]
 800c0c8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800c0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d0:	9304      	str	r3, [sp, #16]
 800c0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d4:	9303      	str	r3, [sp, #12]
 800c0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d8:	9302      	str	r3, [sp, #8]
 800c0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0dc:	9301      	str	r3, [sp, #4]
 800c0de:	6a3b      	ldr	r3, [r7, #32]
 800c0e0:	9300      	str	r3, [sp, #0]
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	68b9      	ldr	r1, [r7, #8]
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	f7ff fec9 	bl	800be80 <VL53L1_preset_mode_histogram_short_range>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	75fb      	strb	r3, [r7, #23]
				ptuning_parms,
				pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c0f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d13b      	bne.n	800c172 <VL53L1_preset_mode_histogram_short_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	9308      	str	r3, [sp, #32]
 800c0fe:	2302      	movs	r3, #2
 800c100:	9307      	str	r3, [sp, #28]
 800c102:	2302      	movs	r3, #2
 800c104:	9306      	str	r3, [sp, #24]
 800c106:	2301      	movs	r3, #1
 800c108:	9305      	str	r3, [sp, #20]
 800c10a:	2301      	movs	r3, #1
 800c10c:	9304      	str	r3, [sp, #16]
 800c10e:	2309      	movs	r3, #9
 800c110:	9303      	str	r3, [sp, #12]
 800c112:	2308      	movs	r3, #8
 800c114:	9302      	str	r3, [sp, #8]
 800c116:	2301      	movs	r3, #1
 800c118:	9301      	str	r3, [sp, #4]
 800c11a:	2301      	movs	r3, #1
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	2301      	movs	r3, #1
 800c120:	2200      	movs	r2, #0
 800c122:	2107      	movs	r1, #7
 800c124:	2007      	movs	r0, #7
 800c126:	f001 f878 	bl	800d21a <VL53L1_init_histogram_config_structure>
				  7,   7, 0, 1, 1, 1,
				8+0, 8+1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800c12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12c:	3302      	adds	r3, #2
 800c12e:	9308      	str	r3, [sp, #32]
 800c130:	2302      	movs	r3, #2
 800c132:	9307      	str	r3, [sp, #28]
 800c134:	2302      	movs	r3, #2
 800c136:	9306      	str	r3, [sp, #24]
 800c138:	2301      	movs	r3, #1
 800c13a:	9305      	str	r3, [sp, #20]
 800c13c:	2301      	movs	r3, #1
 800c13e:	9304      	str	r3, [sp, #16]
 800c140:	2309      	movs	r3, #9
 800c142:	9303      	str	r3, [sp, #12]
 800c144:	2308      	movs	r3, #8
 800c146:	9302      	str	r3, [sp, #8]
 800c148:	2301      	movs	r3, #1
 800c14a:	9301      	str	r3, [sp, #4]
 800c14c:	2301      	movs	r3, #1
 800c14e:	9300      	str	r3, [sp, #0]
 800c150:	2301      	movs	r3, #1
 800c152:	2200      	movs	r2, #0
 800c154:	2107      	movs	r1, #7
 800c156:	2007      	movs	r0, #7
 800c158:	f001 f8ef 	bl	800d33a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	6a3b      	ldr	r3, [r7, #32]
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	68b9      	ldr	r1, [r7, #8]
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 faad 	bl	800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	22bb      	movs	r2, #187	; 0xbb
 800c170:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800c172:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c176:	4618      	mov	r0, r3
 800c178:	3718      	adds	r7, #24
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <VL53L1_preset_mode_histogram_short_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b08c      	sub	sp, #48	; 0x30
 800c182:	af06      	add	r7, sp, #24
 800c184:	60f8      	str	r0, [r7, #12]
 800c186:	60b9      	str	r1, [r7, #8]
 800c188:	607a      	str	r2, [r7, #4]
 800c18a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c18c:	2300      	movs	r3, #0
 800c18e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range_mm1(
 800c190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c192:	9304      	str	r3, [sp, #16]
 800c194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c196:	9303      	str	r3, [sp, #12]
 800c198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19a:	9302      	str	r3, [sp, #8]
 800c19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	6a3b      	ldr	r3, [r7, #32]
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	68b9      	ldr	r1, [r7, #8]
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f7ff ff86 	bl	800c0bc <VL53L1_preset_mode_histogram_short_range_mm1>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c1b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d102      	bne.n	800c1c2 <VL53L1_preset_mode_histogram_short_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800c1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1be:	22db      	movs	r2, #219	; 0xdb
 800c1c0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c1c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3718      	adds	r7, #24
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <VL53L1_preset_mode_histogram_characterisation>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b08c      	sub	sp, #48	; 0x30
 800c1d2:	af06      	add	r7, sp, #24
 800c1d4:	60f8      	str	r0, [r7, #12]
 800c1d6:	60b9      	str	r1, [r7, #8]
 800c1d8:	607a      	str	r2, [r7, #4]
 800c1da:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	9304      	str	r3, [sp, #16]
 800c1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e6:	9303      	str	r3, [sp, #12]
 800c1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ea:	9302      	str	r3, [sp, #8]
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ee:	9301      	str	r3, [sp, #4]
 800c1f0:	6a3b      	ldr	r3, [r7, #32]
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	68b9      	ldr	r1, [r7, #8]
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f7ff f9b9 	bl	800b572 <VL53L1_preset_mode_histogram_ranging>
 800c200:	4603      	mov	r3, r0
 800c202:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c204:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10b      	bne.n	800c224 <VL53L1_preset_mode_histogram_characterisation+0x56>



		pstatic->debug__ctrl = 0x01;
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	2201      	movs	r2, #1
 800c210:	709a      	strb	r2, [r3, #2]
		psystem->power_management__go1_power_force = 0x01;
 800c212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c214:	2201      	movs	r2, #1
 800c216:	701a      	strb	r2, [r3, #0]

		pdynamic->system__sequence_config               =
 800c218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21a:	2283      	movs	r2, #131	; 0x83
 800c21c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_VHV_EN |
				VL53L1_SEQUENCE_PHASECAL_EN |
				VL53L1_SEQUENCE_RANGE_EN;

		psystem->system__mode_start                     =
 800c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c220:	222e      	movs	r2, #46	; 0x2e
 800c222:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c224:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3718      	adds	r7, #24
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <VL53L1_preset_mode_histogram_xtalk_planar>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b090      	sub	sp, #64	; 0x40
 800c234:	af0a      	add	r7, sp, #40	; 0x28
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	607a      	str	r2, [r7, #4]
 800c23c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c23e:	2300      	movs	r3, #0
 800c240:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_multizone_long_range(
 800c242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c244:	9304      	str	r3, [sp, #16]
 800c246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c248:	9303      	str	r3, [sp, #12]
 800c24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24c:	9302      	str	r3, [sp, #8]
 800c24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c250:	9301      	str	r3, [sp, #4]
 800c252:	6a3b      	ldr	r3, [r7, #32]
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	68b9      	ldr	r1, [r7, #8]
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f000 f9ba 	bl	800c5d6 <VL53L1_preset_mode_histogram_multizone_long_range>
 800c262:	4603      	mov	r3, r0
 800c264:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c266:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d151      	bne.n	800c312 <VL53L1_preset_mode_histogram_xtalk_planar+0xe2>



		status =
			VL53L1_zone_preset_xtalk_planar(
 800c26e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c270:	6838      	ldr	r0, [r7, #0]
 800c272:	f00a fb1c 	bl	80168ae <VL53L1_zone_preset_xtalk_planar>
 800c276:	4603      	mov	r3, r0
 800c278:	75fb      	strb	r3, [r7, #23]
				pgeneral,
				pzone_cfg);



		ptiming->range_config__vcsel_period_a = 0x09;
 800c27a:	6a3b      	ldr	r3, [r7, #32]
 800c27c:	2209      	movs	r2, #9
 800c27e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800c280:	6a3b      	ldr	r3, [r7, #32]
 800c282:	2209      	movs	r2, #9
 800c284:	725a      	strb	r2, [r3, #9]



		VL53L1_init_histogram_config_structure(
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	9308      	str	r3, [sp, #32]
 800c28a:	2304      	movs	r3, #4
 800c28c:	9307      	str	r3, [sp, #28]
 800c28e:	2303      	movs	r3, #3
 800c290:	9306      	str	r3, [sp, #24]
 800c292:	2302      	movs	r3, #2
 800c294:	9305      	str	r3, [sp, #20]
 800c296:	2301      	movs	r3, #1
 800c298:	9304      	str	r3, [sp, #16]
 800c29a:	2300      	movs	r3, #0
 800c29c:	9303      	str	r3, [sp, #12]
 800c29e:	2307      	movs	r3, #7
 800c2a0:	9302      	str	r3, [sp, #8]
 800c2a2:	2304      	movs	r3, #4
 800c2a4:	9301      	str	r3, [sp, #4]
 800c2a6:	2303      	movs	r3, #3
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	2302      	movs	r3, #2
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	2100      	movs	r1, #0
 800c2b0:	2007      	movs	r0, #7
 800c2b2:	f000 ffb2 	bl	800d21a <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			phistogram);



		VL53L1_init_histogram_multizone_config_structure(
 800c2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b8:	3302      	adds	r3, #2
 800c2ba:	9308      	str	r3, [sp, #32]
 800c2bc:	2304      	movs	r3, #4
 800c2be:	9307      	str	r3, [sp, #28]
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	9306      	str	r3, [sp, #24]
 800c2c4:	2302      	movs	r3, #2
 800c2c6:	9305      	str	r3, [sp, #20]
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	9304      	str	r3, [sp, #16]
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	9303      	str	r3, [sp, #12]
 800c2d0:	2307      	movs	r3, #7
 800c2d2:	9302      	str	r3, [sp, #8]
 800c2d4:	2304      	movs	r3, #4
 800c2d6:	9301      	str	r3, [sp, #4]
 800c2d8:	2303      	movs	r3, #3
 800c2da:	9300      	str	r3, [sp, #0]
 800c2dc:	2302      	movs	r3, #2
 800c2de:	2201      	movs	r2, #1
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	2007      	movs	r0, #7
 800c2e4:	f001 f829 	bl	800d33a <VL53L1_init_histogram_multizone_config_structure>
			&(pzone_cfg->multizone_hist_cfg));




		if (status == VL53L1_ERROR_NONE) {
 800c2e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d108      	bne.n	800c302 <VL53L1_preset_mode_histogram_xtalk_planar+0xd2>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800c2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f2:	3302      	adds	r3, #2
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	6879      	ldr	r1, [r7, #4]
 800c2f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2fa:	f003 f97d 	bl	800f5f8 <VL53L1_set_histogram_multizone_initial_bin_config>
 800c2fe:	4603      	mov	r3, r0
 800c300:	75fb      	strb	r3, [r7, #23]
			&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	6a3b      	ldr	r3, [r7, #32]
 800c308:	683a      	ldr	r2, [r7, #0]
 800c30a:	68b9      	ldr	r1, [r7, #8]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 f9da 	bl	800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>

	}

	LOG_FUNCTION_END(status);

	return status;
 800c312:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c316:	4618      	mov	r0, r3
 800c318:	3718      	adds	r7, #24
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <VL53L1_preset_mode_histogram_xtalk_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b090      	sub	sp, #64	; 0x40
 800c322:	af0a      	add	r7, sp, #40	; 0x28
 800c324:	60f8      	str	r0, [r7, #12]
 800c326:	60b9      	str	r1, [r7, #8]
 800c328:	607a      	str	r2, [r7, #4]
 800c32a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c32c:	2300      	movs	r3, #0
 800c32e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800c330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c332:	9304      	str	r3, [sp, #16]
 800c334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c336:	9303      	str	r3, [sp, #12]
 800c338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33a:	9302      	str	r3, [sp, #8]
 800c33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33e:	9301      	str	r3, [sp, #4]
 800c340:	6a3b      	ldr	r3, [r7, #32]
 800c342:	9300      	str	r3, [sp, #0]
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	68b9      	ldr	r1, [r7, #8]
 800c34a:	68f8      	ldr	r0, [r7, #12]
 800c34c:	f7ff f911 	bl	800b572 <VL53L1_preset_mode_histogram_ranging>
 800c350:	4603      	mov	r3, r0
 800c352:	75fb      	strb	r3, [r7, #23]
			pzone_cfg);




	if (status == VL53L1_ERROR_NONE) {
 800c354:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d16e      	bne.n	800c43a <VL53L1_preset_mode_histogram_xtalk_mm1+0x11c>





		VL53L1_init_histogram_config_structure(
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	9308      	str	r3, [sp, #32]
 800c360:	230c      	movs	r3, #12
 800c362:	9307      	str	r3, [sp, #28]
 800c364:	230b      	movs	r3, #11
 800c366:	9306      	str	r3, [sp, #24]
 800c368:	230a      	movs	r3, #10
 800c36a:	9305      	str	r3, [sp, #20]
 800c36c:	2309      	movs	r3, #9
 800c36e:	9304      	str	r3, [sp, #16]
 800c370:	2308      	movs	r3, #8
 800c372:	9303      	str	r3, [sp, #12]
 800c374:	230f      	movs	r3, #15
 800c376:	9302      	str	r3, [sp, #8]
 800c378:	230c      	movs	r3, #12
 800c37a:	9301      	str	r3, [sp, #4]
 800c37c:	230b      	movs	r3, #11
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	230a      	movs	r3, #10
 800c382:	2209      	movs	r2, #9
 800c384:	2108      	movs	r1, #8
 800c386:	200f      	movs	r0, #15
 800c388:	f000 ff47 	bl	800d21a <VL53L1_init_histogram_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800c38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38e:	3302      	adds	r3, #2
 800c390:	9308      	str	r3, [sp, #32]
 800c392:	230c      	movs	r3, #12
 800c394:	9307      	str	r3, [sp, #28]
 800c396:	230b      	movs	r3, #11
 800c398:	9306      	str	r3, [sp, #24]
 800c39a:	230a      	movs	r3, #10
 800c39c:	9305      	str	r3, [sp, #20]
 800c39e:	2309      	movs	r3, #9
 800c3a0:	9304      	str	r3, [sp, #16]
 800c3a2:	2308      	movs	r3, #8
 800c3a4:	9303      	str	r3, [sp, #12]
 800c3a6:	230f      	movs	r3, #15
 800c3a8:	9302      	str	r3, [sp, #8]
 800c3aa:	230c      	movs	r3, #12
 800c3ac:	9301      	str	r3, [sp, #4]
 800c3ae:	230b      	movs	r3, #11
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	230a      	movs	r3, #10
 800c3b4:	2209      	movs	r2, #9
 800c3b6:	2108      	movs	r1, #8
 800c3b8:	200f      	movs	r0, #15
 800c3ba:	f000 ffbe 	bl	800d33a <VL53L1_init_histogram_multizone_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c0:	9300      	str	r3, [sp, #0]
 800c3c2:	6a3b      	ldr	r3, [r7, #32]
 800c3c4:	683a      	ldr	r2, [r7, #0]
 800c3c6:	68b9      	ldr	r1, [r7, #8]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 f97c 	bl	800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800c3ce:	6a3b      	ldr	r3, [r7, #32]
 800c3d0:	2209      	movs	r2, #9
 800c3d2:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800c3d4:	6a3b      	ldr	r3, [r7, #32]
 800c3d6:	2209      	movs	r2, #9
 800c3d8:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800c3da:	6a3b      	ldr	r3, [r7, #32]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800c3e0:	6a3b      	ldr	r3, [r7, #32]
 800c3e2:	2221      	movs	r2, #33	; 0x21
 800c3e4:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800c3e6:	6a3b      	ldr	r3, [r7, #32]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x21;
 800c3ec:	6a3b      	ldr	r3, [r7, #32]
 800c3ee:	2221      	movs	r2, #33	; 0x21
 800c3f0:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800c3f2:	6a3b      	ldr	r3, [r7, #32]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800c3f8:	6a3b      	ldr	r3, [r7, #32]
 800c3fa:	2229      	movs	r2, #41	; 0x29
 800c3fc:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800c3fe:	6a3b      	ldr	r3, [r7, #32]
 800c400:	2200      	movs	r2, #0
 800c402:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 800c404:	6a3b      	ldr	r3, [r7, #32]
 800c406:	2229      	movs	r2, #41	; 0x29
 800c408:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	2209      	movs	r2, #9
 800c40e:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	22f5      	movs	r2, #245	; 0xf5
 800c414:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800c416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c418:	2209      	movs	r2, #9
 800c41a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x09;
 800c41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41e:	2209      	movs	r2, #9
 800c420:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 800c422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c424:	2209      	movs	r2, #9
 800c426:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1 = 0x06;
 800c428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42a:	2206      	movs	r2, #6
 800c42c:	72da      	strb	r2, [r3, #11]

		pdynamic->system__sequence_config =
 800c42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c430:	22bb      	movs	r2, #187	; 0xbb
 800c432:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800c434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c436:	2226      	movs	r2, #38	; 0x26
 800c438:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c43a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3718      	adds	r7, #24
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <VL53L1_preset_mode_histogram_xtalk_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b08c      	sub	sp, #48	; 0x30
 800c44a:	af06      	add	r7, sp, #24
 800c44c:	60f8      	str	r0, [r7, #12]
 800c44e:	60b9      	str	r1, [r7, #8]
 800c450:	607a      	str	r2, [r7, #4]
 800c452:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c454:	2300      	movs	r3, #0
 800c456:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_xtalk_mm1(
 800c458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45a:	9304      	str	r3, [sp, #16]
 800c45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45e:	9303      	str	r3, [sp, #12]
 800c460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c462:	9302      	str	r3, [sp, #8]
 800c464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c466:	9301      	str	r3, [sp, #4]
 800c468:	6a3b      	ldr	r3, [r7, #32]
 800c46a:	9300      	str	r3, [sp, #0]
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	68b9      	ldr	r1, [r7, #8]
 800c472:	68f8      	ldr	r0, [r7, #12]
 800c474:	f7ff ff53 	bl	800c31e <VL53L1_preset_mode_histogram_xtalk_mm1>
 800c478:	4603      	mov	r3, r0
 800c47a:	75fb      	strb	r3, [r7, #23]
			psystem,
			ptuning_parms,
			pzone_cfg);


		pdynamic->system__sequence_config =
 800c47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47e:	22db      	movs	r2, #219	; 0xdb
 800c480:	745a      	strb	r2, [r3, #17]



	LOG_FUNCTION_END(status);

	return status;
 800c482:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <VL53L1_preset_mode_histogram_multizone>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b08c      	sub	sp, #48	; 0x30
 800c492:	af06      	add	r7, sp, #24
 800c494:	60f8      	str	r0, [r7, #12]
 800c496:	60b9      	str	r1, [r7, #8]
 800c498:	607a      	str	r2, [r7, #4]
 800c49a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c49c:	2300      	movs	r3, #0
 800c49e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800c4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a2:	9304      	str	r3, [sp, #16]
 800c4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a6:	9303      	str	r3, [sp, #12]
 800c4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4aa:	9302      	str	r3, [sp, #8]
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ae:	9301      	str	r3, [sp, #4]
 800c4b0:	6a3b      	ldr	r3, [r7, #32]
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	68b9      	ldr	r1, [r7, #8]
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f7ff fbb9 	bl	800bc32 <VL53L1_preset_mode_histogram_medium_range>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c4c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d12c      	bne.n	800c526 <VL53L1_preset_mode_histogram_multizone+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800c4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ce:	9304      	str	r3, [sp, #16]
 800c4d0:	2307      	movs	r3, #7
 800c4d2:	9303      	str	r3, [sp, #12]
 800c4d4:	2307      	movs	r3, #7
 800c4d6:	9302      	str	r3, [sp, #8]
 800c4d8:	2302      	movs	r3, #2
 800c4da:	9301      	str	r3, [sp, #4]
 800c4dc:	2308      	movs	r3, #8
 800c4de:	9300      	str	r3, [sp, #0]
 800c4e0:	2304      	movs	r3, #4
 800c4e2:	2202      	movs	r2, #2
 800c4e4:	2108      	movs	r1, #8
 800c4e6:	2004      	movs	r0, #4
 800c4e8:	f00a f96c 	bl	80167c4 <VL53L1_init_zone_config_structure>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f2:	785b      	ldrb	r3, [r3, #1]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800c4fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d108      	bne.n	800c516 <VL53L1_preset_mode_histogram_multizone+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800c504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c506:	3302      	adds	r3, #2
 800c508:	461a      	mov	r2, r3
 800c50a:	6879      	ldr	r1, [r7, #4]
 800c50c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c50e:	f003 f873 	bl	800f5f8 <VL53L1_set_histogram_multizone_initial_bin_config>
 800c512:	4603      	mov	r3, r0
 800c514:	75fb      	strb	r3, [r7, #23]
				pzone_cfg,
				phistogram,
				&(pzone_cfg->multizone_hist_cfg));
		}

		VL53L1_copy_hist_cfg_to_static_cfg(
 800c516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c518:	9300      	str	r3, [sp, #0]
 800c51a:	6a3b      	ldr	r3, [r7, #32]
 800c51c:	683a      	ldr	r2, [r7, #0]
 800c51e:	68b9      	ldr	r1, [r7, #8]
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 f8d0 	bl	800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800c526:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3718      	adds	r7, #24
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <VL53L1_preset_mode_histogram_multizone_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c532:	b580      	push	{r7, lr}
 800c534:	b08c      	sub	sp, #48	; 0x30
 800c536:	af06      	add	r7, sp, #24
 800c538:	60f8      	str	r0, [r7, #12]
 800c53a:	60b9      	str	r1, [r7, #8]
 800c53c:	607a      	str	r2, [r7, #4]
 800c53e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c540:	2300      	movs	r3, #0
 800c542:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800c544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c546:	9304      	str	r3, [sp, #16]
 800c548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54a:	9303      	str	r3, [sp, #12]
 800c54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54e:	9302      	str	r3, [sp, #8]
 800c550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c552:	9301      	str	r3, [sp, #4]
 800c554:	6a3b      	ldr	r3, [r7, #32]
 800c556:	9300      	str	r3, [sp, #0]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	68b9      	ldr	r1, [r7, #8]
 800c55e:	68f8      	ldr	r0, [r7, #12]
 800c560:	f7ff fc8e 	bl	800be80 <VL53L1_preset_mode_histogram_short_range>
 800c564:	4603      	mov	r3, r0
 800c566:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c568:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d12c      	bne.n	800c5ca <VL53L1_preset_mode_histogram_multizone_short_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800c570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c572:	9304      	str	r3, [sp, #16]
 800c574:	2307      	movs	r3, #7
 800c576:	9303      	str	r3, [sp, #12]
 800c578:	2307      	movs	r3, #7
 800c57a:	9302      	str	r3, [sp, #8]
 800c57c:	2302      	movs	r3, #2
 800c57e:	9301      	str	r3, [sp, #4]
 800c580:	2308      	movs	r3, #8
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	2304      	movs	r3, #4
 800c586:	2202      	movs	r2, #2
 800c588:	2108      	movs	r1, #8
 800c58a:	2004      	movs	r0, #4
 800c58c:	f00a f91a 	bl	80167c4 <VL53L1_init_zone_config_structure>
 800c590:	4603      	mov	r3, r0
 800c592:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800c594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c596:	785b      	ldrb	r3, [r3, #1]
 800c598:	3301      	adds	r3, #1
 800c59a:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800c5a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d108      	bne.n	800c5ba <VL53L1_preset_mode_histogram_multizone_short_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5aa:	3302      	adds	r3, #2
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	6879      	ldr	r1, [r7, #4]
 800c5b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5b2:	f003 f821 	bl	800f5f8 <VL53L1_set_histogram_multizone_initial_bin_config>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	75fb      	strb	r3, [r7, #23]
			);
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	6a3b      	ldr	r3, [r7, #32]
 800c5c0:	683a      	ldr	r2, [r7, #0]
 800c5c2:	68b9      	ldr	r1, [r7, #8]
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 f87e 	bl	800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800c5ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3718      	adds	r7, #24
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <VL53L1_preset_mode_histogram_multizone_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b08c      	sub	sp, #48	; 0x30
 800c5da:	af06      	add	r7, sp, #24
 800c5dc:	60f8      	str	r0, [r7, #12]
 800c5de:	60b9      	str	r1, [r7, #8]
 800c5e0:	607a      	str	r2, [r7, #4]
 800c5e2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800c5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ea:	9304      	str	r3, [sp, #16]
 800c5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ee:	9303      	str	r3, [sp, #12]
 800c5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f2:	9302      	str	r3, [sp, #8]
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f6:	9301      	str	r3, [sp, #4]
 800c5f8:	6a3b      	ldr	r3, [r7, #32]
 800c5fa:	9300      	str	r3, [sp, #0]
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	68b9      	ldr	r1, [r7, #8]
 800c602:	68f8      	ldr	r0, [r7, #12]
 800c604:	f7ff f9ee 	bl	800b9e4 <VL53L1_preset_mode_histogram_long_range>
 800c608:	4603      	mov	r3, r0
 800c60a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c60c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d12c      	bne.n	800c66e <VL53L1_preset_mode_histogram_multizone_long_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800c614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c616:	9304      	str	r3, [sp, #16]
 800c618:	2307      	movs	r3, #7
 800c61a:	9303      	str	r3, [sp, #12]
 800c61c:	2307      	movs	r3, #7
 800c61e:	9302      	str	r3, [sp, #8]
 800c620:	2302      	movs	r3, #2
 800c622:	9301      	str	r3, [sp, #4]
 800c624:	2308      	movs	r3, #8
 800c626:	9300      	str	r3, [sp, #0]
 800c628:	2304      	movs	r3, #4
 800c62a:	2202      	movs	r2, #2
 800c62c:	2108      	movs	r1, #8
 800c62e:	2004      	movs	r0, #4
 800c630:	f00a f8c8 	bl	80167c4 <VL53L1_init_zone_config_structure>
 800c634:	4603      	mov	r3, r0
 800c636:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800c638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63a:	785b      	ldrb	r3, [r3, #1]
 800c63c:	3301      	adds	r3, #1
 800c63e:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800c644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d108      	bne.n	800c65e <VL53L1_preset_mode_histogram_multizone_long_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800c64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64e:	3302      	adds	r3, #2
 800c650:	461a      	mov	r2, r3
 800c652:	6879      	ldr	r1, [r7, #4]
 800c654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c656:	f002 ffcf 	bl	800f5f8 <VL53L1_set_histogram_multizone_initial_bin_config>
 800c65a:	4603      	mov	r3, r0
 800c65c:	75fb      	strb	r3, [r7, #23]
				&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	6a3b      	ldr	r3, [r7, #32]
 800c664:	683a      	ldr	r2, [r7, #0]
 800c666:	68b9      	ldr	r1, [r7, #8]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 f82c 	bl	800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>
			pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800c66e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c672:	4618      	mov	r0, r3
 800c674:	3718      	adds	r7, #24
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b08a      	sub	sp, #40	; 0x28
 800c67e:	af04      	add	r7, sp, #16
 800c680:	60f8      	str	r0, [r7, #12]
 800c682:	60b9      	str	r1, [r7, #8]
 800c684:	607a      	str	r2, [r7, #4]
 800c686:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c688:	2300      	movs	r3, #0
 800c68a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800c68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68e:	9303      	str	r3, [sp, #12]
 800c690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c692:	9302      	str	r3, [sp, #8]
 800c694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c696:	9301      	str	r3, [sp, #4]
 800c698:	6a3b      	ldr	r3, [r7, #32]
 800c69a:	9300      	str	r3, [sp, #0]
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	68b9      	ldr	r1, [r7, #8]
 800c6a2:	68f8      	ldr	r0, [r7, #12]
 800c6a4:	f7fe fb9e 	bl	800ade4 <VL53L1_preset_mode_standard_ranging>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 800c6ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d102      	bne.n	800c6ba <VL53L1_preset_mode_olt+0x40>

		psystem->system__stream_count_ctrl = 0x01;
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	705a      	strb	r2, [r3, #1]

	LOG_FUNCTION_END(status);

	return status;
 800c6ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3718      	adds	r7, #24
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 800c6c6:	b480      	push	{r7}
 800c6c8:	b085      	sub	sp, #20
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	60f8      	str	r0, [r7, #12]
 800c6ce:	60b9      	str	r1, [r7, #8]
 800c6d0:	607a      	str	r2, [r7, #4]
 800c6d2:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	79db      	ldrb	r3, [r3, #7]
 800c708:	b29b      	uxth	r3, r3
				<< 8)
 800c70a:	021b      	lsls	r3, r3, #8
 800c70c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	7a1b      	ldrb	r3, [r3, #8]
 800c712:	b29b      	uxth	r3, r3
 800c714:	4413      	add	r3, r2
 800c716:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	785b      	ldrb	r3, [r3, #1]
 800c750:	b29b      	uxth	r3, r3
				<< 8)
 800c752:	021b      	lsls	r3, r3, #8
 800c754:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	789b      	ldrb	r3, [r3, #2]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	4413      	add	r3, r2
 800c75e:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	78db      	ldrb	r3, [r3, #3]
 800c768:	b29b      	uxth	r3, r3
				<< 8)
 800c76a:	021b      	lsls	r3, r3, #8
 800c76c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	791b      	ldrb	r3, [r3, #4]
 800c772:	b29b      	uxth	r3, r3
 800c774:	4413      	add	r3, r2
 800c776:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800c798:	69bb      	ldr	r3, [r7, #24]
 800c79a:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 800c7a0:	69bb      	ldr	r3, [r7, #24]
 800c7a2:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 800c7a4:	bf00      	nop
 800c7a6:	3714      	adds	r7, #20
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr

0800c7b0 <VL53L1_copy_hist_bins_to_static_cfg>:

void VL53L1_copy_hist_bins_to_static_cfg(
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_timing_config_t    *ptiming)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	79db      	ldrb	r3, [r3, #7]
 800c7f0:	b29b      	uxth	r3, r3
				<< 8)
 800c7f2:	021b      	lsls	r3, r3, #8
 800c7f4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	7a1b      	ldrb	r3, [r3, #8]
 800c7fa:	b29b      	uxth	r3, r3
 800c7fc:	4413      	add	r3, r2
 800c7fe:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	785b      	ldrb	r3, [r3, #1]
 800c830:	b29b      	uxth	r3, r3
				<< 8)
 800c832:	021b      	lsls	r3, r3, #8
 800c834:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	789b      	ldrb	r3, [r3, #2]
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	4413      	add	r3, r2
 800c83e:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	78db      	ldrb	r3, [r3, #3]
 800c848:	b29b      	uxth	r3, r3
				<< 8)
 800c84a:	021b      	lsls	r3, r3, #8
 800c84c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	791b      	ldrb	r3, [r3, #4]
 800c852:	b29b      	uxth	r3, r3
 800c854:	4413      	add	r3, r2
 800c856:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 800c86c:	bf00      	nop
 800c86e:	3714      	adds	r7, #20
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b08c      	sub	sp, #48	; 0x30
 800c87c:	af06      	add	r7, sp, #24
 800c87e:	60f8      	str	r0, [r7, #12]
 800c880:	60b9      	str	r1, [r7, #8]
 800c882:	607a      	str	r2, [r7, #4]
 800c884:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c886:	2300      	movs	r3, #0
 800c888:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800c88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88c:	9304      	str	r3, [sp, #16]
 800c88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c890:	9303      	str	r3, [sp, #12]
 800c892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c894:	9302      	str	r3, [sp, #8]
 800c896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c898:	9301      	str	r3, [sp, #4]
 800c89a:	6a3b      	ldr	r3, [r7, #32]
 800c89c:	9300      	str	r3, [sp, #0]
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	68b9      	ldr	r1, [r7, #8]
 800c8a4:	68f8      	ldr	r0, [r7, #12]
 800c8a6:	f7fe fe64 	bl	800b572 <VL53L1_preset_mode_histogram_ranging>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c8ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d10a      	bne.n	800c8cc <VL53L1_preset_mode_histogram_ranging_ref+0x54>



		phistogram->histogram_config__spad_array_selection = 0x01;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	701a      	strb	r2, [r3, #0]



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	6a3b      	ldr	r3, [r7, #32]
 800c8c2:	683a      	ldr	r2, [r7, #0]
 800c8c4:	68b9      	ldr	r1, [r7, #8]
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f7ff fefd 	bl	800c6c6 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800c8cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3718      	adds	r7, #24
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b085      	sub	sp, #20
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	3318      	adds	r3, #24
 800c8e4:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2230      	movs	r2, #48	; 0x30
 800c8fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f44f 523f 	mov.w	r2, #12224	; 0x2fc0
 800c904:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c906:	bf00      	nop
 800c908:	3714      	adds	r7, #20
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr

0800c912 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800c912:	b480      	push	{r7}
 800c914:	b085      	sub	sp, #20
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
 800c91a:	460b      	mov	r3, r1
 800c91c:	70fb      	strb	r3, [r7, #3]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	3318      	adds	r3, #24
 800c922:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	332c      	adds	r3, #44	; 0x2c
 800c928:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	78fa      	ldrb	r2, [r7, #3]
 800c92e:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	2200      	movs	r2, #0
 800c934:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	2202      	movs	r2, #2
 800c93a:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	2200      	movs	r2, #0
 800c940:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	2200      	movs	r2, #0
 800c946:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	78fa      	ldrb	r2, [r7, #3]
 800c94c:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	2200      	movs	r2, #0
 800c952:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	2202      	movs	r2, #2
 800c958:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	2200      	movs	r2, #0
 800c95e:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	2200      	movs	r2, #0
 800c964:	735a      	strb	r2, [r3, #13]

}
 800c966:	bf00      	nop
 800c968:	3714      	adds	r7, #20
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
	...

0800c974 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b086      	sub	sp, #24
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]


	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800c97c:	2300      	movs	r3, #0
 800c97e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	3318      	adds	r3, #24
 800c984:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	332c      	adds	r3, #44	; 0x2c
 800c98a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800c992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c996:	2b00      	cmp	r3, #0
 800c998:	d115      	bne.n	800c9c6 <VL53L1_update_ll_driver_rd_state+0x52>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2203      	movs	r2, #3
 800c99e:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2202      	movs	r2, #2
 800c9b6:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	735a      	strb	r2, [r3, #13]
 800c9c4:	e0be      	b.n	800cb44 <VL53L1_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	7a1b      	ldrb	r3, [r3, #8]
 800c9ca:	2bff      	cmp	r3, #255	; 0xff
 800c9cc:	d103      	bne.n	800c9d6 <VL53L1_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2280      	movs	r2, #128	; 0x80
 800c9d2:	721a      	strb	r2, [r3, #8]
 800c9d4:	e005      	b.n	800c9e2 <VL53L1_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	7a1b      	ldrb	r3, [r3, #8]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	b2da      	uxtb	r2, r3
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	721a      	strb	r2, [r3, #8]


		status = VL53L1_update_internal_stream_counters(Dev,
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	7a19      	ldrb	r1, [r3, #8]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f103 0209 	add.w	r2, r3, #9
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	330a      	adds	r3, #10
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f002 fdc2 	bl	800f57a <VL53L1_update_internal_stream_counters>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	7adb      	ldrb	r3, [r3, #11]
 800c9fe:	f083 0302 	eor.w	r3, r3, #2
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	79db      	ldrb	r3, [r3, #7]
 800ca0c:	3b03      	subs	r3, #3
 800ca0e:	2b05      	cmp	r3, #5
 800ca10:	f200 8082 	bhi.w	800cb18 <VL53L1_update_ll_driver_rd_state+0x1a4>
 800ca14:	a201      	add	r2, pc, #4	; (adr r2, 800ca1c <VL53L1_update_ll_driver_rd_state+0xa8>)
 800ca16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca1a:	bf00      	nop
 800ca1c:	0800ca35 	.word	0x0800ca35
 800ca20:	0800cb19 	.word	0x0800cb19
 800ca24:	0800cb19 	.word	0x0800cb19
 800ca28:	0800ca87 	.word	0x0800ca87
 800ca2c:	0800cabd 	.word	0x0800cabd
 800ca30:	0800cae7 	.word	0x0800cae7

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	f893 33a2 	ldrb.w	r3, [r3, #930]	; 0x3a2
 800ca3a:	f003 0302 	and.w	r3, r3, #2
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	dd03      	ble.n	800ca4a <VL53L1_update_ll_driver_rd_state+0xd6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2206      	movs	r2, #6
 800ca46:	71da      	strb	r2, [r3, #7]
 800ca48:	e00d      	b.n	800ca66 <VL53L1_update_ll_driver_rd_state+0xf2>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d303      	bcc.n	800ca60 <VL53L1_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2208      	movs	r2, #8
 800ca5c:	71da      	strb	r2, [r3, #7]
 800ca5e:	e002      	b.n	800ca66 <VL53L1_update_ll_driver_rd_state+0xf2>
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2207      	movs	r2, #7
 800ca64:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2200      	movs	r2, #0
 800ca76:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2200      	movs	r2, #0
 800ca82:	735a      	strb	r2, [r3, #13]

			break;
 800ca84:	e05e      	b.n	800cb44 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2200      	movs	r2, #0
 800ca96:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d303      	bcc.n	800cab4 <VL53L1_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2208      	movs	r2, #8
 800cab0:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800cab2:	e047      	b.n	800cb44 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2207      	movs	r2, #7
 800cab8:	71da      	strb	r2, [r3, #7]
			break;
 800caba:	e043      	b.n	800cb44 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	7b5b      	ldrb	r3, [r3, #13]
 800cac0:	3301      	adds	r3, #1
 800cac2:	b2da      	uxtb	r2, r3
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d303      	bcc.n	800cade <VL53L1_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2208      	movs	r2, #8
 800cada:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800cadc:	e032      	b.n	800cb44 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2207      	movs	r2, #7
 800cae2:	71da      	strb	r2, [r3, #7]
			break;
 800cae4:	e02e      	b.n	800cb44 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2200      	movs	r2, #0
 800caea:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	7b1b      	ldrb	r3, [r3, #12]
 800caf0:	f083 0301 	eor.w	r3, r3, #1
 800caf4:	b2da      	uxtb	r2, r3
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d303      	bcc.n	800cb10 <VL53L1_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2208      	movs	r2, #8
 800cb0c:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800cb0e:	e019      	b.n	800cb44 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2207      	movs	r2, #7
 800cb14:	71da      	strb	r2, [r3, #7]
			break;
 800cb16:	e015      	b.n	800cb44 <VL53L1_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2203      	movs	r2, #3
 800cb1c:	71da      	strb	r2, [r3, #7]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2200      	movs	r2, #0
 800cb22:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2200      	movs	r2, #0
 800cb28:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2202      	movs	r2, #2
 800cb34:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	735a      	strb	r2, [r3, #13]
			break;
 800cb42:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800cb44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3718      	adds	r7, #24
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b08d      	sub	sp, #52	; 0x34
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t  *pdev =
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	3318      	adds	r3, #24
 800cb62:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800cb6a:	3308      	adds	r3, #8
 800cb6c:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800cb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb70:	332c      	adds	r3, #44	; 0x2c
 800cb72:	623b      	str	r3, [r7, #32]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800cb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb76:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800cb7a:	61fb      	str	r3, [r7, #28]
	VL53L1_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800cb82:	61bb      	str	r3, [r7, #24]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800cb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb86:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800cb8a:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800cb90:	2300      	movs	r3, #0
 800cb92:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800cb94:	2300      	movs	r3, #0
 800cb96:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800cba2:	2300      	movs	r3, #0
 800cba4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800cbaa:	f003 031f 	and.w	r3, r3, #31
 800cbae:	74fb      	strb	r3, [r7, #19]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	78db      	ldrb	r3, [r3, #3]
 800cbb4:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 800cbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb8:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800cbbc:	f003 0302 	and.w	r3, r3, #2
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	bf14      	ite	ne
 800cbc4:	2301      	movne	r3, #1
 800cbc6:	2300      	moveq	r3, #0
 800cbc8:	b2db      	uxtb	r3, r3
	histogram_mode =
 800cbca:	747b      	strb	r3, [r7, #17]
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800cbd0:	111b      	asrs	r3, r3, #4
 800cbd2:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800cbd4:	f003 0302 	and.w	r3, r3, #2
 800cbd8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 800cbdc:	7c7b      	ldrb	r3, [r7, #17]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d008      	beq.n	800cbf4 <VL53L1_check_ll_driver_rd_state+0xa4>
		device_gph_id = (phist_data->result__interrupt_status &
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800cbe8:	111b      	asrs	r3, r3, #4
 800cbea:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800cbec:	f003 0302 	and.w	r3, r3, #2
 800cbf0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800cbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf6:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800cbfa:	f003 0320 	and.w	r3, r3, #32
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d04e      	beq.n	800cca0 <VL53L1_check_ll_driver_rd_state+0x150>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800cc02:	6a3b      	ldr	r3, [r7, #32]
 800cc04:	79db      	ldrb	r3, [r3, #7]
 800cc06:	2b06      	cmp	r3, #6
 800cc08:	d109      	bne.n	800cc1e <VL53L1_check_ll_driver_rd_state+0xce>
		VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800cc0a:	7c7b      	ldrb	r3, [r7, #17]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d14a      	bne.n	800cca6 <VL53L1_check_ll_driver_rd_state+0x156>
			if (device_range_status !=
 800cc10:	7cfb      	ldrb	r3, [r7, #19]
 800cc12:	2b12      	cmp	r3, #18
 800cc14:	d047      	beq.n	800cca6 <VL53L1_check_ll_driver_rd_state+0x156>
			VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800cc16:	23ef      	movs	r3, #239	; 0xef
 800cc18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cc1c:	e043      	b.n	800cca6 <VL53L1_check_ll_driver_rd_state+0x156>
				VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800cc1e:	6a3b      	ldr	r3, [r7, #32]
 800cc20:	7a1b      	ldrb	r3, [r3, #8]
 800cc22:	7cba      	ldrb	r2, [r7, #18]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d002      	beq.n	800cc2e <VL53L1_check_ll_driver_rd_state+0xde>
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800cc28:	23ee      	movs	r3, #238	; 0xee
 800cc2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800cc2e:	6a3b      	ldr	r3, [r7, #32]
 800cc30:	7adb      	ldrb	r3, [r3, #11]
 800cc32:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d002      	beq.n	800cc40 <VL53L1_check_ll_driver_rd_state+0xf0>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800cc3a:	23ed      	movs	r3, #237	; 0xed
 800cc3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_stream_count;
 800cc40:	6a3b      	ldr	r3, [r7, #32]
 800cc42:	7b5b      	ldrb	r3, [r3, #13]
 800cc44:	4619      	mov	r1, r3
		expected_stream_count =
 800cc46:	697a      	ldr	r2, [r7, #20]
 800cc48:	460b      	mov	r3, r1
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	440b      	add	r3, r1
 800cc4e:	005b      	lsls	r3, r3, #1
 800cc50:	4413      	add	r3, r2
 800cc52:	3302      	adds	r3, #2
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id;
 800cc58:	6a3b      	ldr	r3, [r7, #32]
 800cc5a:	7b5b      	ldrb	r3, [r3, #13]
 800cc5c:	4619      	mov	r1, r3
		expected_gph_id =
 800cc5e:	697a      	ldr	r2, [r7, #20]
 800cc60:	460b      	mov	r3, r1
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	440b      	add	r3, r1
 800cc66:	005b      	lsls	r3, r3, #1
 800cc68:	4413      	add	r3, r2
 800cc6a:	3303      	adds	r3, #3
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800cc70:	7c3a      	ldrb	r2, [r7, #16]
 800cc72:	7cbb      	ldrb	r3, [r7, #18]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d00a      	beq.n	800cc8e <VL53L1_check_ll_driver_rd_state+0x13e>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 800cc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d102      	bne.n	800cc88 <VL53L1_check_ll_driver_rd_state+0x138>
 800cc82:	7cbb      	ldrb	r3, [r7, #18]
 800cc84:	2bff      	cmp	r3, #255	; 0xff
 800cc86:	d002      	beq.n	800cc8e <VL53L1_check_ll_driver_rd_state+0x13e>
				(device_stream_count == 255)))
				status =
 800cc88:	23ec      	movs	r3, #236	; 0xec
 800cc8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800cc8e:	7bfa      	ldrb	r2, [r7, #15]
 800cc90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d005      	beq.n	800cca4 <VL53L1_check_ll_driver_rd_state+0x154>
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800cc98:	23eb      	movs	r3, #235	; 0xeb
 800cc9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cc9e:	e002      	b.n	800cca6 <VL53L1_check_ll_driver_rd_state+0x156>
		goto ENDFUNC;
 800cca0:	bf00      	nop
 800cca2:	e000      	b.n	800cca6 <VL53L1_check_ll_driver_rd_state+0x156>

	}



ENDFUNC:
 800cca4:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800cca6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3734      	adds	r7, #52	; 0x34
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr

0800ccb6 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b088      	sub	sp, #32
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	3318      	adds	r3, #24
 800ccc6:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800ccce:	3308      	adds	r3, #8
 800ccd0:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	332c      	adds	r3, #44	; 0x2c
 800ccd6:	613b      	str	r3, [r7, #16]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800ccde:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800cce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d11b      	bne.n	800cd26 <VL53L1_update_ll_driver_cfg_state+0x70>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	2203      	movs	r2, #3
 800ccf2:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	2200      	movs	r2, #0
 800cd04:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	2202      	movs	r2, #2
 800cd0a:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	2200      	movs	r2, #0
 800cd16:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800cd20:	2300      	movs	r3, #0
 800cd22:	773b      	strb	r3, [r7, #28]
 800cd24:	e0b1      	b.n	800ce8a <VL53L1_update_ll_driver_cfg_state+0x1d4>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	791b      	ldrb	r3, [r3, #4]
 800cd2a:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	799b      	ldrb	r3, [r3, #6]
 800cd30:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	785b      	ldrb	r3, [r3, #1]
 800cd36:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	785b      	ldrb	r3, [r3, #1]
 800cd3c:	2bff      	cmp	r3, #255	; 0xff
 800cd3e:	d103      	bne.n	800cd48 <VL53L1_update_ll_driver_cfg_state+0x92>
			pstate->cfg_stream_count = 0x80;
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	2280      	movs	r2, #128	; 0x80
 800cd44:	705a      	strb	r2, [r3, #1]
 800cd46:	e005      	b.n	800cd54 <VL53L1_update_ll_driver_cfg_state+0x9e>
		else
			pstate->cfg_stream_count++;
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	785b      	ldrb	r3, [r3, #1]
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	b2da      	uxtb	r2, r3
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	705a      	strb	r2, [r3, #1]


		status = VL53L1_update_internal_stream_counters(
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	7859      	ldrb	r1, [r3, #1]
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	1c9a      	adds	r2, r3, #2
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	3303      	adds	r3, #3
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f002 fc0a 	bl	800f57a <VL53L1_update_internal_stream_counters>
 800cd66:	4603      	mov	r3, r0
 800cd68:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	791b      	ldrb	r3, [r3, #4]
 800cd6e:	f083 0302 	eor.w	r3, r3, #2
 800cd72:	b2da      	uxtb	r2, r3
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2b05      	cmp	r3, #5
 800cd7e:	d053      	beq.n	800ce28 <VL53L1_update_ll_driver_cfg_state+0x172>
 800cd80:	2b05      	cmp	r3, #5
 800cd82:	dc69      	bgt.n	800ce58 <VL53L1_update_ll_driver_cfg_state+0x1a2>
 800cd84:	2b03      	cmp	r3, #3
 800cd86:	d002      	beq.n	800cd8e <VL53L1_update_ll_driver_cfg_state+0xd8>
 800cd88:	2b04      	cmp	r3, #4
 800cd8a:	d02d      	beq.n	800cde8 <VL53L1_update_ll_driver_cfg_state+0x132>
 800cd8c:	e064      	b.n	800ce58 <VL53L1_update_ll_driver_cfg_state+0x1a2>

		case VL53L1_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	2201      	movs	r2, #1
 800cd92:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800cd98:	69bb      	ldr	r3, [r7, #24]
 800cd9a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d909      	bls.n	800cdb6 <VL53L1_update_ll_driver_cfg_state+0x100>
				pstate->cfg_zone_id = 0;
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	2200      	movs	r2, #0
 800cda6:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	795b      	ldrb	r3, [r3, #5]
 800cdac:	f083 0301 	eor.w	r3, r3, #1
 800cdb0:	b2da      	uxtb	r2, r3
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	2201      	movs	r2, #1
 800cdba:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d106      	bne.n	800cdd4 <VL53L1_update_ll_driver_cfg_state+0x11e>
				pstate->cfg_internal_stream_count = 1;
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	2201      	movs	r2, #1
 800cdca:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	70da      	strb	r2, [r3, #3]
 800cdd2:	e005      	b.n	800cde0 <VL53L1_update_ll_driver_cfg_state+0x12a>
			} else {
				pstate->cfg_internal_stream_count = 0;
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	2201      	movs	r2, #1
 800cdde:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	2204      	movs	r2, #4
 800cde4:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800cde6:	e050      	b.n	800ce8a <VL53L1_update_ll_driver_cfg_state+0x1d4>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	799b      	ldrb	r3, [r3, #6]
 800cdec:	3301      	adds	r3, #1
 800cdee:	b2da      	uxtb	r2, r3
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800cdf8:	69bb      	ldr	r3, [r7, #24]
 800cdfa:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d940      	bls.n	800ce84 <VL53L1_update_ll_driver_cfg_state+0x1ce>

				pstate->cfg_zone_id = 0;
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	2200      	movs	r2, #0
 800ce06:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	795b      	ldrb	r3, [r3, #5]
 800ce0c:	f083 0301 	eor.w	r3, r3, #1
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800ce16:	69bb      	ldr	r3, [r7, #24]
 800ce18:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d031      	beq.n	800ce84 <VL53L1_update_ll_driver_cfg_state+0x1ce>
					pstate->cfg_device_state =
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	2205      	movs	r2, #5
 800ce24:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800ce26:	e02d      	b.n	800ce84 <VL53L1_update_ll_driver_cfg_state+0x1ce>

		case VL53L1_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	799b      	ldrb	r3, [r3, #6]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	b2da      	uxtb	r2, r3
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800ce38:	69bb      	ldr	r3, [r7, #24]
 800ce3a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d922      	bls.n	800ce88 <VL53L1_update_ll_driver_cfg_state+0x1d2>
				pstate->cfg_zone_id = 0;
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	2200      	movs	r2, #0
 800ce46:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	795b      	ldrb	r3, [r3, #5]
 800ce4c:	f083 0301 	eor.w	r3, r3, #1
 800ce50:	b2da      	uxtb	r2, r3
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	715a      	strb	r2, [r3, #5]
			}
			break;
 800ce56:	e017      	b.n	800ce88 <VL53L1_update_ll_driver_cfg_state+0x1d2>

		default:
			pstate->cfg_device_state =
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	2203      	movs	r2, #3
 800ce5c:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	2200      	movs	r2, #0
 800ce62:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	2200      	movs	r2, #0
 800ce68:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	2202      	movs	r2, #2
 800ce74:	711a      	strb	r2, [r3, #4]
					VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	719a      	strb	r2, [r3, #6]
			break;
 800ce82:	e002      	b.n	800ce8a <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800ce84:	bf00      	nop
 800ce86:	e000      	b.n	800ce8a <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800ce88:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d11d      	bne.n	800ced0 <VL53L1_update_ll_driver_cfg_state+0x21a>

		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800ce94:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800ce96:	7f3b      	ldrb	r3, [r7, #28]
 800ce98:	3b01      	subs	r3, #1
 800ce9a:	b2d8      	uxtb	r0, r3
 800ce9c:	68f9      	ldr	r1, [r7, #12]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	4413      	add	r3, r2
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	440b      	add	r3, r1
 800cea8:	3302      	adds	r3, #2
 800ceaa:	4602      	mov	r2, r0
 800ceac:	701a      	strb	r2, [r3, #0]

		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	7b5b      	ldrb	r3, [r3, #13]
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	7f7b      	ldrb	r3, [r7, #29]
 800ceb6:	f083 0302 	eor.w	r3, r3, #2
 800ceba:	b2d8      	uxtb	r0, r3
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	460b      	mov	r3, r1
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	440b      	add	r3, r1
 800cec4:	005b      	lsls	r3, r3, #1
 800cec6:	4413      	add	r3, r2
 800cec8:	3303      	adds	r3, #3
 800ceca:	4602      	mov	r2, r0
 800cecc:	701a      	strb	r2, [r3, #0]
 800cece:	e013      	b.n	800cef8 <VL53L1_update_ll_driver_cfg_state+0x242>
			prev_cfg_gph_id ^ VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800ced0:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800ced2:	68f9      	ldr	r1, [r7, #12]
 800ced4:	4613      	mov	r3, r2
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	4413      	add	r3, r2
 800ceda:	005b      	lsls	r3, r3, #1
 800cedc:	440b      	add	r3, r1
 800cede:	3302      	adds	r3, #2
 800cee0:	7f3a      	ldrb	r2, [r7, #28]
 800cee2:	701a      	strb	r2, [r3, #0]
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 800cee4:	7fba      	ldrb	r2, [r7, #30]
 800cee6:	68f9      	ldr	r1, [r7, #12]
 800cee8:	4613      	mov	r3, r2
 800ceea:	009b      	lsls	r3, r3, #2
 800ceec:	4413      	add	r3, r2
 800ceee:	005b      	lsls	r3, r3, #1
 800cef0:	440b      	add	r3, r1
 800cef2:	3303      	adds	r3, #3
 800cef4:	7f7a      	ldrb	r2, [r7, #29]
 800cef6:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800cef8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3720      	adds	r7, #32
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b083      	sub	sp, #12
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	7c1a      	ldrb	r2, [r3, #16]
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	7c52      	ldrb	r2, [r2, #17]
 800cf1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	3302      	adds	r3, #2
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	7c92      	ldrb	r2, [r2, #18]
 800cf28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	3303      	adds	r3, #3
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	7cd2      	ldrb	r2, [r2, #19]
 800cf32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	3304      	adds	r3, #4
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	7d12      	ldrb	r2, [r2, #20]
 800cf3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	3305      	adds	r3, #5
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	7d52      	ldrb	r2, [r2, #21]
 800cf46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	3306      	adds	r3, #6
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	7d92      	ldrb	r2, [r2, #22]
 800cf50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	3307      	adds	r3, #7
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	7dd2      	ldrb	r2, [r2, #23]
 800cf5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	3308      	adds	r3, #8
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	7e12      	ldrb	r2, [r2, #24]
 800cf64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	3309      	adds	r3, #9
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	7e52      	ldrb	r2, [r2, #25]
 800cf6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	330a      	adds	r3, #10
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	7e92      	ldrb	r2, [r2, #26]
 800cf78:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	330b      	adds	r3, #11
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	7ed2      	ldrb	r2, [r2, #27]
 800cf82:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	330c      	adds	r3, #12
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	7f12      	ldrb	r2, [r2, #28]
 800cf8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	330d      	adds	r3, #13
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	7f52      	ldrb	r2, [r2, #29]
 800cf96:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	330e      	adds	r3, #14
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	7f92      	ldrb	r2, [r2, #30]
 800cfa0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	330f      	adds	r3, #15
 800cfa6:	687a      	ldr	r2, [r7, #4]
 800cfa8:	7fd2      	ldrb	r2, [r2, #31]
 800cfaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	3310      	adds	r3, #16
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	f892 2020 	ldrb.w	r2, [r2, #32]
 800cfb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	3311      	adds	r3, #17
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800cfc2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	3312      	adds	r3, #18
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800cfce:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	3313      	adds	r3, #19
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800cfda:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	3314      	adds	r3, #20
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800cfe6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	3315      	adds	r3, #21
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800cff2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	3316      	adds	r3, #22
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800cffe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	3317      	adds	r3, #23
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800d00a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	3318      	adds	r3, #24
 800d010:	687a      	ldr	r2, [r7, #4]
 800d012:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800d016:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	3319      	adds	r3, #25
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800d022:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	331a      	adds	r3, #26
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800d02e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	331b      	adds	r3, #27
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800d03a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	331c      	adds	r3, #28
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800d046:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	331d      	adds	r3, #29
 800d04c:	687a      	ldr	r2, [r7, #4]
 800d04e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800d052:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	331e      	adds	r3, #30
 800d058:	687a      	ldr	r2, [r7, #4]
 800d05a:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800d05e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	331f      	adds	r3, #31
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800d06a:	701a      	strb	r2, [r3, #0]
}
 800d06c:	bf00      	nop
 800d06e:	370c      	adds	r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr

0800d078 <VL53L1_init_system_results>:


void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	22ff      	movs	r2, #255	; 0xff
 800d084:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	22ff      	movs	r2, #255	; 0xff
 800d08a:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	22ff      	movs	r2, #255	; 0xff
 800d090:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	22ff      	movs	r2, #255	; 0xff
 800d096:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d09e:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0a6:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0ae:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0b6:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0be:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0c6:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0ce:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0d6:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0de:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0e6:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0ee:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0f6:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0fe:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d106:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d10e:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d116:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d11e:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d126:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d12e:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	22ff      	movs	r2, #255	; 0xff
 800d134:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800d138:	bf00      	nop
 800d13a:	370c      	adds	r7, #12
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53L1_zone_results_t  *pdata)
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
 800d14a:	4603      	mov	r3, r0
 800d14c:	6039      	str	r1, [r7, #0]
 800d14e:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 800d150:	2300      	movs	r3, #0
 800d152:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	2210      	movs	r2, #16
 800d158:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	79fa      	ldrb	r2, [r7, #7]
 800d15e:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 800d160:	2300      	movs	r3, #0
 800d162:	73fb      	strb	r3, [r7, #15]
 800d164:	e017      	b.n	800d196 <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53L1_p_002[z]);
 800d166:	7bfa      	ldrb	r2, [r7, #15]
 800d168:	4613      	mov	r3, r2
 800d16a:	011b      	lsls	r3, r3, #4
 800d16c:	4413      	add	r3, r2
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	683a      	ldr	r2, [r7, #0]
 800d172:	4413      	add	r3, r2
 800d174:	3304      	adds	r3, #4
 800d176:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	2203      	movs	r2, #3
 800d17c:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	2203      	movs	r2, #3
 800d182:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	2204      	movs	r2, #4
 800d188:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	2200      	movs	r2, #0
 800d18e:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 800d190:	7bfb      	ldrb	r3, [r7, #15]
 800d192:	3301      	adds	r3, #1
 800d194:	73fb      	strb	r3, [r7, #15]
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	7bfa      	ldrb	r2, [r7, #15]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d3e2      	bcc.n	800d166 <V53L1_init_zone_results_structure+0x22>
	}
}
 800d1a0:	bf00      	nop
 800d1a2:	bf00      	nop
 800d1a4:	3714      	adds	r7, #20
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr

0800d1ae <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53L1_DEV              Dev)
{
 800d1ae:	b480      	push	{r7}
 800d1b0:	b087      	sub	sp, #28
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverResults_t  *pres =
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d1bc:	3308      	adds	r3, #8
 800d1be:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53L1_MAX_USER_ZONES;
 800d1c4:	2310      	movs	r3, #16
 800d1c6:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d1ce:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	75fb      	strb	r3, [r7, #23]
 800d1d4:	e016      	b.n	800d204 <V53L1_init_zone_dss_configs+0x56>
		pdata->VL53L1_p_002[z].dss_mode =
 800d1d6:	7dfa      	ldrb	r2, [r7, #23]
 800d1d8:	68b9      	ldr	r1, [r7, #8]
 800d1da:	4613      	mov	r3, r2
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	4413      	add	r3, r2
 800d1e0:	005b      	lsls	r3, r3, #1
 800d1e2:	440b      	add	r3, r1
 800d1e4:	3304      	adds	r3, #4
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	701a      	strb	r2, [r3, #0]
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53L1_p_002[z].dss_requested_effective_spad_count = 0;
 800d1ea:	7dfa      	ldrb	r2, [r7, #23]
 800d1ec:	68b9      	ldr	r1, [r7, #8]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	4413      	add	r3, r2
 800d1f4:	005b      	lsls	r3, r3, #1
 800d1f6:	440b      	add	r3, r1
 800d1f8:	3306      	adds	r3, #6
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800d1fe:	7dfb      	ldrb	r3, [r7, #23]
 800d200:	3301      	adds	r3, #1
 800d202:	75fb      	strb	r3, [r7, #23]
 800d204:	7dfa      	ldrb	r2, [r7, #23]
 800d206:	7bfb      	ldrb	r3, [r7, #15]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d3e4      	bcc.n	800d1d6 <V53L1_init_zone_dss_configs+0x28>
	}
}
 800d20c:	bf00      	nop
 800d20e:	bf00      	nop
 800d210:	371c      	adds	r7, #28
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr

0800d21a <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800d21a:	b490      	push	{r4, r7}
 800d21c:	b082      	sub	sp, #8
 800d21e:	af00      	add	r7, sp, #0
 800d220:	4604      	mov	r4, r0
 800d222:	4608      	mov	r0, r1
 800d224:	4611      	mov	r1, r2
 800d226:	461a      	mov	r2, r3
 800d228:	4623      	mov	r3, r4
 800d22a:	71fb      	strb	r3, [r7, #7]
 800d22c:	4603      	mov	r3, r0
 800d22e:	71bb      	strb	r3, [r7, #6]
 800d230:	460b      	mov	r3, r1
 800d232:	717b      	strb	r3, [r7, #5]
 800d234:	4613      	mov	r3, r2
 800d236:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800d238:	79bb      	ldrb	r3, [r7, #6]
 800d23a:	011b      	lsls	r3, r3, #4
 800d23c:	b2da      	uxtb	r2, r3
 800d23e:	79fb      	ldrb	r3, [r7, #7]
 800d240:	4413      	add	r3, r2
 800d242:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800d244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d246:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800d248:	793b      	ldrb	r3, [r7, #4]
 800d24a:	011b      	lsls	r3, r3, #4
 800d24c:	b2da      	uxtb	r2, r3
 800d24e:	797b      	ldrb	r3, [r7, #5]
 800d250:	4413      	add	r3, r2
 800d252:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800d254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d256:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800d258:	7d3b      	ldrb	r3, [r7, #20]
 800d25a:	011b      	lsls	r3, r3, #4
 800d25c:	b2da      	uxtb	r2, r3
 800d25e:	7c3b      	ldrb	r3, [r7, #16]
 800d260:	4413      	add	r3, r2
 800d262:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800d264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d266:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800d268:	7f3b      	ldrb	r3, [r7, #28]
 800d26a:	011b      	lsls	r3, r3, #4
 800d26c:	b2da      	uxtb	r2, r3
 800d26e:	7e3b      	ldrb	r3, [r7, #24]
 800d270:	4413      	add	r3, r2
 800d272:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800d274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d276:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800d278:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d27c:	011b      	lsls	r3, r3, #4
 800d27e:	b2da      	uxtb	r2, r3
 800d280:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d284:	4413      	add	r3, r2
 800d286:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800d288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28a:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800d28c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d290:	011b      	lsls	r3, r3, #4
 800d292:	b2da      	uxtb	r2, r3
 800d294:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d298:	4413      	add	r3, r2
 800d29a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800d29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29e:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800d2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a2:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800d2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a6:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800d2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2aa:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800d2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ae:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800d2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b2:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800d2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b6:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800d2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ba:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800d2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2be:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800d2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d2c6:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800d2c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d2cc:	011b      	lsls	r3, r3, #4
 800d2ce:	b2da      	uxtb	r2, r3
 800d2d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d2d4:	4413      	add	r3, r2
 800d2d6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800d2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2da:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800d2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2de:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d2e2:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800d2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ec:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800d2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f0:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f4:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800d2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f8:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800d2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fc:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800d2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d300:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800d302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d304:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800d306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d308:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800d30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30c:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800d30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d310:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800d312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d314:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800d316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d318:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800d31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d320:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800d322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d328:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800d32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32c:	2200      	movs	r2, #0
 800d32e:	701a      	strb	r2, [r3, #0]

}
 800d330:	bf00      	nop
 800d332:	3708      	adds	r7, #8
 800d334:	46bd      	mov	sp, r7
 800d336:	bc90      	pop	{r4, r7}
 800d338:	4770      	bx	lr

0800d33a <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800d33a:	b490      	push	{r4, r7}
 800d33c:	b082      	sub	sp, #8
 800d33e:	af00      	add	r7, sp, #0
 800d340:	4604      	mov	r4, r0
 800d342:	4608      	mov	r0, r1
 800d344:	4611      	mov	r1, r2
 800d346:	461a      	mov	r2, r3
 800d348:	4623      	mov	r3, r4
 800d34a:	71fb      	strb	r3, [r7, #7]
 800d34c:	4603      	mov	r3, r0
 800d34e:	71bb      	strb	r3, [r7, #6]
 800d350:	460b      	mov	r3, r1
 800d352:	717b      	strb	r3, [r7, #5]
 800d354:	4613      	mov	r3, r2
 800d356:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800d358:	79bb      	ldrb	r3, [r7, #6]
 800d35a:	011b      	lsls	r3, r3, #4
 800d35c:	b2da      	uxtb	r2, r3
 800d35e:	79fb      	ldrb	r3, [r7, #7]
 800d360:	4413      	add	r3, r2
 800d362:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800d364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d366:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800d368:	793b      	ldrb	r3, [r7, #4]
 800d36a:	011b      	lsls	r3, r3, #4
 800d36c:	b2da      	uxtb	r2, r3
 800d36e:	797b      	ldrb	r3, [r7, #5]
 800d370:	4413      	add	r3, r2
 800d372:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800d374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d376:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800d378:	7d3b      	ldrb	r3, [r7, #20]
 800d37a:	011b      	lsls	r3, r3, #4
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	7c3b      	ldrb	r3, [r7, #16]
 800d380:	4413      	add	r3, r2
 800d382:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800d384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d386:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800d388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38a:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800d38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38e:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800d390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d392:	789a      	ldrb	r2, [r3, #2]
 800d394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d396:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800d398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39a:	78da      	ldrb	r2, [r3, #3]
 800d39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39e:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800d3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a2:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800d3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a6:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800d3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3aa:	789a      	ldrb	r2, [r3, #2]
 800d3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ae:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800d3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b2:	78da      	ldrb	r2, [r3, #3]
 800d3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b6:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800d3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ba:	791a      	ldrb	r2, [r3, #4]
 800d3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3be:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800d3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d3c6:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800d3c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d3cc:	011b      	lsls	r3, r3, #4
 800d3ce:	b2da      	uxtb	r2, r3
 800d3d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d3d4:	4413      	add	r3, r2
 800d3d6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800d3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3da:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800d3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3de:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d3e2:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800d3ea:	7f3b      	ldrb	r3, [r7, #28]
 800d3ec:	011b      	lsls	r3, r3, #4
 800d3ee:	b2da      	uxtb	r2, r3
 800d3f0:	7e3b      	ldrb	r3, [r7, #24]
 800d3f2:	4413      	add	r3, r2
 800d3f4:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800d3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f8:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800d3fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d3fe:	011b      	lsls	r3, r3, #4
 800d400:	b2da      	uxtb	r2, r3
 800d402:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d406:	4413      	add	r3, r2
 800d408:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800d40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40c:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800d40e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d412:	011b      	lsls	r3, r3, #4
 800d414:	b2da      	uxtb	r2, r3
 800d416:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d41a:	4413      	add	r3, r2
 800d41c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800d41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d420:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800d422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d424:	7bda      	ldrb	r2, [r3, #15]
 800d426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d428:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800d42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42c:	7c1a      	ldrb	r2, [r3, #16]
 800d42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d430:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800d432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d434:	7c5a      	ldrb	r2, [r3, #17]
 800d436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d438:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800d43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d440:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800d442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d448:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800d44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44c:	2200      	movs	r2, #0
 800d44e:	701a      	strb	r2, [r3, #0]
}
 800d450:	bf00      	nop
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bc90      	pop	{r4, r7}
 800d458:	4770      	bx	lr

0800d45a <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 800d45a:	b480      	push	{r7}
 800d45c:	b087      	sub	sp, #28
 800d45e:	af00      	add	r7, sp, #0
 800d460:	60f8      	str	r0, [r7, #12]
 800d462:	460b      	mov	r3, r1
 800d464:	607a      	str	r2, [r7, #4]
 800d466:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800d468:	2300      	movs	r3, #0
 800d46a:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2200      	movs	r2, #0
 800d476:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2200      	movs	r2, #0
 800d47c:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_XTALK_HISTO_BINS;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	220c      	movs	r2, #12
 800d482:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800d484:	897b      	ldrh	r3, [r7, #10]
 800d486:	b2da      	uxtb	r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2200      	movs	r2, #0
 800d490:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2200      	movs	r2, #0
 800d496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2200      	movs	r2, #0
 800d49e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_019                = 0;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	82fb      	strh	r3, [r7, #22]
 800d4be:	e015      	b.n	800d4ec <VL53L1_init_xtalk_bin_data_struct+0x92>
		if (i < VL53L1_p_024)
 800d4c0:	8afa      	ldrh	r2, [r7, #22]
 800d4c2:	897b      	ldrh	r3, [r7, #10]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d207      	bcs.n	800d4d8 <VL53L1_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800d4c8:	8afb      	ldrh	r3, [r7, #22]
 800d4ca:	687a      	ldr	r2, [r7, #4]
 800d4cc:	3302      	adds	r3, #2
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	4413      	add	r3, r2
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	605a      	str	r2, [r3, #4]
 800d4d6:	e006      	b.n	800d4e6 <VL53L1_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800d4d8:	8afb      	ldrh	r3, [r7, #22]
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	3302      	adds	r3, #2
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	4413      	add	r3, r2
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800d4e6:	8afb      	ldrh	r3, [r7, #22]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	82fb      	strh	r3, [r7, #22]
 800d4ec:	8afb      	ldrh	r3, [r7, #22]
 800d4ee:	2b0b      	cmp	r3, #11
 800d4f0:	d9e6      	bls.n	800d4c0 <VL53L1_init_xtalk_bin_data_struct+0x66>
	}
}
 800d4f2:	bf00      	nop
 800d4f4:	bf00      	nop
 800d4f6:	371c      	adds	r7, #28
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d500:	b480      	push	{r7}
 800d502:	b085      	sub	sp, #20
 800d504:	af00      	add	r7, sp, #0
 800d506:	4603      	mov	r3, r0
 800d508:	603a      	str	r2, [r7, #0]
 800d50a:	80fb      	strh	r3, [r7, #6]
 800d50c:	460b      	mov	r3, r1
 800d50e:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800d510:	2300      	movs	r3, #0
 800d512:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53L1_p_002 = 0;
 800d514:	2300      	movs	r3, #0
 800d516:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800d518:	88fb      	ldrh	r3, [r7, #6]
 800d51a:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800d51c:	2300      	movs	r3, #0
 800d51e:	81fb      	strh	r3, [r7, #14]
 800d520:	e00e      	b.n	800d540 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800d522:	88ba      	ldrh	r2, [r7, #4]
 800d524:	89fb      	ldrh	r3, [r7, #14]
 800d526:	1ad3      	subs	r3, r2, r3
 800d528:	3b01      	subs	r3, #1
 800d52a:	683a      	ldr	r2, [r7, #0]
 800d52c:	4413      	add	r3, r2
 800d52e:	89ba      	ldrh	r2, [r7, #12]
 800d530:	b2d2      	uxtb	r2, r2
 800d532:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800d534:	89bb      	ldrh	r3, [r7, #12]
 800d536:	0a1b      	lsrs	r3, r3, #8
 800d538:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800d53a:	89fb      	ldrh	r3, [r7, #14]
 800d53c:	3301      	adds	r3, #1
 800d53e:	81fb      	strh	r3, [r7, #14]
 800d540:	89fa      	ldrh	r2, [r7, #14]
 800d542:	88bb      	ldrh	r3, [r7, #4]
 800d544:	429a      	cmp	r2, r3
 800d546:	d3ec      	bcc.n	800d522 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800d548:	bf00      	nop
 800d54a:	bf00      	nop
 800d54c:	3714      	adds	r7, #20
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr

0800d556 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d556:	b480      	push	{r7}
 800d558:	b085      	sub	sp, #20
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	4603      	mov	r3, r0
 800d55e:	6039      	str	r1, [r7, #0]
 800d560:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800d562:	2300      	movs	r3, #0
 800d564:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800d566:	e00a      	b.n	800d57e <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800d568:	89fb      	ldrh	r3, [r7, #14]
 800d56a:	021b      	lsls	r3, r3, #8
 800d56c:	b21a      	sxth	r2, r3
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	1c59      	adds	r1, r3, #1
 800d572:	6039      	str	r1, [r7, #0]
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	b21b      	sxth	r3, r3
 800d578:	4313      	orrs	r3, r2
 800d57a:	b21b      	sxth	r3, r3
 800d57c:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800d57e:	88fb      	ldrh	r3, [r7, #6]
 800d580:	1e5a      	subs	r2, r3, #1
 800d582:	80fa      	strh	r2, [r7, #6]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d1ef      	bne.n	800d568 <VL53L1_i2c_decode_uint16_t+0x12>

	return value;
 800d588:	89fb      	ldrh	r3, [r7, #14]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3714      	adds	r7, #20
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr

0800d596 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d596:	b480      	push	{r7}
 800d598:	b085      	sub	sp, #20
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	4603      	mov	r3, r0
 800d59e:	603a      	str	r2, [r7, #0]
 800d5a0:	80fb      	strh	r3, [r7, #6]
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53L1_p_002 = 0;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800d5ae:	88fb      	ldrh	r3, [r7, #6]
 800d5b0:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	81fb      	strh	r3, [r7, #14]
 800d5b6:	e00f      	b.n	800d5d8 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800d5b8:	88ba      	ldrh	r2, [r7, #4]
 800d5ba:	89fb      	ldrh	r3, [r7, #14]
 800d5bc:	1ad3      	subs	r3, r2, r3
 800d5be:	3b01      	subs	r3, #1
 800d5c0:	683a      	ldr	r2, [r7, #0]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	89ba      	ldrh	r2, [r7, #12]
 800d5c6:	b2d2      	uxtb	r2, r2
 800d5c8:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800d5ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d5ce:	121b      	asrs	r3, r3, #8
 800d5d0:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800d5d2:	89fb      	ldrh	r3, [r7, #14]
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	81fb      	strh	r3, [r7, #14]
 800d5d8:	89fa      	ldrh	r2, [r7, #14]
 800d5da:	88bb      	ldrh	r3, [r7, #4]
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d3eb      	bcc.n	800d5b8 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800d5e0:	bf00      	nop
 800d5e2:	bf00      	nop
 800d5e4:	3714      	adds	r7, #20
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr

0800d5ee <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d5ee:	b480      	push	{r7}
 800d5f0:	b085      	sub	sp, #20
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	6039      	str	r1, [r7, #0]
 800d5f8:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	b25b      	sxtb	r3, r3
 800d604:	2b00      	cmp	r3, #0
 800d606:	da0e      	bge.n	800d626 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800d608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d60c:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800d60e:	e00a      	b.n	800d626 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800d610:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d614:	021b      	lsls	r3, r3, #8
 800d616:	b21a      	sxth	r2, r3
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	1c59      	adds	r1, r3, #1
 800d61c:	6039      	str	r1, [r7, #0]
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	b21b      	sxth	r3, r3
 800d622:	4313      	orrs	r3, r2
 800d624:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800d626:	88fb      	ldrh	r3, [r7, #6]
 800d628:	1e5a      	subs	r2, r3, #1
 800d62a:	80fa      	strh	r2, [r7, #6]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d1ef      	bne.n	800d610 <VL53L1_i2c_decode_int16_t+0x22>

	return value;
 800d630:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800d634:	4618      	mov	r0, r3
 800d636:	3714      	adds	r7, #20
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d640:	b480      	push	{r7}
 800d642:	b087      	sub	sp, #28
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	460b      	mov	r3, r1
 800d64a:	607a      	str	r2, [r7, #4]
 800d64c:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800d64e:	2300      	movs	r3, #0
 800d650:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53L1_p_002 = 0;
 800d652:	2300      	movs	r3, #0
 800d654:	613b      	str	r3, [r7, #16]

	VL53L1_p_002 =  ip_value;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800d65a:	2300      	movs	r3, #0
 800d65c:	82fb      	strh	r3, [r7, #22]
 800d65e:	e00e      	b.n	800d67e <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800d660:	897a      	ldrh	r2, [r7, #10]
 800d662:	8afb      	ldrh	r3, [r7, #22]
 800d664:	1ad3      	subs	r3, r2, r3
 800d666:	3b01      	subs	r3, #1
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	4413      	add	r3, r2
 800d66c:	693a      	ldr	r2, [r7, #16]
 800d66e:	b2d2      	uxtb	r2, r2
 800d670:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	0a1b      	lsrs	r3, r3, #8
 800d676:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800d678:	8afb      	ldrh	r3, [r7, #22]
 800d67a:	3301      	adds	r3, #1
 800d67c:	82fb      	strh	r3, [r7, #22]
 800d67e:	8afa      	ldrh	r2, [r7, #22]
 800d680:	897b      	ldrh	r3, [r7, #10]
 800d682:	429a      	cmp	r2, r3
 800d684:	d3ec      	bcc.n	800d660 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800d686:	bf00      	nop
 800d688:	bf00      	nop
 800d68a:	371c      	adds	r7, #28
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr

0800d694 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d694:	b480      	push	{r7}
 800d696:	b085      	sub	sp, #20
 800d698:	af00      	add	r7, sp, #0
 800d69a:	4603      	mov	r3, r0
 800d69c:	6039      	str	r1, [r7, #0]
 800d69e:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800d6a4:	e007      	b.n	800d6b6 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	021a      	lsls	r2, r3, #8
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	1c59      	adds	r1, r3, #1
 800d6ae:	6039      	str	r1, [r7, #0]
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800d6b6:	88fb      	ldrh	r3, [r7, #6]
 800d6b8:	1e5a      	subs	r2, r3, #1
 800d6ba:	80fa      	strh	r2, [r7, #6]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d1f2      	bne.n	800d6a6 <VL53L1_i2c_decode_uint32_t+0x12>

	return value;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3714      	adds	r7, #20
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr

0800d6ce <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d6ce:	b480      	push	{r7}
 800d6d0:	b085      	sub	sp, #20
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	6039      	str	r1, [r7, #0]
 800d6d8:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	b25b      	sxtb	r3, r3
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	da0b      	bge.n	800d700 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800d6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ec:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800d6ee:	e007      	b.n	800d700 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	021a      	lsls	r2, r3, #8
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	1c59      	adds	r1, r3, #1
 800d6f8:	6039      	str	r1, [r7, #0]
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	4313      	orrs	r3, r2
 800d6fe:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800d700:	88fb      	ldrh	r3, [r7, #6]
 800d702:	1e5a      	subs	r2, r3, #1
 800d704:	80fa      	strh	r2, [r7, #6]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d1f2      	bne.n	800d6f0 <VL53L1_i2c_decode_int32_t+0x22>

	return value;
 800d70a:	68fb      	ldr	r3, [r7, #12]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3714      	adds	r7, #20
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr

0800d718 <VL53L1_start_test>:


VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	460b      	mov	r3, r1
 800d722:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d724:	2300      	movs	r3, #0
 800d726:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) {
 800d728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d107      	bne.n	800d740 <VL53L1_start_test+0x28>
		status = VL53L1_WrByte(
 800d730:	78fb      	ldrb	r3, [r7, #3]
 800d732:	461a      	mov	r2, r3
 800d734:	2127      	movs	r1, #39	; 0x27
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f009 f9ce 	bl	8016ad8 <VL53L1_WrByte>
 800d73c:	4603      	mov	r3, r0
 800d73e:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800d740:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d744:	4618      	mov	r0, r3
 800d746:	3710      	adds	r7, #16
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	460b      	mov	r3, r1
 800d756:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800d758:	2300      	movs	r3, #0
 800d75a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	3318      	adds	r3, #24
 800d760:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	78fa      	ldrb	r2, [r7, #3]
 800d766:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6

	status = VL53L1_WrByte(
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
 800d770:	461a      	mov	r2, r3
 800d772:	2185      	movs	r1, #133	; 0x85
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f009 f9af 	bl	8016ad8 <VL53L1_WrByte>
 800d77a:	4603      	mov	r3, r0
 800d77c:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800d77e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d782:	4618      	mov	r0, r3
 800d784:	3710      	adds	r7, #16
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b084      	sub	sp, #16
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800d792:	2300      	movs	r3, #0
 800d794:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800d796:	2101      	movs	r1, #1
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f7ff ffd7 	bl	800d74c <VL53L1_set_firmware_enable_register>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800d7a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}

0800d7ae <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b084      	sub	sp, #16
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f7ff ffc5 	bl	800d74c <VL53L1_set_firmware_enable_register>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800d7c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b084      	sub	sp, #16
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
 800d7da:	460b      	mov	r3, r1
 800d7dc:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	3318      	adds	r3, #24
 800d7e6:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	78fa      	ldrb	r2, [r7, #3]
 800d7ec:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

	status = VL53L1_WrByte(
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	2183      	movs	r1, #131	; 0x83
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f009 f96c 	bl	8016ad8 <VL53L1_WrByte>
 800d800:	4603      	mov	r3, r0
 800d802:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800d804:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800d818:	2300      	movs	r3, #0
 800d81a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800d81c:	2101      	movs	r1, #1
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f7ff ffd7 	bl	800d7d2 <VL53L1_set_powerforce_register>
 800d824:	4603      	mov	r3, r0
 800d826:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800d828:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3710      	adds	r7, #16
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800d83c:	2300      	movs	r3, #0
 800d83e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 800d840:	2100      	movs	r1, #0
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f7ff ffc5 	bl	800d7d2 <VL53L1_set_powerforce_register>
 800d848:	4603      	mov	r3, r0
 800d84a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800d84c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d850:	4618      	mov	r0, r3
 800d852:	3710      	adds	r7, #16
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800d860:	2300      	movs	r3, #0
 800d862:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	3318      	adds	r3, #24
 800d868:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	2201      	movs	r2, #1
 800d86e:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7

	status = VL53L1_WrByte(
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 800d878:	461a      	mov	r2, r3
 800d87a:	2186      	movs	r1, #134	; 0x86
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f009 f92b 	bl	8016ad8 <VL53L1_WrByte>
 800d882:	4603      	mov	r3, r0
 800d884:	73fb      	strb	r3, [r7, #15]
				VL53L1_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800d886:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 800d892:	b580      	push	{r7, lr}
 800d894:	b086      	sub	sp, #24
 800d896:	af00      	add	r7, sp, #0
 800d898:	4603      	mov	r3, r0
 800d89a:	460a      	mov	r2, r1
 800d89c:	80fb      	strh	r3, [r7, #6]
 800d89e:	4613      	mov	r3, r2
 800d8a0:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	617b      	str	r3, [r7, #20]
	uint8_t   VL53L1_p_031   = 0;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800d8ae:	88fb      	ldrh	r3, [r7, #6]
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f002 ffeb 	bl	801088c <VL53L1_calc_pll_period_us>
 800d8b6:	6178      	str	r0, [r7, #20]



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 800d8b8:	797b      	ldrb	r3, [r7, #5]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f003 fbd6 	bl	801106c <VL53L1_decode_vcsel_period>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800d8c4:	697a      	ldr	r2, [r7, #20]
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	00db      	lsls	r3, r3, #3
 800d8ca:	4413      	add	r3, r2
 800d8cc:	021b      	lsls	r3, r3, #8
 800d8ce:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	099b      	lsrs	r3, r3, #6
 800d8d4:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 800d8d6:	7cfa      	ldrb	r2, [r7, #19]
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	fb02 f303 	mul.w	r3, r2, r3
 800d8de:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	099b      	lsrs	r3, r3, #6
 800d8e4:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3718      	adds	r7, #24
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b089      	sub	sp, #36	; 0x24
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	4608      	mov	r0, r1
 800d8fa:	4611      	mov	r1, r2
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	4603      	mov	r3, r0
 800d900:	817b      	strh	r3, [r7, #10]
 800d902:	460b      	mov	r3, r1
 800d904:	813b      	strh	r3, [r7, #8]
 800d906:	4613      	mov	r3, r2
 800d908:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800d90a:	2300      	movs	r3, #0
 800d90c:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800d90e:	2300      	movs	r3, #0
 800d910:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800d912:	2300      	movs	r3, #0
 800d914:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800d916:	2300      	movs	r3, #0
 800d918:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800d91a:	2300      	movs	r3, #0
 800d91c:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	011b      	lsls	r3, r3, #4
 800d922:	4a23      	ldr	r2, [pc, #140]	; (800d9b0 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800d924:	fb82 1203 	smull	r1, r2, r2, r3
 800d928:	1192      	asrs	r2, r2, #6
 800d92a:	17db      	asrs	r3, r3, #31
 800d92c:	1ad3      	subs	r3, r2, r3
 800d92e:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800d930:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d934:	2b00      	cmp	r3, #0
 800d936:	da03      	bge.n	800d940 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800d938:	897b      	ldrh	r3, [r7, #10]
 800d93a:	425b      	negs	r3, r3
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800d940:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800d944:	2b00      	cmp	r3, #0
 800d946:	da03      	bge.n	800d950 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800d948:	893b      	ldrh	r3, [r7, #8]
 800d94a:	425b      	negs	r3, r3
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800d950:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800d954:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d958:	4413      	add	r3, r2
 800d95a:	015b      	lsls	r3, r3, #5
 800d95c:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	4a13      	ldr	r2, [pc, #76]	; (800d9b0 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800d962:	fb82 1203 	smull	r1, r2, r2, r3
 800d966:	1192      	asrs	r2, r2, #6
 800d968:	17db      	asrs	r3, r3, #31
 800d96a:	1ad3      	subs	r3, r2, r3
 800d96c:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800d96e:	697a      	ldr	r2, [r7, #20]
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	4413      	add	r3, r2
 800d974:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800d976:	79fa      	ldrb	r2, [r7, #7]
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	fb02 f303 	mul.w	r3, r2, r3
 800d97e:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	3310      	adds	r3, #16
 800d984:	2b00      	cmp	r3, #0
 800d986:	da00      	bge.n	800d98a <VL53L1_calc_range_ignore_threshold+0x9a>
 800d988:	331f      	adds	r3, #31
 800d98a:	115b      	asrs	r3, r3, #5
 800d98c:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d994:	db03      	blt.n	800d99e <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800d996:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d99a:	83fb      	strh	r3, [r7, #30]
 800d99c:	e001      	b.n	800d9a2 <VL53L1_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800d9a2:	8bfb      	ldrh	r3, [r7, #30]
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3724      	adds	r7, #36	; 0x24
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr
 800d9b0:	10624dd3 	.word	0x10624dd3

0800d9b4 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b085      	sub	sp, #20
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d102      	bne.n	800d9ce <VL53L1_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	60fb      	str	r3, [r7, #12]
 800d9cc:	e008      	b.n	800d9e0 <VL53L1_calc_timeout_mclks+0x2c>
	else
		timeout_mclks =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	031a      	lsls	r2, r3, #12
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	085b      	lsrs	r3, r3, #1
 800d9d6:	441a      	add	r2, r3
		timeout_mclks =
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9de:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3714      	adds	r7, #20
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr

0800d9ee <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b084      	sub	sp, #16
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
 800d9f6:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800da00:	6839      	ldr	r1, [r7, #0]
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7ff ffd6 	bl	800d9b4 <VL53L1_calc_timeout_mclks>
 800da08:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800da0a:	68f8      	ldr	r0, [r7, #12]
 800da0c:	f000 f887 	bl	800db1e <VL53L1_encode_timeout>
 800da10:	4603      	mov	r3, r0
 800da12:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800da14:	897b      	ldrh	r3, [r7, #10]
}
 800da16:	4618      	mov	r0, r3
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}

0800da1e <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800da1e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800da22:	b087      	sub	sp, #28
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800da2a:	2100      	movs	r1, #0
 800da2c:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800da2e:	f04f 0000 	mov.w	r0, #0
 800da32:	f04f 0100 	mov.w	r1, #0
 800da36:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800da3a:	6879      	ldr	r1, [r7, #4]
 800da3c:	2000      	movs	r0, #0
 800da3e:	4688      	mov	r8, r1
 800da40:	4681      	mov	r9, r0
 800da42:	6839      	ldr	r1, [r7, #0]
 800da44:	2000      	movs	r0, #0
 800da46:	460c      	mov	r4, r1
 800da48:	4605      	mov	r5, r0
 800da4a:	fb04 f009 	mul.w	r0, r4, r9
 800da4e:	fb08 f105 	mul.w	r1, r8, r5
 800da52:	4401      	add	r1, r0
 800da54:	fba8 2304 	umull	r2, r3, r8, r4
 800da58:	4419      	add	r1, r3
 800da5a:	460b      	mov	r3, r1
 800da5c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800da60:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800da64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800da68:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800da6c:	f143 0b00 	adc.w	fp, r3, #0
 800da70:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800da74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800da78:	f04f 0200 	mov.w	r2, #0
 800da7c:	f04f 0300 	mov.w	r3, #0
 800da80:	0b02      	lsrs	r2, r0, #12
 800da82:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800da86:	0b0b      	lsrs	r3, r1, #12
 800da88:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800da90:	697b      	ldr	r3, [r7, #20]
}
 800da92:	4618      	mov	r0, r3
 800da94:	371c      	adds	r7, #28
 800da96:	46bd      	mov	sp, r7
 800da98:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800da9c:	4770      	bx	lr
	...

0800daa0 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b085      	sub	sp, #20
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	460b      	mov	r3, r1
 800daaa:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800daac:	2300      	movs	r3, #0
 800daae:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800dab0:	2300      	movs	r3, #0
 800dab2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800dab4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800dab8:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800daba:	4413      	add	r3, r2
 800dabc:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	da02      	bge.n	800daca <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800dac4:	2300      	movs	r3, #0
 800dac6:	60fb      	str	r3, [r7, #12]
 800dac8:	e005      	b.n	800dad6 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dad0:	db01      	blt.n	800dad6 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800dad2:	4b05      	ldr	r3, [pc, #20]	; (800dae8 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 800dad4:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800dada:	68bb      	ldr	r3, [r7, #8]

}
 800dadc:	4618      	mov	r0, r3
 800dade:	3714      	adds	r7, #20
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr
 800dae8:	0003ffff 	.word	0x0003ffff

0800daec <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	4603      	mov	r3, r0
 800daf4:	6039      	str	r1, [r7, #0]
 800daf6:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800daf8:	2300      	movs	r3, #0
 800dafa:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800dafc:	2300      	movs	r3, #0
 800dafe:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800db00:	88fb      	ldrh	r3, [r7, #6]
 800db02:	4618      	mov	r0, r3
 800db04:	f000 f837 	bl	800db76 <VL53L1_decode_timeout>
 800db08:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800db0a:	6839      	ldr	r1, [r7, #0]
 800db0c:	68f8      	ldr	r0, [r7, #12]
 800db0e:	f7ff ff86 	bl	800da1e <VL53L1_calc_timeout_us>
 800db12:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800db14:	68bb      	ldr	r3, [r7, #8]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3710      	adds	r7, #16
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800db1e:	b480      	push	{r7}
 800db20:	b087      	sub	sp, #28
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800db26:	2300      	movs	r3, #0
 800db28:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800db2a:	2300      	movs	r3, #0
 800db2c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800db2e:	2300      	movs	r3, #0
 800db30:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d017      	beq.n	800db68 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	3b01      	subs	r3, #1
 800db3c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800db3e:	e005      	b.n	800db4c <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	085b      	lsrs	r3, r3, #1
 800db44:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800db46:	89fb      	ldrh	r3, [r7, #14]
 800db48:	3301      	adds	r3, #1
 800db4a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db52:	2b00      	cmp	r3, #0
 800db54:	d1f4      	bne.n	800db40 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800db56:	89fb      	ldrh	r3, [r7, #14]
 800db58:	021b      	lsls	r3, r3, #8
 800db5a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	b29b      	uxth	r3, r3
 800db60:	b2db      	uxtb	r3, r3
 800db62:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800db64:	4413      	add	r3, r2
 800db66:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800db68:	8afb      	ldrh	r3, [r7, #22]
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	371c      	adds	r7, #28
 800db6e:	46bd      	mov	sp, r7
 800db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db74:	4770      	bx	lr

0800db76 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800db76:	b480      	push	{r7}
 800db78:	b085      	sub	sp, #20
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	4603      	mov	r3, r0
 800db7e:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800db80:	2300      	movs	r3, #0
 800db82:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800db84:	88fb      	ldrh	r3, [r7, #6]
 800db86:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800db88:	88fa      	ldrh	r2, [r7, #6]
 800db8a:	0a12      	lsrs	r2, r2, #8
 800db8c:	b292      	uxth	r2, r2
 800db8e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800db90:	3301      	adds	r3, #1
 800db92:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800db94:	68fb      	ldr	r3, [r7, #12]
}
 800db96:	4618      	mov	r0, r3
 800db98:	3714      	adds	r7, #20
 800db9a:	46bd      	mov	sp, r7
 800db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba0:	4770      	bx	lr

0800dba2 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800dba2:	b580      	push	{r7, lr}
 800dba4:	b088      	sub	sp, #32
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	60f8      	str	r0, [r7, #12]
 800dbaa:	60b9      	str	r1, [r7, #8]
 800dbac:	607a      	str	r2, [r7, #4]
 800dbae:	807b      	strh	r3, [r7, #2]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800dbc0:	887b      	ldrh	r3, [r7, #2]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d102      	bne.n	800dbcc <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800dbc6:	23f1      	movs	r3, #241	; 0xf1
 800dbc8:	77fb      	strb	r3, [r7, #31]
 800dbca:	e05d      	b.n	800dc88 <VL53L1_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 800dbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbce:	799a      	ldrb	r2, [r3, #6]
 800dbd0:	887b      	ldrh	r3, [r7, #2]
 800dbd2:	4611      	mov	r1, r2
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7ff fe5c 	bl	800d892 <VL53L1_calc_macro_period_us>
 800dbda:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800dbdc:	6979      	ldr	r1, [r7, #20]
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f7ff fee8 	bl	800d9b4 <VL53L1_calc_timeout_mclks>
 800dbe4:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800dbe6:	69bb      	ldr	r3, [r7, #24]
 800dbe8:	2bff      	cmp	r3, #255	; 0xff
 800dbea:	d901      	bls.n	800dbf0 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800dbec:	23ff      	movs	r3, #255	; 0xff
 800dbee:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800dbf0:	69bb      	ldr	r3, [r7, #24]
 800dbf2:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800dbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf6:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800dbf8:	6979      	ldr	r1, [r7, #20]
 800dbfa:	68b8      	ldr	r0, [r7, #8]
 800dbfc:	f7ff fef7 	bl	800d9ee <VL53L1_calc_encoded_timeout>
 800dc00:	4603      	mov	r3, r0
 800dc02:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800dc04:	8a7b      	ldrh	r3, [r7, #18]
 800dc06:	0a1b      	lsrs	r3, r3, #8
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800dc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800dc10:	8a7b      	ldrh	r3, [r7, #18]
 800dc12:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800dc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc16:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800dc18:	6979      	ldr	r1, [r7, #20]
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f7ff fee7 	bl	800d9ee <VL53L1_calc_encoded_timeout>
 800dc20:	4603      	mov	r3, r0
 800dc22:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800dc24:	8a7b      	ldrh	r3, [r7, #18]
 800dc26:	0a1b      	lsrs	r3, r3, #8
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800dc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc2e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800dc30:	8a7b      	ldrh	r3, [r7, #18]
 800dc32:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800dc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc36:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53L1_calc_macro_period_us(
 800dc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3a:	7a5a      	ldrb	r2, [r3, #9]
 800dc3c:	887b      	ldrh	r3, [r7, #2]
 800dc3e:	4611      	mov	r1, r2
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7ff fe26 	bl	800d892 <VL53L1_calc_macro_period_us>
 800dc46:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800dc48:	6979      	ldr	r1, [r7, #20]
 800dc4a:	68b8      	ldr	r0, [r7, #8]
 800dc4c:	f7ff fecf 	bl	800d9ee <VL53L1_calc_encoded_timeout>
 800dc50:	4603      	mov	r3, r0
 800dc52:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800dc54:	8a7b      	ldrh	r3, [r7, #18]
 800dc56:	0a1b      	lsrs	r3, r3, #8
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800dc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800dc60:	8a7b      	ldrh	r3, [r7, #18]
 800dc62:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800dc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc66:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53L1_calc_encoded_timeout(
 800dc68:	6979      	ldr	r1, [r7, #20]
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f7ff febf 	bl	800d9ee <VL53L1_calc_encoded_timeout>
 800dc70:	4603      	mov	r3, r0
 800dc72:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800dc74:	8a7b      	ldrh	r3, [r7, #18]
 800dc76:	0a1b      	lsrs	r3, r3, #8
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800dc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800dc80:	8a7b      	ldrh	r3, [r7, #18]
 800dc82:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800dc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc86:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800dc88:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3720      	adds	r7, #32
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 800dc94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc98:	b09e      	sub	sp, #120	; 0x78
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6578      	str	r0, [r7, #84]	; 0x54
 800dc9e:	6539      	str	r1, [r7, #80]	; 0x50


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800dca0:	2300      	movs	r3, #0
 800dca2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 800dca6:	f04f 0200 	mov.w	r2, #0
 800dcaa:	f04f 0300 	mov.w	r3, #0
 800dcae:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800dcb2:	f04f 0200 	mov.w	r2, #0
 800dcb6:	f04f 0300 	mov.w	r3, #0
 800dcba:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 800dcbe:	f04f 0200 	mov.w	r2, #0
 800dcc2:	f04f 0300 	mov.w	r3, #0
 800dcc6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800dcca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dccc:	885b      	ldrh	r3, [r3, #2]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d103      	bne.n	800dcda <VL53L1_hist_copy_and_scale_ambient_info+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800dcd2:	23f1      	movs	r3, #241	; 0xf1
 800dcd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800dcd8:	e0d6      	b.n	800de88 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800dcda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcdc:	785b      	ldrb	r3, [r3, #1]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	f000 80d2 	beq.w	800de88 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800dce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dce6:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f040 80cd 	bne.w	800de88 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800dcee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	643b      	str	r3, [r7, #64]	; 0x40
 800dcf8:	647a      	str	r2, [r7, #68]	; 0x44
 800dcfa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800dcfe:	460b      	mov	r3, r1
 800dd00:	3301      	adds	r3, #1
 800dd02:	623b      	str	r3, [r7, #32]
 800dd04:	4613      	mov	r3, r2
 800dd06:	f143 0300 	adc.w	r3, r3, #0
 800dd0a:	627b      	str	r3, [r7, #36]	; 0x24
 800dd0c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dd10:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800dd14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd16:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd20:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800dd22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd24:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800dd28:	4602      	mov	r2, r0
 800dd2a:	fb02 f203 	mul.w	r2, r2, r3
 800dd2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd30:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800dd34:	fb01 f303 	mul.w	r3, r1, r3
 800dd38:	441a      	add	r2, r3
 800dd3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd3c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dd3e:	fba3 4501 	umull	r4, r5, r3, r1
 800dd42:	1953      	adds	r3, r2, r5
 800dd44:	461d      	mov	r5, r3
 800dd46:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 800dd4a:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800dd4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	2200      	movs	r2, #0
 800dd54:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd56:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dd58:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	3301      	adds	r3, #1
 800dd60:	61bb      	str	r3, [r7, #24]
 800dd62:	4613      	mov	r3, r2
 800dd64:	f143 0300 	adc.w	r3, r3, #0
 800dd68:	61fb      	str	r3, [r7, #28]
 800dd6a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800dd6e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800dd72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd74:	885b      	ldrh	r3, [r3, #2]
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	2200      	movs	r2, #0
 800dd7a:	633b      	str	r3, [r7, #48]	; 0x30
 800dd7c:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 800dd7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd80:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800dd84:	4622      	mov	r2, r4
 800dd86:	fb02 f203 	mul.w	r2, r2, r3
 800dd8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd8c:	4629      	mov	r1, r5
 800dd8e:	fb01 f303 	mul.w	r3, r1, r3
 800dd92:	441a      	add	r2, r3
 800dd94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd96:	4621      	mov	r1, r4
 800dd98:	fba3 ab01 	umull	sl, fp, r3, r1
 800dd9c:	eb02 030b 	add.w	r3, r2, fp
 800dda0:	469b      	mov	fp, r3
 800dda2:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800dda6:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800ddaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	17da      	asrs	r2, r3, #31
 800ddb0:	62bb      	str	r3, [r7, #40]	; 0x28
 800ddb2:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 800ddb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddb6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800ddba:	4622      	mov	r2, r4
 800ddbc:	fb02 f203 	mul.w	r2, r2, r3
 800ddc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddc2:	4629      	mov	r1, r5
 800ddc4:	fb01 f303 	mul.w	r3, r1, r3
 800ddc8:	4413      	add	r3, r2
 800ddca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ddcc:	4621      	mov	r1, r4
 800ddce:	fba2 8901 	umull	r8, r9, r2, r1
 800ddd2:	444b      	add	r3, r9
 800ddd4:	4699      	mov	r9, r3
 800ddd6:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 800ddda:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 800ddde:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800dde2:	0fd9      	lsrs	r1, r3, #31
 800dde4:	2000      	movs	r0, #0
 800dde6:	6139      	str	r1, [r7, #16]
 800dde8:	6178      	str	r0, [r7, #20]
 800ddea:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800ddee:	4621      	mov	r1, r4
 800ddf0:	1889      	adds	r1, r1, r2
 800ddf2:	60b9      	str	r1, [r7, #8]
 800ddf4:	4629      	mov	r1, r5
 800ddf6:	eb43 0101 	adc.w	r1, r3, r1
 800ddfa:	60f9      	str	r1, [r7, #12]
 800ddfc:	f04f 0200 	mov.w	r2, #0
 800de00:	f04f 0300 	mov.w	r3, #0
 800de04:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800de08:	4621      	mov	r1, r4
 800de0a:	084a      	lsrs	r2, r1, #1
 800de0c:	4629      	mov	r1, r5
 800de0e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800de12:	4629      	mov	r1, r5
 800de14:	104b      	asrs	r3, r1, #1
 800de16:	4610      	mov	r0, r2
 800de18:	4619      	mov	r1, r3
 800de1a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800de1e:	1814      	adds	r4, r2, r0
 800de20:	603c      	str	r4, [r7, #0]
 800de22:	414b      	adcs	r3, r1
 800de24:	607b      	str	r3, [r7, #4]
 800de26:	e9d7 3400 	ldrd	r3, r4, [r7]
 800de2a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 800de2e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800de32:	4313      	orrs	r3, r2
 800de34:	d009      	beq.n	800de4a <VL53L1_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800de36:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800de3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800de3e:	f7f2 fc79 	bl	8000734 <__aeabi_ldivmod>
 800de42:	4602      	mov	r2, r0
 800de44:	460b      	mov	r3, r1
 800de46:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800de4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800de4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de4e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53L1_p_004 =
					podata->ambient_events_sum;
 800de52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de54:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53L1_p_004 =
 800de58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de5a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 +=
 800de5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800de64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de66:	7852      	ldrb	r2, [r2, #1]
 800de68:	0852      	lsrs	r2, r2, #1
 800de6a:	b2d2      	uxtb	r2, r2
			podata->VL53L1_p_004 +=
 800de6c:	441a      	add	r2, r3
 800de6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 /=
 800de74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800de7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de7c:	7852      	ldrb	r2, [r2, #1]
			podata->VL53L1_p_004 /=
 800de7e:	fb93 f2f2 	sdiv	r2, r3, r2
 800de82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800de88:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3778      	adds	r7, #120	; 0x78
 800de90:	46bd      	mov	sp, r7
 800de92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800de96 <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800de96:	b480      	push	{r7}
 800de98:	b087      	sub	sp, #28
 800de9a:	af00      	add	r7, sp, #0
 800de9c:	6078      	str	r0, [r7, #4]
 800de9e:	6039      	str	r1, [r7, #0]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	3318      	adds	r3, #24
 800dea4:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800dea6:	2300      	movs	r3, #0
 800dea8:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800deaa:	2300      	movs	r3, #0
 800deac:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800deae:	2300      	movs	r3, #0
 800deb0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	amb_thresh_low  = 1024 *
 800deb8:	029b      	lsls	r3, r3, #10
 800deba:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	amb_thresh_high = 1024 *
 800dec2:	029b      	lsls	r3, r3, #10
 800dec4:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800decc:	f003 0301 	and.w	r3, r3, #1
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	f040 8095 	bne.w	800e000 <VL53L1_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		pdata->bin_seq[5] =
 800dedc:	091b      	lsrs	r3, r3, #4
 800dede:	b2da      	uxtb	r2, r3
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800deea:	f003 030f 	and.w	r3, r3, #15
 800deee:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
		pdata->bin_seq[3] =
 800defa:	091b      	lsrs	r3, r3, #4
 800defc:	b2da      	uxtb	r2, r3
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800df08:	f003 030f 	and.w	r3, r3, #15
 800df0c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
		pdata->bin_seq[1] =
 800df18:	091b      	lsrs	r3, r3, #4
 800df1a:	b2da      	uxtb	r2, r3
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800df26:	f003 030f 	and.w	r3, r3, #15
 800df2a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800df36:	68ba      	ldr	r2, [r7, #8]
 800df38:	429a      	cmp	r2, r3
 800df3a:	da2c      	bge.n	800df96 <VL53L1_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			pdata->bin_seq[5] =
 800df42:	091b      	lsrs	r3, r3, #4
 800df44:	b2da      	uxtb	r2, r3
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			& 0x0F;
 800df50:	f003 030f 	and.w	r3, r3, #15
 800df54:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			pdata->bin_seq[3] =
 800df60:	091b      	lsrs	r3, r3, #4
 800df62:	b2da      	uxtb	r2, r3
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			& 0x0F;
 800df6e:	f003 030f 	and.w	r3, r3, #15
 800df72:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			pdata->bin_seq[1] =
 800df7e:	091b      	lsrs	r3, r3, #4
 800df80:	b2da      	uxtb	r2, r3
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			& 0x0F;
 800df8c:	f003 030f 	and.w	r3, r3, #15
 800df90:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	f340 80c2 	ble.w	800e128 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[5] =
 800dfaa:	091b      	lsrs	r3, r3, #4
 800dfac:	b2da      	uxtb	r2, r3
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 800dfb8:	f003 030f 	and.w	r3, r3, #15
 800dfbc:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			pdata->bin_seq[3] =
 800dfc8:	091b      	lsrs	r3, r3, #4
 800dfca:	b2da      	uxtb	r2, r3
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			& 0x0F;
 800dfd6:	f003 030f 	and.w	r3, r3, #15
 800dfda:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			pdata->bin_seq[1] =
 800dfe6:	091b      	lsrs	r3, r3, #4
 800dfe8:	b2da      	uxtb	r2, r3
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 800dff4:	f003 030f 	and.w	r3, r3, #15
 800dff8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	731a      	strb	r2, [r3, #12]
 800dffe:	e093      	b.n	800e128 <VL53L1_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
			& 0x0F;
 800e006:	f003 030f 	and.w	r3, r3, #15
 800e00a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
			& 0x0F;
 800e016:	f003 030f 	and.w	r3, r3, #15
 800e01a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		pdata->bin_seq[3] =
 800e026:	091b      	lsrs	r3, r3, #4
 800e028:	b2da      	uxtb	r2, r3
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800e034:	f003 030f 	and.w	r3, r3, #15
 800e038:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
		pdata->bin_seq[1] =
 800e044:	091b      	lsrs	r3, r3, #4
 800e046:	b2da      	uxtb	r2, r3
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
			& 0x0F;
 800e052:	f003 030f 	and.w	r3, r3, #15
 800e056:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e062:	68ba      	ldr	r2, [r7, #8]
 800e064:	429a      	cmp	r2, r3
 800e066:	da2c      	bge.n	800e0c2 <VL53L1_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			pdata->bin_seq[5] =
 800e06e:	091b      	lsrs	r3, r3, #4
 800e070:	b2da      	uxtb	r2, r3
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			& 0x0F;
 800e07c:	f003 030f 	and.w	r3, r3, #15
 800e080:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			pdata->bin_seq[3] =
 800e08c:	091b      	lsrs	r3, r3, #4
 800e08e:	b2da      	uxtb	r2, r3
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			& 0x0F;
 800e09a:	f003 030f 	and.w	r3, r3, #15
 800e09e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			pdata->bin_seq[1] =
 800e0aa:	091b      	lsrs	r3, r3, #4
 800e0ac:	b2da      	uxtb	r2, r3
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			& 0x0F;
 800e0b8:	f003 030f 	and.w	r3, r3, #15
 800e0bc:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e0c8:	68fa      	ldr	r2, [r7, #12]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	dd2c      	ble.n	800e128 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[5] =
 800e0d4:	091b      	lsrs	r3, r3, #4
 800e0d6:	b2da      	uxtb	r2, r3
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 800e0e2:	f003 030f 	and.w	r3, r3, #15
 800e0e6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[3] =
 800e0f2:	091b      	lsrs	r3, r3, #4
 800e0f4:	b2da      	uxtb	r2, r3
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 800e100:	f003 030f 	and.w	r3, r3, #15
 800e104:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[1] =
 800e110:	091b      	lsrs	r3, r3, #4
 800e112:	b2da      	uxtb	r2, r3
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 800e11e:	f003 030f 	and.w	r3, r3, #15
 800e122:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800e128:	2300      	movs	r3, #0
 800e12a:	75fb      	strb	r3, [r7, #23]
 800e12c:	e007      	b.n	800e13e <VL53L1_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800e12e:	7dfb      	ldrb	r3, [r7, #23]
 800e130:	683a      	ldr	r2, [r7, #0]
 800e132:	4413      	add	r3, r2
 800e134:	2201      	movs	r2, #1
 800e136:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800e138:	7dfb      	ldrb	r3, [r7, #23]
 800e13a:	3301      	adds	r3, #1
 800e13c:	75fb      	strb	r3, [r7, #23]
 800e13e:	7dfb      	ldrb	r3, [r7, #23]
 800e140:	2b05      	cmp	r3, #5
 800e142:	d9f4      	bls.n	800e12e <VL53L1_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800e144:	bf00      	nop
 800e146:	bf00      	nop
 800e148:	371c      	adds	r7, #28
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr

0800e152 <VL53L1_hist_phase_consistency_check>:
VL53L1_Error  VL53L1_hist_phase_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_results_t      *prange_curr)
{
 800e152:	b590      	push	{r4, r7, lr}
 800e154:	b093      	sub	sp, #76	; 0x4c
 800e156:	af04      	add	r7, sp, #16
 800e158:	60f8      	str	r0, [r7, #12]
 800e15a:	60b9      	str	r1, [r7, #8]
 800e15c:	607a      	str	r2, [r7, #4]
 800e15e:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e160:	2300      	movs	r3, #0
 800e162:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	3318      	adds	r3, #24
 800e16a:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800e16c:	2300      	movs	r3, #0
 800e16e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800e172:	2300      	movs	r3, #0
 800e174:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800e178:	2300      	movs	r3, #0
 800e17a:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800e17c:	2300      	movs	r3, #0
 800e17e:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800e180:	2300      	movs	r3, #0
 800e182:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800e184:	2300      	movs	r3, #0
 800e186:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53L1_DeviceError  range_status = 0;
 800e188:	2300      	movs	r3, #0
 800e18a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800e18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18e:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 800e192:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800e196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e198:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800e19c:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800e19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a0:	f8b3 327e 	ldrh.w	r3, [r3, #638]	; 0x27e
 800e1a4:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800e1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a8:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 800e1ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800e1b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e1b4:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 800e1b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e1b8:	021b      	lsls	r3, r3, #8
 800e1ba:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	785b      	ldrb	r3, [r3, #1]
 800e1c0:	2b07      	cmp	r3, #7
 800e1c2:	d006      	beq.n	800e1d2 <VL53L1_hist_phase_consistency_check+0x80>
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	785b      	ldrb	r3, [r3, #1]
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 800e1c8:	2b08      	cmp	r3, #8
 800e1ca:	d002      	beq.n	800e1d2 <VL53L1_hist_phase_consistency_check+0x80>
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800e1cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e1d0:	e0ec      	b.n	800e3ac <VL53L1_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800e1d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d102      	bne.n	800e1de <VL53L1_hist_phase_consistency_check+0x8c>
		return status;
 800e1d8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e1dc:	e0e6      	b.n	800e3ac <VL53L1_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800e1de:	2300      	movs	r3, #0
 800e1e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e1e4:	e0d9      	b.n	800e39a <VL53L1_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800e1e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e1ea:	683a      	ldr	r2, [r7, #0]
 800e1ec:	214c      	movs	r1, #76	; 0x4c
 800e1ee:	fb01 f303 	mul.w	r3, r1, r3
 800e1f2:	4413      	add	r3, r2
 800e1f4:	335e      	adds	r3, #94	; 0x5e
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	2b09      	cmp	r3, #9
 800e1fa:	d00b      	beq.n	800e214 <VL53L1_hist_phase_consistency_check+0xc2>
			VL53L1_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53L1_p_002[lc].range_status ==
 800e1fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e200:	683a      	ldr	r2, [r7, #0]
 800e202:	214c      	movs	r1, #76	; 0x4c
 800e204:	fb01 f303 	mul.w	r3, r1, r3
 800e208:	4413      	add	r3, r2
 800e20a:	335e      	adds	r3, #94	; 0x5e
 800e20c:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800e20e:	2b13      	cmp	r3, #19
 800e210:	f040 80bd 	bne.w	800e38e <VL53L1_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	795b      	ldrb	r3, [r3, #5]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d10a      	bne.n	800e232 <VL53L1_hist_phase_consistency_check+0xe0>
			prange_curr->VL53L1_p_002[lc].range_status =
 800e21c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e220:	683a      	ldr	r2, [r7, #0]
 800e222:	214c      	movs	r1, #76	; 0x4c
 800e224:	fb01 f303 	mul.w	r3, r1, r3
 800e228:	4413      	add	r3, r2
 800e22a:	335e      	adds	r3, #94	; 0x5e
 800e22c:	2217      	movs	r2, #23
 800e22e:	701a      	strb	r2, [r3, #0]
 800e230:	e009      	b.n	800e246 <VL53L1_hist_phase_consistency_check+0xf4>
			VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53L1_p_002[lc].range_status =
 800e232:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e236:	683a      	ldr	r2, [r7, #0]
 800e238:	214c      	movs	r1, #76	; 0x4c
 800e23a:	fb01 f303 	mul.w	r3, r1, r3
 800e23e:	4413      	add	r3, r2
 800e240:	335e      	adds	r3, #94	; 0x5e
 800e242:	2207      	movs	r2, #7
 800e244:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800e246:	2300      	movs	r3, #0
 800e248:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e24c:	e097      	b.n	800e37e <VL53L1_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800e24e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e252:	683a      	ldr	r2, [r7, #0]
 800e254:	214c      	movs	r1, #76	; 0x4c
 800e256:	fb01 f303 	mul.w	r3, r1, r3
 800e25a:	4413      	add	r3, r2
 800e25c:	3354      	adds	r3, #84	; 0x54
 800e25e:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 800e260:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	4613      	mov	r3, r2
 800e268:	005b      	lsls	r3, r3, #1
 800e26a:	4413      	add	r3, r2
 800e26c:	009b      	lsls	r3, r3, #2
 800e26e:	4403      	add	r3, r0
 800e270:	3310      	adds	r3, #16
 800e272:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800e274:	4299      	cmp	r1, r3
 800e276:	d915      	bls.n	800e2a4 <VL53L1_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014 -
 800e278:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e27c:	683a      	ldr	r2, [r7, #0]
 800e27e:	214c      	movs	r1, #76	; 0x4c
 800e280:	fb01 f303 	mul.w	r3, r1, r3
 800e284:	4413      	add	r3, r2
 800e286:	3354      	adds	r3, #84	; 0x54
 800e288:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014;
 800e28a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	4613      	mov	r3, r2
 800e292:	005b      	lsls	r3, r3, #1
 800e294:	4413      	add	r3, r2
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	4403      	add	r3, r0
 800e29a:	3310      	adds	r3, #16
 800e29c:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800e29e:	1acb      	subs	r3, r1, r3
 800e2a0:	867b      	strh	r3, [r7, #50]	; 0x32
 800e2a2:	e014      	b.n	800e2ce <VL53L1_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53L1_p_002[p].VL53L1_p_014 -
 800e2a4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e2a8:	6879      	ldr	r1, [r7, #4]
 800e2aa:	4613      	mov	r3, r2
 800e2ac:	005b      	lsls	r3, r3, #1
 800e2ae:	4413      	add	r3, r2
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	440b      	add	r3, r1
 800e2b4:	3310      	adds	r3, #16
 800e2b6:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014;
 800e2b8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e2bc:	6839      	ldr	r1, [r7, #0]
 800e2be:	204c      	movs	r0, #76	; 0x4c
 800e2c0:	fb00 f303 	mul.w	r3, r0, r3
 800e2c4:	440b      	add	r3, r1
 800e2c6:	3354      	adds	r3, #84	; 0x54
 800e2c8:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800e2ca:	1ad3      	subs	r3, r2, r3
 800e2cc:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800e2ce:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800e2d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d24e      	bcs.n	800e374 <VL53L1_hist_phase_consistency_check+0x222>





				if (status == VL53L1_ERROR_NONE)
 800e2d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d125      	bne.n	800e32a <VL53L1_hist_phase_consistency_check+0x1d8>
					status =
					VL53L1_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53L1_p_002[p]),
 800e2de:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53L1_hist_events_consistency_check(
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	005b      	lsls	r3, r3, #1
 800e2e6:	4413      	add	r3, r2
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	3308      	adds	r3, #8
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53L1_p_002[lc]),
 800e2f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_events_consistency_check(
 800e2f4:	224c      	movs	r2, #76	; 0x4c
 800e2f6:	fb02 f303 	mul.w	r3, r2, r3
 800e2fa:	3310      	adds	r3, #16
 800e2fc:	683a      	ldr	r2, [r7, #0]
 800e2fe:	4413      	add	r3, r2
 800e300:	3304      	adds	r3, #4
 800e302:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800e304:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800e308:	f107 0217 	add.w	r2, r7, #23
 800e30c:	9203      	str	r2, [sp, #12]
 800e30e:	f107 021c 	add.w	r2, r7, #28
 800e312:	9202      	str	r2, [sp, #8]
 800e314:	f107 0218 	add.w	r2, r7, #24
 800e318:	9201      	str	r2, [sp, #4]
 800e31a:	9300      	str	r3, [sp, #0]
 800e31c:	4623      	mov	r3, r4
 800e31e:	68ba      	ldr	r2, [r7, #8]
 800e320:	f000 f848 	bl	800e3b4 <VL53L1_hist_events_consistency_check>
 800e324:	4603      	mov	r3, r0
 800e326:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53L1_ERROR_NONE &&
 800e32a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d115      	bne.n	800e35e <VL53L1_hist_phase_consistency_check+0x20c>
					range_status ==
 800e332:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53L1_ERROR_NONE &&
 800e334:	2b09      	cmp	r3, #9
 800e336:	d112      	bne.n	800e35e <VL53L1_hist_phase_consistency_check+0x20c>
					VL53L1_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53L1_hist_merged_pulse_check(
 800e338:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53L1_p_002[lc]),
 800e33c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_merged_pulse_check(
 800e340:	224c      	movs	r2, #76	; 0x4c
 800e342:	fb02 f303 	mul.w	r3, r2, r3
 800e346:	3310      	adds	r3, #16
 800e348:	683a      	ldr	r2, [r7, #0]
 800e34a:	4413      	add	r3, r2
 800e34c:	3304      	adds	r3, #4
 800e34e:	f107 0217 	add.w	r2, r7, #23
 800e352:	4619      	mov	r1, r3
 800e354:	f000 fb44 	bl	800e9e0 <VL53L1_hist_merged_pulse_check>
 800e358:	4603      	mov	r3, r0
 800e35a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53L1_p_002[lc].range_status =
 800e35e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e362:	7df8      	ldrb	r0, [r7, #23]
 800e364:	683a      	ldr	r2, [r7, #0]
 800e366:	214c      	movs	r1, #76	; 0x4c
 800e368:	fb01 f303 	mul.w	r3, r1, r3
 800e36c:	4413      	add	r3, r2
 800e36e:	335e      	adds	r3, #94	; 0x5e
 800e370:	4602      	mov	r2, r0
 800e372:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800e374:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e378:	3301      	adds	r3, #1
 800e37a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	795b      	ldrb	r3, [r3, #5]
 800e382:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e386:	429a      	cmp	r2, r3
 800e388:	f4ff af61 	bcc.w	800e24e <VL53L1_hist_phase_consistency_check+0xfc>
 800e38c:	e000      	b.n	800e390 <VL53L1_hist_phase_consistency_check+0x23e>
			continue;
 800e38e:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800e390:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e394:	3301      	adds	r3, #1
 800e396:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	7c9b      	ldrb	r3, [r3, #18]
 800e39e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	f4ff af1f 	bcc.w	800e1e6 <VL53L1_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800e3a8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	373c      	adds	r7, #60	; 0x3c
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd90      	pop	{r4, r7, pc}

0800e3b4 <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 800e3b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e3b8:	b0d4      	sub	sp, #336	; 0x150
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800e3c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800e3ca:	460b      	mov	r3, r1
 800e3cc:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800e3d6:	f04f 0200 	mov.w	r2, #0
 800e3da:	f04f 0300 	mov.w	r3, #0
 800e3de:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800e3e2:	f04f 0200 	mov.w	r2, #0
 800e3e6:	f04f 0300 	mov.w	r3, #0
 800e3ea:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800e3ee:	f04f 0200 	mov.w	r2, #0
 800e3f2:	f04f 0300 	mov.w	r3, #0
 800e3f6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800e3fa:	f04f 0200 	mov.w	r2, #0
 800e3fe:	f04f 0300 	mov.w	r3, #0
 800e402:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800e406:	f04f 0200 	mov.w	r2, #0
 800e40a:	f04f 0300 	mov.w	r3, #0
 800e40e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800e412:	f04f 0200 	mov.w	r2, #0
 800e416:	f04f 0300 	mov.w	r3, #0
 800e41a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800e41e:	f04f 0200 	mov.w	r2, #0
 800e422:	f04f 0300 	mov.w	r3, #0
 800e426:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800e42a:	f04f 0200 	mov.w	r2, #0
 800e42e:	f04f 0300 	mov.w	r3, #0
 800e432:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800e436:	2300      	movs	r3, #0
 800e438:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800e43c:	2300      	movs	r3, #0
 800e43e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800e442:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800e446:	2b00      	cmp	r3, #0
 800e448:	d106      	bne.n	800e458 <VL53L1_hist_events_consistency_check+0xa4>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800e44a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800e44e:	2209      	movs	r2, #9
 800e450:	701a      	strb	r2, [r3, #0]
		return status;
 800e452:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800e456:	e2bd      	b.n	800e9d4 <VL53L1_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800e458:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e45c:	689b      	ldr	r3, [r3, #8]
 800e45e:	2200      	movs	r2, #0
 800e460:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e464:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800e468:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800e46c:	460b      	mov	r3, r1
 800e46e:	3301      	adds	r3, #1
 800e470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e474:	4613      	mov	r3, r2
 800e476:	f143 0300 	adc.w	r3, r3, #0
 800e47a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e47e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800e482:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800e486:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e48a:	885b      	ldrh	r3, [r3, #2]
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	2200      	movs	r2, #0
 800e490:	469a      	mov	sl, r3
 800e492:	4693      	mov	fp, r2
 800e494:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800e498:	fb0a f203 	mul.w	r2, sl, r3
 800e49c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e4a0:	fb0b f303 	mul.w	r3, fp, r3
 800e4a4:	441a      	add	r2, r3
 800e4a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e4aa:	fba3 450a 	umull	r4, r5, r3, sl
 800e4ae:	1953      	adds	r3, r2, r5
 800e4b0:	461d      	mov	r5, r3
 800e4b2:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800e4b6:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800e4ba:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800e4be:	699b      	ldr	r3, [r3, #24]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e4c6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e4ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e4ce:	460b      	mov	r3, r1
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e4d6:	4613      	mov	r3, r2
 800e4d8:	f143 0300 	adc.w	r3, r3, #0
 800e4dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e4e0:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800e4e4:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 800e4e8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800e4ec:	8adb      	ldrh	r3, [r3, #22]
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e4f6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800e4fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e4fe:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800e502:	4622      	mov	r2, r4
 800e504:	fb02 f203 	mul.w	r2, r2, r3
 800e508:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e50c:	4629      	mov	r1, r5
 800e50e:	fb01 f303 	mul.w	r3, r1, r3
 800e512:	441a      	add	r2, r3
 800e514:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e518:	4621      	mov	r1, r4
 800e51a:	fba3 8901 	umull	r8, r9, r3, r1
 800e51e:	eb02 0309 	add.w	r3, r2, r9
 800e522:	4699      	mov	r9, r3
 800e524:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800e528:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800e52c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e530:	f04f 0000 	mov.w	r0, #0
 800e534:	f04f 0100 	mov.w	r1, #0
 800e538:	0319      	lsls	r1, r3, #12
 800e53a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800e53e:	0310      	lsls	r0, r2, #12
 800e540:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	events_scaler += (tmpc/2);
 800e544:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800e548:	0fd9      	lsrs	r1, r3, #31
 800e54a:	2000      	movs	r0, #0
 800e54c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800e550:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800e554:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800e558:	4621      	mov	r1, r4
 800e55a:	1889      	adds	r1, r1, r2
 800e55c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800e560:	4629      	mov	r1, r5
 800e562:	eb43 0101 	adc.w	r1, r3, r1
 800e566:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800e56a:	f04f 0200 	mov.w	r2, #0
 800e56e:	f04f 0300 	mov.w	r3, #0
 800e572:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800e576:	4621      	mov	r1, r4
 800e578:	084a      	lsrs	r2, r1, #1
 800e57a:	4629      	mov	r1, r5
 800e57c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800e580:	4629      	mov	r1, r5
 800e582:	104b      	asrs	r3, r1, #1
 800e584:	4610      	mov	r0, r2
 800e586:	4619      	mov	r1, r3
 800e588:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800e58c:	1814      	adds	r4, r2, r0
 800e58e:	67bc      	str	r4, [r7, #120]	; 0x78
 800e590:	414b      	adcs	r3, r1
 800e592:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e594:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800e598:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	if (tmpc != 0)
 800e59c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800e5a0:	4313      	orrs	r3, r2
 800e5a2:	d009      	beq.n	800e5b8 <VL53L1_hist_events_consistency_check+0x204>
		events_scaler = do_division_s(events_scaler, tmpc);
 800e5a4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800e5a8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800e5ac:	f7f2 f8c2 	bl	8000734 <__aeabi_ldivmod>
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148

	events_scaler_sq  = events_scaler * events_scaler;
 800e5b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800e5bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e5c0:	fb03 f102 	mul.w	r1, r3, r2
 800e5c4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800e5c8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e5cc:	fb02 f303 	mul.w	r3, r2, r3
 800e5d0:	18ca      	adds	r2, r1, r3
 800e5d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e5d6:	fba3 1303 	umull	r1, r3, r3, r3
 800e5da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e5de:	460b      	mov	r3, r1
 800e5e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e5e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e5e8:	18d3      	adds	r3, r2, r3
 800e5ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e5ee:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800e5f2:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800e5f6:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800e5fa:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e5fe:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800e602:	6739      	str	r1, [r7, #112]	; 0x70
 800e604:	f143 0300 	adc.w	r3, r3, #0
 800e608:	677b      	str	r3, [r7, #116]	; 0x74
 800e60a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800e60e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800e612:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e616:	2b00      	cmp	r3, #0
 800e618:	da08      	bge.n	800e62c <VL53L1_hist_events_consistency_check+0x278>
 800e61a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800e61e:	1851      	adds	r1, r2, r1
 800e620:	66b9      	str	r1, [r7, #104]	; 0x68
 800e622:	f143 0300 	adc.w	r3, r3, #0
 800e626:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e628:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e62c:	f04f 0000 	mov.w	r0, #0
 800e630:	f04f 0100 	mov.w	r1, #0
 800e634:	0b10      	lsrs	r0, r2, #12
 800e636:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800e63a:	1319      	asrs	r1, r3, #12
 800e63c:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53L1_p_021;
 800e640:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800e644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e646:	2200      	movs	r2, #0
 800e648:	663b      	str	r3, [r7, #96]	; 0x60
 800e64a:	667a      	str	r2, [r7, #100]	; 0x64
 800e64c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800e650:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 800e654:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800e658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e65a:	2200      	movs	r2, #0
 800e65c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e660:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800e664:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e668:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800e66c:	4621      	mov	r1, r4
 800e66e:	1a51      	subs	r1, r2, r1
 800e670:	65b9      	str	r1, [r7, #88]	; 0x58
 800e672:	4629      	mov	r1, r5
 800e674:	eb63 0301 	sbc.w	r3, r3, r1
 800e678:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e67a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800e67e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800e682:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800e686:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e68a:	fb03 f102 	mul.w	r1, r3, r2
 800e68e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800e692:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e696:	fb02 f303 	mul.w	r3, r2, r3
 800e69a:	4419      	add	r1, r3
 800e69c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800e6a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e6a4:	fba2 2303 	umull	r2, r3, r2, r3
 800e6a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e6ac:	4613      	mov	r3, r2
 800e6ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e6b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6b6:	18cb      	adds	r3, r1, r3
 800e6b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e6bc:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800e6c0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800e6c4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800e6c8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e6cc:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800e6d0:	6539      	str	r1, [r7, #80]	; 0x50
 800e6d2:	f143 0300 	adc.w	r3, r3, #0
 800e6d6:	657b      	str	r3, [r7, #84]	; 0x54
 800e6d8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800e6dc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800e6e0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	da08      	bge.n	800e6fa <VL53L1_hist_events_consistency_check+0x346>
 800e6e8:	f640 71ff 	movw	r1, #4095	; 0xfff
 800e6ec:	1851      	adds	r1, r2, r1
 800e6ee:	64b9      	str	r1, [r7, #72]	; 0x48
 800e6f0:	f143 0300 	adc.w	r3, r3, #0
 800e6f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e6fa:	f04f 0000 	mov.w	r0, #0
 800e6fe:	f04f 0100 	mov.w	r1, #0
 800e702:	0b10      	lsrs	r0, r2, #12
 800e704:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800e708:	1319      	asrs	r1, r3, #12
 800e70a:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800e70e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e712:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 800e716:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800e71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e71c:	2200      	movs	r2, #0
 800e71e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e722:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e726:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e72a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800e72e:	4622      	mov	r2, r4
 800e730:	fb02 f203 	mul.w	r2, r2, r3
 800e734:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e738:	4629      	mov	r1, r5
 800e73a:	fb01 f303 	mul.w	r3, r1, r3
 800e73e:	441a      	add	r2, r3
 800e740:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e744:	4621      	mov	r1, r4
 800e746:	fba3 1301 	umull	r1, r3, r3, r1
 800e74a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e74e:	460b      	mov	r3, r1
 800e750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e758:	18d3      	adds	r3, r2, r3
 800e75a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e75e:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800e762:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800e766:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800e76a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e76e:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800e772:	6439      	str	r1, [r7, #64]	; 0x40
 800e774:	f143 0300 	adc.w	r3, r3, #0
 800e778:	647b      	str	r3, [r7, #68]	; 0x44
 800e77a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800e77e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800e782:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e786:	2b00      	cmp	r3, #0
 800e788:	da08      	bge.n	800e79c <VL53L1_hist_events_consistency_check+0x3e8>
 800e78a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800e78e:	1851      	adds	r1, r2, r1
 800e790:	63b9      	str	r1, [r7, #56]	; 0x38
 800e792:	f143 0300 	adc.w	r3, r3, #0
 800e796:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e798:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e79c:	f04f 0000 	mov.w	r0, #0
 800e7a0:	f04f 0100 	mov.w	r1, #0
 800e7a4:	0b10      	lsrs	r0, r2, #12
 800e7a6:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800e7aa:	1319      	asrs	r1, r3, #12
 800e7ac:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800e7b0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e7b4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 800e7b8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800e7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e7c4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e7c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7cc:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800e7d0:	4622      	mov	r2, r4
 800e7d2:	fb02 f203 	mul.w	r2, r2, r3
 800e7d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800e7da:	4629      	mov	r1, r5
 800e7dc:	fb01 f303 	mul.w	r3, r1, r3
 800e7e0:	441a      	add	r2, r3
 800e7e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800e7e6:	4621      	mov	r1, r4
 800e7e8:	fba3 1301 	umull	r1, r3, r3, r1
 800e7ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e7f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e7fa:	18d3      	adds	r3, r2, r3
 800e7fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e800:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800e804:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800e808:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800e80c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e810:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800e814:	6339      	str	r1, [r7, #48]	; 0x30
 800e816:	f143 0300 	adc.w	r3, r3, #0
 800e81a:	637b      	str	r3, [r7, #52]	; 0x34
 800e81c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800e820:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800e824:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e828:	4610      	mov	r0, r2
 800e82a:	4619      	mov	r1, r3
 800e82c:	2900      	cmp	r1, #0
 800e82e:	da08      	bge.n	800e842 <VL53L1_hist_events_consistency_check+0x48e>
 800e830:	f640 73ff 	movw	r3, #4095	; 0xfff
 800e834:	18c3      	adds	r3, r0, r3
 800e836:	62bb      	str	r3, [r7, #40]	; 0x28
 800e838:	f141 0300 	adc.w	r3, r1, #0
 800e83c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e83e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e842:	f04f 0200 	mov.w	r2, #0
 800e846:	f04f 0300 	mov.w	r3, #0
 800e84a:	0b02      	lsrs	r2, r0, #12
 800e84c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e850:	130b      	asrs	r3, r1, #12
 800e852:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800e856:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e85a:	1c91      	adds	r1, r2, #2
 800e85c:	6239      	str	r1, [r7, #32]
 800e85e:	f143 0300 	adc.w	r3, r3, #0
 800e862:	627b      	str	r3, [r7, #36]	; 0x24
 800e864:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e868:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800e86c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e870:	2b00      	cmp	r3, #0
 800e872:	da06      	bge.n	800e882 <VL53L1_hist_events_consistency_check+0x4ce>
 800e874:	1cd1      	adds	r1, r2, #3
 800e876:	61b9      	str	r1, [r7, #24]
 800e878:	f143 0300 	adc.w	r3, r3, #0
 800e87c:	61fb      	str	r3, [r7, #28]
 800e87e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e882:	f04f 0000 	mov.w	r0, #0
 800e886:	f04f 0100 	mov.w	r1, #0
 800e88a:	0890      	lsrs	r0, r2, #2
 800e88c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800e890:	1099      	asrs	r1, r3, #2
 800e892:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53L1_p_020;
 800e896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e89a:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800e89c:	2200      	movs	r2, #0
 800e89e:	613b      	str	r3, [r7, #16]
 800e8a0:	617a      	str	r2, [r7, #20]
 800e8a2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e8a6:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800e8aa:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800e8ae:	1c91      	adds	r1, r2, #2
 800e8b0:	60b9      	str	r1, [r7, #8]
 800e8b2:	f143 0300 	adc.w	r3, r3, #0
 800e8b6:	60fb      	str	r3, [r7, #12]
 800e8b8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e8bc:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800e8c0:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	da06      	bge.n	800e8d6 <VL53L1_hist_events_consistency_check+0x522>
 800e8c8:	1cd1      	adds	r1, r2, #3
 800e8ca:	6039      	str	r1, [r7, #0]
 800e8cc:	f143 0300 	adc.w	r3, r3, #0
 800e8d0:	607b      	str	r3, [r7, #4]
 800e8d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8d6:	f04f 0000 	mov.w	r0, #0
 800e8da:	f04f 0100 	mov.w	r1, #0
 800e8de:	0890      	lsrs	r0, r2, #2
 800e8e0:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800e8e4:	1099      	asrs	r1, r3, #2
 800e8e6:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53L1_p_021 +
 800e8ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e8ee:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800e8f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53L1_p_021 +
 800e8f4:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800e8f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800e8fa:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800e8fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800e900:	4413      	add	r3, r2
 800e902:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 800e906:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e90a:	011b      	lsls	r3, r3, #4
 800e90c:	4618      	mov	r0, r3
 800e90e:	f002 f8c6 	bl	8010a9e <VL53L1_isqrt>
 800e912:	4603      	mov	r3, r0
 800e914:	461a      	mov	r2, r3
	*pevents_tolerance =
 800e916:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e91a:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800e91c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800e926:	fb03 f202 	mul.w	r2, r3, r2
 800e92a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e92e:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800e930:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f103 0220 	add.w	r2, r3, #32
 800e93a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e93e:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800e940:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	da00      	bge.n	800e94c <VL53L1_hist_events_consistency_check+0x598>
 800e94a:	333f      	adds	r3, #63	; 0x3f
 800e94c:	119b      	asrs	r3, r3, #6
 800e94e:	461a      	mov	r2, r3
 800e950:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e954:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53L1_p_021;
 800e956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 800e960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	461a      	mov	r2, r3
 800e968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e96c:	1a9b      	subs	r3, r3, r2
 800e96e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800e972:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e976:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800e97a:	429a      	cmp	r2, r3
 800e97c:	da08      	bge.n	800e990 <VL53L1_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800e97e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800e982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e986:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800e988:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800e98c:	601a      	str	r2, [r3, #0]
 800e98e:	e007      	b.n	800e9a0 <VL53L1_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800e990:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e994:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800e998:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800e99a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800e99e:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800e9a0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800e9a4:	681a      	ldr	r2, [r3, #0]
 800e9a6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	dd0b      	ble.n	800e9c8 <VL53L1_hist_events_consistency_check+0x614>
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
 800e9b0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800e9b4:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800e9b6:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d204      	bcs.n	800e9c8 <VL53L1_hist_events_consistency_check+0x614>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 800e9be:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800e9c2:	2214      	movs	r2, #20
 800e9c4:	701a      	strb	r2, [r3, #0]
 800e9c6:	e003      	b.n	800e9d0 <VL53L1_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800e9c8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800e9cc:	2209      	movs	r2, #9
 800e9ce:	701a      	strb	r2, [r3, #0]





	return status;
 800e9d0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e9e0 <VL53L1_hist_merged_pulse_check>:

VL53L1_Error  VL53L1_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53L1_range_data_t         *pdata,
	VL53L1_DeviceError          *prange_status)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b087      	sub	sp, #28
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	60b9      	str	r1, [r7, #8]
 800e9ea:	607a      	str	r2, [r7, #4]
 800e9ec:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800ea02:	429a      	cmp	r2, r3
 800ea04:	dd0b      	ble.n	800ea1e <VL53L1_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800ea0c:	b29a      	uxth	r2, r3
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800ea14:	b29b      	uxth	r3, r3
 800ea16:	1ad3      	subs	r3, r2, r3
 800ea18:	b29b      	uxth	r3, r3
		delta_mm =
 800ea1a:	82fb      	strh	r3, [r7, #22]
 800ea1c:	e00a      	b.n	800ea34 <VL53L1_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800ea24:	b29a      	uxth	r2, r3
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	1ad3      	subs	r3, r2, r3
 800ea30:	b29b      	uxth	r3, r3
		delta_mm =
 800ea32:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800ea34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	dd09      	ble.n	800ea50 <VL53L1_hist_merged_pulse_check+0x70>
 800ea3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ea40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	dd03      	ble.n	800ea50 <VL53L1_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2216      	movs	r2, #22
 800ea4c:	701a      	strb	r2, [r3, #0]
 800ea4e:	e002      	b.n	800ea56 <VL53L1_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2209      	movs	r2, #9
 800ea54:	701a      	strb	r2, [r3, #0]

	return status;
 800ea56:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	371c      	adds	r7, #28
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr

0800ea66 <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 800ea66:	b580      	push	{r7, lr}
 800ea68:	b08e      	sub	sp, #56	; 0x38
 800ea6a:	af04      	add	r7, sp, #16
 800ea6c:	60f8      	str	r0, [r7, #12]
 800ea6e:	60b9      	str	r1, [r7, #8]
 800ea70:	607a      	str	r2, [r7, #4]
 800ea72:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ea74:	2300      	movs	r3, #0
 800ea76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev =
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	3318      	adds	r3, #24
 800ea7e:	623b      	str	r3, [r7, #32]
		VL53L1DevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800ea80:	2300      	movs	r3, #0
 800ea82:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800ea84:	2300      	movs	r3, #0
 800ea86:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800ea88:	6a3b      	ldr	r3, [r7, #32]
 800ea8a:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 800ea8e:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800ea90:	6a3b      	ldr	r3, [r7, #32]
 800ea92:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800ea96:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800ea9e:	2b09      	cmp	r3, #9
 800eaa0:	d009      	beq.n	800eab6 <VL53L1_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800eaa8:	2b13      	cmp	r3, #19
 800eaaa:	d004      	beq.n	800eab6 <VL53L1_hist_xmonitor_consistency_check+0x50>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800eab2:	2b14      	cmp	r3, #20
 800eab4:	d129      	bne.n	800eb0a <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eabc:	2b09      	cmp	r3, #9
 800eabe:	d009      	beq.n	800ead4 <VL53L1_hist_xmonitor_consistency_check+0x6e>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800eac6:	2b13      	cmp	r3, #19
 800eac8:	d004      	beq.n	800ead4 <VL53L1_hist_xmonitor_consistency_check+0x6e>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800ead0:	2b14      	cmp	r3, #20
 800ead2:	d11a      	bne.n	800eb0a <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	2209      	movs	r2, #9
 800ead8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	334a      	adds	r3, #74	; 0x4a
				VL53L1_hist_events_consistency_check(
 800eae6:	8bb9      	ldrh	r1, [r7, #28]
 800eae8:	7ff8      	ldrb	r0, [r7, #31]
 800eaea:	9303      	str	r3, [sp, #12]
 800eaec:	f107 0318 	add.w	r3, r7, #24
 800eaf0:	9302      	str	r3, [sp, #8]
 800eaf2:	f107 0314 	add.w	r3, r7, #20
 800eaf6:	9301      	str	r3, [sp, #4]
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	9300      	str	r3, [sp, #0]
 800eafc:	4613      	mov	r3, r2
 800eafe:	68ba      	ldr	r2, [r7, #8]
 800eb00:	f7ff fc58 	bl	800e3b4 <VL53L1_hist_events_consistency_check>
 800eb04:	4603      	mov	r3, r0
 800eb06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800eb0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3728      	adds	r7, #40	; 0x28
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b088      	sub	sp, #32
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	60f8      	str	r0, [r7, #12]
 800eb1e:	60b9      	str	r1, [r7, #8]
 800eb20:	607a      	str	r2, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800eb22:	2300      	movs	r3, #0
 800eb24:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800eb26:	2300      	movs	r3, #0
 800eb28:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2200      	movs	r2, #0
 800eb36:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53L1_p_019 != 0) {
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d019      	beq.n	800eb76 <VL53L1_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53L1_calc_pll_period_mm(
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f002 f90f 	bl	8010d6c <VL53L1_calc_pll_period_mm>
 800eb4e:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53L1_p_019);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800eb56:	021b      	lsls	r3, r3, #8
 800eb58:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	69ba      	ldr	r2, [r7, #24]
 800eb5e:	fb02 f303 	mul.w	r3, r2, r3
 800eb62:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800eb6a:	0bdb      	lsrs	r3, r3, #15
 800eb6c:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	b21a      	sxth	r2, r3
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800eb76:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3720      	adds	r7, #32
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}

0800eb82 <VL53L1_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53L1_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800eb82:	b590      	push	{r4, r7, lr}
 800eb84:	b08d      	sub	sp, #52	; 0x34
 800eb86:	af04      	add	r7, sp, #16
 800eb88:	4604      	mov	r4, r0
 800eb8a:	4608      	mov	r0, r1
 800eb8c:	4611      	mov	r1, r2
 800eb8e:	461a      	mov	r2, r3
 800eb90:	4623      	mov	r3, r4
 800eb92:	80fb      	strh	r3, [r7, #6]
 800eb94:	4603      	mov	r3, r0
 800eb96:	80bb      	strh	r3, [r7, #4]
 800eb98:	460b      	mov	r3, r1
 800eb9a:	70fb      	strb	r3, [r7, #3]
 800eb9c:	4613      	mov	r3, r2
 800eb9e:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800eba0:	2300      	movs	r3, #0
 800eba2:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800eba4:	2300      	movs	r3, #0
 800eba6:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800ebac:	2300      	movs	r3, #0
 800ebae:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	613b      	str	r3, [r7, #16]



	VL53L1_calc_mm_effective_spads(
 800ebc0:	78b9      	ldrb	r1, [r7, #2]
 800ebc2:	78f8      	ldrb	r0, [r7, #3]
 800ebc4:	f107 030c 	add.w	r3, r7, #12
 800ebc8:	9303      	str	r3, [sp, #12]
 800ebca:	f107 030e 	add.w	r3, r7, #14
 800ebce:	9302      	str	r3, [sp, #8]
 800ebd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ebd4:	9301      	str	r3, [sp, #4]
 800ebd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebd8:	9300      	str	r3, [sp, #0]
 800ebda:	23ff      	movs	r3, #255	; 0xff
 800ebdc:	22c7      	movs	r2, #199	; 0xc7
 800ebde:	f000 fa03 	bl	800efe8 <VL53L1_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800ebe2:	89fb      	ldrh	r3, [r7, #14]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d050      	beq.n	800ec8a <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800ebe8:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d04d      	beq.n	800ec8a <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;



	VL53L1_calc_mm_effective_spads(
 800ebee:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800ebf2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800ebf6:	78b9      	ldrb	r1, [r7, #2]
 800ebf8:	78f8      	ldrb	r0, [r7, #3]
 800ebfa:	f107 0308 	add.w	r3, r7, #8
 800ebfe:	9303      	str	r3, [sp, #12]
 800ec00:	f107 030a 	add.w	r3, r7, #10
 800ec04:	9302      	str	r3, [sp, #8]
 800ec06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ec0a:	9301      	str	r3, [sp, #4]
 800ec0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec0e:	9300      	str	r3, [sp, #0]
 800ec10:	4623      	mov	r3, r4
 800ec12:	f000 f9e9 	bl	800efe8 <VL53L1_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800ec16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec18:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800ec1a:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800ec1c:	897b      	ldrh	r3, [r7, #10]
 800ec1e:	461a      	mov	r2, r3
 800ec20:	69bb      	ldr	r3, [r7, #24]
 800ec22:	fb02 f303 	mul.w	r3, r2, r3
 800ec26:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800ec28:	89fb      	ldrh	r3, [r7, #14]
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	69bb      	ldr	r3, [r7, #24]
 800ec2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec32:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800ec34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec36:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800ec38:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800ec3a:	893b      	ldrh	r3, [r7, #8]
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	fb02 f303 	mul.w	r3, r2, r3
 800ec44:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800ec46:	89bb      	ldrh	r3, [r7, #12]
 800ec48:	461a      	mov	r2, r3
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec50:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800ec52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ec56:	69ba      	ldr	r2, [r7, #24]
 800ec58:	fb02 f303 	mul.w	r3, r2, r3
 800ec5c:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800ec5e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ec62:	697a      	ldr	r2, [r7, #20]
 800ec64:	fb02 f303 	mul.w	r3, r2, r3
 800ec68:	69fa      	ldr	r2, [r7, #28]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800ec6e:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800ec70:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800ec72:	4413      	add	r3, r2
 800ec74:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d008      	beq.n	800ec8e <VL53L1_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	009a      	lsls	r2, r3, #2
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	fb92 f3f3 	sdiv	r3, r2, r3
 800ec86:	61fb      	str	r3, [r7, #28]
 800ec88:	e002      	b.n	800ec90 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800ec8a:	bf00      	nop
 800ec8c:	e000      	b.n	800ec90 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800ec8e:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800ec90:	69fb      	ldr	r3, [r7, #28]
 800ec92:	b21a      	sxth	r2, r3
 800ec94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec96:	801a      	strh	r2, [r3, #0]

}
 800ec98:	bf00      	nop
 800ec9a:	3724      	adds	r7, #36	; 0x24
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd90      	pop	{r4, r7, pc}

0800eca0 <VL53L1_spad_number_to_byte_bit_index>:
void VL53L1_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b085      	sub	sp, #20
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60b9      	str	r1, [r7, #8]
 800eca8:	607a      	str	r2, [r7, #4]
 800ecaa:	603b      	str	r3, [r7, #0]
 800ecac:	4603      	mov	r3, r0
 800ecae:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800ecb0:	7bfb      	ldrb	r3, [r7, #15]
 800ecb2:	08db      	lsrs	r3, r3, #3
 800ecb4:	b2da      	uxtb	r2, r3
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800ecba:	7bfb      	ldrb	r3, [r7, #15]
 800ecbc:	f003 0307 	and.w	r3, r3, #7
 800ecc0:	b2da      	uxtb	r2, r3
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	781b      	ldrb	r3, [r3, #0]
 800ecca:	461a      	mov	r2, r3
 800eccc:	2301      	movs	r3, #1
 800ecce:	4093      	lsls	r3, r2
 800ecd0:	b2da      	uxtb	r2, r3
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	701a      	strb	r2, [r3, #0]

}
 800ecd6:	bf00      	nop
 800ecd8:	3714      	adds	r7, #20
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece0:	4770      	bx	lr

0800ece2 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800ece2:	b480      	push	{r7}
 800ece4:	b083      	sub	sp, #12
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	4603      	mov	r3, r0
 800ecea:	603a      	str	r2, [r7, #0]
 800ecec:	71fb      	strb	r3, [r7, #7]
 800ecee:	460b      	mov	r3, r1
 800ecf0:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800ecf2:	79fb      	ldrb	r3, [r7, #7]
 800ecf4:	2b07      	cmp	r3, #7
 800ecf6:	d90a      	bls.n	800ed0e <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800ecf8:	79bb      	ldrb	r3, [r7, #6]
 800ecfa:	00db      	lsls	r3, r3, #3
 800ecfc:	b2da      	uxtb	r2, r3
 800ecfe:	79fb      	ldrb	r3, [r7, #7]
 800ed00:	1ad3      	subs	r3, r2, r3
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	3b71      	subs	r3, #113	; 0x71
 800ed06:	b2da      	uxtb	r2, r3
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800ed0c:	e00a      	b.n	800ed24 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800ed0e:	79bb      	ldrb	r3, [r7, #6]
 800ed10:	f1c3 030f 	rsb	r3, r3, #15
 800ed14:	b2db      	uxtb	r3, r3
 800ed16:	00db      	lsls	r3, r3, #3
 800ed18:	b2da      	uxtb	r2, r3
 800ed1a:	79fb      	ldrb	r3, [r7, #7]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	b2da      	uxtb	r2, r3
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	701a      	strb	r2, [r3, #0]
}
 800ed24:	bf00      	nop
 800ed26:	370c      	adds	r7, #12
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b085      	sub	sp, #20
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	4603      	mov	r3, r0
 800ed38:	60b9      	str	r1, [r7, #8]
 800ed3a:	607a      	str	r2, [r7, #4]
 800ed3c:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800ed3e:	7bfb      	ldrb	r3, [r7, #15]
 800ed40:	091b      	lsrs	r3, r3, #4
 800ed42:	b2da      	uxtb	r2, r3
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800ed48:	7bfb      	ldrb	r3, [r7, #15]
 800ed4a:	f003 030f 	and.w	r3, r3, #15
 800ed4e:	b2da      	uxtb	r2, r3
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	701a      	strb	r2, [r3, #0]

}
 800ed54:	bf00      	nop
 800ed56:	3714      	adds	r7, #20
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr

0800ed60 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	4603      	mov	r3, r0
 800ed68:	603a      	str	r2, [r7, #0]
 800ed6a:	71fb      	strb	r3, [r7, #7]
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800ed70:	79bb      	ldrb	r3, [r7, #6]
 800ed72:	011b      	lsls	r3, r3, #4
 800ed74:	b2da      	uxtb	r2, r3
 800ed76:	79fb      	ldrb	r3, [r7, #7]
 800ed78:	4413      	add	r3, r2
 800ed7a:	b2da      	uxtb	r2, r3
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	701a      	strb	r2, [r3, #0]

}
 800ed80:	bf00      	nop
 800ed82:	370c      	adds	r7, #12
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b086      	sub	sp, #24
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	60ba      	str	r2, [r7, #8]
 800ed94:	607b      	str	r3, [r7, #4]
 800ed96:	4603      	mov	r3, r0
 800ed98:	73fb      	strb	r3, [r7, #15]
 800ed9a:	460b      	mov	r3, r1
 800ed9c:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800eda2:	2300      	movs	r3, #0
 800eda4:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800eda6:	2300      	movs	r3, #0
 800eda8:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800edaa:	2300      	movs	r3, #0
 800edac:	753b      	strb	r3, [r7, #20]



	VL53L1_decode_row_col(
 800edae:	f107 0217 	add.w	r2, r7, #23
 800edb2:	f107 0116 	add.w	r1, r7, #22
 800edb6:	7bfb      	ldrb	r3, [r7, #15]
 800edb8:	4618      	mov	r0, r3
 800edba:	f002 fa51 	bl	8011260 <VL53L1_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53L1_decode_zone_size(
 800edbe:	f107 0214 	add.w	r2, r7, #20
 800edc2:	f107 0115 	add.w	r1, r7, #21
 800edc6:	7bbb      	ldrb	r3, [r7, #14]
 800edc8:	4618      	mov	r0, r3
 800edca:	f7ff ffb1 	bl	800ed30 <VL53L1_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800edce:	7dfb      	ldrb	r3, [r7, #23]
 800edd0:	b29a      	uxth	r2, r3
 800edd2:	7d7b      	ldrb	r3, [r7, #21]
 800edd4:	3301      	adds	r3, #1
 800edd6:	0fd9      	lsrs	r1, r3, #31
 800edd8:	440b      	add	r3, r1
 800edda:	105b      	asrs	r3, r3, #1
 800eddc:	425b      	negs	r3, r3
 800edde:	b29b      	uxth	r3, r3
 800ede0:	4413      	add	r3, r2
 800ede2:	b29b      	uxth	r3, r3
 800ede4:	b21a      	sxth	r2, r3
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	da02      	bge.n	800edfa <VL53L1_decode_zone_limits+0x6e>
		*px_ll = 0;
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	2200      	movs	r2, #0
 800edf8:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee00:	b29a      	uxth	r2, r3
 800ee02:	7d7b      	ldrb	r3, [r7, #21]
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	4413      	add	r3, r2
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	b21a      	sxth	r2, r3
 800ee0c:	6a3b      	ldr	r3, [r7, #32]
 800ee0e:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
 800ee10:	6a3b      	ldr	r3, [r7, #32]
 800ee12:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee16:	2b0f      	cmp	r3, #15
 800ee18:	dd02      	ble.n	800ee20 <VL53L1_decode_zone_limits+0x94>
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;
 800ee1a:	6a3b      	ldr	r3, [r7, #32]
 800ee1c:	220f      	movs	r2, #15
 800ee1e:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800ee20:	7dbb      	ldrb	r3, [r7, #22]
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	7d3b      	ldrb	r3, [r7, #20]
 800ee26:	3301      	adds	r3, #1
 800ee28:	0fd9      	lsrs	r1, r3, #31
 800ee2a:	440b      	add	r3, r1
 800ee2c:	105b      	asrs	r3, r3, #1
 800ee2e:	425b      	negs	r3, r3
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	4413      	add	r3, r2
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	b21a      	sxth	r2, r3
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	da02      	bge.n	800ee4c <VL53L1_decode_zone_limits+0xc0>
		*py_ll = 0;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	7d3b      	ldrb	r3, [r7, #20]
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	4413      	add	r3, r2
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	b21a      	sxth	r2, r3
 800ee5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee60:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
 800ee62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee64:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee68:	2b0f      	cmp	r3, #15
 800ee6a:	dd02      	ble.n	800ee72 <VL53L1_decode_zone_limits+0xe6>
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
 800ee6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6e:	220f      	movs	r2, #15
 800ee70:	801a      	strh	r2, [r3, #0]
}
 800ee72:	bf00      	nop
 800ee74:	3718      	adds	r7, #24
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}

0800ee7a <VL53L1_is_aperture_location>:


uint8_t VL53L1_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800ee7a:	b480      	push	{r7}
 800ee7c:	b085      	sub	sp, #20
 800ee7e:	af00      	add	r7, sp, #0
 800ee80:	4603      	mov	r3, r0
 800ee82:	460a      	mov	r2, r1
 800ee84:	71fb      	strb	r3, [r7, #7]
 800ee86:	4613      	mov	r3, r2
 800ee88:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800ee8e:	79fb      	ldrb	r3, [r7, #7]
 800ee90:	f003 0303 	and.w	r3, r3, #3
 800ee94:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800ee96:	79bb      	ldrb	r3, [r7, #6]
 800ee98:	f003 0303 	and.w	r3, r3, #3
 800ee9c:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800ee9e:	7bbb      	ldrb	r3, [r7, #14]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d104      	bne.n	800eeae <VL53L1_is_aperture_location+0x34>
 800eea4:	7b7b      	ldrb	r3, [r7, #13]
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	d101      	bne.n	800eeae <VL53L1_is_aperture_location+0x34>
		is_aperture = 1;
 800eeaa:	2301      	movs	r3, #1
 800eeac:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800eeae:	7bbb      	ldrb	r3, [r7, #14]
 800eeb0:	2b02      	cmp	r3, #2
 800eeb2:	d104      	bne.n	800eebe <VL53L1_is_aperture_location+0x44>
 800eeb4:	7b7b      	ldrb	r3, [r7, #13]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d101      	bne.n	800eebe <VL53L1_is_aperture_location+0x44>
		is_aperture = 1;
 800eeba:	2301      	movs	r3, #1
 800eebc:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800eebe:	7bfb      	ldrb	r3, [r7, #15]
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3714      	adds	r7, #20
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr

0800eecc <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800eecc:	b590      	push	{r4, r7, lr}
 800eece:	b08b      	sub	sp, #44	; 0x2c
 800eed0:	af02      	add	r7, sp, #8
 800eed2:	603a      	str	r2, [r7, #0]
 800eed4:	461a      	mov	r2, r3
 800eed6:	4603      	mov	r3, r0
 800eed8:	71fb      	strb	r3, [r7, #7]
 800eeda:	460b      	mov	r3, r1
 800eedc:	71bb      	strb	r3, [r7, #6]
 800eede:	4613      	mov	r3, r2
 800eee0:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800eee2:	2300      	movs	r3, #0
 800eee4:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800eee6:	2300      	movs	r3, #0
 800eee8:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800eeea:	2300      	movs	r3, #0
 800eeec:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800eeee:	2300      	movs	r3, #0
 800eef0:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800eef2:	2300      	movs	r3, #0
 800eef4:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800eef6:	2300      	movs	r3, #0
 800eef8:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800eefa:	2300      	movs	r3, #0
 800eefc:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800eefe:	2300      	movs	r3, #0
 800ef00:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800ef02:	2300      	movs	r3, #0
 800ef04:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800ef06:	2300      	movs	r3, #0
 800ef08:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	76fb      	strb	r3, [r7, #27]



	VL53L1_decode_zone_limits(
 800ef0e:	f107 0416 	add.w	r4, r7, #22
 800ef12:	f107 0218 	add.w	r2, r7, #24
 800ef16:	79b9      	ldrb	r1, [r7, #6]
 800ef18:	79f8      	ldrb	r0, [r7, #7]
 800ef1a:	f107 0312 	add.w	r3, r7, #18
 800ef1e:	9301      	str	r3, [sp, #4]
 800ef20:	f107 0314 	add.w	r3, r7, #20
 800ef24:	9300      	str	r3, [sp, #0]
 800ef26:	4623      	mov	r3, r4
 800ef28:	f7ff ff30 	bl	800ed8c <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800ef2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2e:	2200      	movs	r2, #0
 800ef30:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800ef32:	8afb      	ldrh	r3, [r7, #22]
 800ef34:	83bb      	strh	r3, [r7, #28]
 800ef36:	e04c      	b.n	800efd2 <VL53L1_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800ef38:	8b3b      	ldrh	r3, [r7, #24]
 800ef3a:	83fb      	strh	r3, [r7, #30]
 800ef3c:	e03d      	b.n	800efba <VL53L1_calc_max_effective_spads+0xee>



			VL53L1_encode_row_col(
 800ef3e:	8bbb      	ldrh	r3, [r7, #28]
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	8bfa      	ldrh	r2, [r7, #30]
 800ef44:	b2d1      	uxtb	r1, r2
 800ef46:	f107 0211 	add.w	r2, r7, #17
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7ff fec9 	bl	800ece2 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800ef50:	7c78      	ldrb	r0, [r7, #17]
 800ef52:	f107 030e 	add.w	r3, r7, #14
 800ef56:	f107 020f 	add.w	r2, r7, #15
 800ef5a:	f107 0110 	add.w	r1, r7, #16
 800ef5e:	f7ff fe9f 	bl	800eca0 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800ef62:	7c3b      	ldrb	r3, [r7, #16]
 800ef64:	461a      	mov	r2, r3
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	4413      	add	r3, r2
 800ef6a:	781a      	ldrb	r2, [r3, #0]
 800ef6c:	7bbb      	ldrb	r3, [r7, #14]
 800ef6e:	4013      	ands	r3, r2
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d01b      	beq.n	800efae <VL53L1_calc_max_effective_spads+0xe2>


				is_aperture = VL53L1_is_aperture_location(
 800ef76:	8bbb      	ldrh	r3, [r7, #28]
 800ef78:	b2db      	uxtb	r3, r3
 800ef7a:	8bfa      	ldrh	r2, [r7, #30]
 800ef7c:	b2d2      	uxtb	r2, r2
 800ef7e:	4611      	mov	r1, r2
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7ff ff7a 	bl	800ee7a <VL53L1_is_aperture_location>
 800ef86:	4603      	mov	r3, r0
 800ef88:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800ef8a:	7efb      	ldrb	r3, [r7, #27]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d007      	beq.n	800efa0 <VL53L1_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800ef90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef92:	881a      	ldrh	r2, [r3, #0]
 800ef94:	88bb      	ldrh	r3, [r7, #4]
 800ef96:	4413      	add	r3, r2
 800ef98:	b29a      	uxth	r2, r3
 800ef9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9c:	801a      	strh	r2, [r3, #0]
 800ef9e:	e006      	b.n	800efae <VL53L1_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800efa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa2:	881b      	ldrh	r3, [r3, #0]
 800efa4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800efa8:	b29a      	uxth	r2, r3
 800efaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efac:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800efae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	3301      	adds	r3, #1
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	83fb      	strh	r3, [r7, #30]
 800efba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800efbe:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	ddbb      	ble.n	800ef3e <VL53L1_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800efc6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800efca:	b29b      	uxth	r3, r3
 800efcc:	3301      	adds	r3, #1
 800efce:	b29b      	uxth	r3, r3
 800efd0:	83bb      	strh	r3, [r7, #28]
 800efd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800efd6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800efda:	429a      	cmp	r2, r3
 800efdc:	ddac      	ble.n	800ef38 <VL53L1_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800efde:	bf00      	nop
 800efe0:	bf00      	nop
 800efe2:	3724      	adds	r7, #36	; 0x24
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd90      	pop	{r4, r7, pc}

0800efe8 <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800efe8:	b590      	push	{r4, r7, lr}
 800efea:	b08d      	sub	sp, #52	; 0x34
 800efec:	af02      	add	r7, sp, #8
 800efee:	4604      	mov	r4, r0
 800eff0:	4608      	mov	r0, r1
 800eff2:	4611      	mov	r1, r2
 800eff4:	461a      	mov	r2, r3
 800eff6:	4623      	mov	r3, r4
 800eff8:	71fb      	strb	r3, [r7, #7]
 800effa:	4603      	mov	r3, r0
 800effc:	71bb      	strb	r3, [r7, #6]
 800effe:	460b      	mov	r3, r1
 800f000:	717b      	strb	r3, [r7, #5]
 800f002:	4613      	mov	r3, r2
 800f004:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800f006:	2300      	movs	r3, #0
 800f008:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800f00a:	2300      	movs	r3, #0
 800f00c:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800f00e:	2300      	movs	r3, #0
 800f010:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800f012:	2300      	movs	r3, #0
 800f014:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800f016:	2300      	movs	r3, #0
 800f018:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800f01a:	2300      	movs	r3, #0
 800f01c:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800f01e:	2300      	movs	r3, #0
 800f020:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800f022:	2300      	movs	r3, #0
 800f024:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800f026:	2300      	movs	r3, #0
 800f028:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800f02a:	2300      	movs	r3, #0
 800f02c:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800f02e:	2300      	movs	r3, #0
 800f030:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800f032:	2300      	movs	r3, #0
 800f034:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800f036:	2300      	movs	r3, #0
 800f038:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800f03a:	2300      	movs	r3, #0
 800f03c:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800f03e:	2300      	movs	r3, #0
 800f040:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800f044:	2300      	movs	r3, #0
 800f046:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53L1_decode_zone_limits(
 800f048:	f107 041c 	add.w	r4, r7, #28
 800f04c:	f107 021e 	add.w	r2, r7, #30
 800f050:	79b9      	ldrb	r1, [r7, #6]
 800f052:	79f8      	ldrb	r0, [r7, #7]
 800f054:	f107 0318 	add.w	r3, r7, #24
 800f058:	9301      	str	r3, [sp, #4]
 800f05a:	f107 031a 	add.w	r3, r7, #26
 800f05e:	9300      	str	r3, [sp, #0]
 800f060:	4623      	mov	r3, r4
 800f062:	f7ff fe93 	bl	800ed8c <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 800f066:	f107 0414 	add.w	r4, r7, #20
 800f06a:	f107 0216 	add.w	r2, r7, #22
 800f06e:	7939      	ldrb	r1, [r7, #4]
 800f070:	7978      	ldrb	r0, [r7, #5]
 800f072:	f107 0310 	add.w	r3, r7, #16
 800f076:	9301      	str	r3, [sp, #4]
 800f078:	f107 0312 	add.w	r3, r7, #18
 800f07c:	9300      	str	r3, [sp, #0]
 800f07e:	4623      	mov	r3, r4
 800f080:	f7ff fe84 	bl	800ed8c <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800f084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f086:	2200      	movs	r2, #0
 800f088:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800f08a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f08c:	2200      	movs	r2, #0
 800f08e:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800f090:	8abb      	ldrh	r3, [r7, #20]
 800f092:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f094:	e06c      	b.n	800f170 <VL53L1_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800f096:	8afb      	ldrh	r3, [r7, #22]
 800f098:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f09a:	e05d      	b.n	800f158 <VL53L1_calc_mm_effective_spads+0x170>



			VL53L1_encode_row_col(
 800f09c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f0a2:	b2d1      	uxtb	r1, r2
 800f0a4:	f107 020f 	add.w	r2, r7, #15
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7ff fe1a 	bl	800ece2 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800f0ae:	7bf8      	ldrb	r0, [r7, #15]
 800f0b0:	f107 030c 	add.w	r3, r7, #12
 800f0b4:	f107 020d 	add.w	r2, r7, #13
 800f0b8:	f107 010e 	add.w	r1, r7, #14
 800f0bc:	f7ff fdf0 	bl	800eca0 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800f0c0:	7bbb      	ldrb	r3, [r7, #14]
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c6:	4413      	add	r3, r2
 800f0c8:	781a      	ldrb	r2, [r3, #0]
 800f0ca:	7b3b      	ldrb	r3, [r7, #12]
 800f0cc:	4013      	ands	r3, r2
 800f0ce:	b2db      	uxtb	r3, r3
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d03b      	beq.n	800f14c <VL53L1_calc_mm_effective_spads+0x164>


				is_aperture = VL53L1_is_aperture_location(
 800f0d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0d6:	b2db      	uxtb	r3, r3
 800f0d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f0da:	b2d2      	uxtb	r2, r2
 800f0dc:	4611      	mov	r1, r2
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7ff fecb 	bl	800ee7a <VL53L1_is_aperture_location>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800f0ea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d002      	beq.n	800f0f8 <VL53L1_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800f0f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f0f4:	847b      	strh	r3, [r7, #34]	; 0x22
 800f0f6:	e002      	b.n	800f0fe <VL53L1_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800f0f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f0fc:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800f0fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f102:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800f106:	429a      	cmp	r2, r3
 800f108:	db19      	blt.n	800f13e <VL53L1_calc_mm_effective_spads+0x156>
 800f10a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f10e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800f112:	429a      	cmp	r2, r3
 800f114:	dc13      	bgt.n	800f13e <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800f116:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800f11a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800f11e:	429a      	cmp	r2, r3
 800f120:	db0d      	blt.n	800f13e <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800f122:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800f126:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800f12a:	429a      	cmp	r2, r3
 800f12c:	dc07      	bgt.n	800f13e <VL53L1_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800f12e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f130:	881a      	ldrh	r2, [r3, #0]
 800f132:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f134:	4413      	add	r3, r2
 800f136:	b29a      	uxth	r2, r3
 800f138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f13a:	801a      	strh	r2, [r3, #0]
 800f13c:	e006      	b.n	800f14c <VL53L1_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800f13e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f140:	881a      	ldrh	r2, [r3, #0]
 800f142:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f144:	4413      	add	r3, r2
 800f146:	b29a      	uxth	r2, r3
 800f148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f14a:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800f14c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f150:	b29b      	uxth	r3, r3
 800f152:	3301      	adds	r3, #1
 800f154:	b29b      	uxth	r3, r3
 800f156:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f158:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f15c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800f160:	429a      	cmp	r2, r3
 800f162:	dd9b      	ble.n	800f09c <VL53L1_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800f164:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f168:	b29b      	uxth	r3, r3
 800f16a:	3301      	adds	r3, #1
 800f16c:	b29b      	uxth	r3, r3
 800f16e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f170:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f174:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800f178:	429a      	cmp	r2, r3
 800f17a:	dd8c      	ble.n	800f096 <VL53L1_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800f17c:	bf00      	nop
 800f17e:	bf00      	nop
 800f180:	372c      	adds	r7, #44	; 0x2c
 800f182:	46bd      	mov	sp, r7
 800f184:	bd90      	pop	{r4, r7, pc}

0800f186 <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 800f186:	b580      	push	{r7, lr}
 800f188:	b086      	sub	sp, #24
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	60f8      	str	r0, [r7, #12]
 800f18e:	60b9      	str	r1, [r7, #8]
 800f190:	607a      	str	r2, [r7, #4]
 800f192:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800f194:	2300      	movs	r3, #0
 800f196:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f7fd ff6d 	bl	800d078 <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	7c9a      	ldrb	r2, [r3, #18]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	3314      	adds	r3, #20
 800f1c8:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	75fb      	strb	r3, [r7, #23]
 800f1ce:	e06b      	b.n	800f2a8 <VL53L1_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800f1d0:	7dfb      	ldrb	r3, [r7, #23]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d002      	beq.n	800f1dc <VL53L1_hist_copy_results_to_sys_and_core+0x56>
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	d034      	beq.n	800f244 <VL53L1_hist_copy_results_to_sys_and_core+0xbe>
 800f1da:	e05f      	b.n	800f29c <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53L1_p_006;
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800f214:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800f21a:	693b      	ldr	r3, [r7, #16]
 800f21c:	8a9a      	ldrh	r2, [r3, #20]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53L1_p_021;
 800f222:	693b      	ldr	r3, [r7, #16]
 800f224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53L1_p_013;
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53L1_p_020;
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	601a      	str	r2, [r3, #0]

			break;
 800f242:	e02b      	b.n	800f29c <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53L1_p_006;
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800f274:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53L1_p_021;
 800f27a:	693b      	ldr	r3, [r7, #16]
 800f27c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53L1_p_013;
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53L1_p_020;
 800f292:	693b      	ldr	r3, [r7, #16]
 800f294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	611a      	str	r2, [r3, #16]
			break;
 800f29a:	bf00      	nop
		}

		pdata++;
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	334c      	adds	r3, #76	; 0x4c
 800f2a0:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800f2a2:	7dfb      	ldrb	r3, [r7, #23]
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	75fb      	strb	r3, [r7, #23]
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	7c9b      	ldrb	r3, [r3, #18]
 800f2ac:	7dfa      	ldrb	r2, [r7, #23]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d38e      	bcc.n	800f1d0 <VL53L1_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800f2b2:	bf00      	nop
 800f2b4:	bf00      	nop
 800f2b6:	3718      	adds	r7, #24
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <VL53L1_save_cfg_data>:
}


VL53L1_Error VL53L1_save_cfg_data(
	VL53L1_DEV  Dev)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b089      	sub	sp, #36	; 0x24
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	3318      	adds	r3, #24
 800f2cc:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800f2d4:	3308      	adds	r3, #8
 800f2d6:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800f2d8:	69bb      	ldr	r3, [r7, #24]
 800f2da:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800f2de:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 800f2e0:	69bb      	ldr	r3, [r7, #24]
 800f2e2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f2e6:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800f2e8:	4613      	mov	r3, r2
 800f2ea:	009b      	lsls	r3, r3, #2
 800f2ec:	4413      	add	r3, r2
 800f2ee:	005b      	lsls	r3, r3, #1
 800f2f0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800f2f4:	697a      	ldr	r2, [r7, #20]
 800f2f6:	4413      	add	r3, r2
 800f2f8:	3302      	adds	r3, #2
 800f2fa:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800f2fc:	69bb      	ldr	r3, [r7, #24]
 800f2fe:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800f306:	69bb      	ldr	r3, [r7, #24]
 800f308:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800f320:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f324:	4618      	mov	r0, r3
 800f326:	3724      	adds	r7, #36	; 0x24
 800f328:	46bd      	mov	sp, r7
 800f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32e:	4770      	bx	lr

0800f330 <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 800f330:	b480      	push	{r7}
 800f332:	b08b      	sub	sp, #44	; 0x2c
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f33a:	2300      	movs	r3, #0
 800f33c:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	3318      	adds	r3, #24
 800f342:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800f34a:	3308      	adds	r3, #8
 800f34c:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800f354:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800f356:	69bb      	ldr	r3, [r7, #24]
 800f358:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f35c:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800f35e:	69bb      	ldr	r3, [r7, #24]
 800f360:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 800f364:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800f366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f36a:	623b      	str	r3, [r7, #32]
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 800f36c:	7bfa      	ldrb	r2, [r7, #15]
 800f36e:	6939      	ldr	r1, [r7, #16]
 800f370:	4613      	mov	r3, r2
 800f372:	009b      	lsls	r3, r3, #2
 800f374:	4413      	add	r3, r2
 800f376:	005b      	lsls	r3, r3, #1
 800f378:	440b      	add	r3, r1
 800f37a:	3306      	adds	r3, #6
 800f37c:	2200      	movs	r2, #0
 800f37e:	801a      	strh	r2, [r3, #0]

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f386:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800f388:	2301      	movs	r3, #1
 800f38a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f38e:	e01a      	b.n	800f3c6 <VL53L1_dynamic_zone_update+0x96>

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 800f390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f394:	683a      	ldr	r2, [r7, #0]
 800f396:	214c      	movs	r1, #76	; 0x4c
 800f398:	fb01 f303 	mul.w	r3, r1, r3
 800f39c:	4413      	add	r3, r2
 800f39e:	334a      	adds	r3, #74	; 0x4a
 800f3a0:	881b      	ldrh	r3, [r3, #0]
 800f3a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d209      	bcs.n	800f3bc <VL53L1_dynamic_zone_update+0x8c>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;
 800f3a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800f3ac:	683a      	ldr	r2, [r7, #0]
 800f3ae:	214c      	movs	r1, #76	; 0x4c
 800f3b0:	fb01 f303 	mul.w	r3, r1, r3
 800f3b4:	4413      	add	r3, r2
 800f3b6:	334a      	adds	r3, #74	; 0x4a
 800f3b8:	881b      	ldrh	r3, [r3, #0]
 800f3ba:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800f3bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	7c9b      	ldrb	r3, [r3, #18]
 800f3ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d3de      	bcc.n	800f390 <VL53L1_dynamic_zone_update+0x60>

	}

	if (max_total_rate_per_spads == 0) {
 800f3d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d103      	bne.n	800f3e0 <VL53L1_dynamic_zone_update+0xb0>

		temp = 0xFFFF;
 800f3d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f3dc:	623b      	str	r3, [r7, #32]
 800f3de:	e00e      	b.n	800f3fe <VL53L1_dynamic_zone_update+0xce>
	} else {

		temp = target_rate << 14;
 800f3e0:	89bb      	ldrh	r3, [r7, #12]
 800f3e2:	039b      	lsls	r3, r3, #14
 800f3e4:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800f3e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f3e8:	6a3a      	ldr	r2, [r7, #32]
 800f3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3ee:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800f3f0:	6a3b      	ldr	r3, [r7, #32]
 800f3f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3f6:	d302      	bcc.n	800f3fe <VL53L1_dynamic_zone_update+0xce>
			temp = 0xFFFF;
 800f3f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f3fc:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800f3fe:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800f400:	6a3b      	ldr	r3, [r7, #32]
 800f402:	b298      	uxth	r0, r3
	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800f404:	6939      	ldr	r1, [r7, #16]
 800f406:	4613      	mov	r3, r2
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	4413      	add	r3, r2
 800f40c:	005b      	lsls	r3, r3, #1
 800f40e:	440b      	add	r3, r1
 800f410:	3306      	adds	r3, #6
 800f412:	4602      	mov	r2, r0
 800f414:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800f416:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	372c      	adds	r7, #44	; 0x2c
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr

0800f426 <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 800f426:	b580      	push	{r7, lr}
 800f428:	b08a      	sub	sp, #40	; 0x28
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f42e:	2300      	movs	r3, #0
 800f430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	3318      	adds	r3, #24
 800f438:	623b      	str	r3, [r7, #32]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800f43a:	6a3b      	ldr	r3, [r7, #32]
 800f43c:	332c      	adds	r3, #44	; 0x2c
 800f43e:	61fb      	str	r3, [r7, #28]
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800f440:	6a3b      	ldr	r3, [r7, #32]
 800f442:	33c2      	adds	r3, #194	; 0xc2
 800f444:	61bb      	str	r3, [r7, #24]
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800f446:	6a3b      	ldr	r3, [r7, #32]
 800f448:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800f44c:	617b      	str	r3, [r7, #20]
	VL53L1_histogram_config_t *pmulti_hist =
 800f44e:	69bb      	ldr	r3, [r7, #24]
 800f450:	3302      	adds	r3, #2
 800f452:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	785b      	ldrb	r3, [r3, #1]
 800f458:	f003 0301 	and.w	r3, r3, #1
 800f45c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800f45e:	6a3b      	ldr	r3, [r7, #32]
 800f460:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f464:	461a      	mov	r2, r3
 800f466:	69bb      	ldr	r3, [r7, #24]
 800f468:	4413      	add	r3, r2
 800f46a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f46e:	2b01      	cmp	r3, #1
 800f470:	d11e      	bne.n	800f4b0 <VL53L1_multizone_hist_bins_update+0x8a>
		VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800f472:	7bfb      	ldrb	r3, [r7, #15]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d10b      	bne.n	800f490 <VL53L1_multizone_hist_bins_update+0x6a>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800f480:	693b      	ldr	r3, [r7, #16]
 800f482:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800f490:	7bfb      	ldrb	r3, [r7, #15]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d05d      	beq.n	800f552 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	719a      	strb	r2, [r3, #6]
 800f4ae:	e050      	b.n	800f552 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800f4b0:	6a3b      	ldr	r3, [r7, #32]
 800f4b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	4413      	add	r3, r2
 800f4bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f4c0:	2b02      	cmp	r3, #2
 800f4c2:	d11e      	bne.n	800f502 <VL53L1_multizone_hist_bins_update+0xdc>
		VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800f4c4:	7bfb      	ldrb	r3, [r7, #15]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d10b      	bne.n	800f4e2 <VL53L1_multizone_hist_bins_update+0xbc>
			trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800f4e2:	7bfb      	ldrb	r3, [r7, #15]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d034      	beq.n	800f552 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	719a      	strb	r2, [r3, #6]
 800f500:	e027      	b.n	800f552 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800f502:	6a3b      	ldr	r3, [r7, #32]
 800f504:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f508:	461a      	mov	r2, r3
 800f50a:	69bb      	ldr	r3, [r7, #24]
 800f50c:	4413      	add	r3, r2
 800f50e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f512:	2b03      	cmp	r3, #3
 800f514:	d11d      	bne.n	800f552 <VL53L1_multizone_hist_bins_update+0x12c>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800f516:	7bfb      	ldrb	r3, [r7, #15]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d10b      	bne.n	800f534 <VL53L1_multizone_hist_bins_update+0x10e>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800f534:	7bfb      	ldrb	r3, [r7, #15]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d00b      	beq.n	800f552 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53L1_ERROR_NONE) {
 800f552:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f556:	2b00      	cmp	r3, #0
 800f558:	d109      	bne.n	800f56e <VL53L1_multizone_hist_bins_update+0x148>
		VL53L1_copy_hist_bins_to_static_cfg(
 800f55a:	6a3b      	ldr	r3, [r7, #32]
 800f55c:	f203 3142 	addw	r1, r3, #834	; 0x342
 800f560:	6a3b      	ldr	r3, [r7, #32]
 800f562:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800f566:	461a      	mov	r2, r3
 800f568:	6978      	ldr	r0, [r7, #20]
 800f56a:	f7fd f921 	bl	800c7b0 <VL53L1_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800f56e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f572:	4618      	mov	r0, r3
 800f574:	3728      	adds	r7, #40	; 0x28
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}

0800f57a <VL53L1_update_internal_stream_counters>:
VL53L1_Error VL53L1_update_internal_stream_counters(
	VL53L1_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800f57a:	b480      	push	{r7}
 800f57c:	b089      	sub	sp, #36	; 0x24
 800f57e:	af00      	add	r7, sp, #0
 800f580:	60f8      	str	r0, [r7, #12]
 800f582:	607a      	str	r2, [r7, #4]
 800f584:	603b      	str	r3, [r7, #0]
 800f586:	460b      	mov	r3, r1
 800f588:	72fb      	strb	r3, [r7, #11]

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f58a:	2300      	movs	r3, #0
 800f58c:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53L1_LLDriverData_t  *pdev =
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	3318      	adds	r3, #24
 800f592:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800f59a:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800f59c:	7dfb      	ldrb	r3, [r7, #23]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d103      	bne.n	800f5aa <VL53L1_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	7afa      	ldrb	r2, [r7, #11]
 800f5a6:	701a      	strb	r2, [r3, #0]
 800f5a8:	e01e      	b.n	800f5e8 <VL53L1_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	781b      	ldrb	r3, [r3, #0]
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	7dfb      	ldrb	r3, [r7, #23]
 800f5b2:	3b01      	subs	r3, #1
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d111      	bne.n	800f5dc <VL53L1_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	2bff      	cmp	r3, #255	; 0xff
 800f5be:	d103      	bne.n	800f5c8 <VL53L1_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2280      	movs	r2, #128	; 0x80
 800f5c4:	701a      	strb	r2, [r3, #0]
 800f5c6:	e005      	b.n	800f5d4 <VL53L1_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	b2da      	uxtb	r2, r3
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	701a      	strb	r2, [r3, #0]
 800f5da:	e005      	b.n	800f5e8 <VL53L1_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	781b      	ldrb	r3, [r3, #0]
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	b2da      	uxtb	r2, r3
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800f5e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3724      	adds	r7, #36	; 0x24
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f6:	4770      	bx	lr

0800f5f8 <VL53L1_set_histogram_multizone_initial_bin_config>:

VL53L1_Error VL53L1_set_histogram_multizone_initial_bin_config(
	VL53L1_zone_config_t		*pzone_cfg,
	VL53L1_histogram_config_t	*phist_cfg,
	VL53L1_histogram_config_t	*pmulti_hist)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b087      	sub	sp, #28
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	607a      	str	r2, [r7, #4]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f604:	2300      	movs	r3, #0
 800f606:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f60e:	2b01      	cmp	r3, #1
 800f610:	d118      	bne.n	800f644 <VL53L1_set_histogram_multizone_initial_bin_config+0x4c>
			VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	719a      	strb	r2, [r3, #6]
 800f642:	e03a      	b.n	800f6ba <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f64a:	2b02      	cmp	r3, #2
 800f64c:	d118      	bne.n	800f680 <VL53L1_set_histogram_multizone_initial_bin_config+0x88>
			VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	719a      	strb	r2, [r3, #6]
 800f67e:	e01c      	b.n	800f6ba <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f686:	2b03      	cmp	r3, #3
 800f688:	d117      	bne.n	800f6ba <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	70da      	strb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	719a      	strb	r2, [r3, #6]
	}

	LOG_FUNCTION_END(status);
	return status;
 800f6ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	371c      	adds	r7, #28
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c8:	4770      	bx	lr

0800f6ca <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800f6ca:	b580      	push	{r7, lr}
 800f6cc:	b08a      	sub	sp, #40	; 0x28
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	60f8      	str	r0, [r7, #12]
 800f6d2:	607a      	str	r2, [r7, #4]
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	460b      	mov	r3, r1
 800f6d8:	72fb      	strb	r3, [r7, #11]
 800f6da:	4613      	mov	r3, r2
 800f6dc:	813b      	strh	r3, [r7, #8]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	3318      	adds	r3, #24
 800f6e8:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53L1_calc_macro_period_us(
 800f6f2:	7afa      	ldrb	r2, [r7, #11]
 800f6f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f6f6:	4611      	mov	r1, r2
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7fe f8ca 	bl	800d892 <VL53L1_calc_macro_period_us>
 800f6fe:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800f700:	6a3b      	ldr	r3, [r7, #32]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d101      	bne.n	800f70a <VL53L1_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800f706:	2301      	movs	r3, #1
 800f708:	623b      	str	r3, [r7, #32]



	timeout_mclks = phasecal_timeout_us << 12;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	031b      	lsls	r3, r3, #12
 800f70e:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800f710:	6a3b      	ldr	r3, [r7, #32]
 800f712:	085b      	lsrs	r3, r3, #1
 800f714:	69ba      	ldr	r2, [r7, #24]
 800f716:	4413      	add	r3, r2
 800f718:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800f71a:	69ba      	ldr	r2, [r7, #24]
 800f71c:	6a3b      	ldr	r3, [r7, #32]
 800f71e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f722:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800f724:	69bb      	ldr	r3, [r7, #24]
 800f726:	2bff      	cmp	r3, #255	; 0xff
 800f728:	d904      	bls.n	800f734 <VL53L1_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800f72a:	69fb      	ldr	r3, [r7, #28]
 800f72c:	22ff      	movs	r2, #255	; 0xff
 800f72e:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800f732:	e004      	b.n	800f73e <VL53L1_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800f734:	69bb      	ldr	r3, [r7, #24]
 800f736:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800f738:	69fb      	ldr	r3, [r7, #28]
 800f73a:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800f73e:	69fb      	ldr	r3, [r7, #28]
 800f740:	7afa      	ldrb	r2, [r7, #11]
 800f742:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e



	if (status == VL53L1_ERROR_NONE)
 800f746:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d10a      	bne.n	800f764 <VL53L1_set_ref_spad_char_config+0x9a>
		status =
			VL53L1_WrByte(
 800f74e:	69fb      	ldr	r3, [r7, #28]
 800f750:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 800f754:	461a      	mov	r2, r3
 800f756:	214b      	movs	r1, #75	; 0x4b
 800f758:	68f8      	ldr	r0, [r7, #12]
 800f75a:	f007 f9bd 	bl	8016ad8 <VL53L1_WrByte>
 800f75e:	4603      	mov	r3, r0
 800f760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 800f764:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d10a      	bne.n	800f782 <VL53L1_set_ref_spad_char_config+0xb8>
		status =
			VL53L1_WrByte(
 800f76c:	69fb      	ldr	r3, [r7, #28]
 800f76e:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800f772:	461a      	mov	r2, r3
 800f774:	2160      	movs	r1, #96	; 0x60
 800f776:	68f8      	ldr	r0, [r7, #12]
 800f778:	f007 f9ae 	bl	8016ad8 <VL53L1_WrByte>
 800f77c:	4603      	mov	r3, r0
 800f77e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800f788:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800f78a:	69fb      	ldr	r3, [r7, #28]
 800f78c:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800f790:	757b      	strb	r3, [r7, #21]

	if (status == VL53L1_ERROR_NONE)
 800f792:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f796:	2b00      	cmp	r3, #0
 800f798:	d109      	bne.n	800f7ae <VL53L1_set_ref_spad_char_config+0xe4>
		status =
			VL53L1_WriteMulti(
 800f79a:	f107 0214 	add.w	r2, r7, #20
 800f79e:	2302      	movs	r3, #2
 800f7a0:	2178      	movs	r1, #120	; 0x78
 800f7a2:	68f8      	ldr	r0, [r7, #12]
 800f7a4:	f007 f92c 	bl	8016a00 <VL53L1_WriteMulti>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	893a      	ldrh	r2, [r7, #8]
 800f7b2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53L1_ERROR_NONE)
 800f7b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d108      	bne.n	800f7d0 <VL53L1_set_ref_spad_char_config+0x106>
		status =
			VL53L1_WrWord(
 800f7be:	893b      	ldrh	r3, [r7, #8]
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	211c      	movs	r1, #28
 800f7c4:	68f8      	ldr	r0, [r7, #12]
 800f7c6:	f007 f9b1 	bl	8016b2c <VL53L1_WrWord>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53L1_ERROR_NONE)
 800f7d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d108      	bne.n	800f7ea <VL53L1_set_ref_spad_char_config+0x120>
		status =
			VL53L1_WrWord(
 800f7d8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f7da:	461a      	mov	r2, r3
 800f7dc:	2164      	movs	r1, #100	; 0x64
 800f7de:	68f8      	ldr	r0, [r7, #12]
 800f7e0:	f007 f9a4 	bl	8016b2c <VL53L1_WrWord>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53L1_ERROR_NONE)
 800f7ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d108      	bne.n	800f804 <VL53L1_set_ref_spad_char_config+0x13a>
		status =
			VL53L1_WrWord(
 800f7f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	2166      	movs	r1, #102	; 0x66
 800f7f8:	68f8      	ldr	r0, [r7, #12]
 800f7fa:	f007 f997 	bl	8016b2c <VL53L1_WrWord>
 800f7fe:	4603      	mov	r3, r0
 800f800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800f804:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3728      	adds	r7, #40	; 0x28
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 800f810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f814:	b0a2      	sub	sp, #136	; 0x88
 800f816:	af00      	add	r7, sp, #0
 800f818:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f81a:	2300      	movs	r3, #0
 800f81c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f822:	3318      	adds	r3, #24
 800f824:	673b      	str	r3, [r7, #112]	; 0x70
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800f826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f828:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800f82c:	3308      	adds	r3, #8
 800f82e:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53L1_smudge_corrector_config_t *pconfig =
 800f830:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f832:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800f836:	3318      	adds	r3, #24
 800f838:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800f83a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f83c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800f840:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
 800f842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f844:	663b      	str	r3, [r7, #96]	; 0x60
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);
 800f846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f848:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f84c:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800f84e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f850:	69db      	ldr	r3, [r3, #28]
 800f852:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
 800f856:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d103      	bne.n	800f866 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x56>
		peak_duration_us = 1000;
 800f85e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f862:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	temp64a = pxmonitor->VL53L1_p_021 +
 800f866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53L1_p_020;
 800f86a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53L1_p_021 +
 800f86e:	4413      	add	r3, r2
 800f870:	2200      	movs	r2, #0
 800f872:	461c      	mov	r4, r3
 800f874:	4615      	mov	r5, r2
 800f876:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800f87a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800f87e:	4622      	mov	r2, r4
 800f880:	462b      	mov	r3, r5
 800f882:	f04f 0000 	mov.w	r0, #0
 800f886:	f04f 0100 	mov.w	r1, #0
 800f88a:	0159      	lsls	r1, r3, #5
 800f88c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f890:	0150      	lsls	r0, r2, #5
 800f892:	4602      	mov	r2, r0
 800f894:	460b      	mov	r3, r1
 800f896:	ebb2 0804 	subs.w	r8, r2, r4
 800f89a:	eb63 0905 	sbc.w	r9, r3, r5
 800f89e:	f04f 0200 	mov.w	r2, #0
 800f8a2:	f04f 0300 	mov.w	r3, #0
 800f8a6:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800f8aa:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800f8ae:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800f8b2:	4690      	mov	r8, r2
 800f8b4:	4699      	mov	r9, r3
 800f8b6:	eb18 0304 	adds.w	r3, r8, r4
 800f8ba:	633b      	str	r3, [r7, #48]	; 0x30
 800f8bc:	eb49 0305 	adc.w	r3, r9, r5
 800f8c0:	637b      	str	r3, [r7, #52]	; 0x34
 800f8c2:	f04f 0200 	mov.w	r2, #0
 800f8c6:	f04f 0300 	mov.w	r3, #0
 800f8ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800f8ce:	4629      	mov	r1, r5
 800f8d0:	00cb      	lsls	r3, r1, #3
 800f8d2:	4621      	mov	r1, r4
 800f8d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f8d8:	4621      	mov	r1, r4
 800f8da:	00ca      	lsls	r2, r1, #3
 800f8dc:	4610      	mov	r0, r2
 800f8de:	4619      	mov	r1, r3
 800f8e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	643b      	str	r3, [r7, #64]	; 0x40
 800f8e8:	647a      	str	r2, [r7, #68]	; 0x44
 800f8ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f8ee:	f7f0 ff71 	bl	80007d4 <__aeabi_uldivmod>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800f8fa:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800f8fe:	4622      	mov	r2, r4
 800f900:	462b      	mov	r3, r5
 800f902:	f04f 0000 	mov.w	r0, #0
 800f906:	f04f 0100 	mov.w	r1, #0
 800f90a:	0159      	lsls	r1, r3, #5
 800f90c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f910:	0150      	lsls	r0, r2, #5
 800f912:	4602      	mov	r2, r0
 800f914:	460b      	mov	r3, r1
 800f916:	ebb2 0a04 	subs.w	sl, r2, r4
 800f91a:	eb63 0b05 	sbc.w	fp, r3, r5
 800f91e:	f04f 0200 	mov.w	r2, #0
 800f922:	f04f 0300 	mov.w	r3, #0
 800f926:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800f92a:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800f92e:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800f932:	4692      	mov	sl, r2
 800f934:	469b      	mov	fp, r3
 800f936:	eb1a 0304 	adds.w	r3, sl, r4
 800f93a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f93c:	eb4b 0305 	adc.w	r3, fp, r5
 800f940:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f942:	f04f 0200 	mov.w	r2, #0
 800f946:	f04f 0300 	mov.w	r3, #0
 800f94a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800f94e:	4629      	mov	r1, r5
 800f950:	00cb      	lsls	r3, r1, #3
 800f952:	4621      	mov	r1, r4
 800f954:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f958:	4621      	mov	r1, r4
 800f95a:	00ca      	lsls	r2, r1, #3
 800f95c:	4610      	mov	r0, r2
 800f95e:	4619      	mov	r1, r3
 800f960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f964:	2200      	movs	r2, #0
 800f966:	63bb      	str	r3, [r7, #56]	; 0x38
 800f968:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f96a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f96e:	f7f0 ff31 	bl	80007d4 <__aeabi_uldivmod>
 800f972:	4602      	mov	r2, r0
 800f974:	460b      	mov	r3, r1
 800f976:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 800f97a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f97c:	689b      	ldr	r3, [r3, #8]
 800f97e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f980:	8ad2      	ldrh	r2, [r2, #22]
 800f982:	fb02 f303 	mul.w	r3, r2, r3
 800f986:	2200      	movs	r2, #0
 800f988:	623b      	str	r3, [r7, #32]
 800f98a:	627a      	str	r2, [r7, #36]	; 0x24
 800f98c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f990:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 800f994:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800f998:	4313      	orrs	r3, r2
 800f99a:	d105      	bne.n	800f9a8 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800f99c:	f04f 0201 	mov.w	r2, #1
 800f9a0:	f04f 0300 	mov.w	r3, #0
 800f9a4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 800f9a8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f9ac:	4602      	mov	r2, r0
 800f9ae:	460b      	mov	r3, r1
 800f9b0:	f04f 0400 	mov.w	r4, #0
 800f9b4:	f04f 0500 	mov.w	r5, #0
 800f9b8:	015d      	lsls	r5, r3, #5
 800f9ba:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800f9be:	0154      	lsls	r4, r2, #5
 800f9c0:	4622      	mov	r2, r4
 800f9c2:	462b      	mov	r3, r5
 800f9c4:	1a14      	subs	r4, r2, r0
 800f9c6:	61bc      	str	r4, [r7, #24]
 800f9c8:	eb63 0301 	sbc.w	r3, r3, r1
 800f9cc:	61fb      	str	r3, [r7, #28]
 800f9ce:	f04f 0200 	mov.w	r2, #0
 800f9d2:	f04f 0300 	mov.w	r3, #0
 800f9d6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800f9da:	464c      	mov	r4, r9
 800f9dc:	00a3      	lsls	r3, r4, #2
 800f9de:	4644      	mov	r4, r8
 800f9e0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800f9e4:	4644      	mov	r4, r8
 800f9e6:	00a2      	lsls	r2, r4, #2
 800f9e8:	4614      	mov	r4, r2
 800f9ea:	461d      	mov	r5, r3
 800f9ec:	4623      	mov	r3, r4
 800f9ee:	181b      	adds	r3, r3, r0
 800f9f0:	613b      	str	r3, [r7, #16]
 800f9f2:	462b      	mov	r3, r5
 800f9f4:	eb41 0303 	adc.w	r3, r1, r3
 800f9f8:	617b      	str	r3, [r7, #20]
 800f9fa:	f04f 0200 	mov.w	r2, #0
 800f9fe:	f04f 0300 	mov.w	r3, #0
 800fa02:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800fa06:	4629      	mov	r1, r5
 800fa08:	02cb      	lsls	r3, r1, #11
 800fa0a:	4621      	mov	r1, r4
 800fa0c:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800fa10:	4621      	mov	r1, r4
 800fa12:	02ca      	lsls	r2, r1, #11
 800fa14:	461c      	mov	r4, r3
 800fa16:	4613      	mov	r3, r2
 800fa18:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800fa1c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800fa20:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800fa24:	f7f0 fed6 	bl	80007d4 <__aeabi_uldivmod>
 800fa28:	4602      	mov	r2, r0
 800fa2a:	460b      	mov	r3, r1
 800fa2c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 800fa30:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800fa34:	4602      	mov	r2, r0
 800fa36:	460b      	mov	r3, r1
 800fa38:	f04f 0400 	mov.w	r4, #0
 800fa3c:	f04f 0500 	mov.w	r5, #0
 800fa40:	015d      	lsls	r5, r3, #5
 800fa42:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800fa46:	0154      	lsls	r4, r2, #5
 800fa48:	4622      	mov	r2, r4
 800fa4a:	462b      	mov	r3, r5
 800fa4c:	1a14      	subs	r4, r2, r0
 800fa4e:	60bc      	str	r4, [r7, #8]
 800fa50:	eb63 0301 	sbc.w	r3, r3, r1
 800fa54:	60fb      	str	r3, [r7, #12]
 800fa56:	f04f 0200 	mov.w	r2, #0
 800fa5a:	f04f 0300 	mov.w	r3, #0
 800fa5e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800fa62:	464c      	mov	r4, r9
 800fa64:	00a3      	lsls	r3, r4, #2
 800fa66:	4644      	mov	r4, r8
 800fa68:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800fa6c:	4644      	mov	r4, r8
 800fa6e:	00a2      	lsls	r2, r4, #2
 800fa70:	4614      	mov	r4, r2
 800fa72:	461d      	mov	r5, r3
 800fa74:	4623      	mov	r3, r4
 800fa76:	181b      	adds	r3, r3, r0
 800fa78:	603b      	str	r3, [r7, #0]
 800fa7a:	462b      	mov	r3, r5
 800fa7c:	eb41 0303 	adc.w	r3, r1, r3
 800fa80:	607b      	str	r3, [r7, #4]
 800fa82:	f04f 0200 	mov.w	r2, #0
 800fa86:	f04f 0300 	mov.w	r3, #0
 800fa8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800fa8e:	4629      	mov	r1, r5
 800fa90:	02cb      	lsls	r3, r1, #11
 800fa92:	4621      	mov	r1, r4
 800fa94:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800fa98:	4621      	mov	r1, r4
 800fa9a:	02ca      	lsls	r2, r1, #11
 800fa9c:	461c      	mov	r4, r3
 800fa9e:	4613      	mov	r3, r2
 800faa0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800faa4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800faa8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800faac:	f7f0 fe92 	bl	80007d4 <__aeabi_uldivmod>
 800fab0:	4602      	mov	r2, r0
 800fab2:	460b      	mov	r3, r1
 800fab4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 800fab8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800faba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fabc:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800fabe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	2b01      	cmp	r3, #1
 800fac4:	d802      	bhi.n	800facc <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800fac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fac8:	2202      	movs	r2, #2
 800faca:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800facc:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800fad0:	4618      	mov	r0, r3
 800fad2:	3788      	adds	r7, #136	; 0x88
 800fad4:	46bd      	mov	sp, r7
 800fad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800fadc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53L1_smudge_corrector_config_t	*pconfig,
	VL53L1_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b096      	sub	sp, #88	; 0x58
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	607a      	str	r2, [r7, #4]
 800fae8:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800faea:	2300      	movs	r3, #0
 800faec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	3318      	adds	r3, #24
 800faf4:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t histo_merge_nb;
	uint8_t i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800faf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faf8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800fafc:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800fafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb00:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800fb04:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800fb06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb08:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800fb0c:	2b01      	cmp	r3, #1
 800fb0e:	d108      	bne.n	800fb22 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fb16:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d101      	bne.n	800fb22 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
 800fb1e:	2301      	movs	r3, #1
 800fb20:	e000      	b.n	800fb24 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x48>
 800fb22:	2300      	movs	r3, #0
 800fb24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		 VL53L1_PRESETMODE_RANGING);


	if (add_smudge == 1) {
 800fb28:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800fb2c:	2b01      	cmp	r3, #1
 800fb2e:	d107      	bne.n	800fb40 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x64>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	889b      	ldrh	r3, [r3, #4]
 800fb34:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	609a      	str	r2, [r3, #8]
 800fb3e:	e002      	b.n	800fb46 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x6a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	68ba      	ldr	r2, [r7, #8]
 800fb44:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800fb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb48:	689b      	ldr	r3, [r3, #8]
 800fb4a:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800fb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb4e:	899b      	ldrh	r3, [r3, #12]
 800fb50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800fb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb56:	89db      	ldrh	r3, [r3, #14]
 800fb58:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d004      	beq.n	800fb70 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x94>
		(pconfig->scaler_calc_method == 1)) &&
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	d125      	bne.n	800fbbc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800fb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb72:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d021      	beq.n	800fbbc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800fb78:	f107 0313 	add.w	r3, r7, #19
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	68f8      	ldr	r0, [r7, #12]
 800fb80:	f000 fe44 	bl	801080c <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800fb84:	7cfb      	ldrb	r3, [r7, #19]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d101      	bne.n	800fb8e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			histo_merge_nb = 1;
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	74fb      	strb	r3, [r7, #19]
		if (!merge_enabled)
 800fb8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d103      	bne.n	800fb9e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
			orig_xtalk_offset =
 800fb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	653b      	str	r3, [r7, #80]	; 0x50
 800fb9c:	e006      	b.n	800fbac <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800fb9e:	7cfb      	ldrb	r3, [r7, #19]
 800fba0:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800fba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba4:	3202      	adds	r2, #2
 800fba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbaa:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800fbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbae:	889b      	ldrh	r3, [r3, #4]
 800fbb0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800fbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb6:	88db      	ldrh	r3, [r3, #6]
 800fbb8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d10a      	bne.n	800fbdc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 800fbc6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d106      	bne.n	800fbdc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x01;
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	795b      	ldrb	r3, [r3, #5]
 800fbd2:	f043 0301 	orr.w	r3, r3, #1
 800fbd6:	b2da      	uxtb	r2, r3
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d10a      	bne.n	800fbfc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
 800fbe6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d106      	bne.n	800fbfc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
		pout->gradient_zero_flag |= 0x02;
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	795b      	ldrb	r3, [r3, #5]
 800fbf2:	f043 0302 	orr.w	r3, r3, #2
 800fbf6:	b2da      	uxtb	r2, r3
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800fbfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d101      	bne.n	800fc06 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x12a>
		orig_xtalk_offset = 1;
 800fc02:	2301      	movs	r3, #1
 800fc04:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d108      	bne.n	800fc22 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x146>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fc1c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800fc20:	e019      	b.n	800fc56 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x17a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800fc22:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fc26:	019b      	lsls	r3, r3, #6
 800fc28:	461a      	mov	r2, r3
 800fc2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc30:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800fc3a:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800fc3c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800fc40:	019b      	lsls	r3, r3, #6
 800fc42:	461a      	mov	r2, r3
 800fc44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc46:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc4a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800fc54:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d12a      	bne.n	800fcb6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1da>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	689b      	ldr	r3, [r3, #8]
 800fc64:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800fc68:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800fc6c:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800fc6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc70:	119b      	asrs	r3, r3, #6
 800fc72:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800fc74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc7a:	db02      	blt.n	800fc82 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1a6>
			itemp32 = 0xFFFF;
 800fc7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc80:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800fc82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc84:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	689b      	ldr	r3, [r3, #8]
 800fc8e:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800fc92:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800fc96:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800fc98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc9a:	119b      	asrs	r3, r3, #6
 800fc9c:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800fc9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fca4:	db02      	blt.n	800fcac <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1d0>
			itemp32 = 0xFFFF;
 800fca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fcaa:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800fcac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcae:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	81da      	strh	r2, [r3, #14]
 800fcb4:	e042      	b.n	800fd3c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>
	} else if (pconfig->scaler_calc_method == 1) {
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcbc:	2b01      	cmp	r3, #1
 800fcbe:	d13d      	bne.n	800fd3c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800fcc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fcc6:	1ad3      	subs	r3, r2, r3
 800fcc8:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800fcca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	da00      	bge.n	800fcd2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
 800fcd0:	330f      	adds	r3, #15
 800fcd2:	111b      	asrs	r3, r3, #4
 800fcd4:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800fcd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcd8:	009b      	lsls	r3, r3, #2
 800fcda:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800fcdc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fce0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fce2:	4413      	add	r3, r2
 800fce4:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800fce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcec:	db02      	blt.n	800fcf4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x218>
			itemp32 = 0xFFFF;
 800fcee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fcf2:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800fcf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcf6:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800fd00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fd02:	1ad3      	subs	r3, r2, r3
 800fd04:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800fd06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd08:	4a51      	ldr	r2, [pc, #324]	; (800fe50 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x374>)
 800fd0a:	fb82 1203 	smull	r1, r2, r2, r3
 800fd0e:	1152      	asrs	r2, r2, #5
 800fd10:	17db      	asrs	r3, r3, #31
 800fd12:	1ad3      	subs	r3, r2, r3
 800fd14:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800fd16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd18:	009b      	lsls	r3, r3, #2
 800fd1a:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800fd1c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800fd20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd22:	4413      	add	r3, r2
 800fd24:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800fd26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd2c:	db02      	blt.n	800fd34 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x258>
			itemp32 = 0xFFFF;
 800fd2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd32:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800fd34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd36:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	81da      	strh	r2, [r3, #14]
	}


	if (pconfig->smudge_corr_apply_enabled == 1 &&
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	785b      	ldrb	r3, [r3, #1]
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d177      	bne.n	800fe34 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
 800fd44:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800fd48:	2b01      	cmp	r3, #1
 800fd4a:	d073      	beq.n	800fe34 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
			(soft_update != 1)) {
		pout->new_xtalk_applied_flag = 1;
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	2201      	movs	r2, #1
 800fd50:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	689b      	ldr	r3, [r3, #8]
 800fd56:	627b      	str	r3, [r7, #36]	; 0x24

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800fd58:	f107 0313 	add.w	r3, r7, #19
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	68f8      	ldr	r0, [r7, #12]
 800fd60:	f000 fd54 	bl	801080c <VL53L1_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800fd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd66:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800fd6a:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800fd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6e:	3308      	adds	r3, #8
 800fd70:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 800fd72:	7cfb      	ldrb	r3, [r7, #19]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d041      	beq.n	800fdfc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800fd78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d03d      	beq.n	800fdfc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800fd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d03a      	beq.n	800fdfc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			cXtalk =
 800fd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	61fb      	str	r3, [r7, #28]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800fd8c:	69fb      	ldr	r3, [r7, #28]
 800fd8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fd92:	fb03 f202 	mul.w	r2, r3, r2
 800fd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd98:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd9c:	61bb      	str	r3, [r7, #24]
			if ((max ==  0)||
 800fd9e:	6a3b      	ldr	r3, [r7, #32]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d004      	beq.n	800fdae <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800fda8:	69ba      	ldr	r2, [r7, #24]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d303      	bcc.n	800fdb6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2da>
				pout->new_xtalk_applied_flag = 0;
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	719a      	strb	r2, [r3, #6]
 800fdb4:	e022      	b.n	800fdfc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			else {
				incXtalk = nXtalk / max;
 800fdb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdb8:	6a3b      	ldr	r3, [r7, #32]
 800fdba:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdbe:	617b      	str	r3, [r7, #20]
				cval = 0;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800fdca:	e00e      	b.n	800fdea <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
					cval += incXtalk;
 800fdcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800fdd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fdd8:	601a      	str	r2, [r3, #0]
					pcpo++;
 800fdda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fddc:	3304      	adds	r3, #4
 800fdde:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800fde0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800fde4:	3301      	adds	r3, #1
 800fde6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800fdea:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800fdee:	6a3b      	ldr	r3, [r7, #32]
 800fdf0:	3b01      	subs	r3, #1
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d3ea      	bcc.n	800fdcc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2f0>
				}
				*pcpo = nXtalk;
 800fdf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdfa:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	799b      	ldrb	r3, [r3, #6]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d017      	beq.n	800fe34 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800fe08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe0a:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800fe12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe14:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800fe1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe1e:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	789b      	ldrb	r3, [r3, #2]
 800fe24:	2b01      	cmp	r3, #1
 800fe26:	d105      	bne.n	800fe34 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

			pconfig->smudge_corr_apply_enabled = 0;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2200      	movs	r2, #0
 800fe32:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800fe34:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800fe38:	2b01      	cmp	r3, #1
 800fe3a:	d002      	beq.n	800fe42 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x366>
		pout->smudge_corr_valid = 1;
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	2201      	movs	r2, #1
 800fe40:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800fe42:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3758      	adds	r7, #88	; 0x58
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}
 800fe4e:	bf00      	nop
 800fe50:	66666667 	.word	0x66666667

0800fe54 <VL53L1_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53L1_Error VL53L1_dynamic_xtalk_correction_corrector(
	VL53L1_DEV                          Dev
	)
{
 800fe54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fe58:	b0a2      	sub	sp, #136	; 0x88
 800fe5a:	af02      	add	r7, sp, #8
 800fe5c:	6278      	str	r0, [r7, #36]	; 0x24



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800fe64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe66:	3318      	adds	r3, #24
 800fe68:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800fe6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe6c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800fe70:	3308      	adds	r3, #8
 800fe72:	667b      	str	r3, [r7, #100]	; 0x64
	VL53L1_smudge_corrector_config_t *pconfig =
 800fe74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe76:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800fe7a:	3318      	adds	r3, #24
 800fe7c:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800fe7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe80:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800fe84:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53L1_smudge_corrector_data_t *pout =
 800fe86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe88:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fe8c:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53L1_range_results_t  *pR = &(pres->range_results);
 800fe8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe90:	657b      	str	r3, [r7, #84]	; 0x54
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800fe92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe94:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800fe98:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 800fea0:	2300      	movs	r3, #0
 800fea2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 800fea6:	2300      	movs	r3, #0
 800fea8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 800feac:	2300      	movs	r3, #0
 800feae:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 800feb2:	2300      	movs	r3, #0
 800feb4:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 800feb6:	f04f 0200 	mov.w	r2, #0
 800feba:	f04f 0300 	mov.w	r3, #0
 800febe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800fec2:	2300      	movs	r3, #0
 800fec4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 800fec8:	2300      	movs	r3, #0
 800feca:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 800fecc:	2300      	movs	r3, #0
 800fece:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 800fed0:	2300      	movs	r3, #0
 800fed2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 800fed4:	2300      	movs	r3, #0
 800fed6:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 800fed8:	2300      	movs	r3, #0
 800feda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 800fede:	2300      	movs	r3, #0
 800fee0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t merge_enabled;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800fee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fee6:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800feea:	2b01      	cmp	r3, #1
 800feec:	d108      	bne.n	800ff00 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800feee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fef4:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d101      	bne.n	800ff00 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
 800fefc:	2301      	movs	r3, #1
 800fefe:	e000      	b.n	800ff02 <VL53L1_dynamic_xtalk_correction_corrector+0xae>
 800ff00:	2300      	movs	r3, #0
 800ff02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 VL53L1_PRESETMODE_RANGING);

	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800ff06:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff0e:	f000 fc7d 	bl	801080c <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 800ff12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d003      	beq.n	800ff22 <VL53L1_dynamic_xtalk_correction_corrector+0xce>
 800ff1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d102      	bne.n	800ff28 <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
		histo_merge_nb = 1;
 800ff22:	2301      	movs	r3, #1
 800ff24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800ff28:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ff2a:	f000 fb15 	bl	8010558 <VL53L1_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800ff2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00a      	beq.n	800ff4c <VL53L1_dynamic_xtalk_correction_corrector+0xf8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 800ff36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff3e:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800ff42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff44:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d901      	bls.n	800ff50 <VL53L1_dynamic_xtalk_correction_corrector+0xfc>
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	e000      	b.n	800ff52 <VL53L1_dynamic_xtalk_correction_corrector+0xfe>
 800ff50:	2300      	movs	r3, #0
 800ff52:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete = ((!merge_enabled) ||
 800ff56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d006      	beq.n	800ff6c <VL53L1_dynamic_xtalk_correction_corrector+0x118>
	(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800ff5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff60:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 800ff64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
	merging_complete = ((!merge_enabled) ||
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d101      	bne.n	800ff70 <VL53L1_dynamic_xtalk_correction_corrector+0x11c>
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	e000      	b.n	800ff72 <VL53L1_dynamic_xtalk_correction_corrector+0x11e>
 800ff70:	2300      	movs	r3, #0
 800ff72:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800ff76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff78:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800ff7a:	2b01      	cmp	r3, #1
 800ff7c:	d10e      	bne.n	800ff9c <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pconfig->smudge_corr_enabled == 1) &&
 800ff7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d00a      	beq.n	800ff9c <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pR->xmonitor.range_status
 800ff86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff88:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800ff8c:	2b09      	cmp	r3, #9
 800ff8e:	d105      	bne.n	800ff9c <VL53L1_dynamic_xtalk_correction_corrector+0x148>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800ff90:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d001      	beq.n	800ff9c <VL53L1_dynamic_xtalk_correction_corrector+0x148>
 800ff98:	2301      	movs	r3, #1
 800ff9a:	e000      	b.n	800ff9e <VL53L1_dynamic_xtalk_correction_corrector+0x14a>
 800ff9c:	2300      	movs	r3, #0
	run_smudge_detection =
 800ff9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800ffa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffa4:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800ffa8:	2b09      	cmp	r3, #9
 800ffaa:	f000 80a6 	beq.w	80100fa <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800ffae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffb0:	781b      	ldrb	r3, [r3, #0]
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800ffb2:	2b01      	cmp	r3, #1
 800ffb4:	f040 80a1 	bne.w	80100fa <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>

		run_nodetect = 2;
 800ffb8:	2302      	movs	r3, #2
 800ffba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ffc4:	e02d      	b.n	8010022 <VL53L1_dynamic_xtalk_correction_corrector+0x1ce>
			if (pR->VL53L1_p_002[i].range_status ==
 800ffc6:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800ffca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ffcc:	234c      	movs	r3, #76	; 0x4c
 800ffce:	fb01 f303 	mul.w	r3, r1, r3
 800ffd2:	4413      	add	r3, r2
 800ffd4:	335e      	adds	r3, #94	; 0x5e
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	2b09      	cmp	r3, #9
 800ffda:	d11d      	bne.n	8010018 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				VL53L1_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53L1_p_002[i].median_range_mm
 800ffdc:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800ffe0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ffe2:	234c      	movs	r3, #76	; 0x4c
 800ffe4:	fb01 f303 	mul.w	r3, r1, r3
 800ffe8:	4413      	add	r3, r2
 800ffea:	335a      	adds	r3, #90	; 0x5a
 800ffec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fff0:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800fff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fff4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53L1_p_002[i].median_range_mm
 800fff6:	429a      	cmp	r2, r3
 800fff8:	dc03      	bgt.n	8010002 <VL53L1_dynamic_xtalk_correction_corrector+0x1ae>
					run_nodetect = 0;
 800fffa:	2300      	movs	r3, #0
 800fffc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010000:	e00a      	b.n	8010018 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				} else {
					if (run_nodetect == 2) {
 8010002:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010006:	2b02      	cmp	r3, #2
 8010008:	d106      	bne.n	8010018 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
						run_nodetect = 1;
 801000a:	2301      	movs	r3, #1
 801000c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 8010010:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010014:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 8010018:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801001c:	3301      	adds	r3, #1
 801001e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8010022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010024:	7c9a      	ldrb	r2, [r3, #18]
 8010026:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801002a:	4293      	cmp	r3, r2
 801002c:	d3cb      	bcc.n	800ffc6 <VL53L1_dynamic_xtalk_correction_corrector+0x172>
					}
				}
			}
		}

		if (run_nodetect == 2)
 801002e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010032:	2b02      	cmp	r3, #2
 8010034:	d102      	bne.n	801003c <VL53L1_dynamic_xtalk_correction_corrector+0x1e8>

			run_nodetect = 0;
 8010036:	2300      	movs	r3, #0
 8010038:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53L1_p_002[nodetect_index].ambient_count_rate_mcps;
 801003c:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 8010040:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010042:	234c      	movs	r3, #76	; 0x4c
 8010044:	fb01 f303 	mul.w	r3, r1, r3
 8010048:	4413      	add	r3, r2
 801004a:	3348      	adds	r3, #72	; 0x48
 801004c:	881b      	ldrh	r3, [r3, #0]
 801004e:	863b      	strh	r3, [r7, #48]	; 0x30

		if (run_nodetect == 1) {
 8010050:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010054:	2b01      	cmp	r3, #1
 8010056:	d150      	bne.n	80100fa <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>




			utemp64 = 1000 * ((uint64_t)amr);
 8010058:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801005a:	2200      	movs	r2, #0
 801005c:	469a      	mov	sl, r3
 801005e:	4693      	mov	fp, r2
 8010060:	4652      	mov	r2, sl
 8010062:	465b      	mov	r3, fp
 8010064:	f04f 0000 	mov.w	r0, #0
 8010068:	f04f 0100 	mov.w	r1, #0
 801006c:	0159      	lsls	r1, r3, #5
 801006e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010072:	0150      	lsls	r0, r2, #5
 8010074:	4602      	mov	r2, r0
 8010076:	460b      	mov	r3, r1
 8010078:	ebb2 040a 	subs.w	r4, r2, sl
 801007c:	eb63 050b 	sbc.w	r5, r3, fp
 8010080:	f04f 0200 	mov.w	r2, #0
 8010084:	f04f 0300 	mov.w	r3, #0
 8010088:	00ab      	lsls	r3, r5, #2
 801008a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 801008e:	00a2      	lsls	r2, r4, #2
 8010090:	4614      	mov	r4, r2
 8010092:	461d      	mov	r5, r3
 8010094:	eb14 080a 	adds.w	r8, r4, sl
 8010098:	eb45 090b 	adc.w	r9, r5, fp
 801009c:	f04f 0200 	mov.w	r2, #0
 80100a0:	f04f 0300 	mov.w	r3, #0
 80100a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80100a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80100ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80100b0:	4690      	mov	r8, r2
 80100b2:	4699      	mov	r9, r3
 80100b4:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 80100b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80100bc:	f04f 0200 	mov.w	r2, #0
 80100c0:	f04f 0300 	mov.w	r3, #0
 80100c4:	024b      	lsls	r3, r1, #9
 80100c6:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80100ca:	0242      	lsls	r2, r0, #9
 80100cc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 80100d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80100d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100d4:	2200      	movs	r2, #0
 80100d6:	61bb      	str	r3, [r7, #24]
 80100d8:	61fa      	str	r2, [r7, #28]
 80100da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80100de:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80100e2:	4621      	mov	r1, r4
 80100e4:	428a      	cmp	r2, r1
 80100e6:	4629      	mov	r1, r5
 80100e8:	418b      	sbcs	r3, r1
 80100ea:	d203      	bcs.n	80100f4 <VL53L1_dynamic_xtalk_correction_corrector+0x2a0>
				run_nodetect = 1;
 80100ec:	2301      	movs	r3, #1
 80100ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80100f2:	e002      	b.n	80100fa <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
			else
				run_nodetect = 0;
 80100f4:	2300      	movs	r3, #0
 80100f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 80100fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80100fe:	2b00      	cmp	r3, #0
 8010100:	f000 810b 	beq.w	801031a <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>

		pint->nodetect_counter = 0;
 8010104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010106:	2200      	movs	r2, #0
 8010108:	611a      	str	r2, [r3, #16]


		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 801010a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801010c:	f7ff fb80 	bl	800f810 <VL53L1_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 8010110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010112:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8010116:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53L1_p_012;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 8010118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 801011e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010120:	009b      	lsls	r3, r3, #2
 8010122:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 8010124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010126:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 8010128:	009b      	lsls	r3, r3, #2
 801012a:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 801012c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801012e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010130:	1ad2      	subs	r2, r2, r3
 8010132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010134:	4413      	add	r3, r2
 8010136:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 8010138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801013a:	2b00      	cmp	r3, #0
 801013c:	da02      	bge.n	8010144 <VL53L1_dynamic_xtalk_correction_corrector+0x2f0>
			itemp32 = itemp32 * (-1);
 801013e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010140:	425b      	negs	r3, r3
 8010142:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 8010144:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010146:	699b      	ldr	r3, [r3, #24]
 8010148:	461a      	mov	r2, r3
 801014a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801014c:	4293      	cmp	r3, r2
 801014e:	dd0c      	ble.n	801016a <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 8010150:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 8010152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 8010154:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 8010156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010158:	429a      	cmp	r2, r3
 801015a:	da03      	bge.n	8010164 <VL53L1_dynamic_xtalk_correction_corrector+0x310>
				pout->single_xtalk_delta_flag = 1;
 801015c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801015e:	2201      	movs	r2, #1
 8010160:	709a      	strb	r2, [r3, #2]
 8010162:	e002      	b.n	801016a <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			} else {
				pout->single_xtalk_delta_flag = 2;
 8010164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010166:	2202      	movs	r2, #2
 8010168:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 801016a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	1c5a      	adds	r2, r3, #1
 8010170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010172:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 8010174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010176:	681a      	ldr	r2, [r3, #0]
 8010178:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801017a:	695b      	ldr	r3, [r3, #20]
 801017c:	429a      	cmp	r2, r3
 801017e:	d906      	bls.n	801018e <VL53L1_dynamic_xtalk_correction_corrector+0x33a>
			pout->sample_limit_exceeded_flag = 1;
 8010180:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010182:	2201      	movs	r2, #1
 8010184:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 8010186:	2302      	movs	r3, #2
 8010188:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801018c:	e014      	b.n	80101b8 <VL53L1_dynamic_xtalk_correction_corrector+0x364>
		} else {
			pint->accumulator = pint->accumulator +
 801018e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010190:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010194:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010196:	2000      	movs	r0, #0
 8010198:	6139      	str	r1, [r7, #16]
 801019a:	6178      	str	r0, [r7, #20]
 801019c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80101a0:	4621      	mov	r1, r4
 80101a2:	1851      	adds	r1, r2, r1
 80101a4:	60b9      	str	r1, [r7, #8]
 80101a6:	4629      	mov	r1, r5
 80101a8:	eb43 0101 	adc.w	r1, r3, r1
 80101ac:	60f9      	str	r1, [r7, #12]
 80101ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80101b4:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 80101b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101ba:	681a      	ldr	r2, [r3, #0]
 80101bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d202      	bcs.n	80101ca <VL53L1_dynamic_xtalk_correction_corrector+0x376>
			continue_processing = CONT_NEXT_LOOP;
 80101c4:	2301      	movs	r3, #1
 80101c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 80101ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101cc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80101d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	2200      	movs	r2, #0
 80101d6:	603b      	str	r3, [r7, #0]
 80101d8:	607a      	str	r2, [r7, #4]
 80101da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101de:	f7f0 faf9 	bl	80007d4 <__aeabi_uldivmod>
 80101e2:	4602      	mov	r2, r0
 80101e4:	460b      	mov	r3, r1
		xtalk_offset_out =
 80101e6:	4613      	mov	r3, r2
 80101e8:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 80101ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80101ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ee:	1ad2      	subs	r2, r2, r3
 80101f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101f2:	4413      	add	r3, r2
 80101f4:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 80101f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	da02      	bge.n	8010202 <VL53L1_dynamic_xtalk_correction_corrector+0x3ae>
			itemp32 = itemp32 * (-1);
 80101fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101fe:	425b      	negs	r3, r3
 8010200:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 8010202:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010206:	2b00      	cmp	r3, #0
 8010208:	d112      	bne.n	8010230 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 801020a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801020c:	69db      	ldr	r3, [r3, #28]
 801020e:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 8010210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010212:	4293      	cmp	r3, r2
 8010214:	db0c      	blt.n	8010230 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 8010216:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 8010218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 801021a:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 801021c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801021e:	429a      	cmp	r2, r3
 8010220:	da03      	bge.n	801022a <VL53L1_dynamic_xtalk_correction_corrector+0x3d6>
				pout->averaged_xtalk_delta_flag = 1;
 8010222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010224:	2201      	movs	r2, #1
 8010226:	70da      	strb	r2, [r3, #3]
 8010228:	e002      	b.n	8010230 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			else
				pout->averaged_xtalk_delta_flag = 2;
 801022a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801022c:	2202      	movs	r2, #2
 801022e:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 8010230:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010234:	2b00      	cmp	r3, #0
 8010236:	d108      	bne.n	801024a <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 8010238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801023a:	69db      	ldr	r3, [r3, #28]
 801023c:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 801023e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010240:	4293      	cmp	r3, r2
 8010242:	da02      	bge.n	801024a <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			)

			continue_processing = CONT_RESET;
 8010244:	2302      	movs	r3, #2
 8010246:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 801024a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801024c:	2200      	movs	r2, #0
 801024e:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 8010250:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010254:	2b00      	cmp	r3, #0
 8010256:	d112      	bne.n	801027e <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			(pconfig->smudge_corr_clip_limit != 0)) {
 8010258:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801025a:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 801025c:	2b00      	cmp	r3, #0
 801025e:	d00e      	beq.n	801027e <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 8010260:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010262:	6a1b      	ldr	r3, [r3, #32]
 8010264:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8010268:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 801026c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801026e:	429a      	cmp	r2, r3
 8010270:	d905      	bls.n	801027e <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
				pout->smudge_corr_clipped = 1;
 8010272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010274:	2201      	movs	r2, #1
 8010276:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 8010278:	2302      	movs	r3, #2
 801027a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 801027e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010280:	7c1b      	ldrb	r3, [r3, #16]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d007      	beq.n	8010296 <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 8010286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010288:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 801028a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801028c:	429a      	cmp	r2, r3
 801028e:	d902      	bls.n	8010296 <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			xtalk_offset_out =
 8010290:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 8010296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010298:	7c1b      	ldrb	r3, [r3, #16]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d107      	bne.n	80102ae <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 801029e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102a0:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 80102a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d202      	bcs.n	80102ae <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			xtalk_offset_out =
 80102a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102aa:	68db      	ldr	r3, [r3, #12]
 80102ac:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 80102ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80102b0:	089b      	lsrs	r3, r3, #2
 80102b2:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 80102b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80102b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80102ba:	d301      	bcc.n	80102c0 <VL53L1_dynamic_xtalk_correction_corrector+0x46c>
			xtalk_offset_out = 0x3FFFF;
 80102bc:	4b3e      	ldr	r3, [pc, #248]	; (80103b8 <VL53L1_dynamic_xtalk_correction_corrector+0x564>)
 80102be:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 80102c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d10d      	bne.n	80102e4 <VL53L1_dynamic_xtalk_correction_corrector+0x490>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 80102c8:	2300      	movs	r3, #0
 80102ca:	9301      	str	r3, [sp, #4]
 80102cc:	2301      	movs	r3, #1
 80102ce:	9300      	str	r3, [sp, #0]
 80102d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80102d4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80102d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102d8:	f7ff fc00 	bl	800fadc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 80102dc:	2302      	movs	r3, #2
 80102de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80102e2:	e009      	b.n	80102f8 <VL53L1_dynamic_xtalk_correction_corrector+0x4a4>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 80102e4:	2301      	movs	r3, #1
 80102e6:	9301      	str	r3, [sp, #4]
 80102e8:	2301      	movs	r3, #1
 80102ea:	9300      	str	r3, [sp, #0]
 80102ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80102f0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80102f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102f4:	f7ff fbf2 	bl	800fadc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 80102f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80102fc:	2b02      	cmp	r3, #2
 80102fe:	d10c      	bne.n	801031a <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>
			pint->accumulator = 0;
 8010300:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010302:	f04f 0200 	mov.w	r2, #0
 8010306:	f04f 0300 	mov.w	r3, #0
 801030a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 801030e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010310:	2200      	movs	r2, #0
 8010312:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 8010314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010316:	2200      	movs	r2, #0
 8010318:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 801031a:	2300      	movs	r3, #0
 801031c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 8010320:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010324:	2b01      	cmp	r3, #1
 8010326:	d140      	bne.n	80103aa <VL53L1_dynamic_xtalk_correction_corrector+0x556>

		pint->nodetect_counter += 1;
 8010328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801032a:	691b      	ldr	r3, [r3, #16]
 801032c:	1c5a      	adds	r2, r3, #1
 801032e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010330:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 8010332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010334:	691a      	ldr	r2, [r3, #16]
 8010336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801033a:	429a      	cmp	r2, r3
 801033c:	d202      	bcs.n	8010344 <VL53L1_dynamic_xtalk_correction_corrector+0x4f0>
			continue_processing = CONT_NEXT_LOOP;
 801033e:	2301      	movs	r3, #1
 8010340:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 8010344:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010348:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 801034a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801034e:	2b00      	cmp	r3, #0
 8010350:	d110      	bne.n	8010374 <VL53L1_dynamic_xtalk_correction_corrector+0x520>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 8010352:	2300      	movs	r3, #0
 8010354:	9301      	str	r3, [sp, #4]
 8010356:	2300      	movs	r3, #0
 8010358:	9300      	str	r3, [sp, #0]
 801035a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801035c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801035e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010362:	f7ff fbbb 	bl	800fadc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 8010366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010368:	2202      	movs	r2, #2
 801036a:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 801036c:	2302      	movs	r3, #2
 801036e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8010372:	e009      	b.n	8010388 <VL53L1_dynamic_xtalk_correction_corrector+0x534>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 8010374:	2301      	movs	r3, #1
 8010376:	9301      	str	r3, [sp, #4]
 8010378:	2300      	movs	r3, #0
 801037a:	9300      	str	r3, [sp, #0]
 801037c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801037e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010380:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010382:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010384:	f7ff fbaa 	bl	800fadc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 8010388:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801038c:	2b02      	cmp	r3, #2
 801038e:	d10c      	bne.n	80103aa <VL53L1_dynamic_xtalk_correction_corrector+0x556>
			pint->accumulator = 0;
 8010390:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010392:	f04f 0200 	mov.w	r2, #0
 8010396:	f04f 0300 	mov.w	r3, #0
 801039a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 801039e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103a0:	2200      	movs	r2, #0
 80103a2:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 80103a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103a6:	2200      	movs	r2, #0
 80103a8:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 80103aa:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3780      	adds	r7, #128	; 0x80
 80103b2:	46bd      	mov	sp, r7
 80103b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80103b8:	0003ffff 	.word	0x0003ffff

080103bc <VL53L1_dynamic_xtalk_correction_data_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_data_init(
	VL53L1_DEV                          Dev
	)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b086      	sub	sp, #24
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80103c4:	2300      	movs	r3, #0
 80103c6:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	3318      	adds	r3, #24
 80103cc:	613b      	str	r3, [r7, #16]
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80103d4:	3308      	adds	r3, #8
 80103d6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 80103d8:	693b      	ldr	r3, [r7, #16]
 80103da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103de:	2201      	movs	r2, #1
 80103e0:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103ea:	2201      	movs	r2, #1
 80103ec:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103f6:	2200      	movs	r2, #0
 80103f8:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010406:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010410:	461a      	mov	r2, r3
 8010412:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8010416:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010420:	461a      	mov	r2, r3
 8010422:	2300      	movs	r3, #0
 8010424:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801042e:	2200      	movs	r2, #0
 8010430:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801043a:	461a      	mov	r2, r3
 801043c:	23c8      	movs	r3, #200	; 0xc8
 801043e:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010448:	461a      	mov	r2, r3
 801044a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801044e:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010458:	461a      	mov	r2, r3
 801045a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801045e:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
		VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010468:	461a      	mov	r2, r3
 801046a:	4b3a      	ldr	r3, [pc, #232]	; (8010554 <VL53L1_dynamic_xtalk_correction_data_init+0x198>)
 801046c:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010476:	461a      	mov	r2, r3
 8010478:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 801047c:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 8010480:	693b      	ldr	r3, [r7, #16]
 8010482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010486:	2200      	movs	r2, #0
 8010488:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010492:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010496:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80104a4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104ae:	2200      	movs	r2, #0
 80104b0:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104ba:	461a      	mov	r2, r3
 80104bc:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 80104c0:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104ca:	461a      	mov	r2, r3
 80104cc:	230a      	movs	r3, #10
 80104ce:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104d8:	461a      	mov	r2, r3
 80104da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80104de:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104e8:	f44f 7261 	mov.w	r2, #900	; 0x384
 80104ec:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104f6:	461a      	mov	r2, r3
 80104f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80104fc:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
		VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010506:	461a      	mov	r2, r3
 8010508:	2300      	movs	r3, #0
 801050a:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
	pdev->smudge_corrector_internals.required_samples = 0;
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010514:	461a      	mov	r2, r3
 8010516:	2300      	movs	r3, #0
 8010518:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
	pdev->smudge_corrector_internals.accumulator = 0;
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8010522:	3310      	adds	r3, #16
 8010524:	4619      	mov	r1, r3
 8010526:	f04f 0200 	mov.w	r2, #0
 801052a:	f04f 0300 	mov.w	r3, #0
 801052e:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010538:	461a      	mov	r2, r3
 801053a:	2300      	movs	r3, #0
 801053c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 8010540:	68f8      	ldr	r0, [r7, #12]
 8010542:	f000 f809 	bl	8010558 <VL53L1_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 8010546:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801054a:	4618      	mov	r0, r3
 801054c:	3718      	adds	r7, #24
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	000ff800 	.word	0x000ff800

08010558 <VL53L1_dynamic_xtalk_correction_output_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_output_init(
	VL53L1_LLDriverResults_t *pres
	)
{
 8010558:	b480      	push	{r7}
 801055a:	b085      	sub	sp, #20
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010560:	2300      	movs	r3, #0
 8010562:	73fb      	strb	r3, [r7, #15]
	VL53L1_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801056a:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	2200      	movs	r2, #0
 8010570:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	2200      	movs	r2, #0
 8010576:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	2200      	movs	r2, #0
 801057c:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	2200      	movs	r2, #0
 8010582:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	2200      	movs	r2, #0
 8010588:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	2200      	movs	r2, #0
 801058e:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	2200      	movs	r2, #0
 8010594:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	2200      	movs	r2, #0
 801059a:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	2200      	movs	r2, #0
 80105a0:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	2200      	movs	r2, #0
 80105a6:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 80105a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3714      	adds	r7, #20
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr

080105b8 <VL53L1_xtalk_cal_data_init>:


VL53L1_Error VL53L1_xtalk_cal_data_init(
	VL53L1_DEV                          Dev
	)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b084      	sub	sp, #16
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80105c0:	2300      	movs	r3, #0
 80105c2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	3318      	adds	r3, #24
 80105c8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105d0:	461a      	mov	r2, r3
 80105d2:	2300      	movs	r3, #0
 80105d4:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105de:	2200      	movs	r2, #0
 80105e0:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105ea:	2200      	movs	r2, #0
 80105ec:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 80105f6:	3308      	adds	r3, #8
 80105f8:	2218      	movs	r2, #24
 80105fa:	2100      	movs	r1, #0
 80105fc:	4618      	mov	r0, r3
 80105fe:	f00d fedb 	bl	801e3b8 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 8010602:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010606:	4618      	mov	r0, r3
 8010608:	3710      	adds	r7, #16
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}

0801060e <VL53L1_low_power_auto_data_init>:


VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 801060e:	b480      	push	{r7}
 8010610:	b085      	sub	sp, #20
 8010612:	af00      	add	r7, sp, #0
 8010614:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010616:	2300      	movs	r3, #0
 8010618:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	3318      	adds	r3, #24
 801061e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010626:	2203      	movs	r2, #3
 8010628:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010632:	2200      	movs	r2, #0
 8010634:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801063e:	2200      	movs	r2, #0
 8010640:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801064a:	2200      	movs	r2, #0
 801064c:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010656:	2200      	movs	r2, #0
 8010658:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010662:	2200      	movs	r2, #0
 8010664:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801066e:	2200      	movs	r2, #0
 8010670:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801067a:	461a      	mov	r2, r3
 801067c:	2300      	movs	r3, #0
 801067e:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010688:	2200      	movs	r2, #0
 801068a:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

	LOG_FUNCTION_END(status);

	return status;
 801068e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010692:	4618      	mov	r0, r3
 8010694:	3714      	adds	r7, #20
 8010696:	46bd      	mov	sp, r7
 8010698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069c:	4770      	bx	lr

0801069e <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 801069e:	b480      	push	{r7}
 80106a0:	b085      	sub	sp, #20
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80106a6:	2300      	movs	r3, #0
 80106a8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	3318      	adds	r3, #24
 80106ae:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106b6:	22ff      	movs	r2, #255	; 0xff
 80106b8:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106c2:	2200      	movs	r2, #0
 80106c4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106ce:	461a      	mov	r2, r3
 80106d0:	2300      	movs	r3, #0
 80106d2:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106dc:	2200      	movs	r2, #0
 80106de:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106e8:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d007      	beq.n	8010700 <VL53L1_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106f6:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
		pdev->stat_nvm.vhv_config__init =
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010706:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 801070a:	2b00      	cmp	r3, #0
 801070c:	d007      	beq.n	801071e <VL53L1_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010714:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324


	pdev->gen_cfg.phasecal_config__override = 0x00;
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	2200      	movs	r2, #0
 8010722:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b

	LOG_FUNCTION_END(status);

	return status;
 8010726:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801072a:	4618      	mov	r0, r3
 801072c:	3714      	adds	r7, #20
 801072e:	46bd      	mov	sp, r7
 8010730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010734:	4770      	bx	lr

08010736 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 8010736:	b480      	push	{r7}
 8010738:	b087      	sub	sp, #28
 801073a:	af00      	add	r7, sp, #0
 801073c:	60f8      	str	r0, [r7, #12]
 801073e:	60b9      	str	r1, [r7, #8]
 8010740:	607a      	str	r2, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010742:	2300      	movs	r3, #0
 8010744:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2201      	movs	r2, #1
 801074a:	705a      	strb	r2, [r3, #1]


	plpadata->low_power_auto_range_count = 0;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2200      	movs	r2, #0
 8010750:	709a      	strb	r2, [r3, #2]


	pdynamic->system__sequence_config =
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	229b      	movs	r2, #155	; 0x9b
 8010756:	745a      	strb	r2, [r3, #17]

			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 8010758:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801075c:	4618      	mov	r0, r3
 801075e:	371c      	adds	r7, #28
 8010760:	46bd      	mov	sp, r7
 8010762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010766:	4770      	bx	lr

08010768 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 8010768:	b480      	push	{r7}
 801076a:	b085      	sub	sp, #20
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	3318      	adds	r3, #24
 8010774:	60fb      	str	r3, [r7, #12]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010776:	2300      	movs	r3, #0
 8010778:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.saved_vhv_init =
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010786:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
	pdev->low_power_auto_data.saved_vhv_timeout =
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010796:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 80107a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107a4:	b2da      	uxtb	r2, r3
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80107b2:	f003 0303 	and.w	r3, r3, #3
 80107b6:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107be:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80107c2:	009b      	lsls	r3, r3, #2
 80107c4:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80107c6:	4413      	add	r3, r2
 80107c8:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	pdev->gen_cfg.phasecal_config__override = 0x01;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2201      	movs	r2, #1
 80107d4:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107de:	f893 23a2 	ldrb.w	r2, [r3, #930]	; 0x3a2
	pdev->low_power_auto_data.first_run_phasecal_result =
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107e8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107f2:	f893 243e 	ldrb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365

	LOG_FUNCTION_END(status);

	return status;
 80107fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010800:	4618      	mov	r0, r3
 8010802:	3714      	adds	r7, #20
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr

0801080c <VL53L1_compute_histo_merge_nb>:



VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 801080c:	b480      	push	{r7}
 801080e:	b087      	sub	sp, #28
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	3318      	adds	r3, #24
 801081a:	613b      	str	r3, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801081c:	2300      	movs	r3, #0
 801081e:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 8010820:	2300      	movs	r3, #0
 8010822:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801082a:	2b07      	cmp	r3, #7
 801082c:	bf0c      	ite	eq
 801082e:	2301      	moveq	r3, #1
 8010830:	2300      	movne	r3, #0
 8010832:	b2db      	uxtb	r3, r3
 8010834:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 8010836:	2300      	movs	r3, #0
 8010838:	75fb      	strb	r3, [r7, #23]
 801083a:	e019      	b.n	8010870 <VL53L1_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 801083c:	7df9      	ldrb	r1, [r7, #23]
 801083e:	7bbb      	ldrb	r3, [r7, #14]
 8010840:	6938      	ldr	r0, [r7, #16]
 8010842:	461a      	mov	r2, r3
 8010844:	0052      	lsls	r2, r2, #1
 8010846:	441a      	add	r2, r3
 8010848:	0153      	lsls	r3, r2, #5
 801084a:	461a      	mov	r2, r3
 801084c:	460b      	mov	r3, r1
 801084e:	005b      	lsls	r3, r3, #1
 8010850:	440b      	add	r3, r1
 8010852:	019b      	lsls	r3, r3, #6
 8010854:	4413      	add	r3, r2
 8010856:	4403      	add	r3, r0
 8010858:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 801085c:	3314      	adds	r3, #20
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	2b00      	cmp	r3, #0
 8010862:	dd02      	ble.n	801086a <VL53L1_compute_histo_merge_nb+0x5e>
			sum++;
 8010864:	7dbb      	ldrb	r3, [r7, #22]
 8010866:	3301      	adds	r3, #1
 8010868:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 801086a:	7dfb      	ldrb	r3, [r7, #23]
 801086c:	3301      	adds	r3, #1
 801086e:	75fb      	strb	r3, [r7, #23]
 8010870:	7dfb      	ldrb	r3, [r7, #23]
 8010872:	2b05      	cmp	r3, #5
 8010874:	d9e2      	bls.n	801083c <VL53L1_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	7dba      	ldrb	r2, [r7, #22]
 801087a:	701a      	strb	r2, [r3, #0]

	return status;
 801087c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010880:	4618      	mov	r0, r3
 8010882:	371c      	adds	r7, #28
 8010884:	46bd      	mov	sp, r7
 8010886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088a:	4770      	bx	lr

0801088c <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 801088c:	b480      	push	{r7}
 801088e:	b085      	sub	sp, #20
 8010890:	af00      	add	r7, sp, #0
 8010892:	4603      	mov	r3, r0
 8010894:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 8010896:	2300      	movs	r3, #0
 8010898:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 801089a:	88fb      	ldrh	r3, [r7, #6]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d005      	beq.n	80108ac <VL53L1_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 80108a0:	88fb      	ldrh	r3, [r7, #6]
 80108a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80108a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80108aa:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 80108ac:	68fb      	ldr	r3, [r7, #12]
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3714      	adds	r7, #20
 80108b2:	46bd      	mov	sp, r7
 80108b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b8:	4770      	bx	lr

080108ba <VL53L1_duration_maths>:
uint32_t  VL53L1_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 80108ba:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80108be:	b089      	sub	sp, #36	; 0x24
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	60f8      	str	r0, [r7, #12]
 80108c4:	60b9      	str	r1, [r7, #8]
 80108c6:	607a      	str	r2, [r7, #4]
 80108c8:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 80108ca:	f04f 0200 	mov.w	r2, #0
 80108ce:	f04f 0300 	mov.w	r3, #0
 80108d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 80108d6:	2300      	movs	r3, #0
 80108d8:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	68fa      	ldr	r2, [r7, #12]
 80108de:	fb02 f303 	mul.w	r3, r2, r3
 80108e2:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	0b1b      	lsrs	r3, r3, #12
 80108e8:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	2200      	movs	r2, #0
 80108ee:	469a      	mov	sl, r3
 80108f0:	4693      	mov	fp, r2
 80108f2:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	68ba      	ldr	r2, [r7, #8]
 80108fa:	fb02 f303 	mul.w	r3, r2, r3
 80108fe:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	091b      	lsrs	r3, r3, #4
 8010904:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	2200      	movs	r2, #0
 801090a:	4698      	mov	r8, r3
 801090c:	4691      	mov	r9, r2
 801090e:	69fb      	ldr	r3, [r7, #28]
 8010910:	fb08 f203 	mul.w	r2, r8, r3
 8010914:	69bb      	ldr	r3, [r7, #24]
 8010916:	fb09 f303 	mul.w	r3, r9, r3
 801091a:	4413      	add	r3, r2
 801091c:	69ba      	ldr	r2, [r7, #24]
 801091e:	fba2 4508 	umull	r4, r5, r2, r8
 8010922:	442b      	add	r3, r5
 8010924:	461d      	mov	r5, r3
 8010926:	e9c7 4506 	strd	r4, r5, [r7, #24]
 801092a:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 801092e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010932:	f04f 0200 	mov.w	r2, #0
 8010936:	f04f 0300 	mov.w	r3, #0
 801093a:	0b02      	lsrs	r2, r0, #12
 801093c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8010940:	0b0b      	lsrs	r3, r1, #12
 8010942:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 8010946:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801094a:	2b01      	cmp	r3, #1
 801094c:	d305      	bcc.n	801095a <VL53L1_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 801094e:	f04f 32ff 	mov.w	r2, #4294967295
 8010952:	f04f 0300 	mov.w	r3, #0
 8010956:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 801095a:	69bb      	ldr	r3, [r7, #24]
 801095c:	617b      	str	r3, [r7, #20]

	return duration_us;
 801095e:	697b      	ldr	r3, [r7, #20]
}
 8010960:	4618      	mov	r0, r3
 8010962:	3724      	adds	r7, #36	; 0x24
 8010964:	46bd      	mov	sp, r7
 8010966:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801096a:	4770      	bx	lr

0801096c <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 801096c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010970:	b096      	sub	sp, #88	; 0x58
 8010972:	af00      	add	r7, sp, #0
 8010974:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010976:	460b      	mov	r3, r1
 8010978:	627a      	str	r2, [r7, #36]	; 0x24
 801097a:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 801097c:	f04f 0200 	mov.w	r2, #0
 8010980:	f04f 0300 	mov.w	r3, #0
 8010984:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 8010988:	f04f 0200 	mov.w	r2, #0
 801098c:	f04f 0300 	mov.w	r3, #0
 8010990:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 8010994:	2300      	movs	r3, #0
 8010996:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53L1_p_013
 8010998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801099a:	17da      	asrs	r2, r3, #31
 801099c:	469a      	mov	sl, r3
 801099e:	4693      	mov	fp, r2
 80109a0:	4652      	mov	r2, sl
 80109a2:	465b      	mov	r3, fp
 80109a4:	f04f 0000 	mov.w	r0, #0
 80109a8:	f04f 0100 	mov.w	r1, #0
 80109ac:	0159      	lsls	r1, r3, #5
 80109ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80109b2:	0150      	lsls	r0, r2, #5
 80109b4:	4602      	mov	r2, r0
 80109b6:	460b      	mov	r3, r1
 80109b8:	ebb2 040a 	subs.w	r4, r2, sl
 80109bc:	eb63 050b 	sbc.w	r5, r3, fp
 80109c0:	f04f 0200 	mov.w	r2, #0
 80109c4:	f04f 0300 	mov.w	r3, #0
 80109c8:	00ab      	lsls	r3, r5, #2
 80109ca:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80109ce:	00a2      	lsls	r2, r4, #2
 80109d0:	4614      	mov	r4, r2
 80109d2:	461d      	mov	r5, r3
 80109d4:	eb14 080a 	adds.w	r8, r4, sl
 80109d8:	eb45 090b 	adc.w	r9, r5, fp
 80109dc:	f04f 0200 	mov.w	r2, #0
 80109e0:	f04f 0300 	mov.w	r3, #0
 80109e4:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 80109e8:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 80109ec:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 80109f0:	4690      	mov	r8, r2
 80109f2:	4699      	mov	r9, r3
 80109f4:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 80109f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d00d      	beq.n	8010a1a <VL53L1_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 80109fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a00:	2200      	movs	r2, #0
 8010a02:	61bb      	str	r3, [r7, #24]
 8010a04:	61fa      	str	r2, [r7, #28]
 8010a06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010a0a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8010a0e:	f7ef fee1 	bl	80007d4 <__aeabi_uldivmod>
 8010a12:	4602      	mov	r2, r0
 8010a14:	460b      	mov	r3, r1
 8010a16:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 8010a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d02a      	beq.n	8010a76 <VL53L1_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 8010a20:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010a24:	f04f 0200 	mov.w	r2, #0
 8010a28:	f04f 0300 	mov.w	r3, #0
 8010a2c:	02cb      	lsls	r3, r1, #11
 8010a2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010a32:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 8010a34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a36:	0849      	lsrs	r1, r1, #1
 8010a38:	2000      	movs	r0, #0
 8010a3a:	6139      	str	r1, [r7, #16]
 8010a3c:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 8010a3e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010a42:	4621      	mov	r1, r4
 8010a44:	1851      	adds	r1, r2, r1
 8010a46:	6039      	str	r1, [r7, #0]
 8010a48:	4629      	mov	r1, r5
 8010a4a:	eb43 0101 	adc.w	r1, r3, r1
 8010a4e:	6079      	str	r1, [r7, #4]
 8010a50:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010a54:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 8010a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	60bb      	str	r3, [r7, #8]
 8010a5e:	60fa      	str	r2, [r7, #12]
 8010a60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010a64:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8010a68:	f7ef feb4 	bl	80007d4 <__aeabi_uldivmod>
 8010a6c:	4602      	mov	r2, r0
 8010a6e:	460b      	mov	r3, r1
 8010a70:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8010a74:	e00b      	b.n	8010a8e <VL53L1_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 8010a76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010a7a:	f04f 0200 	mov.w	r2, #0
 8010a7e:	f04f 0300 	mov.w	r3, #0
 8010a82:	02cb      	lsls	r3, r1, #11
 8010a84:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010a88:	02c2      	lsls	r2, r0, #11
 8010a8a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 8010a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a90:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 8010a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3758      	adds	r7, #88	; 0x58
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010a9e <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 8010a9e:	b480      	push	{r7}
 8010aa0:	b085      	sub	sp, #20
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8010aaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010aae:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 8010ab0:	e002      	b.n	8010ab8 <VL53L1_isqrt+0x1a>
		bit >>= 2;
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	089b      	lsrs	r3, r3, #2
 8010ab6:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8010ab8:	68ba      	ldr	r2, [r7, #8]
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d8f8      	bhi.n	8010ab2 <VL53L1_isqrt+0x14>

	while (bit != 0) {
 8010ac0:	e017      	b.n	8010af2 <VL53L1_isqrt+0x54>
		if (num >= res + bit)  {
 8010ac2:	68fa      	ldr	r2, [r7, #12]
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	4413      	add	r3, r2
 8010ac8:	687a      	ldr	r2, [r7, #4]
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d30b      	bcc.n	8010ae6 <VL53L1_isqrt+0x48>
			num -= res + bit;
 8010ace:	68fa      	ldr	r2, [r7, #12]
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	4413      	add	r3, r2
 8010ad4:	687a      	ldr	r2, [r7, #4]
 8010ad6:	1ad3      	subs	r3, r2, r3
 8010ad8:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	085b      	lsrs	r3, r3, #1
 8010ade:	68ba      	ldr	r2, [r7, #8]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	60fb      	str	r3, [r7, #12]
 8010ae4:	e002      	b.n	8010aec <VL53L1_isqrt+0x4e>
		} else {
			res >>= 1;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	085b      	lsrs	r3, r3, #1
 8010aea:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	089b      	lsrs	r3, r3, #2
 8010af0:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d1e4      	bne.n	8010ac2 <VL53L1_isqrt+0x24>
	}

	return res;
 8010af8:	68fb      	ldr	r3, [r7, #12]
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3714      	adds	r7, #20
 8010afe:	46bd      	mov	sp, r7
 8010b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b04:	4770      	bx	lr

08010b06 <VL53L1_hist_calc_zero_distance_phase>:


void  VL53L1_hist_calc_zero_distance_phase(
	VL53L1_histogram_bin_data_t   *pdata)
{
 8010b06:	b580      	push	{r7, lr}
 8010b08:	b084      	sub	sp, #16
 8010b0a:	af00      	add	r7, sp, #0
 8010b0c:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53L1_p_017         = 0;
 8010b12:	2300      	movs	r3, #0
 8010b14:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f000 faa5 	bl	801106c <VL53L1_decode_vcsel_period>
 8010b22:	4603      	mov	r3, r0
	period = 2048 *
 8010b24:	02db      	lsls	r3, r3, #11
 8010b26:	60bb      	str	r3, [r7, #8]

	VL53L1_p_017  = period;
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8010b32:	461a      	mov	r2, r3
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	4413      	add	r3, r2
 8010b38:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010b40:	02db      	lsls	r3, r3, #11
 8010b42:	68fa      	ldr	r2, [r7, #12]
 8010b44:	4413      	add	r3, r2
 8010b46:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010b4e:	02db      	lsls	r3, r3, #11
 8010b50:	68fa      	ldr	r2, [r7, #12]
 8010b52:	1ad3      	subs	r3, r2, r3
 8010b54:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 8010b56:	68bb      	ldr	r3, [r7, #8]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d009      	beq.n	8010b70 <VL53L1_hist_calc_zero_distance_phase+0x6a>
		VL53L1_p_017  = VL53L1_p_017 % period;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	68ba      	ldr	r2, [r7, #8]
 8010b60:	fbb3 f2f2 	udiv	r2, r3, r2
 8010b64:	68b9      	ldr	r1, [r7, #8]
 8010b66:	fb01 f202 	mul.w	r2, r1, r2
 8010b6a:	1a9b      	subs	r3, r3, r2
 8010b6c:	60fb      	str	r3, [r7, #12]
 8010b6e:	e001      	b.n	8010b74 <VL53L1_hist_calc_zero_distance_phase+0x6e>
	else
		VL53L1_p_017 = 0;
 8010b70:	2300      	movs	r3, #0
 8010b72:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	b29a      	uxth	r2, r3
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 8010b7e:	bf00      	nop
 8010b80:	3710      	adds	r7, #16
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <VL53L1_hist_estimate_ambient_from_thresholded_bins>:


void  VL53L1_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53L1_histogram_bin_data_t   *pdata)
{
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b084      	sub	sp, #16
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6078      	str	r0, [r7, #4]
 8010b8e:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 8010b90:	2300      	movs	r3, #0
 8010b92:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53L1_p_032 = 0;
 8010b94:	2300      	movs	r3, #0
 8010b96:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53L1_hist_find_min_max_bin_values(pdata);
 8010b98:	6838      	ldr	r0, [r7, #0]
 8010b9a:	f000 fb90 	bl	80112be <VL53L1_hist_find_min_max_bin_values>



	VL53L1_p_032  =
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7ff ff7a 	bl	8010a9e <VL53L1_isqrt>
 8010baa:	4603      	mov	r3, r0
	VL53L1_p_032  =
 8010bac:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 *= ambient_threshold_sigma;
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	687a      	ldr	r2, [r7, #4]
 8010bb2:	fb02 f303 	mul.w	r3, r2, r3
 8010bb6:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += 0x07;
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	3307      	adds	r3, #7
 8010bbc:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032  = VL53L1_p_032 >> 4;
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	111b      	asrs	r3, r3, #4
 8010bc2:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += pdata->min_bin_value;
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010bca:	68ba      	ldr	r2, [r7, #8]
 8010bcc:	4413      	add	r3, r2
 8010bce:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	2200      	movs	r2, #0
 8010bdc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 8010be0:	2300      	movs	r3, #0
 8010be2:	73fb      	strb	r3, [r7, #15]
 8010be4:	e01e      	b.n	8010c24 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 8010be6:	7bfa      	ldrb	r2, [r7, #15]
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	3206      	adds	r2, #6
 8010bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bf0:	68ba      	ldr	r2, [r7, #8]
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	dd13      	ble.n	8010c1e <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8010bfc:	7bf9      	ldrb	r1, [r7, #15]
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	3106      	adds	r1, #6
 8010c02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010c06:	441a      	add	r2, r3
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8010c14:	3301      	adds	r3, #1
 8010c16:	b2da      	uxtb	r2, r3
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 8010c1e:	7bfb      	ldrb	r3, [r7, #15]
 8010c20:	3301      	adds	r3, #1
 8010c22:	73fb      	strb	r3, [r7, #15]
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	7a9b      	ldrb	r3, [r3, #10]
 8010c28:	7bfa      	ldrb	r2, [r7, #15]
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	d3db      	bcc.n	8010be6 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d01c      	beq.n	8010c72 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53L1_p_004 =
			pdata->ambient_events_sum;
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53L1_p_004 =
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 8010c4a:	683a      	ldr	r2, [r7, #0]
 8010c4c:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 8010c50:	0852      	lsrs	r2, r2, #1
 8010c52:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 8010c54:	441a      	add	r2, r3
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 8010c62:	683a      	ldr	r2, [r7, #0]
 8010c64:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53L1_p_004 /=
 8010c68:	fb93 f2f2 	sdiv	r2, r3, r2
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 8010c72:	bf00      	nop
 8010c74:	3710      	adds	r7, #16
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}

08010c7a <VL53L1_hist_remove_ambient_bins>:


void  VL53L1_hist_remove_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 8010c7a:	b480      	push	{r7}
 8010c7c:	b085      	sub	sp, #20
 8010c7e:	af00      	add	r7, sp, #0
 8010c80:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 8010c82:	2300      	movs	r3, #0
 8010c84:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 8010c86:	2300      	movs	r3, #0
 8010c88:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	7b1b      	ldrb	r3, [r3, #12]
 8010c92:	f003 0307 	and.w	r3, r3, #7
 8010c96:	2b07      	cmp	r3, #7
 8010c98:	d13a      	bne.n	8010d10 <VL53L1_hist_remove_ambient_bins+0x96>

		i = 0;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	73bb      	strb	r3, [r7, #14]
 8010ca2:	e01f      	b.n	8010ce4 <VL53L1_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 8010ca4:	7bbb      	ldrb	r3, [r7, #14]
 8010ca6:	687a      	ldr	r2, [r7, #4]
 8010ca8:	4413      	add	r3, r2
 8010caa:	7b1b      	ldrb	r3, [r3, #12]
 8010cac:	f003 0307 	and.w	r3, r3, #7
 8010cb0:	2b07      	cmp	r3, #7
 8010cb2:	d014      	beq.n	8010cde <VL53L1_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 8010cb4:	7bba      	ldrb	r2, [r7, #14]
 8010cb6:	7b7b      	ldrb	r3, [r7, #13]
 8010cb8:	6879      	ldr	r1, [r7, #4]
 8010cba:	440a      	add	r2, r1
 8010cbc:	7b11      	ldrb	r1, [r2, #12]
 8010cbe:	687a      	ldr	r2, [r7, #4]
 8010cc0:	4413      	add	r3, r2
 8010cc2:	460a      	mov	r2, r1
 8010cc4:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 8010cc6:	7bba      	ldrb	r2, [r7, #14]
 8010cc8:	7b7b      	ldrb	r3, [r7, #13]
 8010cca:	6879      	ldr	r1, [r7, #4]
 8010ccc:	440a      	add	r2, r1
 8010cce:	7c91      	ldrb	r1, [r2, #18]
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	4413      	add	r3, r2
 8010cd4:	460a      	mov	r2, r1
 8010cd6:	749a      	strb	r2, [r3, #18]
				i++;
 8010cd8:	7b7b      	ldrb	r3, [r7, #13]
 8010cda:	3301      	adds	r3, #1
 8010cdc:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8010cde:	7bbb      	ldrb	r3, [r7, #14]
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	73bb      	strb	r3, [r7, #14]
 8010ce4:	7bbb      	ldrb	r3, [r7, #14]
 8010ce6:	2b05      	cmp	r3, #5
 8010ce8:	d9dc      	bls.n	8010ca4 <VL53L1_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8010cea:	7b7b      	ldrb	r3, [r7, #13]
 8010cec:	73bb      	strb	r3, [r7, #14]
 8010cee:	e00c      	b.n	8010d0a <VL53L1_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 8010cf0:	7bbb      	ldrb	r3, [r7, #14]
 8010cf2:	687a      	ldr	r2, [r7, #4]
 8010cf4:	4413      	add	r3, r2
 8010cf6:	2210      	movs	r2, #16
 8010cf8:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 8010cfa:	7bbb      	ldrb	r3, [r7, #14]
 8010cfc:	687a      	ldr	r2, [r7, #4]
 8010cfe:	4413      	add	r3, r2
 8010d00:	2200      	movs	r2, #0
 8010d02:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8010d04:	7bbb      	ldrb	r3, [r7, #14]
 8010d06:	3301      	adds	r3, #1
 8010d08:	73bb      	strb	r3, [r7, #14]
 8010d0a:	7bbb      	ldrb	r3, [r7, #14]
 8010d0c:	2b05      	cmp	r3, #5
 8010d0e:	d9ef      	bls.n	8010cf0 <VL53L1_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	7adb      	ldrb	r3, [r3, #11]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d023      	beq.n	8010d60 <VL53L1_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	7adb      	ldrb	r3, [r3, #11]
 8010d1c:	73fb      	strb	r3, [r7, #15]
 8010d1e:	e00f      	b.n	8010d40 <VL53L1_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53L1_p_023; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 8010d20:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 8010d22:	7bfb      	ldrb	r3, [r7, #15]
 8010d24:	687a      	ldr	r2, [r7, #4]
 8010d26:	7ad2      	ldrb	r2, [r2, #11]
 8010d28:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	3106      	adds	r1, #6
 8010d2e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	3206      	adds	r2, #6
 8010d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53L1_p_023; bin++) {
 8010d3a:	7bfb      	ldrb	r3, [r7, #15]
 8010d3c:	3301      	adds	r3, #1
 8010d3e:	73fb      	strb	r3, [r7, #15]
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 8010d44:	7bfa      	ldrb	r2, [r7, #15]
 8010d46:	429a      	cmp	r2, r3
 8010d48:	d3ea      	bcc.n	8010d20 <VL53L1_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53L1_p_024 =
				pdata->VL53L1_p_024 -
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53L1_p_024 -
 8010d52:	1ad3      	subs	r3, r2, r3
 8010d54:	b2da      	uxtb	r2, r3
		pdata->VL53L1_p_024 =
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	72da      	strb	r2, [r3, #11]
	}
}
 8010d60:	bf00      	nop
 8010d62:	3714      	adds	r7, #20
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr

08010d6c <VL53L1_calc_pll_period_mm>:


uint32_t VL53L1_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b084      	sub	sp, #16
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	4603      	mov	r3, r0
 8010d74:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 8010d76:	2300      	movs	r3, #0
 8010d78:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8010d7e:	88fb      	ldrh	r3, [r7, #6]
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7ff fd83 	bl	801088c <VL53L1_calc_pll_period_us>
 8010d86:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 8010d8c:	f249 2257 	movw	r2, #37463	; 0x9257
 8010d90:	fb02 f303 	mul.w	r3, r2, r3
 8010d94:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010d9c:	0c1b      	lsrs	r3, r3, #16
 8010d9e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 8010da0:	68bb      	ldr	r3, [r7, #8]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3710      	adds	r7, #16
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}

08010daa <VL53L1_rate_maths>:


uint16_t VL53L1_rate_maths(
	int32_t   VL53L1_p_008,
	uint32_t  time_us)
{
 8010daa:	b480      	push	{r7}
 8010dac:	b087      	sub	sp, #28
 8010dae:	af00      	add	r7, sp, #0
 8010db0:	6078      	str	r0, [r7, #4]
 8010db2:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 8010db4:	2300      	movs	r3, #0
 8010db6:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 8010db8:	2307      	movs	r3, #7
 8010dba:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	81fb      	strh	r3, [r7, #14]



	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010dc6:	db03      	blt.n	8010dd0 <VL53L1_rate_maths+0x26>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 8010dc8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8010dcc:	617b      	str	r3, [r7, #20]
 8010dce:	e004      	b.n	8010dda <VL53L1_rate_maths+0x30>
	else if (VL53L1_p_008 > 0)
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	dd01      	ble.n	8010dda <VL53L1_rate_maths+0x30>
		tmp_int = (uint32_t)VL53L1_p_008;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	617b      	str	r3, [r7, #20]




	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010de0:	dd02      	ble.n	8010de8 <VL53L1_rate_maths+0x3e>
		frac_bits = 3;
 8010de2:	2303      	movs	r3, #3
 8010de4:	613b      	str	r3, [r7, #16]
 8010de6:	e001      	b.n	8010dec <VL53L1_rate_maths+0x42>
	else
		frac_bits = 7;
 8010de8:	2307      	movs	r3, #7
 8010dea:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d009      	beq.n	8010e06 <VL53L1_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 8010df2:	697a      	ldr	r2, [r7, #20]
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	409a      	lsls	r2, r3
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	085b      	lsrs	r3, r3, #1
 8010dfc:	441a      	add	r2, r3
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e04:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010e0c:	dd02      	ble.n	8010e14 <VL53L1_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	011b      	lsls	r3, r3, #4
 8010e12:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 8010e14:	697b      	ldr	r3, [r7, #20]
 8010e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e1a:	d302      	bcc.n	8010e22 <VL53L1_rate_maths+0x78>
		tmp_int = 0xFFFF;
 8010e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010e20:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 8010e26:	89fb      	ldrh	r3, [r7, #14]
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	371c      	adds	r7, #28
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e32:	4770      	bx	lr

08010e34 <VL53L1_rate_per_spad_maths>:
uint16_t VL53L1_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b087      	sub	sp, #28
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	60f8      	str	r0, [r7, #12]
 8010e3c:	60b9      	str	r1, [r7, #8]
 8010e3e:	603b      	str	r3, [r7, #0]
 8010e40:	4613      	mov	r3, r2
 8010e42:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 8010e44:	2300      	movs	r3, #0
 8010e46:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 8010e48:	2300      	movs	r3, #0
 8010e4a:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 8010e4c:	88fb      	ldrh	r3, [r7, #6]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d010      	beq.n	8010e74 <VL53L1_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 8010e52:	68bb      	ldr	r3, [r7, #8]
 8010e54:	021a      	lsls	r2, r3, #8
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	fa02 f303 	lsl.w	r3, r2, r3
 8010e5c:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 8010e5e:	88fb      	ldrh	r3, [r7, #6]
 8010e60:	085b      	lsrs	r3, r3, #1
 8010e62:	b29b      	uxth	r3, r3
 8010e64:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	441a      	add	r2, r3
				(uint32_t)num_spads;
 8010e6a:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 8010e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e70:	617b      	str	r3, [r7, #20]
 8010e72:	e004      	b.n	8010e7e <VL53L1_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 8010e74:	68ba      	ldr	r2, [r7, #8]
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	fa02 f303 	lsl.w	r3, r2, r3
 8010e7c:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 8010e7e:	697a      	ldr	r2, [r7, #20]
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d901      	bls.n	8010e8a <VL53L1_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 8010e8e:	8a7b      	ldrh	r3, [r7, #18]
}
 8010e90:	4618      	mov	r0, r3
 8010e92:	371c      	adds	r7, #28
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr

08010e9c <VL53L1_range_maths>:
	uint16_t  VL53L1_p_017,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 8010e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea0:	b093      	sub	sp, #76	; 0x4c
 8010ea2:	af00      	add	r7, sp, #0
 8010ea4:	461e      	mov	r6, r3
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010eaa:	460b      	mov	r3, r1
 8010eac:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010eae:	4613      	mov	r3, r2
 8010eb0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010eb2:	4633      	mov	r3, r6
 8010eb4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 8010ebc:	f04f 0200 	mov.w	r2, #0
 8010ec0:	f04f 0300 	mov.w	r3, #0
 8010ec4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8010ed0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7ff fcda 	bl	801088c <VL53L1_calc_pll_period_us>
 8010ed8:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 8010eda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010edc:	2200      	movs	r2, #0
 8010ede:	623b      	str	r3, [r7, #32]
 8010ee0:	627a      	str	r2, [r7, #36]	; 0x24
 8010ee2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	61bb      	str	r3, [r7, #24]
 8010ee8:	61fa      	str	r2, [r7, #28]
 8010eea:	6a3b      	ldr	r3, [r7, #32]
 8010eec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	1a9b      	subs	r3, r3, r2
 8010ef4:	613b      	str	r3, [r7, #16]
 8010ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef8:	460a      	mov	r2, r1
 8010efa:	eb63 0302 	sbc.w	r3, r3, r2
 8010efe:	617b      	str	r3, [r7, #20]
 8010f00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010f04:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 8010f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	469a      	mov	sl, r3
 8010f0e:	4693      	mov	fp, r2
 8010f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f12:	fb0a f203 	mul.w	r2, sl, r3
 8010f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f18:	fb0b f303 	mul.w	r3, fp, r3
 8010f1c:	4413      	add	r3, r2
 8010f1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f20:	fba2 890a 	umull	r8, r9, r2, sl
 8010f24:	444b      	add	r3, r9
 8010f26:	4699      	mov	r9, r3
 8010f28:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 8010f2c:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 8010f30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	da08      	bge.n	8010f4a <VL53L1_range_maths+0xae>
 8010f38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010f3c:	1851      	adds	r1, r2, r1
 8010f3e:	60b9      	str	r1, [r7, #8]
 8010f40:	f143 0300 	adc.w	r3, r3, #0
 8010f44:	60fb      	str	r3, [r7, #12]
 8010f46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010f4a:	f04f 0000 	mov.w	r0, #0
 8010f4e:	f04f 0100 	mov.w	r1, #0
 8010f52:	0a50      	lsrs	r0, r2, #9
 8010f54:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8010f58:	1259      	asrs	r1, r3, #9
 8010f5a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 8010f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f60:	f249 2257 	movw	r2, #37463	; 0x9257
 8010f64:	fb03 f202 	mul.w	r2, r3, r2
 8010f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f6a:	2100      	movs	r1, #0
 8010f6c:	fb01 f303 	mul.w	r3, r1, r3
 8010f70:	4413      	add	r3, r2
 8010f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f74:	f249 2157 	movw	r1, #37463	; 0x9257
 8010f78:	fba2 4501 	umull	r4, r5, r2, r1
 8010f7c:	442b      	add	r3, r5
 8010f7e:	461d      	mov	r5, r3
 8010f80:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 8010f84:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 8010f88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	da07      	bge.n	8010fa0 <VL53L1_range_maths+0x104>
 8010f90:	4934      	ldr	r1, [pc, #208]	; (8011064 <VL53L1_range_maths+0x1c8>)
 8010f92:	1851      	adds	r1, r2, r1
 8010f94:	6039      	str	r1, [r7, #0]
 8010f96:	f143 0300 	adc.w	r3, r3, #0
 8010f9a:	607b      	str	r3, [r7, #4]
 8010f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fa0:	f04f 0000 	mov.w	r0, #0
 8010fa4:	f04f 0100 	mov.w	r1, #0
 8010fa8:	0d90      	lsrs	r0, r2, #22
 8010faa:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 8010fae:	1599      	asrs	r1, r3, #22
 8010fb0:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 8010fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010fb8:	4413      	add	r3, r2
 8010fba:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 8010fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fbe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010fc0:	fb02 f303 	mul.w	r3, r2, r3
 8010fc4:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 8010fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010fcc:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 8010fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	da01      	bge.n	8010fd8 <VL53L1_range_maths+0x13c>
 8010fd4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8010fd8:	12db      	asrs	r3, r3, #11
 8010fda:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 8010fdc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d130      	bne.n	8011046 <VL53L1_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 8010fe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fe6:	4613      	mov	r3, r2
 8010fe8:	009b      	lsls	r3, r3, #2
 8010fea:	4413      	add	r3, r2
 8010fec:	005b      	lsls	r3, r3, #1
 8010fee:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 8010ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	da00      	bge.n	8010ff8 <VL53L1_range_maths+0x15c>
 8010ff6:	3303      	adds	r3, #3
 8010ff8:	109b      	asrs	r3, r3, #2
 8010ffa:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 8010ffc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010ffe:	4b1a      	ldr	r3, [pc, #104]	; (8011068 <VL53L1_range_maths+0x1cc>)
 8011000:	fb83 2301 	smull	r2, r3, r3, r1
 8011004:	109a      	asrs	r2, r3, #2
 8011006:	17cb      	asrs	r3, r1, #31
 8011008:	1ad2      	subs	r2, r2, r3
 801100a:	4613      	mov	r3, r2
 801100c:	009b      	lsls	r3, r3, #2
 801100e:	4413      	add	r3, r2
 8011010:	005b      	lsls	r3, r3, #1
 8011012:	1aca      	subs	r2, r1, r3
 8011014:	2a04      	cmp	r2, #4
 8011016:	dc09      	bgt.n	801102c <VL53L1_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 8011018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801101a:	4a13      	ldr	r2, [pc, #76]	; (8011068 <VL53L1_range_maths+0x1cc>)
 801101c:	fb82 1203 	smull	r1, r2, r2, r3
 8011020:	1092      	asrs	r2, r2, #2
 8011022:	17db      	asrs	r3, r3, #31
 8011024:	1ad3      	subs	r3, r2, r3
 8011026:	b21b      	sxth	r3, r3
 8011028:	647b      	str	r3, [r7, #68]	; 0x44
 801102a:	e015      	b.n	8011058 <VL53L1_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 801102c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801102e:	4a0e      	ldr	r2, [pc, #56]	; (8011068 <VL53L1_range_maths+0x1cc>)
 8011030:	fb82 1203 	smull	r1, r2, r2, r3
 8011034:	1092      	asrs	r2, r2, #2
 8011036:	17db      	asrs	r3, r3, #31
 8011038:	1ad3      	subs	r3, r2, r3
 801103a:	b29b      	uxth	r3, r3
 801103c:	3301      	adds	r3, #1
 801103e:	b29b      	uxth	r3, r3
 8011040:	b21b      	sxth	r3, r3
 8011042:	647b      	str	r3, [r7, #68]	; 0x44
 8011044:	e008      	b.n	8011058 <VL53L1_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 8011046:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801104a:	2b01      	cmp	r3, #1
 801104c:	d104      	bne.n	8011058 <VL53L1_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 801104e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011050:	0fda      	lsrs	r2, r3, #31
 8011052:	4413      	add	r3, r2
 8011054:	105b      	asrs	r3, r3, #1
 8011056:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 8011058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801105a:	4618      	mov	r0, r3
 801105c:	374c      	adds	r7, #76	; 0x4c
 801105e:	46bd      	mov	sp, r7
 8011060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011064:	003fffff 	.word	0x003fffff
 8011068:	66666667 	.word	0x66666667

0801106c <VL53L1_decode_vcsel_period>:


uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 801106c:	b480      	push	{r7}
 801106e:	b085      	sub	sp, #20
 8011070:	af00      	add	r7, sp, #0
 8011072:	4603      	mov	r3, r0
 8011074:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53L1_p_031 = 0;
 8011076:	2300      	movs	r3, #0
 8011078:	73fb      	strb	r3, [r7, #15]

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 801107a:	79fb      	ldrb	r3, [r7, #7]
 801107c:	3301      	adds	r3, #1
 801107e:	b2db      	uxtb	r3, r3
 8011080:	005b      	lsls	r3, r3, #1
 8011082:	73fb      	strb	r3, [r7, #15]

	return VL53L1_p_031;
 8011084:	7bfb      	ldrb	r3, [r7, #15]
}
 8011086:	4618      	mov	r0, r3
 8011088:	3714      	adds	r7, #20
 801108a:	46bd      	mov	sp, r7
 801108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011090:	4770      	bx	lr

08011092 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53L1_xtalk_histogram_shape_t *pxtalk,
		VL53L1_histogram_bin_data_t    *phist)
{
 8011092:	b480      	push	{r7}
 8011094:	b083      	sub	sp, #12
 8011096:	af00      	add	r7, sp, #0
 8011098:	6078      	str	r0, [r7, #4]
 801109a:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53L1_p_019 =
			pxtalk->VL53L1_p_019;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53L1_p_019 =
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53L1_p_022 =
			pxtalk->VL53L1_p_022;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53L1_p_022 =
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	781a      	ldrb	r2, [r3, #0]
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	709a      	strb	r2, [r3, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	7a5a      	ldrb	r2, [r3, #9]
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	685a      	ldr	r2, [r3, #4]
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	605a      	str	r2, [r3, #4]
}
 8011102:	bf00      	nop
 8011104:	370c      	adds	r7, #12
 8011106:	46bd      	mov	sp, r7
 8011108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110c:	4770      	bx	lr

0801110e <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 801110e:	b480      	push	{r7}
 8011110:	b087      	sub	sp, #28
 8011112:	af00      	add	r7, sp, #0
 8011114:	60f8      	str	r0, [r7, #12]
 8011116:	460b      	mov	r3, r1
 8011118:	607a      	str	r2, [r7, #4]
 801111a:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 801111c:	2300      	movs	r3, #0
 801111e:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2203      	movs	r2, #3
 8011124:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2203      	movs	r2, #3
 801112a:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2200      	movs	r2, #0
 8011130:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2200      	movs	r2, #0
 8011136:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2200      	movs	r2, #0
 801113c:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_HISTOGRAM_BUFFER_SIZE;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2218      	movs	r2, #24
 8011142:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 8011144:	897b      	ldrh	r3, [r7, #10]
 8011146:	b2da      	uxtb	r2, r3
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2200      	movs	r2, #0
 8011150:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2200      	movs	r2, #0
 8011156:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2200      	movs	r2, #0
 801115e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2200      	movs	r2, #0
 8011166:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	2200      	movs	r2, #0
 801116e:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2200      	movs	r2, #0
 8011176:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2200      	movs	r2, #0
 801117e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2200      	movs	r2, #0
 8011186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2200      	movs	r2, #0
 801118e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2200      	movs	r2, #0
 8011196:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53L1_p_009                       = 0;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2200      	movs	r2, #0
 801119e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53L1_p_019                = 0;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2200      	movs	r2, #0
 80111a6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2200      	movs	r2, #0
 80111ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2200      	movs	r2, #0
 80111b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2200      	movs	r2, #0
 80111be:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2200      	movs	r2, #0
 80111c6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2200      	movs	r2, #0
 80111ce:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2200      	movs	r2, #0
 80111d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53L1_p_004             = 0;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2200      	movs	r2, #0
 80111de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 80111e2:	2300      	movs	r3, #0
 80111e4:	82fb      	strh	r3, [r7, #22]
 80111e6:	e009      	b.n	80111fc <VL53L1_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 80111e8:	8afb      	ldrh	r3, [r7, #22]
 80111ea:	8afa      	ldrh	r2, [r7, #22]
 80111ec:	b2d1      	uxtb	r1, r2
 80111ee:	687a      	ldr	r2, [r7, #4]
 80111f0:	4413      	add	r3, r2
 80111f2:	460a      	mov	r2, r1
 80111f4:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 80111f6:	8afb      	ldrh	r3, [r7, #22]
 80111f8:	3301      	adds	r3, #1
 80111fa:	82fb      	strh	r3, [r7, #22]
 80111fc:	8afb      	ldrh	r3, [r7, #22]
 80111fe:	2b05      	cmp	r3, #5
 8011200:	d9f2      	bls.n	80111e8 <VL53L1_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 8011202:	2300      	movs	r3, #0
 8011204:	82fb      	strh	r3, [r7, #22]
 8011206:	e007      	b.n	8011218 <VL53L1_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 8011208:	8afb      	ldrh	r3, [r7, #22]
 801120a:	687a      	ldr	r2, [r7, #4]
 801120c:	4413      	add	r3, r2
 801120e:	2201      	movs	r2, #1
 8011210:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 8011212:	8afb      	ldrh	r3, [r7, #22]
 8011214:	3301      	adds	r3, #1
 8011216:	82fb      	strh	r3, [r7, #22]
 8011218:	8afb      	ldrh	r3, [r7, #22]
 801121a:	2b05      	cmp	r3, #5
 801121c:	d9f4      	bls.n	8011208 <VL53L1_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 801121e:	2300      	movs	r3, #0
 8011220:	82fb      	strh	r3, [r7, #22]
 8011222:	e013      	b.n	801124c <VL53L1_init_histogram_bin_data_struct+0x13e>
		if (i < VL53L1_p_024)
 8011224:	8afa      	ldrh	r2, [r7, #22]
 8011226:	897b      	ldrh	r3, [r7, #10]
 8011228:	429a      	cmp	r2, r3
 801122a:	d206      	bcs.n	801123a <VL53L1_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 801122c:	8afa      	ldrh	r2, [r7, #22]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	3206      	adds	r2, #6
 8011232:	68f9      	ldr	r1, [r7, #12]
 8011234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011238:	e005      	b.n	8011246 <VL53L1_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 801123a:	8afa      	ldrh	r2, [r7, #22]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	3206      	adds	r2, #6
 8011240:	2100      	movs	r1, #0
 8011242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 8011246:	8afb      	ldrh	r3, [r7, #22]
 8011248:	3301      	adds	r3, #1
 801124a:	82fb      	strh	r3, [r7, #22]
 801124c:	8afb      	ldrh	r3, [r7, #22]
 801124e:	2b17      	cmp	r3, #23
 8011250:	d9e8      	bls.n	8011224 <VL53L1_init_histogram_bin_data_struct+0x116>


}
 8011252:	bf00      	nop
 8011254:	bf00      	nop
 8011256:	371c      	adds	r7, #28
 8011258:	46bd      	mov	sp, r7
 801125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125e:	4770      	bx	lr

08011260 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 8011260:	b480      	push	{r7}
 8011262:	b085      	sub	sp, #20
 8011264:	af00      	add	r7, sp, #0
 8011266:	4603      	mov	r3, r0
 8011268:	60b9      	str	r1, [r7, #8]
 801126a:	607a      	str	r2, [r7, #4]
 801126c:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 801126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011272:	2b00      	cmp	r3, #0
 8011274:	da10      	bge.n	8011298 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 8011276:	7bfb      	ldrb	r3, [r7, #15]
 8011278:	43db      	mvns	r3, r3
 801127a:	b2db      	uxtb	r3, r3
 801127c:	f003 0307 	and.w	r3, r3, #7
 8011280:	b2db      	uxtb	r3, r3
 8011282:	3308      	adds	r3, #8
 8011284:	b2da      	uxtb	r2, r3
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 801128a:	7bfb      	ldrb	r3, [r7, #15]
 801128c:	3b80      	subs	r3, #128	; 0x80
 801128e:	10db      	asrs	r3, r3, #3
 8011290:	b2da      	uxtb	r2, r3
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 8011296:	e00c      	b.n	80112b2 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 8011298:	7bfb      	ldrb	r3, [r7, #15]
 801129a:	f003 0307 	and.w	r3, r3, #7
 801129e:	b2da      	uxtb	r2, r3
 80112a0:	68bb      	ldr	r3, [r7, #8]
 80112a2:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 80112a4:	7bfb      	ldrb	r3, [r7, #15]
 80112a6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80112aa:	10db      	asrs	r3, r3, #3
 80112ac:	b2da      	uxtb	r2, r3
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	701a      	strb	r2, [r3, #0]
}
 80112b2:	bf00      	nop
 80112b4:	3714      	adds	r7, #20
 80112b6:	46bd      	mov	sp, r7
 80112b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112bc:	4770      	bx	lr

080112be <VL53L1_hist_find_min_max_bin_values>:


void  VL53L1_hist_find_min_max_bin_values(
	VL53L1_histogram_bin_data_t   *pdata)
{
 80112be:	b480      	push	{r7}
 80112c0:	b085      	sub	sp, #20
 80112c2:	af00      	add	r7, sp, #0
 80112c4:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 80112c6:	2300      	movs	r3, #0
 80112c8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 80112ca:	2300      	movs	r3, #0
 80112cc:	73fb      	strb	r3, [r7, #15]
 80112ce:	e02c      	b.n	801132a <VL53L1_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 80112d0:	7bfb      	ldrb	r3, [r7, #15]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d009      	beq.n	80112ea <VL53L1_hist_find_min_max_bin_values+0x2c>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80112dc:	7bf9      	ldrb	r1, [r7, #15]
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	3106      	adds	r1, #6
 80112e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80112e6:	429a      	cmp	r2, r3
 80112e8:	db07      	blt.n	80112fa <VL53L1_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 80112ea:	7bfa      	ldrb	r2, [r7, #15]
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	3206      	adds	r2, #6
 80112f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 80112fa:	7bfb      	ldrb	r3, [r7, #15]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d009      	beq.n	8011314 <VL53L1_hist_find_min_max_bin_values+0x56>
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8011306:	7bf9      	ldrb	r1, [r7, #15]
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	3106      	adds	r1, #6
 801130c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011310:	429a      	cmp	r2, r3
 8011312:	dc07      	bgt.n	8011324 <VL53L1_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 8011314:	7bfa      	ldrb	r2, [r7, #15]
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	3206      	adds	r2, #6
 801131a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 8011324:	7bfb      	ldrb	r3, [r7, #15]
 8011326:	3301      	adds	r3, #1
 8011328:	73fb      	strb	r3, [r7, #15]
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	7a9b      	ldrb	r3, [r3, #10]
 801132e:	7bfa      	ldrb	r2, [r7, #15]
 8011330:	429a      	cmp	r2, r3
 8011332:	d3cd      	bcc.n	80112d0 <VL53L1_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 8011334:	bf00      	nop
 8011336:	bf00      	nop
 8011338:	3714      	adds	r7, #20
 801133a:	46bd      	mov	sp, r7
 801133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011340:	4770      	bx	lr

08011342 <VL53L1_hist_estimate_ambient_from_ambient_bins>:


void  VL53L1_hist_estimate_ambient_from_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 8011342:	b480      	push	{r7}
 8011344:	b085      	sub	sp, #20
 8011346:	af00      	add	r7, sp, #0
 8011348:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 801134a:	2300      	movs	r3, #0
 801134c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	7adb      	ldrb	r3, [r3, #11]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d03a      	beq.n	80113cc <VL53L1_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2200      	movs	r2, #0
 8011364:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 8011368:	2300      	movs	r3, #0
 801136a:	73fb      	strb	r3, [r7, #15]
 801136c:	e00e      	b.n	801138c <VL53L1_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8011374:	7bf9      	ldrb	r1, [r7, #15]
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	3106      	adds	r1, #6
 801137a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801137e:	441a      	add	r2, r3
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 8011386:	7bfb      	ldrb	r3, [r7, #15]
 8011388:	3301      	adds	r3, #1
 801138a:	73fb      	strb	r3, [r7, #15]
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	7adb      	ldrb	r3, [r3, #11]
 8011390:	7bfa      	ldrb	r2, [r7, #15]
 8011392:	429a      	cmp	r2, r3
 8011394:	d3eb      	bcc.n	801136e <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 80113a8:	687a      	ldr	r2, [r7, #4]
 80113aa:	7ad2      	ldrb	r2, [r2, #11]
 80113ac:	0852      	lsrs	r2, r2, #1
 80113ae:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 80113b0:	441a      	add	r2, r3
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 80113be:	687a      	ldr	r2, [r7, #4]
 80113c0:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53L1_p_004 /=
 80113c2:	fb93 f2f2 	sdiv	r2, r3, r2
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 80113cc:	bf00      	nop
 80113ce:	3714      	adds	r7, #20
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr

080113d8 <VL53L1_f_001>:
	VL53L1_dmax_calibration_data_t	     *pcal,
	VL53L1_hist_gen3_dmax_config_t	     *pcfg,
	VL53L1_histogram_bin_data_t          *pbins,
	VL53L1_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 80113d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80113dc:	b0ca      	sub	sp, #296	; 0x128
 80113de:	af00      	add	r7, sp, #0
 80113e0:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 80113e4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80113e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80113ec:	4603      	mov	r3, r0
 80113ee:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53L1_Error status  = VL53L1_ERROR_NONE;
 80113f2:	2300      	movs	r3, #0
 80113f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 80113f8:	2300      	movs	r3, #0
 80113fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 80113fe:	2300      	movs	r3, #0
 8011400:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 8011404:	2300      	movs	r3, #0
 8011406:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 801140a:	f04f 0200 	mov.w	r2, #0
 801140e:	f04f 0300 	mov.w	r3, #0
 8011412:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 8011416:	2300      	movs	r3, #0
 8011418:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_006     = 0x0000;
 801141c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011420:	2300      	movs	r3, #0
 8011422:	8353      	strh	r3, [r2, #26]
	pdata->VL53L1_p_033 = 0x0000;
 8011424:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011428:	2300      	movs	r3, #0
 801142a:	6153      	str	r3, [r2, #20]
	pdata->VL53L1_p_001          = 0x0000;
 801142c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011430:	2300      	movs	r3, #0
 8011432:	8313      	strh	r3, [r2, #24]
	pdata->VL53L1_p_012    = 0x0000;
 8011434:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011438:	2300      	movs	r3, #0
 801143a:	6113      	str	r3, [r2, #16]
	pdata->VL53L1_p_004     = 0x0000;
 801143c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011440:	2300      	movs	r3, #0
 8011442:	61d3      	str	r3, [r2, #28]
	pdata->VL53L1_p_034 = 0x0000;
 8011444:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011448:	2300      	movs	r3, #0
 801144a:	6213      	str	r3, [r2, #32]
	pdata->VL53L1_p_035             = 0;
 801144c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011450:	2300      	movs	r3, #0
 8011452:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53L1_p_007            = 0;
 8011454:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011458:	2300      	movs	r3, #0
 801145a:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 801145c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8011460:	2300      	movs	r3, #0
 8011462:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53L1_p_019        != 0) &&
 8011464:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011468:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 801146c:	2b00      	cmp	r3, #0
 801146e:	f000 80e1 	beq.w	8011634 <VL53L1_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 8011472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53L1_p_019        != 0) &&
 801147a:	2b00      	cmp	r3, #0
 801147c:	f000 80da 	beq.w	8011634 <VL53L1_f_001+0x25c>



		pll_period_us   =
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 8011480:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011484:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8011488:	4618      	mov	r0, r3
 801148a:	f7ff f9ff 	bl	801088c <VL53L1_calc_pll_period_us>
 801148e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 8011492:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801149a:	3301      	adds	r3, #1
 801149c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53L1_p_036  =
			VL53L1_duration_maths(
 80114a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80114a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80114a8:	2110      	movs	r1, #16
 80114aa:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80114ae:	f7ff fa04 	bl	80108ba <VL53L1_duration_maths>
 80114b2:	4602      	mov	r2, r0
		pdata->VL53L1_p_036  =
 80114b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80114b8:	601a      	str	r2, [r3, #0]
				VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53L1_p_001 =
			VL53L1_rate_maths(
 80114ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80114be:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80114c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	4619      	mov	r1, r3
 80114ca:	4610      	mov	r0, r2
 80114cc:	f7ff fc6d 	bl	8010daa <VL53L1_rate_maths>
 80114d0:	4603      	mov	r3, r0
		pdata->VL53L1_p_001 =
 80114d2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80114d6:	8313      	strh	r3, [r2, #24]
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_033   =
			VL53L1_events_per_spad_maths(
 80114d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80114dc:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 80114e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80114e4:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 80114e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	461a      	mov	r2, r3
 80114f0:	f7ff fa3c 	bl	801096c <VL53L1_events_per_spad_maths>
 80114f4:	4602      	mov	r2, r0
		pdata->VL53L1_p_033   =
 80114f6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80114fa:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 80114fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011500:	8adb      	ldrh	r3, [r3, #22]
 8011502:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011506:	8193      	strh	r3, [r2, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 8011508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801150c:	8adb      	ldrh	r3, [r3, #22]
 801150e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011512:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53L1_p_033 > 0) {
 8011514:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011518:	695b      	ldr	r3, [r3, #20]
 801151a:	2b00      	cmp	r3, #0
 801151c:	f000 808a 	beq.w	8011634 <VL53L1_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 8011520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011524:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 8011526:	b29b      	uxth	r3, r3
 8011528:	2200      	movs	r2, #0
 801152a:	461c      	mov	r4, r3
 801152c:	4615      	mov	r5, r2
 801152e:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 8011532:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8011536:	4622      	mov	r2, r4
 8011538:	462b      	mov	r3, r5
 801153a:	f04f 0000 	mov.w	r0, #0
 801153e:	f04f 0100 	mov.w	r1, #0
 8011542:	0159      	lsls	r1, r3, #5
 8011544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011548:	0150      	lsls	r0, r2, #5
 801154a:	4602      	mov	r2, r0
 801154c:	460b      	mov	r3, r1
 801154e:	ebb2 0804 	subs.w	r8, r2, r4
 8011552:	eb63 0905 	sbc.w	r9, r3, r5
 8011556:	f04f 0200 	mov.w	r2, #0
 801155a:	f04f 0300 	mov.w	r3, #0
 801155e:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8011562:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8011566:	ea4f 0288 	mov.w	r2, r8, lsl #2
 801156a:	4690      	mov	r8, r2
 801156c:	4699      	mov	r9, r3
 801156e:	eb18 0a04 	adds.w	sl, r8, r4
 8011572:	eb49 0b05 	adc.w	fp, r9, r5
 8011576:	f04f 0200 	mov.w	r2, #0
 801157a:	f04f 0300 	mov.w	r3, #0
 801157e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011582:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011586:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801158a:	4692      	mov	sl, r2
 801158c:	469b      	mov	fp, r3
 801158e:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 8011592:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011596:	f04f 0000 	mov.w	r0, #0
 801159a:	f04f 0100 	mov.w	r1, #0
 801159e:	0319      	lsls	r1, r3, #12
 80115a0:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 80115a4:	0310      	lsls	r0, r2, #12
 80115a6:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53L1_p_033/2;
 80115aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80115ae:	695b      	ldr	r3, [r3, #20]
 80115b0:	085b      	lsrs	r3, r3, #1
 80115b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64  += (uint64_t)tmp32;
 80115b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80115ba:	2200      	movs	r2, #0
 80115bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80115c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80115c4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80115c8:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80115cc:	4621      	mov	r1, r4
 80115ce:	1851      	adds	r1, r2, r1
 80115d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80115d2:	4629      	mov	r1, r5
 80115d4:	eb43 0101 	adc.w	r1, r3, r1
 80115d8:	65f9      	str	r1, [r7, #92]	; 0x5c
 80115da:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80115de:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 80115e2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80115e6:	695b      	ldr	r3, [r3, #20]
 80115e8:	2200      	movs	r2, #0
 80115ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80115ee:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80115f2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80115f6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80115fa:	f7ef f8eb 	bl	80007d4 <__aeabi_uldivmod>
 80115fe:	4602      	mov	r2, r0
 8011600:	460b      	mov	r3, r1
 8011602:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53L1_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 8011606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801160a:	8adb      	ldrh	r3, [r3, #22]
 801160c:	b29b      	uxth	r3, r3
 801160e:	2200      	movs	r2, #0
 8011610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011614:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8011618:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801161c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8011620:	4621      	mov	r1, r4
 8011622:	428a      	cmp	r2, r1
 8011624:	4629      	mov	r1, r5
 8011626:	418b      	sbcs	r3, r1
 8011628:	d204      	bcs.n	8011634 <VL53L1_f_001+0x25c>
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 801162a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 801162e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011632:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 8011634:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011638:	881b      	ldrh	r3, [r3, #0]
 801163a:	2b00      	cmp	r3, #0
 801163c:	f000 82e9 	beq.w	8011c12 <VL53L1_f_001+0x83a>
		(pbins->VL53L1_p_019        != 0) &&
 8011640:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011644:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 8011648:	2b00      	cmp	r3, #0
 801164a:	f000 82e2 	beq.w	8011c12 <VL53L1_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 801164e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011652:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53L1_p_019        != 0) &&
 8011654:	2b00      	cmp	r3, #0
 8011656:	f000 82dc 	beq.w	8011c12 <VL53L1_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 801165a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801165e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 8011662:	2b00      	cmp	r3, #0
 8011664:	f000 82d5 	beq.w	8011c12 <VL53L1_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 8011668:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801166c:	885b      	ldrh	r3, [r3, #2]
 801166e:	b29b      	uxth	r3, r3
 8011670:	2200      	movs	r2, #0
 8011672:	653b      	str	r3, [r7, #80]	; 0x50
 8011674:	657a      	str	r2, [r7, #84]	; 0x54
 8011676:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 801167a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 801167e:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8011682:	4622      	mov	r2, r4
 8011684:	462b      	mov	r3, r5
 8011686:	f04f 0000 	mov.w	r0, #0
 801168a:	f04f 0100 	mov.w	r1, #0
 801168e:	0159      	lsls	r1, r3, #5
 8011690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011694:	0150      	lsls	r0, r2, #5
 8011696:	4602      	mov	r2, r0
 8011698:	460b      	mov	r3, r1
 801169a:	1b11      	subs	r1, r2, r4
 801169c:	64b9      	str	r1, [r7, #72]	; 0x48
 801169e:	eb63 0305 	sbc.w	r3, r3, r5
 80116a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80116a4:	f04f 0200 	mov.w	r2, #0
 80116a8:	f04f 0300 	mov.w	r3, #0
 80116ac:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80116b0:	4649      	mov	r1, r9
 80116b2:	008b      	lsls	r3, r1, #2
 80116b4:	4641      	mov	r1, r8
 80116b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80116ba:	4641      	mov	r1, r8
 80116bc:	008a      	lsls	r2, r1, #2
 80116be:	4611      	mov	r1, r2
 80116c0:	461a      	mov	r2, r3
 80116c2:	460b      	mov	r3, r1
 80116c4:	191b      	adds	r3, r3, r4
 80116c6:	643b      	str	r3, [r7, #64]	; 0x40
 80116c8:	4613      	mov	r3, r2
 80116ca:	eb45 0303 	adc.w	r3, r5, r3
 80116ce:	647b      	str	r3, [r7, #68]	; 0x44
 80116d0:	f04f 0200 	mov.w	r2, #0
 80116d4:	f04f 0300 	mov.w	r3, #0
 80116d8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80116dc:	4629      	mov	r1, r5
 80116de:	02cb      	lsls	r3, r1, #11
 80116e0:	4621      	mov	r1, r4
 80116e2:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 80116e6:	4621      	mov	r1, r4
 80116e8:	02ca      	lsls	r2, r1, #11
 80116ea:	461c      	mov	r4, r3
 80116ec:	4613      	mov	r3, r2
 80116ee:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 80116f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80116f6:	881b      	ldrh	r3, [r3, #0]
 80116f8:	085b      	lsrs	r3, r3, #1
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 8011700:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011704:	2200      	movs	r2, #0
 8011706:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801170a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801170e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011712:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8011716:	4621      	mov	r1, r4
 8011718:	1851      	adds	r1, r2, r1
 801171a:	63b9      	str	r1, [r7, #56]	; 0x38
 801171c:	4629      	mov	r1, r5
 801171e:	eb43 0101 	adc.w	r1, r3, r1
 8011722:	63f9      	str	r1, [r7, #60]	; 0x3c
 8011724:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8011728:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 801172c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011730:	881b      	ldrh	r3, [r3, #0]
 8011732:	b29b      	uxth	r3, r3
 8011734:	2200      	movs	r2, #0
 8011736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801173a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801173e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8011742:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011746:	f7ef f845 	bl	80007d4 <__aeabi_uldivmod>
 801174a:	4602      	mov	r2, r0
 801174c:	460b      	mov	r3, r1
 801174e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53L1_p_012   = (uint32_t)tmp64;
 8011752:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8011756:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801175a:	611a      	str	r2, [r3, #16]
		pdata->VL53L1_p_012 <<= 4;
 801175c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011760:	691b      	ldr	r3, [r3, #16]
 8011762:	011a      	lsls	r2, r3, #4
 8011764:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011768:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 801176a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	2200      	movs	r2, #0
 8011772:	633b      	str	r3, [r7, #48]	; 0x30
 8011774:	637a      	str	r2, [r7, #52]	; 0x34
 8011776:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 801177a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 801177e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011782:	695b      	ldr	r3, [r3, #20]
 8011784:	2200      	movs	r2, #0
 8011786:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801178a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801178e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011792:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8011796:	4622      	mov	r2, r4
 8011798:	fb02 f203 	mul.w	r2, r2, r3
 801179c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80117a0:	4629      	mov	r1, r5
 80117a2:	fb01 f303 	mul.w	r3, r1, r3
 80117a6:	441a      	add	r2, r3
 80117a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80117ac:	4621      	mov	r1, r4
 80117ae:	fba3 1301 	umull	r1, r3, r3, r1
 80117b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80117b6:	460b      	mov	r3, r1
 80117b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80117bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80117c0:	18d3      	adds	r3, r2, r3
 80117c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80117c6:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80117ca:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80117ce:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 80117d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80117d6:	8b5b      	ldrh	r3, [r3, #26]
 80117d8:	b29b      	uxth	r3, r3
 80117da:	2200      	movs	r2, #0
 80117dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80117e0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80117e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80117e8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80117ec:	4622      	mov	r2, r4
 80117ee:	fb02 f203 	mul.w	r2, r2, r3
 80117f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80117f6:	4629      	mov	r1, r5
 80117f8:	fb01 f303 	mul.w	r3, r1, r3
 80117fc:	441a      	add	r2, r3
 80117fe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011802:	4621      	mov	r1, r4
 8011804:	fba3 1301 	umull	r1, r3, r3, r1
 8011808:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801180c:	460b      	mov	r3, r1
 801180e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011816:	18d3      	adds	r3, r2, r3
 8011818:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801181c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8011820:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011824:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 8011828:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801182c:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 8011830:	62b9      	str	r1, [r7, #40]	; 0x28
 8011832:	f143 0300 	adc.w	r3, r3, #0
 8011836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011838:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801183c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 8011840:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011844:	f04f 0000 	mov.w	r0, #0
 8011848:	f04f 0100 	mov.w	r1, #0
 801184c:	0cd0      	lsrs	r0, r2, #19
 801184e:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8011852:	0cd9      	lsrs	r1, r3, #19
 8011854:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 8011858:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801185c:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8011860:	6239      	str	r1, [r7, #32]
 8011862:	f143 0300 	adc.w	r3, r3, #0
 8011866:	627b      	str	r3, [r7, #36]	; 0x24
 8011868:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801186c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 8011870:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011874:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011878:	f04f 0300 	mov.w	r3, #0
 801187c:	f7ee ffaa 	bl	80007d4 <__aeabi_uldivmod>
 8011880:	4602      	mov	r2, r0
 8011882:	460b      	mov	r3, r1
 8011884:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 8011888:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801188c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8011890:	f173 0300 	sbcs.w	r3, r3, #0
 8011894:	d305      	bcc.n	80118a2 <VL53L1_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 8011896:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801189a:	f04f 0300 	mov.w	r3, #0
 801189e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 80118a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80118a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80118aa:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 80118ac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	2200      	movs	r2, #0
 80118b4:	61bb      	str	r3, [r7, #24]
 80118b6:	61fa      	str	r2, [r7, #28]
 80118b8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80118bc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_012;
 80118c0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80118c4:	691b      	ldr	r3, [r3, #16]
 80118c6:	2200      	movs	r2, #0
 80118c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80118cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80118d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80118d4:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80118d8:	4622      	mov	r2, r4
 80118da:	fb02 f203 	mul.w	r2, r2, r3
 80118de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80118e2:	4629      	mov	r1, r5
 80118e4:	fb01 f303 	mul.w	r3, r1, r3
 80118e8:	441a      	add	r2, r3
 80118ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80118ee:	4621      	mov	r1, r4
 80118f0:	fba3 1301 	umull	r1, r3, r3, r1
 80118f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80118f8:	460b      	mov	r3, r1
 80118fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80118fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011902:	18d3      	adds	r3, r2, r3
 8011904:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011908:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 801190c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011910:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 8011914:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011918:	8b5b      	ldrh	r3, [r3, #26]
 801191a:	b29b      	uxth	r3, r3
 801191c:	2200      	movs	r2, #0
 801191e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011922:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8011926:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801192a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801192e:	4622      	mov	r2, r4
 8011930:	fb02 f203 	mul.w	r2, r2, r3
 8011934:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011938:	4629      	mov	r1, r5
 801193a:	fb01 f303 	mul.w	r3, r1, r3
 801193e:	441a      	add	r2, r3
 8011940:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011944:	4621      	mov	r1, r4
 8011946:	fba3 1301 	umull	r1, r3, r3, r1
 801194a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801194e:	460b      	mov	r3, r1
 8011950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011954:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011958:	18d3      	adds	r3, r2, r3
 801195a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801195e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8011962:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011966:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 801196a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801196e:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 8011972:	6139      	str	r1, [r7, #16]
 8011974:	f143 0300 	adc.w	r3, r3, #0
 8011978:	617b      	str	r3, [r7, #20]
 801197a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801197e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 8011982:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011986:	f04f 0000 	mov.w	r0, #0
 801198a:	f04f 0100 	mov.w	r1, #0
 801198e:	0cd0      	lsrs	r0, r2, #19
 8011990:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8011994:	0cd9      	lsrs	r1, r3, #19
 8011996:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 801199a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 801199e:	2200      	movs	r2, #0
 80119a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80119a2:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 80119a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80119a8:	891b      	ldrh	r3, [r3, #8]
 80119aa:	b29b      	uxth	r3, r3
 80119ac:	2200      	movs	r2, #0
 80119ae:	673b      	str	r3, [r7, #112]	; 0x70
 80119b0:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 80119b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80119b6:	462b      	mov	r3, r5
 80119b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80119bc:	4642      	mov	r2, r8
 80119be:	fb02 f203 	mul.w	r2, r2, r3
 80119c2:	464b      	mov	r3, r9
 80119c4:	4621      	mov	r1, r4
 80119c6:	fb01 f303 	mul.w	r3, r1, r3
 80119ca:	4413      	add	r3, r2
 80119cc:	4622      	mov	r2, r4
 80119ce:	4641      	mov	r1, r8
 80119d0:	fba2 1201 	umull	r1, r2, r2, r1
 80119d4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80119d8:	460a      	mov	r2, r1
 80119da:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80119de:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80119e2:	4413      	add	r3, r2
 80119e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80119e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80119ec:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80119f0:	4622      	mov	r2, r4
 80119f2:	fb02 f203 	mul.w	r2, r2, r3
 80119f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80119fa:	4629      	mov	r1, r5
 80119fc:	fb01 f303 	mul.w	r3, r1, r3
 8011a00:	4413      	add	r3, r2
 8011a02:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8011a06:	4621      	mov	r1, r4
 8011a08:	fba2 1201 	umull	r1, r2, r2, r1
 8011a0c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8011a10:	460a      	mov	r2, r1
 8011a12:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8011a16:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8011a1a:	4413      	add	r3, r2
 8011a1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011a20:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8011a24:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011a28:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 8011a2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011a30:	88db      	ldrh	r3, [r3, #6]
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	2200      	movs	r2, #0
 8011a36:	66bb      	str	r3, [r7, #104]	; 0x68
 8011a38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011a3a:	f04f 0200 	mov.w	r2, #0
 8011a3e:	f04f 0300 	mov.w	r3, #0
 8011a42:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8011a46:	4629      	mov	r1, r5
 8011a48:	01cb      	lsls	r3, r1, #7
 8011a4a:	4621      	mov	r1, r4
 8011a4c:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8011a50:	4621      	mov	r1, r4
 8011a52:	01ca      	lsls	r2, r1, #7
 8011a54:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011a58:	1884      	adds	r4, r0, r2
 8011a5a:	60bc      	str	r4, [r7, #8]
 8011a5c:	eb41 0303 	adc.w	r3, r1, r3
 8011a60:	60fb      	str	r3, [r7, #12]
 8011a62:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8011a66:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64,
 8011a6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011a6e:	88db      	ldrh	r3, [r3, #6]
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	2200      	movs	r2, #0
 8011a74:	663b      	str	r3, [r7, #96]	; 0x60
 8011a76:	667a      	str	r2, [r7, #100]	; 0x64
 8011a78:	f04f 0200 	mov.w	r2, #0
 8011a7c:	f04f 0300 	mov.w	r3, #0
 8011a80:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8011a84:	4629      	mov	r1, r5
 8011a86:	020b      	lsls	r3, r1, #8
 8011a88:	4621      	mov	r1, r4
 8011a8a:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8011a8e:	4621      	mov	r1, r4
 8011a90:	020a      	lsls	r2, r1, #8
 8011a92:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011a96:	f7ee fe9d 	bl	80007d4 <__aeabi_uldivmod>
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	460b      	mov	r3, r1
 8011a9e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 8011aa2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011aa6:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8011aaa:	6039      	str	r1, [r7, #0]
 8011aac:	f143 0300 	adc.w	r3, r3, #0
 8011ab0:	607b      	str	r3, [r7, #4]
 8011ab2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011ab6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64, 1000);
 8011aba:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011abe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011ac2:	f04f 0300 	mov.w	r3, #0
 8011ac6:	f7ee fe85 	bl	80007d4 <__aeabi_uldivmod>
 8011aca:	4602      	mov	r2, r0
 8011acc:	460b      	mov	r3, r1
 8011ace:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 8011ad2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011ad6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8011ada:	f173 0300 	sbcs.w	r3, r3, #0
 8011ade:	d305      	bcc.n	8011aec <VL53L1_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 8011ae0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8011ae4:	f04f 0300 	mov.w	r3, #0
 8011ae8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 8011aec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8011af0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011af4:	621a      	str	r2, [r3, #32]



		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 8011af6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011afa:	69db      	ldr	r3, [r3, #28]
 8011afc:	021b      	lsls	r3, r3, #8
 8011afe:	4618      	mov	r0, r3
 8011b00:	f7fe ffcd 	bl	8010a9e <VL53L1_isqrt>
 8011b04:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 8011b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011b0c:	785b      	ldrb	r3, [r3, #1]
 8011b0e:	461a      	mov	r2, r3
 8011b10:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011b14:	fb02 f303 	mul.w	r3, r2, r3
 8011b18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53L1_p_004 <
 8011b1c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011b20:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 8011b22:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8011b26:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53L1_p_004 <
 8011b28:	4293      	cmp	r3, r2
 8011b2a:	d218      	bcs.n	8011b5e <VL53L1_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 8011b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53L1_p_004;
 8011b34:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011b38:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 8011b3a:	1ad3      	subs	r3, r2, r3
 8011b3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 8011b40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011b44:	021b      	lsls	r3, r3, #8
 8011b46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 8011b4a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8011b4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d203      	bcs.n	8011b5e <VL53L1_f_001+0x786>
				tmp32 = amb_thres_delta;
 8011b56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011b5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53L1_p_007 =
			(int16_t)VL53L1_f_002(
 8011b5e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011b62:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53L1_p_034,
				(uint32_t)pcal->ref__distance_mm,
 8011b64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011b68:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 8011b6a:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 8011b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011b70:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 8011b72:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8011b76:	f000 f854 	bl	8011c22 <VL53L1_f_002>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_007 =
 8011b7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011b82:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 8011b84:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011b88:	6a1b      	ldr	r3, [r3, #32]
 8011b8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 8011b8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011b92:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8011b96:	461a      	mov	r2, r3
 8011b98:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011b9c:	fb02 f303 	mul.w	r3, r2, r3
 8011ba0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 8011ba4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011ba8:	3308      	adds	r3, #8
 8011baa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 8011bae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011bb2:	091b      	lsrs	r3, r3, #4
 8011bb4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53L1_p_035 =
			(int16_t)VL53L1_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 8011bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011bbc:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53L1_f_002(
 8011bbe:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 8011bc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011bc4:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 8011bc6:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 8011bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011bcc:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 8011bce:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8011bd2:	f000 f826 	bl	8011c22 <VL53L1_f_002>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_035 =
 8011bda:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011bde:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 8011be0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011be4:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8011be8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011bec:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	da07      	bge.n	8011c04 <VL53L1_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 8011bf4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011bf8:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8011bfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011c00:	801a      	strh	r2, [r3, #0]
 8011c02:	e006      	b.n	8011c12 <VL53L1_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53L1_p_007;
 8011c04:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011c08:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8011c0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011c10:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 8011c12:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 8011c16:	4618      	mov	r0, r3
 8011c18:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011c22 <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 8011c22:	b580      	push	{r7, lr}
 8011c24:	b086      	sub	sp, #24
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	60f8      	str	r0, [r7, #12]
 8011c2a:	60b9      	str	r1, [r7, #8]
 8011c2c:	607a      	str	r2, [r7, #4]
 8011c2e:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 8011c30:	2300      	movs	r3, #0
 8011c32:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 8011c34:	2300      	movs	r3, #0
 8011c36:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	009b      	lsls	r3, r3, #2
 8011c3c:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	fb03 f303 	mul.w	r3, r3, r3
 8011c44:	693a      	ldr	r2, [r7, #16]
 8011c46:	4413      	add	r3, r2
 8011c48:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 8011c4a:	6938      	ldr	r0, [r7, #16]
 8011c4c:	f7fe ff27 	bl	8010a9e <VL53L1_isqrt>
 8011c50:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 8011c52:	693a      	ldr	r2, [r7, #16]
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	4413      	add	r3, r2
 8011c58:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	011b      	lsls	r3, r3, #4
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f7fe ff1d 	bl	8010a9e <VL53L1_isqrt>
 8011c64:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	687a      	ldr	r2, [r7, #4]
 8011c6a:	fb02 f303 	mul.w	r3, r2, r3
 8011c6e:	617b      	str	r3, [r7, #20]

	if (tmp32 > 0) {
 8011c70:	693b      	ldr	r3, [r7, #16]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d009      	beq.n	8011c8a <VL53L1_f_002+0x68>
		range_mm += (tmp32);
 8011c76:	697a      	ldr	r2, [r7, #20]
 8011c78:	693b      	ldr	r3, [r7, #16]
 8011c7a:	4413      	add	r3, r2
 8011c7c:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	005b      	lsls	r3, r3, #1
 8011c82:	697a      	ldr	r2, [r7, #20]
 8011c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c88:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 8011c8a:	697b      	ldr	r3, [r7, #20]

}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3718      	adds	r7, #24
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}

08011c94 <VL53L1_f_016>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53L1_f_016(
	VL53L1_hist_gen3_algo_private_data_t   *palgo)
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b084      	sub	sp, #16
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	73fb      	strb	r3, [r7, #15]

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2218      	movs	r2, #24
 8011ca4:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022                = 0;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024           = 0;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2200      	movs	r2, #0
 8011cb0:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_045         = 0;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	711a      	strb	r2, [r3, #4]
	palgo->VL53L1_p_004   = 0;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	609a      	str	r2, [r3, #8]
	palgo->VL53L1_p_032 = 0;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	781b      	ldrb	r3, [r3, #0]
 8011cc8:	73fb      	strb	r3, [r7, #15]
 8011cca:	e01f      	b.n	8011d0c <VL53L1_f_016+0x78>
		palgo->VL53L1_p_043[lb]      = 0;
 8011ccc:	7bfb      	ldrb	r3, [r7, #15]
 8011cce:	687a      	ldr	r2, [r7, #4]
 8011cd0:	4413      	add	r3, r2
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	741a      	strb	r2, [r3, #16]
		palgo->VL53L1_p_046[lb] = 0;
 8011cd6:	7bfb      	ldrb	r3, [r7, #15]
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	4413      	add	r3, r2
 8011cdc:	2200      	movs	r2, #0
 8011cde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53L1_p_047[lb]     = 0;
 8011ce2:	7bfb      	ldrb	r3, [r7, #15]
 8011ce4:	687a      	ldr	r2, [r7, #4]
 8011ce6:	4413      	add	r3, r2
 8011ce8:	2200      	movs	r2, #0
 8011cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53L1_p_048[lb]      = 0;
 8011cee:	7bfa      	ldrb	r2, [r7, #15]
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	322e      	adds	r2, #46	; 0x2e
 8011cf4:	2100      	movs	r1, #0
 8011cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53L1_p_008[lb]     = 0;
 8011cfa:	7bfa      	ldrb	r2, [r7, #15]
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	3246      	adds	r2, #70	; 0x46
 8011d00:	2100      	movs	r1, #0
 8011d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 8011d06:	7bfb      	ldrb	r3, [r7, #15]
 8011d08:	3301      	adds	r3, #1
 8011d0a:	73fb      	strb	r3, [r7, #15]
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	785b      	ldrb	r3, [r3, #1]
 8011d10:	7bfa      	ldrb	r2, [r7, #15]
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d3da      	bcc.n	8011ccc <VL53L1_f_016+0x38>
	}

	palgo->VL53L1_p_049 = 0;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	2200      	movs	r2, #0
 8011d1a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53L1_p_050               = VL53L1_D_001;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2208      	movs	r2, #8
 8011d22:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53L1_p_051             = 0;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2200      	movs	r2, #0
 8011d2a:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53L1_init_histogram_bin_data_struct(
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011d34:	461a      	mov	r2, r3
 8011d36:	2118      	movs	r1, #24
 8011d38:	2000      	movs	r0, #0
 8011d3a:	f7ff f9e8 	bl	801110e <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8011d44:	461a      	mov	r2, r3
 8011d46:	2118      	movs	r1, #24
 8011d48:	2000      	movs	r0, #0
 8011d4a:	f7ff f9e0 	bl	801110e <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8011d54:	461a      	mov	r2, r3
 8011d56:	2118      	movs	r1, #24
 8011d58:	2000      	movs	r0, #0
 8011d5a:	f7ff f9d8 	bl	801110e <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8011d64:	461a      	mov	r2, r3
 8011d66:	2118      	movs	r1, #24
 8011d68:	2000      	movs	r0, #0
 8011d6a:	f7ff f9d0 	bl	801110e <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8011d74:	461a      	mov	r2, r3
 8011d76:	2118      	movs	r1, #24
 8011d78:	2000      	movs	r0, #0
 8011d7a:	f7ff f9c8 	bl	801110e <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 8011d7e:	bf00      	nop
 8011d80:	3710      	adds	r7, #16
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}

08011d86 <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8011d86:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011d8a:	b090      	sub	sp, #64	; 0x40
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	61b9      	str	r1, [r7, #24]
 8011d90:	617a      	str	r2, [r7, #20]
 8011d92:	461a      	mov	r2, r3
 8011d94:	4603      	mov	r3, r0
 8011d96:	83fb      	strh	r3, [r7, #30]
 8011d98:	4613      	mov	r3, r2
 8011d9a:	777b      	strb	r3, [r7, #29]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 8011da2:	2300      	movs	r3, #0
 8011da4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53L1_p_001            = 0;
 8011da8:	2300      	movs	r3, #0
 8011daa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 8011dae:	f04f 0200 	mov.w	r2, #0
 8011db2:	f04f 0300 	mov.w	r3, #0
 8011db6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 8011dba:	2300      	movs	r3, #0
 8011dbc:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53L1_p_008       = 0;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 8011dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011dc8:	7a5a      	ldrb	r2, [r3, #9]
 8011dca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011dcc:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 8011dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011dd0:	7a1a      	ldrb	r2, [r3, #8]
 8011dd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011dd4:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 8011dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011dd8:	7a9a      	ldrb	r2, [r3, #10]
 8011dda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011ddc:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 8011dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011de0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8011de4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011de6:	609a      	str	r2, [r3, #8]



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 8011de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011dea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011dee:	4618      	mov	r0, r3
 8011df0:	f7ff f93c 	bl	801106c <VL53L1_decode_vcsel_period>
 8011df4:	4603      	mov	r3, r0
 8011df6:	461a      	mov	r2, r3
	palgo->VL53L1_p_031 =
 8011df8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011dfa:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
 8011dfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011dfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011e02:	17da      	asrs	r2, r3, #31
 8011e04:	60bb      	str	r3, [r7, #8]
 8011e06:	60fa      	str	r2, [r7, #12]
 8011e08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011e0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 8011e10:	8bfb      	ldrh	r3, [r7, #30]
 8011e12:	2200      	movs	r2, #0
 8011e14:	4698      	mov	r8, r3
 8011e16:	4691      	mov	r9, r2
 8011e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e1a:	fb08 f203 	mul.w	r2, r8, r3
 8011e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e20:	fb09 f303 	mul.w	r3, r9, r3
 8011e24:	4413      	add	r3, r2
 8011e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e28:	fba2 4508 	umull	r4, r5, r2, r8
 8011e2c:	442b      	add	r3, r5
 8011e2e:	461d      	mov	r5, r3
 8011e30:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8011e34:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 8011e38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011e3c:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 8011e40:	f143 0b00 	adc.w	fp, r3, #0
 8011e44:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 8011e48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	da08      	bge.n	8011e62 <VL53L1_f_018+0xdc>
 8011e50:	f640 71ff 	movw	r1, #4095	; 0xfff
 8011e54:	1851      	adds	r1, r2, r1
 8011e56:	6039      	str	r1, [r7, #0]
 8011e58:	f143 0300 	adc.w	r3, r3, #0
 8011e5c:	607b      	str	r3, [r7, #4]
 8011e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e62:	f04f 0000 	mov.w	r0, #0
 8011e66:	f04f 0100 	mov.w	r1, #0
 8011e6a:	0b10      	lsrs	r0, r2, #12
 8011e6c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8011e70:	1319      	asrs	r1, r3, #12
 8011e72:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 8011e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e78:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011e80:	e062      	b.n	8011f48 <VL53L1_f_018+0x1c2>

		VL53L1_p_001 = lb >> 2;
 8011e82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011e86:	089b      	lsrs	r3, r3, #2
 8011e88:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 8011e8c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011e90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011e92:	4413      	add	r3, r2
 8011e94:	7c9b      	ldrb	r3, [r3, #18]
 8011e96:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 8011e98:	6a3b      	ldr	r3, [r7, #32]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	dd4f      	ble.n	8011f3e <VL53L1_f_018+0x1b8>

			if (lb < pxtalk->VL53L1_p_024 &&
 8011e9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ea0:	7a9b      	ldrb	r3, [r3, #10]
 8011ea2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d20f      	bcs.n	8011eca <VL53L1_f_018+0x144>
 8011eaa:	7f7b      	ldrb	r3, [r7, #29]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d00c      	beq.n	8011eca <VL53L1_f_018+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53L1_p_008 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 8011eb0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011eb6:	3206      	adds	r2, #6
 8011eb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53L1_p_008 = samples * (amb_events +
 8011ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ebe:	441a      	add	r2, r3
 8011ec0:	6a3b      	ldr	r3, [r7, #32]
 8011ec2:	fb02 f303 	mul.w	r3, r2, r3
 8011ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8011ec8:	e004      	b.n	8011ed4 <VL53L1_f_018+0x14e>
			else
				VL53L1_p_008 = samples *  amb_events;
 8011eca:	6a3b      	ldr	r3, [r7, #32]
 8011ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ece:	fb02 f303 	mul.w	r3, r2, r3
 8011ed2:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 8011ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7fe fde1 	bl	8010a9e <VL53L1_isqrt>
 8011edc:	4603      	mov	r3, r0
 8011ede:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008 += (samples/2);
 8011ee0:	6a3b      	ldr	r3, [r7, #32]
 8011ee2:	0fda      	lsrs	r2, r3, #31
 8011ee4:	4413      	add	r3, r2
 8011ee6:	105b      	asrs	r3, r3, #1
 8011ee8:	461a      	mov	r2, r3
 8011eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eec:	4413      	add	r3, r2
 8011eee:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= samples;
 8011ef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ef2:	6a3b      	ldr	r3, [r7, #32]
 8011ef4:	fb92 f3f3 	sdiv	r3, r2, r3
 8011ef8:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 *= ambient_threshold_sigma;
 8011efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011efc:	69ba      	ldr	r2, [r7, #24]
 8011efe:	fb02 f303 	mul.w	r3, r2, r3
 8011f02:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += 8;
 8011f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f06:	3308      	adds	r3, #8
 8011f08:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= 16;
 8011f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	da00      	bge.n	8011f12 <VL53L1_f_018+0x18c>
 8011f10:	330f      	adds	r3, #15
 8011f12:	111b      	asrs	r3, r3, #4
 8011f14:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += amb_events;
 8011f16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f1a:	4413      	add	r3, r2
 8011f1c:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53L1_p_008 < min_ambient_threshold_events)
 8011f1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	429a      	cmp	r2, r3
 8011f24:	da01      	bge.n	8011f2a <VL53L1_f_018+0x1a4>
				VL53L1_p_008 = min_ambient_threshold_events;
 8011f26:	697b      	ldr	r3, [r7, #20]
 8011f28:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 8011f2a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011f2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f30:	3216      	adds	r2, #22
 8011f32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 8011f38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f3c:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 8011f3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011f42:	3301      	adds	r3, #1
 8011f44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011f48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f4a:	7a9b      	ldrb	r3, [r3, #10]
 8011f4c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d396      	bcc.n	8011e82 <VL53L1_f_018+0xfc>

	}



	palgo->VL53L1_p_045 = 0;
 8011f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f56:	2200      	movs	r2, #0
 8011f58:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 8011f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f5c:	7a1b      	ldrb	r3, [r3, #8]
 8011f5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011f62:	e033      	b.n	8011fcc <VL53L1_f_018+0x246>

		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 8011f64:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f6a:	3206      	adds	r2, #6
 8011f6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011f70:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8011f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f76:	3116      	adds	r1, #22
 8011f78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	dd13      	ble.n	8011fa8 <VL53L1_f_018+0x222>
			palgo->VL53L1_p_043[lb]      = 1;
 8011f80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011f84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011f86:	4413      	add	r3, r2
 8011f88:	2201      	movs	r2, #1
 8011f8a:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 1;
 8011f8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011f90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011f92:	4413      	add	r3, r2
 8011f94:	2201      	movs	r2, #1
 8011f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53L1_p_045++;
 8011f9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f9c:	791b      	ldrb	r3, [r3, #4]
 8011f9e:	3301      	adds	r3, #1
 8011fa0:	b2da      	uxtb	r2, r3
 8011fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011fa4:	711a      	strb	r2, [r3, #4]
 8011fa6:	e00c      	b.n	8011fc2 <VL53L1_f_018+0x23c>
		} else {
			palgo->VL53L1_p_043[lb]      = 0;
 8011fa8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011fac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011fae:	4413      	add	r3, r2
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 0;
 8011fb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011fb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011fba:	4413      	add	r3, r2
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 8011fc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011fc6:	3301      	adds	r3, #1
 8011fc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011fcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011fce:	7a9b      	ldrb	r3, [r3, #10]
 8011fd0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	d3c5      	bcc.n	8011f64 <VL53L1_f_018+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8011fd8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3740      	adds	r7, #64	; 0x40
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011fe6 <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8011fe6:	b480      	push	{r7}
 8011fe8:	b085      	sub	sp, #20
 8011fea:	af00      	add	r7, sp, #0
 8011fec:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2200      	movs	r2, #0
 8012002:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 8012006:	2300      	movs	r3, #0
 8012008:	73fb      	strb	r3, [r7, #15]
 801200a:	e02d      	b.n	8012068 <VL53L1_f_019+0x82>

		j = (i + 1) % palgo->VL53L1_p_031;
 801200c:	7bfb      	ldrb	r3, [r7, #15]
 801200e:	3301      	adds	r3, #1
 8012010:	687a      	ldr	r2, [r7, #4]
 8012012:	78d2      	ldrb	r2, [r2, #3]
 8012014:	fb93 f1f2 	sdiv	r1, r3, r2
 8012018:	fb01 f202 	mul.w	r2, r1, r2
 801201c:	1a9b      	subs	r3, r3, r2
 801201e:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	789b      	ldrb	r3, [r3, #2]
 8012024:	7bfa      	ldrb	r2, [r7, #15]
 8012026:	429a      	cmp	r2, r3
 8012028:	d21b      	bcs.n	8012062 <VL53L1_f_019+0x7c>
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	789b      	ldrb	r3, [r3, #2]
 801202e:	7b3a      	ldrb	r2, [r7, #12]
 8012030:	429a      	cmp	r2, r3
 8012032:	d216      	bcs.n	8012062 <VL53L1_f_019+0x7c>
			if (palgo->VL53L1_p_046[i] == 0 &&
 8012034:	7bfb      	ldrb	r3, [r7, #15]
 8012036:	687a      	ldr	r2, [r7, #4]
 8012038:	4413      	add	r3, r2
 801203a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801203e:	2b00      	cmp	r3, #0
 8012040:	d10f      	bne.n	8012062 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 8012042:	7b3b      	ldrb	r3, [r7, #12]
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	4413      	add	r3, r2
 8012048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 801204c:	2b01      	cmp	r3, #1
 801204e:	d108      	bne.n	8012062 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 8012050:	7bbb      	ldrb	r3, [r7, #14]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d105      	bne.n	8012062 <VL53L1_f_019+0x7c>
				found == 0) {
				palgo->VL53L1_p_049 = i;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	7bfa      	ldrb	r2, [r7, #15]
 801205a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 801205e:	2301      	movs	r3, #1
 8012060:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 8012062:	7bfb      	ldrb	r3, [r7, #15]
 8012064:	3301      	adds	r3, #1
 8012066:	73fb      	strb	r3, [r7, #15]
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	78db      	ldrb	r3, [r3, #3]
 801206c:	7bfa      	ldrb	r2, [r7, #15]
 801206e:	429a      	cmp	r2, r3
 8012070:	d3cc      	bcc.n	801200c <VL53L1_f_019+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8012072:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8012076:	4618      	mov	r0, r3
 8012078:	3714      	adds	r7, #20
 801207a:	46bd      	mov	sp, r7
 801207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012080:	4770      	bx	lr

08012082 <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8012082:	b480      	push	{r7}
 8012084:	b085      	sub	sp, #20
 8012086:	af00      	add	r7, sp, #0
 8012088:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801208a:	2300      	movs	r3, #0
 801208c:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 801208e:	2300      	movs	r3, #0
 8012090:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 8012092:	2300      	movs	r3, #0
 8012094:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 8012096:	2300      	movs	r3, #0
 8012098:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80120a0:	73fb      	strb	r3, [r7, #15]
 80120a2:	e05a      	b.n	801215a <VL53L1_f_020+0xd8>
		palgo->VL53L1_p_031);
		lb++) {



		i =  lb      % palgo->VL53L1_p_031;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	78da      	ldrb	r2, [r3, #3]
 80120a8:	7bfb      	ldrb	r3, [r7, #15]
 80120aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80120ae:	fb01 f202 	mul.w	r2, r1, r2
 80120b2:	1a9b      	subs	r3, r3, r2
 80120b4:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53L1_p_031;
 80120b6:	7bfb      	ldrb	r3, [r7, #15]
 80120b8:	3301      	adds	r3, #1
 80120ba:	687a      	ldr	r2, [r7, #4]
 80120bc:	78d2      	ldrb	r2, [r2, #3]
 80120be:	fb93 f1f2 	sdiv	r1, r3, r2
 80120c2:	fb01 f202 	mul.w	r2, r1, r2
 80120c6:	1a9b      	subs	r3, r3, r2
 80120c8:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	789b      	ldrb	r3, [r3, #2]
 80120ce:	7b7a      	ldrb	r2, [r7, #13]
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d23f      	bcs.n	8012154 <VL53L1_f_020+0xd2>
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	789b      	ldrb	r3, [r3, #2]
 80120d8:	7b3a      	ldrb	r2, [r7, #12]
 80120da:	429a      	cmp	r2, r3
 80120dc:	d23a      	bcs.n	8012154 <VL53L1_f_020+0xd2>

			if (palgo->VL53L1_p_046[i] == 0 &&
 80120de:	7b7b      	ldrb	r3, [r7, #13]
 80120e0:	687a      	ldr	r2, [r7, #4]
 80120e2:	4413      	add	r3, r2
 80120e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d10e      	bne.n	801210a <VL53L1_f_020+0x88>
				palgo->VL53L1_p_046[j] == 1)
 80120ec:	7b3b      	ldrb	r3, [r7, #12]
 80120ee:	687a      	ldr	r2, [r7, #4]
 80120f0:	4413      	add	r3, r2
 80120f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 80120f6:	2b01      	cmp	r3, #1
 80120f8:	d107      	bne.n	801210a <VL53L1_f_020+0x88>
				palgo->VL53L1_p_051++;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8012100:	3301      	adds	r3, #1
 8012102:	b2da      	uxtb	r2, r3
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8012116:	429a      	cmp	r2, r3
 8012118:	d905      	bls.n	8012126 <VL53L1_f_020+0xa4>
				palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_046[i] > 0)
 8012126:	7b7b      	ldrb	r3, [r7, #13]
 8012128:	687a      	ldr	r2, [r7, #4]
 801212a:	4413      	add	r3, r2
 801212c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012130:	2b00      	cmp	r3, #0
 8012132:	d009      	beq.n	8012148 <VL53L1_f_020+0xc6>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 8012134:	7b7b      	ldrb	r3, [r7, #13]
 8012136:	687a      	ldr	r2, [r7, #4]
 8012138:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 801213c:	687a      	ldr	r2, [r7, #4]
 801213e:	4413      	add	r3, r2
 8012140:	460a      	mov	r2, r1
 8012142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012146:	e005      	b.n	8012154 <VL53L1_f_020+0xd2>
			else
				palgo->VL53L1_p_047[i] = 0;
 8012148:	7b7b      	ldrb	r3, [r7, #13]
 801214a:	687a      	ldr	r2, [r7, #4]
 801214c:	4413      	add	r3, r2
 801214e:	2200      	movs	r2, #0
 8012150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 8012154:	7bfb      	ldrb	r3, [r7, #15]
 8012156:	3301      	adds	r3, #1
 8012158:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53L1_p_049 +
 801215a:	7bfa      	ldrb	r2, [r7, #15]
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8012162:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 8012168:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 801216a:	429a      	cmp	r2, r3
 801216c:	db9a      	blt.n	80120a4 <VL53L1_f_020+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 801216e:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 8012172:	4618      	mov	r0, r3
 8012174:	3714      	adds	r7, #20
 8012176:	46bd      	mov	sp, r7
 8012178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217c:	4770      	bx	lr

0801217e <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 801217e:	b480      	push	{r7}
 8012180:	b087      	sub	sp, #28
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012186:	2300      	movs	r3, #0
 8012188:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 801218a:	2300      	movs	r3, #0
 801218c:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 801218e:	2300      	movs	r3, #0
 8012190:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 8012192:	2300      	movs	r3, #0
 8012194:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 8012196:	2300      	movs	r3, #0
 8012198:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 801219a:	2300      	movs	r3, #0
 801219c:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	78db      	ldrb	r3, [r3, #3]
 80121a2:	3b01      	subs	r3, #1
 80121a4:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 80121a6:	7cbb      	ldrb	r3, [r7, #18]
 80121a8:	085b      	lsrs	r3, r3, #1
 80121aa:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53L1_p_049;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80121b2:	75fb      	strb	r3, [r7, #23]
 80121b4:	e0a2      	b.n	80122fc <VL53L1_f_021+0x17e>
		palgo->VL53L1_p_031);
		blb++) {



		i =  blb      % palgo->VL53L1_p_031;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	78da      	ldrb	r2, [r3, #3]
 80121ba:	7dfb      	ldrb	r3, [r7, #23]
 80121bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80121c0:	fb01 f202 	mul.w	r2, r1, r2
 80121c4:	1a9b      	subs	r3, r3, r2
 80121c6:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53L1_p_031;
 80121c8:	7dfb      	ldrb	r3, [r7, #23]
 80121ca:	3301      	adds	r3, #1
 80121cc:	687a      	ldr	r2, [r7, #4]
 80121ce:	78d2      	ldrb	r2, [r2, #3]
 80121d0:	fb93 f1f2 	sdiv	r1, r3, r2
 80121d4:	fb01 f202 	mul.w	r2, r1, r2
 80121d8:	1a9b      	subs	r3, r3, r2
 80121da:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53L1_p_024 &&
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	789b      	ldrb	r3, [r3, #2]
 80121e0:	7d7a      	ldrb	r2, [r7, #21]
 80121e2:	429a      	cmp	r2, r3
 80121e4:	f080 8087 	bcs.w	80122f6 <VL53L1_f_021+0x178>
				j < palgo->VL53L1_p_024) {
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53L1_p_024 &&
 80121ec:	7d3a      	ldrb	r2, [r7, #20]
 80121ee:	429a      	cmp	r2, r3
 80121f0:	f080 8081 	bcs.w	80122f6 <VL53L1_f_021+0x178>



			if (palgo->VL53L1_p_047[i] == 0 &&
 80121f4:	7d7b      	ldrb	r3, [r7, #21]
 80121f6:	687a      	ldr	r2, [r7, #4]
 80121f8:	4413      	add	r3, r2
 80121fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d12f      	bne.n	8012262 <VL53L1_f_021+0xe4>
					palgo->VL53L1_p_047[j] > 0) {
 8012202:	7d3b      	ldrb	r3, [r7, #20]
 8012204:	687a      	ldr	r2, [r7, #4]
 8012206:	4413      	add	r3, r2
 8012208:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 801220c:	2b00      	cmp	r3, #0
 801220e:	d028      	beq.n	8012262 <VL53L1_f_021+0xe4>

				pulse_no = palgo->VL53L1_p_047[j] - 1;
 8012210:	7d3b      	ldrb	r3, [r7, #20]
 8012212:	687a      	ldr	r2, [r7, #4]
 8012214:	4413      	add	r3, r2
 8012216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801221a:	3b01      	subs	r3, #1
 801221c:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8012224:	7cfa      	ldrb	r2, [r7, #19]
 8012226:	429a      	cmp	r2, r3
 8012228:	d21b      	bcs.n	8012262 <VL53L1_f_021+0xe4>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 801222a:	7cfa      	ldrb	r2, [r7, #19]
 801222c:	4613      	mov	r3, r2
 801222e:	00db      	lsls	r3, r3, #3
 8012230:	4413      	add	r3, r2
 8012232:	009b      	lsls	r3, r3, #2
 8012234:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012238:	687a      	ldr	r2, [r7, #4]
 801223a:	4413      	add	r3, r2
 801223c:	3304      	adds	r3, #4
 801223e:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_015 = blb;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	7dfa      	ldrb	r2, [r7, #23]
 8012244:	701a      	strb	r2, [r3, #0]
					pdata->VL53L1_p_022    = blb + 1;
 8012246:	7dfb      	ldrb	r3, [r7, #23]
 8012248:	3301      	adds	r3, #1
 801224a:	b2da      	uxtb	r2, r3
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	705a      	strb	r2, [r3, #1]
					pdata->VL53L1_p_025   = 0xFF;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	22ff      	movs	r2, #255	; 0xff
 8012254:	709a      	strb	r2, [r3, #2]
					pdata->VL53L1_p_026     = 0;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	2200      	movs	r2, #0
 801225a:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016   = 0;
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	2200      	movs	r2, #0
 8012260:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53L1_p_047[i] > 0
 8012262:	7d7b      	ldrb	r3, [r7, #21]
 8012264:	687a      	ldr	r2, [r7, #4]
 8012266:	4413      	add	r3, r2
 8012268:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801226c:	2b00      	cmp	r3, #0
 801226e:	d042      	beq.n	80122f6 <VL53L1_f_021+0x178>
				&& palgo->VL53L1_p_047[j] == 0) {
 8012270:	7d3b      	ldrb	r3, [r7, #20]
 8012272:	687a      	ldr	r2, [r7, #4]
 8012274:	4413      	add	r3, r2
 8012276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801227a:	2b00      	cmp	r3, #0
 801227c:	d13b      	bne.n	80122f6 <VL53L1_f_021+0x178>

				pulse_no = palgo->VL53L1_p_047[i] - 1;
 801227e:	7d7b      	ldrb	r3, [r7, #21]
 8012280:	687a      	ldr	r2, [r7, #4]
 8012282:	4413      	add	r3, r2
 8012284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012288:	3b01      	subs	r3, #1
 801228a:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8012292:	7cfa      	ldrb	r2, [r7, #19]
 8012294:	429a      	cmp	r2, r3
 8012296:	d22e      	bcs.n	80122f6 <VL53L1_f_021+0x178>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8012298:	7cfa      	ldrb	r2, [r7, #19]
 801229a:	4613      	mov	r3, r2
 801229c:	00db      	lsls	r3, r3, #3
 801229e:	4413      	add	r3, r2
 80122a0:	009b      	lsls	r3, r3, #2
 80122a2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80122a6:	687a      	ldr	r2, [r7, #4]
 80122a8:	4413      	add	r3, r2
 80122aa:	3304      	adds	r3, #4
 80122ac:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_026    = blb;
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	7dfa      	ldrb	r2, [r7, #23]
 80122b2:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016  = blb + 1;
 80122b4:	7dfb      	ldrb	r3, [r7, #23]
 80122b6:	3301      	adds	r3, #1
 80122b8:	b2da      	uxtb	r2, r3
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	711a      	strb	r2, [r3, #4]

					pdata->VL53L1_p_027 =
						(pdata->VL53L1_p_026 + 1) -
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53L1_p_022;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53L1_p_026 + 1) -
 80122c6:	1ad3      	subs	r3, r2, r3
 80122c8:	b2db      	uxtb	r3, r3
 80122ca:	3301      	adds	r3, #1
 80122cc:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_027 =
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	715a      	strb	r2, [r3, #5]
					pdata->VL53L1_p_055 =
						(pdata->VL53L1_p_016 + 1) -
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53L1_p_015;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53L1_p_016 + 1) -
 80122da:	1ad3      	subs	r3, r2, r3
 80122dc:	b2db      	uxtb	r3, r3
 80122de:	3301      	adds	r3, #1
 80122e0:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_055 =
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53L1_p_055 >
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	799b      	ldrb	r3, [r3, #6]
 80122ea:	7cba      	ldrb	r2, [r7, #18]
 80122ec:	429a      	cmp	r2, r3
 80122ee:	d202      	bcs.n	80122f6 <VL53L1_f_021+0x178>
						max_filter_half_width)
						pdata->VL53L1_p_055 =
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	7cba      	ldrb	r2, [r7, #18]
 80122f4:	719a      	strb	r2, [r3, #6]
		blb++) {
 80122f6:	7dfb      	ldrb	r3, [r7, #23]
 80122f8:	3301      	adds	r3, #1
 80122fa:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53L1_p_049 +
 80122fc:	7dfa      	ldrb	r2, [r7, #23]
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8012304:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53L1_p_049 +
 801230a:	440b      	add	r3, r1
	for (blb = palgo->VL53L1_p_049;
 801230c:	429a      	cmp	r2, r3
 801230e:	f6ff af52 	blt.w	80121b6 <VL53L1_f_021+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8012312:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 8012316:	4618      	mov	r0, r3
 8012318:	371c      	adds	r7, #28
 801231a:	46bd      	mov	sp, r7
 801231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012320:	4770      	bx	lr

08012322 <VL53L1_f_028>:


VL53L1_Error VL53L1_f_028(
	VL53L1_HistTargetOrder                target_order,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8012322:	b580      	push	{r7, lr}
 8012324:	b090      	sub	sp, #64	; 0x40
 8012326:	af00      	add	r7, sp, #0
 8012328:	4603      	mov	r3, r0
 801232a:	6039      	str	r1, [r7, #0]
 801232c:	71fb      	strb	r3, [r7, #7]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801232e:	2300      	movs	r3, #0
 8012330:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53L1_hist_pulse_data_t  tmp;
	VL53L1_hist_pulse_data_t *ptmp = &tmp;
 8012334:	f107 030c 	add.w	r3, r7, #12
 8012338:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_hist_pulse_data_t *p0;
	VL53L1_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 801233a:	2300      	movs	r3, #0
 801233c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 8012340:	2301      	movs	r3, #1
 8012342:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 801234c:	2b01      	cmp	r3, #1
 801234e:	d965      	bls.n	801241c <VL53L1_f_028+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 8012350:	e05f      	b.n	8012412 <VL53L1_f_028+0xf0>

		swapped = 0;
 8012352:	2300      	movs	r3, #0
 8012354:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 8012358:	2301      	movs	r3, #1
 801235a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801235e:	e051      	b.n	8012404 <VL53L1_f_028+0xe2>

			p0 = &(palgo->VL53L1_p_002[i-1]);
 8012360:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012364:	1e5a      	subs	r2, r3, #1
 8012366:	4613      	mov	r3, r2
 8012368:	00db      	lsls	r3, r3, #3
 801236a:	4413      	add	r3, r2
 801236c:	009b      	lsls	r3, r3, #2
 801236e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012372:	683a      	ldr	r2, [r7, #0]
 8012374:	4413      	add	r3, r2
 8012376:	3304      	adds	r3, #4
 8012378:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53L1_p_002[i]);
 801237a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801237e:	4613      	mov	r3, r2
 8012380:	00db      	lsls	r3, r3, #3
 8012382:	4413      	add	r3, r2
 8012384:	009b      	lsls	r3, r3, #2
 8012386:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801238a:	683a      	ldr	r2, [r7, #0]
 801238c:	4413      	add	r3, r2
 801238e:	3304      	adds	r3, #4
 8012390:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 8012392:	79fb      	ldrb	r3, [r7, #7]
 8012394:	2b02      	cmp	r3, #2
 8012396:	d118      	bne.n	80123ca <VL53L1_f_028+0xa8>
			== VL53L1_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53L1_p_013 <
 8012398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801239a:	691a      	ldr	r2, [r3, #16]
						p1->VL53L1_p_013) {
 801239c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801239e:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53L1_p_013 <
 80123a0:	429a      	cmp	r2, r3
 80123a2:	da2a      	bge.n	80123fa <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 80123a4:	2224      	movs	r2, #36	; 0x24
 80123a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80123a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80123aa:	f00b ffdd 	bl	801e368 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 80123ae:	2224      	movs	r2, #36	; 0x24
 80123b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80123b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123b4:	f00b ffd8 	bl	801e368 <memcpy>
					p0, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 80123b8:	2224      	movs	r2, #36	; 0x24
 80123ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80123bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80123be:	f00b ffd3 	bl	801e368 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 80123c2:	2301      	movs	r3, #1
 80123c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80123c8:	e017      	b.n	80123fa <VL53L1_f_028+0xd8>
				}

			} else {

				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 80123ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123cc:	699a      	ldr	r2, [r3, #24]
 80123ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d0:	699b      	ldr	r3, [r3, #24]
 80123d2:	429a      	cmp	r2, r3
 80123d4:	d911      	bls.n	80123fa <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 80123d6:	2224      	movs	r2, #36	; 0x24
 80123d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80123da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80123dc:	f00b ffc4 	bl	801e368 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 80123e0:	2224      	movs	r2, #36	; 0x24
 80123e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80123e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123e6:	f00b ffbf 	bl	801e368 <memcpy>
					p0,   sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 80123ea:	2224      	movs	r2, #36	; 0x24
 80123ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80123ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80123f0:	f00b ffba 	bl	801e368 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 80123f4:	2301      	movs	r3, #1
 80123f6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 80123fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80123fe:	3301      	adds	r3, #1
 8012400:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 801240a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801240e:	429a      	cmp	r2, r3
 8012410:	d3a6      	bcc.n	8012360 <VL53L1_f_028+0x3e>
	while (swapped > 0) {
 8012412:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8012416:	2b00      	cmp	r3, #0
 8012418:	d19b      	bne.n	8012352 <VL53L1_f_028+0x30>

			}
		}
	}

ENDFUNC:
 801241a:	e000      	b.n	801241e <VL53L1_f_028+0xfc>
		goto ENDFUNC;
 801241c:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 801241e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 8012422:	4618      	mov	r0, r3
 8012424:	3740      	adds	r7, #64	; 0x40
 8012426:	46bd      	mov	sp, r7
 8012428:	bd80      	pop	{r7, pc}

0801242a <VL53L1_f_022>:

VL53L1_Error VL53L1_f_022(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 801242a:	b480      	push	{r7}
 801242c:	b087      	sub	sp, #28
 801242e:	af00      	add	r7, sp, #0
 8012430:	4603      	mov	r3, r0
 8012432:	60b9      	str	r1, [r7, #8]
 8012434:	607a      	str	r2, [r7, #4]
 8012436:	73fb      	strb	r3, [r7, #15]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012438:	2300      	movs	r3, #0
 801243a:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 801243c:	2300      	movs	r3, #0
 801243e:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8012440:	2300      	movs	r3, #0
 8012442:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8012444:	7bfa      	ldrb	r2, [r7, #15]
 8012446:	4613      	mov	r3, r2
 8012448:	00db      	lsls	r3, r3, #3
 801244a:	4413      	add	r3, r2
 801244c:	009b      	lsls	r3, r3, #2
 801244e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012452:	687a      	ldr	r2, [r7, #4]
 8012454:	4413      	add	r3, r2
 8012456:	3304      	adds	r3, #4
 8012458:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 801245a:	693b      	ldr	r3, [r7, #16]
 801245c:	2200      	movs	r2, #0
 801245e:	60da      	str	r2, [r3, #12]
	pdata->VL53L1_p_020 = 0;
 8012460:	693b      	ldr	r3, [r7, #16]
 8012462:	2200      	movs	r2, #0
 8012464:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8012466:	693b      	ldr	r3, [r7, #16]
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	75fb      	strb	r3, [r7, #23]
 801246c:	e01c      	b.n	80124a8 <VL53L1_f_022+0x7e>
		i =  lb % palgo->VL53L1_p_031;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	78da      	ldrb	r2, [r3, #3]
 8012472:	7dfb      	ldrb	r3, [r7, #23]
 8012474:	fbb3 f1f2 	udiv	r1, r3, r2
 8012478:	fb01 f202 	mul.w	r2, r1, r2
 801247c:	1a9b      	subs	r3, r3, r2
 801247e:	757b      	strb	r3, [r7, #21]
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 8012480:	693b      	ldr	r3, [r7, #16]
 8012482:	68da      	ldr	r2, [r3, #12]
 8012484:	7d79      	ldrb	r1, [r7, #21]
 8012486:	68bb      	ldr	r3, [r7, #8]
 8012488:	3106      	adds	r1, #6
 801248a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801248e:	441a      	add	r2, r3
 8012490:	693b      	ldr	r3, [r7, #16]
 8012492:	60da      	str	r2, [r3, #12]
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 8012494:	693b      	ldr	r3, [r7, #16]
 8012496:	689a      	ldr	r2, [r3, #8]
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	689b      	ldr	r3, [r3, #8]
 801249c:	441a      	add	r2, r3
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 80124a2:	7dfb      	ldrb	r3, [r7, #23]
 80124a4:	3301      	adds	r3, #1
 80124a6:	75fb      	strb	r3, [r7, #23]
 80124a8:	693b      	ldr	r3, [r7, #16]
 80124aa:	791b      	ldrb	r3, [r3, #4]
 80124ac:	7dfa      	ldrb	r2, [r7, #23]
 80124ae:	429a      	cmp	r2, r3
 80124b0:	d9dd      	bls.n	801246e <VL53L1_f_022+0x44>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	68da      	ldr	r2, [r3, #12]
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	689b      	ldr	r3, [r3, #8]
 80124ba:	1ad2      	subs	r2, r2, r3
	pdata->VL53L1_p_013 =
 80124bc:	693b      	ldr	r3, [r7, #16]
 80124be:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 80124c0:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80124c4:	4618      	mov	r0, r3
 80124c6:	371c      	adds	r7, #28
 80124c8:	46bd      	mov	sp, r7
 80124ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ce:	4770      	bx	lr

080124d0 <VL53L1_f_027>:
VL53L1_Error VL53L1_f_027(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 80124d0:	b590      	push	{r4, r7, lr}
 80124d2:	b08d      	sub	sp, #52	; 0x34
 80124d4:	af02      	add	r7, sp, #8
 80124d6:	60ba      	str	r2, [r7, #8]
 80124d8:	607b      	str	r3, [r7, #4]
 80124da:	4603      	mov	r3, r0
 80124dc:	73fb      	strb	r3, [r7, #15]
 80124de:	460b      	mov	r3, r1
 80124e0:	73bb      	strb	r3, [r7, #14]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80124e2:	2300      	movs	r3, #0
 80124e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 80124e8:	2300      	movs	r3, #0
 80124ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53L1_p_015 = 0;
 80124ee:	2300      	movs	r3, #0
 80124f0:	843b      	strh	r3, [r7, #32]
	int16_t   VL53L1_p_016   = 0;
 80124f2:	2300      	movs	r3, #0
 80124f4:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 80124f6:	2300      	movs	r3, #0
 80124f8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 80124fa:	2300      	movs	r3, #0
 80124fc:	61bb      	str	r3, [r7, #24]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80124fe:	7bfa      	ldrb	r2, [r7, #15]
 8012500:	4613      	mov	r3, r2
 8012502:	00db      	lsls	r3, r3, #3
 8012504:	4413      	add	r3, r2
 8012506:	009b      	lsls	r3, r3, #2
 8012508:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801250c:	687a      	ldr	r2, [r7, #4]
 801250e:	4413      	add	r3, r2
 8012510:	3304      	adds	r3, #4
 8012512:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53L1_p_025 == 0xFF)
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	789b      	ldrb	r3, [r3, #2]
 8012518:	2bff      	cmp	r3, #255	; 0xff
 801251a:	d102      	bne.n	8012522 <VL53L1_f_027+0x52>
		pdata->VL53L1_p_025 = 1;
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	2201      	movs	r2, #1
 8012520:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	789b      	ldrb	r3, [r3, #2]
 8012526:	687a      	ldr	r2, [r7, #4]
 8012528:	78d2      	ldrb	r2, [r2, #3]
 801252a:	fbb3 f1f2 	udiv	r1, r3, r2
 801252e:	fb01 f202 	mul.w	r2, r1, r2
 8012532:	1a9b      	subs	r3, r3, r2
 8012534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53L1_p_015  = (int16_t)i;
 8012538:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801253c:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	b29a      	uxth	r2, r3
 8012544:	8c3b      	ldrh	r3, [r7, #32]
 8012546:	4413      	add	r3, r2
 8012548:	b29b      	uxth	r3, r3
 801254a:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 801254c:	8c3a      	ldrh	r2, [r7, #32]
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	789b      	ldrb	r3, [r3, #2]
 8012552:	b29b      	uxth	r3, r3
 8012554:	1ad3      	subs	r3, r2, r3
 8012556:	b29b      	uxth	r3, r3
 8012558:	843b      	strh	r3, [r7, #32]

	VL53L1_p_016    = (int16_t)i;
 801255a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801255e:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	791b      	ldrb	r3, [r3, #4]
 8012564:	b29a      	uxth	r2, r3
 8012566:	8bfb      	ldrh	r3, [r7, #30]
 8012568:	4413      	add	r3, r2
 801256a:	b29b      	uxth	r3, r3
 801256c:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 801256e:	8bfa      	ldrh	r2, [r7, #30]
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	789b      	ldrb	r3, [r3, #2]
 8012574:	b29b      	uxth	r3, r3
 8012576:	1ad3      	subs	r3, r2, r3
 8012578:	b29b      	uxth	r3, r3
 801257a:	83fb      	strh	r3, [r7, #30]


	window_width = VL53L1_p_016 - VL53L1_p_015;
 801257c:	8bfa      	ldrh	r2, [r7, #30]
 801257e:	8c3b      	ldrh	r3, [r7, #32]
 8012580:	1ad3      	subs	r3, r2, r3
 8012582:	b29b      	uxth	r3, r3
 8012584:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 8012586:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801258a:	2b03      	cmp	r3, #3
 801258c:	dd01      	ble.n	8012592 <VL53L1_f_027+0xc2>
		window_width = 3;
 801258e:	2303      	movs	r3, #3
 8012590:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53L1_f_030(
			VL53L1_p_015,
			VL53L1_p_015 + window_width,
 8012592:	8c3a      	ldrh	r2, [r7, #32]
 8012594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012596:	4413      	add	r3, r2
 8012598:	b29b      	uxth	r3, r3
		VL53L1_f_030(
 801259a:	b219      	sxth	r1, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	78da      	ldrb	r2, [r3, #3]
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	3314      	adds	r3, #20
 80125a4:	7bbc      	ldrb	r4, [r7, #14]
 80125a6:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80125aa:	9301      	str	r3, [sp, #4]
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	9300      	str	r3, [sp, #0]
 80125b0:	4623      	mov	r3, r4
 80125b2:	f000 f846 	bl	8012642 <VL53L1_f_030>
 80125b6:	4603      	mov	r3, r0
 80125b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53L1_p_028));


	if (status == VL53L1_ERROR_NONE)
 80125bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d114      	bne.n	80125ee <VL53L1_f_027+0x11e>
		status =
			VL53L1_f_030(
				VL53L1_p_016 - window_width,
 80125c4:	8bfa      	ldrh	r2, [r7, #30]
 80125c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80125c8:	1ad3      	subs	r3, r2, r3
 80125ca:	b29b      	uxth	r3, r3
			VL53L1_f_030(
 80125cc:	b218      	sxth	r0, r3
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	78da      	ldrb	r2, [r3, #3]
 80125d2:	697b      	ldr	r3, [r7, #20]
 80125d4:	331c      	adds	r3, #28
 80125d6:	7bbc      	ldrb	r4, [r7, #14]
 80125d8:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80125dc:	9301      	str	r3, [sp, #4]
 80125de:	68bb      	ldr	r3, [r7, #8]
 80125e0:	9300      	str	r3, [sp, #0]
 80125e2:	4623      	mov	r3, r4
 80125e4:	f000 f82d 	bl	8012642 <VL53L1_f_030>
 80125e8:	4603      	mov	r3, r0
 80125ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53L1_p_029));


	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	695a      	ldr	r2, [r3, #20]
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	69db      	ldr	r3, [r3, #28]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d909      	bls.n	801260e <VL53L1_f_027+0x13e>
		tmp_phase        = pdata->VL53L1_p_028;
 80125fa:	697b      	ldr	r3, [r7, #20]
 80125fc:	695b      	ldr	r3, [r3, #20]
 80125fe:	61bb      	str	r3, [r7, #24]
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	69da      	ldr	r2, [r3, #28]
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	615a      	str	r2, [r3, #20]
		pdata->VL53L1_p_029 = tmp_phase;
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	69ba      	ldr	r2, [r7, #24]
 801260c:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	699a      	ldr	r2, [r3, #24]
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	695b      	ldr	r3, [r3, #20]
 8012616:	429a      	cmp	r2, r3
 8012618:	d203      	bcs.n	8012622 <VL53L1_f_027+0x152>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	699a      	ldr	r2, [r3, #24]
 801261e:	697b      	ldr	r3, [r7, #20]
 8012620:	615a      	str	r2, [r3, #20]


	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	699a      	ldr	r2, [r3, #24]
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	69db      	ldr	r3, [r3, #28]
 801262a:	429a      	cmp	r2, r3
 801262c:	d903      	bls.n	8012636 <VL53L1_f_027+0x166>
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 801262e:	697b      	ldr	r3, [r7, #20]
 8012630:	699a      	ldr	r2, [r3, #24]
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 8012636:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801263a:	4618      	mov	r0, r3
 801263c:	372c      	adds	r7, #44	; 0x2c
 801263e:	46bd      	mov	sp, r7
 8012640:	bd90      	pop	{r4, r7, pc}

08012642 <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 8012642:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012646:	b09d      	sub	sp, #116	; 0x74
 8012648:	af00      	add	r7, sp, #0
 801264a:	461c      	mov	r4, r3
 801264c:	4603      	mov	r3, r0
 801264e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8012652:	460b      	mov	r3, r1
 8012654:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8012658:	4613      	mov	r3, r2
 801265a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801265e:	4623      	mov	r3, r4
 8012660:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012664:	2300      	movs	r3, #0
 8012666:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 801266a:	2300      	movs	r3, #0
 801266c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 8012670:	2300      	movs	r3, #0
 8012672:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53L1_p_008        = 0;
 8012676:	f04f 0200 	mov.w	r2, #0
 801267a:	f04f 0300 	mov.w	r3, #0
 801267e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 8012682:	f04f 0200 	mov.w	r2, #0
 8012686:	f04f 0300 	mov.w	r3, #0
 801268a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 801268e:	f04f 0200 	mov.w	r2, #0
 8012692:	f04f 0300 	mov.w	r3, #0
 8012696:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 801269a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801269e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80126a2:	6013      	str	r3, [r2, #0]

	if (VL53L1_p_031 != 0)
 80126a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	f000 809c 	beq.w	80127e6 <VL53L1_f_030+0x1a4>
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 80126ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80126b2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80126b6:	e08f      	b.n	80127d8 <VL53L1_f_030+0x196>

		if (lb < 0)
 80126b8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80126bc:	2b00      	cmp	r3, #0
 80126be:	da09      	bge.n	80126d4 <VL53L1_f_030+0x92>
			i = lb + (int16_t)VL53L1_p_031;
 80126c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80126c4:	b29a      	uxth	r2, r3
 80126c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80126ca:	4413      	add	r3, r2
 80126cc:	b29b      	uxth	r3, r3
 80126ce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80126d2:	e00a      	b.n	80126ea <VL53L1_f_030+0xa8>
		else
			i = lb % (int16_t)VL53L1_p_031;
 80126d4:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 80126d8:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80126dc:	fb91 f3f2 	sdiv	r3, r1, r2
 80126e0:	fb02 f303 	mul.w	r3, r2, r3
 80126e4:	1acb      	subs	r3, r1, r3
 80126e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 80126ea:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	db6b      	blt.n	80127ca <VL53L1_f_030+0x188>
 80126f2:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80126f6:	2b17      	cmp	r3, #23
 80126f8:	dc67      	bgt.n	80127ca <VL53L1_f_030+0x188>
			VL53L1_p_008 =
				(int64_t)pbins->bin_data[i] -
 80126fa:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80126fe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012702:	3306      	adds	r3, #6
 8012704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012708:	17da      	asrs	r2, r3, #31
 801270a:	633b      	str	r3, [r7, #48]	; 0x30
 801270c:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53L1_p_004;
 801270e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012712:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012716:	17da      	asrs	r2, r3, #31
 8012718:	62bb      	str	r3, [r7, #40]	; 0x28
 801271a:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53L1_p_008 =
 801271c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801271e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8012722:	4602      	mov	r2, r0
 8012724:	1a9b      	subs	r3, r3, r2
 8012726:	623b      	str	r3, [r7, #32]
 8012728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801272a:	460a      	mov	r2, r1
 801272c:	eb63 0302 	sbc.w	r3, r3, r2
 8012730:	627b      	str	r3, [r7, #36]	; 0x24
 8012732:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8012736:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53L1_p_008 < 0)
 801273a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801273e:	2b00      	cmp	r3, #0
 8012740:	d009      	beq.n	8012756 <VL53L1_f_030+0x114>
 8012742:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8012746:	2b00      	cmp	r3, #0
 8012748:	da05      	bge.n	8012756 <VL53L1_f_030+0x114>
				VL53L1_p_008 = 0;
 801274a:	f04f 0200 	mov.w	r2, #0
 801274e:	f04f 0300 	mov.w	r3, #0
 8012752:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53L1_p_008;
 8012756:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801275a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801275e:	1884      	adds	r4, r0, r2
 8012760:	61bc      	str	r4, [r7, #24]
 8012762:	eb41 0303 	adc.w	r3, r1, r3
 8012766:	61fb      	str	r3, [r7, #28]
 8012768:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801276c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 8012770:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8012774:	17da      	asrs	r2, r3, #31
 8012776:	63bb      	str	r3, [r7, #56]	; 0x38
 8012778:	63fa      	str	r2, [r7, #60]	; 0x3c
 801277a:	f04f 0200 	mov.w	r2, #0
 801277e:	f04f 0300 	mov.w	r3, #0
 8012782:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012784:	02cb      	lsls	r3, r1, #11
 8012786:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012788:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 801278c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801278e:	02ca      	lsls	r2, r1, #11
 8012790:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 8012794:	f143 0600 	adc.w	r6, r3, #0
 8012798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801279a:	fb06 f203 	mul.w	r2, r6, r3
 801279e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80127a0:	fb05 f303 	mul.w	r3, r5, r3
 80127a4:	441a      	add	r2, r3
 80127a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80127a8:	fba3 ab05 	umull	sl, fp, r3, r5
 80127ac:	eb02 030b 	add.w	r3, r2, fp
 80127b0:	469b      	mov	fp, r3
			weighted_sum +=
 80127b2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80127b6:	eb12 010a 	adds.w	r1, r2, sl
 80127ba:	6139      	str	r1, [r7, #16]
 80127bc:	eb43 030b 	adc.w	r3, r3, fp
 80127c0:	617b      	str	r3, [r7, #20]
 80127c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80127c6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 80127ca:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80127ce:	b29b      	uxth	r3, r3
 80127d0:	3301      	adds	r3, #1
 80127d2:	b29b      	uxth	r3, r3
 80127d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80127d8:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 80127dc:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80127e0:	429a      	cmp	r2, r3
 80127e2:	f77f af69 	ble.w	80126b8 <VL53L1_f_030+0x76>
			VL53L1_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 80127e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80127ea:	2a01      	cmp	r2, #1
 80127ec:	f173 0300 	sbcs.w	r3, r3, #0
 80127f0:	db3b      	blt.n	801286a <VL53L1_f_030+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 80127f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80127f6:	0fd9      	lsrs	r1, r3, #31
 80127f8:	2000      	movs	r0, #0
 80127fa:	60b9      	str	r1, [r7, #8]
 80127fc:	60f8      	str	r0, [r7, #12]
 80127fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8012802:	4621      	mov	r1, r4
 8012804:	eb11 0802 	adds.w	r8, r1, r2
 8012808:	4629      	mov	r1, r5
 801280a:	eb41 0903 	adc.w	r9, r1, r3
 801280e:	f04f 0200 	mov.w	r2, #0
 8012812:	f04f 0300 	mov.w	r3, #0
 8012816:	ea4f 0258 	mov.w	r2, r8, lsr #1
 801281a:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 801281e:	ea4f 0369 	mov.w	r3, r9, asr #1
 8012822:	4610      	mov	r0, r2
 8012824:	4619      	mov	r1, r3
 8012826:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801282a:	1814      	adds	r4, r2, r0
 801282c:	603c      	str	r4, [r7, #0]
 801282e:	414b      	adcs	r3, r1
 8012830:	607b      	str	r3, [r7, #4]
 8012832:	e9d7 3400 	ldrd	r3, r4, [r7]
 8012836:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 801283a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801283e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8012842:	f7ed ff77 	bl	8000734 <__aeabi_ldivmod>
 8012846:	4602      	mov	r2, r0
 8012848:	460b      	mov	r3, r1
 801284a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 801284e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012852:	2b00      	cmp	r3, #0
 8012854:	da05      	bge.n	8012862 <VL53L1_f_030+0x220>
			weighted_sum = 0;
 8012856:	f04f 0200 	mov.w	r2, #0
 801285a:	f04f 0300 	mov.w	r3, #0
 801285e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 8012862:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012864:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012868:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 801286a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 801286e:	4618      	mov	r0, r3
 8012870:	3774      	adds	r7, #116	; 0x74
 8012872:	46bd      	mov	sp, r7
 8012874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012878 <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b086      	sub	sp, #24
 801287c:	af00      	add	r7, sp, #0
 801287e:	60b9      	str	r1, [r7, #8]
 8012880:	607a      	str	r2, [r7, #4]
 8012882:	603b      	str	r3, [r7, #0]
 8012884:	4603      	mov	r3, r0
 8012886:	73fb      	strb	r3, [r7, #15]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012888:	2300      	movs	r3, #0
 801288a:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 801288c:	2300      	movs	r3, #0
 801288e:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8012890:	2300      	movs	r3, #0
 8012892:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8012894:	7bfa      	ldrb	r2, [r7, #15]
 8012896:	4613      	mov	r3, r2
 8012898:	00db      	lsls	r3, r3, #3
 801289a:	4413      	add	r3, r2
 801289c:	009b      	lsls	r3, r3, #2
 801289e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80128a2:	687a      	ldr	r2, [r7, #4]
 80128a4:	4413      	add	r3, r2
 80128a6:	3304      	adds	r3, #4
 80128a8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 80128aa:	22ac      	movs	r2, #172	; 0xac
 80128ac:	68b9      	ldr	r1, [r7, #8]
 80128ae:	6a38      	ldr	r0, [r7, #32]
 80128b0:	f00b fd5a 	bl	801e368 <memcpy>



	for (lb = palgo->VL53L1_p_049;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80128ba:	75fb      	strb	r3, [r7, #23]
 80128bc:	e020      	b.n	8012900 <VL53L1_f_023+0x88>
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	781b      	ldrb	r3, [r3, #0]
 80128c2:	7dfa      	ldrb	r2, [r7, #23]
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d304      	bcc.n	80128d2 <VL53L1_f_023+0x5a>
 80128c8:	693b      	ldr	r3, [r7, #16]
 80128ca:	791b      	ldrb	r3, [r3, #4]
 80128cc:	7dfa      	ldrb	r2, [r7, #23]
 80128ce:	429a      	cmp	r2, r3
 80128d0:	d913      	bls.n	80128fa <VL53L1_f_023+0x82>
			i =  lb % palgo->VL53L1_p_031;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	78da      	ldrb	r2, [r3, #3]
 80128d6:	7dfb      	ldrb	r3, [r7, #23]
 80128d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80128dc:	fb01 f202 	mul.w	r2, r1, r2
 80128e0:	1a9b      	subs	r3, r3, r2
 80128e2:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53L1_p_024)
 80128e4:	6a3b      	ldr	r3, [r7, #32]
 80128e6:	7a9b      	ldrb	r3, [r3, #10]
 80128e8:	7d7a      	ldrb	r2, [r7, #21]
 80128ea:	429a      	cmp	r2, r3
 80128ec:	d205      	bcs.n	80128fa <VL53L1_f_023+0x82>
				ppulse->bin_data[i] = pad_value;
 80128ee:	7d7a      	ldrb	r2, [r7, #21]
 80128f0:	6a3b      	ldr	r3, [r7, #32]
 80128f2:	3206      	adds	r2, #6
 80128f4:	6839      	ldr	r1, [r7, #0]
 80128f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 80128fa:	7dfb      	ldrb	r3, [r7, #23]
 80128fc:	3301      	adds	r3, #1
 80128fe:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53L1_p_049 +
 8012900:	7dfa      	ldrb	r2, [r7, #23]
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8012908:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 801290e:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 8012910:	429a      	cmp	r2, r3
 8012912:	dbd4      	blt.n	80128be <VL53L1_f_023+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8012914:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8012918:	4618      	mov	r0, r3
 801291a:	3718      	adds	r7, #24
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}

08012920 <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 8012920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012924:	b096      	sub	sp, #88	; 0x58
 8012926:	af08      	add	r7, sp, #32
 8012928:	4604      	mov	r4, r0
 801292a:	4608      	mov	r0, r1
 801292c:	4611      	mov	r1, r2
 801292e:	461a      	mov	r2, r3
 8012930:	4623      	mov	r3, r4
 8012932:	73fb      	strb	r3, [r7, #15]
 8012934:	4603      	mov	r3, r0
 8012936:	73bb      	strb	r3, [r7, #14]
 8012938:	460b      	mov	r3, r1
 801293a:	737b      	strb	r3, [r7, #13]
 801293c:	4613      	mov	r3, r2
 801293e:	733b      	strb	r3, [r7, #12]


	VL53L1_Error status      = VL53L1_ERROR_NONE;
 8012940:	2300      	movs	r3, #0
 8012942:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_Error func_status = VL53L1_ERROR_NONE;
 8012946:	2300      	movs	r3, #0
 8012948:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 801294c:	2300      	movs	r3, #0
 801294e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53L1_p_003    = 0;
 8012952:	2300      	movs	r3, #0
 8012954:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53L1_p_018    = 0;
 8012956:	2300      	movs	r3, #0
 8012958:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53L1_p_001    = 0;
 801295a:	2300      	movs	r3, #0
 801295c:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 801295e:	2300      	movs	r3, #0
 8012960:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 8012962:	2300      	movs	r3, #0
 8012964:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 8012966:	2300      	movs	r3, #0
 8012968:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 801296a:	2300      	movs	r3, #0
 801296c:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 801296e:	2300      	movs	r3, #0
 8012970:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_031 == 0) {
 8012972:	7b7b      	ldrb	r3, [r7, #13]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d106      	bne.n	8012986 <VL53L1_f_026+0x66>
		*psigma_est = 0xFFFF;
 8012978:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801297a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801297e:	801a      	strh	r2, [r3, #0]
		return VL53L1_ERROR_DIVISION_BY_ZERO;
 8012980:	f06f 030e 	mvn.w	r3, #14
 8012984:	e06f      	b.n	8012a66 <VL53L1_f_026+0x146>
	}
	i = bin % VL53L1_p_031;
 8012986:	7bfb      	ldrb	r3, [r7, #15]
 8012988:	7b7a      	ldrb	r2, [r7, #13]
 801298a:	fbb3 f1f2 	udiv	r1, r3, r2
 801298e:	fb01 f202 	mul.w	r2, r1, r2
 8012992:	1a9b      	subs	r3, r3, r2
 8012994:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53L1_f_013(
 8012998:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801299c:	7b39      	ldrb	r1, [r7, #12]
 801299e:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 80129a2:	f107 0320 	add.w	r3, r7, #32
 80129a6:	9301      	str	r3, [sp, #4]
 80129a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80129ac:	9300      	str	r3, [sp, #0]
 80129ae:	4613      	mov	r3, r2
 80129b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80129b2:	f000 fddb 	bl	801356c <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 80129b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80129ba:	7b39      	ldrb	r1, [r7, #12]
 80129bc:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 80129c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80129c4:	9301      	str	r3, [sp, #4]
 80129c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80129ca:	9300      	str	r3, [sp, #0]
 80129cc:	4613      	mov	r3, r2
 80129ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80129d0:	f000 fdcc 	bl	801356c <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 80129d4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d00e      	beq.n	80129fa <VL53L1_f_026+0xda>
		VL53L1_f_013(
 80129dc:	f107 021c 	add.w	r2, r7, #28
 80129e0:	7b39      	ldrb	r1, [r7, #12]
 80129e2:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 80129e6:	f107 0314 	add.w	r3, r7, #20
 80129ea:	9301      	str	r3, [sp, #4]
 80129ec:	f107 0318 	add.w	r3, r7, #24
 80129f0:	9300      	str	r3, [sp, #0]
 80129f2:	4613      	mov	r3, r2
 80129f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80129f6:	f000 fdb9 	bl	801356c <VL53L1_f_013>




	func_status =
		VL53L1_f_014(
 80129fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fc:	469c      	mov	ip, r3
 80129fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a00:	469e      	mov	lr, r3
 8012a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a04:	4698      	mov	r8, r3
 8012a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a08:	4619      	mov	r1, r3
 8012a0a:	6a3b      	ldr	r3, [r7, #32]
 8012a0c:	461c      	mov	r4, r3
 8012a0e:	69bb      	ldr	r3, [r7, #24]
 8012a10:	461d      	mov	r5, r3
 8012a12:	69fb      	ldr	r3, [r7, #28]
 8012a14:	461e      	mov	r6, r3
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53L1_p_004,
 8012a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53L1_f_014(
 8012a20:	607b      	str	r3, [r7, #4]
 8012a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a24:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8012a28:	7bb8      	ldrb	r0, [r7, #14]
 8012a2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012a2c:	9207      	str	r2, [sp, #28]
 8012a2e:	9306      	str	r3, [sp, #24]
 8012a30:	687a      	ldr	r2, [r7, #4]
 8012a32:	9205      	str	r2, [sp, #20]
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	9304      	str	r3, [sp, #16]
 8012a38:	9603      	str	r6, [sp, #12]
 8012a3a:	9502      	str	r5, [sp, #8]
 8012a3c:	9401      	str	r4, [sp, #4]
 8012a3e:	9100      	str	r1, [sp, #0]
 8012a40:	4643      	mov	r3, r8
 8012a42:	4672      	mov	r2, lr
 8012a44:	4661      	mov	r1, ip
 8012a46:	f002 ff30 	bl	80158aa <VL53L1_f_014>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 8012a50:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8012a54:	f113 0f0f 	cmn.w	r3, #15
 8012a58:	d103      	bne.n	8012a62 <VL53L1_f_026+0x142>
		*psigma_est = 0xFFFF;
 8012a5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a60:	801a      	strh	r2, [r3, #0]


	return status;
 8012a62:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8012a66:	4618      	mov	r0, r3
 8012a68:	3738      	adds	r7, #56	; 0x38
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a70 <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 8012a70:	b490      	push	{r4, r7}
 8012a72:	b084      	sub	sp, #16
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	4604      	mov	r4, r0
 8012a78:	4608      	mov	r0, r1
 8012a7a:	4611      	mov	r1, r2
 8012a7c:	461a      	mov	r2, r3
 8012a7e:	4623      	mov	r3, r4
 8012a80:	71fb      	strb	r3, [r7, #7]
 8012a82:	4603      	mov	r3, r0
 8012a84:	71bb      	strb	r3, [r7, #6]
 8012a86:	460b      	mov	r3, r1
 8012a88:	717b      	strb	r3, [r7, #5]
 8012a8a:	4613      	mov	r3, r2
 8012a8c:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 8012a8e:	2300      	movs	r3, #0
 8012a90:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 8012a92:	2300      	movs	r3, #0
 8012a94:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 8012a96:	6a3b      	ldr	r3, [r7, #32]
 8012a98:	79fa      	ldrb	r2, [r7, #7]
 8012a9a:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 8012a9c:	6a3b      	ldr	r3, [r7, #32]
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 8012aa2:	69fb      	ldr	r3, [r7, #28]
 8012aa4:	781a      	ldrb	r2, [r3, #0]
 8012aa6:	6a3b      	ldr	r3, [r7, #32]
 8012aa8:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 8012aaa:	69fb      	ldr	r3, [r7, #28]
 8012aac:	785a      	ldrb	r2, [r3, #1]
 8012aae:	6a3b      	ldr	r3, [r7, #32]
 8012ab0:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 8012ab2:	69fb      	ldr	r3, [r7, #28]
 8012ab4:	789a      	ldrb	r2, [r3, #2]
 8012ab6:	6a3b      	ldr	r3, [r7, #32]
 8012ab8:	729a      	strb	r2, [r3, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 8012aba:	69fb      	ldr	r3, [r7, #28]
 8012abc:	78da      	ldrb	r2, [r3, #3]
 8012abe:	6a3b      	ldr	r3, [r7, #32]
 8012ac0:	72da      	strb	r2, [r3, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 8012ac2:	69fb      	ldr	r3, [r7, #28]
 8012ac4:	791a      	ldrb	r2, [r3, #4]
 8012ac6:	6a3b      	ldr	r3, [r7, #32]
 8012ac8:	731a      	strb	r2, [r3, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 8012aca:	69fb      	ldr	r3, [r7, #28]
 8012acc:	795a      	ldrb	r2, [r3, #5]
 8012ace:	6a3b      	ldr	r3, [r7, #32]
 8012ad0:	735a      	strb	r2, [r3, #13]



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 8012ad2:	69fb      	ldr	r3, [r7, #28]
 8012ad4:	791a      	ldrb	r2, [r3, #4]
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	781b      	ldrb	r3, [r3, #0]
 8012ada:	1ad3      	subs	r3, r2, r3
 8012adc:	b2db      	uxtb	r3, r3
 8012ade:	3301      	adds	r3, #1
 8012ae0:	b2da      	uxtb	r2, r3
	pdata->VL53L1_p_030  =
 8012ae2:	6a3b      	ldr	r3, [r7, #32]
 8012ae4:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 8012ae6:	69bb      	ldr	r3, [r7, #24]
 8012ae8:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8012aec:	6a3b      	ldr	r3, [r7, #32]
 8012aee:	829a      	strh	r2, [r3, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 8012af0:	69fb      	ldr	r3, [r7, #28]
 8012af2:	8c1a      	ldrh	r2, [r3, #32]
 8012af4:	6a3b      	ldr	r3, [r7, #32]
 8012af6:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 8012af8:	69fb      	ldr	r3, [r7, #28]
 8012afa:	695b      	ldr	r3, [r3, #20]
 8012afc:	b29a      	uxth	r2, r3
 8012afe:	6a3b      	ldr	r3, [r7, #32]
 8012b00:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 8012b02:	69fb      	ldr	r3, [r7, #28]
 8012b04:	699b      	ldr	r3, [r3, #24]
 8012b06:	b29a      	uxth	r2, r3
 8012b08:	6a3b      	ldr	r3, [r7, #32]
 8012b0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 8012b0e:	69fb      	ldr	r3, [r7, #28]
 8012b10:	69db      	ldr	r3, [r3, #28]
 8012b12:	b29a      	uxth	r2, r3
 8012b14:	6a3b      	ldr	r3, [r7, #32]
 8012b16:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 8012b1a:	69fb      	ldr	r3, [r7, #28]
 8012b1c:	68db      	ldr	r3, [r3, #12]
 8012b1e:	461a      	mov	r2, r3
 8012b20:	6a3b      	ldr	r3, [r7, #32]
 8012b22:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 8012b24:	69fb      	ldr	r3, [r7, #28]
 8012b26:	691a      	ldr	r2, [r3, #16]
 8012b28:	6a3b      	ldr	r3, [r7, #32]
 8012b2a:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 8012b2c:	69fb      	ldr	r3, [r7, #28]
 8012b2e:	689b      	ldr	r3, [r3, #8]
 8012b30:	461a      	mov	r2, r3
 8012b32:	6a3b      	ldr	r3, [r7, #32]
 8012b34:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 8012b36:	69bb      	ldr	r3, [r7, #24]
 8012b38:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8012b3c:	6a3b      	ldr	r3, [r7, #32]
 8012b3e:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8012b40:	6a3b      	ldr	r3, [r7, #32]
 8012b42:	2213      	movs	r2, #19
 8012b44:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 8012b48:	887b      	ldrh	r3, [r7, #2]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d00a      	beq.n	8012b64 <VL53L1_f_029+0xf4>
		(uint32_t)ppulse->VL53L1_p_005 > ((uint32_t)sigma_thres << 5))
 8012b4e:	69fb      	ldr	r3, [r7, #28]
 8012b50:	8c1b      	ldrh	r3, [r3, #32]
 8012b52:	461a      	mov	r2, r3
 8012b54:	887b      	ldrh	r3, [r7, #2]
 8012b56:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	d903      	bls.n	8012b64 <VL53L1_f_029+0xf4>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 8012b5c:	6a3b      	ldr	r3, [r7, #32]
 8012b5e:	2206      	movs	r2, #6
 8012b60:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 8012b64:	79bb      	ldrb	r3, [r7, #6]
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	021b      	lsls	r3, r3, #8
 8012b6a:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 8012b6c:	6a3b      	ldr	r3, [r7, #32]
 8012b6e:	8a9b      	ldrh	r3, [r3, #20]
 8012b70:	89fa      	ldrh	r2, [r7, #14]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d205      	bcs.n	8012b82 <VL53L1_f_029+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 8012b76:	6a3b      	ldr	r3, [r7, #32]
 8012b78:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 8012b7a:	89fb      	ldrh	r3, [r7, #14]
 8012b7c:	1ad3      	subs	r3, r2, r3
 8012b7e:	81fb      	strh	r3, [r7, #14]
 8012b80:	e001      	b.n	8012b86 <VL53L1_f_029+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 8012b82:	2300      	movs	r3, #0
 8012b84:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 8012b86:	797b      	ldrb	r3, [r7, #5]
 8012b88:	b29b      	uxth	r3, r3
 8012b8a:	021b      	lsls	r3, r3, #8
 8012b8c:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 8012b8e:	69bb      	ldr	r3, [r7, #24]
 8012b90:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8012b94:	89bb      	ldrh	r3, [r7, #12]
 8012b96:	4413      	add	r3, r2
 8012b98:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 8012b9a:	6a3b      	ldr	r3, [r7, #32]
 8012b9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8012ba0:	89fa      	ldrh	r2, [r7, #14]
 8012ba2:	429a      	cmp	r2, r3
 8012ba4:	d805      	bhi.n	8012bb2 <VL53L1_f_029+0x142>
		pdata->VL53L1_p_014 > upper_phase_limit)
 8012ba6:	6a3b      	ldr	r3, [r7, #32]
 8012ba8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 8012bac:	89ba      	ldrh	r2, [r7, #12]
 8012bae:	429a      	cmp	r2, r3
 8012bb0:	d203      	bcs.n	8012bba <VL53L1_f_029+0x14a>
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 8012bb2:	6a3b      	ldr	r3, [r7, #32]
 8012bb4:	2205      	movs	r2, #5
 8012bb6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 8012bba:	bf00      	nop
 8012bbc:	3710      	adds	r7, #16
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bc90      	pop	{r4, r7}
 8012bc2:	4770      	bx	lr

08012bc4 <VL53L1_f_033>:
	VL53L1_hist_gen3_algo_private_data_t   *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53L1_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53L1_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 8012bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bc6:	b08f      	sub	sp, #60	; 0x3c
 8012bc8:	af06      	add	r7, sp, #24
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	60b9      	str	r1, [r7, #8]
 8012bce:	607a      	str	r2, [r7, #4]
 8012bd0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	77fb      	strb	r3, [r7, #31]

	VL53L1_hist_pulse_data_t     *ppulse_data;
	VL53L1_range_data_t          *prange_data;

	uint8_t                       p = 0;
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	77bb      	strb	r3, [r7, #30]
	VL53L1_histogram_bin_data_t *pB = &(palgo3->VL53L1_p_010);
 8012bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bdc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8012be0:	61bb      	str	r3, [r7, #24]





	VL53L1_f_016(palgo3);
 8012be2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012be4:	f7ff f856 	bl	8011c94 <VL53L1_f_016>



	memcpy(
		&(palgo3->VL53L1_p_010),
 8012be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bea:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 8012bee:	22ac      	movs	r2, #172	; 0xac
 8012bf0:	6839      	ldr	r1, [r7, #0]
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f00b fbb8 	bl	801e368 <memcpy>
		pbins_input,
		sizeof(VL53L1_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 8012bf8:	683b      	ldr	r3, [r7, #0]
 8012bfa:	781a      	ldrb	r2, [r3, #0]
 8012bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bfe:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	785a      	ldrb	r2, [r3, #1]
 8012c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c06:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	789a      	ldrb	r2, [r3, #2]
 8012c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c0e:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 8012c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c18:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 8012c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 8012c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c22:	2204      	movs	r2, #4
 8012c24:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 8012c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c28:	2200      	movs	r2, #0
 8012c2a:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	77bb      	strb	r3, [r7, #30]
 8012c30:	e008      	b.n	8012c44 <VL53L1_f_033+0x80>
		presults->VL53L1_p_007[p] = 0;
 8012c32:	7fbb      	ldrb	r3, [r7, #30]
 8012c34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c36:	005b      	lsls	r3, r3, #1
 8012c38:	4413      	add	r3, r2
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8012c3e:	7fbb      	ldrb	r3, [r7, #30]
 8012c40:	3301      	adds	r3, #1
 8012c42:	77bb      	strb	r3, [r7, #30]
 8012c44:	7fbb      	ldrb	r3, [r7, #30]
 8012c46:	2b04      	cmp	r3, #4
 8012c48:	d9f3      	bls.n	8012c32 <VL53L1_f_033+0x6e>



	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 8012c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c4c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7fd ff58 	bl	8010b06 <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	795b      	ldrb	r3, [r3, #5]
	VL53L1_hist_estimate_ambient_from_thresholded_bins(
 8012c5a:	461a      	mov	r2, r3
 8012c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c5e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8012c62:	4619      	mov	r1, r3
 8012c64:	4610      	mov	r0, r2
 8012c66:	f7fd ff8e 	bl	8010b86 <VL53L1_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53L1_p_010));

	VL53L1_hist_estimate_ambient_from_ambient_bins(
 8012c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c6c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8012c70:	4618      	mov	r0, r3
 8012c72:	f7fe fb66 	bl	8011342 <VL53L1_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53L1_p_010));


	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 8012c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c78:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f7fd fffc 	bl	8010c7a <VL53L1_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d009      	beq.n	8012ca0 <VL53L1_f_033+0xdc>
		VL53L1_f_004(
 8012c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c8e:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8012c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c94:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8012c98:	461a      	mov	r2, r3
 8012c9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012c9c:	f000 fdae 	bl	80137fc <VL53L1_f_004>
				&(palgo3->VL53L1_p_010),
				&(palgo3->VL53L1_p_038));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 8012ca4:	68bb      	ldr	r3, [r7, #8]
 8012ca6:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8012ca8:	2300      	movs	r3, #0
 8012caa:	77bb      	strb	r3, [r7, #30]
 8012cac:	e01e      	b.n	8012cec <VL53L1_f_033+0x128>
		if (status == VL53L1_ERROR_NONE) {
 8012cae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d117      	bne.n	8012ce6 <VL53L1_f_033+0x122>
			status =
			VL53L1_f_001(
 8012cb6:	7fbb      	ldrb	r3, [r7, #30]
 8012cb8:	68ba      	ldr	r2, [r7, #8]
 8012cba:	3304      	adds	r3, #4
 8012cbc:	005b      	lsls	r3, r3, #1
 8012cbe:	4413      	add	r3, r2
 8012cc0:	8898      	ldrh	r0, [r3, #4]
 8012cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cc4:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53L1_p_010),
				pdmax_algo,
				&(presults->VL53L1_p_007[p]));
 8012cc8:	7fbb      	ldrb	r3, [r7, #30]
			VL53L1_f_001(
 8012cca:	005b      	lsls	r3, r3, #1
 8012ccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012cce:	4413      	add	r3, r2
 8012cd0:	3304      	adds	r3, #4
 8012cd2:	9301      	str	r3, [sp, #4]
 8012cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012cd6:	9300      	str	r3, [sp, #0]
 8012cd8:	460b      	mov	r3, r1
 8012cda:	68ba      	ldr	r2, [r7, #8]
 8012cdc:	68f9      	ldr	r1, [r7, #12]
 8012cde:	f7fe fb7b 	bl	80113d8 <VL53L1_f_001>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8012ce6:	7fbb      	ldrb	r3, [r7, #30]
 8012ce8:	3301      	adds	r3, #1
 8012cea:	77bb      	strb	r3, [r7, #30]
 8012cec:	7fbb      	ldrb	r3, [r7, #30]
 8012cee:	2b04      	cmp	r3, #4
 8012cf0:	d9dd      	bls.n	8012cae <VL53L1_f_033+0xea>





	if (status == VL53L1_ERROR_NONE)
 8012cf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d11a      	bne.n	8012d30 <VL53L1_f_033+0x16c>
		status =
			VL53L1_f_018(
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	785b      	ldrb	r3, [r3, #1]
			VL53L1_f_018(
 8012d02:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	68dc      	ldr	r4, [r3, #12]
			VL53L1_f_018(
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 8012d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d10:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8012d14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d16:	f502 7252 	add.w	r2, r2, #840	; 0x348
 8012d1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012d1c:	9102      	str	r1, [sp, #8]
 8012d1e:	9201      	str	r2, [sp, #4]
 8012d20:	9300      	str	r3, [sp, #0]
 8012d22:	462b      	mov	r3, r5
 8012d24:	4622      	mov	r2, r4
 8012d26:	4631      	mov	r1, r6
 8012d28:	f7ff f82d 	bl	8011d86 <VL53L1_f_018>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	77fb      	strb	r3, [r7, #31]





	if (status == VL53L1_ERROR_NONE)
 8012d30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d104      	bne.n	8012d42 <VL53L1_f_033+0x17e>
		status =
			VL53L1_f_019(palgo3);
 8012d38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012d3a:	f7ff f954 	bl	8011fe6 <VL53L1_f_019>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8012d42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d104      	bne.n	8012d54 <VL53L1_f_033+0x190>
		status =
			VL53L1_f_020(palgo3);
 8012d4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012d4c:	f7ff f999 	bl	8012082 <VL53L1_f_020>
 8012d50:	4603      	mov	r3, r0
 8012d52:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8012d54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d104      	bne.n	8012d66 <VL53L1_f_033+0x1a2>
		status =
			VL53L1_f_021(palgo3);
 8012d5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012d5e:	f7ff fa0e 	bl	801217e <VL53L1_f_021>
 8012d62:	4603      	mov	r3, r0
 8012d64:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8012d66:	2300      	movs	r3, #0
 8012d68:	77bb      	strb	r3, [r7, #30]
 8012d6a:	e0a6      	b.n	8012eba <VL53L1_f_033+0x2f6>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8012d6c:	7fba      	ldrb	r2, [r7, #30]
 8012d6e:	4613      	mov	r3, r2
 8012d70:	00db      	lsls	r3, r3, #3
 8012d72:	4413      	add	r3, r2
 8012d74:	009b      	lsls	r3, r3, #2
 8012d76:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012d7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d7c:	4413      	add	r3, r2
 8012d7e:	3304      	adds	r3, #4
 8012d80:	617b      	str	r3, [r7, #20]



		if (status == VL53L1_ERROR_NONE)
 8012d82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d109      	bne.n	8012d9e <VL53L1_f_033+0x1da>
			status =
				VL53L1_f_022(
 8012d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d8c:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8012d90:	7fbb      	ldrb	r3, [r7, #30]
 8012d92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7ff fb48 	bl	801242a <VL53L1_f_022>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_010),
					palgo3);



		if (status == VL53L1_ERROR_NONE)
 8012d9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d110      	bne.n	8012dc8 <VL53L1_f_033+0x204>
			status =
				VL53L1_f_023(
 8012da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012da8:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8012dac:	69bb      	ldr	r3, [r7, #24]
 8012dae:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8012db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012db4:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8012db8:	7fb8      	ldrb	r0, [r7, #30]
 8012dba:	9300      	str	r3, [sp, #0]
 8012dbc:	4613      	mov	r3, r2
 8012dbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012dc0:	f7ff fd5a 	bl	8012878 <VL53L1_f_023>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	77fb      	strb	r3, [r7, #31]
					pB->VL53L1_p_004,
					&(palgo3->VL53L1_p_052));



		if (status == VL53L1_ERROR_NONE) {
 8012dc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d10d      	bne.n	8012dec <VL53L1_f_033+0x228>
			status =
				VL53L1_f_023(
 8012dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dd2:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8012dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dd8:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8012ddc:	7fb8      	ldrb	r0, [r7, #30]
 8012dde:	9300      	str	r3, [sp, #0]
 8012de0:	2300      	movs	r3, #0
 8012de2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012de4:	f7ff fd48 	bl	8012878 <VL53L1_f_023>
 8012de8:	4603      	mov	r3, r0
 8012dea:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_053));
		}



		if (status == VL53L1_ERROR_NONE) {
 8012dec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d10d      	bne.n	8012e10 <VL53L1_f_033+0x24c>
			status =
				VL53L1_f_023(
 8012df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012df6:	f503 7152 	add.w	r1, r3, #840	; 0x348
 8012dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dfc:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8012e00:	7fb8      	ldrb	r0, [r7, #30]
 8012e02:	9300      	str	r3, [sp, #0]
 8012e04:	2300      	movs	r3, #0
 8012e06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012e08:	f7ff fd36 	bl	8012878 <VL53L1_f_023>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_054));
		}



		if (status == VL53L1_ERROR_NONE)
 8012e10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d109      	bne.n	8012e2c <VL53L1_f_033+0x268>
			status =
				VL53L1_f_034(
 8012e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e1a:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 8012e1e:	7fb8      	ldrb	r0, [r7, #30]
 8012e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012e24:	f000 f8dd 	bl	8012fe2 <VL53L1_f_034>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53L1_ERROR_NONE)
 8012e2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d108      	bne.n	8012e46 <VL53L1_f_033+0x282>
			status =
				VL53L1_f_035(
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	8a19      	ldrh	r1, [r3, #16]
 8012e38:	7fb8      	ldrb	r0, [r7, #30]
 8012e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012e3e:	f000 f95c 	bl	80130fa <VL53L1_f_035>
 8012e42:	4603      	mov	r3, r0
 8012e44:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53L1_ERROR_NONE)
 8012e46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d124      	bne.n	8012e98 <VL53L1_f_033+0x2d4>
			status =
			VL53L1_f_026(
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	789d      	ldrb	r5, [r3, #2]
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	7e1e      	ldrb	r6, [r3, #24]
 8012e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e58:	f893 c003 	ldrb.w	ip, [r3, #3]
 8012e5c:	697b      	ldr	r3, [r7, #20]
 8012e5e:	f893 e006 	ldrb.w	lr, [r3, #6]
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012e6a:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 8012e6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012e70:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 8012e74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012e76:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 8012e7a:	697c      	ldr	r4, [r7, #20]
 8012e7c:	3420      	adds	r4, #32
 8012e7e:	9404      	str	r4, [sp, #16]
 8012e80:	9003      	str	r0, [sp, #12]
 8012e82:	9102      	str	r1, [sp, #8]
 8012e84:	9201      	str	r2, [sp, #4]
 8012e86:	9300      	str	r3, [sp, #0]
 8012e88:	4673      	mov	r3, lr
 8012e8a:	4662      	mov	r2, ip
 8012e8c:	4631      	mov	r1, r6
 8012e8e:	4628      	mov	r0, r5
 8012e90:	f7ff fd46 	bl	8012920 <VL53L1_f_026>
 8012e94:	4603      	mov	r3, r0
 8012e96:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53L1_p_054),
			&(ppulse_data->VL53L1_p_005));



		if (status == VL53L1_ERROR_NONE)
 8012e98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d109      	bne.n	8012eb4 <VL53L1_f_033+0x2f0>
			status =
				VL53L1_f_027(
 8012ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ea2:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 8012ea6:	7fb8      	ldrb	r0, [r7, #30]
 8012ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012eaa:	2101      	movs	r1, #1
 8012eac:	f7ff fb10 	bl	80124d0 <VL53L1_f_027>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8012eb4:	7fbb      	ldrb	r3, [r7, #30]
 8012eb6:	3301      	adds	r3, #1
 8012eb8:	77bb      	strb	r3, [r7, #30]
 8012eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ebc:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8012ec0:	7fba      	ldrb	r2, [r7, #30]
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	f4ff af52 	bcc.w	8012d6c <VL53L1_f_033+0x1a8>

	}



	if (status == VL53L1_ERROR_NONE)
 8012ec8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d107      	bne.n	8012ee0 <VL53L1_f_033+0x31c>
		status =
			VL53L1_f_028(
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	785b      	ldrb	r3, [r3, #1]
 8012ed4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f7ff fa23 	bl	8012322 <VL53L1_f_028>
 8012edc:	4603      	mov	r3, r0
 8012ede:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	77bb      	strb	r3, [r7, #30]
 8012ee4:	e071      	b.n	8012fca <VL53L1_f_033+0x406>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8012ee6:	7fba      	ldrb	r2, [r7, #30]
 8012ee8:	4613      	mov	r3, r2
 8012eea:	00db      	lsls	r3, r3, #3
 8012eec:	4413      	add	r3, r2
 8012eee:	009b      	lsls	r3, r3, #2
 8012ef0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012ef6:	4413      	add	r3, r2
 8012ef8:	3304      	adds	r3, #4
 8012efa:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 8012efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012efe:	7c9a      	ldrb	r2, [r3, #18]
 8012f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f02:	7c5b      	ldrb	r3, [r3, #17]
 8012f04:	429a      	cmp	r2, r3
 8012f06:	d25c      	bcs.n	8012fc2 <VL53L1_f_033+0x3fe>
			continue;




		if (ppulse_data->VL53L1_p_013 >
 8012f08:	697b      	ldr	r3, [r7, #20]
 8012f0a:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53L1_p_013 >
 8012f10:	429a      	cmp	r2, r3
 8012f12:	dd57      	ble.n	8012fc4 <VL53L1_f_033+0x400>
			ppulse_data->VL53L1_p_025 < 0xFF) {
 8012f14:	697b      	ldr	r3, [r7, #20]
 8012f16:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 8012f18:	2bff      	cmp	r3, #255	; 0xff
 8012f1a:	d053      	beq.n	8012fc4 <VL53L1_f_033+0x400>

			prange_data =
			&(presults->VL53L1_p_002[presults->active_results]);
 8012f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f1e:	7c9b      	ldrb	r3, [r3, #18]
 8012f20:	461a      	mov	r2, r3
			prange_data =
 8012f22:	234c      	movs	r3, #76	; 0x4c
 8012f24:	fb02 f303 	mul.w	r3, r2, r3
 8012f28:	3310      	adds	r3, #16
 8012f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f2c:	4413      	add	r3, r2
 8012f2e:	3304      	adds	r3, #4
 8012f30:	613b      	str	r3, [r7, #16]

			if (status == VL53L1_ERROR_NONE)
 8012f32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d115      	bne.n	8012f66 <VL53L1_f_033+0x3a2>
				VL53L1_f_029(
 8012f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f3c:	7c98      	ldrb	r0, [r3, #18]
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	f893 1020 	ldrb.w	r1, [r3, #32]
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	8b5d      	ldrh	r5, [r3, #26]
 8012f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f50:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8012f54:	693a      	ldr	r2, [r7, #16]
 8012f56:	9202      	str	r2, [sp, #8]
 8012f58:	697a      	ldr	r2, [r7, #20]
 8012f5a:	9201      	str	r2, [sp, #4]
 8012f5c:	9300      	str	r3, [sp, #0]
 8012f5e:	462b      	mov	r3, r5
 8012f60:	4622      	mov	r2, r4
 8012f62:	f7ff fd85 	bl	8012a70 <VL53L1_f_029>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53L1_p_010),
						ppulse_data,
						prange_data);

			if (status == VL53L1_ERROR_NONE)
 8012f66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d115      	bne.n	8012f9a <VL53L1_f_033+0x3d6>
				status =
				VL53L1_f_011(
 8012f6e:	69bb      	ldr	r3, [r7, #24]
 8012f70:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 8012f74:	69bb      	ldr	r3, [r7, #24]
 8012f76:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8012f7a:	69bb      	ldr	r3, [r7, #24]
 8012f7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8012f80:	69bb      	ldr	r3, [r7, #24]
 8012f82:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 8012f86:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012f8a:	9301      	str	r3, [sp, #4]
 8012f8c:	693b      	ldr	r3, [r7, #16]
 8012f8e:	9300      	str	r3, [sp, #0]
 8012f90:	4623      	mov	r3, r4
 8012f92:	f000 fb44 	bl	801361e <VL53L1_f_011>
 8012f96:	4603      	mov	r3, r0
 8012f98:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53L1_ERROR_NONE)
 8012f9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d108      	bne.n	8012fb4 <VL53L1_f_033+0x3f0>
				VL53L1_f_012(
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	8bd8      	ldrh	r0, [r3, #30]
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8012fac:	693a      	ldr	r2, [r7, #16]
 8012fae:	4619      	mov	r1, r3
 8012fb0:	f000 fbda 	bl	8013768 <VL53L1_f_012>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 8012fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fb6:	7c9b      	ldrb	r3, [r3, #18]
 8012fb8:	3301      	adds	r3, #1
 8012fba:	b2da      	uxtb	r2, r3
 8012fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fbe:	749a      	strb	r2, [r3, #18]
 8012fc0:	e000      	b.n	8012fc4 <VL53L1_f_033+0x400>
			continue;
 8012fc2:	bf00      	nop
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8012fc4:	7fbb      	ldrb	r3, [r7, #30]
 8012fc6:	3301      	adds	r3, #1
 8012fc8:	77bb      	strb	r3, [r7, #30]
 8012fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fcc:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8012fd0:	7fba      	ldrb	r2, [r7, #30]
 8012fd2:	429a      	cmp	r2, r3
 8012fd4:	d387      	bcc.n	8012ee6 <VL53L1_f_033+0x322>



	LOG_FUNCTION_END(status);

	return status;
 8012fd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3724      	adds	r7, #36	; 0x24
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012fe2 <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 8012fe2:	b580      	push	{r7, lr}
 8012fe4:	b08c      	sub	sp, #48	; 0x30
 8012fe6:	af02      	add	r7, sp, #8
 8012fe8:	60b9      	str	r1, [r7, #8]
 8012fea:	607a      	str	r2, [r7, #4]
 8012fec:	603b      	str	r3, [r7, #0]
 8012fee:	4603      	mov	r3, r0
 8012ff0:	73fb      	strb	r3, [r7, #15]




	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8012ff8:	7bfa      	ldrb	r2, [r7, #15]
 8012ffa:	4613      	mov	r3, r2
 8012ffc:	00db      	lsls	r3, r3, #3
 8012ffe:	4413      	add	r3, r2
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8013006:	687a      	ldr	r2, [r7, #4]
 8013008:	4413      	add	r3, r2
 801300a:	3304      	adds	r3, #4
 801300c:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 801300e:	2300      	movs	r3, #0
 8013010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 8013014:	2300      	movs	r3, #0
 8013016:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 8013018:	2300      	movs	r3, #0
 801301a:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 801301c:	2300      	movs	r3, #0
 801301e:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 8013020:	2300      	movs	r3, #0
 8013022:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	785a      	ldrb	r2, [r3, #1]
 8013028:	683b      	ldr	r3, [r7, #0]
 801302a:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	781a      	ldrb	r2, [r3, #0]
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	789a      	ldrb	r2, [r3, #2]
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 801303c:	6a3b      	ldr	r3, [r7, #32]
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013044:	e04d      	b.n	80130e2 <VL53L1_f_034+0x100>

		i =  lb  % palgo3->VL53L1_p_031;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	78da      	ldrb	r2, [r3, #3]
 801304a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801304e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013052:	fb01 f202 	mul.w	r2, r1, r2
 8013056:	1a9b      	subs	r3, r3, r2
 8013058:	77fb      	strb	r3, [r7, #31]


		VL53L1_f_013(
 801305a:	6a3b      	ldr	r3, [r7, #32]
 801305c:	7999      	ldrb	r1, [r3, #6]
 801305e:	f107 0218 	add.w	r2, r7, #24
 8013062:	7ff8      	ldrb	r0, [r7, #31]
 8013064:	f107 0310 	add.w	r3, r7, #16
 8013068:	9301      	str	r3, [sp, #4]
 801306a:	f107 0314 	add.w	r3, r7, #20
 801306e:	9300      	str	r3, [sp, #0]
 8013070:	4613      	mov	r3, r2
 8013072:	68ba      	ldr	r2, [r7, #8]
 8013074:	f000 fa7a 	bl	801356c <VL53L1_f_013>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53L1_p_003[i] = suma;
 8013078:	7ffb      	ldrb	r3, [r7, #31]
 801307a:	69ba      	ldr	r2, [r7, #24]
 801307c:	6839      	ldr	r1, [r7, #0]
 801307e:	009b      	lsls	r3, r3, #2
 8013080:	440b      	add	r3, r1
 8013082:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_018[i] = sumb;
 8013084:	7ffb      	ldrb	r3, [r7, #31]
 8013086:	697a      	ldr	r2, [r7, #20]
 8013088:	6839      	ldr	r1, [r7, #0]
 801308a:	3318      	adds	r3, #24
 801308c:	009b      	lsls	r3, r3, #2
 801308e:	440b      	add	r3, r1
 8013090:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_001[i] = sumc;
 8013092:	7ffb      	ldrb	r3, [r7, #31]
 8013094:	693a      	ldr	r2, [r7, #16]
 8013096:	6839      	ldr	r1, [r7, #0]
 8013098:	3330      	adds	r3, #48	; 0x30
 801309a:	009b      	lsls	r3, r3, #2
 801309c:	440b      	add	r3, r1
 801309e:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_039[i] =
			(suma + sumb) -
 80130a0:	69ba      	ldr	r2, [r7, #24]
 80130a2:	697b      	ldr	r3, [r7, #20]
 80130a4:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53L1_p_004);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	689a      	ldr	r2, [r3, #8]
 80130aa:	693b      	ldr	r3, [r7, #16]
 80130ac:	441a      	add	r2, r3
		pfiltered->VL53L1_p_039[i] =
 80130ae:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 80130b0:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_039[i] =
 80130b2:	6839      	ldr	r1, [r7, #0]
 80130b4:	3348      	adds	r3, #72	; 0x48
 80130b6:	009b      	lsls	r3, r3, #2
 80130b8:	440b      	add	r3, r1
 80130ba:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_040[i] =
			(sumb + sumc) -
 80130bc:	697a      	ldr	r2, [r7, #20]
 80130be:	693b      	ldr	r3, [r7, #16]
 80130c0:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53L1_p_004);
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	689a      	ldr	r2, [r3, #8]
 80130c6:	69bb      	ldr	r3, [r7, #24]
 80130c8:	441a      	add	r2, r3
		pfiltered->VL53L1_p_040[i] =
 80130ca:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 80130cc:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_040[i] =
 80130ce:	6839      	ldr	r1, [r7, #0]
 80130d0:	3360      	adds	r3, #96	; 0x60
 80130d2:	009b      	lsls	r3, r3, #2
 80130d4:	440b      	add	r3, r1
 80130d6:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 80130d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130dc:	3301      	adds	r3, #1
 80130de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80130e2:	6a3b      	ldr	r3, [r7, #32]
 80130e4:	791b      	ldrb	r3, [r3, #4]
 80130e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d9ab      	bls.n	8013046 <VL53L1_f_034+0x64>
	}

	return status;
 80130ee:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 80130f2:	4618      	mov	r0, r3
 80130f4:	3728      	adds	r7, #40	; 0x28
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd80      	pop	{r7, pc}

080130fa <VL53L1_f_035>:
VL53L1_Error VL53L1_f_035(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3)
{
 80130fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130fc:	b08f      	sub	sp, #60	; 0x3c
 80130fe:	af06      	add	r7, sp, #24
 8013100:	60ba      	str	r2, [r7, #8]
 8013102:	607b      	str	r3, [r7, #4]
 8013104:	4603      	mov	r3, r0
 8013106:	73fb      	strb	r3, [r7, #15]
 8013108:	460b      	mov	r3, r1
 801310a:	81bb      	strh	r3, [r7, #12]



	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 801310c:	2300      	movs	r3, #0
 801310e:	77bb      	strb	r3, [r7, #30]
	VL53L1_Error  func_status  = VL53L1_ERROR_NONE;
 8013110:	2300      	movs	r3, #0
 8013112:	777b      	strb	r3, [r7, #29]

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8013114:	7bfa      	ldrb	r2, [r7, #15]
 8013116:	4613      	mov	r3, r2
 8013118:	00db      	lsls	r3, r3, #3
 801311a:	4413      	add	r3, r2
 801311c:	009b      	lsls	r3, r3, #2
 801311e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8013122:	687a      	ldr	r2, [r7, #4]
 8013124:	4413      	add	r3, r2
 8013126:	3304      	adds	r3, #4
 8013128:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 801312a:	2300      	movs	r3, #0
 801312c:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 801312e:	2300      	movs	r3, #0
 8013130:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 8013132:	2300      	movs	r3, #0
 8013134:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8013136:	69bb      	ldr	r3, [r7, #24]
 8013138:	781b      	ldrb	r3, [r3, #0]
 801313a:	77fb      	strb	r3, [r7, #31]
 801313c:	e0b9      	b.n	80132b2 <VL53L1_f_035+0x1b8>

		i =  lb    % palgo3->VL53L1_p_031;
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	78da      	ldrb	r2, [r3, #3]
 8013142:	7ffb      	ldrb	r3, [r7, #31]
 8013144:	fbb3 f1f2 	udiv	r1, r3, r2
 8013148:	fb01 f202 	mul.w	r2, r1, r2
 801314c:	1a9b      	subs	r3, r3, r2
 801314e:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53L1_p_031;
 8013150:	7ffb      	ldrb	r3, [r7, #31]
 8013152:	3301      	adds	r3, #1
 8013154:	687a      	ldr	r2, [r7, #4]
 8013156:	78d2      	ldrb	r2, [r2, #3]
 8013158:	fb93 f1f2 	sdiv	r1, r3, r2
 801315c:	fb01 f202 	mul.w	r2, r1, r2
 8013160:	1a9b      	subs	r3, r3, r2
 8013162:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53L1_p_024 &&
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	789b      	ldrb	r3, [r3, #2]
 8013168:	7dfa      	ldrb	r2, [r7, #23]
 801316a:	429a      	cmp	r2, r3
 801316c:	f080 809e 	bcs.w	80132ac <VL53L1_f_035+0x1b2>
			j < palgo3->VL53L1_p_024) {
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53L1_p_024 &&
 8013174:	7dba      	ldrb	r2, [r7, #22]
 8013176:	429a      	cmp	r2, r3
 8013178:	f080 8098 	bcs.w	80132ac <VL53L1_f_035+0x1b2>

			if (pfiltered->VL53L1_p_039[i] == 0 &&
 801317c:	7dfb      	ldrb	r3, [r7, #23]
 801317e:	68ba      	ldr	r2, [r7, #8]
 8013180:	3348      	adds	r3, #72	; 0x48
 8013182:	009b      	lsls	r3, r3, #2
 8013184:	4413      	add	r3, r2
 8013186:	685b      	ldr	r3, [r3, #4]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d10e      	bne.n	80131aa <VL53L1_f_035+0xb0>
				pfiltered->VL53L1_p_040[i] == 0)
 801318c:	7dfb      	ldrb	r3, [r7, #23]
 801318e:	68ba      	ldr	r2, [r7, #8]
 8013190:	3360      	adds	r3, #96	; 0x60
 8013192:	009b      	lsls	r3, r3, #2
 8013194:	4413      	add	r3, r2
 8013196:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8013198:	2b00      	cmp	r3, #0
 801319a:	d106      	bne.n	80131aa <VL53L1_f_035+0xb0>

				pfiltered->VL53L1_p_043[i] = 0;
 801319c:	7dfb      	ldrb	r3, [r7, #23]
 801319e:	68ba      	ldr	r2, [r7, #8]
 80131a0:	4413      	add	r3, r2
 80131a2:	2200      	movs	r2, #0
 80131a4:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80131a8:	e043      	b.n	8013232 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 80131aa:	7dfb      	ldrb	r3, [r7, #23]
 80131ac:	68ba      	ldr	r2, [r7, #8]
 80131ae:	3348      	adds	r3, #72	; 0x48
 80131b0:	009b      	lsls	r3, r3, #2
 80131b2:	4413      	add	r3, r2
 80131b4:	685b      	ldr	r3, [r3, #4]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	db0e      	blt.n	80131d8 <VL53L1_f_035+0xde>
					 pfiltered->VL53L1_p_040[i] >= 0)
 80131ba:	7dfb      	ldrb	r3, [r7, #23]
 80131bc:	68ba      	ldr	r2, [r7, #8]
 80131be:	3360      	adds	r3, #96	; 0x60
 80131c0:	009b      	lsls	r3, r3, #2
 80131c2:	4413      	add	r3, r2
 80131c4:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	db06      	blt.n	80131d8 <VL53L1_f_035+0xde>
				pfiltered->VL53L1_p_043[i] = 1;
 80131ca:	7dfb      	ldrb	r3, [r7, #23]
 80131cc:	68ba      	ldr	r2, [r7, #8]
 80131ce:	4413      	add	r3, r2
 80131d0:	2201      	movs	r2, #1
 80131d2:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80131d6:	e02c      	b.n	8013232 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 80131d8:	7dfb      	ldrb	r3, [r7, #23]
 80131da:	68ba      	ldr	r2, [r7, #8]
 80131dc:	3348      	adds	r3, #72	; 0x48
 80131de:	009b      	lsls	r3, r3, #2
 80131e0:	4413      	add	r3, r2
 80131e2:	685b      	ldr	r3, [r3, #4]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	da1e      	bge.n	8013226 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 80131e8:	7dfb      	ldrb	r3, [r7, #23]
 80131ea:	68ba      	ldr	r2, [r7, #8]
 80131ec:	3360      	adds	r3, #96	; 0x60
 80131ee:	009b      	lsls	r3, r3, #2
 80131f0:	4413      	add	r3, r2
 80131f2:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	db16      	blt.n	8013226 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 80131f8:	7dbb      	ldrb	r3, [r7, #22]
 80131fa:	68ba      	ldr	r2, [r7, #8]
 80131fc:	3348      	adds	r3, #72	; 0x48
 80131fe:	009b      	lsls	r3, r3, #2
 8013200:	4413      	add	r3, r2
 8013202:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8013204:	2b00      	cmp	r3, #0
 8013206:	db0e      	blt.n	8013226 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[j] <  0)
 8013208:	7dbb      	ldrb	r3, [r7, #22]
 801320a:	68ba      	ldr	r2, [r7, #8]
 801320c:	3360      	adds	r3, #96	; 0x60
 801320e:	009b      	lsls	r3, r3, #2
 8013210:	4413      	add	r3, r2
 8013212:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8013214:	2b00      	cmp	r3, #0
 8013216:	da06      	bge.n	8013226 <VL53L1_f_035+0x12c>
				pfiltered->VL53L1_p_043[i] = 1;
 8013218:	7dfb      	ldrb	r3, [r7, #23]
 801321a:	68ba      	ldr	r2, [r7, #8]
 801321c:	4413      	add	r3, r2
 801321e:	2201      	movs	r2, #1
 8013220:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8013224:	e005      	b.n	8013232 <VL53L1_f_035+0x138>

			else
				pfiltered->VL53L1_p_043[i] = 0;
 8013226:	7dfb      	ldrb	r3, [r7, #23]
 8013228:	68ba      	ldr	r2, [r7, #8]
 801322a:	4413      	add	r3, r2
 801322c:	2200      	movs	r2, #0
 801322e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53L1_p_043[i] > 0) {
 8013232:	7dfb      	ldrb	r3, [r7, #23]
 8013234:	68ba      	ldr	r2, [r7, #8]
 8013236:	4413      	add	r3, r2
 8013238:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 801323c:	2b00      	cmp	r3, #0
 801323e:	d035      	beq.n	80132ac <VL53L1_f_035+0x1b2>

				pdata->VL53L1_p_025 = lb;
 8013240:	69bb      	ldr	r3, [r7, #24]
 8013242:	7ffa      	ldrb	r2, [r7, #31]
 8013244:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53L1_f_036(
 8013246:	7dfb      	ldrb	r3, [r7, #23]
 8013248:	68ba      	ldr	r2, [r7, #8]
 801324a:	009b      	lsls	r3, r3, #2
 801324c:	4413      	add	r3, r2
 801324e:	685c      	ldr	r4, [r3, #4]
 8013250:	7dfb      	ldrb	r3, [r7, #23]
 8013252:	68ba      	ldr	r2, [r7, #8]
 8013254:	3318      	adds	r3, #24
 8013256:	009b      	lsls	r3, r3, #2
 8013258:	4413      	add	r3, r2
 801325a:	685d      	ldr	r5, [r3, #4]
 801325c:	7dfb      	ldrb	r3, [r7, #23]
 801325e:	68ba      	ldr	r2, [r7, #8]
 8013260:	3330      	adds	r3, #48	; 0x30
 8013262:	009b      	lsls	r3, r3, #2
 8013264:	4413      	add	r3, r2
 8013266:	685e      	ldr	r6, [r3, #4]
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	689b      	ldr	r3, [r3, #8]
 801326c:	687a      	ldr	r2, [r7, #4]
 801326e:	78d2      	ldrb	r2, [r2, #3]
 8013270:	69b9      	ldr	r1, [r7, #24]
 8013272:	3118      	adds	r1, #24
 8013274:	7ff8      	ldrb	r0, [r7, #31]
 8013276:	9105      	str	r1, [sp, #20]
 8013278:	9204      	str	r2, [sp, #16]
 801327a:	9303      	str	r3, [sp, #12]
 801327c:	2300      	movs	r3, #0
 801327e:	9302      	str	r3, [sp, #8]
 8013280:	2300      	movs	r3, #0
 8013282:	9301      	str	r3, [sp, #4]
 8013284:	2300      	movs	r3, #0
 8013286:	9300      	str	r3, [sp, #0]
 8013288:	4633      	mov	r3, r6
 801328a:	462a      	mov	r2, r5
 801328c:	4621      	mov	r1, r4
 801328e:	f000 f81c 	bl	80132ca <VL53L1_f_036>
 8013292:	4603      	mov	r3, r0
 8013294:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53L1_p_004,
					palgo3->VL53L1_p_031,
					&(pdata->VL53L1_p_014));

				if (func_status ==
 8013296:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801329a:	f113 0f0f 	cmn.w	r3, #15
 801329e:	d105      	bne.n	80132ac <VL53L1_f_035+0x1b2>
					VL53L1_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53L1_p_043[i] = 0;
 80132a0:	7dfb      	ldrb	r3, [r7, #23]
 80132a2:	68ba      	ldr	r2, [r7, #8]
 80132a4:	4413      	add	r3, r2
 80132a6:	2200      	movs	r2, #0
 80132a8:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 80132ac:	7ffb      	ldrb	r3, [r7, #31]
 80132ae:	3301      	adds	r3, #1
 80132b0:	77fb      	strb	r3, [r7, #31]
 80132b2:	69bb      	ldr	r3, [r7, #24]
 80132b4:	791b      	ldrb	r3, [r3, #4]
 80132b6:	7ffa      	ldrb	r2, [r7, #31]
 80132b8:	429a      	cmp	r2, r3
 80132ba:	f4ff af40 	bcc.w	801313e <VL53L1_f_035+0x44>

			}
		}
	}

	return status;
 80132be:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	3724      	adds	r7, #36	; 0x24
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080132ca <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 80132ca:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80132ce:	b0b2      	sub	sp, #200	; 0xc8
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80132d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80132da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80132de:	4603      	mov	r3, r0
 80132e0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80132e4:	23f1      	movs	r3, #241	; 0xf1
 80132e6:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 80132ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132ee:	f04f 0300 	mov.w	r3, #0
 80132f2:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
 80132f6:	f04f 0200 	mov.w	r2, #0
 80132fa:	f04f 0300 	mov.w	r3, #0
 80132fe:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 8013302:	f04f 0200 	mov.w	r2, #0
 8013306:	f04f 0300 	mov.w	r3, #0
 801330a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 801330e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013312:	17da      	asrs	r2, r3, #31
 8013314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013318:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 801331c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8013320:	17da      	asrs	r2, r3, #31
 8013322:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013326:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 801332a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801332e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8013332:	4602      	mov	r2, r0
 8013334:	ebb3 0802 	subs.w	r8, r3, r2
 8013338:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801333c:	460a      	mov	r2, r1
 801333e:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8013342:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013346:	17da      	asrs	r2, r3, #31
 8013348:	67bb      	str	r3, [r7, #120]	; 0x78
 801334a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801334c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8013350:	460b      	mov	r3, r1
 8013352:	ebb8 0a03 	subs.w	sl, r8, r3
 8013356:	4613      	mov	r3, r2
 8013358:	eb69 0b03 	sbc.w	fp, r9, r3
 801335c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013360:	17da      	asrs	r2, r3, #31
 8013362:	673b      	str	r3, [r7, #112]	; 0x70
 8013364:	677a      	str	r2, [r7, #116]	; 0x74
 8013366:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 801336a:	460b      	mov	r3, r1
 801336c:	ebba 0403 	subs.w	r4, sl, r3
 8013370:	4613      	mov	r3, r2
 8013372:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8013376:	f04f 0200 	mov.w	r2, #0
 801337a:	f04f 0300 	mov.w	r3, #0
 801337e:	032b      	lsls	r3, r5, #12
 8013380:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8013384:	0322      	lsls	r2, r4, #12
 8013386:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 801338a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801338e:	17da      	asrs	r2, r3, #31
 8013390:	66bb      	str	r3, [r7, #104]	; 0x68
 8013392:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8013394:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013398:	17da      	asrs	r2, r3, #31
 801339a:	663b      	str	r3, [r7, #96]	; 0x60
 801339c:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 801339e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80133a2:	4623      	mov	r3, r4
 80133a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80133a8:	4602      	mov	r2, r0
 80133aa:	1a9b      	subs	r3, r3, r2
 80133ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80133ae:	462b      	mov	r3, r5
 80133b0:	460a      	mov	r2, r1
 80133b2:	eb63 0302 	sbc.w	r3, r3, r2
 80133b6:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 80133b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80133bc:	17da      	asrs	r2, r3, #31
 80133be:	653b      	str	r3, [r7, #80]	; 0x50
 80133c0:	657a      	str	r2, [r7, #84]	; 0x54
 80133c2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80133c6:	4623      	mov	r3, r4
 80133c8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80133cc:	4602      	mov	r2, r0
 80133ce:	1a9b      	subs	r3, r3, r2
 80133d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80133d2:	462b      	mov	r3, r5
 80133d4:	460a      	mov	r2, r1
 80133d6:	eb63 0302 	sbc.w	r3, r3, r2
 80133da:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 80133dc:	f04f 0200 	mov.w	r2, #0
 80133e0:	f04f 0300 	mov.w	r3, #0
 80133e4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80133e8:	4629      	mov	r1, r5
 80133ea:	030b      	lsls	r3, r1, #12
 80133ec:	4621      	mov	r1, r4
 80133ee:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 80133f2:	4621      	mov	r1, r4
 80133f4:	030a      	lsls	r2, r1, #12
 80133f6:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 80133fa:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80133fe:	4313      	orrs	r3, r2
 8013400:	f000 80a8 	beq.w	8013554 <VL53L1_f_036+0x28a>
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 8013404:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8013408:	f04f 0000 	mov.w	r0, #0
 801340c:	f04f 0100 	mov.w	r1, #0
 8013410:	0319      	lsls	r1, r3, #12
 8013412:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8013416:	0310      	lsls	r0, r2, #12
 8013418:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801341c:	1814      	adds	r4, r2, r0
 801341e:	633c      	str	r4, [r7, #48]	; 0x30
 8013420:	414b      	adcs	r3, r1
 8013422:	637b      	str	r3, [r7, #52]	; 0x34
 8013424:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8013428:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 801342c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8013430:	1891      	adds	r1, r2, r2
 8013432:	62b9      	str	r1, [r7, #40]	; 0x28
 8013434:	415b      	adcs	r3, r3
 8013436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013438:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801343c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8013440:	f7ed f978 	bl	8000734 <__aeabi_ldivmod>
 8013444:	4602      	mov	r2, r0
 8013446:	460b      	mov	r3, r1
 8013448:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		mean_phase += 2048;
 801344c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8013450:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8013454:	6239      	str	r1, [r7, #32]
 8013456:	f143 0300 	adc.w	r3, r3, #0
 801345a:	627b      	str	r3, [r7, #36]	; 0x24
 801345c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8013460:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase += (4096 * (int64_t)bin);
 8013464:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013468:	2200      	movs	r2, #0
 801346a:	643b      	str	r3, [r7, #64]	; 0x40
 801346c:	647a      	str	r2, [r7, #68]	; 0x44
 801346e:	f04f 0200 	mov.w	r2, #0
 8013472:	f04f 0300 	mov.w	r3, #0
 8013476:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 801347a:	4629      	mov	r1, r5
 801347c:	030b      	lsls	r3, r1, #12
 801347e:	4621      	mov	r1, r4
 8013480:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8013484:	4621      	mov	r1, r4
 8013486:	030a      	lsls	r2, r1, #12
 8013488:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 801348c:	1884      	adds	r4, r0, r2
 801348e:	61bc      	str	r4, [r7, #24]
 8013490:	eb41 0303 	adc.w	r3, r1, r3
 8013494:	61fb      	str	r3, [r7, #28]
 8013496:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801349a:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		mean_phase  = do_division_s((mean_phase + 1), 2);
 801349e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80134a2:	1c51      	adds	r1, r2, #1
 80134a4:	63b9      	str	r1, [r7, #56]	; 0x38
 80134a6:	f143 0300 	adc.w	r3, r3, #0
 80134aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80134ac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80134b0:	460b      	mov	r3, r1
 80134b2:	0fdb      	lsrs	r3, r3, #31
 80134b4:	2200      	movs	r2, #0
 80134b6:	613b      	str	r3, [r7, #16]
 80134b8:	617a      	str	r2, [r7, #20]
 80134ba:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80134be:	4623      	mov	r3, r4
 80134c0:	4602      	mov	r2, r0
 80134c2:	189b      	adds	r3, r3, r2
 80134c4:	60bb      	str	r3, [r7, #8]
 80134c6:	460b      	mov	r3, r1
 80134c8:	462a      	mov	r2, r5
 80134ca:	eb42 0303 	adc.w	r3, r2, r3
 80134ce:	60fb      	str	r3, [r7, #12]
 80134d0:	f04f 0200 	mov.w	r2, #0
 80134d4:	f04f 0300 	mov.w	r3, #0
 80134d8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80134dc:	4621      	mov	r1, r4
 80134de:	084a      	lsrs	r2, r1, #1
 80134e0:	4629      	mov	r1, r5
 80134e2:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80134e6:	4629      	mov	r1, r5
 80134e8:	104b      	asrs	r3, r1, #1
 80134ea:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		if (mean_phase  < 0)
 80134ee:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	da05      	bge.n	8013502 <VL53L1_f_036+0x238>
			mean_phase = 0;
 80134f6:	f04f 0200 	mov.w	r2, #0
 80134fa:	f04f 0300 	mov.w	r3, #0
 80134fe:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
 8013502:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8013506:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801350a:	f173 0300 	sbcs.w	r3, r3, #0
 801350e:	db05      	blt.n	801351c <VL53L1_f_036+0x252>
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;
 8013510:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013514:	f04f 0300 	mov.w	r3, #0
 8013518:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase32 = (int32_t)mean_phase;
 801351c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013520:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 8013524:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 8013528:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 801352a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801352e:	fb93 f1f2 	sdiv	r1, r3, r2
 8013532:	fb01 f202 	mul.w	r2, r1, r2
 8013536:	1a9b      	subs	r3, r3, r2
 8013538:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 801353c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013540:	17da      	asrs	r2, r3, #31
 8013542:	603b      	str	r3, [r7, #0]
 8013544:	607a      	str	r2, [r7, #4]
 8013546:	e9d7 3400 	ldrd	r3, r4, [r7]
 801354a:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53L1_ERROR_NONE;
 801354e:	2300      	movs	r3, #0
 8013550:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	*pmean_phase = (uint32_t)mean_phase;
 8013554:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8013558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801355c:	601a      	str	r2, [r3, #0]

	return status;
 801355e:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 8013562:	4618      	mov	r0, r3
 8013564:	37c8      	adds	r7, #200	; 0xc8
 8013566:	46bd      	mov	sp, r7
 8013568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801356c <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 801356c:	b480      	push	{r7}
 801356e:	b087      	sub	sp, #28
 8013570:	af00      	add	r7, sp, #0
 8013572:	60ba      	str	r2, [r7, #8]
 8013574:	607b      	str	r3, [r7, #4]
 8013576:	4603      	mov	r3, r0
 8013578:	73fb      	strb	r3, [r7, #15]
 801357a:	460b      	mov	r3, r1
 801357c:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 801357e:	2300      	movs	r3, #0
 8013580:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 8013582:	2300      	movs	r3, #0
 8013584:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2200      	movs	r2, #0
 801358a:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 801358c:	7bfa      	ldrb	r2, [r7, #15]
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	3206      	adds	r2, #6
 8013592:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013596:	6a3b      	ldr	r3, [r7, #32]
 8013598:	601a      	str	r2, [r3, #0]
	*pc = 0;
 801359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801359c:	2200      	movs	r2, #0
 801359e:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 80135a0:	2300      	movs	r3, #0
 80135a2:	75fb      	strb	r3, [r7, #23]
 80135a4:	e02f      	b.n	8013606 <VL53L1_f_013+0x9a>


		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 80135a6:	7bfa      	ldrb	r2, [r7, #15]
 80135a8:	7dfb      	ldrb	r3, [r7, #23]
 80135aa:	4413      	add	r3, r2
 80135ac:	68ba      	ldr	r2, [r7, #8]
 80135ae:	7a92      	ldrb	r2, [r2, #10]
 80135b0:	441a      	add	r2, r3
 80135b2:	7bbb      	ldrb	r3, [r7, #14]
 80135b4:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53L1_p_024;
 80135b6:	68ba      	ldr	r2, [r7, #8]
 80135b8:	7a92      	ldrb	r2, [r2, #10]
 80135ba:	fb93 f1f2 	sdiv	r1, r3, r2
 80135be:	fb01 f202 	mul.w	r2, r1, r2
 80135c2:	1a9b      	subs	r3, r3, r2
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 80135c4:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 80135c6:	7dfa      	ldrb	r2, [r7, #23]
 80135c8:	7bbb      	ldrb	r3, [r7, #14]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	d20a      	bcs.n	80135e4 <VL53L1_f_013+0x78>
			*pa += pbins->bin_data[j];
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	681a      	ldr	r2, [r3, #0]
 80135d2:	7db9      	ldrb	r1, [r7, #22]
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	3106      	adds	r1, #6
 80135d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80135dc:	441a      	add	r2, r3
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	601a      	str	r2, [r3, #0]
 80135e2:	e00d      	b.n	8013600 <VL53L1_f_013+0x94>
		else if (w > filter_woi)
 80135e4:	7dfa      	ldrb	r2, [r7, #23]
 80135e6:	7bbb      	ldrb	r3, [r7, #14]
 80135e8:	429a      	cmp	r2, r3
 80135ea:	d909      	bls.n	8013600 <VL53L1_f_013+0x94>
			*pc += pbins->bin_data[j];
 80135ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ee:	681a      	ldr	r2, [r3, #0]
 80135f0:	7db9      	ldrb	r1, [r7, #22]
 80135f2:	68bb      	ldr	r3, [r7, #8]
 80135f4:	3106      	adds	r1, #6
 80135f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80135fa:	441a      	add	r2, r3
 80135fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135fe:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8013600:	7dfb      	ldrb	r3, [r7, #23]
 8013602:	3301      	adds	r3, #1
 8013604:	75fb      	strb	r3, [r7, #23]
 8013606:	7bbb      	ldrb	r3, [r7, #14]
 8013608:	005a      	lsls	r2, r3, #1
 801360a:	7dfb      	ldrb	r3, [r7, #23]
 801360c:	429a      	cmp	r2, r3
 801360e:	daca      	bge.n	80135a6 <VL53L1_f_013+0x3a>
	}
}
 8013610:	bf00      	nop
 8013612:	bf00      	nop
 8013614:	371c      	adds	r7, #28
 8013616:	46bd      	mov	sp, r7
 8013618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361c:	4770      	bx	lr

0801361e <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 801361e:	b580      	push	{r7, lr}
 8013620:	b088      	sub	sp, #32
 8013622:	af00      	add	r7, sp, #0
 8013624:	60ba      	str	r2, [r7, #8]
 8013626:	461a      	mov	r2, r3
 8013628:	4603      	mov	r3, r0
 801362a:	81fb      	strh	r3, [r7, #14]
 801362c:	460b      	mov	r3, r1
 801362e:	81bb      	strh	r3, [r7, #12]
 8013630:	4613      	mov	r3, r2
 8013632:	80fb      	strh	r3, [r7, #6]
	VL53L1_Error     status = VL53L1_ERROR_NONE;
 8013634:	2300      	movs	r3, #0
 8013636:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 8013638:	2300      	movs	r3, #0
 801363a:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 801363c:	2300      	movs	r3, #0
 801363e:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 8013640:	2300      	movs	r3, #0
 8013642:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 8013644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013646:	89fa      	ldrh	r2, [r7, #14]
 8013648:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 801364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801364c:	89ba      	ldrh	r2, [r7, #12]
 801364e:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 8013650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013652:	68ba      	ldr	r2, [r7, #8]
 8013654:	619a      	str	r2, [r3, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 8013656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013658:	88fa      	ldrh	r2, [r7, #6]
 801365a:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 801365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801365e:	8a5b      	ldrh	r3, [r3, #18]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d101      	bne.n	8013668 <VL53L1_f_011+0x4a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8013664:	23f1      	movs	r3, #241	; 0xf1
 8013666:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 8013668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366a:	699b      	ldr	r3, [r3, #24]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d101      	bne.n	8013674 <VL53L1_f_011+0x56>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8013670:	23f1      	movs	r3, #241	; 0xf1
 8013672:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8013674:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d16f      	bne.n	801375c <VL53L1_f_011+0x13e>



		pll_period_us =
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 801367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801367e:	8a5b      	ldrh	r3, [r3, #18]
 8013680:	4618      	mov	r0, r3
 8013682:	f7fd f903 	bl	801088c <VL53L1_calc_pll_period_us>
 8013686:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 8013688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801368a:	699b      	ldr	r3, [r3, #24]
 801368c:	3301      	adds	r3, #1
 801368e:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 8013690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013692:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 8013694:	4619      	mov	r1, r3
 8013696:	693b      	ldr	r3, [r7, #16]
 8013698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801369c:	6978      	ldr	r0, [r7, #20]
 801369e:	f7fd f90c 	bl	80108ba <VL53L1_duration_maths>
 80136a2:	4602      	mov	r2, r0
 80136a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a6:	61da      	str	r2, [r3, #28]
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53L1_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53L1_p_030) << 4,
 80136a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136aa:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 80136ac:	0119      	lsls	r1, r3, #4
 80136ae:	693b      	ldr	r3, [r7, #16]
 80136b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80136b4:	6978      	ldr	r0, [r7, #20]
 80136b6:	f7fd f900 	bl	80108ba <VL53L1_duration_maths>
 80136ba:	4602      	mov	r2, r0
 80136bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136be:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 80136c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 80136c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c6:	69db      	ldr	r3, [r3, #28]
 80136c8:	4619      	mov	r1, r3
 80136ca:	4610      	mov	r0, r2
 80136cc:	f7fd fb6d 	bl	8010daa <VL53L1_rate_maths>
 80136d0:	4603      	mov	r3, r0
 80136d2:	461a      	mov	r2, r3
 80136d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136d6:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 80136d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 80136dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136de:	6a1b      	ldr	r3, [r3, #32]
 80136e0:	4619      	mov	r1, r3
 80136e2:	4610      	mov	r0, r2
 80136e4:	f7fd fb61 	bl	8010daa <VL53L1_rate_maths>
 80136e8:	4603      	mov	r3, r0
 80136ea:	461a      	mov	r2, r3
 80136ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ee:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_020,
 80136f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 80136f4:	461a      	mov	r2, r3
 80136f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136f8:	6a1b      	ldr	r3, [r3, #32]
 80136fa:	4619      	mov	r1, r3
 80136fc:	4610      	mov	r0, r2
 80136fe:	f7fd fb54 	bl	8010daa <VL53L1_rate_maths>
 8013702:	4603      	mov	r3, r0
 8013704:	461a      	mov	r2, r3
 8013706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013708:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 801370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801370e:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 8013710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013712:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 8013714:	4413      	add	r3, r2
 8013716:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 8013718:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801371c:	2b01      	cmp	r3, #1
 801371e:	d905      	bls.n	801372c <VL53L1_f_011+0x10e>
			count_rate_total /= histo_merge_nb;
 8013720:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013724:	69ba      	ldr	r2, [r7, #24]
 8013726:	fbb2 f3f3 	udiv	r3, r2, r3
 801372a:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53L1_rate_per_spad_maths(
 801372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801372e:	8ada      	ldrh	r2, [r3, #22]
 8013730:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013734:	69b9      	ldr	r1, [r7, #24]
 8013736:	2006      	movs	r0, #6
 8013738:	f7fd fb7c 	bl	8010e34 <VL53L1_rate_per_spad_maths>
 801373c:	4603      	mov	r3, r0
 801373e:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 8013740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013742:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53L1_p_012   =
			VL53L1_events_per_spad_maths(
 8013744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013746:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8013748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801374a:	8ad9      	ldrh	r1, [r3, #22]
 801374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801374e:	69db      	ldr	r3, [r3, #28]
 8013750:	461a      	mov	r2, r3
 8013752:	f7fd f90b 	bl	801096c <VL53L1_events_per_spad_maths>
 8013756:	4602      	mov	r2, r0
		pdata->VL53L1_p_012   =
 8013758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801375a:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 801375c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013760:	4618      	mov	r0, r3
 8013762:	3720      	adds	r7, #32
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}

08013768 <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 8013768:	b590      	push	{r4, r7, lr}
 801376a:	b085      	sub	sp, #20
 801376c:	af02      	add	r7, sp, #8
 801376e:	4603      	mov	r3, r0
 8013770:	603a      	str	r2, [r7, #0]
 8013772:	80fb      	strh	r3, [r7, #6]
 8013774:	460b      	mov	r3, r1
 8013776:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	8a58      	ldrh	r0, [r3, #18]
 801377c:	683b      	ldr	r3, [r7, #0]
 801377e:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	8a9c      	ldrh	r4, [r3, #20]
 8013784:	88fb      	ldrh	r3, [r7, #6]
 8013786:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801378a:	9201      	str	r2, [sp, #4]
 801378c:	9300      	str	r3, [sp, #0]
 801378e:	2300      	movs	r3, #0
 8013790:	4622      	mov	r2, r4
 8013792:	f7fd fb83 	bl	8010e9c <VL53L1_range_maths>
 8013796:	4603      	mov	r3, r0
 8013798:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	8a58      	ldrh	r0, [r3, #18]
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	8a9c      	ldrh	r4, [r3, #20]
 80137ae:	88fb      	ldrh	r3, [r7, #6]
 80137b0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80137b4:	9201      	str	r2, [sp, #4]
 80137b6:	9300      	str	r3, [sp, #0]
 80137b8:	2300      	movs	r3, #0
 80137ba:	4622      	mov	r2, r4
 80137bc:	f7fd fb6e 	bl	8010e9c <VL53L1_range_maths>
 80137c0:	4603      	mov	r3, r0
 80137c2:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 80137c4:	683b      	ldr	r3, [r7, #0]
 80137c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 80137ca:	683b      	ldr	r3, [r7, #0]
 80137cc:	8a58      	ldrh	r0, [r3, #18]
 80137ce:	683b      	ldr	r3, [r7, #0]
 80137d0:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	8a9c      	ldrh	r4, [r3, #20]
 80137d8:	88fb      	ldrh	r3, [r7, #6]
 80137da:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80137de:	9201      	str	r2, [sp, #4]
 80137e0:	9300      	str	r3, [sp, #0]
 80137e2:	2300      	movs	r3, #0
 80137e4:	4622      	mov	r2, r4
 80137e6:	f7fd fb59 	bl	8010e9c <VL53L1_range_maths>
 80137ea:	4603      	mov	r3, r0
 80137ec:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 80137f4:	bf00      	nop
 80137f6:	370c      	adds	r7, #12
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd90      	pop	{r4, r7, pc}

080137fc <VL53L1_f_004>:

void  VL53L1_f_004(
	VL53L1_histogram_bin_data_t   *pxtalk,
	VL53L1_histogram_bin_data_t   *pbins,
	VL53L1_histogram_bin_data_t   *pxtalk_realigned)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b086      	sub	sp, #24
 8013800:	af00      	add	r7, sp, #0
 8013802:	60f8      	str	r0, [r7, #12]
 8013804:	60b9      	str	r1, [r7, #8]
 8013806:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 8013808:	2300      	movs	r3, #0
 801380a:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 801380c:	2300      	movs	r3, #0
 801380e:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 8013810:	2300      	movs	r3, #0
 8013812:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 8013814:	2300      	movs	r3, #0
 8013816:	757b      	strb	r3, [r7, #21]





	memcpy(
 8013818:	22ac      	movs	r2, #172	; 0xac
 801381a:	68b9      	ldr	r1, [r7, #8]
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f00a fda3 	bl	801e368 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53L1_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8013822:	2300      	movs	r3, #0
 8013824:	75fb      	strb	r3, [r7, #23]
 8013826:	e008      	b.n	801383a <VL53L1_f_004+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 8013828:	7dfa      	ldrb	r2, [r7, #23]
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	3206      	adds	r2, #6
 801382e:	2100      	movs	r1, #0
 8013830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8013834:	7dfb      	ldrb	r3, [r7, #23]
 8013836:	3301      	adds	r3, #1
 8013838:	75fb      	strb	r3, [r7, #23]
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	7a5b      	ldrb	r3, [r3, #9]
 801383e:	7dfa      	ldrb	r2, [r7, #23]
 8013840:	429a      	cmp	r2, r3
 8013842:	d3f1      	bcc.n	8013828 <VL53L1_f_004+0x2c>



	bin_offset =  VL53L1_f_038(
 8013844:	68f9      	ldr	r1, [r7, #12]
 8013846:	68b8      	ldr	r0, [r7, #8]
 8013848:	f000 f878 	bl	801393c <VL53L1_f_038>
 801384c:	4603      	mov	r3, r0
 801384e:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	7a9a      	ldrb	r2, [r3, #10]
 8013854:	68bb      	ldr	r3, [r7, #8]
 8013856:	7a9b      	ldrb	r3, [r3, #10]
 8013858:	429a      	cmp	r2, r3
 801385a:	d203      	bcs.n	8013864 <VL53L1_f_004+0x68>
		min_bins = pxtalk->VL53L1_p_024;
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	7a9b      	ldrb	r3, [r3, #10]
 8013860:	75bb      	strb	r3, [r7, #22]
 8013862:	e002      	b.n	801386a <VL53L1_f_004+0x6e>
	else
		min_bins = pbins->VL53L1_p_024;
 8013864:	68bb      	ldr	r3, [r7, #8]
 8013866:	7a9b      	ldrb	r3, [r3, #10]
 8013868:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 801386a:	2300      	movs	r3, #0
 801386c:	75fb      	strb	r3, [r7, #23]
 801386e:	e05c      	b.n	801392a <VL53L1_f_004+0x12e>



		if (bin_offset >= 0)
 8013870:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8013874:	2b00      	cmp	r3, #0
 8013876:	db0f      	blt.n	8013898 <VL53L1_f_004+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8013878:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801387c:	461a      	mov	r2, r3
 801387e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8013882:	4413      	add	r3, r2
				% (int8_t)pbins->VL53L1_p_024;
 8013884:	68ba      	ldr	r2, [r7, #8]
 8013886:	7a92      	ldrb	r2, [r2, #10]
 8013888:	b252      	sxtb	r2, r2
 801388a:	fb93 f1f2 	sdiv	r1, r3, r2
 801388e:	fb01 f202 	mul.w	r2, r1, r2
 8013892:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8013894:	757b      	strb	r3, [r7, #21]
 8013896:	e013      	b.n	80138c0 <VL53L1_f_004+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	7a9b      	ldrb	r3, [r3, #10]
 801389c:	b25b      	sxtb	r3, r3
 801389e:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 80138a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80138a4:	4619      	mov	r1, r3
 80138a6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80138aa:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 80138ac:	4413      	add	r3, r2
					% (int8_t)pbins->VL53L1_p_024;
 80138ae:	68ba      	ldr	r2, [r7, #8]
 80138b0:	7a92      	ldrb	r2, [r2, #10]
 80138b2:	b252      	sxtb	r2, r2
 80138b4:	fb93 f1f2 	sdiv	r1, r3, r2
 80138b8:	fb01 f202 	mul.w	r2, r1, r2
 80138bc:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 80138be:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 80138c0:	7d7b      	ldrb	r3, [r7, #21]
 80138c2:	461a      	mov	r2, r3
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	3206      	adds	r2, #6
 80138c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 80138cc:	7df9      	ldrb	r1, [r7, #23]
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	3106      	adds	r1, #6
 80138d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 80138d6:	429a      	cmp	r2, r3
 80138d8:	dd12      	ble.n	8013900 <VL53L1_f_004+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 80138da:	7d7b      	ldrb	r3, [r7, #21]
 80138dc:	461a      	mov	r2, r3
 80138de:	68bb      	ldr	r3, [r7, #8]
 80138e0:	3206      	adds	r2, #6
 80138e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 80138e6:	7df9      	ldrb	r1, [r7, #23]
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	3106      	adds	r1, #6
 80138ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 80138f0:	7d79      	ldrb	r1, [r7, #21]
 80138f2:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 80138f4:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 80138f6:	68bb      	ldr	r3, [r7, #8]
 80138f8:	1d82      	adds	r2, r0, #6
 80138fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80138fe:	e006      	b.n	801390e <VL53L1_f_004+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 8013900:	7d7b      	ldrb	r3, [r7, #21]
 8013902:	461a      	mov	r2, r3
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	3206      	adds	r2, #6
 8013908:	2100      	movs	r1, #0
 801390a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 801390e:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8013910:	7d7b      	ldrb	r3, [r7, #21]
 8013912:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	3206      	adds	r2, #6
 8013918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	1d82      	adds	r2, r0, #6
 8013920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 8013924:	7dfb      	ldrb	r3, [r7, #23]
 8013926:	3301      	adds	r3, #1
 8013928:	75fb      	strb	r3, [r7, #23]
 801392a:	7dfa      	ldrb	r2, [r7, #23]
 801392c:	7dbb      	ldrb	r3, [r7, #22]
 801392e:	429a      	cmp	r2, r3
 8013930:	d39e      	bcc.n	8013870 <VL53L1_f_004+0x74>
	}



	LOG_FUNCTION_END(0);
}
 8013932:	bf00      	nop
 8013934:	bf00      	nop
 8013936:	3718      	adds	r7, #24
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}

0801393c <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b086      	sub	sp, #24
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 8013946:	2300      	movs	r3, #0
 8013948:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 801394a:	2300      	movs	r3, #0
 801394c:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 801394e:	2300      	movs	r3, #0
 8013950:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 8013952:	2300      	movs	r3, #0
 8013954:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801395c:	4618      	mov	r0, r3
 801395e:	f7fd fb85 	bl	801106c <VL53L1_decode_vcsel_period>
 8013962:	4603      	mov	r3, r0
	period = 2048 *
 8013964:	02db      	lsls	r3, r3, #11
 8013966:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 8013968:	68bb      	ldr	r3, [r7, #8]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d00a      	beq.n	8013984 <VL53L1_f_038+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 801396e:	683b      	ldr	r3, [r7, #0]
 8013970:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 8013974:	68ba      	ldr	r2, [r7, #8]
 8013976:	fbb3 f2f2 	udiv	r2, r3, r2
 801397a:	68b9      	ldr	r1, [r7, #8]
 801397c:	fb01 f202 	mul.w	r2, r1, r2
 8013980:	1a9b      	subs	r3, r3, r2
 8013982:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801398a:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 801398c:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 801398e:	1ad3      	subs	r3, r2, r3
 8013990:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	2b00      	cmp	r3, #0
 8013996:	dd09      	ble.n	80139ac <VL53L1_f_038+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801399e:	2b00      	cmp	r3, #0
 80139a0:	da01      	bge.n	80139a6 <VL53L1_f_038+0x6a>
 80139a2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80139a6:	12db      	asrs	r3, r3, #11
 80139a8:	75fb      	strb	r3, [r7, #23]
 80139aa:	e008      	b.n	80139be <VL53L1_f_038+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	da01      	bge.n	80139ba <VL53L1_f_038+0x7e>
 80139b6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80139ba:	12db      	asrs	r3, r3, #11
 80139bc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 80139be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80139c2:	4618      	mov	r0, r3
 80139c4:	3718      	adds	r7, #24
 80139c6:	46bd      	mov	sp, r7
 80139c8:	bd80      	pop	{r7, pc}

080139ca <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 80139ca:	b580      	push	{r7, lr}
 80139cc:	b08e      	sub	sp, #56	; 0x38
 80139ce:	af00      	add	r7, sp, #0
 80139d0:	6078      	str	r0, [r7, #4]
 80139d2:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80139d4:	2300      	movs	r3, #0
 80139d6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53L1_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53L1_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 80139da:	2300      	movs	r3, #0
 80139dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 80139e0:	2300      	movs	r3, #0
 80139e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 80139e6:	2300      	movs	r3, #0
 80139e8:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53L1_p_018       = 0;
 80139ea:	2300      	movs	r3, #0
 80139ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 80139f0:	2300      	movs	r3, #0
 80139f2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 80139f6:	2300      	movs	r3, #0
 80139f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 80139fc:	22ac      	movs	r2, #172	; 0xac
 80139fe:	6879      	ldr	r1, [r7, #4]
 8013a00:	6838      	ldr	r0, [r7, #0]
 8013a02:	f00a fcb1 	bl	801e368 <memcpy>


	podata->VL53L1_p_024 = 0;
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	2200      	movs	r2, #0
 8013a0a:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013a12:	e00a      	b.n	8013a2a <VL53L1_f_039+0x60>
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 8013a14:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013a18:	683a      	ldr	r2, [r7, #0]
 8013a1a:	4413      	add	r3, r2
 8013a1c:	2210      	movs	r2, #16
 8013a1e:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8013a20:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013a24:	3301      	adds	r3, #1
 8013a26:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013a2a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013a2e:	2b05      	cmp	r3, #5
 8013a30:	d9f0      	bls.n	8013a14 <VL53L1_f_039+0x4a>

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8013a32:	2300      	movs	r3, #0
 8013a34:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013a38:	e00b      	b.n	8013a52 <VL53L1_f_039+0x88>
		podata->bin_data[lc] = 0;
 8013a3a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	3206      	adds	r2, #6
 8013a42:	2100      	movs	r1, #0
 8013a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8013a48:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013a4c:	3301      	adds	r3, #1
 8013a4e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013a52:	683b      	ldr	r3, [r7, #0]
 8013a54:	7a5b      	ldrb	r3, [r3, #9]
 8013a56:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d3ed      	bcc.n	8013a3a <VL53L1_f_039+0x70>



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8013a5e:	2300      	movs	r3, #0
 8013a60:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013a64:	e012      	b.n	8013a8c <VL53L1_f_039+0xc2>
		bin_initial_index[lc] = 0x00;
 8013a66:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013a6a:	3338      	adds	r3, #56	; 0x38
 8013a6c:	443b      	add	r3, r7
 8013a6e:	2200      	movs	r2, #0
 8013a70:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 8013a74:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013a78:	3338      	adds	r3, #56	; 0x38
 8013a7a:	443b      	add	r3, r7
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8013a82:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013a86:	3301      	adds	r3, #1
 8013a88:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013a8c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013a90:	2b0f      	cmp	r3, #15
 8013a92:	d9e8      	bls.n	8013a66 <VL53L1_f_039+0x9c>
	}




	bin_seq_length = 0x00;
 8013a94:	2300      	movs	r3, #0
 8013a96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013aa0:	e068      	b.n	8013b74 <VL53L1_f_039+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 8013aa2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013aa6:	687a      	ldr	r2, [r7, #4]
 8013aa8:	4413      	add	r3, r2
 8013aaa:	7b1b      	ldrb	r3, [r3, #12]
 8013aac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 8013ab0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013ab4:	3338      	adds	r3, #56	; 0x38
 8013ab6:	443b      	add	r3, r7
 8013ab8:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d115      	bne.n	8013aec <VL53L1_f_039+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 8013ac0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013ac4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013ac8:	0092      	lsls	r2, r2, #2
 8013aca:	b2d2      	uxtb	r2, r2
 8013acc:	3338      	adds	r3, #56	; 0x38
 8013ace:	443b      	add	r3, r7
 8013ad0:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 8013ad4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013ad8:	683a      	ldr	r2, [r7, #0]
 8013ada:	4413      	add	r3, r2
 8013adc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8013ae0:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 8013ae2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013ae6:	3301      	adds	r3, #1
 8013ae8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 8013aec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013af0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013af4:	443a      	add	r2, r7
 8013af6:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8013afa:	3201      	adds	r2, #1
 8013afc:	b2d2      	uxtb	r2, r2
 8013afe:	3338      	adds	r3, #56	; 0x38
 8013b00:	443b      	add	r3, r7
 8013b02:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53L1_p_018 = bin_initial_index[bin_cfg];
 8013b06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013b0a:	3338      	adds	r3, #56	; 0x38
 8013b0c:	443b      	add	r3, r7
 8013b0e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8013b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 8013b16:	2300      	movs	r3, #0
 8013b18:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8013b1c:	e021      	b.n	8013b62 <VL53L1_f_039+0x198>
			podata->bin_data[VL53L1_p_018+i] +=
 8013b1e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8013b22:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013b26:	441a      	add	r2, r3
 8013b28:	683b      	ldr	r3, [r7, #0]
 8013b2a:	3206      	adds	r2, #6
 8013b2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 8013b30:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013b34:	009a      	lsls	r2, r3, #2
 8013b36:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013b3a:	441a      	add	r2, r3
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	3206      	adds	r2, #6
 8013b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53L1_p_018+i] +=
 8013b44:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 8013b48:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8013b4c:	4402      	add	r2, r0
 8013b4e:	4419      	add	r1, r3
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	3206      	adds	r2, #6
 8013b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 8013b58:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013b5c:	3301      	adds	r3, #1
 8013b5e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8013b62:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013b66:	2b03      	cmp	r3, #3
 8013b68:	d9d9      	bls.n	8013b1e <VL53L1_f_039+0x154>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8013b6a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013b6e:	3301      	adds	r3, #1
 8013b70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013b74:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013b78:	2b05      	cmp	r3, #5
 8013b7a:	d992      	bls.n	8013aa2 <VL53L1_f_039+0xd8>

	}



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013b82:	e022      	b.n	8013bca <VL53L1_f_039+0x200>

		bin_cfg = podata->bin_seq[lc];
 8013b84:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013b88:	683a      	ldr	r2, [r7, #0]
 8013b8a:	4413      	add	r3, r2
 8013b8c:	7b1b      	ldrb	r3, [r3, #12]
 8013b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 8013b92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013b96:	2b0f      	cmp	r3, #15
 8013b98:	d80c      	bhi.n	8013bb4 <VL53L1_f_039+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 8013b9a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 8013b9e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 8013ba2:	3238      	adds	r2, #56	; 0x38
 8013ba4:	443a      	add	r2, r7
 8013ba6:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 8013baa:	683a      	ldr	r2, [r7, #0]
 8013bac:	4413      	add	r3, r2
 8013bae:	460a      	mov	r2, r1
 8013bb0:	749a      	strb	r2, [r3, #18]
 8013bb2:	e005      	b.n	8013bc0 <VL53L1_f_039+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 8013bb4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013bb8:	683a      	ldr	r2, [r7, #0]
 8013bba:	4413      	add	r3, r2
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8013bc0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013bc4:	3301      	adds	r3, #1
 8013bc6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013bca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013bce:	2b05      	cmp	r3, #5
 8013bd0:	d9d8      	bls.n	8013b84 <VL53L1_f_039+0x1ba>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 8013bd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013bd6:	009b      	lsls	r3, r3, #2
 8013bd8:	b2da      	uxtb	r2, r3
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8013bde:	2300      	movs	r3, #0
 8013be0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013be4:	e050      	b.n	8013c88 <VL53L1_f_039+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 8013be6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013bea:	3338      	adds	r3, #56	; 0x38
 8013bec:	443b      	add	r3, r7
 8013bee:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8013bf2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 8013bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	dd41      	ble.n	8013c7e <VL53L1_f_039+0x2b4>

			VL53L1_p_018 = bin_initial_index[lc];
 8013bfa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013bfe:	3338      	adds	r3, #56	; 0x38
 8013c00:	443b      	add	r3, r7
 8013c02:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8013c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8013c10:	e031      	b.n	8013c76 <VL53L1_f_039+0x2ac>
				podata->bin_data[VL53L1_p_018+i] +=
 8013c12:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8013c16:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013c1a:	441a      	add	r2, r3
 8013c1c:	683b      	ldr	r3, [r7, #0]
 8013c1e:	3206      	adds	r2, #6
 8013c20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 8013c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c26:	0fda      	lsrs	r2, r3, #31
 8013c28:	4413      	add	r3, r2
 8013c2a:	105b      	asrs	r3, r3, #1
 8013c2c:	4618      	mov	r0, r3
				podata->bin_data[VL53L1_p_018+i] +=
 8013c2e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8013c32:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013c36:	441a      	add	r2, r3
 8013c38:	4401      	add	r1, r0
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	3206      	adds	r2, #6
 8013c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53L1_p_018+i] /=
 8013c42:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8013c46:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013c4a:	441a      	add	r2, r3
 8013c4c:	683b      	ldr	r3, [r7, #0]
 8013c4e:	3206      	adds	r2, #6
 8013c50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013c54:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8013c58:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013c5c:	441a      	add	r2, r3
 8013c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c60:	fb91 f1f3 	sdiv	r1, r1, r3
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	3206      	adds	r2, #6
 8013c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 8013c6c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013c70:	3301      	adds	r3, #1
 8013c72:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8013c76:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013c7a:	2b03      	cmp	r3, #3
 8013c7c:	d9c9      	bls.n	8013c12 <VL53L1_f_039+0x248>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8013c7e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013c82:	3301      	adds	r3, #1
 8013c84:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013c88:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013c8c:	2b0f      	cmp	r3, #15
 8013c8e:	d9aa      	bls.n	8013be6 <VL53L1_f_039+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	2200      	movs	r2, #0
 8013c94:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 8013c96:	7bfb      	ldrb	r3, [r7, #15]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d102      	bne.n	8013ca2 <VL53L1_f_039+0x2d8>
		(bin_repeat_count[15] > 0))
 8013c9c:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d002      	beq.n	8013ca8 <VL53L1_f_039+0x2de>
		podata->number_of_ambient_bins = 4;
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	2204      	movs	r2, #4
 8013ca6:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 8013ca8:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 8013cac:	4618      	mov	r0, r3
 8013cae:	3738      	adds	r7, #56	; 0x38
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd80      	pop	{r7, pc}

08013cb4 <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 8013cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cb6:	b0cb      	sub	sp, #300	; 0x12c
 8013cb8:	af06      	add	r7, sp, #24
 8013cba:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8013cbe:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8013cc2:	6020      	str	r0, [r4, #0]
 8013cc4:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8013cc8:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8013ccc:	6001      	str	r1, [r0, #0]
 8013cce:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8013cd2:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8013cd6:	600a      	str	r2, [r1, #0]
 8013cd8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8013cdc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8013ce0:	6013      	str	r3, [r2, #0]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53L1_hist_gen3_algo_private_data_t  *palgo_gen3 =
 8013ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013cec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53L1_hist_gen3_algo_private_data_t *) pArea1;
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered4 =
 8013cf0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013cf4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53L1_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53L1_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53L1_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 8013cf8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8013cfc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 8013d00:	f107 0318 	add.w	r3, r7, #24
 8013d04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 8013d08:	2300      	movs	r3, #0
 8013d0a:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 8013d12:	2300      	movs	r3, #0
 8013d14:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 8013d18:	2300      	movs	r3, #0
 8013d1a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 8013d1e:	2300      	movs	r3, #0
 8013d20:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 8013d24:	2300      	movs	r3, #0
 8013d26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53L1_f_039(
 8013d30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013d34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013d38:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8013d3c:	6818      	ldr	r0, [r3, #0]
 8013d3e:	f7ff fe44 	bl	80139ca <VL53L1_f_039>



	VL53L1_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
 8013d42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013d46:	7a9b      	ldrb	r3, [r3, #10]
	VL53L1_init_histogram_bin_data_struct(
 8013d48:	b299      	uxth	r1, r3
 8013d4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013d4e:	3348      	adds	r3, #72	; 0x48
 8013d50:	461a      	mov	r2, r3
 8013d52:	2000      	movs	r0, #0
 8013d54:	f7fd f9db 	bl	801110e <VL53L1_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 8013d58:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8013d5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013d60:	3348      	adds	r3, #72	; 0x48
 8013d62:	4619      	mov	r1, r3
 8013d64:	4610      	mov	r0, r2
 8013d66:	f7fd f994 	bl	8011092 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
 8013d6a:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d142      	bne.n	8013df8 <VL53L1_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8013d72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013d76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d039      	beq.n	8013df8 <VL53L1_hist_process_data+0x144>
		status =
		VL53L1_f_040(
 8013d84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013d88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8013d90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013d94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 8013d9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013da2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 8013dac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013db0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8013dba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8013dbe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8013dc2:	6812      	ldr	r2, [r2, #0]
 8013dc4:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 8013dc8:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8013dcc:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8013dd0:	6809      	ldr	r1, [r1, #0]
 8013dd2:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 8013dd6:	f107 0014 	add.w	r0, r7, #20
 8013dda:	9004      	str	r0, [sp, #16]
 8013ddc:	9103      	str	r1, [sp, #12]
 8013dde:	9202      	str	r2, [sp, #8]
 8013de0:	9301      	str	r3, [sp, #4]
 8013de2:	2300      	movs	r3, #0
 8013de4:	9300      	str	r3, [sp, #0]
 8013de6:	2300      	movs	r3, #0
 8013de8:	4632      	mov	r2, r6
 8013dea:	4629      	mov	r1, r5
 8013dec:	4620      	mov	r0, r4
 8013dee:	f002 f98c 	bl	801610a <VL53L1_f_040>
 8013df2:	4603      	mov	r3, r0
 8013df4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
 8013df8:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d115      	bne.n	8013e2c <VL53L1_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8013e00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013e04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d00c      	beq.n	8013e2c <VL53L1_hist_process_data+0x178>
		status =
			VL53L1_f_041(
 8013e12:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8013e16:	697a      	ldr	r2, [r7, #20]
 8013e18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013e1c:	3348      	adds	r3, #72	; 0x48
 8013e1e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8013e22:	f002 fbe4 	bl	80165ee <VL53L1_f_041>
 8013e26:	4603      	mov	r3, r0
 8013e28:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 8013e2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013e30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 8013e34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013e38:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;
 8013e3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013e40:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53L1_p_006 =
 8013e44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013e48:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 8013e4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013e50:	2200      	movs	r2, #0
 8013e52:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 8013e56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 8013e60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013e64:	2200      	movs	r2, #0
 8013e66:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8013e6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013e6e:	2200      	movs	r2, #0
 8013e70:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 8013e74:	2300      	movs	r3, #0
 8013e76:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8013e7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013e7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d002      	beq.n	8013e92 <VL53L1_hist_process_data+0x1de>
		xtalk_enable = 1;
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 8013e92:	2300      	movs	r3, #0
 8013e94:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8013e98:	e108      	b.n	80140ac <VL53L1_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 8013e9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013e9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8013ea8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53L1_f_033(
 8013eac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013eb0:	3348      	adds	r3, #72	; 0x48
 8013eb2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8013eb6:	7814      	ldrb	r4, [r2, #0]
 8013eb8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8013ebc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8013ec0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8013ec4:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8013ec8:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8013ecc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013ed0:	9405      	str	r4, [sp, #20]
 8013ed2:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8013ed6:	9404      	str	r4, [sp, #16]
 8013ed8:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8013edc:	9403      	str	r4, [sp, #12]
 8013ede:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8013ee2:	9402      	str	r4, [sp, #8]
 8013ee4:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8013ee8:	9401      	str	r4, [sp, #4]
 8013eea:	9300      	str	r3, [sp, #0]
 8013eec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013ef0:	6812      	ldr	r2, [r2, #0]
 8013ef2:	6809      	ldr	r1, [r1, #0]
 8013ef4:	6800      	ldr	r0, [r0, #0]
 8013ef6:	f7fe fe65 	bl	8012bc4 <VL53L1_f_033>
 8013efa:	4603      	mov	r3, r0
 8013efc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53L1_ERROR_NONE && r == 0))
 8013f00:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	f040 80cb 	bne.w	80140a0 <VL53L1_hist_process_data+0x3ec>
 8013f0a:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	f040 80c6 	bne.w	80140a0 <VL53L1_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 8013f14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013f18:	7c9b      	ldrb	r3, [r3, #18]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d110      	bne.n	8013f40 <VL53L1_hist_process_data+0x28c>
			pdata = &(presults->VL53L1_p_002[0]);
 8013f1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013f22:	3314      	adds	r3, #20
 8013f24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53L1_p_001;
 8013f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013f2c:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 8013f2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013f32:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_006 =
				pdmax_algo_gen3->VL53L1_p_006;
 8013f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013f38:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53L1_p_006 =
 8013f3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013f3e:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 8013f40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013f44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 8013f4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8013f50:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8013f54:	781b      	ldrb	r3, [r3, #0]
 8013f56:	461a      	mov	r2, r3
 8013f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013f5c:	fb02 f303 	mul.w	r3, r2, r3
 8013f60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 8013f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013f68:	011b      	lsls	r3, r3, #4
 8013f6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 8013f6e:	2300      	movs	r3, #0
 8013f70:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8013f74:	e08b      	b.n	801408e <VL53L1_hist_process_data+0x3da>

			pdata = &(presults->VL53L1_p_002[t]);
 8013f76:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8013f7a:	224c      	movs	r2, #76	; 0x4c
 8013f7c:	fb02 f303 	mul.w	r3, r2, r3
 8013f80:	3310      	adds	r3, #16
 8013f82:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8013f86:	4413      	add	r3, r2
 8013f88:	3304      	adds	r3, #4
 8013f8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 8013f8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013f92:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8013f96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013f9a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	dd0e      	ble.n	8013fc0 <VL53L1_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 8013fa2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013fa6:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8013faa:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 8013fac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013fb0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013fb4:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 8013fb6:	1ad3      	subs	r3, r2, r3
 8013fb8:	b29b      	uxth	r3, r3
				delta_mm =
 8013fba:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8013fbe:	e00d      	b.n	8013fdc <VL53L1_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 8013fc0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013fc4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013fc8:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 8013fca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013fce:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8013fd2:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 8013fd4:	1ad3      	subs	r3, r2, r3
 8013fd6:	b29b      	uxth	r3, r3
				delta_mm =
 8013fd8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8013fdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013fe0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 8013fe8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8013fec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8013ff0:	781b      	ldrb	r3, [r3, #0]
 8013ff2:	461a      	mov	r2, r3
 8013ff4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8013ff8:	fb02 f303 	mul.w	r3, r2, r3
 8013ffc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 8014000:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014004:	015b      	lsls	r3, r3, #5
 8014006:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 801400a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801400e:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8014012:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014016:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 8014020:	429a      	cmp	r2, r3
 8014022:	dd2f      	ble.n	8014084 <VL53L1_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 8014024:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014028:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 801402c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014030:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 801403a:	429a      	cmp	r2, r3
 801403c:	da22      	bge.n	8014084 <VL53L1_hist_process_data+0x3d0>
			pdata->VL53L1_p_012 <
 801403e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8014044:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8014048:	429a      	cmp	r2, r3
 801404a:	d91b      	bls.n	8014084 <VL53L1_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 801404c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014050:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8014052:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 8014054:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014058:	4293      	cmp	r3, r2
 801405a:	d913      	bls.n	8014084 <VL53L1_hist_process_data+0x3d0>
			delta_mm <
 801405c:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8014060:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8014064:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8014068:	6812      	ldr	r2, [r2, #0]
 801406a:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 801406c:	4293      	cmp	r3, r2
 801406e:	da09      	bge.n	8014084 <VL53L1_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 8014070:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014074:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 8014078:	224c      	movs	r2, #76	; 0x4c
 801407a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 801407e:	4618      	mov	r0, r3
 8014080:	f00a f972 	bl	801e368 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 8014084:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8014088:	3301      	adds	r3, #1
 801408a:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 801408e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014092:	7c9b      	ldrb	r3, [r3, #18]
 8014094:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8014098:	429a      	cmp	r2, r3
 801409a:	f4ff af6c 	bcc.w	8013f76 <VL53L1_hist_process_data+0x2c2>
 801409e:	e000      	b.n	80140a2 <VL53L1_hist_process_data+0x3ee>
			continue;
 80140a0:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 80140a2:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80140a6:	3301      	adds	r3, #1
 80140a8:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 80140ac:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 80140b0:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80140b4:	429a      	cmp	r2, r3
 80140b6:	f67f aef0 	bls.w	8013e9a <VL53L1_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 80140ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80140be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80140c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 80140cc:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 80140d0:	4618      	mov	r0, r3
 80140d2:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080140da <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 80140da:	b580      	push	{r7, lr}
 80140dc:	b086      	sub	sp, #24
 80140de:	af00      	add	r7, sp, #0
 80140e0:	60f8      	str	r0, [r7, #12]
 80140e2:	460b      	mov	r3, r1
 80140e4:	607a      	str	r2, [r7, #4]
 80140e6:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80140e8:	2300      	movs	r3, #0
 80140ea:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53L1_ERROR_NONE)
 80140ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d104      	bne.n	80140fe <VL53L1_nvm_enable+0x24>
		status = VL53L1_disable_firmware(Dev);
 80140f4:	68f8      	ldr	r0, [r7, #12]
 80140f6:	f7f9 fb5a 	bl	800d7ae <VL53L1_disable_firmware>
 80140fa:	4603      	mov	r3, r0
 80140fc:	75fb      	strb	r3, [r7, #23]




	if (status == VL53L1_ERROR_NONE)
 80140fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d104      	bne.n	8014110 <VL53L1_nvm_enable+0x36>
		status = VL53L1_enable_powerforce(Dev);
 8014106:	68f8      	ldr	r0, [r7, #12]
 8014108:	f7f9 fb82 	bl	800d810 <VL53L1_enable_powerforce>
 801410c:	4603      	mov	r3, r0
 801410e:	75fb      	strb	r3, [r7, #23]



	if (status == VL53L1_ERROR_NONE)
 8014110:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d105      	bne.n	8014124 <VL53L1_nvm_enable+0x4a>
		status = VL53L1_WaitUs(
 8014118:	21fa      	movs	r1, #250	; 0xfa
 801411a:	68f8      	ldr	r0, [r7, #12]
 801411c:	f002 fdd0 	bl	8016cc0 <VL53L1_WaitUs>
 8014120:	4603      	mov	r3, r0
 8014122:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 8014124:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d107      	bne.n	801413c <VL53L1_nvm_enable+0x62>
		status = VL53L1_WrByte(
 801412c:	2201      	movs	r2, #1
 801412e:	f240 7181 	movw	r1, #1921	; 0x781
 8014132:	68f8      	ldr	r0, [r7, #12]
 8014134:	f002 fcd0 	bl	8016ad8 <VL53L1_WrByte>
 8014138:	4603      	mov	r3, r0
 801413a:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 801413c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d107      	bne.n	8014154 <VL53L1_nvm_enable+0x7a>
		status = VL53L1_WrByte(
 8014144:	2205      	movs	r2, #5
 8014146:	f240 6183 	movw	r1, #1667	; 0x683
 801414a:	68f8      	ldr	r0, [r7, #12]
 801414c:	f002 fcc4 	bl	8016ad8 <VL53L1_WrByte>
 8014150:	4603      	mov	r3, r0
 8014152:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53L1_ERROR_NONE)
 8014154:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d105      	bne.n	8014168 <VL53L1_nvm_enable+0x8e>
		status = VL53L1_WaitUs(
 801415c:	6879      	ldr	r1, [r7, #4]
 801415e:	68f8      	ldr	r0, [r7, #12]
 8014160:	f002 fdae 	bl	8016cc0 <VL53L1_WaitUs>
 8014164:	4603      	mov	r3, r0
 8014166:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53L1_ERROR_NONE)
 8014168:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d107      	bne.n	8014180 <VL53L1_nvm_enable+0xa6>
		status = VL53L1_WrByte(
 8014170:	2201      	movs	r2, #1
 8014172:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8014176:	68f8      	ldr	r0, [r7, #12]
 8014178:	f002 fcae 	bl	8016ad8 <VL53L1_WrByte>
 801417c:	4603      	mov	r3, r0
 801417e:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53L1_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53L1_ERROR_NONE)
 8014180:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d108      	bne.n	801419a <VL53L1_nvm_enable+0xc0>
		status = VL53L1_WrWord(
 8014188:	897b      	ldrh	r3, [r7, #10]
 801418a:	461a      	mov	r2, r3
 801418c:	f240 7184 	movw	r1, #1924	; 0x784
 8014190:	68f8      	ldr	r0, [r7, #12]
 8014192:	f002 fccb 	bl	8016b2c <VL53L1_WrWord>
 8014196:	4603      	mov	r3, r0
 8014198:	75fb      	strb	r3, [r7, #23]
			VL53L1_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 801419a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 801419e:	4618      	mov	r0, r3
 80141a0:	3718      	adds	r7, #24
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd80      	pop	{r7, pc}

080141a6 <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 80141a6:	b580      	push	{r7, lr}
 80141a8:	b086      	sub	sp, #24
 80141aa:	af00      	add	r7, sp, #0
 80141ac:	60f8      	str	r0, [r7, #12]
 80141ae:	607b      	str	r3, [r7, #4]
 80141b0:	460b      	mov	r3, r1
 80141b2:	72fb      	strb	r3, [r7, #11]
 80141b4:	4613      	mov	r3, r2
 80141b6:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error status   = VL53L1_ERROR_NONE;
 80141b8:	2300      	movs	r3, #0
 80141ba:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 80141bc:	2300      	movs	r3, #0
 80141be:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 80141c0:	7afb      	ldrb	r3, [r7, #11]
 80141c2:	75bb      	strb	r3, [r7, #22]
 80141c4:	e041      	b.n	801424a <VL53L1_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53L1_ERROR_NONE)
 80141c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d108      	bne.n	80141e0 <VL53L1_nvm_read+0x3a>
			status = VL53L1_WrByte(
 80141ce:	7dbb      	ldrb	r3, [r7, #22]
 80141d0:	461a      	mov	r2, r3
 80141d2:	f240 7194 	movw	r1, #1940	; 0x794
 80141d6:	68f8      	ldr	r0, [r7, #12]
 80141d8:	f002 fc7e 	bl	8016ad8 <VL53L1_WrByte>
 80141dc:	4603      	mov	r3, r0
 80141de:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53L1_ERROR_NONE)
 80141e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d107      	bne.n	80141f8 <VL53L1_nvm_read+0x52>
			status = VL53L1_WrByte(
 80141e8:	2200      	movs	r2, #0
 80141ea:	f240 7183 	movw	r1, #1923	; 0x783
 80141ee:	68f8      	ldr	r0, [r7, #12]
 80141f0:	f002 fc72 	bl	8016ad8 <VL53L1_WrByte>
 80141f4:	4603      	mov	r3, r0
 80141f6:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53L1_ERROR_NONE)
 80141f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d105      	bne.n	801420c <VL53L1_nvm_read+0x66>
			status = VL53L1_WaitUs(
 8014200:	2105      	movs	r1, #5
 8014202:	68f8      	ldr	r0, [r7, #12]
 8014204:	f002 fd5c 	bl	8016cc0 <VL53L1_WaitUs>
 8014208:	4603      	mov	r3, r0
 801420a:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53L1_ERROR_NONE)
 801420c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d107      	bne.n	8014224 <VL53L1_nvm_read+0x7e>
			status = VL53L1_WrByte(
 8014214:	2201      	movs	r2, #1
 8014216:	f240 7183 	movw	r1, #1923	; 0x783
 801421a:	68f8      	ldr	r0, [r7, #12]
 801421c:	f002 fc5c 	bl	8016ad8 <VL53L1_WrByte>
 8014220:	4603      	mov	r3, r0
 8014222:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53L1_ERROR_NONE)
 8014224:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d108      	bne.n	801423e <VL53L1_nvm_read+0x98>
			status = VL53L1_ReadMulti(
 801422c:	2304      	movs	r3, #4
 801422e:	687a      	ldr	r2, [r7, #4]
 8014230:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8014234:	68f8      	ldr	r0, [r7, #12]
 8014236:	f002 fc19 	bl	8016a6c <VL53L1_ReadMulti>
 801423a:	4603      	mov	r3, r0
 801423c:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	3304      	adds	r3, #4
 8014242:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8014244:	7dbb      	ldrb	r3, [r7, #22]
 8014246:	3301      	adds	r3, #1
 8014248:	75bb      	strb	r3, [r7, #22]
 801424a:	7dba      	ldrb	r2, [r7, #22]
 801424c:	7af9      	ldrb	r1, [r7, #11]
 801424e:	7abb      	ldrb	r3, [r7, #10]
 8014250:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 8014252:	429a      	cmp	r2, r3
 8014254:	dbb7      	blt.n	80141c6 <VL53L1_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 8014256:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801425a:	4618      	mov	r0, r3
 801425c:	3718      	adds	r7, #24
 801425e:	46bd      	mov	sp, r7
 8014260:	bd80      	pop	{r7, pc}

08014262 <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 8014262:	b580      	push	{r7, lr}
 8014264:	b084      	sub	sp, #16
 8014266:	af00      	add	r7, sp, #0
 8014268:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801426a:	2300      	movs	r3, #0
 801426c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 801426e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d107      	bne.n	8014286 <VL53L1_nvm_disable+0x24>
		status = VL53L1_WrByte(
 8014276:	2201      	movs	r2, #1
 8014278:	f240 7183 	movw	r1, #1923	; 0x783
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f002 fc2b 	bl	8016ad8 <VL53L1_WrByte>
 8014282:	4603      	mov	r3, r0
 8014284:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8014286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d107      	bne.n	801429e <VL53L1_nvm_disable+0x3c>
		status = VL53L1_WrByte(
 801428e:	2200      	movs	r2, #0
 8014290:	f240 7181 	movw	r1, #1921	; 0x781
 8014294:	6878      	ldr	r0, [r7, #4]
 8014296:	f002 fc1f 	bl	8016ad8 <VL53L1_WrByte>
 801429a:	4603      	mov	r3, r0
 801429c:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53L1_ERROR_NONE)
 801429e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d104      	bne.n	80142b0 <VL53L1_nvm_disable+0x4e>
		status = VL53L1_disable_powerforce(Dev);
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	f7f9 fac4 	bl	800d834 <VL53L1_disable_powerforce>
 80142ac:	4603      	mov	r3, r0
 80142ae:	73fb      	strb	r3, [r7, #15]



	if (status == VL53L1_ERROR_NONE)
 80142b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d104      	bne.n	80142c2 <VL53L1_nvm_disable+0x60>
		status = VL53L1_enable_firmware(Dev);
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f7f9 fa66 	bl	800d78a <VL53L1_enable_firmware>
 80142be:	4603      	mov	r3, r0
 80142c0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80142c2:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80142c6:	4618      	mov	r0, r3
 80142c8:	3710      	adds	r7, #16
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}

080142ce <VL53L1_nvm_decode_optical_centre>:

VL53L1_Error VL53L1_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_optical_centre_t    *pdata)
{
 80142ce:	b480      	push	{r7}
 80142d0:	b087      	sub	sp, #28
 80142d2:	af00      	add	r7, sp, #0
 80142d4:	4603      	mov	r3, r0
 80142d6:	60b9      	str	r1, [r7, #8]
 80142d8:	607a      	str	r2, [r7, #4]
 80142da:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 80142dc:	2300      	movs	r3, #0
 80142de:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 80142e0:	2300      	movs	r3, #0
 80142e2:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53L1_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 80142e4:	89fb      	ldrh	r3, [r7, #14]
 80142e6:	2b03      	cmp	r3, #3
 80142e8:	d802      	bhi.n	80142f0 <VL53L1_nvm_decode_optical_centre+0x22>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 80142ea:	f06f 0308 	mvn.w	r3, #8
 80142ee:	e018      	b.n	8014322 <VL53L1_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 80142f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80142f4:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 80142f6:	68bb      	ldr	r3, [r7, #8]
 80142f8:	3302      	adds	r3, #2
 80142fa:	781b      	ldrb	r3, [r3, #0]
 80142fc:	b29b      	uxth	r3, r3
 80142fe:	8afa      	ldrh	r2, [r7, #22]
 8014300:	1ad3      	subs	r3, r2, r3
 8014302:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 8014304:	8afb      	ldrh	r3, [r7, #22]
 8014306:	2bff      	cmp	r3, #255	; 0xff
 8014308:	d901      	bls.n	801430e <VL53L1_nvm_decode_optical_centre+0x40>
		tmp = 0;
 801430a:	2300      	movs	r3, #0
 801430c:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 801430e:	8afb      	ldrh	r3, [r7, #22]
 8014310:	b2da      	uxtb	r2, r3
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 8014316:	68bb      	ldr	r3, [r7, #8]
 8014318:	78da      	ldrb	r2, [r3, #3]
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	705a      	strb	r2, [r3, #1]

	return status;
 801431e:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8014322:	4618      	mov	r0, r3
 8014324:	371c      	adds	r7, #28
 8014326:	46bd      	mov	sp, r7
 8014328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432c:	4770      	bx	lr

0801432e <VL53L1_nvm_decode_cal_peak_rate_map>:

VL53L1_Error VL53L1_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_cal_peak_rate_map_t *pdata)
{
 801432e:	b590      	push	{r4, r7, lr}
 8014330:	b087      	sub	sp, #28
 8014332:	af00      	add	r7, sp, #0
 8014334:	4603      	mov	r3, r0
 8014336:	60b9      	str	r1, [r7, #8]
 8014338:	607a      	str	r2, [r7, #4]
 801433a:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 801433c:	2300      	movs	r3, #0
 801433e:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 8014340:	2300      	movs	r3, #0
 8014342:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 8014344:	2300      	movs	r3, #0
 8014346:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 8014348:	89fb      	ldrh	r3, [r7, #14]
 801434a:	2b37      	cmp	r3, #55	; 0x37
 801434c:	d802      	bhi.n	8014354 <VL53L1_nvm_decode_cal_peak_rate_map+0x26>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 801434e:	f06f 0308 	mvn.w	r3, #8
 8014352:	e03e      	b.n	80143d2 <VL53L1_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8014354:	68b9      	ldr	r1, [r7, #8]
 8014356:	2002      	movs	r0, #2
 8014358:	f7f9 f8fd 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 801435c:	4603      	mov	r3, r0
 801435e:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8014364:	68bb      	ldr	r3, [r7, #8]
 8014366:	3302      	adds	r3, #2
 8014368:	4619      	mov	r1, r3
 801436a:	2002      	movs	r0, #2
 801436c:	f7f9 f8f3 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 8014370:	4603      	mov	r3, r0
 8014372:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 801437c:	099b      	lsrs	r3, r3, #6
 801437e:	b29a      	uxth	r2, r3
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	2219      	movs	r2, #25
 8014388:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	2205      	movs	r2, #5
 801438e:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2205      	movs	r2, #5
 8014394:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 8014396:	68bb      	ldr	r3, [r7, #8]
 8014398:	3304      	adds	r3, #4
 801439a:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 801439c:	2300      	movs	r3, #0
 801439e:	74fb      	strb	r3, [r7, #19]
 80143a0:	e012      	b.n	80143c8 <VL53L1_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 80143a2:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 80143a4:	6979      	ldr	r1, [r7, #20]
 80143a6:	2002      	movs	r0, #2
 80143a8:	f7f9 f8d5 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 80143ac:	4603      	mov	r3, r0
 80143ae:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 80143b0:	687a      	ldr	r2, [r7, #4]
 80143b2:	1d23      	adds	r3, r4, #4
 80143b4:	005b      	lsls	r3, r3, #1
 80143b6:	4413      	add	r3, r2
 80143b8:	460a      	mov	r2, r1
 80143ba:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 80143bc:	697b      	ldr	r3, [r7, #20]
 80143be:	3302      	adds	r3, #2
 80143c0:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 80143c2:	7cfb      	ldrb	r3, [r7, #19]
 80143c4:	3301      	adds	r3, #1
 80143c6:	74fb      	strb	r3, [r7, #19]
 80143c8:	7cfb      	ldrb	r3, [r7, #19]
 80143ca:	2b18      	cmp	r3, #24
 80143cc:	d9e9      	bls.n	80143a2 <VL53L1_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 80143ce:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	371c      	adds	r7, #28
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd90      	pop	{r4, r7, pc}

080143da <VL53L1_nvm_decode_additional_offset_cal_data>:

VL53L1_Error VL53L1_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_additional_offset_cal_data_t *pdata)
{
 80143da:	b580      	push	{r7, lr}
 80143dc:	b086      	sub	sp, #24
 80143de:	af00      	add	r7, sp, #0
 80143e0:	4603      	mov	r3, r0
 80143e2:	60b9      	str	r1, [r7, #8]
 80143e4:	607a      	str	r2, [r7, #4]
 80143e6:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 80143e8:	2300      	movs	r3, #0
 80143ea:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 80143ec:	89fb      	ldrh	r3, [r7, #14]
 80143ee:	2b07      	cmp	r3, #7
 80143f0:	d802      	bhi.n	80143f8 <VL53L1_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 80143f2:	f06f 0308 	mvn.w	r3, #8
 80143f6:	e027      	b.n	8014448 <VL53L1_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 80143f8:	68b9      	ldr	r1, [r7, #8]
 80143fa:	2002      	movs	r0, #2
 80143fc:	f7f9 f8ab 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 8014400:	4603      	mov	r3, r0
 8014402:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	3302      	adds	r3, #2
 801440c:	4619      	mov	r1, r3
 801440e:	2002      	movs	r0, #2
 8014410:	f7f9 f8a1 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 8014414:	4603      	mov	r3, r0
 8014416:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	3304      	adds	r3, #4
 8014420:	4619      	mov	r1, r3
 8014422:	2002      	movs	r0, #2
 8014424:	f7f9 f897 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 8014428:	4603      	mov	r3, r0
 801442a:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8014430:	68bb      	ldr	r3, [r7, #8]
 8014432:	3306      	adds	r3, #6
 8014434:	4619      	mov	r1, r3
 8014436:	2002      	movs	r0, #2
 8014438:	f7f9 f88d 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 801443c:	4603      	mov	r3, r0
 801443e:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	80da      	strh	r2, [r3, #6]

	return status;
 8014444:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014448:	4618      	mov	r0, r3
 801444a:	3718      	adds	r7, #24
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}

08014450 <VL53L1_nvm_decode_fmt_range_results_data>:

VL53L1_Error VL53L1_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b086      	sub	sp, #24
 8014454:	af00      	add	r7, sp, #0
 8014456:	4603      	mov	r3, r0
 8014458:	60b9      	str	r1, [r7, #8]
 801445a:	607a      	str	r2, [r7, #4]
 801445c:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 801445e:	2300      	movs	r3, #0
 8014460:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 8014462:	89fb      	ldrh	r3, [r7, #14]
 8014464:	2b0f      	cmp	r3, #15
 8014466:	d802      	bhi.n	801446e <VL53L1_nvm_decode_fmt_range_results_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8014468:	f06f 0308 	mvn.w	r3, #8
 801446c:	e04d      	b.n	801450a <VL53L1_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 801446e:	68b9      	ldr	r1, [r7, #8]
 8014470:	2002      	movs	r0, #2
 8014472:	f7f9 f870 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 8014476:	4603      	mov	r3, r0
 8014478:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 801447e:	68bb      	ldr	r3, [r7, #8]
 8014480:	789a      	ldrb	r2, [r3, #2]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 8014486:	68bb      	ldr	r3, [r7, #8]
 8014488:	78da      	ldrb	r2, [r3, #3]
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 801448e:	68bb      	ldr	r3, [r7, #8]
 8014490:	3304      	adds	r3, #4
 8014492:	4619      	mov	r1, r3
 8014494:	2002      	movs	r0, #2
 8014496:	f7f9 f85e 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 801449a:	4603      	mov	r3, r0
 801449c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	3306      	adds	r3, #6
 80144a6:	4619      	mov	r1, r3
 80144a8:	2002      	movs	r0, #2
 80144aa:	f7f9 f854 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 80144ae:	4603      	mov	r3, r0
 80144b0:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 80144b6:	68bb      	ldr	r3, [r7, #8]
 80144b8:	3308      	adds	r3, #8
 80144ba:	4619      	mov	r1, r3
 80144bc:	2002      	movs	r0, #2
 80144be:	f7f9 f84a 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 80144c2:	4603      	mov	r3, r0
 80144c4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 80144ca:	68bb      	ldr	r3, [r7, #8]
 80144cc:	330a      	adds	r3, #10
 80144ce:	4619      	mov	r1, r3
 80144d0:	2002      	movs	r0, #2
 80144d2:	f7f9 f840 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 80144d6:	4603      	mov	r3, r0
 80144d8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	330c      	adds	r3, #12
 80144e2:	4619      	mov	r1, r3
 80144e4:	2002      	movs	r0, #2
 80144e6:	f7f9 f836 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 80144ea:	4603      	mov	r3, r0
 80144ec:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 80144f2:	68bb      	ldr	r3, [r7, #8]
 80144f4:	330e      	adds	r3, #14
 80144f6:	4619      	mov	r1, r3
 80144f8:	2002      	movs	r0, #2
 80144fa:	f7f9 f82c 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 80144fe:	4603      	mov	r3, r0
 8014500:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	81da      	strh	r2, [r3, #14]

	return status;
 8014506:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801450a:	4618      	mov	r0, r3
 801450c:	3718      	adds	r7, #24
 801450e:	46bd      	mov	sp, r7
 8014510:	bd80      	pop	{r7, pc}

08014512 <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 8014512:	b580      	push	{r7, lr}
 8014514:	b086      	sub	sp, #24
 8014516:	af00      	add	r7, sp, #0
 8014518:	60f8      	str	r0, [r7, #12]
 801451a:	607b      	str	r3, [r7, #4]
 801451c:	460b      	mov	r3, r1
 801451e:	72fb      	strb	r3, [r7, #11]
 8014520:	4613      	mov	r3, r2
 8014522:	72bb      	strb	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014524:	2300      	movs	r3, #0
 8014526:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8014528:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d106      	bne.n	801453e <VL53L1_read_nvm_raw_data+0x2c>
		status = VL53L1_nvm_enable(
 8014530:	2232      	movs	r2, #50	; 0x32
 8014532:	2104      	movs	r1, #4
 8014534:	68f8      	ldr	r0, [r7, #12]
 8014536:	f7ff fdd0 	bl	80140da <VL53L1_nvm_enable>
 801453a:	4603      	mov	r3, r0
 801453c:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 801453e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d107      	bne.n	8014556 <VL53L1_read_nvm_raw_data+0x44>
		status = VL53L1_nvm_read(
 8014546:	7aba      	ldrb	r2, [r7, #10]
 8014548:	7af9      	ldrb	r1, [r7, #11]
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	68f8      	ldr	r0, [r7, #12]
 801454e:	f7ff fe2a 	bl	80141a6 <VL53L1_nvm_read>
 8014552:	4603      	mov	r3, r0
 8014554:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53L1_ERROR_NONE)
 8014556:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d104      	bne.n	8014568 <VL53L1_read_nvm_raw_data+0x56>
		status = VL53L1_nvm_disable(Dev);
 801455e:	68f8      	ldr	r0, [r7, #12]
 8014560:	f7ff fe7f 	bl	8014262 <VL53L1_nvm_disable>
 8014564:	4603      	mov	r3, r0
 8014566:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 8014568:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 801456c:	4618      	mov	r0, r3
 801456e:	3718      	adds	r7, #24
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}

08014574 <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b084      	sub	sp, #16
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
 801457c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801457e:	2300      	movs	r3, #0
 8014580:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8014582:	f107 0308 	add.w	r3, r7, #8
 8014586:	2201      	movs	r2, #1
 8014588:	212e      	movs	r1, #46	; 0x2e
 801458a:	6878      	ldr	r0, [r7, #4]
 801458c:	f7ff ffc1 	bl	8014512 <VL53L1_read_nvm_raw_data>
 8014590:	4603      	mov	r3, r0
 8014592:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8014594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d108      	bne.n	80145ae <VL53L1_read_nvm_optical_centre+0x3a>
		status =
			VL53L1_nvm_decode_optical_centre(
 801459c:	f107 0308 	add.w	r3, r7, #8
 80145a0:	683a      	ldr	r2, [r7, #0]
 80145a2:	4619      	mov	r1, r3
 80145a4:	2004      	movs	r0, #4
 80145a6:	f7ff fe92 	bl	80142ce <VL53L1_nvm_decode_optical_centre>
 80145aa:	4603      	mov	r3, r0
 80145ac:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 80145ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80145b2:	4618      	mov	r0, r3
 80145b4:	3710      	adds	r7, #16
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bd80      	pop	{r7, pc}

080145ba <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 80145ba:	b580      	push	{r7, lr}
 80145bc:	b092      	sub	sp, #72	; 0x48
 80145be:	af00      	add	r7, sp, #0
 80145c0:	6078      	str	r0, [r7, #4]
 80145c2:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80145c4:	2300      	movs	r3, #0
 80145c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 80145ca:	f107 030c 	add.w	r3, r7, #12
 80145ce:	220e      	movs	r2, #14
 80145d0:	2157      	movs	r1, #87	; 0x57
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f7ff ff9d 	bl	8014512 <VL53L1_read_nvm_raw_data>
 80145d8:	4603      	mov	r3, r0
 80145da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80145de:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d109      	bne.n	80145fa <VL53L1_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53L1_nvm_decode_cal_peak_rate_map(
 80145e6:	f107 030c 	add.w	r3, r7, #12
 80145ea:	683a      	ldr	r2, [r7, #0]
 80145ec:	4619      	mov	r1, r3
 80145ee:	2038      	movs	r0, #56	; 0x38
 80145f0:	f7ff fe9d 	bl	801432e <VL53L1_nvm_decode_cal_peak_rate_map>
 80145f4:	4603      	mov	r3, r0
 80145f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 80145fa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80145fe:	4618      	mov	r0, r3
 8014600:	3748      	adds	r7, #72	; 0x48
 8014602:	46bd      	mov	sp, r7
 8014604:	bd80      	pop	{r7, pc}

08014606 <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 8014606:	b580      	push	{r7, lr}
 8014608:	b086      	sub	sp, #24
 801460a:	af00      	add	r7, sp, #0
 801460c:	6078      	str	r0, [r7, #4]
 801460e:	6039      	str	r1, [r7, #0]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014610:	2300      	movs	r3, #0
 8014612:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8014614:	f107 030c 	add.w	r3, r7, #12
 8014618:	2202      	movs	r2, #2
 801461a:	2165      	movs	r1, #101	; 0x65
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	f7ff ff78 	bl	8014512 <VL53L1_read_nvm_raw_data>
 8014622:	4603      	mov	r3, r0
 8014624:	75fb      	strb	r3, [r7, #23]
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8014626:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d108      	bne.n	8014640 <VL53L1_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 801462e:	f107 030c 	add.w	r3, r7, #12
 8014632:	683a      	ldr	r2, [r7, #0]
 8014634:	4619      	mov	r1, r3
 8014636:	2008      	movs	r0, #8
 8014638:	f7ff fecf 	bl	80143da <VL53L1_nvm_decode_additional_offset_cal_data>
 801463c:	4603      	mov	r3, r0
 801463e:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8014640:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8014644:	4618      	mov	r0, r3
 8014646:	3718      	adds	r7, #24
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}

0801464c <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b08a      	sub	sp, #40	; 0x28
 8014650:	af00      	add	r7, sp, #0
 8014652:	60f8      	str	r0, [r7, #12]
 8014654:	460b      	mov	r3, r1
 8014656:	607a      	str	r2, [r7, #4]
 8014658:	817b      	strh	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 801465a:	2300      	movs	r3, #0
 801465c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 8014660:	897b      	ldrh	r3, [r7, #10]
 8014662:	089b      	lsrs	r3, r3, #2
 8014664:	b29b      	uxth	r3, r3
 8014666:	b2d9      	uxtb	r1, r3
 8014668:	f107 0314 	add.w	r3, r7, #20
 801466c:	2204      	movs	r2, #4
 801466e:	68f8      	ldr	r0, [r7, #12]
 8014670:	f7ff ff4f 	bl	8014512 <VL53L1_read_nvm_raw_data>
 8014674:	4603      	mov	r3, r0
 8014676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 801467a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801467e:	2b00      	cmp	r3, #0
 8014680:	d109      	bne.n	8014696 <VL53L1_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53L1_nvm_decode_fmt_range_results_data(
 8014682:	f107 0314 	add.w	r3, r7, #20
 8014686:	687a      	ldr	r2, [r7, #4]
 8014688:	4619      	mov	r1, r3
 801468a:	2010      	movs	r0, #16
 801468c:	f7ff fee0 	bl	8014450 <VL53L1_nvm_decode_fmt_range_results_data>
 8014690:	4603      	mov	r3, r0
 8014692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 8014696:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 801469a:	4618      	mov	r0, r3
 801469c:	3728      	adds	r7, #40	; 0x28
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}

080146a2 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80146a2:	b580      	push	{r7, lr}
 80146a4:	b086      	sub	sp, #24
 80146a6:	af00      	add	r7, sp, #0
 80146a8:	60f8      	str	r0, [r7, #12]
 80146aa:	460b      	mov	r3, r1
 80146ac:	607a      	str	r2, [r7, #4]
 80146ae:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80146b0:	2300      	movs	r3, #0
 80146b2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80146b4:	897b      	ldrh	r3, [r7, #10]
 80146b6:	2b0a      	cmp	r3, #10
 80146b8:	d802      	bhi.n	80146c0 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80146ba:	f06f 0309 	mvn.w	r3, #9
 80146be:	e047      	b.n	8014750 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	781b      	ldrb	r3, [r3, #0]
 80146c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80146c8:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80146d6:	f002 020f 	and.w	r2, r2, #15
 80146da:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 80146dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 80146e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80146ea:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80146ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80146f6:	f002 0203 	and.w	r2, r2, #3
 80146fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80146fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8014706:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801470a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 801470c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	88d8      	ldrh	r0, [r3, #6]
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	3305      	adds	r3, #5
 8014716:	461a      	mov	r2, r3
 8014718:	2102      	movs	r1, #2
 801471a:	f7f8 fef1 	bl	800d500 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8014722:	68fa      	ldr	r2, [r7, #12]
 8014724:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8014726:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 801472c:	68fa      	ldr	r2, [r7, #12]
 801472e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8014730:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 801473a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801473e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8014740:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8014746:	68fa      	ldr	r2, [r7, #12]
 8014748:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 801474a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801474c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014750:	4618      	mov	r0, r3
 8014752:	3718      	adds	r7, #24
 8014754:	46bd      	mov	sp, r7
 8014756:	bd80      	pop	{r7, pc}

08014758 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8014758:	b580      	push	{r7, lr}
 801475a:	b086      	sub	sp, #24
 801475c:	af00      	add	r7, sp, #0
 801475e:	4603      	mov	r3, r0
 8014760:	60b9      	str	r1, [r7, #8]
 8014762:	607a      	str	r2, [r7, #4]
 8014764:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014766:	2300      	movs	r3, #0
 8014768:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 801476a:	89fb      	ldrh	r3, [r7, #14]
 801476c:	2b0a      	cmp	r3, #10
 801476e:	d802      	bhi.n	8014776 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014770:	f06f 0309 	mvn.w	r3, #9
 8014774:	e046      	b.n	8014804 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8014776:	68bb      	ldr	r3, [r7, #8]
 8014778:	781b      	ldrb	r3, [r3, #0]
 801477a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801477e:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8014784:	68bb      	ldr	r3, [r7, #8]
 8014786:	3301      	adds	r3, #1
 8014788:	781b      	ldrb	r3, [r3, #0]
 801478a:	f003 030f 	and.w	r3, r3, #15
 801478e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8014794:	68bb      	ldr	r3, [r7, #8]
 8014796:	3302      	adds	r3, #2
 8014798:	781b      	ldrb	r3, [r3, #0]
 801479a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801479e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80147a4:	68bb      	ldr	r3, [r7, #8]
 80147a6:	3303      	adds	r3, #3
 80147a8:	781b      	ldrb	r3, [r3, #0]
 80147aa:	f003 0303 	and.w	r3, r3, #3
 80147ae:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 80147b4:	68bb      	ldr	r3, [r7, #8]
 80147b6:	3304      	adds	r3, #4
 80147b8:	781b      	ldrb	r3, [r3, #0]
 80147ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80147be:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 80147c4:	68bb      	ldr	r3, [r7, #8]
 80147c6:	3305      	adds	r3, #5
 80147c8:	4619      	mov	r1, r3
 80147ca:	2002      	movs	r0, #2
 80147cc:	f7f8 fec3 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 80147d0:	4603      	mov	r3, r0
 80147d2:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 80147d8:	68bb      	ldr	r3, [r7, #8]
 80147da:	79da      	ldrb	r2, [r3, #7]
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	7a1a      	ldrb	r2, [r3, #8]
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	3309      	adds	r3, #9
 80147ec:	781b      	ldrb	r3, [r3, #0]
 80147ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80147f2:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 80147f8:	68bb      	ldr	r3, [r7, #8]
 80147fa:	7a9a      	ldrb	r2, [r3, #10]
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8014800:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014804:	4618      	mov	r0, r3
 8014806:	3718      	adds	r7, #24
 8014808:	46bd      	mov	sp, r7
 801480a:	bd80      	pop	{r7, pc}

0801480c <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b086      	sub	sp, #24
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
 8014814:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014816:	2300      	movs	r3, #0
 8014818:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 801481a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d108      	bne.n	8014834 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8014822:	f107 020c 	add.w	r2, r7, #12
 8014826:	230b      	movs	r3, #11
 8014828:	2101      	movs	r1, #1
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f002 f91e 	bl	8016a6c <VL53L1_ReadMulti>
 8014830:	4603      	mov	r3, r0
 8014832:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8014834:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d108      	bne.n	801484e <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 801483c:	f107 030c 	add.w	r3, r7, #12
 8014840:	683a      	ldr	r2, [r7, #0]
 8014842:	4619      	mov	r1, r3
 8014844:	200b      	movs	r0, #11
 8014846:	f7ff ff87 	bl	8014758 <VL53L1_i2c_decode_static_nvm_managed>
 801484a:	4603      	mov	r3, r0
 801484c:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801484e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014852:	4618      	mov	r0, r3
 8014854:	3718      	adds	r7, #24
 8014856:	46bd      	mov	sp, r7
 8014858:	bd80      	pop	{r7, pc}

0801485a <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801485a:	b580      	push	{r7, lr}
 801485c:	b086      	sub	sp, #24
 801485e:	af00      	add	r7, sp, #0
 8014860:	60f8      	str	r0, [r7, #12]
 8014862:	460b      	mov	r3, r1
 8014864:	607a      	str	r2, [r7, #4]
 8014866:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014868:	2300      	movs	r3, #0
 801486a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 801486c:	897b      	ldrh	r3, [r7, #10]
 801486e:	2b16      	cmp	r3, #22
 8014870:	d802      	bhi.n	8014878 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014872:	f06f 0309 	mvn.w	r3, #9
 8014876:	e076      	b.n	8014966 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8014884:	68fa      	ldr	r2, [r7, #12]
 8014886:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8014888:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 801488e:	68fa      	ldr	r2, [r7, #12]
 8014890:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8014892:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8014898:	68fa      	ldr	r2, [r7, #12]
 801489a:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 801489c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 80148a2:	68fa      	ldr	r2, [r7, #12]
 80148a4:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80148a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80148b0:	f002 020f 	and.w	r2, r2, #15
 80148b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80148b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 80148bc:	68fa      	ldr	r2, [r7, #12]
 80148be:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 80148c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80148ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80148ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80148d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 80148da:	f002 0203 	and.w	r2, r2, #3
 80148de:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80148e0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	8958      	ldrh	r0, [r3, #10]
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	3309      	adds	r3, #9
 80148ea:	461a      	mov	r2, r3
 80148ec:	2102      	movs	r1, #2
 80148ee:	f7f8 fe07 	bl	800d500 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	330b      	adds	r3, #11
 80148fc:	461a      	mov	r2, r3
 80148fe:	2102      	movs	r1, #2
 8014900:	f7f8 fe49 	bl	800d596 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	330d      	adds	r3, #13
 801490e:	461a      	mov	r2, r3
 8014910:	2102      	movs	r1, #2
 8014912:	f7f8 fe40 	bl	800d596 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	8a18      	ldrh	r0, [r3, #16]
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	330f      	adds	r3, #15
 801491e:	461a      	mov	r2, r3
 8014920:	2102      	movs	r1, #2
 8014922:	f7f8 fded 	bl	800d500 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 801492c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014930:	b218      	sxth	r0, r3
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	3311      	adds	r3, #17
 8014936:	461a      	mov	r2, r3
 8014938:	2102      	movs	r1, #2
 801493a:	f7f8 fe2c 	bl	800d596 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	3313      	adds	r3, #19
 8014948:	461a      	mov	r2, r3
 801494a:	2102      	movs	r1, #2
 801494c:	f7f8 fe23 	bl	800d596 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	3315      	adds	r3, #21
 801495a:	461a      	mov	r2, r3
 801495c:	2102      	movs	r1, #2
 801495e:	f7f8 fe1a 	bl	800d596 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8014962:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014966:	4618      	mov	r0, r3
 8014968:	3718      	adds	r7, #24
 801496a:	46bd      	mov	sp, r7
 801496c:	bd80      	pop	{r7, pc}

0801496e <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 801496e:	b580      	push	{r7, lr}
 8014970:	b086      	sub	sp, #24
 8014972:	af00      	add	r7, sp, #0
 8014974:	4603      	mov	r3, r0
 8014976:	60b9      	str	r1, [r7, #8]
 8014978:	607a      	str	r2, [r7, #4]
 801497a:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801497c:	2300      	movs	r3, #0
 801497e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8014980:	89fb      	ldrh	r3, [r7, #14]
 8014982:	2b16      	cmp	r3, #22
 8014984:	d802      	bhi.n	801498c <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014986:	f06f 0309 	mvn.w	r3, #9
 801498a:	e079      	b.n	8014a80 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 801498c:	68bb      	ldr	r3, [r7, #8]
 801498e:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8014994:	68bb      	ldr	r3, [r7, #8]
 8014996:	785a      	ldrb	r2, [r3, #1]
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	789a      	ldrb	r2, [r3, #2]
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	78da      	ldrb	r2, [r3, #3]
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 80149ac:	68bb      	ldr	r3, [r7, #8]
 80149ae:	791a      	ldrb	r2, [r3, #4]
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	3305      	adds	r3, #5
 80149b8:	781b      	ldrb	r3, [r3, #0]
 80149ba:	f003 030f 	and.w	r3, r3, #15
 80149be:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	799a      	ldrb	r2, [r3, #6]
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	3307      	adds	r3, #7
 80149d0:	781b      	ldrb	r3, [r3, #0]
 80149d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80149d6:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 80149dc:	68bb      	ldr	r3, [r7, #8]
 80149de:	3308      	adds	r3, #8
 80149e0:	781b      	ldrb	r3, [r3, #0]
 80149e2:	f003 0303 	and.w	r3, r3, #3
 80149e6:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 80149ec:	68bb      	ldr	r3, [r7, #8]
 80149ee:	3309      	adds	r3, #9
 80149f0:	4619      	mov	r1, r3
 80149f2:	2002      	movs	r0, #2
 80149f4:	f7f8 fdaf 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 80149f8:	4603      	mov	r3, r0
 80149fa:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	330b      	adds	r3, #11
 8014a04:	4619      	mov	r1, r3
 8014a06:	2002      	movs	r0, #2
 8014a08:	f7f8 fdf1 	bl	800d5ee <VL53L1_i2c_decode_int16_t>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8014a14:	68bb      	ldr	r3, [r7, #8]
 8014a16:	330d      	adds	r3, #13
 8014a18:	4619      	mov	r1, r3
 8014a1a:	2002      	movs	r0, #2
 8014a1c:	f7f8 fde7 	bl	800d5ee <VL53L1_i2c_decode_int16_t>
 8014a20:	4603      	mov	r3, r0
 8014a22:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8014a28:	68bb      	ldr	r3, [r7, #8]
 8014a2a:	330f      	adds	r3, #15
 8014a2c:	4619      	mov	r1, r3
 8014a2e:	2002      	movs	r0, #2
 8014a30:	f7f8 fd91 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 8014a34:	4603      	mov	r3, r0
 8014a36:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8014a3c:	68bb      	ldr	r3, [r7, #8]
 8014a3e:	3311      	adds	r3, #17
 8014a40:	4619      	mov	r1, r3
 8014a42:	2002      	movs	r0, #2
 8014a44:	f7f8 fdd3 	bl	800d5ee <VL53L1_i2c_decode_int16_t>
 8014a48:	4603      	mov	r3, r0
 8014a4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014a4e:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8014a54:	68bb      	ldr	r3, [r7, #8]
 8014a56:	3313      	adds	r3, #19
 8014a58:	4619      	mov	r1, r3
 8014a5a:	2002      	movs	r0, #2
 8014a5c:	f7f8 fdc7 	bl	800d5ee <VL53L1_i2c_decode_int16_t>
 8014a60:	4603      	mov	r3, r0
 8014a62:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8014a68:	68bb      	ldr	r3, [r7, #8]
 8014a6a:	3315      	adds	r3, #21
 8014a6c:	4619      	mov	r1, r3
 8014a6e:	2002      	movs	r0, #2
 8014a70:	f7f8 fdbd 	bl	800d5ee <VL53L1_i2c_decode_int16_t>
 8014a74:	4603      	mov	r3, r0
 8014a76:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8014a7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014a80:	4618      	mov	r0, r3
 8014a82:	3718      	adds	r7, #24
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}

08014a88 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b088      	sub	sp, #32
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014a92:	2300      	movs	r3, #0
 8014a94:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8014a96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d108      	bne.n	8014ab0 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8014a9e:	f107 0208 	add.w	r2, r7, #8
 8014aa2:	2317      	movs	r3, #23
 8014aa4:	210d      	movs	r1, #13
 8014aa6:	6878      	ldr	r0, [r7, #4]
 8014aa8:	f001 ffe0 	bl	8016a6c <VL53L1_ReadMulti>
 8014aac:	4603      	mov	r3, r0
 8014aae:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8014ab0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d108      	bne.n	8014aca <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8014ab8:	f107 0308 	add.w	r3, r7, #8
 8014abc:	683a      	ldr	r2, [r7, #0]
 8014abe:	4619      	mov	r1, r3
 8014ac0:	2017      	movs	r0, #23
 8014ac2:	f7ff ff54 	bl	801496e <VL53L1_i2c_decode_customer_nvm_managed>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8014aca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014ace:	4618      	mov	r0, r3
 8014ad0:	3720      	adds	r7, #32
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd80      	pop	{r7, pc}

08014ad6 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8014ad6:	b580      	push	{r7, lr}
 8014ad8:	b086      	sub	sp, #24
 8014ada:	af00      	add	r7, sp, #0
 8014adc:	60f8      	str	r0, [r7, #12]
 8014ade:	460b      	mov	r3, r1
 8014ae0:	607a      	str	r2, [r7, #4]
 8014ae2:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 8014ae8:	897b      	ldrh	r3, [r7, #10]
 8014aea:	2b1f      	cmp	r3, #31
 8014aec:	d802      	bhi.n	8014af4 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014aee:	f06f 0309 	mvn.w	r3, #9
 8014af2:	e0cf      	b.n	8014c94 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	881b      	ldrh	r3, [r3, #0]
 8014af8:	687a      	ldr	r2, [r7, #4]
 8014afa:	2102      	movs	r1, #2
 8014afc:	4618      	mov	r0, r3
 8014afe:	f7f8 fcff 	bl	800d500 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8014b0a:	f002 0201 	and.w	r2, r2, #1
 8014b0e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8014b10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8014b1a:	f002 020f 	and.w	r2, r2, #15
 8014b1e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8014b20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8014b2a:	f002 020f 	and.w	r2, r2, #15
 8014b2e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8014b30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8014b3a:	f002 021f 	and.w	r2, r2, #31
 8014b3e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8014b40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8014b4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014b4e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8014b50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8014b5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014b5e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8014b60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8014b6a:	f002 0201 	and.w	r2, r2, #1
 8014b6e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8014b70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8014b76:	68fa      	ldr	r2, [r7, #12]
 8014b78:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 8014b7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8014b84:	f002 0201 	and.w	r2, r2, #1
 8014b88:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8014b8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8014b94:	f002 0203 	and.w	r2, r2, #3
 8014b98:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8014b9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8014ba4:	f002 021f 	and.w	r2, r2, #31
 8014ba8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8014baa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8014bb4:	f002 0203 	and.w	r2, r2, #3
 8014bb8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8014bba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8014bc4:	f002 0203 	and.w	r2, r2, #3
 8014bc8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8014bca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8014bd4:	f002 0207 	and.w	r2, r2, #7
 8014bd8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8014bda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8014be4:	f002 021f 	and.w	r2, r2, #31
 8014be8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8014bea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8014bf4:	f002 0201 	and.w	r2, r2, #1
 8014bf8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8014bfa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8014c00:	68fa      	ldr	r2, [r7, #12]
 8014c02:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8014c04:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8014c0a:	68fa      	ldr	r2, [r7, #12]
 8014c0c:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8014c0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8014c14:	68fa      	ldr	r2, [r7, #12]
 8014c16:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8014c18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8014c1e:	68fa      	ldr	r2, [r7, #12]
 8014c20:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8014c22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8014c28:	68fa      	ldr	r2, [r7, #12]
 8014c2a:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8014c2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8014c32:	68fa      	ldr	r2, [r7, #12]
 8014c34:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8014c36:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	8b18      	ldrh	r0, [r3, #24]
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	3318      	adds	r3, #24
 8014c40:	461a      	mov	r2, r3
 8014c42:	2102      	movs	r1, #2
 8014c44:	f7f8 fc5c 	bl	800d500 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8014c4c:	68fa      	ldr	r2, [r7, #12]
 8014c4e:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8014c50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8014c56:	68fa      	ldr	r2, [r7, #12]
 8014c58:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8014c5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8014c64:	f002 020f 	and.w	r2, r2, #15
 8014c68:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8014c6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8014c70:	68fa      	ldr	r2, [r7, #12]
 8014c72:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8014c74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8014c7e:	f002 020f 	and.w	r2, r2, #15
 8014c82:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8014c84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8014c8a:	68fa      	ldr	r2, [r7, #12]
 8014c8c:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8014c8e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8014c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014c94:	4618      	mov	r0, r3
 8014c96:	3718      	adds	r7, #24
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd80      	pop	{r7, pc}

08014c9c <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b086      	sub	sp, #24
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	60f8      	str	r0, [r7, #12]
 8014ca4:	460b      	mov	r3, r1
 8014ca6:	607a      	str	r2, [r7, #4]
 8014ca8:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014caa:	2300      	movs	r3, #0
 8014cac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8014cae:	897b      	ldrh	r3, [r7, #10]
 8014cb0:	2b15      	cmp	r3, #21
 8014cb2:	d802      	bhi.n	8014cba <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014cb4:	f06f 0309 	mvn.w	r3, #9
 8014cb8:	e070      	b.n	8014d9c <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8014cc6:	68fa      	ldr	r2, [r7, #12]
 8014cc8:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8014cca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8014cd0:	68fa      	ldr	r2, [r7, #12]
 8014cd2:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8014cd4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8014cde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014ce2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8014ce4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8014cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014cee:	b298      	uxth	r0, r3
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	3304      	adds	r3, #4
 8014cf4:	461a      	mov	r2, r3
 8014cf6:	2102      	movs	r1, #2
 8014cf8:	f7f8 fc02 	bl	800d500 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8014d04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014d08:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8014d0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8014d10:	68fa      	ldr	r2, [r7, #12]
 8014d12:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8014d14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8014d1a:	68fa      	ldr	r2, [r7, #12]
 8014d1c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8014d1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8014d28:	f002 0201 	and.w	r2, r2, #1
 8014d2c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8014d2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8014d38:	f002 0207 	and.w	r2, r2, #7
 8014d3c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8014d3e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	8998      	ldrh	r0, [r3, #12]
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	330c      	adds	r3, #12
 8014d48:	461a      	mov	r2, r3
 8014d4a:	2102      	movs	r1, #2
 8014d4c:	f7f8 fbd8 	bl	800d500 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	89d8      	ldrh	r0, [r3, #14]
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	330e      	adds	r3, #14
 8014d58:	461a      	mov	r2, r3
 8014d5a:	2102      	movs	r1, #2
 8014d5c:	f7f8 fbd0 	bl	800d500 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	8a18      	ldrh	r0, [r3, #16]
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	3310      	adds	r3, #16
 8014d68:	461a      	mov	r2, r3
 8014d6a:	2102      	movs	r1, #2
 8014d6c:	f7f8 fbc8 	bl	800d500 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8014d74:	68fa      	ldr	r2, [r7, #12]
 8014d76:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8014d78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8014d7e:	68fa      	ldr	r2, [r7, #12]
 8014d80:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8014d82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8014d88:	68fa      	ldr	r2, [r7, #12]
 8014d8a:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8014d8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8014d92:	68fa      	ldr	r2, [r7, #12]
 8014d94:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8014d96:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8014d98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	3718      	adds	r7, #24
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd80      	pop	{r7, pc}

08014da4 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b086      	sub	sp, #24
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	60f8      	str	r0, [r7, #12]
 8014dac:	460b      	mov	r3, r1
 8014dae:	607a      	str	r2, [r7, #4]
 8014db0:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014db2:	2300      	movs	r3, #0
 8014db4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 8014db6:	897b      	ldrh	r3, [r7, #10]
 8014db8:	2b16      	cmp	r3, #22
 8014dba:	d802      	bhi.n	8014dc2 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014dbc:	f06f 0309 	mvn.w	r3, #9
 8014dc0:	e06e      	b.n	8014ea0 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	781b      	ldrb	r3, [r3, #0]
 8014dc6:	f003 030f 	and.w	r3, r3, #15
 8014dca:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8014dd4:	68fa      	ldr	r2, [r7, #12]
 8014dd6:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8014dd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8014de2:	f002 020f 	and.w	r2, r2, #15
 8014de6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8014de8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8014dee:	68fa      	ldr	r2, [r7, #12]
 8014df0:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8014df2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8014dfc:	f002 020f 	and.w	r2, r2, #15
 8014e00:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8014e02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8014e08:	68fa      	ldr	r2, [r7, #12]
 8014e0a:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8014e0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8014e16:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8014e1a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8014e1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8014e26:	f002 020f 	and.w	r2, r2, #15
 8014e2a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8014e2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8014e32:	68fa      	ldr	r2, [r7, #12]
 8014e34:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8014e36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8014e40:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8014e44:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8014e46:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	8958      	ldrh	r0, [r3, #10]
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	330a      	adds	r3, #10
 8014e50:	461a      	mov	r2, r3
 8014e52:	2102      	movs	r1, #2
 8014e54:	f7f8 fb54 	bl	800d500 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	8998      	ldrh	r0, [r3, #12]
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	330c      	adds	r3, #12
 8014e60:	461a      	mov	r2, r3
 8014e62:	2102      	movs	r1, #2
 8014e64:	f7f8 fb4c 	bl	800d500 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8014e6c:	68fa      	ldr	r2, [r7, #12]
 8014e6e:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8014e70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8014e76:	68fa      	ldr	r2, [r7, #12]
 8014e78:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8014e7a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	6918      	ldr	r0, [r3, #16]
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	3312      	adds	r3, #18
 8014e84:	461a      	mov	r2, r3
 8014e86:	2104      	movs	r1, #4
 8014e88:	f7f8 fbda 	bl	800d640 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8014e94:	f002 0201 	and.w	r2, r2, #1
 8014e98:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8014e9a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8014e9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	3718      	adds	r7, #24
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}

08014ea8 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b086      	sub	sp, #24
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	60f8      	str	r0, [r7, #12]
 8014eb0:	460b      	mov	r3, r1
 8014eb2:	607a      	str	r2, [r7, #4]
 8014eb4:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8014eba:	897b      	ldrh	r3, [r7, #10]
 8014ebc:	2b11      	cmp	r3, #17
 8014ebe:	d802      	bhi.n	8014ec6 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014ec0:	f06f 0309 	mvn.w	r3, #9
 8014ec4:	e071      	b.n	8014faa <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	781b      	ldrb	r3, [r3, #0]
 8014eca:	f003 0303 	and.w	r3, r3, #3
 8014ece:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	8858      	ldrh	r0, [r3, #2]
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	3301      	adds	r3, #1
 8014edc:	461a      	mov	r2, r3
 8014ede:	2102      	movs	r1, #2
 8014ee0:	f7f8 fb0e 	bl	800d500 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	8898      	ldrh	r0, [r3, #4]
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	3303      	adds	r3, #3
 8014eec:	461a      	mov	r2, r3
 8014eee:	2102      	movs	r1, #2
 8014ef0:	f7f8 fb06 	bl	800d500 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8014efc:	f002 0201 	and.w	r2, r2, #1
 8014f00:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8014f02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8014f0c:	f002 0207 	and.w	r2, r2, #7
 8014f10:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8014f12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8014f18:	68fa      	ldr	r2, [r7, #12]
 8014f1a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8014f1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8014f22:	68fa      	ldr	r2, [r7, #12]
 8014f24:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8014f26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8014f30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014f34:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8014f36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8014f40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014f44:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8014f46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8014f50:	f002 0203 	and.w	r2, r2, #3
 8014f54:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8014f56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8014f60:	f002 0203 	and.w	r2, r2, #3
 8014f64:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8014f66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8014f70:	f002 020f 	and.w	r2, r2, #15
 8014f74:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8014f76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8014f7c:	68fa      	ldr	r2, [r7, #12]
 8014f7e:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8014f80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8014f86:	68fa      	ldr	r2, [r7, #12]
 8014f88:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8014f8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8014f90:	68fa      	ldr	r2, [r7, #12]
 8014f92:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8014f94:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8014f9e:	f002 0203 	and.w	r2, r2, #3
 8014fa2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8014fa4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8014fa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014faa:	4618      	mov	r0, r3
 8014fac:	3718      	adds	r7, #24
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	bd80      	pop	{r7, pc}

08014fb2 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8014fb2:	b480      	push	{r7}
 8014fb4:	b087      	sub	sp, #28
 8014fb6:	af00      	add	r7, sp, #0
 8014fb8:	60f8      	str	r0, [r7, #12]
 8014fba:	460b      	mov	r3, r1
 8014fbc:	607a      	str	r2, [r7, #4]
 8014fbe:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8014fc4:	897b      	ldrh	r3, [r7, #10]
 8014fc6:	2b04      	cmp	r3, #4
 8014fc8:	d802      	bhi.n	8014fd0 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014fca:	f06f 0309 	mvn.w	r3, #9
 8014fce:	e025      	b.n	801501c <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	781b      	ldrb	r3, [r3, #0]
 8014fd4:	f003 0301 	and.w	r3, r3, #1
 8014fd8:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8014fe6:	f002 0201 	and.w	r2, r2, #1
 8014fea:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8014fec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8014ff6:	f002 0201 	and.w	r2, r2, #1
 8014ffa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8014ffc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8015006:	f002 0203 	and.w	r2, r2, #3
 801500a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801500c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8015012:	68fa      	ldr	r2, [r7, #12]
 8015014:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8015016:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8015018:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801501c:	4618      	mov	r0, r3
 801501e:	371c      	adds	r7, #28
 8015020:	46bd      	mov	sp, r7
 8015022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015026:	4770      	bx	lr

08015028 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b084      	sub	sp, #16
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]
 8015030:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015032:	2300      	movs	r3, #0
 8015034:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8015036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d108      	bne.n	8015050 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 801503e:	f107 0308 	add.w	r3, r7, #8
 8015042:	461a      	mov	r2, r3
 8015044:	2105      	movs	r1, #5
 8015046:	6838      	ldr	r0, [r7, #0]
 8015048:	f7ff ffb3 	bl	8014fb2 <VL53L1_i2c_encode_system_control>
 801504c:	4603      	mov	r3, r0
 801504e:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8015050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d108      	bne.n	801506a <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8015058:	f107 0208 	add.w	r2, r7, #8
 801505c:	2305      	movs	r3, #5
 801505e:	2183      	movs	r1, #131	; 0x83
 8015060:	6878      	ldr	r0, [r7, #4]
 8015062:	f001 fccd 	bl	8016a00 <VL53L1_WriteMulti>
 8015066:	4603      	mov	r3, r0
 8015068:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 801506a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801506e:	4618      	mov	r0, r3
 8015070:	3710      	adds	r7, #16
 8015072:	46bd      	mov	sp, r7
 8015074:	bd80      	pop	{r7, pc}

08015076 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8015076:	b580      	push	{r7, lr}
 8015078:	b086      	sub	sp, #24
 801507a:	af00      	add	r7, sp, #0
 801507c:	4603      	mov	r3, r0
 801507e:	60b9      	str	r1, [r7, #8]
 8015080:	607a      	str	r2, [r7, #4]
 8015082:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015084:	2300      	movs	r3, #0
 8015086:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8015088:	89fb      	ldrh	r3, [r7, #14]
 801508a:	2b2b      	cmp	r3, #43	; 0x2b
 801508c:	d802      	bhi.n	8015094 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801508e:	f06f 0309 	mvn.w	r3, #9
 8015092:	e0e2      	b.n	801525a <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8015094:	68bb      	ldr	r3, [r7, #8]
 8015096:	781b      	ldrb	r3, [r3, #0]
 8015098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801509c:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 80150a2:	68bb      	ldr	r3, [r7, #8]
 80150a4:	785a      	ldrb	r2, [r3, #1]
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 80150aa:	68bb      	ldr	r3, [r7, #8]
 80150ac:	3302      	adds	r3, #2
 80150ae:	781b      	ldrb	r3, [r3, #0]
 80150b0:	f003 030f 	and.w	r3, r3, #15
 80150b4:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 80150ba:	68bb      	ldr	r3, [r7, #8]
 80150bc:	78da      	ldrb	r2, [r3, #3]
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 80150c2:	68bb      	ldr	r3, [r7, #8]
 80150c4:	3304      	adds	r3, #4
 80150c6:	4619      	mov	r1, r3
 80150c8:	2002      	movs	r0, #2
 80150ca:	f7f8 fa44 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 80150ce:	4603      	mov	r3, r0
 80150d0:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 80150d6:	68bb      	ldr	r3, [r7, #8]
 80150d8:	3306      	adds	r3, #6
 80150da:	4619      	mov	r1, r3
 80150dc:	2002      	movs	r0, #2
 80150de:	f7f8 fa3a 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 80150e2:	4603      	mov	r3, r0
 80150e4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	3308      	adds	r3, #8
 80150ee:	4619      	mov	r1, r3
 80150f0:	2002      	movs	r0, #2
 80150f2:	f7f8 fa30 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 80150f6:	4603      	mov	r3, r0
 80150f8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	330a      	adds	r3, #10
 8015102:	4619      	mov	r1, r3
 8015104:	2002      	movs	r0, #2
 8015106:	f7f8 fa26 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 801510a:	4603      	mov	r3, r0
 801510c:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8015112:	68bb      	ldr	r3, [r7, #8]
 8015114:	330c      	adds	r3, #12
 8015116:	4619      	mov	r1, r3
 8015118:	2002      	movs	r0, #2
 801511a:	f7f8 fa1c 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 801511e:	4603      	mov	r3, r0
 8015120:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8015126:	68bb      	ldr	r3, [r7, #8]
 8015128:	330e      	adds	r3, #14
 801512a:	4619      	mov	r1, r3
 801512c:	2002      	movs	r0, #2
 801512e:	f7f8 fa12 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 8015132:	4603      	mov	r3, r0
 8015134:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 801513a:	68bb      	ldr	r3, [r7, #8]
 801513c:	3310      	adds	r3, #16
 801513e:	4619      	mov	r1, r3
 8015140:	2002      	movs	r0, #2
 8015142:	f7f8 fa08 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 8015146:	4603      	mov	r3, r0
 8015148:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 801514e:	68bb      	ldr	r3, [r7, #8]
 8015150:	3312      	adds	r3, #18
 8015152:	4619      	mov	r1, r3
 8015154:	2002      	movs	r0, #2
 8015156:	f7f8 f9fe 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 801515a:	4603      	mov	r3, r0
 801515c:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8015162:	68bb      	ldr	r3, [r7, #8]
 8015164:	3314      	adds	r3, #20
 8015166:	4619      	mov	r1, r3
 8015168:	2002      	movs	r0, #2
 801516a:	f7f8 f9f4 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 801516e:	4603      	mov	r3, r0
 8015170:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8015176:	68bb      	ldr	r3, [r7, #8]
 8015178:	3316      	adds	r3, #22
 801517a:	4619      	mov	r1, r3
 801517c:	2002      	movs	r0, #2
 801517e:	f7f8 f9ea 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 8015182:	4603      	mov	r3, r0
 8015184:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 801518a:	68bb      	ldr	r3, [r7, #8]
 801518c:	3318      	adds	r3, #24
 801518e:	4619      	mov	r1, r3
 8015190:	2002      	movs	r0, #2
 8015192:	f7f8 f9e0 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 8015196:	4603      	mov	r3, r0
 8015198:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 801519e:	68bb      	ldr	r3, [r7, #8]
 80151a0:	331a      	adds	r3, #26
 80151a2:	4619      	mov	r1, r3
 80151a4:	2002      	movs	r0, #2
 80151a6:	f7f8 f9d6 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 80151aa:	4603      	mov	r3, r0
 80151ac:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 80151b2:	68bb      	ldr	r3, [r7, #8]
 80151b4:	331c      	adds	r3, #28
 80151b6:	4619      	mov	r1, r3
 80151b8:	2002      	movs	r0, #2
 80151ba:	f7f8 f9cc 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 80151be:	4603      	mov	r3, r0
 80151c0:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 80151c6:	68bb      	ldr	r3, [r7, #8]
 80151c8:	331e      	adds	r3, #30
 80151ca:	4619      	mov	r1, r3
 80151cc:	2002      	movs	r0, #2
 80151ce:	f7f8 f9c2 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 80151d2:	4603      	mov	r3, r0
 80151d4:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 80151da:	68bb      	ldr	r3, [r7, #8]
 80151dc:	3320      	adds	r3, #32
 80151de:	4619      	mov	r1, r3
 80151e0:	2002      	movs	r0, #2
 80151e2:	f7f8 f9b8 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 80151e6:	4603      	mov	r3, r0
 80151e8:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 80151ee:	68bb      	ldr	r3, [r7, #8]
 80151f0:	3322      	adds	r3, #34	; 0x22
 80151f2:	4619      	mov	r1, r3
 80151f4:	2002      	movs	r0, #2
 80151f6:	f7f8 f9ae 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 80151fa:	4603      	mov	r3, r0
 80151fc:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8015202:	68bb      	ldr	r3, [r7, #8]
 8015204:	3324      	adds	r3, #36	; 0x24
 8015206:	4619      	mov	r1, r3
 8015208:	2002      	movs	r0, #2
 801520a:	f7f8 f9a4 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 801520e:	4603      	mov	r3, r0
 8015210:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8015216:	68bb      	ldr	r3, [r7, #8]
 8015218:	3326      	adds	r3, #38	; 0x26
 801521a:	4619      	mov	r1, r3
 801521c:	2002      	movs	r0, #2
 801521e:	f7f8 f99a 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 8015222:	4603      	mov	r3, r0
 8015224:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 801522a:	68bb      	ldr	r3, [r7, #8]
 801522c:	3328      	adds	r3, #40	; 0x28
 801522e:	4619      	mov	r1, r3
 8015230:	2002      	movs	r0, #2
 8015232:	f7f8 f990 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 8015236:	4603      	mov	r3, r0
 8015238:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 801523e:	68bb      	ldr	r3, [r7, #8]
 8015240:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 801524a:	68bb      	ldr	r3, [r7, #8]
 801524c:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8015256:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801525a:	4618      	mov	r0, r3
 801525c:	3718      	adds	r7, #24
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}

08015262 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8015262:	b580      	push	{r7, lr}
 8015264:	b086      	sub	sp, #24
 8015266:	af00      	add	r7, sp, #0
 8015268:	4603      	mov	r3, r0
 801526a:	60b9      	str	r1, [r7, #8]
 801526c:	607a      	str	r2, [r7, #4]
 801526e:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015270:	2300      	movs	r3, #0
 8015272:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 8015274:	89fb      	ldrh	r3, [r7, #14]
 8015276:	2b20      	cmp	r3, #32
 8015278:	d802      	bhi.n	8015280 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801527a:	f06f 0309 	mvn.w	r3, #9
 801527e:	e04d      	b.n	801531c <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8015280:	68b9      	ldr	r1, [r7, #8]
 8015282:	2004      	movs	r0, #4
 8015284:	f7f8 fa06 	bl	800d694 <VL53L1_i2c_decode_uint32_t>
 8015288:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 801528e:	68bb      	ldr	r3, [r7, #8]
 8015290:	3304      	adds	r3, #4
 8015292:	4619      	mov	r1, r3
 8015294:	2004      	movs	r0, #4
 8015296:	f7f8 f9fd 	bl	800d694 <VL53L1_i2c_decode_uint32_t>
 801529a:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 80152a0:	68bb      	ldr	r3, [r7, #8]
 80152a2:	3308      	adds	r3, #8
 80152a4:	4619      	mov	r1, r3
 80152a6:	2004      	movs	r0, #4
 80152a8:	f7f8 fa11 	bl	800d6ce <VL53L1_i2c_decode_int32_t>
 80152ac:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 80152b2:	68bb      	ldr	r3, [r7, #8]
 80152b4:	330c      	adds	r3, #12
 80152b6:	4619      	mov	r1, r3
 80152b8:	2004      	movs	r0, #4
 80152ba:	f7f8 f9eb 	bl	800d694 <VL53L1_i2c_decode_uint32_t>
 80152be:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	3310      	adds	r3, #16
 80152c8:	4619      	mov	r1, r3
 80152ca:	2004      	movs	r0, #4
 80152cc:	f7f8 f9e2 	bl	800d694 <VL53L1_i2c_decode_uint32_t>
 80152d0:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 80152d6:	68bb      	ldr	r3, [r7, #8]
 80152d8:	3314      	adds	r3, #20
 80152da:	4619      	mov	r1, r3
 80152dc:	2004      	movs	r0, #4
 80152de:	f7f8 f9d9 	bl	800d694 <VL53L1_i2c_decode_uint32_t>
 80152e2:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 80152e8:	68bb      	ldr	r3, [r7, #8]
 80152ea:	3318      	adds	r3, #24
 80152ec:	4619      	mov	r1, r3
 80152ee:	2004      	movs	r0, #4
 80152f0:	f7f8 f9ed 	bl	800d6ce <VL53L1_i2c_decode_int32_t>
 80152f4:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 80152fa:	68bb      	ldr	r3, [r7, #8]
 80152fc:	331c      	adds	r3, #28
 80152fe:	4619      	mov	r1, r3
 8015300:	2004      	movs	r0, #4
 8015302:	f7f8 f9c7 	bl	800d694 <VL53L1_i2c_decode_uint32_t>
 8015306:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 801530c:	68bb      	ldr	r3, [r7, #8]
 801530e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8015318:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801531c:	4618      	mov	r0, r3
 801531e:	3718      	adds	r7, #24
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}

08015324 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b086      	sub	sp, #24
 8015328:	af00      	add	r7, sp, #0
 801532a:	4603      	mov	r3, r0
 801532c:	60b9      	str	r1, [r7, #8]
 801532e:	607a      	str	r2, [r7, #4]
 8015330:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015332:	2300      	movs	r3, #0
 8015334:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8015336:	89fb      	ldrh	r3, [r7, #14]
 8015338:	2b37      	cmp	r3, #55	; 0x37
 801533a:	d802      	bhi.n	8015342 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801533c:	f06f 0309 	mvn.w	r3, #9
 8015340:	e15e      	b.n	8015600 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8015342:	68b9      	ldr	r1, [r7, #8]
 8015344:	2002      	movs	r0, #2
 8015346:	f7f8 f906 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 801534a:	4603      	mov	r3, r0
 801534c:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8015352:	68bb      	ldr	r3, [r7, #8]
 8015354:	3302      	adds	r3, #2
 8015356:	781b      	ldrb	r3, [r3, #0]
 8015358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801535c:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8015362:	68bb      	ldr	r3, [r7, #8]
 8015364:	3303      	adds	r3, #3
 8015366:	781b      	ldrb	r3, [r3, #0]
 8015368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801536c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8015372:	68bb      	ldr	r3, [r7, #8]
 8015374:	3304      	adds	r3, #4
 8015376:	781b      	ldrb	r3, [r3, #0]
 8015378:	f003 0303 	and.w	r3, r3, #3
 801537c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8015382:	68bb      	ldr	r3, [r7, #8]
 8015384:	3305      	adds	r3, #5
 8015386:	781b      	ldrb	r3, [r3, #0]
 8015388:	f003 0301 	and.w	r3, r3, #1
 801538c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8015392:	68bb      	ldr	r3, [r7, #8]
 8015394:	3306      	adds	r3, #6
 8015396:	781b      	ldrb	r3, [r3, #0]
 8015398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801539c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 80153a2:	68bb      	ldr	r3, [r7, #8]
 80153a4:	3307      	adds	r3, #7
 80153a6:	781b      	ldrb	r3, [r3, #0]
 80153a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80153ac:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 80153b2:	68bb      	ldr	r3, [r7, #8]
 80153b4:	3308      	adds	r3, #8
 80153b6:	4619      	mov	r1, r3
 80153b8:	2002      	movs	r0, #2
 80153ba:	f7f8 f8cc 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 80153be:	4603      	mov	r3, r0
 80153c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80153c4:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 80153ca:	68bb      	ldr	r3, [r7, #8]
 80153cc:	330a      	adds	r3, #10
 80153ce:	781b      	ldrb	r3, [r3, #0]
 80153d0:	f003 0303 	and.w	r3, r3, #3
 80153d4:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 80153da:	68bb      	ldr	r3, [r7, #8]
 80153dc:	330b      	adds	r3, #11
 80153de:	781b      	ldrb	r3, [r3, #0]
 80153e0:	f003 0303 	and.w	r3, r3, #3
 80153e4:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	330c      	adds	r3, #12
 80153ee:	781b      	ldrb	r3, [r3, #0]
 80153f0:	f003 030f 	and.w	r3, r3, #15
 80153f4:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 80153fa:	68bb      	ldr	r3, [r7, #8]
 80153fc:	330d      	adds	r3, #13
 80153fe:	781b      	ldrb	r3, [r3, #0]
 8015400:	f003 0307 	and.w	r3, r3, #7
 8015404:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 801540a:	68bb      	ldr	r3, [r7, #8]
 801540c:	330e      	adds	r3, #14
 801540e:	781b      	ldrb	r3, [r3, #0]
 8015410:	f003 0301 	and.w	r3, r3, #1
 8015414:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 801541a:	68bb      	ldr	r3, [r7, #8]
 801541c:	330f      	adds	r3, #15
 801541e:	781b      	ldrb	r3, [r3, #0]
 8015420:	f003 0303 	and.w	r3, r3, #3
 8015424:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 801542a:	68bb      	ldr	r3, [r7, #8]
 801542c:	7c1a      	ldrb	r2, [r3, #16]
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8015432:	68bb      	ldr	r3, [r7, #8]
 8015434:	7c5a      	ldrb	r2, [r3, #17]
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 801543a:	68bb      	ldr	r3, [r7, #8]
 801543c:	3312      	adds	r3, #18
 801543e:	4619      	mov	r1, r3
 8015440:	2002      	movs	r0, #2
 8015442:	f7f8 f888 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 8015446:	4603      	mov	r3, r0
 8015448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801544c:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8015452:	68bb      	ldr	r3, [r7, #8]
 8015454:	3316      	adds	r3, #22
 8015456:	4619      	mov	r1, r3
 8015458:	2002      	movs	r0, #2
 801545a:	f7f8 f87c 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 801545e:	4603      	mov	r3, r0
 8015460:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8015466:	68bb      	ldr	r3, [r7, #8]
 8015468:	3318      	adds	r3, #24
 801546a:	4619      	mov	r1, r3
 801546c:	2002      	movs	r0, #2
 801546e:	f7f8 f872 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 8015472:	4603      	mov	r3, r0
 8015474:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 801547a:	68bb      	ldr	r3, [r7, #8]
 801547c:	331a      	adds	r3, #26
 801547e:	781b      	ldrb	r3, [r3, #0]
 8015480:	f003 0301 	and.w	r3, r3, #1
 8015484:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 801548a:	68bb      	ldr	r3, [r7, #8]
 801548c:	331b      	adds	r3, #27
 801548e:	781b      	ldrb	r3, [r3, #0]
 8015490:	f003 0307 	and.w	r3, r3, #7
 8015494:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 801549a:	68bb      	ldr	r3, [r7, #8]
 801549c:	7f1a      	ldrb	r2, [r3, #28]
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 80154a2:	68bb      	ldr	r3, [r7, #8]
 80154a4:	7f5a      	ldrb	r2, [r3, #29]
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 80154aa:	68bb      	ldr	r3, [r7, #8]
 80154ac:	331e      	adds	r3, #30
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80154b4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 80154ba:	68bb      	ldr	r3, [r7, #8]
 80154bc:	331f      	adds	r3, #31
 80154be:	781b      	ldrb	r3, [r3, #0]
 80154c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80154c4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 80154ca:	68bb      	ldr	r3, [r7, #8]
 80154cc:	3320      	adds	r3, #32
 80154ce:	781b      	ldrb	r3, [r3, #0]
 80154d0:	f003 0303 	and.w	r3, r3, #3
 80154d4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 80154da:	68bb      	ldr	r3, [r7, #8]
 80154dc:	3321      	adds	r3, #33	; 0x21
 80154de:	781b      	ldrb	r3, [r3, #0]
 80154e0:	f003 030f 	and.w	r3, r3, #15
 80154e4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80154ea:	68bb      	ldr	r3, [r7, #8]
 80154ec:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 80154f6:	68bb      	ldr	r3, [r7, #8]
 80154f8:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8015502:	68bb      	ldr	r3, [r7, #8]
 8015504:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 801550e:	68bb      	ldr	r3, [r7, #8]
 8015510:	3325      	adds	r3, #37	; 0x25
 8015512:	781b      	ldrb	r3, [r3, #0]
 8015514:	f003 0301 	and.w	r3, r3, #1
 8015518:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	3326      	adds	r3, #38	; 0x26
 8015524:	781b      	ldrb	r3, [r3, #0]
 8015526:	f003 0303 	and.w	r3, r3, #3
 801552a:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8015532:	68bb      	ldr	r3, [r7, #8]
 8015534:	3327      	adds	r3, #39	; 0x27
 8015536:	781b      	ldrb	r3, [r3, #0]
 8015538:	f003 031f 	and.w	r3, r3, #31
 801553c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	3328      	adds	r3, #40	; 0x28
 8015548:	781b      	ldrb	r3, [r3, #0]
 801554a:	f003 031f 	and.w	r3, r3, #31
 801554e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8015556:	68bb      	ldr	r3, [r7, #8]
 8015558:	3329      	adds	r3, #41	; 0x29
 801555a:	781b      	ldrb	r3, [r3, #0]
 801555c:	f003 031f 	and.w	r3, r3, #31
 8015560:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8015568:	68bb      	ldr	r3, [r7, #8]
 801556a:	332a      	adds	r3, #42	; 0x2a
 801556c:	781b      	ldrb	r3, [r3, #0]
 801556e:	f003 0301 	and.w	r3, r3, #1
 8015572:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 801557a:	68bb      	ldr	r3, [r7, #8]
 801557c:	332b      	adds	r3, #43	; 0x2b
 801557e:	781b      	ldrb	r3, [r3, #0]
 8015580:	f003 0301 	and.w	r3, r3, #1
 8015584:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 801558c:	68bb      	ldr	r3, [r7, #8]
 801558e:	332c      	adds	r3, #44	; 0x2c
 8015590:	781b      	ldrb	r3, [r3, #0]
 8015592:	f003 0303 	and.w	r3, r3, #3
 8015596:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 801559e:	68bb      	ldr	r3, [r7, #8]
 80155a0:	332d      	adds	r3, #45	; 0x2d
 80155a2:	781b      	ldrb	r3, [r3, #0]
 80155a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80155a8:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 80155b0:	68bb      	ldr	r3, [r7, #8]
 80155b2:	332e      	adds	r3, #46	; 0x2e
 80155b4:	4619      	mov	r1, r3
 80155b6:	2004      	movs	r0, #4
 80155b8:	f7f8 f86c 	bl	800d694 <VL53L1_i2c_decode_uint32_t>
 80155bc:	4603      	mov	r3, r0
 80155be:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 80155c6:	68bb      	ldr	r3, [r7, #8]
 80155c8:	3332      	adds	r3, #50	; 0x32
 80155ca:	4619      	mov	r1, r3
 80155cc:	2004      	movs	r0, #4
 80155ce:	f7f8 f861 	bl	800d694 <VL53L1_i2c_decode_uint32_t>
 80155d2:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	3336      	adds	r3, #54	; 0x36
 80155dc:	781b      	ldrb	r3, [r3, #0]
 80155de:	f003 0301 	and.w	r3, r3, #1
 80155e2:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 80155ea:	68bb      	ldr	r3, [r7, #8]
 80155ec:	3337      	adds	r3, #55	; 0x37
 80155ee:	781b      	ldrb	r3, [r3, #0]
 80155f0:	f003 0301 	and.w	r3, r3, #1
 80155f4:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 80155fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015600:	4618      	mov	r0, r3
 8015602:	3718      	adds	r7, #24
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}

08015608 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b086      	sub	sp, #24
 801560c:	af00      	add	r7, sp, #0
 801560e:	4603      	mov	r3, r0
 8015610:	60b9      	str	r1, [r7, #8]
 8015612:	607a      	str	r2, [r7, #4]
 8015614:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015616:	2300      	movs	r3, #0
 8015618:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 801561a:	89fb      	ldrh	r3, [r7, #14]
 801561c:	2b30      	cmp	r3, #48	; 0x30
 801561e:	d802      	bhi.n	8015626 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015620:	f06f 0309 	mvn.w	r3, #9
 8015624:	e112      	b.n	801584c <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 801562e:	68bb      	ldr	r3, [r7, #8]
 8015630:	785a      	ldrb	r2, [r3, #1]
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8015636:	68bb      	ldr	r3, [r7, #8]
 8015638:	789a      	ldrb	r2, [r3, #2]
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 801563e:	68bb      	ldr	r3, [r7, #8]
 8015640:	3303      	adds	r3, #3
 8015642:	4619      	mov	r1, r3
 8015644:	2002      	movs	r0, #2
 8015646:	f7f7 ff86 	bl	800d556 <VL53L1_i2c_decode_uint16_t>
 801564a:	4603      	mov	r3, r0
 801564c:	461a      	mov	r2, r3
	pdata->identification__module_id =
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8015652:	68bb      	ldr	r3, [r7, #8]
 8015654:	3305      	adds	r3, #5
 8015656:	781b      	ldrb	r3, [r3, #0]
 8015658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801565c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8015662:	68bb      	ldr	r3, [r7, #8]
 8015664:	3306      	adds	r3, #6
 8015666:	781b      	ldrb	r3, [r3, #0]
 8015668:	f003 0307 	and.w	r3, r3, #7
 801566c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8015672:	68bb      	ldr	r3, [r7, #8]
 8015674:	3307      	adds	r3, #7
 8015676:	781b      	ldrb	r3, [r3, #0]
 8015678:	f003 0307 	and.w	r3, r3, #7
 801567c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8015682:	68bb      	ldr	r3, [r7, #8]
 8015684:	3308      	adds	r3, #8
 8015686:	781b      	ldrb	r3, [r3, #0]
 8015688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801568c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8015692:	68bb      	ldr	r3, [r7, #8]
 8015694:	3309      	adds	r3, #9
 8015696:	781b      	ldrb	r3, [r3, #0]
 8015698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801569c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 80156a2:	68bb      	ldr	r3, [r7, #8]
 80156a4:	330a      	adds	r3, #10
 80156a6:	781b      	ldrb	r3, [r3, #0]
 80156a8:	f003 0301 	and.w	r3, r3, #1
 80156ac:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 80156b2:	68bb      	ldr	r3, [r7, #8]
 80156b4:	330b      	adds	r3, #11
 80156b6:	781b      	ldrb	r3, [r3, #0]
 80156b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80156bc:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 80156c2:	68bb      	ldr	r3, [r7, #8]
 80156c4:	330c      	adds	r3, #12
 80156c6:	781b      	ldrb	r3, [r3, #0]
 80156c8:	f003 0301 	and.w	r3, r3, #1
 80156cc:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 80156d2:	68bb      	ldr	r3, [r7, #8]
 80156d4:	330d      	adds	r3, #13
 80156d6:	781b      	ldrb	r3, [r3, #0]
 80156d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80156dc:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 80156e2:	68bb      	ldr	r3, [r7, #8]
 80156e4:	330e      	adds	r3, #14
 80156e6:	781b      	ldrb	r3, [r3, #0]
 80156e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80156ec:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 80156f2:	68bb      	ldr	r3, [r7, #8]
 80156f4:	7bda      	ldrb	r2, [r3, #15]
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80156fa:	68bb      	ldr	r3, [r7, #8]
 80156fc:	7c1a      	ldrb	r2, [r3, #16]
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8015702:	68bb      	ldr	r3, [r7, #8]
 8015704:	7c5a      	ldrb	r2, [r3, #17]
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 801570a:	68bb      	ldr	r3, [r7, #8]
 801570c:	7c9a      	ldrb	r2, [r3, #18]
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8015712:	68bb      	ldr	r3, [r7, #8]
 8015714:	7cda      	ldrb	r2, [r3, #19]
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 801571a:	68bb      	ldr	r3, [r7, #8]
 801571c:	7d1a      	ldrb	r2, [r3, #20]
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8015722:	68bb      	ldr	r3, [r7, #8]
 8015724:	7d5a      	ldrb	r2, [r3, #21]
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 801572a:	68bb      	ldr	r3, [r7, #8]
 801572c:	7d9a      	ldrb	r2, [r3, #22]
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8015732:	68bb      	ldr	r3, [r7, #8]
 8015734:	7dda      	ldrb	r2, [r3, #23]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 801573a:	68bb      	ldr	r3, [r7, #8]
 801573c:	7e1a      	ldrb	r2, [r3, #24]
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8015742:	68bb      	ldr	r3, [r7, #8]
 8015744:	7e5a      	ldrb	r2, [r3, #25]
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 801574a:	68bb      	ldr	r3, [r7, #8]
 801574c:	7e9a      	ldrb	r2, [r3, #26]
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8015752:	68bb      	ldr	r3, [r7, #8]
 8015754:	7eda      	ldrb	r2, [r3, #27]
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 801575a:	68bb      	ldr	r3, [r7, #8]
 801575c:	7f1a      	ldrb	r2, [r3, #28]
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8015762:	68bb      	ldr	r3, [r7, #8]
 8015764:	7f5a      	ldrb	r2, [r3, #29]
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 801576a:	68bb      	ldr	r3, [r7, #8]
 801576c:	7f9a      	ldrb	r2, [r3, #30]
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8015772:	68bb      	ldr	r3, [r7, #8]
 8015774:	7fda      	ldrb	r2, [r3, #31]
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 801577c:	68bb      	ldr	r3, [r7, #8]
 801577e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8015788:	68bb      	ldr	r3, [r7, #8]
 801578a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8015794:	68bb      	ldr	r3, [r7, #8]
 8015796:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 80157a0:	68bb      	ldr	r3, [r7, #8]
 80157a2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 80157ac:	68bb      	ldr	r3, [r7, #8]
 80157ae:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 80157b8:	68bb      	ldr	r3, [r7, #8]
 80157ba:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 80157c4:	68bb      	ldr	r3, [r7, #8]
 80157c6:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 80157d0:	68bb      	ldr	r3, [r7, #8]
 80157d2:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 80157dc:	68bb      	ldr	r3, [r7, #8]
 80157de:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 80157e8:	68bb      	ldr	r3, [r7, #8]
 80157ea:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 801580c:	68bb      	ldr	r3, [r7, #8]
 801580e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8015824:	68bb      	ldr	r3, [r7, #8]
 8015826:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8015830:	68bb      	ldr	r3, [r7, #8]
 8015832:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 801583c:	68bb      	ldr	r3, [r7, #8]
 801583e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8015848:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801584c:	4618      	mov	r0, r3
 801584e:	3718      	adds	r7, #24
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}

08015854 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b090      	sub	sp, #64	; 0x40
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
 801585c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801585e:	2300      	movs	r3, #0
 8015860:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8015864:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8015868:	2b00      	cmp	r3, #0
 801586a:	d10a      	bne.n	8015882 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 801586c:	f107 020c 	add.w	r2, r7, #12
 8015870:	2331      	movs	r3, #49	; 0x31
 8015872:	f240 110f 	movw	r1, #271	; 0x10f
 8015876:	6878      	ldr	r0, [r7, #4]
 8015878:	f001 f8f8 	bl	8016a6c <VL53L1_ReadMulti>
 801587c:	4603      	mov	r3, r0
 801587e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8015882:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8015886:	2b00      	cmp	r3, #0
 8015888:	d109      	bne.n	801589e <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 801588a:	f107 030c 	add.w	r3, r7, #12
 801588e:	683a      	ldr	r2, [r7, #0]
 8015890:	4619      	mov	r1, r3
 8015892:	2031      	movs	r0, #49	; 0x31
 8015894:	f7ff feb8 	bl	8015608 <VL53L1_i2c_decode_nvm_copy_data>
 8015898:	4603      	mov	r3, r0
 801589a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801589e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80158a2:	4618      	mov	r0, r3
 80158a4:	3740      	adds	r7, #64	; 0x40
 80158a6:	46bd      	mov	sp, r7
 80158a8:	bd80      	pop	{r7, pc}

080158aa <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 80158aa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80158ae:	b0d6      	sub	sp, #344	; 0x158
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 80158b6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80158ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80158be:	4603      	mov	r3, r0
 80158c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80158c4:	23f1      	movs	r3, #241	; 0xf1
 80158c6:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53L1_D_002;
 80158ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80158ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 80158d2:	2300      	movs	r3, #0
 80158d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 80158d8:	f04f 0200 	mov.w	r2, #0
 80158dc:	f04f 0300 	mov.w	r3, #0
 80158e0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 80158e4:	f04f 0200 	mov.w	r2, #0
 80158e8:	f04f 0300 	mov.w	r3, #0
 80158ec:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 80158f0:	f04f 0200 	mov.w	r2, #0
 80158f4:	f04f 0300 	mov.w	r3, #0
 80158f8:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53L1_p_041   = 0;
 80158fc:	f04f 0200 	mov.w	r2, #0
 8015900:	f04f 0300 	mov.w	r3, #0
 8015904:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53L1_D_002;
 8015908:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 801590c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015910:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8015912:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8015916:	2b00      	cmp	r3, #0
 8015918:	f000 8322 	beq.w	8015f60 <VL53L1_f_014+0x6b6>



		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 801591c:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8015920:	4618      	mov	r0, r3
 8015922:	f7fb fa23 	bl	8010d6c <VL53L1_calc_pll_period_mm>
 8015926:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53L1_p_004 > VL53L1_p_018)
 801592a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801592e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015932:	429a      	cmp	r2, r3
 8015934:	d91a      	bls.n	801596c <VL53L1_f_014+0xc2>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 8015936:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801593a:	2200      	movs	r2, #0
 801593c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8015940:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53L1_p_018;
 8015944:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015948:	2200      	movs	r2, #0
 801594a:	4698      	mov	r8, r3
 801594c:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 801594e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8015952:	460b      	mov	r3, r1
 8015954:	ebb3 0308 	subs.w	r3, r3, r8
 8015958:	63bb      	str	r3, [r7, #56]	; 0x38
 801595a:	4613      	mov	r3, r2
 801595c:	eb63 0309 	sbc.w	r3, r3, r9
 8015960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015962:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8015966:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 801596a:	e013      	b.n	8015994 <VL53L1_f_014+0xea>
		else
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 801596c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015970:	2200      	movs	r2, #0
 8015972:	469a      	mov	sl, r3
 8015974:	4693      	mov	fp, r2
			(uint64_t)VL53L1_p_004;
 8015976:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801597a:	2200      	movs	r2, #0
 801597c:	461c      	mov	r4, r3
 801597e:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 8015980:	ebba 0304 	subs.w	r3, sl, r4
 8015984:	633b      	str	r3, [r7, #48]	; 0x30
 8015986:	eb6b 0305 	sbc.w	r3, fp, r5
 801598a:	637b      	str	r3, [r7, #52]	; 0x34
 801598c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8015990:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53L1_p_003 > VL53L1_p_001)
 8015994:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8015998:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801599c:	429a      	cmp	r2, r3
 801599e:	d91f      	bls.n	80159e0 <VL53L1_f_014+0x136>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 80159a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80159a4:	2200      	movs	r2, #0
 80159a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80159aa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53L1_p_001;
 80159ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80159b2:	2200      	movs	r2, #0
 80159b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80159b8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 80159bc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80159c0:	4623      	mov	r3, r4
 80159c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80159c6:	4602      	mov	r2, r0
 80159c8:	1a9b      	subs	r3, r3, r2
 80159ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80159cc:	462b      	mov	r3, r5
 80159ce:	460a      	mov	r2, r1
 80159d0:	eb63 0302 	sbc.w	r3, r3, r2
 80159d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80159d6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80159da:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 80159de:	e01e      	b.n	8015a1e <VL53L1_f_014+0x174>
		else
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 80159e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80159e4:	2200      	movs	r2, #0
 80159e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80159ea:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53L1_p_003;
 80159ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80159f2:	2200      	movs	r2, #0
 80159f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80159f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 80159fc:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8015a00:	4623      	mov	r3, r4
 8015a02:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8015a06:	4602      	mov	r2, r0
 8015a08:	1a9b      	subs	r3, r3, r2
 8015a0a:	623b      	str	r3, [r7, #32]
 8015a0c:	462b      	mov	r3, r5
 8015a0e:	460a      	mov	r2, r1
 8015a10:	eb63 0302 	sbc.w	r3, r3, r2
 8015a14:	627b      	str	r3, [r7, #36]	; 0x24
 8015a16:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8015a1a:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 8015a1e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8015a22:	4313      	orrs	r3, r2
 8015a24:	f000 829c 	beq.w	8015f60 <VL53L1_f_014+0x6b6>




			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 8015a28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015a2c:	2200      	movs	r2, #0
 8015a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015a32:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8015a36:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8015a40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8015a44:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8015a48:	4623      	mov	r3, r4
 8015a4a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8015a4e:	4602      	mov	r2, r0
 8015a50:	189b      	adds	r3, r3, r2
 8015a52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8015a56:	460b      	mov	r3, r1
 8015a58:	462a      	mov	r2, r5
 8015a5a:	eb42 0303 	adc.w	r3, r2, r3
 8015a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53L1_p_004;
 8015a62:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8015a66:	2200      	movs	r2, #0
 8015a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015a6c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 8015a70:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8015a74:	4623      	mov	r3, r4
 8015a76:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8015a7a:	4602      	mov	r2, r0
 8015a7c:	189b      	adds	r3, r3, r2
 8015a7e:	61bb      	str	r3, [r7, #24]
 8015a80:	460b      	mov	r3, r1
 8015a82:	462a      	mov	r2, r5
 8015a84:	eb42 0303 	adc.w	r3, r2, r3
 8015a88:	61fb      	str	r3, [r7, #28]
 8015a8a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8015a8e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53L1_D_003)
 8015a92:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8015a96:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8015a9a:	f173 0300 	sbcs.w	r3, r3, #0
 8015a9e:	d305      	bcc.n	8015aac <VL53L1_f_014+0x202>
				tmp0 = VL53L1_D_003;
 8015aa0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8015aa4:	f04f 0300 	mov.w	r3, #0
 8015aa8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 8015aac:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8015ab0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015ab4:	fb03 f102 	mul.w	r1, r3, r2
 8015ab8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8015abc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015ac0:	fb02 f303 	mul.w	r3, r2, r3
 8015ac4:	18ca      	adds	r2, r1, r3
 8015ac6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015aca:	fba3 1303 	umull	r1, r3, r3, r3
 8015ace:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8015ad2:	460b      	mov	r3, r1
 8015ad4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8015ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015adc:	18d3      	adds	r3, r2, r3
 8015ade:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8015ae2:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8015ae6:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8015aea:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 8015aee:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8015af2:	f04f 0000 	mov.w	r0, #0
 8015af6:	f04f 0100 	mov.w	r1, #0
 8015afa:	0219      	lsls	r1, r3, #8
 8015afc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8015b00:	0210      	lsls	r0, r2, #8
 8015b02:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53L1_D_004)
 8015b06:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8015b0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015b0e:	d305      	bcc.n	8015b1c <VL53L1_f_014+0x272>
				tmp1 = VL53L1_D_004;
 8015b10:	f04f 32ff 	mov.w	r2, #4294967295
 8015b14:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8015b18:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8015b1c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8015b20:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8015b24:	f7ea fe56 	bl	80007d4 <__aeabi_uldivmod>
 8015b28:	4602      	mov	r2, r0
 8015b2a:	460b      	mov	r3, r1
 8015b2c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8015b30:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8015b34:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8015b38:	f7ea fe4c 	bl	80007d4 <__aeabi_uldivmod>
 8015b3c:	4602      	mov	r2, r0
 8015b3e:	460b      	mov	r3, r1
 8015b40:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_005)
 8015b44:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8015b48:	2b80      	cmp	r3, #128	; 0x80
 8015b4a:	d305      	bcc.n	8015b58 <VL53L1_f_014+0x2ae>
				tmp1 = (uint64_t)VL53L1_D_005;
 8015b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8015b50:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8015b54:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 8015b58:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8015b5c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8015b60:	fb03 f102 	mul.w	r1, r3, r2
 8015b64:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8015b68:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015b6c:	fb02 f303 	mul.w	r3, r2, r3
 8015b70:	4419      	add	r1, r3
 8015b72:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015b76:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8015b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8015b7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8015b82:	4613      	mov	r3, r2
 8015b84:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8015b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015b8c:	18cb      	adds	r3, r1, r3
 8015b8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8015b92:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8015b96:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8015b9a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8015b9e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015ba8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8015bac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015bb6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015bba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8015bbe:	4623      	mov	r3, r4
 8015bc0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8015bc4:	4602      	mov	r2, r0
 8015bc6:	189b      	adds	r3, r3, r2
 8015bc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015bcc:	460b      	mov	r3, r1
 8015bce:	462a      	mov	r2, r5
 8015bd0:	eb42 0303 	adc.w	r3, r2, r3
 8015bd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8015bd8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8015bdc:	2200      	movs	r2, #0
 8015bde:	67bb      	str	r3, [r7, #120]	; 0x78
 8015be0:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8015be2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8015be6:	4623      	mov	r3, r4
 8015be8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8015bec:	4602      	mov	r2, r0
 8015bee:	189b      	adds	r3, r3, r2
 8015bf0:	673b      	str	r3, [r7, #112]	; 0x70
 8015bf2:	460b      	mov	r3, r1
 8015bf4:	462a      	mov	r2, r5
 8015bf6:	eb42 0303 	adc.w	r3, r2, r3
 8015bfa:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8015bfc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8015c00:	2200      	movs	r2, #0
 8015c02:	66bb      	str	r3, [r7, #104]	; 0x68
 8015c04:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8015c06:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8015c0a:	4623      	mov	r3, r4
 8015c0c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8015c10:	4602      	mov	r2, r0
 8015c12:	189b      	adds	r3, r3, r2
 8015c14:	613b      	str	r3, [r7, #16]
 8015c16:	460b      	mov	r3, r1
 8015c18:	462a      	mov	r2, r5
 8015c1a:	eb42 0303 	adc.w	r3, r2, r3
 8015c1e:	617b      	str	r3, [r7, #20]
 8015c20:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8015c24:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_003)
 8015c28:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8015c2c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8015c30:	f173 0300 	sbcs.w	r3, r3, #0
 8015c34:	d305      	bcc.n	8015c42 <VL53L1_f_014+0x398>
				tmp1 = (uint64_t)VL53L1_D_003;
 8015c36:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8015c3a:	f04f 0300 	mov.w	r3, #0
 8015c3e:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 8015c42:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8015c46:	f04f 0000 	mov.w	r0, #0
 8015c4a:	f04f 0100 	mov.w	r1, #0
 8015c4e:	0219      	lsls	r1, r3, #8
 8015c50:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8015c54:	0210      	lsls	r0, r2, #8
 8015c56:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 8015c5a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8015c5e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8015c62:	1884      	adds	r4, r0, r2
 8015c64:	60bc      	str	r4, [r7, #8]
 8015c66:	eb41 0303 	adc.w	r3, r1, r3
 8015c6a:	60fb      	str	r3, [r7, #12]
 8015c6c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8015c70:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53L1_D_006)
 8015c74:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	da05      	bge.n	8015c88 <VL53L1_f_014+0x3de>
				tmp0 = (uint64_t)VL53L1_D_006;
 8015c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8015c80:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015c84:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8015c88:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8015c8c:	2b01      	cmp	r3, #1
 8015c8e:	d331      	bcc.n	8015cf4 <VL53L1_f_014+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8015c90:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8015c94:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8015c98:	f7ea fd9c 	bl	80007d4 <__aeabi_uldivmod>
 8015c9c:	4602      	mov	r2, r0
 8015c9e:	460b      	mov	r3, r1
 8015ca0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8015ca4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015ca8:	2200      	movs	r2, #0
 8015caa:	663b      	str	r3, [r7, #96]	; 0x60
 8015cac:	667a      	str	r2, [r7, #100]	; 0x64
 8015cae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015cb2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8015cb6:	4622      	mov	r2, r4
 8015cb8:	fb02 f203 	mul.w	r2, r2, r3
 8015cbc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015cc0:	4629      	mov	r1, r5
 8015cc2:	fb01 f303 	mul.w	r3, r1, r3
 8015cc6:	441a      	add	r2, r3
 8015cc8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015ccc:	4621      	mov	r1, r4
 8015cce:	fba3 1301 	umull	r1, r3, r3, r1
 8015cd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8015cd6:	460b      	mov	r3, r1
 8015cd8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8015cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015ce0:	18d3      	adds	r3, r2, r3
 8015ce2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8015ce6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8015cea:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8015cee:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8015cf2:	e030      	b.n	8015d56 <VL53L1_f_014+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8015cf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8015cfc:	65fa      	str	r2, [r7, #92]	; 0x5c
 8015cfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015d02:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8015d06:	4622      	mov	r2, r4
 8015d08:	fb02 f203 	mul.w	r2, r2, r3
 8015d0c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015d10:	4629      	mov	r1, r5
 8015d12:	fb01 f303 	mul.w	r3, r1, r3
 8015d16:	441a      	add	r2, r3
 8015d18:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015d1c:	4621      	mov	r1, r4
 8015d1e:	fba3 1301 	umull	r1, r3, r3, r1
 8015d22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8015d26:	460b      	mov	r3, r1
 8015d28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8015d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015d30:	18d3      	adds	r3, r2, r3
 8015d32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8015d36:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8015d3a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8015d3e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8015d42:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8015d46:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8015d4a:	f7ea fd43 	bl	80007d4 <__aeabi_uldivmod>
 8015d4e:	4602      	mov	r2, r0
 8015d50:	460b      	mov	r3, r1
 8015d52:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8015d56:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	da05      	bge.n	8015d6a <VL53L1_f_014+0x4c0>
				tmp0 = (uint64_t)VL53L1_D_006;
 8015d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8015d62:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015d66:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8015d6a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8015d6e:	2b01      	cmp	r3, #1
 8015d70:	d33d      	bcc.n	8015dee <VL53L1_f_014+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8015d72:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8015d76:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8015d7a:	f7ea fd2b 	bl	80007d4 <__aeabi_uldivmod>
 8015d7e:	4602      	mov	r2, r0
 8015d80:	460b      	mov	r3, r1
 8015d82:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8015d86:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8015d8a:	f04f 0200 	mov.w	r2, #0
 8015d8e:	f04f 0300 	mov.w	r3, #0
 8015d92:	0882      	lsrs	r2, r0, #2
 8015d94:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8015d98:	088b      	lsrs	r3, r1, #2
 8015d9a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8015d9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015da2:	2200      	movs	r2, #0
 8015da4:	653b      	str	r3, [r7, #80]	; 0x50
 8015da6:	657a      	str	r2, [r7, #84]	; 0x54
 8015da8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015dac:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8015db0:	4622      	mov	r2, r4
 8015db2:	fb02 f203 	mul.w	r2, r2, r3
 8015db6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015dba:	4629      	mov	r1, r5
 8015dbc:	fb01 f303 	mul.w	r3, r1, r3
 8015dc0:	4413      	add	r3, r2
 8015dc2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015dc6:	4621      	mov	r1, r4
 8015dc8:	fba2 1201 	umull	r1, r2, r2, r1
 8015dcc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8015dd0:	460a      	mov	r2, r1
 8015dd2:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8015dd6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8015dda:	4413      	add	r3, r2
 8015ddc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8015de0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8015de4:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8015de8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8015dec:	e03c      	b.n	8015e68 <VL53L1_f_014+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8015dee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015df2:	2200      	movs	r2, #0
 8015df4:	64bb      	str	r3, [r7, #72]	; 0x48
 8015df6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8015df8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015dfc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8015e00:	4622      	mov	r2, r4
 8015e02:	fb02 f203 	mul.w	r2, r2, r3
 8015e06:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015e0a:	4629      	mov	r1, r5
 8015e0c:	fb01 f303 	mul.w	r3, r1, r3
 8015e10:	4413      	add	r3, r2
 8015e12:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015e16:	4621      	mov	r1, r4
 8015e18:	fba2 1201 	umull	r1, r2, r2, r1
 8015e1c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8015e20:	460a      	mov	r2, r1
 8015e22:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8015e26:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015e2a:	4413      	add	r3, r2
 8015e2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8015e30:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8015e34:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8015e38:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8015e3c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8015e40:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8015e44:	f7ea fcc6 	bl	80007d4 <__aeabi_uldivmod>
 8015e48:	4602      	mov	r2, r0
 8015e4a:	460b      	mov	r3, r1
 8015e4c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8015e50:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8015e54:	f04f 0200 	mov.w	r2, #0
 8015e58:	f04f 0300 	mov.w	r3, #0
 8015e5c:	0882      	lsrs	r2, r0, #2
 8015e5e:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8015e62:	088b      	lsrs	r3, r1, #2
 8015e64:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8015e68:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	da05      	bge.n	8015e7c <VL53L1_f_014+0x5d2>
				tmp0 = (uint64_t)VL53L1_D_006;
 8015e70:	f04f 32ff 	mov.w	r2, #4294967295
 8015e74:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015e78:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 8015e7c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8015e80:	f04f 0200 	mov.w	r2, #0
 8015e84:	f04f 0300 	mov.w	r3, #0
 8015e88:	0882      	lsrs	r2, r0, #2
 8015e8a:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8015e8e:	088b      	lsrs	r3, r1, #2
 8015e90:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8015e94:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8015e98:	2b01      	cmp	r3, #1
 8015e9a:	d305      	bcc.n	8015ea8 <VL53L1_f_014+0x5fe>
				tmp0 = (uint64_t)VL53L1_D_007;
 8015e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8015ea0:	f04f 0300 	mov.w	r3, #0
 8015ea4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8015ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015eac:	2200      	movs	r2, #0
 8015eae:	643b      	str	r3, [r7, #64]	; 0x40
 8015eb0:	647a      	str	r2, [r7, #68]	; 0x44
 8015eb2:	f04f 0200 	mov.w	r2, #0
 8015eb6:	f04f 0300 	mov.w	r3, #0
 8015eba:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8015ebe:	4629      	mov	r1, r5
 8015ec0:	01cb      	lsls	r3, r1, #7
 8015ec2:	4621      	mov	r1, r4
 8015ec4:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8015ec8:	4621      	mov	r1, r4
 8015eca:	01ca      	lsls	r2, r1, #7
 8015ecc:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 8015ed0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8015ed4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8015ed8:	fb03 f202 	mul.w	r2, r3, r2
 8015edc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8015ee0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8015ee4:	fb01 f303 	mul.w	r3, r1, r3
 8015ee8:	441a      	add	r2, r3
 8015eea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8015eee:	fba3 1303 	umull	r1, r3, r3, r3
 8015ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8015ef6:	460b      	mov	r3, r1
 8015ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8015efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015f00:	18d3      	adds	r3, r2, r3
 8015f02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8015f06:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8015f0a:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8015f0e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 8015f12:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8015f16:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8015f1a:	1884      	adds	r4, r0, r2
 8015f1c:	603c      	str	r4, [r7, #0]
 8015f1e:	eb41 0303 	adc.w	r3, r1, r3
 8015f22:	607b      	str	r3, [r7, #4]
 8015f24:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015f28:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8015f2c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8015f30:	2b01      	cmp	r3, #1
 8015f32:	d305      	bcc.n	8015f40 <VL53L1_f_014+0x696>
				tmp0 = (uint64_t)VL53L1_D_007;
 8015f34:	f04f 32ff 	mov.w	r2, #4294967295
 8015f38:	f04f 0300 	mov.w	r3, #0
 8015f3c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 8015f40:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015f44:	4618      	mov	r0, r3
 8015f46:	f7fa fdaa 	bl	8010a9e <VL53L1_isqrt>
 8015f4a:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8015f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015f52:	b29a      	uxth	r2, r3
 8015f54:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8015f58:	801a      	strh	r2, [r3, #0]

			status = VL53L1_ERROR_NONE;
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 8015f60:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8015f64:	4618      	mov	r0, r3
 8015f66:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08015f70 <VL53L1_wait_for_test_completion>:
}


VL53L1_Error VL53L1_wait_for_test_completion(
	VL53L1_DEV     Dev)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b086      	sub	sp, #24
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015f78:	2300      	movs	r3, #0
 8015f7a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	3318      	adds	r3, #24
 8015f80:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8015f82:	2300      	movs	r3, #0
 8015f84:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 8015f86:	693b      	ldr	r3, [r7, #16]
 8015f88:	781b      	ldrb	r3, [r3, #0]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d107      	bne.n	8015f9e <VL53L1_wait_for_test_completion+0x2e>



		status =
			VL53L1_poll_for_range_completion(
 8015f8e:	f64e 2160 	movw	r1, #60000	; 0xea60
 8015f92:	6878      	ldr	r0, [r7, #4]
 8015f94:	f000 f88b 	bl	80160ae <VL53L1_poll_for_range_completion>
 8015f98:	4603      	mov	r3, r0
 8015f9a:	75fb      	strb	r3, [r7, #23]
 8015f9c:	e01b      	b.n	8015fd6 <VL53L1_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8015fa2:	e011      	b.n	8015fc8 <VL53L1_wait_for_test_completion+0x58>
			status = VL53L1_is_new_data_ready(
 8015fa4:	f107 030f 	add.w	r3, r7, #15
 8015fa8:	4619      	mov	r1, r3
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f000 f819 	bl	8015fe2 <VL53L1_is_new_data_ready>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53L1_ERROR_NONE) {
 8015fb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d105      	bne.n	8015fc8 <VL53L1_wait_for_test_completion+0x58>
				status = VL53L1_WaitMs(
 8015fbc:	2101      	movs	r1, #1
 8015fbe:	6878      	ldr	r0, [r7, #4]
 8015fc0:	f000 fe6e 	bl	8016ca0 <VL53L1_WaitMs>
 8015fc4:	4603      	mov	r3, r0
 8015fc6:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8015fc8:	7bfb      	ldrb	r3, [r7, #15]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d103      	bne.n	8015fd6 <VL53L1_wait_for_test_completion+0x66>
 8015fce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d0e6      	beq.n	8015fa4 <VL53L1_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8015fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015fda:	4618      	mov	r0, r3
 8015fdc:	3718      	adds	r7, #24
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	bd80      	pop	{r7, pc}

08015fe2 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8015fe2:	b580      	push	{r7, lr}
 8015fe4:	b086      	sub	sp, #24
 8015fe6:	af00      	add	r7, sp, #0
 8015fe8:	6078      	str	r0, [r7, #4]
 8015fea:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015fec:	2300      	movs	r3, #0
 8015fee:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	3318      	adds	r3, #24
 8015ff4:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8015ffe:	2300      	movs	r3, #0
 8016000:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8016002:	693b      	ldr	r3, [r7, #16]
 8016004:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8016008:	f003 0310 	and.w	r3, r3, #16
 801600c:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 801600e:	7bfb      	ldrb	r3, [r7, #15]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d102      	bne.n	801601a <VL53L1_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8016014:	2301      	movs	r3, #1
 8016016:	75fb      	strb	r3, [r7, #23]
 8016018:	e001      	b.n	801601e <VL53L1_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 801601a:	2300      	movs	r3, #0
 801601c:	75fb      	strb	r3, [r7, #23]



	status = VL53L1_RdByte(
 801601e:	f107 030e 	add.w	r3, r7, #14
 8016022:	461a      	mov	r2, r3
 8016024:	2131      	movs	r1, #49	; 0x31
 8016026:	6878      	ldr	r0, [r7, #4]
 8016028:	f000 fdb2 	bl	8016b90 <VL53L1_RdByte>
 801602c:	4603      	mov	r3, r0
 801602e:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8016030:	7bbb      	ldrb	r3, [r7, #14]
 8016032:	f003 0201 	and.w	r2, r3, #1
 8016036:	7dfb      	ldrb	r3, [r7, #23]
 8016038:	429a      	cmp	r2, r3
 801603a:	d103      	bne.n	8016044 <VL53L1_is_new_data_ready+0x62>
		*pready = 0x01;
 801603c:	683b      	ldr	r3, [r7, #0]
 801603e:	2201      	movs	r2, #1
 8016040:	701a      	strb	r2, [r3, #0]
 8016042:	e002      	b.n	801604a <VL53L1_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8016044:	683b      	ldr	r3, [r7, #0]
 8016046:	2200      	movs	r2, #0
 8016048:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 801604a:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 801604e:	4618      	mov	r0, r3
 8016050:	3718      	adds	r7, #24
 8016052:	46bd      	mov	sp, r7
 8016054:	bd80      	pop	{r7, pc}

08016056 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8016056:	b580      	push	{r7, lr}
 8016058:	b086      	sub	sp, #24
 801605a:	af02      	add	r7, sp, #8
 801605c:	6078      	str	r0, [r7, #4]
 801605e:	6039      	str	r1, [r7, #0]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8016060:	2300      	movs	r3, #0
 8016062:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 8016064:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8016068:	6878      	ldr	r0, [r7, #4]
 801606a:	f000 fe29 	bl	8016cc0 <VL53L1_WaitUs>
 801606e:	4603      	mov	r3, r0
 8016070:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8016072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d10b      	bne.n	8016092 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 801607a:	2301      	movs	r3, #1
 801607c:	9301      	str	r3, [sp, #4]
 801607e:	2301      	movs	r3, #1
 8016080:	9300      	str	r3, [sp, #0]
 8016082:	2301      	movs	r3, #1
 8016084:	22e5      	movs	r2, #229	; 0xe5
 8016086:	6839      	ldr	r1, [r7, #0]
 8016088:	6878      	ldr	r0, [r7, #4]
 801608a:	f000 fe31 	bl	8016cf0 <VL53L1_WaitValueMaskEx>
 801608e:	4603      	mov	r3, r0
 8016090:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8016092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d103      	bne.n	80160a2 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 801609a:	2103      	movs	r1, #3
 801609c:	6878      	ldr	r0, [r7, #4]
 801609e:	f7f6 fc38 	bl	800c912 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 80160a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80160a6:	4618      	mov	r0, r3
 80160a8:	3710      	adds	r7, #16
 80160aa:	46bd      	mov	sp, r7
 80160ac:	bd80      	pop	{r7, pc}

080160ae <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 80160ae:	b580      	push	{r7, lr}
 80160b0:	b088      	sub	sp, #32
 80160b2:	af02      	add	r7, sp, #8
 80160b4:	6078      	str	r0, [r7, #4]
 80160b6:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80160b8:	2300      	movs	r3, #0
 80160ba:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	3318      	adds	r3, #24
 80160c0:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 80160c2:	2300      	movs	r3, #0
 80160c4:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 80160c6:	2300      	movs	r3, #0
 80160c8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 80160ca:	693b      	ldr	r3, [r7, #16]
 80160cc:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 80160d0:	f003 0310 	and.w	r3, r3, #16
 80160d4:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 80160d6:	7bfb      	ldrb	r3, [r7, #15]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d102      	bne.n	80160e2 <VL53L1_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 80160dc:	2301      	movs	r3, #1
 80160de:	75fb      	strb	r3, [r7, #23]
 80160e0:	e001      	b.n	80160e6 <VL53L1_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 80160e2:	2300      	movs	r3, #0
 80160e4:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 80160e6:	7dfb      	ldrb	r3, [r7, #23]
 80160e8:	2201      	movs	r2, #1
 80160ea:	9201      	str	r2, [sp, #4]
 80160ec:	2201      	movs	r2, #1
 80160ee:	9200      	str	r2, [sp, #0]
 80160f0:	2231      	movs	r2, #49	; 0x31
 80160f2:	6839      	ldr	r1, [r7, #0]
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f000 fdfb 	bl	8016cf0 <VL53L1_WaitValueMaskEx>
 80160fa:	4603      	mov	r3, r0
 80160fc:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 80160fe:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8016102:	4618      	mov	r0, r3
 8016104:	3718      	adds	r7, #24
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}

0801610a <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 801610a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801610e:	b0c0      	sub	sp, #256	; 0x100
 8016110:	af00      	add	r7, sp, #0
 8016112:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 8016116:	4618      	mov	r0, r3
 8016118:	460b      	mov	r3, r1
 801611a:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 801611e:	4613      	mov	r3, r2
 8016120:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8016124:	4603      	mov	r3, r0
 8016126:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53L1_Error status = VL53L1_ERROR_NONE;
 801612a:	2300      	movs	r3, #0
 801612c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 8016130:	2300      	movs	r3, #0
 8016132:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 8016136:	2300      	movs	r3, #0
 8016138:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 801613c:	2300      	movs	r3, #0
 801613e:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 8016142:	2300      	movs	r3, #0
 8016144:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 8016148:	2300      	movs	r3, #0
 801614a:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 801614e:	2300      	movs	r3, #0
 8016150:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 8016154:	f04f 0200 	mov.w	r2, #0
 8016158:	f04f 0300 	mov.w	r3, #0
 801615c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 8016160:	f04f 0200 	mov.w	r2, #0
 8016164:	f04f 0300 	mov.w	r3, #0
 8016168:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 801616c:	f04f 0200 	mov.w	r2, #0
 8016170:	f04f 0300 	mov.w	r3, #0
 8016174:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53L1_ERROR_NONE) {
 8016178:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801617c:	2b00      	cmp	r3, #0
 801617e:	d108      	bne.n	8016192 <VL53L1_f_040+0x88>
		VL53L1_decode_row_col(
 8016180:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 8016184:	f107 01de 	add.w	r1, r7, #222	; 0xde
 8016188:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 801618c:	4618      	mov	r0, r3
 801618e:	f7fb f867 	bl	8011260 <VL53L1_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
 8016192:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8016196:	2b00      	cmp	r3, #0
 8016198:	d165      	bne.n	8016266 <VL53L1_f_040+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 801619a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801619e:	091b      	lsrs	r3, r3, #4
 80161a0:	b2db      	uxtb	r3, r3
 80161a2:	f003 0301 	and.w	r3, r3, #1
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d00e      	beq.n	80161c8 <VL53L1_f_040+0xbe>
			bound_l_x = (int16_t) col -
 80161aa:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80161ae:	b29a      	uxth	r2, r3
 80161b0:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80161b4:	095b      	lsrs	r3, r3, #5
 80161b6:	b2db      	uxtb	r3, r3
 80161b8:	b29b      	uxth	r3, r3
 80161ba:	1ad3      	subs	r3, r2, r3
 80161bc:	b29b      	uxth	r3, r3
 80161be:	3b01      	subs	r3, #1
 80161c0:	b29b      	uxth	r3, r3
 80161c2:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80161c6:	e00b      	b.n	80161e0 <VL53L1_f_040+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 80161c8:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80161cc:	b29a      	uxth	r2, r3
 80161ce:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80161d2:	095b      	lsrs	r3, r3, #5
 80161d4:	b2db      	uxtb	r3, r3
 80161d6:	b29b      	uxth	r3, r3
 80161d8:	1ad3      	subs	r3, r2, r3
 80161da:	b29b      	uxth	r3, r3
 80161dc:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 80161e0:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80161e4:	b29a      	uxth	r2, r3
 80161e6:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80161ea:	095b      	lsrs	r3, r3, #5
 80161ec:	b2db      	uxtb	r3, r3
 80161ee:	b29b      	uxth	r3, r3
 80161f0:	4413      	add	r3, r2
 80161f2:	b29b      	uxth	r3, r3
 80161f4:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 80161f8:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80161fc:	f003 0301 	and.w	r3, r3, #1
 8016200:	2b00      	cmp	r3, #0
 8016202:	d011      	beq.n	8016228 <VL53L1_f_040+0x11e>
			bound_d_y = (int16_t) row -
 8016204:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8016208:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 801620a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801620e:	f003 020f 	and.w	r2, r3, #15
 8016212:	0fd3      	lsrs	r3, r2, #31
 8016214:	4413      	add	r3, r2
 8016216:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8016218:	b29b      	uxth	r3, r3
 801621a:	1acb      	subs	r3, r1, r3
 801621c:	b29b      	uxth	r3, r3
 801621e:	3b01      	subs	r3, #1
 8016220:	b29b      	uxth	r3, r3
 8016222:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8016226:	e00f      	b.n	8016248 <VL53L1_f_040+0x13e>
		else
			bound_d_y = (int16_t) row -
 8016228:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 801622c:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 801622e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8016232:	f003 020f 	and.w	r2, r3, #15
 8016236:	0fd3      	lsrs	r3, r2, #31
 8016238:	4413      	add	r3, r2
 801623a:	105b      	asrs	r3, r3, #1
 801623c:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 801623e:	b29b      	uxth	r3, r3
 8016240:	440b      	add	r3, r1
 8016242:	b29b      	uxth	r3, r3
 8016244:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 8016248:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 801624c:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 801624e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8016252:	f003 020f 	and.w	r2, r3, #15
 8016256:	0fd3      	lsrs	r3, r2, #31
 8016258:	4413      	add	r3, r2
 801625a:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 801625c:	b29b      	uxth	r3, r3
 801625e:	440b      	add	r3, r1
 8016260:	b29b      	uxth	r3, r3
 8016262:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8016266:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801626a:	2b00      	cmp	r3, #0
 801626c:	d133      	bne.n	80162d6 <VL53L1_f_040+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 801626e:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8016272:	b29a      	uxth	r2, r3
 8016274:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8016278:	4413      	add	r3, r2
 801627a:	b29b      	uxth	r3, r3
 801627c:	005b      	lsls	r3, r3, #1
 801627e:	b29b      	uxth	r3, r3
 8016280:	3b0f      	subs	r3, #15
 8016282:	b29b      	uxth	r3, r3
 8016284:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8016288:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 801628c:	b29a      	uxth	r2, r3
 801628e:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8016292:	4413      	add	r3, r2
 8016294:	b29b      	uxth	r3, r3
 8016296:	005b      	lsls	r3, r3, #1
 8016298:	b29b      	uxth	r3, r3
 801629a:	3b0f      	subs	r3, #15
 801629c:	b29b      	uxth	r3, r3
 801629e:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 80162a2:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 80162a6:	b29a      	uxth	r2, r3
 80162a8:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 80162ac:	4413      	add	r3, r2
 80162ae:	b29b      	uxth	r3, r3
 80162b0:	005b      	lsls	r3, r3, #1
 80162b2:	b29b      	uxth	r3, r3
 80162b4:	3b0f      	subs	r3, #15
 80162b6:	b29b      	uxth	r3, r3
 80162b8:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 80162bc:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 80162c0:	b29a      	uxth	r2, r3
 80162c2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80162c6:	4413      	add	r3, r2
 80162c8:	b29b      	uxth	r3, r3
 80162ca:	005b      	lsls	r3, r3, #1
 80162cc:	b29b      	uxth	r3, r3
 80162ce:	3b0f      	subs	r3, #15
 80162d0:	b29b      	uxth	r3, r3
 80162d2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 80162d6:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80162da:	2b00      	cmp	r3, #0
 80162dc:	f040 8135 	bne.w	801654a <VL53L1_f_040+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80162e0:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 80162e4:	17da      	asrs	r2, r3, #31
 80162e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80162ea:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80162ee:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 80162f2:	17da      	asrs	r2, r3, #31
 80162f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80162f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80162fc:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8016300:	460b      	mov	r3, r1
 8016302:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016306:	fb02 f203 	mul.w	r2, r2, r3
 801630a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801630e:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8016312:	4601      	mov	r1, r0
 8016314:	fb01 f303 	mul.w	r3, r1, r3
 8016318:	4413      	add	r3, r2
 801631a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801631e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8016322:	fba2 4501 	umull	r4, r5, r2, r1
 8016326:	442b      	add	r3, r5
 8016328:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 801632a:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 801632e:	17da      	asrs	r2, r3, #31
 8016330:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016334:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 8016338:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 801633c:	17da      	asrs	r2, r3, #31
 801633e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8016342:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8016346:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801634a:	460b      	mov	r3, r1
 801634c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016350:	fb02 f203 	mul.w	r2, r2, r3
 8016354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016358:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 801635c:	4601      	mov	r1, r0
 801635e:	fb01 f303 	mul.w	r3, r1, r3
 8016362:	4413      	add	r3, r2
 8016364:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016368:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801636c:	fba2 8901 	umull	r8, r9, r2, r1
 8016370:	444b      	add	r3, r9
 8016372:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8016374:	eb14 0308 	adds.w	r3, r4, r8
 8016378:	64bb      	str	r3, [r7, #72]	; 0x48
 801637a:	eb45 0309 	adc.w	r3, r5, r9
 801637e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016380:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8016384:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8016388:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 801638c:	1c51      	adds	r1, r2, #1
 801638e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8016392:	f143 0300 	adc.w	r3, r3, #0
 8016396:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801639a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801639e:	460b      	mov	r3, r1
 80163a0:	0fdb      	lsrs	r3, r3, #31
 80163a2:	2200      	movs	r2, #0
 80163a4:	643b      	str	r3, [r7, #64]	; 0x40
 80163a6:	647a      	str	r2, [r7, #68]	; 0x44
 80163a8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80163ac:	4623      	mov	r3, r4
 80163ae:	4602      	mov	r2, r0
 80163b0:	189b      	adds	r3, r3, r2
 80163b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80163b4:	460b      	mov	r3, r1
 80163b6:	462a      	mov	r2, r5
 80163b8:	eb42 0303 	adc.w	r3, r2, r3
 80163bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80163be:	f04f 0200 	mov.w	r2, #0
 80163c2:	f04f 0300 	mov.w	r3, #0
 80163c6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80163ca:	4621      	mov	r1, r4
 80163cc:	084a      	lsrs	r2, r1, #1
 80163ce:	4629      	mov	r1, r5
 80163d0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80163d4:	4629      	mov	r1, r5
 80163d6:	104b      	asrs	r3, r1, #1
 80163d8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 80163dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80163e0:	2200      	movs	r2, #0
 80163e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80163e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80163ea:	f04f 0000 	mov.w	r0, #0
 80163ee:	f04f 0100 	mov.w	r1, #0
 80163f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80163f6:	462b      	mov	r3, r5
 80163f8:	0099      	lsls	r1, r3, #2
 80163fa:	4623      	mov	r3, r4
 80163fc:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8016400:	4623      	mov	r3, r4
 8016402:	0098      	lsls	r0, r3, #2
 8016404:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8016408:	1814      	adds	r4, r2, r0
 801640a:	633c      	str	r4, [r7, #48]	; 0x30
 801640c:	414b      	adcs	r3, r1
 801640e:	637b      	str	r3, [r7, #52]	; 0x34
 8016410:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8016414:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8016418:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 801641c:	17da      	asrs	r2, r3, #31
 801641e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016422:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8016426:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 801642a:	17da      	asrs	r2, r3, #31
 801642c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016430:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8016434:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8016438:	462b      	mov	r3, r5
 801643a:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 801643e:	4642      	mov	r2, r8
 8016440:	fb02 f203 	mul.w	r2, r2, r3
 8016444:	464b      	mov	r3, r9
 8016446:	4621      	mov	r1, r4
 8016448:	fb01 f303 	mul.w	r3, r1, r3
 801644c:	4413      	add	r3, r2
 801644e:	4622      	mov	r2, r4
 8016450:	4641      	mov	r1, r8
 8016452:	fba2 ab01 	umull	sl, fp, r2, r1
 8016456:	445b      	add	r3, fp
 8016458:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801645a:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 801645e:	17da      	asrs	r2, r3, #31
 8016460:	67bb      	str	r3, [r7, #120]	; 0x78
 8016462:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 8016464:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8016468:	17da      	asrs	r2, r3, #31
 801646a:	673b      	str	r3, [r7, #112]	; 0x70
 801646c:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801646e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8016472:	462b      	mov	r3, r5
 8016474:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8016478:	4642      	mov	r2, r8
 801647a:	fb02 f203 	mul.w	r2, r2, r3
 801647e:	464b      	mov	r3, r9
 8016480:	4621      	mov	r1, r4
 8016482:	fb01 f303 	mul.w	r3, r1, r3
 8016486:	4413      	add	r3, r2
 8016488:	4622      	mov	r2, r4
 801648a:	4641      	mov	r1, r8
 801648c:	fba2 1201 	umull	r1, r2, r2, r1
 8016490:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8016494:	460a      	mov	r2, r1
 8016496:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 801649a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801649e:	4413      	add	r3, r2
 80164a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80164a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80164a8:	460b      	mov	r3, r1
 80164aa:	eb1a 0303 	adds.w	r3, sl, r3
 80164ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80164b0:	4613      	mov	r3, r2
 80164b2:	eb4b 0303 	adc.w	r3, fp, r3
 80164b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80164b8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80164bc:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 80164c0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80164c4:	1c51      	adds	r1, r2, #1
 80164c6:	66b9      	str	r1, [r7, #104]	; 0x68
 80164c8:	f143 0300 	adc.w	r3, r3, #0
 80164cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80164ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80164d2:	460b      	mov	r3, r1
 80164d4:	0fdb      	lsrs	r3, r3, #31
 80164d6:	2200      	movs	r2, #0
 80164d8:	623b      	str	r3, [r7, #32]
 80164da:	627a      	str	r2, [r7, #36]	; 0x24
 80164dc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80164e0:	4623      	mov	r3, r4
 80164e2:	4602      	mov	r2, r0
 80164e4:	189b      	adds	r3, r3, r2
 80164e6:	61bb      	str	r3, [r7, #24]
 80164e8:	460b      	mov	r3, r1
 80164ea:	462a      	mov	r2, r5
 80164ec:	eb42 0303 	adc.w	r3, r2, r3
 80164f0:	61fb      	str	r3, [r7, #28]
 80164f2:	f04f 0200 	mov.w	r2, #0
 80164f6:	f04f 0300 	mov.w	r3, #0
 80164fa:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80164fe:	4621      	mov	r1, r4
 8016500:	084a      	lsrs	r2, r1, #1
 8016502:	4629      	mov	r1, r5
 8016504:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8016508:	4629      	mov	r1, r5
 801650a:	104b      	asrs	r3, r1, #1
 801650c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8016510:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016514:	2200      	movs	r2, #0
 8016516:	663b      	str	r3, [r7, #96]	; 0x60
 8016518:	667a      	str	r2, [r7, #100]	; 0x64
 801651a:	f04f 0200 	mov.w	r2, #0
 801651e:	f04f 0300 	mov.w	r3, #0
 8016522:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8016526:	4629      	mov	r1, r5
 8016528:	008b      	lsls	r3, r1, #2
 801652a:	4621      	mov	r1, r4
 801652c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8016530:	4621      	mov	r1, r4
 8016532:	008a      	lsls	r2, r1, #2
 8016534:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8016538:	1884      	adds	r4, r0, r2
 801653a:	613c      	str	r4, [r7, #16]
 801653c:	eb41 0303 	adc.w	r3, r1, r3
 8016540:	617b      	str	r3, [r7, #20]
 8016542:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8016546:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
 801654a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801654e:	2b00      	cmp	r3, #0
 8016550:	d132      	bne.n	80165b8 <VL53L1_f_040+0x4ae>
		xtalk_avg = do_division_s(
 8016552:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8016556:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801655a:	1884      	adds	r4, r0, r2
 801655c:	65bc      	str	r4, [r7, #88]	; 0x58
 801655e:	eb41 0303 	adc.w	r3, r1, r3
 8016562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016564:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8016568:	460b      	mov	r3, r1
 801656a:	3301      	adds	r3, #1
 801656c:	653b      	str	r3, [r7, #80]	; 0x50
 801656e:	4613      	mov	r3, r2
 8016570:	f143 0300 	adc.w	r3, r3, #0
 8016574:	657b      	str	r3, [r7, #84]	; 0x54
 8016576:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801657a:	460b      	mov	r3, r1
 801657c:	0fdb      	lsrs	r3, r3, #31
 801657e:	2200      	movs	r2, #0
 8016580:	60bb      	str	r3, [r7, #8]
 8016582:	60fa      	str	r2, [r7, #12]
 8016584:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8016588:	4623      	mov	r3, r4
 801658a:	4602      	mov	r2, r0
 801658c:	189b      	adds	r3, r3, r2
 801658e:	603b      	str	r3, [r7, #0]
 8016590:	460b      	mov	r3, r1
 8016592:	462a      	mov	r2, r5
 8016594:	eb42 0303 	adc.w	r3, r2, r3
 8016598:	607b      	str	r3, [r7, #4]
 801659a:	f04f 0200 	mov.w	r2, #0
 801659e:	f04f 0300 	mov.w	r3, #0
 80165a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80165a6:	4621      	mov	r1, r4
 80165a8:	084a      	lsrs	r2, r1, #1
 80165aa:	4629      	mov	r1, r5
 80165ac:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80165b0:	4629      	mov	r1, r5
 80165b2:	104b      	asrs	r3, r1, #1
 80165b4:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
 80165b8:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d109      	bne.n	80165d4 <VL53L1_f_040+0x4ca>
		if (xtalk_avg < 0)
 80165c0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	da05      	bge.n	80165d4 <VL53L1_f_040+0x4ca>
			xtalk_avg = 0;
 80165c8:	f04f 0200 	mov.w	r2, #0
 80165cc:	f04f 0300 	mov.w	r3, #0
 80165d0:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 80165d4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80165d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80165dc:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 80165de:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 80165e2:	4618      	mov	r0, r3
 80165e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80165e8:	46bd      	mov	sp, r7
 80165ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080165ee <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 80165ee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80165f2:	b09a      	sub	sp, #104	; 0x68
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6478      	str	r0, [r7, #68]	; 0x44
 80165f8:	6439      	str	r1, [r7, #64]	; 0x40
 80165fa:	63fa      	str	r2, [r7, #60]	; 0x3c
 80165fc:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53L1_Error status              = VL53L1_ERROR_NONE;
 80165fe:	2300      	movs	r3, #0
 8016600:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 8016604:	f04f 0200 	mov.w	r2, #0
 8016608:	f04f 0300 	mov.w	r3, #0
 801660c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 8016610:	f04f 0200 	mov.w	r2, #0
 8016614:	f04f 0300 	mov.w	r3, #0
 8016618:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 801661c:	f04f 0200 	mov.w	r2, #0
 8016620:	f04f 0300 	mov.w	r3, #0
 8016624:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 8016628:	2300      	movs	r3, #0
 801662a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 801662e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016630:	2200      	movs	r2, #0
 8016632:	633b      	str	r3, [r7, #48]	; 0x30
 8016634:	637a      	str	r2, [r7, #52]	; 0x34
 8016636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801663c:	2200      	movs	r2, #0
 801663e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016640:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016642:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8016646:	460b      	mov	r3, r1
 8016648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801664a:	fb02 f203 	mul.w	r2, r2, r3
 801664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016650:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8016654:	4601      	mov	r1, r0
 8016656:	fb01 f303 	mul.w	r3, r1, r3
 801665a:	4413      	add	r3, r2
 801665c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801665e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016660:	fba2 4501 	umull	r4, r5, r2, r1
 8016664:	442b      	add	r3, r5
 8016666:	461d      	mov	r5, r3
 8016668:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 801666c:	623b      	str	r3, [r7, #32]
 801666e:	f145 0300 	adc.w	r3, r5, #0
 8016672:	627b      	str	r3, [r7, #36]	; 0x24
 8016674:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016678:	f04f 0300 	mov.w	r3, #0
 801667c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8016680:	f7ea f8a8 	bl	80007d4 <__aeabi_uldivmod>
 8016684:	4602      	mov	r2, r0
 8016686:	460b      	mov	r3, r1
 8016688:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 801668c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801668e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8016692:	b29b      	uxth	r3, r3
 8016694:	2200      	movs	r2, #0
 8016696:	61bb      	str	r3, [r7, #24]
 8016698:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 801669a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801669c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80166a0:	4622      	mov	r2, r4
 80166a2:	fb02 f203 	mul.w	r2, r2, r3
 80166a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80166a8:	4629      	mov	r1, r5
 80166aa:	fb01 f303 	mul.w	r3, r1, r3
 80166ae:	4413      	add	r3, r2
 80166b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80166b2:	4621      	mov	r1, r4
 80166b4:	fba2 ab01 	umull	sl, fp, r2, r1
 80166b8:	445b      	add	r3, fp
 80166ba:	469b      	mov	fp, r3
 80166bc:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 80166c0:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 80166c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80166c8:	f04f 0200 	mov.w	r2, #0
 80166cc:	f04f 0300 	mov.w	r3, #0
 80166d0:	0a02      	lsrs	r2, r0, #8
 80166d2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80166d6:	0a0b      	lsrs	r3, r1, #8
 80166d8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 80166dc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80166e0:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 80166e4:	6139      	str	r1, [r7, #16]
 80166e6:	f143 0300 	adc.w	r3, r3, #0
 80166ea:	617b      	str	r3, [r7, #20]
 80166ec:	f04f 0200 	mov.w	r2, #0
 80166f0:	f04f 0300 	mov.w	r3, #0
 80166f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80166f8:	4621      	mov	r1, r4
 80166fa:	0aca      	lsrs	r2, r1, #11
 80166fc:	4629      	mov	r1, r5
 80166fe:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8016702:	4629      	mov	r1, r5
 8016704:	0acb      	lsrs	r3, r1, #11
 8016706:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 801670a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801670e:	2b01      	cmp	r3, #1
 8016710:	d305      	bcc.n	801671e <VL53L1_f_041+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 8016712:	f04f 32ff 	mov.w	r2, #4294967295
 8016716:	f04f 0300 	mov.w	r3, #0
 801671a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 801671e:	2300      	movs	r3, #0
 8016720:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016724:	e041      	b.n	80167aa <VL53L1_f_041+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8016726:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801672a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801672c:	3302      	adds	r3, #2
 801672e:	009b      	lsls	r3, r3, #2
 8016730:	4413      	add	r3, r2
 8016732:	685b      	ldr	r3, [r3, #4]
 8016734:	2200      	movs	r2, #0
 8016736:	60bb      	str	r3, [r7, #8]
 8016738:	60fa      	str	r2, [r7, #12]
 801673a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801673c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8016740:	4622      	mov	r2, r4
 8016742:	fb02 f203 	mul.w	r2, r2, r3
 8016746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016748:	4629      	mov	r1, r5
 801674a:	fb01 f303 	mul.w	r3, r1, r3
 801674e:	4413      	add	r3, r2
 8016750:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016752:	4621      	mov	r1, r4
 8016754:	fba2 8901 	umull	r8, r9, r2, r1
 8016758:	444b      	add	r3, r9
 801675a:	4699      	mov	r9, r3
 801675c:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 8016760:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8016764:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8016768:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 801676c:	6039      	str	r1, [r7, #0]
 801676e:	f143 0300 	adc.w	r3, r3, #0
 8016772:	607b      	str	r3, [r7, #4]
 8016774:	f04f 0200 	mov.w	r2, #0
 8016778:	f04f 0300 	mov.w	r3, #0
 801677c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8016780:	4621      	mov	r1, r4
 8016782:	0a8a      	lsrs	r2, r1, #10
 8016784:	4629      	mov	r1, r5
 8016786:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 801678a:	4629      	mov	r1, r5
 801678c:	0a8b      	lsrs	r3, r1, #10
 801678e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8016792:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8016796:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8016798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801679a:	3206      	adds	r2, #6
 801679c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 80167a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80167a4:	3301      	adds	r3, #1
 80167a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80167aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80167ac:	7a9b      	ldrb	r3, [r3, #10]
 80167ae:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80167b2:	429a      	cmp	r2, r3
 80167b4:	d3b7      	bcc.n	8016726 <VL53L1_f_041+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 80167b6:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	3768      	adds	r7, #104	; 0x68
 80167be:	46bd      	mov	sp, r7
 80167c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080167c4 <VL53L1_init_zone_config_structure>:
	uint8_t y_inc,
	uint8_t y_zones,
	uint8_t width,
	uint8_t height,
	VL53L1_zone_config_t   *pdata)
{
 80167c4:	b590      	push	{r4, r7, lr}
 80167c6:	b085      	sub	sp, #20
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	4604      	mov	r4, r0
 80167cc:	4608      	mov	r0, r1
 80167ce:	4611      	mov	r1, r2
 80167d0:	461a      	mov	r2, r3
 80167d2:	4623      	mov	r3, r4
 80167d4:	71fb      	strb	r3, [r7, #7]
 80167d6:	4603      	mov	r3, r0
 80167d8:	71bb      	strb	r3, [r7, #6]
 80167da:	460b      	mov	r3, r1
 80167dc:	717b      	strb	r3, [r7, #5]
 80167de:	4613      	mov	r3, r2
 80167e0:	713b      	strb	r3, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80167e2:	2300      	movs	r3, #0
 80167e4:	72fb      	strb	r3, [r7, #11]

	uint8_t  x  = 0;
 80167e6:	2300      	movs	r3, #0
 80167e8:	73fb      	strb	r3, [r7, #15]
	uint8_t  y  = 0;
 80167ea:	2300      	movs	r3, #0
 80167ec:	73bb      	strb	r3, [r7, #14]
	uint16_t  i  = 0;
 80167ee:	2300      	movs	r3, #0
 80167f0:	81bb      	strh	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 80167f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167f4:	2210      	movs	r2, #16
 80167f6:	701a      	strb	r2, [r3, #0]

	i = 0;
 80167f8:	2300      	movs	r3, #0
 80167fa:	81bb      	strh	r3, [r7, #12]

	for (x = 0 ; x < x_zones ; x++) {
 80167fc:	2300      	movs	r3, #0
 80167fe:	73fb      	strb	r3, [r7, #15]
 8016800:	e046      	b.n	8016890 <VL53L1_init_zone_config_structure+0xcc>
		for (y = 0 ; y <  y_zones ; y++) {
 8016802:	2300      	movs	r3, #0
 8016804:	73bb      	strb	r3, [r7, #14]
 8016806:	e03b      	b.n	8016880 <VL53L1_init_zone_config_structure+0xbc>

			if (i < VL53L1_MAX_USER_ZONES) {
 8016808:	89bb      	ldrh	r3, [r7, #12]
 801680a:	2b0f      	cmp	r3, #15
 801680c:	d832      	bhi.n	8016874 <VL53L1_init_zone_config_structure+0xb0>

				pdata->active_zones = (uint8_t)i;
 801680e:	89bb      	ldrh	r3, [r7, #12]
 8016810:	b2da      	uxtb	r2, r3
 8016812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016814:	705a      	strb	r2, [r3, #1]
				pdata->user_zones[i].height   = height;
 8016816:	89bb      	ldrh	r3, [r7, #12]
 8016818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801681a:	3306      	adds	r3, #6
 801681c:	009b      	lsls	r3, r3, #2
 801681e:	4413      	add	r3, r2
 8016820:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016824:	71da      	strb	r2, [r3, #7]
				pdata->user_zones[i].width    = width;
 8016826:	89bb      	ldrh	r3, [r7, #12]
 8016828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801682a:	3306      	adds	r3, #6
 801682c:	009b      	lsls	r3, r3, #2
 801682e:	4413      	add	r3, r2
 8016830:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016834:	719a      	strb	r2, [r3, #6]
				pdata->user_zones[i].x_centre =
						x_off + (x * x_inc);
 8016836:	7bfa      	ldrb	r2, [r7, #15]
 8016838:	79bb      	ldrb	r3, [r7, #6]
 801683a:	fb12 f303 	smulbb	r3, r2, r3
 801683e:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].x_centre =
 8016840:	89bb      	ldrh	r3, [r7, #12]
						x_off + (x * x_inc);
 8016842:	79fa      	ldrb	r2, [r7, #7]
 8016844:	440a      	add	r2, r1
 8016846:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].x_centre =
 8016848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801684a:	3306      	adds	r3, #6
 801684c:	009b      	lsls	r3, r3, #2
 801684e:	4413      	add	r3, r2
 8016850:	460a      	mov	r2, r1
 8016852:	711a      	strb	r2, [r3, #4]
				pdata->user_zones[i].y_centre =
						y_off + (y * y_inc);
 8016854:	7bba      	ldrb	r2, [r7, #14]
 8016856:	f897 3020 	ldrb.w	r3, [r7, #32]
 801685a:	fb12 f303 	smulbb	r3, r2, r3
 801685e:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].y_centre =
 8016860:	89bb      	ldrh	r3, [r7, #12]
						y_off + (y * y_inc);
 8016862:	793a      	ldrb	r2, [r7, #4]
 8016864:	440a      	add	r2, r1
 8016866:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].y_centre =
 8016868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801686a:	3306      	adds	r3, #6
 801686c:	009b      	lsls	r3, r3, #2
 801686e:	4413      	add	r3, r2
 8016870:	460a      	mov	r2, r1
 8016872:	715a      	strb	r2, [r3, #5]
			}

			i++;
 8016874:	89bb      	ldrh	r3, [r7, #12]
 8016876:	3301      	adds	r3, #1
 8016878:	81bb      	strh	r3, [r7, #12]
		for (y = 0 ; y <  y_zones ; y++) {
 801687a:	7bbb      	ldrb	r3, [r7, #14]
 801687c:	3301      	adds	r3, #1
 801687e:	73bb      	strb	r3, [r7, #14]
 8016880:	7bba      	ldrb	r2, [r7, #14]
 8016882:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016886:	429a      	cmp	r2, r3
 8016888:	d3be      	bcc.n	8016808 <VL53L1_init_zone_config_structure+0x44>
	for (x = 0 ; x < x_zones ; x++) {
 801688a:	7bfb      	ldrb	r3, [r7, #15]
 801688c:	3301      	adds	r3, #1
 801688e:	73fb      	strb	r3, [r7, #15]
 8016890:	7bfa      	ldrb	r2, [r7, #15]
 8016892:	797b      	ldrb	r3, [r7, #5]
 8016894:	429a      	cmp	r2, r3
 8016896:	d3b4      	bcc.n	8016802 <VL53L1_init_zone_config_structure+0x3e>
		}
	}

	status = VL53L1_init_zone_config_histogram_bins(pdata);
 8016898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801689a:	f000 f86c 	bl	8016976 <VL53L1_init_zone_config_histogram_bins>
 801689e:	4603      	mov	r3, r0
 80168a0:	72fb      	strb	r3, [r7, #11]


	LOG_FUNCTION_END(status);

	return status;
 80168a2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80168a6:	4618      	mov	r0, r3
 80168a8:	3714      	adds	r7, #20
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd90      	pop	{r4, r7, pc}

080168ae <VL53L1_zone_preset_xtalk_planar>:


VL53L1_Error VL53L1_zone_preset_xtalk_planar(
	VL53L1_general_config_t	*pgeneral,
	VL53L1_zone_config_t    *pzone_cfg)
{
 80168ae:	b580      	push	{r7, lr}
 80168b0:	b084      	sub	sp, #16
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	6078      	str	r0, [r7, #4]
 80168b6:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80168b8:	2300      	movs	r3, #0
 80168ba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pgeneral->global_config__stream_divider = 0x05;
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	2205      	movs	r2, #5
 80168c0:	705a      	strb	r2, [r3, #1]


	pzone_cfg->active_zones                 = 0x04;
 80168c2:	683b      	ldr	r3, [r7, #0]
 80168c4:	2204      	movs	r2, #4
 80168c6:	705a      	strb	r2, [r3, #1]

	pzone_cfg->user_zones[0].height         = 15;
 80168c8:	683b      	ldr	r3, [r7, #0]
 80168ca:	220f      	movs	r2, #15
 80168cc:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width          = 7;
 80168ce:	683b      	ldr	r3, [r7, #0]
 80168d0:	2207      	movs	r2, #7
 80168d2:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre       = 4;
 80168d4:	683b      	ldr	r3, [r7, #0]
 80168d6:	2204      	movs	r2, #4
 80168d8:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre       = 8;
 80168da:	683b      	ldr	r3, [r7, #0]
 80168dc:	2208      	movs	r2, #8
 80168de:	775a      	strb	r2, [r3, #29]

	pzone_cfg->user_zones[1].height         = 15;
 80168e0:	683b      	ldr	r3, [r7, #0]
 80168e2:	220f      	movs	r2, #15
 80168e4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pzone_cfg->user_zones[1].width          = 7;
 80168e8:	683b      	ldr	r3, [r7, #0]
 80168ea:	2207      	movs	r2, #7
 80168ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pzone_cfg->user_zones[1].x_centre       = 12;
 80168f0:	683b      	ldr	r3, [r7, #0]
 80168f2:	220c      	movs	r2, #12
 80168f4:	f883 2020 	strb.w	r2, [r3, #32]
	pzone_cfg->user_zones[1].y_centre       = 8;
 80168f8:	683b      	ldr	r3, [r7, #0]
 80168fa:	2208      	movs	r2, #8
 80168fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pzone_cfg->user_zones[2].height         = 7;
 8016900:	683b      	ldr	r3, [r7, #0]
 8016902:	2207      	movs	r2, #7
 8016904:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pzone_cfg->user_zones[2].width          = 15;
 8016908:	683b      	ldr	r3, [r7, #0]
 801690a:	220f      	movs	r2, #15
 801690c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pzone_cfg->user_zones[2].x_centre       = 8;
 8016910:	683b      	ldr	r3, [r7, #0]
 8016912:	2208      	movs	r2, #8
 8016914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pzone_cfg->user_zones[2].y_centre       = 4;
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	2204      	movs	r2, #4
 801691c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	pzone_cfg->user_zones[3].height         = 7;
 8016920:	683b      	ldr	r3, [r7, #0]
 8016922:	2207      	movs	r2, #7
 8016924:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pzone_cfg->user_zones[3].width          = 15;
 8016928:	683b      	ldr	r3, [r7, #0]
 801692a:	220f      	movs	r2, #15
 801692c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pzone_cfg->user_zones[3].x_centre       = 8;
 8016930:	683b      	ldr	r3, [r7, #0]
 8016932:	2208      	movs	r2, #8
 8016934:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pzone_cfg->user_zones[3].y_centre       = 12;
 8016938:	683b      	ldr	r3, [r7, #0]
 801693a:	220c      	movs	r2, #12
 801693c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29



	pzone_cfg->user_zones[4].height         = 15;
 8016940:	683b      	ldr	r3, [r7, #0]
 8016942:	220f      	movs	r2, #15
 8016944:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	pzone_cfg->user_zones[4].width          = 15;
 8016948:	683b      	ldr	r3, [r7, #0]
 801694a:	220f      	movs	r2, #15
 801694c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	pzone_cfg->user_zones[4].x_centre       = 8;
 8016950:	683b      	ldr	r3, [r7, #0]
 8016952:	2208      	movs	r2, #8
 8016954:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pzone_cfg->user_zones[4].y_centre       = 8;
 8016958:	683b      	ldr	r3, [r7, #0]
 801695a:	2208      	movs	r2, #8
 801695c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 8016960:	6838      	ldr	r0, [r7, #0]
 8016962:	f000 f808 	bl	8016976 <VL53L1_init_zone_config_histogram_bins>
 8016966:	4603      	mov	r3, r0
 8016968:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(status);

	return status;
 801696a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801696e:	4618      	mov	r0, r3
 8016970:	3710      	adds	r7, #16
 8016972:	46bd      	mov	sp, r7
 8016974:	bd80      	pop	{r7, pc}

08016976 <VL53L1_init_zone_config_histogram_bins>:


VL53L1_Error VL53L1_init_zone_config_histogram_bins(
	VL53L1_zone_config_t   *pdata)
{
 8016976:	b480      	push	{r7}
 8016978:	b085      	sub	sp, #20
 801697a:	af00      	add	r7, sp, #0
 801697c:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801697e:	2300      	movs	r3, #0
 8016980:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8016982:	2300      	movs	r3, #0
 8016984:	73fb      	strb	r3, [r7, #15]
 8016986:	e008      	b.n	801699a <VL53L1_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 8016988:	7bfb      	ldrb	r3, [r7, #15]
 801698a:	687a      	ldr	r2, [r7, #4]
 801698c:	4413      	add	r3, r2
 801698e:	2201      	movs	r2, #1
 8016990:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (i = 0; i < pdata->max_zones; i++)
 8016994:	7bfb      	ldrb	r3, [r7, #15]
 8016996:	3301      	adds	r3, #1
 8016998:	73fb      	strb	r3, [r7, #15]
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	781b      	ldrb	r3, [r3, #0]
 801699e:	7bfa      	ldrb	r2, [r7, #15]
 80169a0:	429a      	cmp	r2, r3
 80169a2:	d3f1      	bcc.n	8016988 <VL53L1_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 80169a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80169a8:	4618      	mov	r0, r3
 80169aa:	3714      	adds	r7, #20
 80169ac:	46bd      	mov	sp, r7
 80169ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b2:	4770      	bx	lr

080169b4 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b084      	sub	sp, #16
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	60f8      	str	r0, [r7, #12]
 80169bc:	60b9      	str	r1, [r7, #8]
 80169be:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	68db      	ldr	r3, [r3, #12]
 80169c4:	68fa      	ldr	r2, [r7, #12]
 80169c6:	8910      	ldrh	r0, [r2, #8]
 80169c8:	687a      	ldr	r2, [r7, #4]
 80169ca:	b292      	uxth	r2, r2
 80169cc:	68b9      	ldr	r1, [r7, #8]
 80169ce:	4798      	blx	r3
 80169d0:	4603      	mov	r3, r0
}
 80169d2:	4618      	mov	r0, r3
 80169d4:	3710      	adds	r7, #16
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}

080169da <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80169da:	b580      	push	{r7, lr}
 80169dc:	b084      	sub	sp, #16
 80169de:	af00      	add	r7, sp, #0
 80169e0:	60f8      	str	r0, [r7, #12]
 80169e2:	60b9      	str	r1, [r7, #8]
 80169e4:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	691b      	ldr	r3, [r3, #16]
 80169ea:	68fa      	ldr	r2, [r7, #12]
 80169ec:	8910      	ldrh	r0, [r2, #8]
 80169ee:	687a      	ldr	r2, [r7, #4]
 80169f0:	b292      	uxth	r2, r2
 80169f2:	68b9      	ldr	r1, [r7, #8]
 80169f4:	4798      	blx	r3
 80169f6:	4603      	mov	r3, r0
}
 80169f8:	4618      	mov	r0, r3
 80169fa:	3710      	adds	r7, #16
 80169fc:	46bd      	mov	sp, r7
 80169fe:	bd80      	pop	{r7, pc}

08016a00 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b086      	sub	sp, #24
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	60f8      	str	r0, [r7, #12]
 8016a08:	607a      	str	r2, [r7, #4]
 8016a0a:	603b      	str	r3, [r7, #0]
 8016a0c:	460b      	mov	r3, r1
 8016a0e:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8016a10:	2300      	movs	r3, #0
 8016a12:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8016a14:	683b      	ldr	r3, [r7, #0]
 8016a16:	2bff      	cmp	r3, #255	; 0xff
 8016a18:	d902      	bls.n	8016a20 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 8016a1a:	f06f 0303 	mvn.w	r3, #3
 8016a1e:	e01d      	b.n	8016a5c <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8016a20:	897b      	ldrh	r3, [r7, #10]
 8016a22:	0a1b      	lsrs	r3, r3, #8
 8016a24:	b29b      	uxth	r3, r3
 8016a26:	b2da      	uxtb	r2, r3
 8016a28:	4b0e      	ldr	r3, [pc, #56]	; (8016a64 <VL53L1_WriteMulti+0x64>)
 8016a2a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8016a2c:	897b      	ldrh	r3, [r7, #10]
 8016a2e:	b2da      	uxtb	r2, r3
 8016a30:	4b0c      	ldr	r3, [pc, #48]	; (8016a64 <VL53L1_WriteMulti+0x64>)
 8016a32:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8016a34:	683a      	ldr	r2, [r7, #0]
 8016a36:	6879      	ldr	r1, [r7, #4]
 8016a38:	480b      	ldr	r0, [pc, #44]	; (8016a68 <VL53L1_WriteMulti+0x68>)
 8016a3a:	f007 fc95 	bl	801e368 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8016a3e:	683b      	ldr	r3, [r7, #0]
 8016a40:	3302      	adds	r3, #2
 8016a42:	461a      	mov	r2, r3
 8016a44:	4907      	ldr	r1, [pc, #28]	; (8016a64 <VL53L1_WriteMulti+0x64>)
 8016a46:	68f8      	ldr	r0, [r7, #12]
 8016a48:	f7ff ffb4 	bl	80169b4 <_I2CWrite>
 8016a4c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8016a4e:	693b      	ldr	r3, [r7, #16]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d001      	beq.n	8016a58 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8016a54:	23f3      	movs	r3, #243	; 0xf3
 8016a56:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 8016a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	3718      	adds	r7, #24
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}
 8016a64:	20008598 	.word	0x20008598
 8016a68:	2000859a 	.word	0x2000859a

08016a6c <VL53L1_ReadMulti>:

VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b086      	sub	sp, #24
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	60f8      	str	r0, [r7, #12]
 8016a74:	607a      	str	r2, [r7, #4]
 8016a76:	603b      	str	r3, [r7, #0]
 8016a78:	460b      	mov	r3, r1
 8016a7a:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8016a80:	897b      	ldrh	r3, [r7, #10]
 8016a82:	0a1b      	lsrs	r3, r3, #8
 8016a84:	b29b      	uxth	r3, r3
 8016a86:	b2da      	uxtb	r2, r3
 8016a88:	4b12      	ldr	r3, [pc, #72]	; (8016ad4 <VL53L1_ReadMulti+0x68>)
 8016a8a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8016a8c:	897b      	ldrh	r3, [r7, #10]
 8016a8e:	b2da      	uxtb	r2, r3
 8016a90:	4b10      	ldr	r3, [pc, #64]	; (8016ad4 <VL53L1_ReadMulti+0x68>)
 8016a92:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8016a94:	2202      	movs	r2, #2
 8016a96:	490f      	ldr	r1, [pc, #60]	; (8016ad4 <VL53L1_ReadMulti+0x68>)
 8016a98:	68f8      	ldr	r0, [r7, #12]
 8016a9a:	f7ff ff8b 	bl	80169b4 <_I2CWrite>
 8016a9e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8016aa0:	693b      	ldr	r3, [r7, #16]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d002      	beq.n	8016aac <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8016aa6:	23f3      	movs	r3, #243	; 0xf3
 8016aa8:	75fb      	strb	r3, [r7, #23]
        goto done;
 8016aaa:	e00c      	b.n	8016ac6 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8016aac:	683a      	ldr	r2, [r7, #0]
 8016aae:	6879      	ldr	r1, [r7, #4]
 8016ab0:	68f8      	ldr	r0, [r7, #12]
 8016ab2:	f7ff ff92 	bl	80169da <_I2CRead>
 8016ab6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8016ab8:	693b      	ldr	r3, [r7, #16]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d002      	beq.n	8016ac4 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8016abe:	23f3      	movs	r3, #243	; 0xf3
 8016ac0:	75fb      	strb	r3, [r7, #23]
 8016ac2:	e000      	b.n	8016ac6 <VL53L1_ReadMulti+0x5a>
    }
done:
 8016ac4:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8016ac6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016aca:	4618      	mov	r0, r3
 8016acc:	3718      	adds	r7, #24
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	bd80      	pop	{r7, pc}
 8016ad2:	bf00      	nop
 8016ad4:	20008598 	.word	0x20008598

08016ad8 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b084      	sub	sp, #16
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
 8016ae0:	460b      	mov	r3, r1
 8016ae2:	807b      	strh	r3, [r7, #2]
 8016ae4:	4613      	mov	r3, r2
 8016ae6:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8016ae8:	2300      	movs	r3, #0
 8016aea:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8016aec:	887b      	ldrh	r3, [r7, #2]
 8016aee:	0a1b      	lsrs	r3, r3, #8
 8016af0:	b29b      	uxth	r3, r3
 8016af2:	b2da      	uxtb	r2, r3
 8016af4:	4b0c      	ldr	r3, [pc, #48]	; (8016b28 <VL53L1_WrByte+0x50>)
 8016af6:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8016af8:	887b      	ldrh	r3, [r7, #2]
 8016afa:	b2da      	uxtb	r2, r3
 8016afc:	4b0a      	ldr	r3, [pc, #40]	; (8016b28 <VL53L1_WrByte+0x50>)
 8016afe:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8016b00:	4a09      	ldr	r2, [pc, #36]	; (8016b28 <VL53L1_WrByte+0x50>)
 8016b02:	787b      	ldrb	r3, [r7, #1]
 8016b04:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8016b06:	2203      	movs	r2, #3
 8016b08:	4907      	ldr	r1, [pc, #28]	; (8016b28 <VL53L1_WrByte+0x50>)
 8016b0a:	6878      	ldr	r0, [r7, #4]
 8016b0c:	f7ff ff52 	bl	80169b4 <_I2CWrite>
 8016b10:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8016b12:	68bb      	ldr	r3, [r7, #8]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d001      	beq.n	8016b1c <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8016b18:	23f3      	movs	r3, #243	; 0xf3
 8016b1a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8016b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016b20:	4618      	mov	r0, r3
 8016b22:	3710      	adds	r7, #16
 8016b24:	46bd      	mov	sp, r7
 8016b26:	bd80      	pop	{r7, pc}
 8016b28:	20008598 	.word	0x20008598

08016b2c <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	b084      	sub	sp, #16
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
 8016b34:	460b      	mov	r3, r1
 8016b36:	807b      	strh	r3, [r7, #2]
 8016b38:	4613      	mov	r3, r2
 8016b3a:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8016b3c:	2300      	movs	r3, #0
 8016b3e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8016b40:	887b      	ldrh	r3, [r7, #2]
 8016b42:	0a1b      	lsrs	r3, r3, #8
 8016b44:	b29b      	uxth	r3, r3
 8016b46:	b2da      	uxtb	r2, r3
 8016b48:	4b10      	ldr	r3, [pc, #64]	; (8016b8c <VL53L1_WrWord+0x60>)
 8016b4a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8016b4c:	887b      	ldrh	r3, [r7, #2]
 8016b4e:	b2da      	uxtb	r2, r3
 8016b50:	4b0e      	ldr	r3, [pc, #56]	; (8016b8c <VL53L1_WrWord+0x60>)
 8016b52:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8016b54:	883b      	ldrh	r3, [r7, #0]
 8016b56:	0a1b      	lsrs	r3, r3, #8
 8016b58:	b29b      	uxth	r3, r3
 8016b5a:	b2da      	uxtb	r2, r3
 8016b5c:	4b0b      	ldr	r3, [pc, #44]	; (8016b8c <VL53L1_WrWord+0x60>)
 8016b5e:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8016b60:	883b      	ldrh	r3, [r7, #0]
 8016b62:	b2da      	uxtb	r2, r3
 8016b64:	4b09      	ldr	r3, [pc, #36]	; (8016b8c <VL53L1_WrWord+0x60>)
 8016b66:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8016b68:	2204      	movs	r2, #4
 8016b6a:	4908      	ldr	r1, [pc, #32]	; (8016b8c <VL53L1_WrWord+0x60>)
 8016b6c:	6878      	ldr	r0, [r7, #4]
 8016b6e:	f7ff ff21 	bl	80169b4 <_I2CWrite>
 8016b72:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8016b74:	68bb      	ldr	r3, [r7, #8]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d001      	beq.n	8016b7e <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8016b7a:	23f3      	movs	r3, #243	; 0xf3
 8016b7c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8016b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016b82:	4618      	mov	r0, r3
 8016b84:	3710      	adds	r7, #16
 8016b86:	46bd      	mov	sp, r7
 8016b88:	bd80      	pop	{r7, pc}
 8016b8a:	bf00      	nop
 8016b8c:	20008598 	.word	0x20008598

08016b90 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b086      	sub	sp, #24
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	60f8      	str	r0, [r7, #12]
 8016b98:	460b      	mov	r3, r1
 8016b9a:	607a      	str	r2, [r7, #4]
 8016b9c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8016ba2:	897b      	ldrh	r3, [r7, #10]
 8016ba4:	0a1b      	lsrs	r3, r3, #8
 8016ba6:	b29b      	uxth	r3, r3
 8016ba8:	b2da      	uxtb	r2, r3
 8016baa:	4b12      	ldr	r3, [pc, #72]	; (8016bf4 <VL53L1_RdByte+0x64>)
 8016bac:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8016bae:	897b      	ldrh	r3, [r7, #10]
 8016bb0:	b2da      	uxtb	r2, r3
 8016bb2:	4b10      	ldr	r3, [pc, #64]	; (8016bf4 <VL53L1_RdByte+0x64>)
 8016bb4:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8016bb6:	2202      	movs	r2, #2
 8016bb8:	490e      	ldr	r1, [pc, #56]	; (8016bf4 <VL53L1_RdByte+0x64>)
 8016bba:	68f8      	ldr	r0, [r7, #12]
 8016bbc:	f7ff fefa 	bl	80169b4 <_I2CWrite>
 8016bc0:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8016bc2:	693b      	ldr	r3, [r7, #16]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d002      	beq.n	8016bce <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8016bc8:	23f3      	movs	r3, #243	; 0xf3
 8016bca:	75fb      	strb	r3, [r7, #23]
        goto done;
 8016bcc:	e00c      	b.n	8016be8 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8016bce:	2201      	movs	r2, #1
 8016bd0:	6879      	ldr	r1, [r7, #4]
 8016bd2:	68f8      	ldr	r0, [r7, #12]
 8016bd4:	f7ff ff01 	bl	80169da <_I2CRead>
 8016bd8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8016bda:	693b      	ldr	r3, [r7, #16]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d002      	beq.n	8016be6 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8016be0:	23f3      	movs	r3, #243	; 0xf3
 8016be2:	75fb      	strb	r3, [r7, #23]
 8016be4:	e000      	b.n	8016be8 <VL53L1_RdByte+0x58>
    }
done:
 8016be6:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8016be8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016bec:	4618      	mov	r0, r3
 8016bee:	3718      	adds	r7, #24
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}
 8016bf4:	20008598 	.word	0x20008598

08016bf8 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b086      	sub	sp, #24
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	60f8      	str	r0, [r7, #12]
 8016c00:	460b      	mov	r3, r1
 8016c02:	607a      	str	r2, [r7, #4]
 8016c04:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8016c06:	2300      	movs	r3, #0
 8016c08:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8016c0a:	897b      	ldrh	r3, [r7, #10]
 8016c0c:	0a1b      	lsrs	r3, r3, #8
 8016c0e:	b29b      	uxth	r3, r3
 8016c10:	b2da      	uxtb	r2, r3
 8016c12:	4b18      	ldr	r3, [pc, #96]	; (8016c74 <VL53L1_RdWord+0x7c>)
 8016c14:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8016c16:	897b      	ldrh	r3, [r7, #10]
 8016c18:	b2da      	uxtb	r2, r3
 8016c1a:	4b16      	ldr	r3, [pc, #88]	; (8016c74 <VL53L1_RdWord+0x7c>)
 8016c1c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8016c1e:	2202      	movs	r2, #2
 8016c20:	4914      	ldr	r1, [pc, #80]	; (8016c74 <VL53L1_RdWord+0x7c>)
 8016c22:	68f8      	ldr	r0, [r7, #12]
 8016c24:	f7ff fec6 	bl	80169b4 <_I2CWrite>
 8016c28:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8016c2a:	693b      	ldr	r3, [r7, #16]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d002      	beq.n	8016c36 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8016c30:	23f3      	movs	r3, #243	; 0xf3
 8016c32:	75fb      	strb	r3, [r7, #23]
        goto done;
 8016c34:	e017      	b.n	8016c66 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8016c36:	2202      	movs	r2, #2
 8016c38:	490e      	ldr	r1, [pc, #56]	; (8016c74 <VL53L1_RdWord+0x7c>)
 8016c3a:	68f8      	ldr	r0, [r7, #12]
 8016c3c:	f7ff fecd 	bl	80169da <_I2CRead>
 8016c40:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8016c42:	693b      	ldr	r3, [r7, #16]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d002      	beq.n	8016c4e <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8016c48:	23f3      	movs	r3, #243	; 0xf3
 8016c4a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8016c4c:	e00b      	b.n	8016c66 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8016c4e:	4b09      	ldr	r3, [pc, #36]	; (8016c74 <VL53L1_RdWord+0x7c>)
 8016c50:	781b      	ldrb	r3, [r3, #0]
 8016c52:	b29b      	uxth	r3, r3
 8016c54:	021b      	lsls	r3, r3, #8
 8016c56:	b29a      	uxth	r2, r3
 8016c58:	4b06      	ldr	r3, [pc, #24]	; (8016c74 <VL53L1_RdWord+0x7c>)
 8016c5a:	785b      	ldrb	r3, [r3, #1]
 8016c5c:	b29b      	uxth	r3, r3
 8016c5e:	4413      	add	r3, r2
 8016c60:	b29a      	uxth	r2, r3
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8016c66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	3718      	adds	r7, #24
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	bd80      	pop	{r7, pc}
 8016c72:	bf00      	nop
 8016c74:	20008598 	.word	0x20008598

08016c78 <VL53L1_GetTickCount>:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(VL53L1_DEV Dev, uint32_t *ptick_count_ms)
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b084      	sub	sp, #16
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
 8016c80:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8016c82:	2300      	movs	r3, #0
 8016c84:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	695b      	ldr	r3, [r3, #20]
 8016c8a:	4798      	blx	r3
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	461a      	mov	r2, r3
 8016c90:	683b      	ldr	r3, [r7, #0]
 8016c92:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8016c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016c98:	4618      	mov	r0, r3
 8016c9a:	3710      	adds	r7, #16
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	bd80      	pop	{r7, pc}

08016ca0 <VL53L1_WaitMs>:
	
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_DEV Dev, int32_t wait_ms){
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b082      	sub	sp, #8
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
 8016ca8:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_ms);
 8016caa:	683b      	ldr	r3, [r7, #0]
 8016cac:	4619      	mov	r1, r3
 8016cae:	6878      	ldr	r0, [r7, #4]
 8016cb0:	f000 f8d2 	bl	8016e58 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8016cb4:	2300      	movs	r3, #0
}
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	3708      	adds	r7, #8
 8016cba:	46bd      	mov	sp, r7
 8016cbc:	bd80      	pop	{r7, pc}
	...

08016cc0 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_DEV Dev, int32_t wait_us){
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b082      	sub	sp, #8
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
 8016cc8:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_us/1000);
 8016cca:	683b      	ldr	r3, [r7, #0]
 8016ccc:	4a07      	ldr	r2, [pc, #28]	; (8016cec <VL53L1_WaitUs+0x2c>)
 8016cce:	fb82 1203 	smull	r1, r2, r2, r3
 8016cd2:	1192      	asrs	r2, r2, #6
 8016cd4:	17db      	asrs	r3, r3, #31
 8016cd6:	1ad3      	subs	r3, r2, r3
 8016cd8:	4619      	mov	r1, r3
 8016cda:	6878      	ldr	r0, [r7, #4]
 8016cdc:	f000 f8bc 	bl	8016e58 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8016ce0:	2300      	movs	r3, #0
}
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	3708      	adds	r7, #8
 8016ce6:	46bd      	mov	sp, r7
 8016ce8:	bd80      	pop	{r7, pc}
 8016cea:	bf00      	nop
 8016cec:	10624dd3 	.word	0x10624dd3

08016cf0 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8016cf0:	b590      	push	{r4, r7, lr}
 8016cf2:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8016cf6:	af00      	add	r7, sp, #0
 8016cf8:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8016cfc:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8016d00:	6020      	str	r0, [r4, #0]
 8016d02:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8016d06:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8016d0a:	6001      	str	r1, [r0, #0]
 8016d0c:	4619      	mov	r1, r3
 8016d0e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8016d12:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8016d16:	801a      	strh	r2, [r3, #0]
 8016d18:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8016d1c:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 8016d20:	460a      	mov	r2, r1
 8016d22:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8016d24:	2300      	movs	r3, #0
 8016d26:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8016d30:	2300      	movs	r3, #0
 8016d32:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8016d36:	2300      	movs	r3, #0
 8016d38:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8016d3c:	2300      	movs	r3, #0
 8016d3e:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8016d42:	2300      	movs	r3, #0
 8016d44:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8016d48:	f107 0310 	add.w	r3, r7, #16
 8016d4c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8016d50:	4940      	ldr	r1, [pc, #256]	; (8016e54 <VL53L1_WaitValueMaskEx+0x164>)
 8016d52:	4618      	mov	r0, r3
 8016d54:	f007 fd43 	bl	801e7de <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(Dev, &start_time_ms);
 8016d58:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8016d5c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8016d60:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8016d64:	4611      	mov	r1, r2
 8016d66:	6818      	ldr	r0, [r3, #0]
 8016d68:	f7ff ff86 	bl	8016c78 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8016d6c:	e04e      	b.n	8016e0c <VL53L1_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8016d6e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d110      	bne.n	8016d98 <VL53L1_WaitValueMaskEx+0xa8>
			status = VL53L1_RdByte(
 8016d76:	f207 2213 	addw	r2, r7, #531	; 0x213
 8016d7a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8016d7e:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8016d82:	8819      	ldrh	r1, [r3, #0]
 8016d84:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8016d88:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8016d8c:	6818      	ldr	r0, [r3, #0]
 8016d8e:	f7ff feff 	bl	8016b90 <VL53L1_RdByte>
 8016d92:	4603      	mov	r3, r0
 8016d94:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8016d98:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8016d9c:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8016da0:	4013      	ands	r3, r2
 8016da2:	b2db      	uxtb	r3, r3
 8016da4:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8016da8:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 8016dac:	7812      	ldrb	r2, [r2, #0]
 8016dae:	429a      	cmp	r2, r3
 8016db0:	d102      	bne.n	8016db8 <VL53L1_WaitValueMaskEx+0xc8>
			found = 1;
 8016db2:	2301      	movs	r3, #1
 8016db4:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8016db8:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d114      	bne.n	8016dea <VL53L1_WaitValueMaskEx+0xfa>
 8016dc0:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d110      	bne.n	8016dea <VL53L1_WaitValueMaskEx+0xfa>
			found == 0 &&
 8016dc8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d00c      	beq.n	8016dea <VL53L1_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8016dd0:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8016dd4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8016dd8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8016ddc:	4611      	mov	r1, r2
 8016dde:	6818      	ldr	r0, [r3, #0]
 8016de0:	f7ff ff5e 	bl	8016ca0 <VL53L1_WaitMs>
 8016de4:	4603      	mov	r3, r0
 8016de6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(Dev, &current_time_ms);
 8016dea:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8016dee:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8016df2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8016df6:	4611      	mov	r1, r2
 8016df8:	6818      	ldr	r0, [r3, #0]
 8016dfa:	f7ff ff3d 	bl	8016c78 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8016dfe:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8016e02:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8016e06:	1ad3      	subs	r3, r2, r3
 8016e08:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 8016e0c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d10c      	bne.n	8016e2e <VL53L1_WaitValueMaskEx+0x13e>
 8016e14:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8016e18:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8016e1c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	429a      	cmp	r2, r3
 8016e24:	d203      	bcs.n	8016e2e <VL53L1_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 8016e26:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d09f      	beq.n	8016d6e <VL53L1_WaitValueMaskEx+0x7e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8016e2e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d106      	bne.n	8016e44 <VL53L1_WaitValueMaskEx+0x154>
 8016e36:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d102      	bne.n	8016e44 <VL53L1_WaitValueMaskEx+0x154>
		status = VL53L1_ERROR_TIME_OUT;
 8016e3e:	23f9      	movs	r3, #249	; 0xf9
 8016e40:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8016e44:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd90      	pop	{r4, r7, pc}
 8016e52:	bf00      	nop
 8016e54:	0801f638 	.word	0x0801f638

08016e58 <VL53L1_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53L1_Error
  */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay)
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b084      	sub	sp, #16
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	6078      	str	r0, [r7, #4]
 8016e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	695b      	ldr	r3, [r3, #20]
 8016e66:	4798      	blx	r3
 8016e68:	4603      	mov	r3, r0
 8016e6a:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8016e6c:	bf00      	nop
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	695b      	ldr	r3, [r3, #20]
 8016e72:	4798      	blx	r3
 8016e74:	4603      	mov	r3, r0
 8016e76:	461a      	mov	r2, r3
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	1ad3      	subs	r3, r2, r3
 8016e7c:	683a      	ldr	r2, [r7, #0]
 8016e7e:	429a      	cmp	r2, r3
 8016e80:	d8f5      	bhi.n	8016e6e <VL53L1_Delay+0x16>
  {
  }

  return VL53L1_ERROR_NONE;
 8016e82:	2300      	movs	r3, #0
}
 8016e84:	4618      	mov	r0, r3
 8016e86:	3710      	adds	r7, #16
 8016e88:	46bd      	mov	sp, r7
 8016e8a:	bd80      	pop	{r7, pc}

08016e8c <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b08c      	sub	sp, #48	; 0x30
 8016e90:	af06      	add	r7, sp, #24
 8016e92:	60f8      	str	r0, [r7, #12]
 8016e94:	60b9      	str	r1, [r7, #8]
 8016e96:	607a      	str	r2, [r7, #4]
 8016e98:	603b      	str	r3, [r7, #0]



	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 8016e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ea0:	9304      	str	r3, [sp, #16]
 8016ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ea4:	9303      	str	r3, [sp, #12]
 8016ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ea8:	9302      	str	r3, [sp, #8]
 8016eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eac:	9301      	str	r3, [sp, #4]
 8016eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eb0:	9300      	str	r3, [sp, #0]
 8016eb2:	6a3b      	ldr	r3, [r7, #32]
 8016eb4:	683a      	ldr	r2, [r7, #0]
 8016eb6:	6879      	ldr	r1, [r7, #4]
 8016eb8:	68b8      	ldr	r0, [r7, #8]
 8016eba:	f7fc fefb 	bl	8013cb4 <VL53L1_hist_process_data>
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8016ec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	3718      	adds	r7, #24
 8016eca:	46bd      	mov	sp, r7
 8016ecc:	bd80      	pop	{r7, pc}

08016ece <VL53L1CB_RegisterBusIO>:
  * @param pObj    vl53l1cb context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_RegisterBusIO(VL53L1CB_Object_t *pObj, VL53L1CB_IO_t *pIO)
{
 8016ece:	b580      	push	{r7, lr}
 8016ed0:	b084      	sub	sp, #16
 8016ed2:	af00      	add	r7, sp, #0
 8016ed4:	6078      	str	r0, [r7, #4]
 8016ed6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d103      	bne.n	8016ee6 <VL53L1CB_RegisterBusIO+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8016ede:	f06f 0301 	mvn.w	r3, #1
 8016ee2:	60fb      	str	r3, [r7, #12]
 8016ee4:	e023      	b.n	8016f2e <VL53L1CB_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8016ee6:	683b      	ldr	r3, [r7, #0]
 8016ee8:	681a      	ldr	r2, [r3, #0]
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8016eee:	683b      	ldr	r3, [r7, #0]
 8016ef0:	685a      	ldr	r2, [r3, #4]
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8016ef6:	683b      	ldr	r3, [r7, #0]
 8016ef8:	891a      	ldrh	r2, [r3, #8]
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8016efe:	683b      	ldr	r3, [r7, #0]
 8016f00:	68da      	ldr	r2, [r3, #12]
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8016f06:	683b      	ldr	r3, [r7, #0]
 8016f08:	691a      	ldr	r2, [r3, #16]
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8016f0e:	683b      	ldr	r3, [r7, #0]
 8016f10:	695a      	ldr	r2, [r3, #20]
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d004      	beq.n	8016f28 <VL53L1CB_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	4798      	blx	r3
 8016f24:	60f8      	str	r0, [r7, #12]
 8016f26:	e002      	b.n	8016f2e <VL53L1CB_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L1CB_ERROR;
 8016f28:	f04f 33ff 	mov.w	r3, #4294967295
 8016f2c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8016f2e:	68fb      	ldr	r3, [r7, #12]
}
 8016f30:	4618      	mov	r0, r3
 8016f32:	3710      	adds	r7, #16
 8016f34:	46bd      	mov	sp, r7
 8016f36:	bd80      	pop	{r7, pc}

08016f38 <VL53L1CB_Init>:
  * @brief Initializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Init(VL53L1CB_Object_t *pObj)
{
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b084      	sub	sp, #16
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016f46:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d003      	beq.n	8016f56 <VL53L1CB_Init+0x1e>
  {
    ret =  VL53L1CB_ERROR;
 8016f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8016f52:	60fb      	str	r3, [r7, #12]
 8016f54:	e04d      	b.n	8016ff2 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_WaitDeviceBooted(pObj) != VL53L1_ERROR_NONE)
 8016f56:	6878      	ldr	r0, [r7, #4]
 8016f58:	f7ed f8d1 	bl	80040fe <VL53L1_WaitDeviceBooted>
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d003      	beq.n	8016f6a <VL53L1CB_Init+0x32>
  {
    ret =  VL53L1CB_ERROR;
 8016f62:	f04f 33ff 	mov.w	r3, #4294967295
 8016f66:	60fb      	str	r3, [r7, #12]
 8016f68:	e043      	b.n	8016ff2 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_DataInit(pObj) != VL53L1_ERROR_NONE)
 8016f6a:	6878      	ldr	r0, [r7, #4]
 8016f6c:	f7ed f847 	bl	8003ffe <VL53L1_DataInit>
 8016f70:	4603      	mov	r3, r0
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d003      	beq.n	8016f7e <VL53L1CB_Init+0x46>
  {
    ret = VL53L1CB_ERROR;
 8016f76:	f04f 33ff 	mov.w	r3, #4294967295
 8016f7a:	60fb      	str	r3, [r7, #12]
 8016f7c:	e039      	b.n	8016ff2 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_StaticInit(pObj) != VL53L1_ERROR_NONE)
 8016f7e:	6878      	ldr	r0, [r7, #4]
 8016f80:	f7ed f892 	bl	80040a8 <VL53L1_StaticInit>
 8016f84:	4603      	mov	r3, r0
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d003      	beq.n	8016f92 <VL53L1CB_Init+0x5a>
  {
    ret = VL53L1CB_ERROR;
 8016f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8016f8e:	60fb      	str	r3, [r7, #12]
 8016f90:	e02f      	b.n	8016ff2 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_PerformRefSpadManagement(pObj) != VL53L1_ERROR_NONE)
 8016f92:	6878      	ldr	r0, [r7, #4]
 8016f94:	f7ee fe8a 	bl	8005cac <VL53L1_PerformRefSpadManagement>
 8016f98:	4603      	mov	r3, r0
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d003      	beq.n	8016fa6 <VL53L1CB_Init+0x6e>
  {
    ret = VL53L1CB_ERROR;
 8016f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8016fa2:	60fb      	str	r3, [r7, #12]
 8016fa4:	e025      	b.n	8016ff2 <VL53L1CB_Init+0xba>
  }
  else
  {
    pObj->IsRanging = 0;
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016fac:	2200      	movs	r2, #0
 8016fae:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    pObj->IsBlocking = 0;
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016fb8:	2200      	movs	r2, #0
 8016fba:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
    pObj->IsContinuous = 0;
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016fc4:	2200      	movs	r2, #0
 8016fc6:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
    pObj->IsAmbientEnabled = 0;
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = 0;
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016fdc:	2200      	movs	r2, #0
 8016fde:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
    pObj->IsInitialized = 1;
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016fe8:	2201      	movs	r2, #1
 8016fea:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    ret = VL53L1CB_OK;
 8016fee:	2300      	movs	r3, #0
 8016ff0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8016ff2:	68fb      	ldr	r3, [r7, #12]
}
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	3710      	adds	r7, #16
 8016ff8:	46bd      	mov	sp, r7
 8016ffa:	bd80      	pop	{r7, pc}

08016ffc <VL53L1CB_DeInit>:
  * @brief Deinitializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_DeInit(VL53L1CB_Object_t *pObj)
{
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	b084      	sub	sp, #16
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L1CB_ERROR;
 8017004:	f04f 33ff 	mov.w	r3, #4294967295
 8017008:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017010:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8017014:	2b01      	cmp	r3, #1
 8017016:	d111      	bne.n	801703c <VL53L1CB_DeInit+0x40>
  {
    /* De-initialize the vl53l1cb interface */
    if (pObj->IO.DeInit() != 0)
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	685b      	ldr	r3, [r3, #4]
 801701c:	4798      	blx	r3
 801701e:	4603      	mov	r3, r0
 8017020:	2b00      	cmp	r3, #0
 8017022:	d003      	beq.n	801702c <VL53L1CB_DeInit+0x30>
    {
      ret = VL53L1CB_ERROR;
 8017024:	f04f 33ff 	mov.w	r3, #4294967295
 8017028:	60fb      	str	r3, [r7, #12]
 801702a:	e007      	b.n	801703c <VL53L1CB_DeInit+0x40>
    }
    else
    {
      ret = VL53L1CB_OK;
 801702c:	2300      	movs	r3, #0
 801702e:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017036:	2200      	movs	r2, #0
 8017038:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    }
  }

  return ret;
 801703c:	68fb      	ldr	r3, [r7, #12]
}
 801703e:	4618      	mov	r0, r3
 8017040:	3710      	adds	r7, #16
 8017042:	46bd      	mov	sp, r7
 8017044:	bd80      	pop	{r7, pc}

08017046 <VL53L1CB_ReadID>:
  * @param pObj    vl53l1cb context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ReadID(VL53L1CB_Object_t *pObj, uint32_t *pId)
{
 8017046:	b580      	push	{r7, lr}
 8017048:	b084      	sub	sp, #16
 801704a:	af00      	add	r7, sp, #0
 801704c:	6078      	str	r0, [r7, #4]
 801704e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d002      	beq.n	801705c <VL53L1CB_ReadID+0x16>
 8017056:	683b      	ldr	r3, [r7, #0]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d103      	bne.n	8017064 <VL53L1CB_ReadID+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 801705c:	f06f 0301 	mvn.w	r3, #1
 8017060:	60fb      	str	r3, [r7, #12]
 8017062:	e00a      	b.n	801707a <VL53L1CB_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8017064:	683b      	ldr	r3, [r7, #0]
 8017066:	2200      	movs	r2, #0
 8017068:	601a      	str	r2, [r3, #0]
    ret = VL53L1_RdWord(pObj, VL53L1CB_ID_REG, (uint16_t *) pId);
 801706a:	683a      	ldr	r2, [r7, #0]
 801706c:	f240 110f 	movw	r1, #271	; 0x10f
 8017070:	6878      	ldr	r0, [r7, #4]
 8017072:	f7ff fdc1 	bl	8016bf8 <VL53L1_RdWord>
 8017076:	4603      	mov	r3, r0
 8017078:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801707a:	68fb      	ldr	r3, [r7, #12]
}
 801707c:	4618      	mov	r0, r3
 801707e:	3710      	adds	r7, #16
 8017080:	46bd      	mov	sp, r7
 8017082:	bd80      	pop	{r7, pc}

08017084 <VL53L1CB_GetCapabilities>:
  * @param pObj    vl53l1cb context object.
  * @param pCap    Pointer to the vl53l1cb capabilities.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetCapabilities(VL53L1CB_Object_t *pObj, VL53L1CB_Capabilities_t *pCap)
{
 8017084:	b480      	push	{r7}
 8017086:	b085      	sub	sp, #20
 8017088:	af00      	add	r7, sp, #0
 801708a:	6078      	str	r0, [r7, #4]
 801708c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	2b00      	cmp	r3, #0
 8017092:	d002      	beq.n	801709a <VL53L1CB_GetCapabilities+0x16>
 8017094:	683b      	ldr	r3, [r7, #0]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d103      	bne.n	80170a2 <VL53L1CB_GetCapabilities+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 801709a:	f06f 0301 	mvn.w	r3, #1
 801709e:	60fb      	str	r3, [r7, #12]
 80170a0:	e00d      	b.n	80170be <VL53L1CB_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 80170a2:	683b      	ldr	r3, [r7, #0]
 80170a4:	2201      	movs	r2, #1
 80170a6:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L1CB_NB_TARGET_PER_ZONE;
 80170a8:	683b      	ldr	r3, [r7, #0]
 80170aa:	2204      	movs	r2, #4
 80170ac:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 80170ae:	683b      	ldr	r3, [r7, #0]
 80170b0:	2201      	movs	r2, #1
 80170b2:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 80170b4:	683b      	ldr	r3, [r7, #0]
 80170b6:	2200      	movs	r2, #0
 80170b8:	60da      	str	r2, [r3, #12]

    ret = VL53L1CB_OK;
 80170ba:	2300      	movs	r3, #0
 80170bc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80170be:	68fb      	ldr	r3, [r7, #12]
}
 80170c0:	4618      	mov	r0, r3
 80170c2:	3714      	adds	r7, #20
 80170c4:	46bd      	mov	sp, r7
 80170c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ca:	4770      	bx	lr

080170cc <VL53L1CB_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L1CB the profile corresponds to the distance modes.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigProfile(VL53L1CB_Object_t *pObj, VL53L1CB_ProfileConfig_t *pConfig)
{
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b084      	sub	sp, #16
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	6078      	str	r0, [r7, #4]
 80170d4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d009      	beq.n	80170f0 <VL53L1CB_ConfigProfile+0x24>
 80170dc:	683b      	ldr	r3, [r7, #0]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d006      	beq.n	80170f0 <VL53L1CB_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 80170e2:	683b      	ldr	r3, [r7, #0]
 80170e4:	781b      	ldrb	r3, [r3, #0]
 80170e6:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L1CB_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 80170e8:	7afb      	ldrb	r3, [r7, #11]
 80170ea:	2b01      	cmp	r3, #1
 80170ec:	d103      	bne.n	80170f6 <VL53L1CB_ConfigProfile+0x2a>
 80170ee:	e00c      	b.n	801710a <VL53L1CB_ConfigProfile+0x3e>
    return VL53L1CB_INVALID_PARAM;
 80170f0:	f06f 0301 	mvn.w	r3, #1
 80170f4:	e043      	b.n	801717e <VL53L1CB_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 80170f6:	7afb      	ldrb	r3, [r7, #11]
 80170f8:	2b02      	cmp	r3, #2
 80170fa:	d006      	beq.n	801710a <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_MEDIUM) &&
 80170fc:	7afb      	ldrb	r3, [r7, #11]
 80170fe:	2b03      	cmp	r3, #3
 8017100:	d003      	beq.n	801710a <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_LONG))
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017102:	f06f 0301 	mvn.w	r3, #1
 8017106:	60fb      	str	r3, [r7, #12]
 8017108:	e038      	b.n	801717c <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetDistanceMode(pObj, ranging_profile) != VL53L1_ERROR_NONE)
 801710a:	7afb      	ldrb	r3, [r7, #11]
 801710c:	4619      	mov	r1, r3
 801710e:	6878      	ldr	r0, [r7, #4]
 8017110:	f7ed f970 	bl	80043f4 <VL53L1_SetDistanceMode>
 8017114:	4603      	mov	r3, r0
 8017116:	2b00      	cmp	r3, #0
 8017118:	d003      	beq.n	8017122 <VL53L1CB_ConfigProfile+0x56>
  {
    ret = VL53L1CB_ERROR;
 801711a:	f04f 33ff 	mov.w	r3, #4294967295
 801711e:	60fb      	str	r3, [r7, #12]
 8017120:	e02c      	b.n	801717c <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53L1_ERROR_NONE)
 8017122:	683b      	ldr	r3, [r7, #0]
 8017124:	685b      	ldr	r3, [r3, #4]
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8017126:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801712a:	fb02 f303 	mul.w	r3, r2, r3
 801712e:	4619      	mov	r1, r3
 8017130:	6878      	ldr	r0, [r7, #4]
 8017132:	f7ed f9ed 	bl	8004510 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8017136:	4603      	mov	r3, r0
 8017138:	2b00      	cmp	r3, #0
 801713a:	d003      	beq.n	8017144 <VL53L1CB_ConfigProfile+0x78>
  {
    ret = VL53L1CB_ERROR;
 801713c:	f04f 33ff 	mov.w	r3, #4294967295
 8017140:	60fb      	str	r3, [r7, #12]
 8017142:	e01b      	b.n	801717c <VL53L1CB_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8017144:	683b      	ldr	r3, [r7, #0]
 8017146:	68db      	ldr	r3, [r3, #12]
 8017148:	2b00      	cmp	r3, #0
 801714a:	bf14      	ite	ne
 801714c:	2301      	movne	r3, #1
 801714e:	2300      	moveq	r3, #0
 8017150:	b2db      	uxtb	r3, r3
 8017152:	461a      	mov	r2, r3
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801715a:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 801715e:	683b      	ldr	r3, [r7, #0]
 8017160:	691b      	ldr	r3, [r3, #16]
 8017162:	2b00      	cmp	r3, #0
 8017164:	bf14      	ite	ne
 8017166:	2301      	movne	r3, #1
 8017168:	2300      	moveq	r3, #0
 801716a:	b2db      	uxtb	r3, r3
 801716c:	461a      	mov	r2, r3
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017174:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d

    ret = VL53L1CB_OK;
 8017178:	2300      	movs	r3, #0
 801717a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801717c:	68fb      	ldr	r3, [r7, #12]
}
 801717e:	4618      	mov	r0, r3
 8017180:	3710      	adds	r7, #16
 8017182:	46bd      	mov	sp, r7
 8017184:	bd80      	pop	{r7, pc}

08017186 <VL53L1CB_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigROI(VL53L1CB_Object_t *pObj, VL53L1CB_ROIConfig_t *pROIConfig)
{
 8017186:	b580      	push	{r7, lr}
 8017188:	b094      	sub	sp, #80	; 0x50
 801718a:	af00      	add	r7, sp, #0
 801718c:	6078      	str	r0, [r7, #4]
 801718e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53L1_RoiConfig_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d002      	beq.n	801719c <VL53L1CB_ConfigROI+0x16>
 8017196:	683b      	ldr	r3, [r7, #0]
 8017198:	2b00      	cmp	r3, #0
 801719a:	d103      	bne.n	80171a4 <VL53L1CB_ConfigROI+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 801719c:	f06f 0301 	mvn.w	r3, #1
 80171a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80171a2:	e01c      	b.n	80171de <VL53L1CB_ConfigROI+0x58>
  }
  else
  {
    roi_settings.NumberOfRoi = 1;
 80171a4:	2301      	movs	r3, #1
 80171a6:	723b      	strb	r3, [r7, #8]
    roi_settings.UserRois[0].BotRightX = pROIConfig->BotRightX;
 80171a8:	683b      	ldr	r3, [r7, #0]
 80171aa:	789b      	ldrb	r3, [r3, #2]
 80171ac:	72fb      	strb	r3, [r7, #11]
    roi_settings.UserRois[0].BotRightY = pROIConfig->BotRightY;
 80171ae:	683b      	ldr	r3, [r7, #0]
 80171b0:	78db      	ldrb	r3, [r3, #3]
 80171b2:	733b      	strb	r3, [r7, #12]
    roi_settings.UserRois[0].TopLeftX = pROIConfig->TopLeftX;
 80171b4:	683b      	ldr	r3, [r7, #0]
 80171b6:	781b      	ldrb	r3, [r3, #0]
 80171b8:	727b      	strb	r3, [r7, #9]
    roi_settings.UserRois[0].TopLeftY = pROIConfig->TopLeftY;
 80171ba:	683b      	ldr	r3, [r7, #0]
 80171bc:	785b      	ldrb	r3, [r3, #1]
 80171be:	72bb      	strb	r3, [r7, #10]

    if (VL53L1_SetROI(pObj, &roi_settings) != VL53L1_ERROR_NONE)
 80171c0:	f107 0308 	add.w	r3, r7, #8
 80171c4:	4619      	mov	r1, r3
 80171c6:	6878      	ldr	r0, [r7, #4]
 80171c8:	f7ed fca6 	bl	8004b18 <VL53L1_SetROI>
 80171cc:	4603      	mov	r3, r0
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d003      	beq.n	80171da <VL53L1CB_ConfigROI+0x54>
    {
      ret = VL53L1CB_ERROR;
 80171d2:	f04f 33ff 	mov.w	r3, #4294967295
 80171d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80171d8:	e001      	b.n	80171de <VL53L1CB_ConfigROI+0x58>
    }
    else
    {
      ret = VL53L1CB_OK;
 80171da:	2300      	movs	r3, #0
 80171dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 80171de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80171e0:	4618      	mov	r0, r3
 80171e2:	3750      	adds	r7, #80	; 0x50
 80171e4:	46bd      	mov	sp, r7
 80171e6:	bd80      	pop	{r7, pc}

080171e8 <VL53L1CB_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigIT(VL53L1CB_Object_t *pObj, VL53L1CB_ITConfig_t *pITConfig)
{
 80171e8:	b480      	push	{r7}
 80171ea:	b083      	sub	sp, #12
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	6078      	str	r0, [r7, #4]
 80171f0:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L1CB_NOT_IMPLEMENTED;
 80171f2:	f06f 0303 	mvn.w	r3, #3
}
 80171f6:	4618      	mov	r0, r3
 80171f8:	370c      	adds	r7, #12
 80171fa:	46bd      	mov	sp, r7
 80171fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017200:	4770      	bx	lr

08017202 <VL53L1CB_GetDistance>:
  * @param pObj    vl53l1cb context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetDistance(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8017202:	b580      	push	{r7, lr}
 8017204:	b084      	sub	sp, #16
 8017206:	af00      	add	r7, sp, #0
 8017208:	6078      	str	r0, [r7, #4]
 801720a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d002      	beq.n	8017218 <VL53L1CB_GetDistance+0x16>
 8017212:	683b      	ldr	r3, [r7, #0]
 8017214:	2b00      	cmp	r3, #0
 8017216:	d103      	bne.n	8017220 <VL53L1CB_GetDistance+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017218:	f06f 0301 	mvn.w	r3, #1
 801721c:	60fb      	str	r3, [r7, #12]
 801721e:	e03a      	b.n	8017296 <VL53L1CB_GetDistance+0x94>
  }
  else if (pObj->IsRanging == 0U)
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017226:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 801722a:	2b00      	cmp	r3, #0
 801722c:	d103      	bne.n	8017236 <VL53L1CB_GetDistance+0x34>
  {
    ret = VL53L1CB_ERROR;
 801722e:	f04f 33ff 	mov.w	r3, #4294967295
 8017232:	60fb      	str	r3, [r7, #12]
 8017234:	e02f      	b.n	8017296 <VL53L1CB_GetDistance+0x94>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801723c:	f893 3a8a 	ldrb.w	r3, [r3, #2698]	; 0xa8a
 8017240:	2b01      	cmp	r3, #1
 8017242:	d106      	bne.n	8017252 <VL53L1CB_GetDistance+0x50>
    {
      ret = vl53l1cb_poll_for_measurement(pObj, VL53L1CB_POLL_TIMEOUT);
 8017244:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017248:	6878      	ldr	r0, [r7, #4]
 801724a:	f000 f92b 	bl	80174a4 <vl53l1cb_poll_for_measurement>
 801724e:	60f8      	str	r0, [r7, #12]
 8017250:	e004      	b.n	801725c <VL53L1CB_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l1cb_poll_for_measurement(pObj, 0U);
 8017252:	2100      	movs	r1, #0
 8017254:	6878      	ldr	r0, [r7, #4]
 8017256:	f000 f925 	bl	80174a4 <vl53l1cb_poll_for_measurement>
 801725a:	60f8      	str	r0, [r7, #12]
    }
    /* a new measure is available if no error is returned by poll function */
    if (ret == VL53L1CB_OK)
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d119      	bne.n	8017296 <VL53L1CB_GetDistance+0x94>
    {
      /* retrieve measurements and fill result structure */
      if (vl53l1cb_get_result(pObj, pResult) != VL53L1CB_OK)
 8017262:	6839      	ldr	r1, [r7, #0]
 8017264:	6878      	ldr	r0, [r7, #4]
 8017266:	f000 f94b 	bl	8017500 <vl53l1cb_get_result>
 801726a:	4603      	mov	r3, r0
 801726c:	2b00      	cmp	r3, #0
 801726e:	d003      	beq.n	8017278 <VL53L1CB_GetDistance+0x76>
      {
        ret = VL53L1CB_ERROR;
 8017270:	f04f 33ff 	mov.w	r3, #4294967295
 8017274:	60fb      	str	r3, [r7, #12]
 8017276:	e00e      	b.n	8017296 <VL53L1CB_GetDistance+0x94>
      }
      else if (pObj->IsContinuous == 1U)
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801727e:	f893 3a8b 	ldrb.w	r3, [r3, #2699]	; 0xa8b
 8017282:	2b01      	cmp	r3, #1
 8017284:	d105      	bne.n	8017292 <VL53L1CB_GetDistance+0x90>
      {
        /* trigger new measurement if device configured in continuous mode */
        ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 8017286:	6878      	ldr	r0, [r7, #4]
 8017288:	f7ed fdde 	bl	8004e48 <VL53L1_ClearInterruptAndStartMeasurement>
 801728c:	4603      	mov	r3, r0
 801728e:	60fb      	str	r3, [r7, #12]
 8017290:	e001      	b.n	8017296 <VL53L1CB_GetDistance+0x94>
      }
      else
      {
        ret = VL53L1CB_OK;
 8017292:	2300      	movs	r3, #0
 8017294:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  
  return ret;
 8017296:	68fb      	ldr	r3, [r7, #12]
}
 8017298:	4618      	mov	r0, r3
 801729a:	3710      	adds	r7, #16
 801729c:	46bd      	mov	sp, r7
 801729e:	bd80      	pop	{r7, pc}

080172a0 <VL53L1CB_Start>:
  * @param pObj    vl53l1cb context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Start(VL53L1CB_Object_t *pObj, uint32_t Mode)
{
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b084      	sub	sp, #16
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	6078      	str	r0, [r7, #4]
 80172a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d103      	bne.n	80172b8 <VL53L1CB_Start+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80172b0:	f06f 0301 	mvn.w	r3, #1
 80172b4:	60fb      	str	r3, [r7, #12]
 80172b6:	e068      	b.n	801738a <VL53L1CB_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80172be:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 80172c2:	2b01      	cmp	r3, #1
 80172c4:	d103      	bne.n	80172ce <VL53L1CB_Start+0x2e>
  {
    ret = VL53L1CB_ERROR;
 80172c6:	f04f 33ff 	mov.w	r3, #4294967295
 80172ca:	60fb      	str	r3, [r7, #12]
 80172cc:	e05d      	b.n	801738a <VL53L1CB_Start+0xea>
  }
  else if (VL53L1_StartMeasurement(pObj) == VL53L1_ERROR_NONE)
 80172ce:	6878      	ldr	r0, [r7, #4]
 80172d0:	f7ed fcf6 	bl	8004cc0 <VL53L1_StartMeasurement>
 80172d4:	4603      	mov	r3, r0
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d154      	bne.n	8017384 <VL53L1CB_Start+0xe4>
  {
    pObj->IsRanging = 1;
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80172e0:	2201      	movs	r2, #1
 80172e2:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 80172e6:	2300      	movs	r3, #0
 80172e8:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 80172ea:	683b      	ldr	r3, [r7, #0]
 80172ec:	3b01      	subs	r3, #1
 80172ee:	2b03      	cmp	r3, #3
 80172f0:	d83e      	bhi.n	8017370 <VL53L1CB_Start+0xd0>
 80172f2:	a201      	add	r2, pc, #4	; (adr r2, 80172f8 <VL53L1CB_Start+0x58>)
 80172f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172f8:	08017309 	.word	0x08017309
 80172fc:	08017323 	.word	0x08017323
 8017300:	0801733d 	.word	0x0801733d
 8017304:	08017357 	.word	0x08017357
    {
    case VL53L1CB_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801730e:	2201      	movs	r2, #1
 8017310:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801731a:	2201      	movs	r2, #1
 801731c:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8017320:	e033      	b.n	801738a <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017328:	2200      	movs	r2, #0
 801732a:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017334:	2201      	movs	r2, #1
 8017336:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 801733a:	e026      	b.n	801738a <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017342:	2201      	movs	r2, #1
 8017344:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801734e:	2200      	movs	r2, #0
 8017350:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8017354:	e019      	b.n	801738a <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801735c:	2200      	movs	r2, #0
 801735e:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017368:	2200      	movs	r2, #0
 801736a:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 801736e:	e00c      	b.n	801738a <VL53L1CB_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017376:	2200      	movs	r2, #0
 8017378:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
      ret = VL53L1CB_INVALID_PARAM;
 801737c:	f06f 0301 	mvn.w	r3, #1
 8017380:	60fb      	str	r3, [r7, #12]
      break;
 8017382:	e002      	b.n	801738a <VL53L1CB_Start+0xea>
    }
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8017384:	f04f 33ff 	mov.w	r3, #4294967295
 8017388:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801738a:	68fb      	ldr	r3, [r7, #12]
}
 801738c:	4618      	mov	r0, r3
 801738e:	3710      	adds	r7, #16
 8017390:	46bd      	mov	sp, r7
 8017392:	bd80      	pop	{r7, pc}

08017394 <VL53L1CB_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Stop(VL53L1CB_Object_t *pObj)
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b084      	sub	sp, #16
 8017398:	af00      	add	r7, sp, #0
 801739a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d103      	bne.n	80173aa <VL53L1CB_Stop+0x16>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80173a2:	f06f 0301 	mvn.w	r3, #1
 80173a6:	60fb      	str	r3, [r7, #12]
 80173a8:	e01c      	b.n	80173e4 <VL53L1CB_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80173b0:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d103      	bne.n	80173c0 <VL53L1CB_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L1CB_ERROR;
 80173b8:	f04f 33ff 	mov.w	r3, #4294967295
 80173bc:	60fb      	str	r3, [r7, #12]
 80173be:	e011      	b.n	80173e4 <VL53L1CB_Stop+0x50>
  }
  else if (VL53L1_StopMeasurement(pObj) == VL53L1_ERROR_NONE)
 80173c0:	6878      	ldr	r0, [r7, #4]
 80173c2:	f7ed fd1d 	bl	8004e00 <VL53L1_StopMeasurement>
 80173c6:	4603      	mov	r3, r0
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d108      	bne.n	80173de <VL53L1CB_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80173d2:	2200      	movs	r2, #0
 80173d4:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 80173d8:	2300      	movs	r3, #0
 80173da:	60fb      	str	r3, [r7, #12]
 80173dc:	e002      	b.n	80173e4 <VL53L1CB_Stop+0x50>
  }
  else
  {
    ret = VL53L1CB_ERROR;
 80173de:	f04f 33ff 	mov.w	r3, #4294967295
 80173e2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80173e4:	68fb      	ldr	r3, [r7, #12]
}
 80173e6:	4618      	mov	r0, r3
 80173e8:	3710      	adds	r7, #16
 80173ea:	46bd      	mov	sp, r7
 80173ec:	bd80      	pop	{r7, pc}

080173ee <VL53L1CB_SetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param Address     New I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetAddress(VL53L1CB_Object_t *pObj, uint32_t Address)
{
 80173ee:	b580      	push	{r7, lr}
 80173f0:	b084      	sub	sp, #16
 80173f2:	af00      	add	r7, sp, #0
 80173f4:	6078      	str	r0, [r7, #4]
 80173f6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d103      	bne.n	8017406 <VL53L1CB_SetAddress+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80173fe:	f06f 0301 	mvn.w	r3, #1
 8017402:	60fb      	str	r3, [r7, #12]
 8017404:	e012      	b.n	801742c <VL53L1CB_SetAddress+0x3e>
  }
  else if (VL53L1_SetDeviceAddress(pObj, (uint8_t)Address) != VL53L1_ERROR_NONE)
 8017406:	683b      	ldr	r3, [r7, #0]
 8017408:	b2db      	uxtb	r3, r3
 801740a:	4619      	mov	r1, r3
 801740c:	6878      	ldr	r0, [r7, #4]
 801740e:	f7ec fdcf 	bl	8003fb0 <VL53L1_SetDeviceAddress>
 8017412:	4603      	mov	r3, r0
 8017414:	2b00      	cmp	r3, #0
 8017416:	d003      	beq.n	8017420 <VL53L1CB_SetAddress+0x32>
  {
    ret = VL53L1CB_ERROR;
 8017418:	f04f 33ff 	mov.w	r3, #4294967295
 801741c:	60fb      	str	r3, [r7, #12]
 801741e:	e005      	b.n	801742c <VL53L1CB_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8017420:	683b      	ldr	r3, [r7, #0]
 8017422:	b29a      	uxth	r2, r3
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	811a      	strh	r2, [r3, #8]
    ret = VL53L1CB_OK;
 8017428:	2300      	movs	r3, #0
 801742a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801742c:	68fb      	ldr	r3, [r7, #12]
}
 801742e:	4618      	mov	r0, r3
 8017430:	3710      	adds	r7, #16
 8017432:	46bd      	mov	sp, r7
 8017434:	bd80      	pop	{r7, pc}

08017436 <VL53L1CB_GetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetAddress(VL53L1CB_Object_t *pObj, uint32_t *pAddress)
{
 8017436:	b480      	push	{r7}
 8017438:	b085      	sub	sp, #20
 801743a:	af00      	add	r7, sp, #0
 801743c:	6078      	str	r0, [r7, #4]
 801743e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d002      	beq.n	801744c <VL53L1CB_GetAddress+0x16>
 8017446:	683b      	ldr	r3, [r7, #0]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d103      	bne.n	8017454 <VL53L1CB_GetAddress+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 801744c:	f06f 0301 	mvn.w	r3, #1
 8017450:	60fb      	str	r3, [r7, #12]
 8017452:	e006      	b.n	8017462 <VL53L1CB_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	891b      	ldrh	r3, [r3, #8]
 8017458:	461a      	mov	r2, r3
 801745a:	683b      	ldr	r3, [r7, #0]
 801745c:	601a      	str	r2, [r3, #0]
    ret = VL53L1CB_OK;
 801745e:	2300      	movs	r3, #0
 8017460:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8017462:	68fb      	ldr	r3, [r7, #12]
}
 8017464:	4618      	mov	r0, r3
 8017466:	3714      	adds	r7, #20
 8017468:	46bd      	mov	sp, r7
 801746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746e:	4770      	bx	lr

08017470 <VL53L1CB_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetPowerMode(VL53L1CB_Object_t *pObj, uint32_t PowerMode)
{
 8017470:	b480      	push	{r7}
 8017472:	b083      	sub	sp, #12
 8017474:	af00      	add	r7, sp, #0
 8017476:	6078      	str	r0, [r7, #4]
 8017478:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 801747a:	f06f 0303 	mvn.w	r3, #3
}
 801747e:	4618      	mov	r0, r3
 8017480:	370c      	adds	r7, #12
 8017482:	46bd      	mov	sp, r7
 8017484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017488:	4770      	bx	lr

0801748a <VL53L1CB_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetPowerMode(VL53L1CB_Object_t *pObj, uint32_t *pPowerMode)
{
 801748a:	b480      	push	{r7}
 801748c:	b083      	sub	sp, #12
 801748e:	af00      	add	r7, sp, #0
 8017490:	6078      	str	r0, [r7, #4]
 8017492:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 8017494:	f06f 0303 	mvn.w	r3, #3
}
 8017498:	4618      	mov	r0, r3
 801749a:	370c      	adds	r7, #12
 801749c:	46bd      	mov	sp, r7
 801749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a2:	4770      	bx	lr

080174a4 <vl53l1cb_poll_for_measurement>:
/** @defgroup VL53L1CB_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l1cb_poll_for_measurement(VL53L1CB_Object_t *pObj, uint32_t Timeout)
{
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b084      	sub	sp, #16
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	6078      	str	r0, [r7, #4]
 80174ac:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 80174ae:	2300      	movs	r3, #0
 80174b0:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d102      	bne.n	80174be <vl53l1cb_poll_for_measurement+0x1a>
  {
    return VL53L1CB_INVALID_PARAM;
 80174b8:	f06f 0301 	mvn.w	r3, #1
 80174bc:	e01b      	b.n	80174f6 <vl53l1cb_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	695b      	ldr	r3, [r3, #20]
 80174c2:	4798      	blx	r3
 80174c4:	4603      	mov	r3, r0
 80174c6:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 80174c8:	f107 030b 	add.w	r3, r7, #11
 80174cc:	4619      	mov	r1, r3
 80174ce:	6878      	ldr	r0, [r7, #4]
 80174d0:	f7ed fcd0 	bl	8004e74 <VL53L1_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 80174d4:	7afb      	ldrb	r3, [r7, #11]
 80174d6:	2b01      	cmp	r3, #1
 80174d8:	d101      	bne.n	80174de <vl53l1cb_poll_for_measurement+0x3a>
    {
      return VL53L1CB_OK;
 80174da:	2300      	movs	r3, #0
 80174dc:	e00b      	b.n	80174f6 <vl53l1cb_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	695b      	ldr	r3, [r3, #20]
 80174e2:	4798      	blx	r3
 80174e4:	4603      	mov	r3, r0
 80174e6:	461a      	mov	r2, r3
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	1ad3      	subs	r3, r2, r3
 80174ec:	683a      	ldr	r2, [r7, #0]
 80174ee:	429a      	cmp	r2, r3
 80174f0:	d8ea      	bhi.n	80174c8 <vl53l1cb_poll_for_measurement+0x24>

  return VL53L1CB_TIMEOUT;
 80174f2:	f06f 0302 	mvn.w	r3, #2
}
 80174f6:	4618      	mov	r0, r3
 80174f8:	3710      	adds	r7, #16
 80174fa:	46bd      	mov	sp, r7
 80174fc:	bd80      	pop	{r7, pc}
	...

08017500 <vl53l1cb_get_result>:

static int32_t vl53l1cb_get_result(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8017500:	b590      	push	{r4, r7, lr}
 8017502:	b089      	sub	sp, #36	; 0x24
 8017504:	af00      	add	r7, sp, #0
 8017506:	6078      	str	r0, [r7, #4]
 8017508:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  static VL53L1_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d002      	beq.n	8017516 <vl53l1cb_get_result+0x16>
 8017510:	683b      	ldr	r3, [r7, #0]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d103      	bne.n	801751e <vl53l1cb_get_result+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017516:	f06f 0301 	mvn.w	r3, #1
 801751a:	61fb      	str	r3, [r7, #28]
 801751c:	e100      	b.n	8017720 <vl53l1cb_get_result+0x220>
  }
  else if (VL53L1_GetMultiRangingData(pObj, &data) != VL53L1_ERROR_NONE)
 801751e:	4983      	ldr	r1, [pc, #524]	; (801772c <vl53l1cb_get_result+0x22c>)
 8017520:	6878      	ldr	r0, [r7, #4]
 8017522:	f7ee fb85 	bl	8005c30 <VL53L1_GetMultiRangingData>
 8017526:	4603      	mov	r3, r0
 8017528:	2b00      	cmp	r3, #0
 801752a:	d003      	beq.n	8017534 <vl53l1cb_get_result+0x34>
  {
    ret = VL53L1CB_ERROR;
 801752c:	f04f 33ff 	mov.w	r3, #4294967295
 8017530:	61fb      	str	r3, [r7, #28]
 8017532:	e0f5      	b.n	8017720 <vl53l1cb_get_result+0x220>
  }
  else
  {
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8017534:	2300      	movs	r3, #0
 8017536:	76fb      	strb	r3, [r7, #27]
 8017538:	e0ec      	b.n	8017714 <vl53l1cb_get_result+0x214>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 801753a:	4b7c      	ldr	r3, [pc, #496]	; (801772c <vl53l1cb_get_result+0x22c>)
 801753c:	799b      	ldrb	r3, [r3, #6]
 801753e:	7efa      	ldrb	r2, [r7, #27]
 8017540:	4618      	mov	r0, r3
 8017542:	6839      	ldr	r1, [r7, #0]
 8017544:	4613      	mov	r3, r2
 8017546:	011b      	lsls	r3, r3, #4
 8017548:	4413      	add	r3, r2
 801754a:	009b      	lsls	r3, r3, #2
 801754c:	440b      	add	r3, r1
 801754e:	3304      	adds	r3, #4
 8017550:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8017552:	2300      	movs	r3, #0
 8017554:	76bb      	strb	r3, [r7, #26]
 8017556:	e0d4      	b.n	8017702 <vl53l1cb_get_result+0x202>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8017558:	7eba      	ldrb	r2, [r7, #26]
 801755a:	4974      	ldr	r1, [pc, #464]	; (801772c <vl53l1cb_get_result+0x22c>)
 801755c:	4613      	mov	r3, r2
 801755e:	00db      	lsls	r3, r3, #3
 8017560:	1a9b      	subs	r3, r3, r2
 8017562:	009b      	lsls	r3, r3, #2
 8017564:	440b      	add	r3, r1
 8017566:	331c      	adds	r3, #28
 8017568:	f9b3 3000 	ldrsh.w	r3, [r3]
 801756c:	2b00      	cmp	r3, #0
 801756e:	da0b      	bge.n	8017588 <vl53l1cb_get_result+0x88>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8017570:	7efa      	ldrb	r2, [r7, #27]
 8017572:	7eb8      	ldrb	r0, [r7, #26]
 8017574:	6839      	ldr	r1, [r7, #0]
 8017576:	4613      	mov	r3, r2
 8017578:	011b      	lsls	r3, r3, #4
 801757a:	4413      	add	r3, r2
 801757c:	4403      	add	r3, r0
 801757e:	009b      	lsls	r3, r3, #2
 8017580:	440b      	add	r3, r1
 8017582:	2200      	movs	r2, #0
 8017584:	609a      	str	r2, [r3, #8]
 8017586:	e014      	b.n	80175b2 <vl53l1cb_get_result+0xb2>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8017588:	7eba      	ldrb	r2, [r7, #26]
 801758a:	4968      	ldr	r1, [pc, #416]	; (801772c <vl53l1cb_get_result+0x22c>)
 801758c:	4613      	mov	r3, r2
 801758e:	00db      	lsls	r3, r3, #3
 8017590:	1a9b      	subs	r3, r3, r2
 8017592:	009b      	lsls	r3, r3, #2
 8017594:	440b      	add	r3, r1
 8017596:	331c      	adds	r3, #28
 8017598:	f9b3 3000 	ldrsh.w	r3, [r3]
 801759c:	7efa      	ldrb	r2, [r7, #27]
 801759e:	7eb8      	ldrb	r0, [r7, #26]
 80175a0:	461c      	mov	r4, r3
 80175a2:	6839      	ldr	r1, [r7, #0]
 80175a4:	4613      	mov	r3, r2
 80175a6:	011b      	lsls	r3, r3, #4
 80175a8:	4413      	add	r3, r2
 80175aa:	4403      	add	r3, r0
 80175ac:	009b      	lsls	r3, r3, #2
 80175ae:	440b      	add	r3, r1
 80175b0:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80175b8:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 80175bc:	2b01      	cmp	r3, #1
 80175be:	d132      	bne.n	8017626 <vl53l1cb_get_result+0x126>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 80175c0:	7eba      	ldrb	r2, [r7, #26]
 80175c2:	495a      	ldr	r1, [pc, #360]	; (801772c <vl53l1cb_get_result+0x22c>)
 80175c4:	4613      	mov	r3, r2
 80175c6:	00db      	lsls	r3, r3, #3
 80175c8:	1a9b      	subs	r3, r3, r2
 80175ca:	009b      	lsls	r3, r3, #2
 80175cc:	440b      	add	r3, r1
 80175ce:	3314      	adds	r3, #20
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	ee07 3a90 	vmov	s15, r3
 80175d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80175da:	eddf 6a55 	vldr	s13, [pc, #340]	; 8017730 <vl53l1cb_get_result+0x230>
 80175de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80175e2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8017734 <vl53l1cb_get_result+0x234>
 80175e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80175ea:	edc7 7a05 	vstr	s15, [r7, #20]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80175ee:	4b4f      	ldr	r3, [pc, #316]	; (801772c <vl53l1cb_get_result+0x22c>)
 80175f0:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80175f4:	0a1b      	lsrs	r3, r3, #8
 80175f6:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 80175f8:	8a7b      	ldrh	r3, [r7, #18]
 80175fa:	ee07 3a90 	vmov	s15, r3
 80175fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017602:	7efa      	ldrb	r2, [r7, #27]
 8017604:	7eb8      	ldrb	r0, [r7, #26]
 8017606:	edd7 6a05 	vldr	s13, [r7, #20]
 801760a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801760e:	6839      	ldr	r1, [r7, #0]
 8017610:	4613      	mov	r3, r2
 8017612:	011b      	lsls	r3, r3, #4
 8017614:	4413      	add	r3, r2
 8017616:	4403      	add	r3, r0
 8017618:	3308      	adds	r3, #8
 801761a:	009b      	lsls	r3, r3, #2
 801761c:	440b      	add	r3, r1
 801761e:	3308      	adds	r3, #8
 8017620:	edc3 7a00 	vstr	s15, [r3]
 8017624:	e00d      	b.n	8017642 <vl53l1cb_get_result+0x142>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8017626:	7efa      	ldrb	r2, [r7, #27]
 8017628:	7eb8      	ldrb	r0, [r7, #26]
 801762a:	6839      	ldr	r1, [r7, #0]
 801762c:	4613      	mov	r3, r2
 801762e:	011b      	lsls	r3, r3, #4
 8017630:	4413      	add	r3, r2
 8017632:	4403      	add	r3, r0
 8017634:	3308      	adds	r3, #8
 8017636:	009b      	lsls	r3, r3, #2
 8017638:	440b      	add	r3, r1
 801763a:	3308      	adds	r3, #8
 801763c:	f04f 0200 	mov.w	r2, #0
 8017640:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017648:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 801764c:	2b01      	cmp	r3, #1
 801764e:	d132      	bne.n	80176b6 <vl53l1cb_get_result+0x1b6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8017650:	7eba      	ldrb	r2, [r7, #26]
 8017652:	4936      	ldr	r1, [pc, #216]	; (801772c <vl53l1cb_get_result+0x22c>)
 8017654:	4613      	mov	r3, r2
 8017656:	00db      	lsls	r3, r3, #3
 8017658:	1a9b      	subs	r3, r3, r2
 801765a:	009b      	lsls	r3, r3, #2
 801765c:	440b      	add	r3, r1
 801765e:	3310      	adds	r3, #16
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	ee07 3a90 	vmov	s15, r3
 8017666:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801766a:	eddf 6a31 	vldr	s13, [pc, #196]	; 8017730 <vl53l1cb_get_result+0x230>
 801766e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017672:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8017734 <vl53l1cb_get_result+0x234>
 8017676:	ee67 7a87 	vmul.f32	s15, s15, s14
 801767a:	edc7 7a03 	vstr	s15, [r7, #12]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 801767e:	4b2b      	ldr	r3, [pc, #172]	; (801772c <vl53l1cb_get_result+0x22c>)
 8017680:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8017684:	0a1b      	lsrs	r3, r3, #8
 8017686:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 8017688:	8a7b      	ldrh	r3, [r7, #18]
 801768a:	ee07 3a90 	vmov	s15, r3
 801768e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017692:	7efa      	ldrb	r2, [r7, #27]
 8017694:	7eb8      	ldrb	r0, [r7, #26]
 8017696:	edd7 6a03 	vldr	s13, [r7, #12]
 801769a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801769e:	6839      	ldr	r1, [r7, #0]
 80176a0:	4613      	mov	r3, r2
 80176a2:	011b      	lsls	r3, r3, #4
 80176a4:	4413      	add	r3, r2
 80176a6:	4403      	add	r3, r0
 80176a8:	330c      	adds	r3, #12
 80176aa:	009b      	lsls	r3, r3, #2
 80176ac:	440b      	add	r3, r1
 80176ae:	3308      	adds	r3, #8
 80176b0:	edc3 7a00 	vstr	s15, [r3]
 80176b4:	e00d      	b.n	80176d2 <vl53l1cb_get_result+0x1d2>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 80176b6:	7efa      	ldrb	r2, [r7, #27]
 80176b8:	7eb8      	ldrb	r0, [r7, #26]
 80176ba:	6839      	ldr	r1, [r7, #0]
 80176bc:	4613      	mov	r3, r2
 80176be:	011b      	lsls	r3, r3, #4
 80176c0:	4413      	add	r3, r2
 80176c2:	4403      	add	r3, r0
 80176c4:	330c      	adds	r3, #12
 80176c6:	009b      	lsls	r3, r3, #2
 80176c8:	440b      	add	r3, r1
 80176ca:	3308      	adds	r3, #8
 80176cc:	f04f 0200 	mov.w	r2, #0
 80176d0:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 80176d2:	7eba      	ldrb	r2, [r7, #26]
 80176d4:	4915      	ldr	r1, [pc, #84]	; (801772c <vl53l1cb_get_result+0x22c>)
 80176d6:	4613      	mov	r3, r2
 80176d8:	00db      	lsls	r3, r3, #3
 80176da:	1a9b      	subs	r3, r3, r2
 80176dc:	009b      	lsls	r3, r3, #2
 80176de:	440b      	add	r3, r1
 80176e0:	331f      	adds	r3, #31
 80176e2:	781b      	ldrb	r3, [r3, #0]
 80176e4:	7efa      	ldrb	r2, [r7, #27]
 80176e6:	7eb8      	ldrb	r0, [r7, #26]
 80176e8:	461c      	mov	r4, r3
 80176ea:	6839      	ldr	r1, [r7, #0]
 80176ec:	4613      	mov	r3, r2
 80176ee:	011b      	lsls	r3, r3, #4
 80176f0:	4413      	add	r3, r2
 80176f2:	4403      	add	r3, r0
 80176f4:	3304      	adds	r3, #4
 80176f6:	009b      	lsls	r3, r3, #2
 80176f8:	440b      	add	r3, r1
 80176fa:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 80176fc:	7ebb      	ldrb	r3, [r7, #26]
 80176fe:	3301      	adds	r3, #1
 8017700:	76bb      	strb	r3, [r7, #26]
 8017702:	4b0a      	ldr	r3, [pc, #40]	; (801772c <vl53l1cb_get_result+0x22c>)
 8017704:	799b      	ldrb	r3, [r3, #6]
 8017706:	7eba      	ldrb	r2, [r7, #26]
 8017708:	429a      	cmp	r2, r3
 801770a:	f4ff af25 	bcc.w	8017558 <vl53l1cb_get_result+0x58>
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 801770e:	7efb      	ldrb	r3, [r7, #27]
 8017710:	3301      	adds	r3, #1
 8017712:	76fb      	strb	r3, [r7, #27]
 8017714:	7efb      	ldrb	r3, [r7, #27]
 8017716:	2b00      	cmp	r3, #0
 8017718:	f43f af0f 	beq.w	801753a <vl53l1cb_get_result+0x3a>
      }
    }

    ret = VL53L1CB_OK;
 801771c:	2300      	movs	r3, #0
 801771e:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8017720:	69fb      	ldr	r3, [r7, #28]
}
 8017722:	4618      	mov	r0, r3
 8017724:	3724      	adds	r7, #36	; 0x24
 8017726:	46bd      	mov	sp, r7
 8017728:	bd90      	pop	{r4, r7, pc}
 801772a:	bf00      	nop
 801772c:	20008698 	.word	0x20008698
 8017730:	47800000 	.word	0x47800000
 8017734:	447a0000 	.word	0x447a0000

08017738 <LL_AHB2_GRP1_EnableClock>:
{
 8017738:	b480      	push	{r7}
 801773a:	b085      	sub	sp, #20
 801773c:	af00      	add	r7, sp, #0
 801773e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8017740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017744:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	4313      	orrs	r3, r2
 801774e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8017750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017754:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	4013      	ands	r3, r2
 801775a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801775c:	68fb      	ldr	r3, [r7, #12]
}
 801775e:	bf00      	nop
 8017760:	3714      	adds	r7, #20
 8017762:	46bd      	mov	sp, r7
 8017764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017768:	4770      	bx	lr

0801776a <LL_APB2_GRP1_EnableClock>:
{
 801776a:	b480      	push	{r7}
 801776c:	b085      	sub	sp, #20
 801776e:	af00      	add	r7, sp, #0
 8017770:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8017772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017776:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8017778:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	4313      	orrs	r3, r2
 8017780:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8017782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017786:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	4013      	ands	r3, r2
 801778c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801778e:	68fb      	ldr	r3, [r7, #12]
}
 8017790:	bf00      	nop
 8017792:	3714      	adds	r7, #20
 8017794:	46bd      	mov	sp, r7
 8017796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779a:	4770      	bx	lr

0801779c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 801779c:	b580      	push	{r7, lr}
 801779e:	b084      	sub	sp, #16
 80177a0:	af00      	add	r7, sp, #0
 80177a2:	4603      	mov	r3, r0
 80177a4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80177a6:	2300      	movs	r3, #0
 80177a8:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80177aa:	79fb      	ldrb	r3, [r7, #7]
 80177ac:	2b01      	cmp	r3, #1
 80177ae:	d903      	bls.n	80177b8 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80177b0:	f06f 0301 	mvn.w	r3, #1
 80177b4:	60fb      	str	r3, [r7, #12]
 80177b6:	e022      	b.n	80177fe <BSP_COM_Init+0x62>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80177b8:	79fa      	ldrb	r2, [r7, #7]
 80177ba:	79fb      	ldrb	r3, [r7, #7]
 80177bc:	4912      	ldr	r1, [pc, #72]	; (8017808 <BSP_COM_Init+0x6c>)
 80177be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80177c2:	4912      	ldr	r1, [pc, #72]	; (801780c <BSP_COM_Init+0x70>)
 80177c4:	2094      	movs	r0, #148	; 0x94
 80177c6:	fb00 f303 	mul.w	r3, r0, r3
 80177ca:	440b      	add	r3, r1
 80177cc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 80177ce:	79fb      	ldrb	r3, [r7, #7]
 80177d0:	2294      	movs	r2, #148	; 0x94
 80177d2:	fb02 f303 	mul.w	r3, r2, r3
 80177d6:	4a0d      	ldr	r2, [pc, #52]	; (801780c <BSP_COM_Init+0x70>)
 80177d8:	4413      	add	r3, r2
 80177da:	4618      	mov	r0, r3
 80177dc:	f000 f86a 	bl	80178b4 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 80177e0:	79fb      	ldrb	r3, [r7, #7]
 80177e2:	2294      	movs	r2, #148	; 0x94
 80177e4:	fb02 f303 	mul.w	r3, r2, r3
 80177e8:	4a08      	ldr	r2, [pc, #32]	; (801780c <BSP_COM_Init+0x70>)
 80177ea:	4413      	add	r3, r2
 80177ec:	4618      	mov	r0, r3
 80177ee:	f000 f80f 	bl	8017810 <MX_USART1_UART_Init>
 80177f2:	4603      	mov	r3, r0
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d002      	beq.n	80177fe <BSP_COM_Init+0x62>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80177f8:	f06f 0303 	mvn.w	r3, #3
 80177fc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80177fe:	68fb      	ldr	r3, [r7, #12]
}
 8017800:	4618      	mov	r0, r3
 8017802:	3710      	adds	r7, #16
 8017804:	46bd      	mov	sp, r7
 8017806:	bd80      	pop	{r7, pc}
 8017808:	20000080 	.word	0x20000080
 801780c:	20008718 	.word	0x20008718

08017810 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8017810:	b580      	push	{r7, lr}
 8017812:	b084      	sub	sp, #16
 8017814:	af00      	add	r7, sp, #0
 8017816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8017818:	2300      	movs	r3, #0
 801781a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	4a24      	ldr	r2, [pc, #144]	; (80178b0 <MX_USART1_UART_Init+0xa0>)
 8017820:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8017828:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_7B;
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017830:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	2200      	movs	r2, #0
 8017836:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	2200      	movs	r2, #0
 801783c:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	220c      	movs	r2, #12
 8017842:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	2200      	movs	r2, #0
 8017848:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	2200      	movs	r2, #0
 801784e:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	2200      	movs	r2, #0
 8017854:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	2200      	movs	r2, #0
 801785a:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	2200      	movs	r2, #0
 8017860:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8017862:	6878      	ldr	r0, [r7, #4]
 8017864:	f003 fdc2 	bl	801b3ec <HAL_UART_Init>
 8017868:	4603      	mov	r3, r0
 801786a:	2b00      	cmp	r3, #0
 801786c:	d001      	beq.n	8017872 <MX_USART1_UART_Init+0x62>
  {
    ret = HAL_ERROR;
 801786e:	2301      	movs	r3, #1
 8017870:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017872:	2100      	movs	r1, #0
 8017874:	6878      	ldr	r0, [r7, #4]
 8017876:	f005 f8e7 	bl	801ca48 <HAL_UARTEx_SetTxFifoThreshold>
 801787a:	4603      	mov	r3, r0
 801787c:	2b00      	cmp	r3, #0
 801787e:	d001      	beq.n	8017884 <MX_USART1_UART_Init+0x74>
  {
    ret = HAL_ERROR;
 8017880:	2301      	movs	r3, #1
 8017882:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017884:	2100      	movs	r1, #0
 8017886:	6878      	ldr	r0, [r7, #4]
 8017888:	f005 f91c 	bl	801cac4 <HAL_UARTEx_SetRxFifoThreshold>
 801788c:	4603      	mov	r3, r0
 801788e:	2b00      	cmp	r3, #0
 8017890:	d001      	beq.n	8017896 <MX_USART1_UART_Init+0x86>
  {
    ret = HAL_ERROR;
 8017892:	2301      	movs	r3, #1
 8017894:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8017896:	6878      	ldr	r0, [r7, #4]
 8017898:	f005 f89d 	bl	801c9d6 <HAL_UARTEx_DisableFifoMode>
 801789c:	4603      	mov	r3, r0
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d001      	beq.n	80178a6 <MX_USART1_UART_Init+0x96>
  {
    ret = HAL_ERROR;
 80178a2:	2301      	movs	r3, #1
 80178a4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80178a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80178a8:	4618      	mov	r0, r3
 80178aa:	3710      	adds	r7, #16
 80178ac:	46bd      	mov	sp, r7
 80178ae:	bd80      	pop	{r7, pc}
 80178b0:	40013800 	.word	0x40013800

080178b4 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b09c      	sub	sp, #112	; 0x70
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80178bc:	f107 030c 	add.w	r3, r7, #12
 80178c0:	2250      	movs	r2, #80	; 0x50
 80178c2:	2100      	movs	r1, #0
 80178c4:	4618      	mov	r0, r3
 80178c6:	f006 fd77 	bl	801e3b8 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80178ca:	2301      	movs	r3, #1
 80178cc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80178ce:	2300      	movs	r3, #0
 80178d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80178d2:	f107 030c 	add.w	r3, r7, #12
 80178d6:	4618      	mov	r0, r3
 80178d8:	f003 fa20 	bl	801ad1c <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 80178dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80178e0:	f7ff ff43 	bl	801776a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80178e4:	2002      	movs	r0, #2
 80178e6:	f7ff ff27 	bl	8017738 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 80178ea:	2340      	movs	r3, #64	; 0x40
 80178ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80178ee:	2302      	movs	r3, #2
 80178f0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80178f2:	2301      	movs	r3, #1
 80178f4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80178f6:	2300      	movs	r3, #0
 80178f8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 80178fa:	2307      	movs	r3, #7
 80178fc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 80178fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8017902:	4619      	mov	r1, r3
 8017904:	480b      	ldr	r0, [pc, #44]	; (8017934 <USART1_MspInit+0x80>)
 8017906:	f000 fd03 	bl	8018310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 801790a:	2380      	movs	r3, #128	; 0x80
 801790c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801790e:	2302      	movs	r3, #2
 8017910:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017912:	2301      	movs	r3, #1
 8017914:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017916:	2300      	movs	r3, #0
 8017918:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 801791a:	2307      	movs	r3, #7
 801791c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 801791e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8017922:	4619      	mov	r1, r3
 8017924:	4803      	ldr	r0, [pc, #12]	; (8017934 <USART1_MspInit+0x80>)
 8017926:	f000 fcf3 	bl	8018310 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 801792a:	bf00      	nop
 801792c:	3770      	adds	r7, #112	; 0x70
 801792e:	46bd      	mov	sp, r7
 8017930:	bd80      	pop	{r7, pc}
 8017932:	bf00      	nop
 8017934:	48000400 	.word	0x48000400

08017938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b082      	sub	sp, #8
 801793c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801793e:	2300      	movs	r3, #0
 8017940:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8017942:	4b0c      	ldr	r3, [pc, #48]	; (8017974 <HAL_Init+0x3c>)
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	4a0b      	ldr	r2, [pc, #44]	; (8017974 <HAL_Init+0x3c>)
 8017948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801794c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801794e:	2003      	movs	r0, #3
 8017950:	f000 f96c 	bl	8017c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8017954:	2000      	movs	r0, #0
 8017956:	f000 f80f 	bl	8017978 <HAL_InitTick>
 801795a:	4603      	mov	r3, r0
 801795c:	2b00      	cmp	r3, #0
 801795e:	d002      	beq.n	8017966 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8017960:	2301      	movs	r3, #1
 8017962:	71fb      	strb	r3, [r7, #7]
 8017964:	e001      	b.n	801796a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8017966:	f7eb f9ca 	bl	8002cfe <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801796a:	79fb      	ldrb	r3, [r7, #7]
}
 801796c:	4618      	mov	r0, r3
 801796e:	3708      	adds	r7, #8
 8017970:	46bd      	mov	sp, r7
 8017972:	bd80      	pop	{r7, pc}
 8017974:	58004000 	.word	0x58004000

08017978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8017978:	b580      	push	{r7, lr}
 801797a:	b084      	sub	sp, #16
 801797c:	af00      	add	r7, sp, #0
 801797e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8017980:	2300      	movs	r3, #0
 8017982:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8017984:	4b17      	ldr	r3, [pc, #92]	; (80179e4 <HAL_InitTick+0x6c>)
 8017986:	781b      	ldrb	r3, [r3, #0]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d024      	beq.n	80179d6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 801798c:	f002 ff26 	bl	801a7dc <HAL_RCC_GetHCLKFreq>
 8017990:	4602      	mov	r2, r0
 8017992:	4b14      	ldr	r3, [pc, #80]	; (80179e4 <HAL_InitTick+0x6c>)
 8017994:	781b      	ldrb	r3, [r3, #0]
 8017996:	4619      	mov	r1, r3
 8017998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801799c:	fbb3 f3f1 	udiv	r3, r3, r1
 80179a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80179a4:	4618      	mov	r0, r3
 80179a6:	f000 f974 	bl	8017c92 <HAL_SYSTICK_Config>
 80179aa:	4603      	mov	r3, r0
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d10f      	bne.n	80179d0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	2b0f      	cmp	r3, #15
 80179b4:	d809      	bhi.n	80179ca <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80179b6:	2200      	movs	r2, #0
 80179b8:	6879      	ldr	r1, [r7, #4]
 80179ba:	f04f 30ff 	mov.w	r0, #4294967295
 80179be:	f000 f940 	bl	8017c42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80179c2:	4a09      	ldr	r2, [pc, #36]	; (80179e8 <HAL_InitTick+0x70>)
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	6013      	str	r3, [r2, #0]
 80179c8:	e007      	b.n	80179da <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80179ca:	2301      	movs	r3, #1
 80179cc:	73fb      	strb	r3, [r7, #15]
 80179ce:	e004      	b.n	80179da <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80179d0:	2301      	movs	r3, #1
 80179d2:	73fb      	strb	r3, [r7, #15]
 80179d4:	e001      	b.n	80179da <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80179d6:	2301      	movs	r3, #1
 80179d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80179da:	7bfb      	ldrb	r3, [r7, #15]
}
 80179dc:	4618      	mov	r0, r3
 80179de:	3710      	adds	r7, #16
 80179e0:	46bd      	mov	sp, r7
 80179e2:	bd80      	pop	{r7, pc}
 80179e4:	20000088 	.word	0x20000088
 80179e8:	20000084 	.word	0x20000084

080179ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80179ec:	b480      	push	{r7}
 80179ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80179f0:	4b06      	ldr	r3, [pc, #24]	; (8017a0c <HAL_IncTick+0x20>)
 80179f2:	781b      	ldrb	r3, [r3, #0]
 80179f4:	461a      	mov	r2, r3
 80179f6:	4b06      	ldr	r3, [pc, #24]	; (8017a10 <HAL_IncTick+0x24>)
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	4413      	add	r3, r2
 80179fc:	4a04      	ldr	r2, [pc, #16]	; (8017a10 <HAL_IncTick+0x24>)
 80179fe:	6013      	str	r3, [r2, #0]
}
 8017a00:	bf00      	nop
 8017a02:	46bd      	mov	sp, r7
 8017a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a08:	4770      	bx	lr
 8017a0a:	bf00      	nop
 8017a0c:	20000088 	.word	0x20000088
 8017a10:	200087ac 	.word	0x200087ac

08017a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8017a14:	b480      	push	{r7}
 8017a16:	af00      	add	r7, sp, #0
  return uwTick;
 8017a18:	4b03      	ldr	r3, [pc, #12]	; (8017a28 <HAL_GetTick+0x14>)
 8017a1a:	681b      	ldr	r3, [r3, #0]
}
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a24:	4770      	bx	lr
 8017a26:	bf00      	nop
 8017a28:	200087ac 	.word	0x200087ac

08017a2c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8017a2c:	b480      	push	{r7}
 8017a2e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8017a30:	4b03      	ldr	r3, [pc, #12]	; (8017a40 <HAL_GetTickPrio+0x14>)
 8017a32:	681b      	ldr	r3, [r3, #0]
}
 8017a34:	4618      	mov	r0, r3
 8017a36:	46bd      	mov	sp, r7
 8017a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a3c:	4770      	bx	lr
 8017a3e:	bf00      	nop
 8017a40:	20000084 	.word	0x20000084

08017a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b084      	sub	sp, #16
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8017a4c:	f7ff ffe2 	bl	8017a14 <HAL_GetTick>
 8017a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a5c:	d005      	beq.n	8017a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8017a5e:	4b0a      	ldr	r3, [pc, #40]	; (8017a88 <HAL_Delay+0x44>)
 8017a60:	781b      	ldrb	r3, [r3, #0]
 8017a62:	461a      	mov	r2, r3
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	4413      	add	r3, r2
 8017a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8017a6a:	bf00      	nop
 8017a6c:	f7ff ffd2 	bl	8017a14 <HAL_GetTick>
 8017a70:	4602      	mov	r2, r0
 8017a72:	68bb      	ldr	r3, [r7, #8]
 8017a74:	1ad3      	subs	r3, r2, r3
 8017a76:	68fa      	ldr	r2, [r7, #12]
 8017a78:	429a      	cmp	r2, r3
 8017a7a:	d8f7      	bhi.n	8017a6c <HAL_Delay+0x28>
  {
  }
}
 8017a7c:	bf00      	nop
 8017a7e:	bf00      	nop
 8017a80:	3710      	adds	r7, #16
 8017a82:	46bd      	mov	sp, r7
 8017a84:	bd80      	pop	{r7, pc}
 8017a86:	bf00      	nop
 8017a88:	20000088 	.word	0x20000088

08017a8c <__NVIC_SetPriorityGrouping>:
{
 8017a8c:	b480      	push	{r7}
 8017a8e:	b085      	sub	sp, #20
 8017a90:	af00      	add	r7, sp, #0
 8017a92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	f003 0307 	and.w	r3, r3, #7
 8017a9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8017a9c:	4b0c      	ldr	r3, [pc, #48]	; (8017ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8017a9e:	68db      	ldr	r3, [r3, #12]
 8017aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8017aa2:	68ba      	ldr	r2, [r7, #8]
 8017aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8017aa8:	4013      	ands	r3, r2
 8017aaa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8017ab0:	68bb      	ldr	r3, [r7, #8]
 8017ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8017ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8017ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8017abe:	4a04      	ldr	r2, [pc, #16]	; (8017ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8017ac0:	68bb      	ldr	r3, [r7, #8]
 8017ac2:	60d3      	str	r3, [r2, #12]
}
 8017ac4:	bf00      	nop
 8017ac6:	3714      	adds	r7, #20
 8017ac8:	46bd      	mov	sp, r7
 8017aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ace:	4770      	bx	lr
 8017ad0:	e000ed00 	.word	0xe000ed00

08017ad4 <__NVIC_GetPriorityGrouping>:
{
 8017ad4:	b480      	push	{r7}
 8017ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8017ad8:	4b04      	ldr	r3, [pc, #16]	; (8017aec <__NVIC_GetPriorityGrouping+0x18>)
 8017ada:	68db      	ldr	r3, [r3, #12]
 8017adc:	0a1b      	lsrs	r3, r3, #8
 8017ade:	f003 0307 	and.w	r3, r3, #7
}
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aea:	4770      	bx	lr
 8017aec:	e000ed00 	.word	0xe000ed00

08017af0 <__NVIC_EnableIRQ>:
{
 8017af0:	b480      	push	{r7}
 8017af2:	b083      	sub	sp, #12
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	4603      	mov	r3, r0
 8017af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	db0b      	blt.n	8017b1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017b02:	79fb      	ldrb	r3, [r7, #7]
 8017b04:	f003 021f 	and.w	r2, r3, #31
 8017b08:	4907      	ldr	r1, [pc, #28]	; (8017b28 <__NVIC_EnableIRQ+0x38>)
 8017b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b0e:	095b      	lsrs	r3, r3, #5
 8017b10:	2001      	movs	r0, #1
 8017b12:	fa00 f202 	lsl.w	r2, r0, r2
 8017b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8017b1a:	bf00      	nop
 8017b1c:	370c      	adds	r7, #12
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b24:	4770      	bx	lr
 8017b26:	bf00      	nop
 8017b28:	e000e100 	.word	0xe000e100

08017b2c <__NVIC_SetPriority>:
{
 8017b2c:	b480      	push	{r7}
 8017b2e:	b083      	sub	sp, #12
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	4603      	mov	r3, r0
 8017b34:	6039      	str	r1, [r7, #0]
 8017b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	db0a      	blt.n	8017b56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017b40:	683b      	ldr	r3, [r7, #0]
 8017b42:	b2da      	uxtb	r2, r3
 8017b44:	490c      	ldr	r1, [pc, #48]	; (8017b78 <__NVIC_SetPriority+0x4c>)
 8017b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b4a:	0112      	lsls	r2, r2, #4
 8017b4c:	b2d2      	uxtb	r2, r2
 8017b4e:	440b      	add	r3, r1
 8017b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8017b54:	e00a      	b.n	8017b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017b56:	683b      	ldr	r3, [r7, #0]
 8017b58:	b2da      	uxtb	r2, r3
 8017b5a:	4908      	ldr	r1, [pc, #32]	; (8017b7c <__NVIC_SetPriority+0x50>)
 8017b5c:	79fb      	ldrb	r3, [r7, #7]
 8017b5e:	f003 030f 	and.w	r3, r3, #15
 8017b62:	3b04      	subs	r3, #4
 8017b64:	0112      	lsls	r2, r2, #4
 8017b66:	b2d2      	uxtb	r2, r2
 8017b68:	440b      	add	r3, r1
 8017b6a:	761a      	strb	r2, [r3, #24]
}
 8017b6c:	bf00      	nop
 8017b6e:	370c      	adds	r7, #12
 8017b70:	46bd      	mov	sp, r7
 8017b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b76:	4770      	bx	lr
 8017b78:	e000e100 	.word	0xe000e100
 8017b7c:	e000ed00 	.word	0xe000ed00

08017b80 <NVIC_EncodePriority>:
{
 8017b80:	b480      	push	{r7}
 8017b82:	b089      	sub	sp, #36	; 0x24
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	60f8      	str	r0, [r7, #12]
 8017b88:	60b9      	str	r1, [r7, #8]
 8017b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	f003 0307 	and.w	r3, r3, #7
 8017b92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8017b94:	69fb      	ldr	r3, [r7, #28]
 8017b96:	f1c3 0307 	rsb	r3, r3, #7
 8017b9a:	2b04      	cmp	r3, #4
 8017b9c:	bf28      	it	cs
 8017b9e:	2304      	movcs	r3, #4
 8017ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8017ba2:	69fb      	ldr	r3, [r7, #28]
 8017ba4:	3304      	adds	r3, #4
 8017ba6:	2b06      	cmp	r3, #6
 8017ba8:	d902      	bls.n	8017bb0 <NVIC_EncodePriority+0x30>
 8017baa:	69fb      	ldr	r3, [r7, #28]
 8017bac:	3b03      	subs	r3, #3
 8017bae:	e000      	b.n	8017bb2 <NVIC_EncodePriority+0x32>
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8017bb8:	69bb      	ldr	r3, [r7, #24]
 8017bba:	fa02 f303 	lsl.w	r3, r2, r3
 8017bbe:	43da      	mvns	r2, r3
 8017bc0:	68bb      	ldr	r3, [r7, #8]
 8017bc2:	401a      	ands	r2, r3
 8017bc4:	697b      	ldr	r3, [r7, #20]
 8017bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8017bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8017bcc:	697b      	ldr	r3, [r7, #20]
 8017bce:	fa01 f303 	lsl.w	r3, r1, r3
 8017bd2:	43d9      	mvns	r1, r3
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017bd8:	4313      	orrs	r3, r2
}
 8017bda:	4618      	mov	r0, r3
 8017bdc:	3724      	adds	r7, #36	; 0x24
 8017bde:	46bd      	mov	sp, r7
 8017be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be4:	4770      	bx	lr
	...

08017be8 <SysTick_Config>:
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b082      	sub	sp, #8
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	3b01      	subs	r3, #1
 8017bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8017bf8:	d301      	bcc.n	8017bfe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8017bfa:	2301      	movs	r3, #1
 8017bfc:	e00f      	b.n	8017c1e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8017bfe:	4a0a      	ldr	r2, [pc, #40]	; (8017c28 <SysTick_Config+0x40>)
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	3b01      	subs	r3, #1
 8017c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8017c06:	210f      	movs	r1, #15
 8017c08:	f04f 30ff 	mov.w	r0, #4294967295
 8017c0c:	f7ff ff8e 	bl	8017b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8017c10:	4b05      	ldr	r3, [pc, #20]	; (8017c28 <SysTick_Config+0x40>)
 8017c12:	2200      	movs	r2, #0
 8017c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8017c16:	4b04      	ldr	r3, [pc, #16]	; (8017c28 <SysTick_Config+0x40>)
 8017c18:	2207      	movs	r2, #7
 8017c1a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8017c1c:	2300      	movs	r3, #0
}
 8017c1e:	4618      	mov	r0, r3
 8017c20:	3708      	adds	r7, #8
 8017c22:	46bd      	mov	sp, r7
 8017c24:	bd80      	pop	{r7, pc}
 8017c26:	bf00      	nop
 8017c28:	e000e010 	.word	0xe000e010

08017c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8017c2c:	b580      	push	{r7, lr}
 8017c2e:	b082      	sub	sp, #8
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8017c34:	6878      	ldr	r0, [r7, #4]
 8017c36:	f7ff ff29 	bl	8017a8c <__NVIC_SetPriorityGrouping>
}
 8017c3a:	bf00      	nop
 8017c3c:	3708      	adds	r7, #8
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	bd80      	pop	{r7, pc}

08017c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8017c42:	b580      	push	{r7, lr}
 8017c44:	b086      	sub	sp, #24
 8017c46:	af00      	add	r7, sp, #0
 8017c48:	4603      	mov	r3, r0
 8017c4a:	60b9      	str	r1, [r7, #8]
 8017c4c:	607a      	str	r2, [r7, #4]
 8017c4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8017c50:	f7ff ff40 	bl	8017ad4 <__NVIC_GetPriorityGrouping>
 8017c54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8017c56:	687a      	ldr	r2, [r7, #4]
 8017c58:	68b9      	ldr	r1, [r7, #8]
 8017c5a:	6978      	ldr	r0, [r7, #20]
 8017c5c:	f7ff ff90 	bl	8017b80 <NVIC_EncodePriority>
 8017c60:	4602      	mov	r2, r0
 8017c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c66:	4611      	mov	r1, r2
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f7ff ff5f 	bl	8017b2c <__NVIC_SetPriority>
}
 8017c6e:	bf00      	nop
 8017c70:	3718      	adds	r7, #24
 8017c72:	46bd      	mov	sp, r7
 8017c74:	bd80      	pop	{r7, pc}

08017c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017c76:	b580      	push	{r7, lr}
 8017c78:	b082      	sub	sp, #8
 8017c7a:	af00      	add	r7, sp, #0
 8017c7c:	4603      	mov	r3, r0
 8017c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8017c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017c84:	4618      	mov	r0, r3
 8017c86:	f7ff ff33 	bl	8017af0 <__NVIC_EnableIRQ>
}
 8017c8a:	bf00      	nop
 8017c8c:	3708      	adds	r7, #8
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	bd80      	pop	{r7, pc}

08017c92 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8017c92:	b580      	push	{r7, lr}
 8017c94:	b082      	sub	sp, #8
 8017c96:	af00      	add	r7, sp, #0
 8017c98:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8017c9a:	6878      	ldr	r0, [r7, #4]
 8017c9c:	f7ff ffa4 	bl	8017be8 <SysTick_Config>
 8017ca0:	4603      	mov	r3, r0
}
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	3708      	adds	r7, #8
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd80      	pop	{r7, pc}
	...

08017cac <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	b084      	sub	sp, #16
 8017cb0:	af00      	add	r7, sp, #0
 8017cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d101      	bne.n	8017cbe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8017cba:	2301      	movs	r3, #1
 8017cbc:	e08e      	b.n	8017ddc <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	461a      	mov	r2, r3
 8017cc4:	4b47      	ldr	r3, [pc, #284]	; (8017de4 <HAL_DMA_Init+0x138>)
 8017cc6:	429a      	cmp	r2, r3
 8017cc8:	d80f      	bhi.n	8017cea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	461a      	mov	r2, r3
 8017cd0:	4b45      	ldr	r3, [pc, #276]	; (8017de8 <HAL_DMA_Init+0x13c>)
 8017cd2:	4413      	add	r3, r2
 8017cd4:	4a45      	ldr	r2, [pc, #276]	; (8017dec <HAL_DMA_Init+0x140>)
 8017cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8017cda:	091b      	lsrs	r3, r3, #4
 8017cdc:	009a      	lsls	r2, r3, #2
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	4a42      	ldr	r2, [pc, #264]	; (8017df0 <HAL_DMA_Init+0x144>)
 8017ce6:	641a      	str	r2, [r3, #64]	; 0x40
 8017ce8:	e00e      	b.n	8017d08 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	461a      	mov	r2, r3
 8017cf0:	4b40      	ldr	r3, [pc, #256]	; (8017df4 <HAL_DMA_Init+0x148>)
 8017cf2:	4413      	add	r3, r2
 8017cf4:	4a3d      	ldr	r2, [pc, #244]	; (8017dec <HAL_DMA_Init+0x140>)
 8017cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8017cfa:	091b      	lsrs	r3, r3, #4
 8017cfc:	009a      	lsls	r2, r3, #2
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	4a3c      	ldr	r2, [pc, #240]	; (8017df8 <HAL_DMA_Init+0x14c>)
 8017d06:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	2202      	movs	r2, #2
 8017d0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8017d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017d22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8017d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	691b      	ldr	r3, [r3, #16]
 8017d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	699b      	ldr	r3, [r3, #24]
 8017d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017d44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	6a1b      	ldr	r3, [r3, #32]
 8017d4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8017d4c:	68fa      	ldr	r2, [r7, #12]
 8017d4e:	4313      	orrs	r3, r2
 8017d50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	68fa      	ldr	r2, [r7, #12]
 8017d58:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8017d5a:	6878      	ldr	r0, [r7, #4]
 8017d5c:	f000 fa74 	bl	8018248 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	689b      	ldr	r3, [r3, #8]
 8017d64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017d68:	d102      	bne.n	8017d70 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	2200      	movs	r2, #0
 8017d6e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	685a      	ldr	r2, [r3, #4]
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017d78:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8017d7c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d82:	687a      	ldr	r2, [r7, #4]
 8017d84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8017d86:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	685b      	ldr	r3, [r3, #4]
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d010      	beq.n	8017db2 <HAL_DMA_Init+0x106>
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	685b      	ldr	r3, [r3, #4]
 8017d94:	2b04      	cmp	r3, #4
 8017d96:	d80c      	bhi.n	8017db2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8017d98:	6878      	ldr	r0, [r7, #4]
 8017d9a:	f000 fa93 	bl	80182c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017da2:	2200      	movs	r2, #0
 8017da4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017daa:	687a      	ldr	r2, [r7, #4]
 8017dac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8017dae:	605a      	str	r2, [r3, #4]
 8017db0:	e008      	b.n	8017dc4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	2200      	movs	r2, #0
 8017db6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	2200      	movs	r2, #0
 8017dbc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	2200      	movs	r2, #0
 8017dc2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	2200      	movs	r2, #0
 8017dc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	2201      	movs	r2, #1
 8017dce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	2200      	movs	r2, #0
 8017dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8017dda:	2300      	movs	r3, #0
}
 8017ddc:	4618      	mov	r0, r3
 8017dde:	3710      	adds	r7, #16
 8017de0:	46bd      	mov	sp, r7
 8017de2:	bd80      	pop	{r7, pc}
 8017de4:	40020407 	.word	0x40020407
 8017de8:	bffdfff8 	.word	0xbffdfff8
 8017dec:	cccccccd 	.word	0xcccccccd
 8017df0:	40020000 	.word	0x40020000
 8017df4:	bffdfbf8 	.word	0xbffdfbf8
 8017df8:	40020400 	.word	0x40020400

08017dfc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8017dfc:	b580      	push	{r7, lr}
 8017dfe:	b086      	sub	sp, #24
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	60f8      	str	r0, [r7, #12]
 8017e04:	60b9      	str	r1, [r7, #8]
 8017e06:	607a      	str	r2, [r7, #4]
 8017e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017e14:	2b01      	cmp	r3, #1
 8017e16:	d101      	bne.n	8017e1c <HAL_DMA_Start_IT+0x20>
 8017e18:	2302      	movs	r3, #2
 8017e1a:	e066      	b.n	8017eea <HAL_DMA_Start_IT+0xee>
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	2201      	movs	r2, #1
 8017e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8017e2a:	b2db      	uxtb	r3, r3
 8017e2c:	2b01      	cmp	r3, #1
 8017e2e:	d155      	bne.n	8017edc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	2202      	movs	r2, #2
 8017e34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	681a      	ldr	r2, [r3, #0]
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	f022 0201 	bic.w	r2, r2, #1
 8017e4c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8017e4e:	683b      	ldr	r3, [r7, #0]
 8017e50:	687a      	ldr	r2, [r7, #4]
 8017e52:	68b9      	ldr	r1, [r7, #8]
 8017e54:	68f8      	ldr	r0, [r7, #12]
 8017e56:	f000 f9b9 	bl	80181cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d008      	beq.n	8017e74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	681a      	ldr	r2, [r3, #0]
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	f042 020e 	orr.w	r2, r2, #14
 8017e70:	601a      	str	r2, [r3, #0]
 8017e72:	e00f      	b.n	8017e94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	681a      	ldr	r2, [r3, #0]
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	f022 0204 	bic.w	r2, r2, #4
 8017e82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	681a      	ldr	r2, [r3, #0]
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	f042 020a 	orr.w	r2, r2, #10
 8017e92:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d007      	beq.n	8017eb2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017ea6:	681a      	ldr	r2, [r3, #0]
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017eb0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d007      	beq.n	8017eca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017ebe:	681a      	ldr	r2, [r3, #0]
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017ec8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	681a      	ldr	r2, [r3, #0]
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	f042 0201 	orr.w	r2, r2, #1
 8017ed8:	601a      	str	r2, [r3, #0]
 8017eda:	e005      	b.n	8017ee8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	2200      	movs	r2, #0
 8017ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8017ee4:	2302      	movs	r3, #2
 8017ee6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8017ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8017eea:	4618      	mov	r0, r3
 8017eec:	3718      	adds	r7, #24
 8017eee:	46bd      	mov	sp, r7
 8017ef0:	bd80      	pop	{r7, pc}

08017ef2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8017ef2:	b480      	push	{r7}
 8017ef4:	b083      	sub	sp, #12
 8017ef6:	af00      	add	r7, sp, #0
 8017ef8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d101      	bne.n	8017f04 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8017f00:	2301      	movs	r3, #1
 8017f02:	e04f      	b.n	8017fa4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8017f0a:	b2db      	uxtb	r3, r3
 8017f0c:	2b02      	cmp	r3, #2
 8017f0e:	d008      	beq.n	8017f22 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	2204      	movs	r2, #4
 8017f14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	2200      	movs	r2, #0
 8017f1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8017f1e:	2301      	movs	r3, #1
 8017f20:	e040      	b.n	8017fa4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	681a      	ldr	r2, [r3, #0]
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	f022 020e 	bic.w	r2, r2, #14
 8017f30:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017f36:	681a      	ldr	r2, [r3, #0]
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8017f40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	681a      	ldr	r2, [r3, #0]
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	f022 0201 	bic.w	r2, r2, #1
 8017f50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f56:	f003 021c 	and.w	r2, r3, #28
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f5e:	2101      	movs	r1, #1
 8017f60:	fa01 f202 	lsl.w	r2, r1, r2
 8017f64:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017f6a:	687a      	ldr	r2, [r7, #4]
 8017f6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8017f6e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d00c      	beq.n	8017f92 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017f7c:	681a      	ldr	r2, [r3, #0]
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017f82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8017f86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017f8c:	687a      	ldr	r2, [r7, #4]
 8017f8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8017f90:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	2201      	movs	r2, #1
 8017f96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8017fa2:	2300      	movs	r3, #0
}
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	370c      	adds	r7, #12
 8017fa8:	46bd      	mov	sp, r7
 8017faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fae:	4770      	bx	lr

08017fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b084      	sub	sp, #16
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017fb8:	2300      	movs	r3, #0
 8017fba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8017fc2:	b2db      	uxtb	r3, r3
 8017fc4:	2b02      	cmp	r3, #2
 8017fc6:	d005      	beq.n	8017fd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	2204      	movs	r2, #4
 8017fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8017fce:	2301      	movs	r3, #1
 8017fd0:	73fb      	strb	r3, [r7, #15]
 8017fd2:	e047      	b.n	8018064 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	681a      	ldr	r2, [r3, #0]
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	f022 020e 	bic.w	r2, r2, #14
 8017fe2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	681a      	ldr	r2, [r3, #0]
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	f022 0201 	bic.w	r2, r2, #1
 8017ff2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017ff8:	681a      	ldr	r2, [r3, #0]
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017ffe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018002:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018008:	f003 021c 	and.w	r2, r3, #28
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018010:	2101      	movs	r1, #1
 8018012:	fa01 f202 	lsl.w	r2, r1, r2
 8018016:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801801c:	687a      	ldr	r2, [r7, #4]
 801801e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8018020:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018026:	2b00      	cmp	r3, #0
 8018028:	d00c      	beq.n	8018044 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801802e:	681a      	ldr	r2, [r3, #0]
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018038:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801803e:	687a      	ldr	r2, [r7, #4]
 8018040:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8018042:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	2201      	movs	r2, #1
 8018048:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	2200      	movs	r2, #0
 8018050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018058:	2b00      	cmp	r3, #0
 801805a:	d003      	beq.n	8018064 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018060:	6878      	ldr	r0, [r7, #4]
 8018062:	4798      	blx	r3
    }
  }
  return status;
 8018064:	7bfb      	ldrb	r3, [r7, #15]
}
 8018066:	4618      	mov	r0, r3
 8018068:	3710      	adds	r7, #16
 801806a:	46bd      	mov	sp, r7
 801806c:	bd80      	pop	{r7, pc}

0801806e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801806e:	b580      	push	{r7, lr}
 8018070:	b084      	sub	sp, #16
 8018072:	af00      	add	r7, sp, #0
 8018074:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801808a:	f003 031c 	and.w	r3, r3, #28
 801808e:	2204      	movs	r2, #4
 8018090:	409a      	lsls	r2, r3
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	4013      	ands	r3, r2
 8018096:	2b00      	cmp	r3, #0
 8018098:	d026      	beq.n	80180e8 <HAL_DMA_IRQHandler+0x7a>
 801809a:	68bb      	ldr	r3, [r7, #8]
 801809c:	f003 0304 	and.w	r3, r3, #4
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d021      	beq.n	80180e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	f003 0320 	and.w	r3, r3, #32
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d107      	bne.n	80180c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	681a      	ldr	r2, [r3, #0]
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	f022 0204 	bic.w	r2, r2, #4
 80180c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180c6:	f003 021c 	and.w	r2, r3, #28
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ce:	2104      	movs	r1, #4
 80180d0:	fa01 f202 	lsl.w	r2, r1, r2
 80180d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d071      	beq.n	80181c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180e2:	6878      	ldr	r0, [r7, #4]
 80180e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80180e6:	e06c      	b.n	80181c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180ec:	f003 031c 	and.w	r3, r3, #28
 80180f0:	2202      	movs	r2, #2
 80180f2:	409a      	lsls	r2, r3
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	4013      	ands	r3, r2
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d02e      	beq.n	801815a <HAL_DMA_IRQHandler+0xec>
 80180fc:	68bb      	ldr	r3, [r7, #8]
 80180fe:	f003 0302 	and.w	r3, r3, #2
 8018102:	2b00      	cmp	r3, #0
 8018104:	d029      	beq.n	801815a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	f003 0320 	and.w	r3, r3, #32
 8018110:	2b00      	cmp	r3, #0
 8018112:	d10b      	bne.n	801812c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	681b      	ldr	r3, [r3, #0]
 8018118:	681a      	ldr	r2, [r3, #0]
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	f022 020a 	bic.w	r2, r2, #10
 8018122:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	2201      	movs	r2, #1
 8018128:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018130:	f003 021c 	and.w	r2, r3, #28
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018138:	2102      	movs	r1, #2
 801813a:	fa01 f202 	lsl.w	r2, r1, r2
 801813e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	2200      	movs	r2, #0
 8018144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801814c:	2b00      	cmp	r3, #0
 801814e:	d038      	beq.n	80181c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018154:	6878      	ldr	r0, [r7, #4]
 8018156:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8018158:	e033      	b.n	80181c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801815e:	f003 031c 	and.w	r3, r3, #28
 8018162:	2208      	movs	r2, #8
 8018164:	409a      	lsls	r2, r3
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	4013      	ands	r3, r2
 801816a:	2b00      	cmp	r3, #0
 801816c:	d02a      	beq.n	80181c4 <HAL_DMA_IRQHandler+0x156>
 801816e:	68bb      	ldr	r3, [r7, #8]
 8018170:	f003 0308 	and.w	r3, r3, #8
 8018174:	2b00      	cmp	r3, #0
 8018176:	d025      	beq.n	80181c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	681a      	ldr	r2, [r3, #0]
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	f022 020e 	bic.w	r2, r2, #14
 8018186:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801818c:	f003 021c 	and.w	r2, r3, #28
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018194:	2101      	movs	r1, #1
 8018196:	fa01 f202 	lsl.w	r2, r1, r2
 801819a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	2201      	movs	r2, #1
 80181a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	2201      	movs	r2, #1
 80181a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	2200      	movs	r2, #0
 80181ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d004      	beq.n	80181c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80181be:	6878      	ldr	r0, [r7, #4]
 80181c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80181c2:	bf00      	nop
 80181c4:	bf00      	nop
}
 80181c6:	3710      	adds	r7, #16
 80181c8:	46bd      	mov	sp, r7
 80181ca:	bd80      	pop	{r7, pc}

080181cc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80181cc:	b480      	push	{r7}
 80181ce:	b085      	sub	sp, #20
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	60f8      	str	r0, [r7, #12]
 80181d4:	60b9      	str	r1, [r7, #8]
 80181d6:	607a      	str	r2, [r7, #4]
 80181d8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80181de:	68fa      	ldr	r2, [r7, #12]
 80181e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80181e2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d004      	beq.n	80181f6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80181f0:	68fa      	ldr	r2, [r7, #12]
 80181f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80181f4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181fa:	f003 021c 	and.w	r2, r3, #28
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018202:	2101      	movs	r1, #1
 8018204:	fa01 f202 	lsl.w	r2, r1, r2
 8018208:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	683a      	ldr	r2, [r7, #0]
 8018210:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	689b      	ldr	r3, [r3, #8]
 8018216:	2b10      	cmp	r3, #16
 8018218:	d108      	bne.n	801822c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	687a      	ldr	r2, [r7, #4]
 8018220:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	68ba      	ldr	r2, [r7, #8]
 8018228:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801822a:	e007      	b.n	801823c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	68ba      	ldr	r2, [r7, #8]
 8018232:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	687a      	ldr	r2, [r7, #4]
 801823a:	60da      	str	r2, [r3, #12]
}
 801823c:	bf00      	nop
 801823e:	3714      	adds	r7, #20
 8018240:	46bd      	mov	sp, r7
 8018242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018246:	4770      	bx	lr

08018248 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8018248:	b480      	push	{r7}
 801824a:	b085      	sub	sp, #20
 801824c:	af00      	add	r7, sp, #0
 801824e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	461a      	mov	r2, r3
 8018256:	4b17      	ldr	r3, [pc, #92]	; (80182b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8018258:	429a      	cmp	r2, r3
 801825a:	d80a      	bhi.n	8018272 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018260:	089b      	lsrs	r3, r3, #2
 8018262:	009b      	lsls	r3, r3, #2
 8018264:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018268:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 801826c:	687a      	ldr	r2, [r7, #4]
 801826e:	6493      	str	r3, [r2, #72]	; 0x48
 8018270:	e007      	b.n	8018282 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018276:	089b      	lsrs	r3, r3, #2
 8018278:	009a      	lsls	r2, r3, #2
 801827a:	4b0f      	ldr	r3, [pc, #60]	; (80182b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801827c:	4413      	add	r3, r2
 801827e:	687a      	ldr	r2, [r7, #4]
 8018280:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	b2db      	uxtb	r3, r3
 8018288:	3b08      	subs	r3, #8
 801828a:	4a0c      	ldr	r2, [pc, #48]	; (80182bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801828c:	fba2 2303 	umull	r2, r3, r2, r3
 8018290:	091b      	lsrs	r3, r3, #4
 8018292:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	4a0a      	ldr	r2, [pc, #40]	; (80182c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8018298:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	f003 031f 	and.w	r3, r3, #31
 80182a0:	2201      	movs	r2, #1
 80182a2:	409a      	lsls	r2, r3
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80182a8:	bf00      	nop
 80182aa:	3714      	adds	r7, #20
 80182ac:	46bd      	mov	sp, r7
 80182ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182b2:	4770      	bx	lr
 80182b4:	40020407 	.word	0x40020407
 80182b8:	4002081c 	.word	0x4002081c
 80182bc:	cccccccd 	.word	0xcccccccd
 80182c0:	40020880 	.word	0x40020880

080182c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80182c4:	b480      	push	{r7}
 80182c6:	b085      	sub	sp, #20
 80182c8:	af00      	add	r7, sp, #0
 80182ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	685b      	ldr	r3, [r3, #4]
 80182d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80182d4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80182d6:	68fa      	ldr	r2, [r7, #12]
 80182d8:	4b0b      	ldr	r3, [pc, #44]	; (8018308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80182da:	4413      	add	r3, r2
 80182dc:	009b      	lsls	r3, r3, #2
 80182de:	461a      	mov	r2, r3
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	4a09      	ldr	r2, [pc, #36]	; (801830c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80182e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	3b01      	subs	r3, #1
 80182ee:	f003 0303 	and.w	r3, r3, #3
 80182f2:	2201      	movs	r2, #1
 80182f4:	409a      	lsls	r2, r3
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80182fa:	bf00      	nop
 80182fc:	3714      	adds	r7, #20
 80182fe:	46bd      	mov	sp, r7
 8018300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018304:	4770      	bx	lr
 8018306:	bf00      	nop
 8018308:	1000823f 	.word	0x1000823f
 801830c:	40020940 	.word	0x40020940

08018310 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8018310:	b480      	push	{r7}
 8018312:	b087      	sub	sp, #28
 8018314:	af00      	add	r7, sp, #0
 8018316:	6078      	str	r0, [r7, #4]
 8018318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801831a:	2300      	movs	r3, #0
 801831c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801831e:	e14c      	b.n	80185ba <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8018320:	683b      	ldr	r3, [r7, #0]
 8018322:	681a      	ldr	r2, [r3, #0]
 8018324:	2101      	movs	r1, #1
 8018326:	697b      	ldr	r3, [r7, #20]
 8018328:	fa01 f303 	lsl.w	r3, r1, r3
 801832c:	4013      	ands	r3, r2
 801832e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8018330:	68fb      	ldr	r3, [r7, #12]
 8018332:	2b00      	cmp	r3, #0
 8018334:	f000 813e 	beq.w	80185b4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8018338:	683b      	ldr	r3, [r7, #0]
 801833a:	685b      	ldr	r3, [r3, #4]
 801833c:	f003 0303 	and.w	r3, r3, #3
 8018340:	2b01      	cmp	r3, #1
 8018342:	d005      	beq.n	8018350 <HAL_GPIO_Init+0x40>
 8018344:	683b      	ldr	r3, [r7, #0]
 8018346:	685b      	ldr	r3, [r3, #4]
 8018348:	f003 0303 	and.w	r3, r3, #3
 801834c:	2b02      	cmp	r3, #2
 801834e:	d130      	bne.n	80183b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	689b      	ldr	r3, [r3, #8]
 8018354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8018356:	697b      	ldr	r3, [r7, #20]
 8018358:	005b      	lsls	r3, r3, #1
 801835a:	2203      	movs	r2, #3
 801835c:	fa02 f303 	lsl.w	r3, r2, r3
 8018360:	43db      	mvns	r3, r3
 8018362:	693a      	ldr	r2, [r7, #16]
 8018364:	4013      	ands	r3, r2
 8018366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8018368:	683b      	ldr	r3, [r7, #0]
 801836a:	68da      	ldr	r2, [r3, #12]
 801836c:	697b      	ldr	r3, [r7, #20]
 801836e:	005b      	lsls	r3, r3, #1
 8018370:	fa02 f303 	lsl.w	r3, r2, r3
 8018374:	693a      	ldr	r2, [r7, #16]
 8018376:	4313      	orrs	r3, r2
 8018378:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	693a      	ldr	r2, [r7, #16]
 801837e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	685b      	ldr	r3, [r3, #4]
 8018384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8018386:	2201      	movs	r2, #1
 8018388:	697b      	ldr	r3, [r7, #20]
 801838a:	fa02 f303 	lsl.w	r3, r2, r3
 801838e:	43db      	mvns	r3, r3
 8018390:	693a      	ldr	r2, [r7, #16]
 8018392:	4013      	ands	r3, r2
 8018394:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8018396:	683b      	ldr	r3, [r7, #0]
 8018398:	685b      	ldr	r3, [r3, #4]
 801839a:	091b      	lsrs	r3, r3, #4
 801839c:	f003 0201 	and.w	r2, r3, #1
 80183a0:	697b      	ldr	r3, [r7, #20]
 80183a2:	fa02 f303 	lsl.w	r3, r2, r3
 80183a6:	693a      	ldr	r2, [r7, #16]
 80183a8:	4313      	orrs	r3, r2
 80183aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	693a      	ldr	r2, [r7, #16]
 80183b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80183b2:	683b      	ldr	r3, [r7, #0]
 80183b4:	685b      	ldr	r3, [r3, #4]
 80183b6:	f003 0303 	and.w	r3, r3, #3
 80183ba:	2b03      	cmp	r3, #3
 80183bc:	d017      	beq.n	80183ee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	68db      	ldr	r3, [r3, #12]
 80183c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80183c4:	697b      	ldr	r3, [r7, #20]
 80183c6:	005b      	lsls	r3, r3, #1
 80183c8:	2203      	movs	r2, #3
 80183ca:	fa02 f303 	lsl.w	r3, r2, r3
 80183ce:	43db      	mvns	r3, r3
 80183d0:	693a      	ldr	r2, [r7, #16]
 80183d2:	4013      	ands	r3, r2
 80183d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80183d6:	683b      	ldr	r3, [r7, #0]
 80183d8:	689a      	ldr	r2, [r3, #8]
 80183da:	697b      	ldr	r3, [r7, #20]
 80183dc:	005b      	lsls	r3, r3, #1
 80183de:	fa02 f303 	lsl.w	r3, r2, r3
 80183e2:	693a      	ldr	r2, [r7, #16]
 80183e4:	4313      	orrs	r3, r2
 80183e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	693a      	ldr	r2, [r7, #16]
 80183ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80183ee:	683b      	ldr	r3, [r7, #0]
 80183f0:	685b      	ldr	r3, [r3, #4]
 80183f2:	f003 0303 	and.w	r3, r3, #3
 80183f6:	2b02      	cmp	r3, #2
 80183f8:	d123      	bne.n	8018442 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80183fa:	697b      	ldr	r3, [r7, #20]
 80183fc:	08da      	lsrs	r2, r3, #3
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	3208      	adds	r2, #8
 8018402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018406:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8018408:	697b      	ldr	r3, [r7, #20]
 801840a:	f003 0307 	and.w	r3, r3, #7
 801840e:	009b      	lsls	r3, r3, #2
 8018410:	220f      	movs	r2, #15
 8018412:	fa02 f303 	lsl.w	r3, r2, r3
 8018416:	43db      	mvns	r3, r3
 8018418:	693a      	ldr	r2, [r7, #16]
 801841a:	4013      	ands	r3, r2
 801841c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801841e:	683b      	ldr	r3, [r7, #0]
 8018420:	691a      	ldr	r2, [r3, #16]
 8018422:	697b      	ldr	r3, [r7, #20]
 8018424:	f003 0307 	and.w	r3, r3, #7
 8018428:	009b      	lsls	r3, r3, #2
 801842a:	fa02 f303 	lsl.w	r3, r2, r3
 801842e:	693a      	ldr	r2, [r7, #16]
 8018430:	4313      	orrs	r3, r2
 8018432:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8018434:	697b      	ldr	r3, [r7, #20]
 8018436:	08da      	lsrs	r2, r3, #3
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	3208      	adds	r2, #8
 801843c:	6939      	ldr	r1, [r7, #16]
 801843e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8018448:	697b      	ldr	r3, [r7, #20]
 801844a:	005b      	lsls	r3, r3, #1
 801844c:	2203      	movs	r2, #3
 801844e:	fa02 f303 	lsl.w	r3, r2, r3
 8018452:	43db      	mvns	r3, r3
 8018454:	693a      	ldr	r2, [r7, #16]
 8018456:	4013      	ands	r3, r2
 8018458:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801845a:	683b      	ldr	r3, [r7, #0]
 801845c:	685b      	ldr	r3, [r3, #4]
 801845e:	f003 0203 	and.w	r2, r3, #3
 8018462:	697b      	ldr	r3, [r7, #20]
 8018464:	005b      	lsls	r3, r3, #1
 8018466:	fa02 f303 	lsl.w	r3, r2, r3
 801846a:	693a      	ldr	r2, [r7, #16]
 801846c:	4313      	orrs	r3, r2
 801846e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	693a      	ldr	r2, [r7, #16]
 8018474:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8018476:	683b      	ldr	r3, [r7, #0]
 8018478:	685b      	ldr	r3, [r3, #4]
 801847a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801847e:	2b00      	cmp	r3, #0
 8018480:	f000 8098 	beq.w	80185b4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8018484:	4a54      	ldr	r2, [pc, #336]	; (80185d8 <HAL_GPIO_Init+0x2c8>)
 8018486:	697b      	ldr	r3, [r7, #20]
 8018488:	089b      	lsrs	r3, r3, #2
 801848a:	3302      	adds	r3, #2
 801848c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018490:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8018492:	697b      	ldr	r3, [r7, #20]
 8018494:	f003 0303 	and.w	r3, r3, #3
 8018498:	009b      	lsls	r3, r3, #2
 801849a:	220f      	movs	r2, #15
 801849c:	fa02 f303 	lsl.w	r3, r2, r3
 80184a0:	43db      	mvns	r3, r3
 80184a2:	693a      	ldr	r2, [r7, #16]
 80184a4:	4013      	ands	r3, r2
 80184a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80184ae:	d019      	beq.n	80184e4 <HAL_GPIO_Init+0x1d4>
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	4a4a      	ldr	r2, [pc, #296]	; (80185dc <HAL_GPIO_Init+0x2cc>)
 80184b4:	4293      	cmp	r3, r2
 80184b6:	d013      	beq.n	80184e0 <HAL_GPIO_Init+0x1d0>
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	4a49      	ldr	r2, [pc, #292]	; (80185e0 <HAL_GPIO_Init+0x2d0>)
 80184bc:	4293      	cmp	r3, r2
 80184be:	d00d      	beq.n	80184dc <HAL_GPIO_Init+0x1cc>
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	4a48      	ldr	r2, [pc, #288]	; (80185e4 <HAL_GPIO_Init+0x2d4>)
 80184c4:	4293      	cmp	r3, r2
 80184c6:	d007      	beq.n	80184d8 <HAL_GPIO_Init+0x1c8>
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	4a47      	ldr	r2, [pc, #284]	; (80185e8 <HAL_GPIO_Init+0x2d8>)
 80184cc:	4293      	cmp	r3, r2
 80184ce:	d101      	bne.n	80184d4 <HAL_GPIO_Init+0x1c4>
 80184d0:	2304      	movs	r3, #4
 80184d2:	e008      	b.n	80184e6 <HAL_GPIO_Init+0x1d6>
 80184d4:	2307      	movs	r3, #7
 80184d6:	e006      	b.n	80184e6 <HAL_GPIO_Init+0x1d6>
 80184d8:	2303      	movs	r3, #3
 80184da:	e004      	b.n	80184e6 <HAL_GPIO_Init+0x1d6>
 80184dc:	2302      	movs	r3, #2
 80184de:	e002      	b.n	80184e6 <HAL_GPIO_Init+0x1d6>
 80184e0:	2301      	movs	r3, #1
 80184e2:	e000      	b.n	80184e6 <HAL_GPIO_Init+0x1d6>
 80184e4:	2300      	movs	r3, #0
 80184e6:	697a      	ldr	r2, [r7, #20]
 80184e8:	f002 0203 	and.w	r2, r2, #3
 80184ec:	0092      	lsls	r2, r2, #2
 80184ee:	4093      	lsls	r3, r2
 80184f0:	693a      	ldr	r2, [r7, #16]
 80184f2:	4313      	orrs	r3, r2
 80184f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80184f6:	4938      	ldr	r1, [pc, #224]	; (80185d8 <HAL_GPIO_Init+0x2c8>)
 80184f8:	697b      	ldr	r3, [r7, #20]
 80184fa:	089b      	lsrs	r3, r3, #2
 80184fc:	3302      	adds	r3, #2
 80184fe:	693a      	ldr	r2, [r7, #16]
 8018500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8018504:	4b39      	ldr	r3, [pc, #228]	; (80185ec <HAL_GPIO_Init+0x2dc>)
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	43db      	mvns	r3, r3
 801850e:	693a      	ldr	r2, [r7, #16]
 8018510:	4013      	ands	r3, r2
 8018512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8018514:	683b      	ldr	r3, [r7, #0]
 8018516:	685b      	ldr	r3, [r3, #4]
 8018518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801851c:	2b00      	cmp	r3, #0
 801851e:	d003      	beq.n	8018528 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8018520:	693a      	ldr	r2, [r7, #16]
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	4313      	orrs	r3, r2
 8018526:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8018528:	4a30      	ldr	r2, [pc, #192]	; (80185ec <HAL_GPIO_Init+0x2dc>)
 801852a:	693b      	ldr	r3, [r7, #16]
 801852c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801852e:	4b2f      	ldr	r3, [pc, #188]	; (80185ec <HAL_GPIO_Init+0x2dc>)
 8018530:	685b      	ldr	r3, [r3, #4]
 8018532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	43db      	mvns	r3, r3
 8018538:	693a      	ldr	r2, [r7, #16]
 801853a:	4013      	ands	r3, r2
 801853c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801853e:	683b      	ldr	r3, [r7, #0]
 8018540:	685b      	ldr	r3, [r3, #4]
 8018542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018546:	2b00      	cmp	r3, #0
 8018548:	d003      	beq.n	8018552 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 801854a:	693a      	ldr	r2, [r7, #16]
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	4313      	orrs	r3, r2
 8018550:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8018552:	4a26      	ldr	r2, [pc, #152]	; (80185ec <HAL_GPIO_Init+0x2dc>)
 8018554:	693b      	ldr	r3, [r7, #16]
 8018556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8018558:	4b24      	ldr	r3, [pc, #144]	; (80185ec <HAL_GPIO_Init+0x2dc>)
 801855a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801855e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	43db      	mvns	r3, r3
 8018564:	693a      	ldr	r2, [r7, #16]
 8018566:	4013      	ands	r3, r2
 8018568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801856a:	683b      	ldr	r3, [r7, #0]
 801856c:	685b      	ldr	r3, [r3, #4]
 801856e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018572:	2b00      	cmp	r3, #0
 8018574:	d003      	beq.n	801857e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8018576:	693a      	ldr	r2, [r7, #16]
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	4313      	orrs	r3, r2
 801857c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801857e:	4a1b      	ldr	r2, [pc, #108]	; (80185ec <HAL_GPIO_Init+0x2dc>)
 8018580:	693b      	ldr	r3, [r7, #16]
 8018582:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8018586:	4b19      	ldr	r3, [pc, #100]	; (80185ec <HAL_GPIO_Init+0x2dc>)
 8018588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801858c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801858e:	68fb      	ldr	r3, [r7, #12]
 8018590:	43db      	mvns	r3, r3
 8018592:	693a      	ldr	r2, [r7, #16]
 8018594:	4013      	ands	r3, r2
 8018596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8018598:	683b      	ldr	r3, [r7, #0]
 801859a:	685b      	ldr	r3, [r3, #4]
 801859c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d003      	beq.n	80185ac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80185a4:	693a      	ldr	r2, [r7, #16]
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	4313      	orrs	r3, r2
 80185aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80185ac:	4a0f      	ldr	r2, [pc, #60]	; (80185ec <HAL_GPIO_Init+0x2dc>)
 80185ae:	693b      	ldr	r3, [r7, #16]
 80185b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80185b4:	697b      	ldr	r3, [r7, #20]
 80185b6:	3301      	adds	r3, #1
 80185b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80185ba:	683b      	ldr	r3, [r7, #0]
 80185bc:	681a      	ldr	r2, [r3, #0]
 80185be:	697b      	ldr	r3, [r7, #20]
 80185c0:	fa22 f303 	lsr.w	r3, r2, r3
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	f47f aeab 	bne.w	8018320 <HAL_GPIO_Init+0x10>
  }
}
 80185ca:	bf00      	nop
 80185cc:	bf00      	nop
 80185ce:	371c      	adds	r7, #28
 80185d0:	46bd      	mov	sp, r7
 80185d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d6:	4770      	bx	lr
 80185d8:	40010000 	.word	0x40010000
 80185dc:	48000400 	.word	0x48000400
 80185e0:	48000800 	.word	0x48000800
 80185e4:	48000c00 	.word	0x48000c00
 80185e8:	48001000 	.word	0x48001000
 80185ec:	58000800 	.word	0x58000800

080185f0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80185f0:	b480      	push	{r7}
 80185f2:	b087      	sub	sp, #28
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	6078      	str	r0, [r7, #4]
 80185f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80185fa:	2300      	movs	r3, #0
 80185fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80185fe:	e0bb      	b.n	8018778 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8018600:	2201      	movs	r2, #1
 8018602:	697b      	ldr	r3, [r7, #20]
 8018604:	fa02 f303 	lsl.w	r3, r2, r3
 8018608:	683a      	ldr	r2, [r7, #0]
 801860a:	4013      	ands	r3, r2
 801860c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 801860e:	693b      	ldr	r3, [r7, #16]
 8018610:	2b00      	cmp	r3, #0
 8018612:	f000 80ae 	beq.w	8018772 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8018616:	4a5f      	ldr	r2, [pc, #380]	; (8018794 <HAL_GPIO_DeInit+0x1a4>)
 8018618:	697b      	ldr	r3, [r7, #20]
 801861a:	089b      	lsrs	r3, r3, #2
 801861c:	3302      	adds	r3, #2
 801861e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018622:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8018624:	697b      	ldr	r3, [r7, #20]
 8018626:	f003 0303 	and.w	r3, r3, #3
 801862a:	009b      	lsls	r3, r3, #2
 801862c:	220f      	movs	r2, #15
 801862e:	fa02 f303 	lsl.w	r3, r2, r3
 8018632:	68fa      	ldr	r2, [r7, #12]
 8018634:	4013      	ands	r3, r2
 8018636:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801863e:	d019      	beq.n	8018674 <HAL_GPIO_DeInit+0x84>
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	4a55      	ldr	r2, [pc, #340]	; (8018798 <HAL_GPIO_DeInit+0x1a8>)
 8018644:	4293      	cmp	r3, r2
 8018646:	d013      	beq.n	8018670 <HAL_GPIO_DeInit+0x80>
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	4a54      	ldr	r2, [pc, #336]	; (801879c <HAL_GPIO_DeInit+0x1ac>)
 801864c:	4293      	cmp	r3, r2
 801864e:	d00d      	beq.n	801866c <HAL_GPIO_DeInit+0x7c>
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	4a53      	ldr	r2, [pc, #332]	; (80187a0 <HAL_GPIO_DeInit+0x1b0>)
 8018654:	4293      	cmp	r3, r2
 8018656:	d007      	beq.n	8018668 <HAL_GPIO_DeInit+0x78>
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	4a52      	ldr	r2, [pc, #328]	; (80187a4 <HAL_GPIO_DeInit+0x1b4>)
 801865c:	4293      	cmp	r3, r2
 801865e:	d101      	bne.n	8018664 <HAL_GPIO_DeInit+0x74>
 8018660:	2304      	movs	r3, #4
 8018662:	e008      	b.n	8018676 <HAL_GPIO_DeInit+0x86>
 8018664:	2307      	movs	r3, #7
 8018666:	e006      	b.n	8018676 <HAL_GPIO_DeInit+0x86>
 8018668:	2303      	movs	r3, #3
 801866a:	e004      	b.n	8018676 <HAL_GPIO_DeInit+0x86>
 801866c:	2302      	movs	r3, #2
 801866e:	e002      	b.n	8018676 <HAL_GPIO_DeInit+0x86>
 8018670:	2301      	movs	r3, #1
 8018672:	e000      	b.n	8018676 <HAL_GPIO_DeInit+0x86>
 8018674:	2300      	movs	r3, #0
 8018676:	697a      	ldr	r2, [r7, #20]
 8018678:	f002 0203 	and.w	r2, r2, #3
 801867c:	0092      	lsls	r2, r2, #2
 801867e:	4093      	lsls	r3, r2
 8018680:	68fa      	ldr	r2, [r7, #12]
 8018682:	429a      	cmp	r2, r3
 8018684:	d136      	bne.n	80186f4 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8018686:	4b48      	ldr	r3, [pc, #288]	; (80187a8 <HAL_GPIO_DeInit+0x1b8>)
 8018688:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 801868c:	693b      	ldr	r3, [r7, #16]
 801868e:	43db      	mvns	r3, r3
 8018690:	4945      	ldr	r1, [pc, #276]	; (80187a8 <HAL_GPIO_DeInit+0x1b8>)
 8018692:	4013      	ands	r3, r2
 8018694:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8018698:	4b43      	ldr	r3, [pc, #268]	; (80187a8 <HAL_GPIO_DeInit+0x1b8>)
 801869a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801869e:	693b      	ldr	r3, [r7, #16]
 80186a0:	43db      	mvns	r3, r3
 80186a2:	4941      	ldr	r1, [pc, #260]	; (80187a8 <HAL_GPIO_DeInit+0x1b8>)
 80186a4:	4013      	ands	r3, r2
 80186a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80186aa:	4b3f      	ldr	r3, [pc, #252]	; (80187a8 <HAL_GPIO_DeInit+0x1b8>)
 80186ac:	681a      	ldr	r2, [r3, #0]
 80186ae:	693b      	ldr	r3, [r7, #16]
 80186b0:	43db      	mvns	r3, r3
 80186b2:	493d      	ldr	r1, [pc, #244]	; (80187a8 <HAL_GPIO_DeInit+0x1b8>)
 80186b4:	4013      	ands	r3, r2
 80186b6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80186b8:	4b3b      	ldr	r3, [pc, #236]	; (80187a8 <HAL_GPIO_DeInit+0x1b8>)
 80186ba:	685a      	ldr	r2, [r3, #4]
 80186bc:	693b      	ldr	r3, [r7, #16]
 80186be:	43db      	mvns	r3, r3
 80186c0:	4939      	ldr	r1, [pc, #228]	; (80187a8 <HAL_GPIO_DeInit+0x1b8>)
 80186c2:	4013      	ands	r3, r2
 80186c4:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80186c6:	697b      	ldr	r3, [r7, #20]
 80186c8:	f003 0303 	and.w	r3, r3, #3
 80186cc:	009b      	lsls	r3, r3, #2
 80186ce:	220f      	movs	r2, #15
 80186d0:	fa02 f303 	lsl.w	r3, r2, r3
 80186d4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80186d6:	4a2f      	ldr	r2, [pc, #188]	; (8018794 <HAL_GPIO_DeInit+0x1a4>)
 80186d8:	697b      	ldr	r3, [r7, #20]
 80186da:	089b      	lsrs	r3, r3, #2
 80186dc:	3302      	adds	r3, #2
 80186de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	43da      	mvns	r2, r3
 80186e6:	482b      	ldr	r0, [pc, #172]	; (8018794 <HAL_GPIO_DeInit+0x1a4>)
 80186e8:	697b      	ldr	r3, [r7, #20]
 80186ea:	089b      	lsrs	r3, r3, #2
 80186ec:	400a      	ands	r2, r1
 80186ee:	3302      	adds	r3, #2
 80186f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	681a      	ldr	r2, [r3, #0]
 80186f8:	697b      	ldr	r3, [r7, #20]
 80186fa:	005b      	lsls	r3, r3, #1
 80186fc:	2103      	movs	r1, #3
 80186fe:	fa01 f303 	lsl.w	r3, r1, r3
 8018702:	431a      	orrs	r2, r3
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8018708:	697b      	ldr	r3, [r7, #20]
 801870a:	08da      	lsrs	r2, r3, #3
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	3208      	adds	r2, #8
 8018710:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018714:	697b      	ldr	r3, [r7, #20]
 8018716:	f003 0307 	and.w	r3, r3, #7
 801871a:	009b      	lsls	r3, r3, #2
 801871c:	220f      	movs	r2, #15
 801871e:	fa02 f303 	lsl.w	r3, r2, r3
 8018722:	43db      	mvns	r3, r3
 8018724:	697a      	ldr	r2, [r7, #20]
 8018726:	08d2      	lsrs	r2, r2, #3
 8018728:	4019      	ands	r1, r3
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	3208      	adds	r2, #8
 801872e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	68da      	ldr	r2, [r3, #12]
 8018736:	697b      	ldr	r3, [r7, #20]
 8018738:	005b      	lsls	r3, r3, #1
 801873a:	2103      	movs	r1, #3
 801873c:	fa01 f303 	lsl.w	r3, r1, r3
 8018740:	43db      	mvns	r3, r3
 8018742:	401a      	ands	r2, r3
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	685a      	ldr	r2, [r3, #4]
 801874c:	2101      	movs	r1, #1
 801874e:	697b      	ldr	r3, [r7, #20]
 8018750:	fa01 f303 	lsl.w	r3, r1, r3
 8018754:	43db      	mvns	r3, r3
 8018756:	401a      	ands	r2, r3
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	689a      	ldr	r2, [r3, #8]
 8018760:	697b      	ldr	r3, [r7, #20]
 8018762:	005b      	lsls	r3, r3, #1
 8018764:	2103      	movs	r1, #3
 8018766:	fa01 f303 	lsl.w	r3, r1, r3
 801876a:	43db      	mvns	r3, r3
 801876c:	401a      	ands	r2, r3
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	609a      	str	r2, [r3, #8]
    }

    position++;
 8018772:	697b      	ldr	r3, [r7, #20]
 8018774:	3301      	adds	r3, #1
 8018776:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8018778:	683a      	ldr	r2, [r7, #0]
 801877a:	697b      	ldr	r3, [r7, #20]
 801877c:	fa22 f303 	lsr.w	r3, r2, r3
 8018780:	2b00      	cmp	r3, #0
 8018782:	f47f af3d 	bne.w	8018600 <HAL_GPIO_DeInit+0x10>
  }
}
 8018786:	bf00      	nop
 8018788:	bf00      	nop
 801878a:	371c      	adds	r7, #28
 801878c:	46bd      	mov	sp, r7
 801878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018792:	4770      	bx	lr
 8018794:	40010000 	.word	0x40010000
 8018798:	48000400 	.word	0x48000400
 801879c:	48000800 	.word	0x48000800
 80187a0:	48000c00 	.word	0x48000c00
 80187a4:	48001000 	.word	0x48001000
 80187a8:	58000800 	.word	0x58000800

080187ac <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80187ac:	b480      	push	{r7}
 80187ae:	b085      	sub	sp, #20
 80187b0:	af00      	add	r7, sp, #0
 80187b2:	6078      	str	r0, [r7, #4]
 80187b4:	460b      	mov	r3, r1
 80187b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	691a      	ldr	r2, [r3, #16]
 80187bc:	887b      	ldrh	r3, [r7, #2]
 80187be:	4013      	ands	r3, r2
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d002      	beq.n	80187ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80187c4:	2301      	movs	r3, #1
 80187c6:	73fb      	strb	r3, [r7, #15]
 80187c8:	e001      	b.n	80187ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80187ca:	2300      	movs	r3, #0
 80187cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80187ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80187d0:	4618      	mov	r0, r3
 80187d2:	3714      	adds	r7, #20
 80187d4:	46bd      	mov	sp, r7
 80187d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187da:	4770      	bx	lr

080187dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80187dc:	b480      	push	{r7}
 80187de:	b083      	sub	sp, #12
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	6078      	str	r0, [r7, #4]
 80187e4:	460b      	mov	r3, r1
 80187e6:	807b      	strh	r3, [r7, #2]
 80187e8:	4613      	mov	r3, r2
 80187ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80187ec:	787b      	ldrb	r3, [r7, #1]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d003      	beq.n	80187fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80187f2:	887a      	ldrh	r2, [r7, #2]
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80187f8:	e002      	b.n	8018800 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80187fa:	887a      	ldrh	r2, [r7, #2]
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8018800:	bf00      	nop
 8018802:	370c      	adds	r7, #12
 8018804:	46bd      	mov	sp, r7
 8018806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801880a:	4770      	bx	lr

0801880c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801880c:	b480      	push	{r7}
 801880e:	b085      	sub	sp, #20
 8018810:	af00      	add	r7, sp, #0
 8018812:	6078      	str	r0, [r7, #4]
 8018814:	460b      	mov	r3, r1
 8018816:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	695b      	ldr	r3, [r3, #20]
 801881c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801881e:	887a      	ldrh	r2, [r7, #2]
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	4013      	ands	r3, r2
 8018824:	041a      	lsls	r2, r3, #16
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	43d9      	mvns	r1, r3
 801882a:	887b      	ldrh	r3, [r7, #2]
 801882c:	400b      	ands	r3, r1
 801882e:	431a      	orrs	r2, r3
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	619a      	str	r2, [r3, #24]
}
 8018834:	bf00      	nop
 8018836:	3714      	adds	r7, #20
 8018838:	46bd      	mov	sp, r7
 801883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883e:	4770      	bx	lr

08018840 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8018840:	b580      	push	{r7, lr}
 8018842:	b082      	sub	sp, #8
 8018844:	af00      	add	r7, sp, #0
 8018846:	4603      	mov	r3, r0
 8018848:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 801884a:	4b08      	ldr	r3, [pc, #32]	; (801886c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801884c:	68da      	ldr	r2, [r3, #12]
 801884e:	88fb      	ldrh	r3, [r7, #6]
 8018850:	4013      	ands	r3, r2
 8018852:	2b00      	cmp	r3, #0
 8018854:	d006      	beq.n	8018864 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8018856:	4a05      	ldr	r2, [pc, #20]	; (801886c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8018858:	88fb      	ldrh	r3, [r7, #6]
 801885a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801885c:	88fb      	ldrh	r3, [r7, #6]
 801885e:	4618      	mov	r0, r3
 8018860:	f7e8 fb0e 	bl	8000e80 <HAL_GPIO_EXTI_Callback>
  }
}
 8018864:	bf00      	nop
 8018866:	3708      	adds	r7, #8
 8018868:	46bd      	mov	sp, r7
 801886a:	bd80      	pop	{r7, pc}
 801886c:	58000800 	.word	0x58000800

08018870 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8018870:	b580      	push	{r7, lr}
 8018872:	b082      	sub	sp, #8
 8018874:	af00      	add	r7, sp, #0
 8018876:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	2b00      	cmp	r3, #0
 801887c:	d101      	bne.n	8018882 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801887e:	2301      	movs	r3, #1
 8018880:	e081      	b.n	8018986 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018888:	b2db      	uxtb	r3, r3
 801888a:	2b00      	cmp	r3, #0
 801888c:	d106      	bne.n	801889c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	2200      	movs	r2, #0
 8018892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8018896:	6878      	ldr	r0, [r7, #4]
 8018898:	f000 f8a8 	bl	80189ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	2224      	movs	r2, #36	; 0x24
 80188a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	681a      	ldr	r2, [r3, #0]
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	f022 0201 	bic.w	r2, r2, #1
 80188b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	685a      	ldr	r2, [r3, #4]
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80188c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	689a      	ldr	r2, [r3, #8]
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80188d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	68db      	ldr	r3, [r3, #12]
 80188d6:	2b01      	cmp	r3, #1
 80188d8:	d107      	bne.n	80188ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	689a      	ldr	r2, [r3, #8]
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80188e6:	609a      	str	r2, [r3, #8]
 80188e8:	e006      	b.n	80188f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	689a      	ldr	r2, [r3, #8]
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80188f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	68db      	ldr	r3, [r3, #12]
 80188fc:	2b02      	cmp	r3, #2
 80188fe:	d104      	bne.n	801890a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018908:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	685b      	ldr	r3, [r3, #4]
 8018910:	687a      	ldr	r2, [r7, #4]
 8018912:	6812      	ldr	r2, [r2, #0]
 8018914:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8018918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801891c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	68da      	ldr	r2, [r3, #12]
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801892c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	691a      	ldr	r2, [r3, #16]
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	695b      	ldr	r3, [r3, #20]
 8018936:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	699b      	ldr	r3, [r3, #24]
 801893e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	430a      	orrs	r2, r1
 8018946:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	69d9      	ldr	r1, [r3, #28]
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	6a1a      	ldr	r2, [r3, #32]
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	430a      	orrs	r2, r1
 8018956:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	681a      	ldr	r2, [r3, #0]
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	f042 0201 	orr.w	r2, r2, #1
 8018966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	2200      	movs	r2, #0
 801896c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	2220      	movs	r2, #32
 8018972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	2200      	movs	r2, #0
 801897a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	2200      	movs	r2, #0
 8018980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8018984:	2300      	movs	r3, #0
}
 8018986:	4618      	mov	r0, r3
 8018988:	3708      	adds	r7, #8
 801898a:	46bd      	mov	sp, r7
 801898c:	bd80      	pop	{r7, pc}

0801898e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 801898e:	b580      	push	{r7, lr}
 8018990:	b082      	sub	sp, #8
 8018992:	af00      	add	r7, sp, #0
 8018994:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	2b00      	cmp	r3, #0
 801899a:	d101      	bne.n	80189a0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 801899c:	2301      	movs	r3, #1
 801899e:	e021      	b.n	80189e4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	2224      	movs	r2, #36	; 0x24
 80189a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	681a      	ldr	r2, [r3, #0]
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	f022 0201 	bic.w	r2, r2, #1
 80189b6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80189b8:	6878      	ldr	r0, [r7, #4]
 80189ba:	f000 f821 	bl	8018a00 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	2200      	movs	r2, #0
 80189c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	2200      	movs	r2, #0
 80189c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	2200      	movs	r2, #0
 80189d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	2200      	movs	r2, #0
 80189d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	2200      	movs	r2, #0
 80189de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80189e2:	2300      	movs	r3, #0
}
 80189e4:	4618      	mov	r0, r3
 80189e6:	3708      	adds	r7, #8
 80189e8:	46bd      	mov	sp, r7
 80189ea:	bd80      	pop	{r7, pc}

080189ec <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80189ec:	b480      	push	{r7}
 80189ee:	b083      	sub	sp, #12
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80189f4:	bf00      	nop
 80189f6:	370c      	adds	r7, #12
 80189f8:	46bd      	mov	sp, r7
 80189fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189fe:	4770      	bx	lr

08018a00 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8018a00:	b480      	push	{r7}
 8018a02:	b083      	sub	sp, #12
 8018a04:	af00      	add	r7, sp, #0
 8018a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8018a08:	bf00      	nop
 8018a0a:	370c      	adds	r7, #12
 8018a0c:	46bd      	mov	sp, r7
 8018a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a12:	4770      	bx	lr

08018a14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8018a14:	b580      	push	{r7, lr}
 8018a16:	b088      	sub	sp, #32
 8018a18:	af02      	add	r7, sp, #8
 8018a1a:	60f8      	str	r0, [r7, #12]
 8018a1c:	607a      	str	r2, [r7, #4]
 8018a1e:	461a      	mov	r2, r3
 8018a20:	460b      	mov	r3, r1
 8018a22:	817b      	strh	r3, [r7, #10]
 8018a24:	4613      	mov	r3, r2
 8018a26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018a2e:	b2db      	uxtb	r3, r3
 8018a30:	2b20      	cmp	r3, #32
 8018a32:	f040 80da 	bne.w	8018bea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018a3c:	2b01      	cmp	r3, #1
 8018a3e:	d101      	bne.n	8018a44 <HAL_I2C_Master_Transmit+0x30>
 8018a40:	2302      	movs	r3, #2
 8018a42:	e0d3      	b.n	8018bec <HAL_I2C_Master_Transmit+0x1d8>
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	2201      	movs	r2, #1
 8018a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018a4c:	f7fe ffe2 	bl	8017a14 <HAL_GetTick>
 8018a50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8018a52:	697b      	ldr	r3, [r7, #20]
 8018a54:	9300      	str	r3, [sp, #0]
 8018a56:	2319      	movs	r3, #25
 8018a58:	2201      	movs	r2, #1
 8018a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018a5e:	68f8      	ldr	r0, [r7, #12]
 8018a60:	f000 fa00 	bl	8018e64 <I2C_WaitOnFlagUntilTimeout>
 8018a64:	4603      	mov	r3, r0
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d001      	beq.n	8018a6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8018a6a:	2301      	movs	r3, #1
 8018a6c:	e0be      	b.n	8018bec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	2221      	movs	r2, #33	; 0x21
 8018a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	2210      	movs	r2, #16
 8018a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018a7e:	68fb      	ldr	r3, [r7, #12]
 8018a80:	2200      	movs	r2, #0
 8018a82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	687a      	ldr	r2, [r7, #4]
 8018a88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	893a      	ldrh	r2, [r7, #8]
 8018a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	2200      	movs	r2, #0
 8018a94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018a96:	68fb      	ldr	r3, [r7, #12]
 8018a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a9a:	b29b      	uxth	r3, r3
 8018a9c:	2bff      	cmp	r3, #255	; 0xff
 8018a9e:	d90e      	bls.n	8018abe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	22ff      	movs	r2, #255	; 0xff
 8018aa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018aaa:	b2da      	uxtb	r2, r3
 8018aac:	8979      	ldrh	r1, [r7, #10]
 8018aae:	4b51      	ldr	r3, [pc, #324]	; (8018bf4 <HAL_I2C_Master_Transmit+0x1e0>)
 8018ab0:	9300      	str	r3, [sp, #0]
 8018ab2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018ab6:	68f8      	ldr	r0, [r7, #12]
 8018ab8:	f000 fc10 	bl	80192dc <I2C_TransferConfig>
 8018abc:	e06c      	b.n	8018b98 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ac2:	b29a      	uxth	r2, r3
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018acc:	b2da      	uxtb	r2, r3
 8018ace:	8979      	ldrh	r1, [r7, #10]
 8018ad0:	4b48      	ldr	r3, [pc, #288]	; (8018bf4 <HAL_I2C_Master_Transmit+0x1e0>)
 8018ad2:	9300      	str	r3, [sp, #0]
 8018ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018ad8:	68f8      	ldr	r0, [r7, #12]
 8018ada:	f000 fbff 	bl	80192dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8018ade:	e05b      	b.n	8018b98 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018ae0:	697a      	ldr	r2, [r7, #20]
 8018ae2:	6a39      	ldr	r1, [r7, #32]
 8018ae4:	68f8      	ldr	r0, [r7, #12]
 8018ae6:	f000 fa0c 	bl	8018f02 <I2C_WaitOnTXISFlagUntilTimeout>
 8018aea:	4603      	mov	r3, r0
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d001      	beq.n	8018af4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8018af0:	2301      	movs	r3, #1
 8018af2:	e07b      	b.n	8018bec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8018af4:	68fb      	ldr	r3, [r7, #12]
 8018af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018af8:	781a      	ldrb	r2, [r3, #0]
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b04:	1c5a      	adds	r2, r3, #1
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b0e:	b29b      	uxth	r3, r3
 8018b10:	3b01      	subs	r3, #1
 8018b12:	b29a      	uxth	r2, r3
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018b1c:	3b01      	subs	r3, #1
 8018b1e:	b29a      	uxth	r2, r3
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b28:	b29b      	uxth	r3, r3
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d034      	beq.n	8018b98 <HAL_I2C_Master_Transmit+0x184>
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d130      	bne.n	8018b98 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8018b36:	697b      	ldr	r3, [r7, #20]
 8018b38:	9300      	str	r3, [sp, #0]
 8018b3a:	6a3b      	ldr	r3, [r7, #32]
 8018b3c:	2200      	movs	r2, #0
 8018b3e:	2180      	movs	r1, #128	; 0x80
 8018b40:	68f8      	ldr	r0, [r7, #12]
 8018b42:	f000 f98f 	bl	8018e64 <I2C_WaitOnFlagUntilTimeout>
 8018b46:	4603      	mov	r3, r0
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	d001      	beq.n	8018b50 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8018b4c:	2301      	movs	r3, #1
 8018b4e:	e04d      	b.n	8018bec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b54:	b29b      	uxth	r3, r3
 8018b56:	2bff      	cmp	r3, #255	; 0xff
 8018b58:	d90e      	bls.n	8018b78 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	22ff      	movs	r2, #255	; 0xff
 8018b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018b64:	b2da      	uxtb	r2, r3
 8018b66:	8979      	ldrh	r1, [r7, #10]
 8018b68:	2300      	movs	r3, #0
 8018b6a:	9300      	str	r3, [sp, #0]
 8018b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018b70:	68f8      	ldr	r0, [r7, #12]
 8018b72:	f000 fbb3 	bl	80192dc <I2C_TransferConfig>
 8018b76:	e00f      	b.n	8018b98 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8018b78:	68fb      	ldr	r3, [r7, #12]
 8018b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b7c:	b29a      	uxth	r2, r3
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018b86:	b2da      	uxtb	r2, r3
 8018b88:	8979      	ldrh	r1, [r7, #10]
 8018b8a:	2300      	movs	r3, #0
 8018b8c:	9300      	str	r3, [sp, #0]
 8018b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018b92:	68f8      	ldr	r0, [r7, #12]
 8018b94:	f000 fba2 	bl	80192dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b9c:	b29b      	uxth	r3, r3
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d19e      	bne.n	8018ae0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018ba2:	697a      	ldr	r2, [r7, #20]
 8018ba4:	6a39      	ldr	r1, [r7, #32]
 8018ba6:	68f8      	ldr	r0, [r7, #12]
 8018ba8:	f000 f9f2 	bl	8018f90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8018bac:	4603      	mov	r3, r0
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d001      	beq.n	8018bb6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8018bb2:	2301      	movs	r3, #1
 8018bb4:	e01a      	b.n	8018bec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	2220      	movs	r2, #32
 8018bbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	6859      	ldr	r1, [r3, #4]
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	681a      	ldr	r2, [r3, #0]
 8018bc8:	4b0b      	ldr	r3, [pc, #44]	; (8018bf8 <HAL_I2C_Master_Transmit+0x1e4>)
 8018bca:	400b      	ands	r3, r1
 8018bcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	2220      	movs	r2, #32
 8018bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	2200      	movs	r2, #0
 8018bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	2200      	movs	r2, #0
 8018be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018be6:	2300      	movs	r3, #0
 8018be8:	e000      	b.n	8018bec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8018bea:	2302      	movs	r3, #2
  }
}
 8018bec:	4618      	mov	r0, r3
 8018bee:	3718      	adds	r7, #24
 8018bf0:	46bd      	mov	sp, r7
 8018bf2:	bd80      	pop	{r7, pc}
 8018bf4:	80002000 	.word	0x80002000
 8018bf8:	fe00e800 	.word	0xfe00e800

08018bfc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b088      	sub	sp, #32
 8018c00:	af02      	add	r7, sp, #8
 8018c02:	60f8      	str	r0, [r7, #12]
 8018c04:	607a      	str	r2, [r7, #4]
 8018c06:	461a      	mov	r2, r3
 8018c08:	460b      	mov	r3, r1
 8018c0a:	817b      	strh	r3, [r7, #10]
 8018c0c:	4613      	mov	r3, r2
 8018c0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018c16:	b2db      	uxtb	r3, r3
 8018c18:	2b20      	cmp	r3, #32
 8018c1a:	f040 80db 	bne.w	8018dd4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018c24:	2b01      	cmp	r3, #1
 8018c26:	d101      	bne.n	8018c2c <HAL_I2C_Master_Receive+0x30>
 8018c28:	2302      	movs	r3, #2
 8018c2a:	e0d4      	b.n	8018dd6 <HAL_I2C_Master_Receive+0x1da>
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	2201      	movs	r2, #1
 8018c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018c34:	f7fe feee 	bl	8017a14 <HAL_GetTick>
 8018c38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8018c3a:	697b      	ldr	r3, [r7, #20]
 8018c3c:	9300      	str	r3, [sp, #0]
 8018c3e:	2319      	movs	r3, #25
 8018c40:	2201      	movs	r2, #1
 8018c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018c46:	68f8      	ldr	r0, [r7, #12]
 8018c48:	f000 f90c 	bl	8018e64 <I2C_WaitOnFlagUntilTimeout>
 8018c4c:	4603      	mov	r3, r0
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d001      	beq.n	8018c56 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8018c52:	2301      	movs	r3, #1
 8018c54:	e0bf      	b.n	8018dd6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	2222      	movs	r2, #34	; 0x22
 8018c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8018c5e:	68fb      	ldr	r3, [r7, #12]
 8018c60:	2210      	movs	r2, #16
 8018c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018c66:	68fb      	ldr	r3, [r7, #12]
 8018c68:	2200      	movs	r2, #0
 8018c6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8018c6c:	68fb      	ldr	r3, [r7, #12]
 8018c6e:	687a      	ldr	r2, [r7, #4]
 8018c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8018c72:	68fb      	ldr	r3, [r7, #12]
 8018c74:	893a      	ldrh	r2, [r7, #8]
 8018c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8018c78:	68fb      	ldr	r3, [r7, #12]
 8018c7a:	2200      	movs	r2, #0
 8018c7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c82:	b29b      	uxth	r3, r3
 8018c84:	2bff      	cmp	r3, #255	; 0xff
 8018c86:	d90e      	bls.n	8018ca6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	22ff      	movs	r2, #255	; 0xff
 8018c8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8018c8e:	68fb      	ldr	r3, [r7, #12]
 8018c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018c92:	b2da      	uxtb	r2, r3
 8018c94:	8979      	ldrh	r1, [r7, #10]
 8018c96:	4b52      	ldr	r3, [pc, #328]	; (8018de0 <HAL_I2C_Master_Receive+0x1e4>)
 8018c98:	9300      	str	r3, [sp, #0]
 8018c9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018c9e:	68f8      	ldr	r0, [r7, #12]
 8018ca0:	f000 fb1c 	bl	80192dc <I2C_TransferConfig>
 8018ca4:	e06d      	b.n	8018d82 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018caa:	b29a      	uxth	r2, r3
 8018cac:	68fb      	ldr	r3, [r7, #12]
 8018cae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018cb4:	b2da      	uxtb	r2, r3
 8018cb6:	8979      	ldrh	r1, [r7, #10]
 8018cb8:	4b49      	ldr	r3, [pc, #292]	; (8018de0 <HAL_I2C_Master_Receive+0x1e4>)
 8018cba:	9300      	str	r3, [sp, #0]
 8018cbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018cc0:	68f8      	ldr	r0, [r7, #12]
 8018cc2:	f000 fb0b 	bl	80192dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8018cc6:	e05c      	b.n	8018d82 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018cc8:	697a      	ldr	r2, [r7, #20]
 8018cca:	6a39      	ldr	r1, [r7, #32]
 8018ccc:	68f8      	ldr	r0, [r7, #12]
 8018cce:	f000 f9a3 	bl	8019018 <I2C_WaitOnRXNEFlagUntilTimeout>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d001      	beq.n	8018cdc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8018cd8:	2301      	movs	r3, #1
 8018cda:	e07c      	b.n	8018dd6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ce6:	b2d2      	uxtb	r2, r2
 8018ce8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cee:	1c5a      	adds	r2, r3, #1
 8018cf0:	68fb      	ldr	r3, [r7, #12]
 8018cf2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8018cf4:	68fb      	ldr	r3, [r7, #12]
 8018cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018cf8:	3b01      	subs	r3, #1
 8018cfa:	b29a      	uxth	r2, r3
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d04:	b29b      	uxth	r3, r3
 8018d06:	3b01      	subs	r3, #1
 8018d08:	b29a      	uxth	r2, r3
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d12:	b29b      	uxth	r3, r3
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d034      	beq.n	8018d82 <HAL_I2C_Master_Receive+0x186>
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d130      	bne.n	8018d82 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8018d20:	697b      	ldr	r3, [r7, #20]
 8018d22:	9300      	str	r3, [sp, #0]
 8018d24:	6a3b      	ldr	r3, [r7, #32]
 8018d26:	2200      	movs	r2, #0
 8018d28:	2180      	movs	r1, #128	; 0x80
 8018d2a:	68f8      	ldr	r0, [r7, #12]
 8018d2c:	f000 f89a 	bl	8018e64 <I2C_WaitOnFlagUntilTimeout>
 8018d30:	4603      	mov	r3, r0
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d001      	beq.n	8018d3a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8018d36:	2301      	movs	r3, #1
 8018d38:	e04d      	b.n	8018dd6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d3e:	b29b      	uxth	r3, r3
 8018d40:	2bff      	cmp	r3, #255	; 0xff
 8018d42:	d90e      	bls.n	8018d62 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	22ff      	movs	r2, #255	; 0xff
 8018d48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018d4e:	b2da      	uxtb	r2, r3
 8018d50:	8979      	ldrh	r1, [r7, #10]
 8018d52:	2300      	movs	r3, #0
 8018d54:	9300      	str	r3, [sp, #0]
 8018d56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018d5a:	68f8      	ldr	r0, [r7, #12]
 8018d5c:	f000 fabe 	bl	80192dc <I2C_TransferConfig>
 8018d60:	e00f      	b.n	8018d82 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8018d62:	68fb      	ldr	r3, [r7, #12]
 8018d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d66:	b29a      	uxth	r2, r3
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018d70:	b2da      	uxtb	r2, r3
 8018d72:	8979      	ldrh	r1, [r7, #10]
 8018d74:	2300      	movs	r3, #0
 8018d76:	9300      	str	r3, [sp, #0]
 8018d78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018d7c:	68f8      	ldr	r0, [r7, #12]
 8018d7e:	f000 faad 	bl	80192dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d86:	b29b      	uxth	r3, r3
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d19d      	bne.n	8018cc8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018d8c:	697a      	ldr	r2, [r7, #20]
 8018d8e:	6a39      	ldr	r1, [r7, #32]
 8018d90:	68f8      	ldr	r0, [r7, #12]
 8018d92:	f000 f8fd 	bl	8018f90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8018d96:	4603      	mov	r3, r0
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d001      	beq.n	8018da0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8018d9c:	2301      	movs	r3, #1
 8018d9e:	e01a      	b.n	8018dd6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	2220      	movs	r2, #32
 8018da6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	6859      	ldr	r1, [r3, #4]
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	681a      	ldr	r2, [r3, #0]
 8018db2:	4b0c      	ldr	r3, [pc, #48]	; (8018de4 <HAL_I2C_Master_Receive+0x1e8>)
 8018db4:	400b      	ands	r3, r1
 8018db6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	2220      	movs	r2, #32
 8018dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	2200      	movs	r2, #0
 8018dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	e000      	b.n	8018dd6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8018dd4:	2302      	movs	r3, #2
  }
}
 8018dd6:	4618      	mov	r0, r3
 8018dd8:	3718      	adds	r7, #24
 8018dda:	46bd      	mov	sp, r7
 8018ddc:	bd80      	pop	{r7, pc}
 8018dde:	bf00      	nop
 8018de0:	80002400 	.word	0x80002400
 8018de4:	fe00e800 	.word	0xfe00e800

08018de8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8018de8:	b480      	push	{r7}
 8018dea:	b083      	sub	sp, #12
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018df6:	b2db      	uxtb	r3, r3
}
 8018df8:	4618      	mov	r0, r3
 8018dfa:	370c      	adds	r7, #12
 8018dfc:	46bd      	mov	sp, r7
 8018dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e02:	4770      	bx	lr

08018e04 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8018e04:	b480      	push	{r7}
 8018e06:	b083      	sub	sp, #12
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8018e10:	4618      	mov	r0, r3
 8018e12:	370c      	adds	r7, #12
 8018e14:	46bd      	mov	sp, r7
 8018e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e1a:	4770      	bx	lr

08018e1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8018e1c:	b480      	push	{r7}
 8018e1e:	b083      	sub	sp, #12
 8018e20:	af00      	add	r7, sp, #0
 8018e22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	699b      	ldr	r3, [r3, #24]
 8018e2a:	f003 0302 	and.w	r3, r3, #2
 8018e2e:	2b02      	cmp	r3, #2
 8018e30:	d103      	bne.n	8018e3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	2200      	movs	r2, #0
 8018e38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	699b      	ldr	r3, [r3, #24]
 8018e40:	f003 0301 	and.w	r3, r3, #1
 8018e44:	2b01      	cmp	r3, #1
 8018e46:	d007      	beq.n	8018e58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	699a      	ldr	r2, [r3, #24]
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	f042 0201 	orr.w	r2, r2, #1
 8018e56:	619a      	str	r2, [r3, #24]
  }
}
 8018e58:	bf00      	nop
 8018e5a:	370c      	adds	r7, #12
 8018e5c:	46bd      	mov	sp, r7
 8018e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e62:	4770      	bx	lr

08018e64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8018e64:	b580      	push	{r7, lr}
 8018e66:	b084      	sub	sp, #16
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	60f8      	str	r0, [r7, #12]
 8018e6c:	60b9      	str	r1, [r7, #8]
 8018e6e:	603b      	str	r3, [r7, #0]
 8018e70:	4613      	mov	r3, r2
 8018e72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018e74:	e031      	b.n	8018eda <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018e76:	683b      	ldr	r3, [r7, #0]
 8018e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e7c:	d02d      	beq.n	8018eda <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018e7e:	f7fe fdc9 	bl	8017a14 <HAL_GetTick>
 8018e82:	4602      	mov	r2, r0
 8018e84:	69bb      	ldr	r3, [r7, #24]
 8018e86:	1ad3      	subs	r3, r2, r3
 8018e88:	683a      	ldr	r2, [r7, #0]
 8018e8a:	429a      	cmp	r2, r3
 8018e8c:	d302      	bcc.n	8018e94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8018e8e:	683b      	ldr	r3, [r7, #0]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d122      	bne.n	8018eda <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8018e94:	68fb      	ldr	r3, [r7, #12]
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	699a      	ldr	r2, [r3, #24]
 8018e9a:	68bb      	ldr	r3, [r7, #8]
 8018e9c:	4013      	ands	r3, r2
 8018e9e:	68ba      	ldr	r2, [r7, #8]
 8018ea0:	429a      	cmp	r2, r3
 8018ea2:	bf0c      	ite	eq
 8018ea4:	2301      	moveq	r3, #1
 8018ea6:	2300      	movne	r3, #0
 8018ea8:	b2db      	uxtb	r3, r3
 8018eaa:	461a      	mov	r2, r3
 8018eac:	79fb      	ldrb	r3, [r7, #7]
 8018eae:	429a      	cmp	r2, r3
 8018eb0:	d113      	bne.n	8018eda <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018eb6:	f043 0220 	orr.w	r2, r3, #32
 8018eba:	68fb      	ldr	r3, [r7, #12]
 8018ebc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8018ebe:	68fb      	ldr	r3, [r7, #12]
 8018ec0:	2220      	movs	r2, #32
 8018ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	2200      	movs	r2, #0
 8018eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018ece:	68fb      	ldr	r3, [r7, #12]
 8018ed0:	2200      	movs	r2, #0
 8018ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8018ed6:	2301      	movs	r3, #1
 8018ed8:	e00f      	b.n	8018efa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018eda:	68fb      	ldr	r3, [r7, #12]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	699a      	ldr	r2, [r3, #24]
 8018ee0:	68bb      	ldr	r3, [r7, #8]
 8018ee2:	4013      	ands	r3, r2
 8018ee4:	68ba      	ldr	r2, [r7, #8]
 8018ee6:	429a      	cmp	r2, r3
 8018ee8:	bf0c      	ite	eq
 8018eea:	2301      	moveq	r3, #1
 8018eec:	2300      	movne	r3, #0
 8018eee:	b2db      	uxtb	r3, r3
 8018ef0:	461a      	mov	r2, r3
 8018ef2:	79fb      	ldrb	r3, [r7, #7]
 8018ef4:	429a      	cmp	r2, r3
 8018ef6:	d0be      	beq.n	8018e76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018ef8:	2300      	movs	r3, #0
}
 8018efa:	4618      	mov	r0, r3
 8018efc:	3710      	adds	r7, #16
 8018efe:	46bd      	mov	sp, r7
 8018f00:	bd80      	pop	{r7, pc}

08018f02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018f02:	b580      	push	{r7, lr}
 8018f04:	b084      	sub	sp, #16
 8018f06:	af00      	add	r7, sp, #0
 8018f08:	60f8      	str	r0, [r7, #12]
 8018f0a:	60b9      	str	r1, [r7, #8]
 8018f0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018f0e:	e033      	b.n	8018f78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018f10:	687a      	ldr	r2, [r7, #4]
 8018f12:	68b9      	ldr	r1, [r7, #8]
 8018f14:	68f8      	ldr	r0, [r7, #12]
 8018f16:	f000 f901 	bl	801911c <I2C_IsErrorOccurred>
 8018f1a:	4603      	mov	r3, r0
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d001      	beq.n	8018f24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018f20:	2301      	movs	r3, #1
 8018f22:	e031      	b.n	8018f88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018f24:	68bb      	ldr	r3, [r7, #8]
 8018f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f2a:	d025      	beq.n	8018f78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018f2c:	f7fe fd72 	bl	8017a14 <HAL_GetTick>
 8018f30:	4602      	mov	r2, r0
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	1ad3      	subs	r3, r2, r3
 8018f36:	68ba      	ldr	r2, [r7, #8]
 8018f38:	429a      	cmp	r2, r3
 8018f3a:	d302      	bcc.n	8018f42 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8018f3c:	68bb      	ldr	r3, [r7, #8]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d11a      	bne.n	8018f78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	699b      	ldr	r3, [r3, #24]
 8018f48:	f003 0302 	and.w	r3, r3, #2
 8018f4c:	2b02      	cmp	r3, #2
 8018f4e:	d013      	beq.n	8018f78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f54:	f043 0220 	orr.w	r2, r3, #32
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	2220      	movs	r2, #32
 8018f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	2200      	movs	r2, #0
 8018f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	2200      	movs	r2, #0
 8018f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8018f74:	2301      	movs	r3, #1
 8018f76:	e007      	b.n	8018f88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018f78:	68fb      	ldr	r3, [r7, #12]
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	699b      	ldr	r3, [r3, #24]
 8018f7e:	f003 0302 	and.w	r3, r3, #2
 8018f82:	2b02      	cmp	r3, #2
 8018f84:	d1c4      	bne.n	8018f10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8018f86:	2300      	movs	r3, #0
}
 8018f88:	4618      	mov	r0, r3
 8018f8a:	3710      	adds	r7, #16
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	bd80      	pop	{r7, pc}

08018f90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b084      	sub	sp, #16
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	60f8      	str	r0, [r7, #12]
 8018f98:	60b9      	str	r1, [r7, #8]
 8018f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018f9c:	e02f      	b.n	8018ffe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018f9e:	687a      	ldr	r2, [r7, #4]
 8018fa0:	68b9      	ldr	r1, [r7, #8]
 8018fa2:	68f8      	ldr	r0, [r7, #12]
 8018fa4:	f000 f8ba 	bl	801911c <I2C_IsErrorOccurred>
 8018fa8:	4603      	mov	r3, r0
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d001      	beq.n	8018fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018fae:	2301      	movs	r3, #1
 8018fb0:	e02d      	b.n	801900e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018fb2:	f7fe fd2f 	bl	8017a14 <HAL_GetTick>
 8018fb6:	4602      	mov	r2, r0
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	1ad3      	subs	r3, r2, r3
 8018fbc:	68ba      	ldr	r2, [r7, #8]
 8018fbe:	429a      	cmp	r2, r3
 8018fc0:	d302      	bcc.n	8018fc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8018fc2:	68bb      	ldr	r3, [r7, #8]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d11a      	bne.n	8018ffe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	699b      	ldr	r3, [r3, #24]
 8018fce:	f003 0320 	and.w	r3, r3, #32
 8018fd2:	2b20      	cmp	r3, #32
 8018fd4:	d013      	beq.n	8018ffe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018fda:	f043 0220 	orr.w	r2, r3, #32
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018fe2:	68fb      	ldr	r3, [r7, #12]
 8018fe4:	2220      	movs	r2, #32
 8018fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	2200      	movs	r2, #0
 8018fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018ff2:	68fb      	ldr	r3, [r7, #12]
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8018ffa:	2301      	movs	r3, #1
 8018ffc:	e007      	b.n	801900e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	699b      	ldr	r3, [r3, #24]
 8019004:	f003 0320 	and.w	r3, r3, #32
 8019008:	2b20      	cmp	r3, #32
 801900a:	d1c8      	bne.n	8018f9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801900c:	2300      	movs	r3, #0
}
 801900e:	4618      	mov	r0, r3
 8019010:	3710      	adds	r7, #16
 8019012:	46bd      	mov	sp, r7
 8019014:	bd80      	pop	{r7, pc}
	...

08019018 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8019018:	b580      	push	{r7, lr}
 801901a:	b084      	sub	sp, #16
 801901c:	af00      	add	r7, sp, #0
 801901e:	60f8      	str	r0, [r7, #12]
 8019020:	60b9      	str	r1, [r7, #8]
 8019022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8019024:	e06b      	b.n	80190fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8019026:	687a      	ldr	r2, [r7, #4]
 8019028:	68b9      	ldr	r1, [r7, #8]
 801902a:	68f8      	ldr	r0, [r7, #12]
 801902c:	f000 f876 	bl	801911c <I2C_IsErrorOccurred>
 8019030:	4603      	mov	r3, r0
 8019032:	2b00      	cmp	r3, #0
 8019034:	d001      	beq.n	801903a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8019036:	2301      	movs	r3, #1
 8019038:	e069      	b.n	801910e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	699b      	ldr	r3, [r3, #24]
 8019040:	f003 0320 	and.w	r3, r3, #32
 8019044:	2b20      	cmp	r3, #32
 8019046:	d138      	bne.n	80190ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	699b      	ldr	r3, [r3, #24]
 801904e:	f003 0304 	and.w	r3, r3, #4
 8019052:	2b04      	cmp	r3, #4
 8019054:	d105      	bne.n	8019062 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8019056:	68fb      	ldr	r3, [r7, #12]
 8019058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801905a:	2b00      	cmp	r3, #0
 801905c:	d001      	beq.n	8019062 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801905e:	2300      	movs	r3, #0
 8019060:	e055      	b.n	801910e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	699b      	ldr	r3, [r3, #24]
 8019068:	f003 0310 	and.w	r3, r3, #16
 801906c:	2b10      	cmp	r3, #16
 801906e:	d107      	bne.n	8019080 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	2210      	movs	r2, #16
 8019076:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8019078:	68fb      	ldr	r3, [r7, #12]
 801907a:	2204      	movs	r2, #4
 801907c:	645a      	str	r2, [r3, #68]	; 0x44
 801907e:	e002      	b.n	8019086 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	2200      	movs	r2, #0
 8019084:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	2220      	movs	r2, #32
 801908c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	6859      	ldr	r1, [r3, #4]
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	681a      	ldr	r2, [r3, #0]
 8019098:	4b1f      	ldr	r3, [pc, #124]	; (8019118 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 801909a:	400b      	ands	r3, r1
 801909c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801909e:	68fb      	ldr	r3, [r7, #12]
 80190a0:	2220      	movs	r2, #32
 80190a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80190a6:	68fb      	ldr	r3, [r7, #12]
 80190a8:	2200      	movs	r2, #0
 80190aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	2200      	movs	r2, #0
 80190b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80190b6:	2301      	movs	r3, #1
 80190b8:	e029      	b.n	801910e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80190ba:	f7fe fcab 	bl	8017a14 <HAL_GetTick>
 80190be:	4602      	mov	r2, r0
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	1ad3      	subs	r3, r2, r3
 80190c4:	68ba      	ldr	r2, [r7, #8]
 80190c6:	429a      	cmp	r2, r3
 80190c8:	d302      	bcc.n	80190d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80190ca:	68bb      	ldr	r3, [r7, #8]
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d116      	bne.n	80190fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	699b      	ldr	r3, [r3, #24]
 80190d6:	f003 0304 	and.w	r3, r3, #4
 80190da:	2b04      	cmp	r3, #4
 80190dc:	d00f      	beq.n	80190fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190e2:	f043 0220 	orr.w	r2, r3, #32
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80190ea:	68fb      	ldr	r3, [r7, #12]
 80190ec:	2220      	movs	r2, #32
 80190ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	2200      	movs	r2, #0
 80190f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80190fa:	2301      	movs	r3, #1
 80190fc:	e007      	b.n	801910e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	699b      	ldr	r3, [r3, #24]
 8019104:	f003 0304 	and.w	r3, r3, #4
 8019108:	2b04      	cmp	r3, #4
 801910a:	d18c      	bne.n	8019026 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801910c:	2300      	movs	r3, #0
}
 801910e:	4618      	mov	r0, r3
 8019110:	3710      	adds	r7, #16
 8019112:	46bd      	mov	sp, r7
 8019114:	bd80      	pop	{r7, pc}
 8019116:	bf00      	nop
 8019118:	fe00e800 	.word	0xfe00e800

0801911c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801911c:	b580      	push	{r7, lr}
 801911e:	b08a      	sub	sp, #40	; 0x28
 8019120:	af00      	add	r7, sp, #0
 8019122:	60f8      	str	r0, [r7, #12]
 8019124:	60b9      	str	r1, [r7, #8]
 8019126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019128:	2300      	movs	r3, #0
 801912a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	699b      	ldr	r3, [r3, #24]
 8019134:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8019136:	2300      	movs	r3, #0
 8019138:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801913e:	69bb      	ldr	r3, [r7, #24]
 8019140:	f003 0310 	and.w	r3, r3, #16
 8019144:	2b00      	cmp	r3, #0
 8019146:	d068      	beq.n	801921a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	2210      	movs	r2, #16
 801914e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8019150:	e049      	b.n	80191e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8019152:	68bb      	ldr	r3, [r7, #8]
 8019154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019158:	d045      	beq.n	80191e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801915a:	f7fe fc5b 	bl	8017a14 <HAL_GetTick>
 801915e:	4602      	mov	r2, r0
 8019160:	69fb      	ldr	r3, [r7, #28]
 8019162:	1ad3      	subs	r3, r2, r3
 8019164:	68ba      	ldr	r2, [r7, #8]
 8019166:	429a      	cmp	r2, r3
 8019168:	d302      	bcc.n	8019170 <I2C_IsErrorOccurred+0x54>
 801916a:	68bb      	ldr	r3, [r7, #8]
 801916c:	2b00      	cmp	r3, #0
 801916e:	d13a      	bne.n	80191e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	685b      	ldr	r3, [r3, #4]
 8019176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801917a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019182:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	699b      	ldr	r3, [r3, #24]
 801918a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801918e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019192:	d121      	bne.n	80191d8 <I2C_IsErrorOccurred+0xbc>
 8019194:	697b      	ldr	r3, [r7, #20]
 8019196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801919a:	d01d      	beq.n	80191d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 801919c:	7cfb      	ldrb	r3, [r7, #19]
 801919e:	2b20      	cmp	r3, #32
 80191a0:	d01a      	beq.n	80191d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	685a      	ldr	r2, [r3, #4]
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	681b      	ldr	r3, [r3, #0]
 80191ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80191b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80191b2:	f7fe fc2f 	bl	8017a14 <HAL_GetTick>
 80191b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80191b8:	e00e      	b.n	80191d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80191ba:	f7fe fc2b 	bl	8017a14 <HAL_GetTick>
 80191be:	4602      	mov	r2, r0
 80191c0:	69fb      	ldr	r3, [r7, #28]
 80191c2:	1ad3      	subs	r3, r2, r3
 80191c4:	2b19      	cmp	r3, #25
 80191c6:	d907      	bls.n	80191d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80191c8:	6a3b      	ldr	r3, [r7, #32]
 80191ca:	f043 0320 	orr.w	r3, r3, #32
 80191ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80191d0:	2301      	movs	r3, #1
 80191d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80191d6:	e006      	b.n	80191e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80191d8:	68fb      	ldr	r3, [r7, #12]
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	699b      	ldr	r3, [r3, #24]
 80191de:	f003 0320 	and.w	r3, r3, #32
 80191e2:	2b20      	cmp	r3, #32
 80191e4:	d1e9      	bne.n	80191ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	699b      	ldr	r3, [r3, #24]
 80191ec:	f003 0320 	and.w	r3, r3, #32
 80191f0:	2b20      	cmp	r3, #32
 80191f2:	d003      	beq.n	80191fc <I2C_IsErrorOccurred+0xe0>
 80191f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d0aa      	beq.n	8019152 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80191fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019200:	2b00      	cmp	r3, #0
 8019202:	d103      	bne.n	801920c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	2220      	movs	r2, #32
 801920a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801920c:	6a3b      	ldr	r3, [r7, #32]
 801920e:	f043 0304 	orr.w	r3, r3, #4
 8019212:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8019214:	2301      	movs	r3, #1
 8019216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	699b      	ldr	r3, [r3, #24]
 8019220:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8019222:	69bb      	ldr	r3, [r7, #24]
 8019224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019228:	2b00      	cmp	r3, #0
 801922a:	d00b      	beq.n	8019244 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801922c:	6a3b      	ldr	r3, [r7, #32]
 801922e:	f043 0301 	orr.w	r3, r3, #1
 8019232:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	f44f 7280 	mov.w	r2, #256	; 0x100
 801923c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801923e:	2301      	movs	r3, #1
 8019240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8019244:	69bb      	ldr	r3, [r7, #24]
 8019246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801924a:	2b00      	cmp	r3, #0
 801924c:	d00b      	beq.n	8019266 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801924e:	6a3b      	ldr	r3, [r7, #32]
 8019250:	f043 0308 	orr.w	r3, r3, #8
 8019254:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801925e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8019260:	2301      	movs	r3, #1
 8019262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8019266:	69bb      	ldr	r3, [r7, #24]
 8019268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801926c:	2b00      	cmp	r3, #0
 801926e:	d00b      	beq.n	8019288 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8019270:	6a3b      	ldr	r3, [r7, #32]
 8019272:	f043 0302 	orr.w	r3, r3, #2
 8019276:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019280:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8019282:	2301      	movs	r3, #1
 8019284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8019288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801928c:	2b00      	cmp	r3, #0
 801928e:	d01c      	beq.n	80192ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8019290:	68f8      	ldr	r0, [r7, #12]
 8019292:	f7ff fdc3 	bl	8018e1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8019296:	68fb      	ldr	r3, [r7, #12]
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	6859      	ldr	r1, [r3, #4]
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	681a      	ldr	r2, [r3, #0]
 80192a0:	4b0d      	ldr	r3, [pc, #52]	; (80192d8 <I2C_IsErrorOccurred+0x1bc>)
 80192a2:	400b      	ands	r3, r1
 80192a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80192a6:	68fb      	ldr	r3, [r7, #12]
 80192a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80192aa:	6a3b      	ldr	r3, [r7, #32]
 80192ac:	431a      	orrs	r2, r3
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	2220      	movs	r2, #32
 80192b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	2200      	movs	r2, #0
 80192be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	2200      	movs	r2, #0
 80192c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80192ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80192ce:	4618      	mov	r0, r3
 80192d0:	3728      	adds	r7, #40	; 0x28
 80192d2:	46bd      	mov	sp, r7
 80192d4:	bd80      	pop	{r7, pc}
 80192d6:	bf00      	nop
 80192d8:	fe00e800 	.word	0xfe00e800

080192dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80192dc:	b480      	push	{r7}
 80192de:	b087      	sub	sp, #28
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	60f8      	str	r0, [r7, #12]
 80192e4:	607b      	str	r3, [r7, #4]
 80192e6:	460b      	mov	r3, r1
 80192e8:	817b      	strh	r3, [r7, #10]
 80192ea:	4613      	mov	r3, r2
 80192ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80192ee:	897b      	ldrh	r3, [r7, #10]
 80192f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80192f4:	7a7b      	ldrb	r3, [r7, #9]
 80192f6:	041b      	lsls	r3, r3, #16
 80192f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80192fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8019302:	6a3b      	ldr	r3, [r7, #32]
 8019304:	4313      	orrs	r3, r2
 8019306:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801930a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	685a      	ldr	r2, [r3, #4]
 8019312:	6a3b      	ldr	r3, [r7, #32]
 8019314:	0d5b      	lsrs	r3, r3, #21
 8019316:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801931a:	4b08      	ldr	r3, [pc, #32]	; (801933c <I2C_TransferConfig+0x60>)
 801931c:	430b      	orrs	r3, r1
 801931e:	43db      	mvns	r3, r3
 8019320:	ea02 0103 	and.w	r1, r2, r3
 8019324:	68fb      	ldr	r3, [r7, #12]
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	697a      	ldr	r2, [r7, #20]
 801932a:	430a      	orrs	r2, r1
 801932c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801932e:	bf00      	nop
 8019330:	371c      	adds	r7, #28
 8019332:	46bd      	mov	sp, r7
 8019334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019338:	4770      	bx	lr
 801933a:	bf00      	nop
 801933c:	03ff63ff 	.word	0x03ff63ff

08019340 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8019340:	b480      	push	{r7}
 8019342:	b083      	sub	sp, #12
 8019344:	af00      	add	r7, sp, #0
 8019346:	6078      	str	r0, [r7, #4]
 8019348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019350:	b2db      	uxtb	r3, r3
 8019352:	2b20      	cmp	r3, #32
 8019354:	d138      	bne.n	80193c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801935c:	2b01      	cmp	r3, #1
 801935e:	d101      	bne.n	8019364 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8019360:	2302      	movs	r3, #2
 8019362:	e032      	b.n	80193ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	2201      	movs	r2, #1
 8019368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	2224      	movs	r2, #36	; 0x24
 8019370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	681a      	ldr	r2, [r3, #0]
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	f022 0201 	bic.w	r2, r2, #1
 8019382:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	681a      	ldr	r2, [r3, #0]
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8019392:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	6819      	ldr	r1, [r3, #0]
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	683a      	ldr	r2, [r7, #0]
 80193a0:	430a      	orrs	r2, r1
 80193a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	681a      	ldr	r2, [r3, #0]
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	f042 0201 	orr.w	r2, r2, #1
 80193b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	2220      	movs	r2, #32
 80193b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	2200      	movs	r2, #0
 80193c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80193c4:	2300      	movs	r3, #0
 80193c6:	e000      	b.n	80193ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80193c8:	2302      	movs	r3, #2
  }
}
 80193ca:	4618      	mov	r0, r3
 80193cc:	370c      	adds	r7, #12
 80193ce:	46bd      	mov	sp, r7
 80193d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193d4:	4770      	bx	lr

080193d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80193d6:	b480      	push	{r7}
 80193d8:	b085      	sub	sp, #20
 80193da:	af00      	add	r7, sp, #0
 80193dc:	6078      	str	r0, [r7, #4]
 80193de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80193e6:	b2db      	uxtb	r3, r3
 80193e8:	2b20      	cmp	r3, #32
 80193ea:	d139      	bne.n	8019460 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80193f2:	2b01      	cmp	r3, #1
 80193f4:	d101      	bne.n	80193fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80193f6:	2302      	movs	r3, #2
 80193f8:	e033      	b.n	8019462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	2201      	movs	r2, #1
 80193fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	2224      	movs	r2, #36	; 0x24
 8019406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	681a      	ldr	r2, [r3, #0]
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	f022 0201 	bic.w	r2, r2, #1
 8019418:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8019428:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801942a:	683b      	ldr	r3, [r7, #0]
 801942c:	021b      	lsls	r3, r3, #8
 801942e:	68fa      	ldr	r2, [r7, #12]
 8019430:	4313      	orrs	r3, r2
 8019432:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	68fa      	ldr	r2, [r7, #12]
 801943a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	681a      	ldr	r2, [r3, #0]
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	f042 0201 	orr.w	r2, r2, #1
 801944a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	2220      	movs	r2, #32
 8019450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	2200      	movs	r2, #0
 8019458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801945c:	2300      	movs	r3, #0
 801945e:	e000      	b.n	8019462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8019460:	2302      	movs	r3, #2
  }
}
 8019462:	4618      	mov	r0, r3
 8019464:	3714      	adds	r7, #20
 8019466:	46bd      	mov	sp, r7
 8019468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801946c:	4770      	bx	lr

0801946e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801946e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019470:	b08b      	sub	sp, #44	; 0x2c
 8019472:	af06      	add	r7, sp, #24
 8019474:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	2b00      	cmp	r3, #0
 801947a:	d101      	bne.n	8019480 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801947c:	2301      	movs	r3, #1
 801947e:	e0cb      	b.n	8019618 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8019486:	b2db      	uxtb	r3, r3
 8019488:	2b00      	cmp	r3, #0
 801948a:	d106      	bne.n	801949a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	2200      	movs	r2, #0
 8019490:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019494:	6878      	ldr	r0, [r7, #4]
 8019496:	f7ea f90f 	bl	80036b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	2203      	movs	r2, #3
 801949e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	4618      	mov	r0, r3
 80194a8:	f003 fb98 	bl	801cbdc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80194ac:	2300      	movs	r3, #0
 80194ae:	73fb      	strb	r3, [r7, #15]
 80194b0:	e040      	b.n	8019534 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80194b2:	7bfb      	ldrb	r3, [r7, #15]
 80194b4:	6879      	ldr	r1, [r7, #4]
 80194b6:	1c5a      	adds	r2, r3, #1
 80194b8:	4613      	mov	r3, r2
 80194ba:	009b      	lsls	r3, r3, #2
 80194bc:	4413      	add	r3, r2
 80194be:	00db      	lsls	r3, r3, #3
 80194c0:	440b      	add	r3, r1
 80194c2:	3301      	adds	r3, #1
 80194c4:	2201      	movs	r2, #1
 80194c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80194c8:	7bfb      	ldrb	r3, [r7, #15]
 80194ca:	6879      	ldr	r1, [r7, #4]
 80194cc:	1c5a      	adds	r2, r3, #1
 80194ce:	4613      	mov	r3, r2
 80194d0:	009b      	lsls	r3, r3, #2
 80194d2:	4413      	add	r3, r2
 80194d4:	00db      	lsls	r3, r3, #3
 80194d6:	440b      	add	r3, r1
 80194d8:	7bfa      	ldrb	r2, [r7, #15]
 80194da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80194dc:	7bfb      	ldrb	r3, [r7, #15]
 80194de:	6879      	ldr	r1, [r7, #4]
 80194e0:	1c5a      	adds	r2, r3, #1
 80194e2:	4613      	mov	r3, r2
 80194e4:	009b      	lsls	r3, r3, #2
 80194e6:	4413      	add	r3, r2
 80194e8:	00db      	lsls	r3, r3, #3
 80194ea:	440b      	add	r3, r1
 80194ec:	3303      	adds	r3, #3
 80194ee:	2200      	movs	r2, #0
 80194f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80194f2:	7bfa      	ldrb	r2, [r7, #15]
 80194f4:	6879      	ldr	r1, [r7, #4]
 80194f6:	4613      	mov	r3, r2
 80194f8:	009b      	lsls	r3, r3, #2
 80194fa:	4413      	add	r3, r2
 80194fc:	00db      	lsls	r3, r3, #3
 80194fe:	440b      	add	r3, r1
 8019500:	3338      	adds	r3, #56	; 0x38
 8019502:	2200      	movs	r2, #0
 8019504:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8019506:	7bfa      	ldrb	r2, [r7, #15]
 8019508:	6879      	ldr	r1, [r7, #4]
 801950a:	4613      	mov	r3, r2
 801950c:	009b      	lsls	r3, r3, #2
 801950e:	4413      	add	r3, r2
 8019510:	00db      	lsls	r3, r3, #3
 8019512:	440b      	add	r3, r1
 8019514:	333c      	adds	r3, #60	; 0x3c
 8019516:	2200      	movs	r2, #0
 8019518:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801951a:	7bfa      	ldrb	r2, [r7, #15]
 801951c:	6879      	ldr	r1, [r7, #4]
 801951e:	4613      	mov	r3, r2
 8019520:	009b      	lsls	r3, r3, #2
 8019522:	4413      	add	r3, r2
 8019524:	00db      	lsls	r3, r3, #3
 8019526:	440b      	add	r3, r1
 8019528:	3340      	adds	r3, #64	; 0x40
 801952a:	2200      	movs	r2, #0
 801952c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801952e:	7bfb      	ldrb	r3, [r7, #15]
 8019530:	3301      	adds	r3, #1
 8019532:	73fb      	strb	r3, [r7, #15]
 8019534:	7bfa      	ldrb	r2, [r7, #15]
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	685b      	ldr	r3, [r3, #4]
 801953a:	429a      	cmp	r2, r3
 801953c:	d3b9      	bcc.n	80194b2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801953e:	2300      	movs	r3, #0
 8019540:	73fb      	strb	r3, [r7, #15]
 8019542:	e044      	b.n	80195ce <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8019544:	7bfa      	ldrb	r2, [r7, #15]
 8019546:	6879      	ldr	r1, [r7, #4]
 8019548:	4613      	mov	r3, r2
 801954a:	009b      	lsls	r3, r3, #2
 801954c:	4413      	add	r3, r2
 801954e:	00db      	lsls	r3, r3, #3
 8019550:	440b      	add	r3, r1
 8019552:	f203 1369 	addw	r3, r3, #361	; 0x169
 8019556:	2200      	movs	r2, #0
 8019558:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801955a:	7bfa      	ldrb	r2, [r7, #15]
 801955c:	6879      	ldr	r1, [r7, #4]
 801955e:	4613      	mov	r3, r2
 8019560:	009b      	lsls	r3, r3, #2
 8019562:	4413      	add	r3, r2
 8019564:	00db      	lsls	r3, r3, #3
 8019566:	440b      	add	r3, r1
 8019568:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801956c:	7bfa      	ldrb	r2, [r7, #15]
 801956e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019570:	7bfa      	ldrb	r2, [r7, #15]
 8019572:	6879      	ldr	r1, [r7, #4]
 8019574:	4613      	mov	r3, r2
 8019576:	009b      	lsls	r3, r3, #2
 8019578:	4413      	add	r3, r2
 801957a:	00db      	lsls	r3, r3, #3
 801957c:	440b      	add	r3, r1
 801957e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8019582:	2200      	movs	r2, #0
 8019584:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8019586:	7bfa      	ldrb	r2, [r7, #15]
 8019588:	6879      	ldr	r1, [r7, #4]
 801958a:	4613      	mov	r3, r2
 801958c:	009b      	lsls	r3, r3, #2
 801958e:	4413      	add	r3, r2
 8019590:	00db      	lsls	r3, r3, #3
 8019592:	440b      	add	r3, r1
 8019594:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8019598:	2200      	movs	r2, #0
 801959a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801959c:	7bfa      	ldrb	r2, [r7, #15]
 801959e:	6879      	ldr	r1, [r7, #4]
 80195a0:	4613      	mov	r3, r2
 80195a2:	009b      	lsls	r3, r3, #2
 80195a4:	4413      	add	r3, r2
 80195a6:	00db      	lsls	r3, r3, #3
 80195a8:	440b      	add	r3, r1
 80195aa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80195ae:	2200      	movs	r2, #0
 80195b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80195b2:	7bfa      	ldrb	r2, [r7, #15]
 80195b4:	6879      	ldr	r1, [r7, #4]
 80195b6:	4613      	mov	r3, r2
 80195b8:	009b      	lsls	r3, r3, #2
 80195ba:	4413      	add	r3, r2
 80195bc:	00db      	lsls	r3, r3, #3
 80195be:	440b      	add	r3, r1
 80195c0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80195c4:	2200      	movs	r2, #0
 80195c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80195c8:	7bfb      	ldrb	r3, [r7, #15]
 80195ca:	3301      	adds	r3, #1
 80195cc:	73fb      	strb	r3, [r7, #15]
 80195ce:	7bfa      	ldrb	r2, [r7, #15]
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	685b      	ldr	r3, [r3, #4]
 80195d4:	429a      	cmp	r2, r3
 80195d6:	d3b5      	bcc.n	8019544 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	603b      	str	r3, [r7, #0]
 80195de:	687e      	ldr	r6, [r7, #4]
 80195e0:	466d      	mov	r5, sp
 80195e2:	f106 0410 	add.w	r4, r6, #16
 80195e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80195e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80195ea:	6823      	ldr	r3, [r4, #0]
 80195ec:	602b      	str	r3, [r5, #0]
 80195ee:	1d33      	adds	r3, r6, #4
 80195f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80195f2:	6838      	ldr	r0, [r7, #0]
 80195f4:	f003 fb0d 	bl	801cc12 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	2200      	movs	r2, #0
 80195fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	2201      	movs	r2, #1
 8019604:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	69db      	ldr	r3, [r3, #28]
 801960c:	2b01      	cmp	r3, #1
 801960e:	d102      	bne.n	8019616 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8019610:	6878      	ldr	r0, [r7, #4]
 8019612:	f000 f805 	bl	8019620 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8019616:	2300      	movs	r3, #0
}
 8019618:	4618      	mov	r0, r3
 801961a:	3714      	adds	r7, #20
 801961c:	46bd      	mov	sp, r7
 801961e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019620 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8019620:	b480      	push	{r7}
 8019622:	b085      	sub	sp, #20
 8019624:	af00      	add	r7, sp, #0
 8019626:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	2201      	movs	r2, #1
 8019632:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	2200      	movs	r2, #0
 801963a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8019644:	b29b      	uxth	r3, r3
 8019646:	f043 0301 	orr.w	r3, r3, #1
 801964a:	b29a      	uxth	r2, r3
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8019658:	b29b      	uxth	r3, r3
 801965a:	f043 0302 	orr.w	r3, r3, #2
 801965e:	b29a      	uxth	r2, r3
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8019666:	2300      	movs	r3, #0
}
 8019668:	4618      	mov	r0, r3
 801966a:	3714      	adds	r7, #20
 801966c:	46bd      	mov	sp, r7
 801966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019672:	4770      	bx	lr

08019674 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8019674:	b480      	push	{r7}
 8019676:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8019678:	4b05      	ldr	r3, [pc, #20]	; (8019690 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	4a04      	ldr	r2, [pc, #16]	; (8019690 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801967e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019682:	6013      	str	r3, [r2, #0]
}
 8019684:	bf00      	nop
 8019686:	46bd      	mov	sp, r7
 8019688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801968c:	4770      	bx	lr
 801968e:	bf00      	nop
 8019690:	58000400 	.word	0x58000400

08019694 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8019694:	b480      	push	{r7}
 8019696:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8019698:	4b04      	ldr	r3, [pc, #16]	; (80196ac <HAL_PWREx_GetVoltageRange+0x18>)
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80196a0:	4618      	mov	r0, r3
 80196a2:	46bd      	mov	sp, r7
 80196a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196a8:	4770      	bx	lr
 80196aa:	bf00      	nop
 80196ac:	58000400 	.word	0x58000400

080196b0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80196b0:	b480      	push	{r7}
 80196b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80196b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80196be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80196c2:	d101      	bne.n	80196c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80196c4:	2301      	movs	r3, #1
 80196c6:	e000      	b.n	80196ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80196c8:	2300      	movs	r3, #0
}
 80196ca:	4618      	mov	r0, r3
 80196cc:	46bd      	mov	sp, r7
 80196ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196d2:	4770      	bx	lr

080196d4 <LL_RCC_HSE_Enable>:
{
 80196d4:	b480      	push	{r7}
 80196d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80196d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80196e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80196e6:	6013      	str	r3, [r2, #0]
}
 80196e8:	bf00      	nop
 80196ea:	46bd      	mov	sp, r7
 80196ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196f0:	4770      	bx	lr

080196f2 <LL_RCC_HSE_Disable>:
{
 80196f2:	b480      	push	{r7}
 80196f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80196f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019704:	6013      	str	r3, [r2, #0]
}
 8019706:	bf00      	nop
 8019708:	46bd      	mov	sp, r7
 801970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801970e:	4770      	bx	lr

08019710 <LL_RCC_HSE_IsReady>:
{
 8019710:	b480      	push	{r7}
 8019712:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8019714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801971e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8019722:	d101      	bne.n	8019728 <LL_RCC_HSE_IsReady+0x18>
 8019724:	2301      	movs	r3, #1
 8019726:	e000      	b.n	801972a <LL_RCC_HSE_IsReady+0x1a>
 8019728:	2300      	movs	r3, #0
}
 801972a:	4618      	mov	r0, r3
 801972c:	46bd      	mov	sp, r7
 801972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019732:	4770      	bx	lr

08019734 <LL_RCC_HSI_Enable>:
{
 8019734:	b480      	push	{r7}
 8019736:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8019738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019746:	6013      	str	r3, [r2, #0]
}
 8019748:	bf00      	nop
 801974a:	46bd      	mov	sp, r7
 801974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019750:	4770      	bx	lr

08019752 <LL_RCC_HSI_Disable>:
{
 8019752:	b480      	push	{r7}
 8019754:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8019756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019764:	6013      	str	r3, [r2, #0]
}
 8019766:	bf00      	nop
 8019768:	46bd      	mov	sp, r7
 801976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801976e:	4770      	bx	lr

08019770 <LL_RCC_HSI_IsReady>:
{
 8019770:	b480      	push	{r7}
 8019772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8019774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019778:	681b      	ldr	r3, [r3, #0]
 801977a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801977e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019782:	d101      	bne.n	8019788 <LL_RCC_HSI_IsReady+0x18>
 8019784:	2301      	movs	r3, #1
 8019786:	e000      	b.n	801978a <LL_RCC_HSI_IsReady+0x1a>
 8019788:	2300      	movs	r3, #0
}
 801978a:	4618      	mov	r0, r3
 801978c:	46bd      	mov	sp, r7
 801978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019792:	4770      	bx	lr

08019794 <LL_RCC_HSI_SetCalibTrimming>:
{
 8019794:	b480      	push	{r7}
 8019796:	b083      	sub	sp, #12
 8019798:	af00      	add	r7, sp, #0
 801979a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 801979c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80197a0:	685b      	ldr	r3, [r3, #4]
 80197a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	061b      	lsls	r3, r3, #24
 80197aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80197ae:	4313      	orrs	r3, r2
 80197b0:	604b      	str	r3, [r1, #4]
}
 80197b2:	bf00      	nop
 80197b4:	370c      	adds	r7, #12
 80197b6:	46bd      	mov	sp, r7
 80197b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197bc:	4770      	bx	lr

080197be <LL_RCC_HSI48_Enable>:
{
 80197be:	b480      	push	{r7}
 80197c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80197c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80197c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80197ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80197ce:	f043 0301 	orr.w	r3, r3, #1
 80197d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80197d6:	bf00      	nop
 80197d8:	46bd      	mov	sp, r7
 80197da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197de:	4770      	bx	lr

080197e0 <LL_RCC_HSI48_Disable>:
{
 80197e0:	b480      	push	{r7}
 80197e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80197e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80197e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80197ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80197f0:	f023 0301 	bic.w	r3, r3, #1
 80197f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80197f8:	bf00      	nop
 80197fa:	46bd      	mov	sp, r7
 80197fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019800:	4770      	bx	lr

08019802 <LL_RCC_HSI48_IsReady>:
{
 8019802:	b480      	push	{r7}
 8019804:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8019806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801980a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801980e:	f003 0302 	and.w	r3, r3, #2
 8019812:	2b02      	cmp	r3, #2
 8019814:	d101      	bne.n	801981a <LL_RCC_HSI48_IsReady+0x18>
 8019816:	2301      	movs	r3, #1
 8019818:	e000      	b.n	801981c <LL_RCC_HSI48_IsReady+0x1a>
 801981a:	2300      	movs	r3, #0
}
 801981c:	4618      	mov	r0, r3
 801981e:	46bd      	mov	sp, r7
 8019820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019824:	4770      	bx	lr

08019826 <LL_RCC_LSE_Enable>:
{
 8019826:	b480      	push	{r7}
 8019828:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801982a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801982e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019836:	f043 0301 	orr.w	r3, r3, #1
 801983a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801983e:	bf00      	nop
 8019840:	46bd      	mov	sp, r7
 8019842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019846:	4770      	bx	lr

08019848 <LL_RCC_LSE_Disable>:
{
 8019848:	b480      	push	{r7}
 801984a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801984c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019854:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019858:	f023 0301 	bic.w	r3, r3, #1
 801985c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8019860:	bf00      	nop
 8019862:	46bd      	mov	sp, r7
 8019864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019868:	4770      	bx	lr

0801986a <LL_RCC_LSE_EnableBypass>:
{
 801986a:	b480      	push	{r7}
 801986c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801986e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801987a:	f043 0304 	orr.w	r3, r3, #4
 801987e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8019882:	bf00      	nop
 8019884:	46bd      	mov	sp, r7
 8019886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801988a:	4770      	bx	lr

0801988c <LL_RCC_LSE_DisableBypass>:
{
 801988c:	b480      	push	{r7}
 801988e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8019890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801989c:	f023 0304 	bic.w	r3, r3, #4
 80198a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80198a4:	bf00      	nop
 80198a6:	46bd      	mov	sp, r7
 80198a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ac:	4770      	bx	lr

080198ae <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80198ae:	b480      	push	{r7}
 80198b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80198b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80198b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80198ba:	f003 0302 	and.w	r3, r3, #2
 80198be:	2b02      	cmp	r3, #2
 80198c0:	d101      	bne.n	80198c6 <LL_RCC_LSE_IsReady+0x18>
 80198c2:	2301      	movs	r3, #1
 80198c4:	e000      	b.n	80198c8 <LL_RCC_LSE_IsReady+0x1a>
 80198c6:	2300      	movs	r3, #0
}
 80198c8:	4618      	mov	r0, r3
 80198ca:	46bd      	mov	sp, r7
 80198cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198d0:	4770      	bx	lr

080198d2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80198d2:	b480      	push	{r7}
 80198d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80198d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80198da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80198de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80198e2:	f043 0301 	orr.w	r3, r3, #1
 80198e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80198ea:	bf00      	nop
 80198ec:	46bd      	mov	sp, r7
 80198ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198f2:	4770      	bx	lr

080198f4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80198f4:	b480      	push	{r7}
 80198f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80198f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80198fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8019900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019904:	f023 0301 	bic.w	r3, r3, #1
 8019908:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801990c:	bf00      	nop
 801990e:	46bd      	mov	sp, r7
 8019910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019914:	4770      	bx	lr

08019916 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8019916:	b480      	push	{r7}
 8019918:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 801991a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801991e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8019922:	f003 0302 	and.w	r3, r3, #2
 8019926:	2b02      	cmp	r3, #2
 8019928:	d101      	bne.n	801992e <LL_RCC_LSI1_IsReady+0x18>
 801992a:	2301      	movs	r3, #1
 801992c:	e000      	b.n	8019930 <LL_RCC_LSI1_IsReady+0x1a>
 801992e:	2300      	movs	r3, #0
}
 8019930:	4618      	mov	r0, r3
 8019932:	46bd      	mov	sp, r7
 8019934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019938:	4770      	bx	lr

0801993a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 801993a:	b480      	push	{r7}
 801993c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801993e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8019946:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801994a:	f043 0304 	orr.w	r3, r3, #4
 801994e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8019952:	bf00      	nop
 8019954:	46bd      	mov	sp, r7
 8019956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801995a:	4770      	bx	lr

0801995c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 801995c:	b480      	push	{r7}
 801995e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8019960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8019968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801996c:	f023 0304 	bic.w	r3, r3, #4
 8019970:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8019974:	bf00      	nop
 8019976:	46bd      	mov	sp, r7
 8019978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801997c:	4770      	bx	lr

0801997e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 801997e:	b480      	push	{r7}
 8019980:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8019982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801998a:	f003 0308 	and.w	r3, r3, #8
 801998e:	2b08      	cmp	r3, #8
 8019990:	d101      	bne.n	8019996 <LL_RCC_LSI2_IsReady+0x18>
 8019992:	2301      	movs	r3, #1
 8019994:	e000      	b.n	8019998 <LL_RCC_LSI2_IsReady+0x1a>
 8019996:	2300      	movs	r3, #0
}
 8019998:	4618      	mov	r0, r3
 801999a:	46bd      	mov	sp, r7
 801999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199a0:	4770      	bx	lr

080199a2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80199a2:	b480      	push	{r7}
 80199a4:	b083      	sub	sp, #12
 80199a6:	af00      	add	r7, sp, #0
 80199a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80199aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80199ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80199b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	021b      	lsls	r3, r3, #8
 80199ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80199be:	4313      	orrs	r3, r2
 80199c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80199c4:	bf00      	nop
 80199c6:	370c      	adds	r7, #12
 80199c8:	46bd      	mov	sp, r7
 80199ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ce:	4770      	bx	lr

080199d0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80199d0:	b480      	push	{r7}
 80199d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80199d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80199de:	f043 0301 	orr.w	r3, r3, #1
 80199e2:	6013      	str	r3, [r2, #0]
}
 80199e4:	bf00      	nop
 80199e6:	46bd      	mov	sp, r7
 80199e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ec:	4770      	bx	lr

080199ee <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80199ee:	b480      	push	{r7}
 80199f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80199f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80199fc:	f023 0301 	bic.w	r3, r3, #1
 8019a00:	6013      	str	r3, [r2, #0]
}
 8019a02:	bf00      	nop
 8019a04:	46bd      	mov	sp, r7
 8019a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a0a:	4770      	bx	lr

08019a0c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8019a0c:	b480      	push	{r7}
 8019a0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8019a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	f003 0302 	and.w	r3, r3, #2
 8019a1a:	2b02      	cmp	r3, #2
 8019a1c:	d101      	bne.n	8019a22 <LL_RCC_MSI_IsReady+0x16>
 8019a1e:	2301      	movs	r3, #1
 8019a20:	e000      	b.n	8019a24 <LL_RCC_MSI_IsReady+0x18>
 8019a22:	2300      	movs	r3, #0
}
 8019a24:	4618      	mov	r0, r3
 8019a26:	46bd      	mov	sp, r7
 8019a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a2c:	4770      	bx	lr

08019a2e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8019a2e:	b480      	push	{r7}
 8019a30:	b083      	sub	sp, #12
 8019a32:	af00      	add	r7, sp, #0
 8019a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8019a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8019a40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	4313      	orrs	r3, r2
 8019a48:	600b      	str	r3, [r1, #0]
}
 8019a4a:	bf00      	nop
 8019a4c:	370c      	adds	r7, #12
 8019a4e:	46bd      	mov	sp, r7
 8019a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a54:	4770      	bx	lr

08019a56 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8019a56:	b480      	push	{r7}
 8019a58:	b083      	sub	sp, #12
 8019a5a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8019a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019a66:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	2bb0      	cmp	r3, #176	; 0xb0
 8019a6c:	d901      	bls.n	8019a72 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8019a6e:	23b0      	movs	r3, #176	; 0xb0
 8019a70:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8019a72:	687b      	ldr	r3, [r7, #4]
}
 8019a74:	4618      	mov	r0, r3
 8019a76:	370c      	adds	r7, #12
 8019a78:	46bd      	mov	sp, r7
 8019a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a7e:	4770      	bx	lr

08019a80 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8019a80:	b480      	push	{r7}
 8019a82:	b083      	sub	sp, #12
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8019a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019a8c:	685b      	ldr	r3, [r3, #4]
 8019a8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	021b      	lsls	r3, r3, #8
 8019a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019a9a:	4313      	orrs	r3, r2
 8019a9c:	604b      	str	r3, [r1, #4]
}
 8019a9e:	bf00      	nop
 8019aa0:	370c      	adds	r7, #12
 8019aa2:	46bd      	mov	sp, r7
 8019aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aa8:	4770      	bx	lr

08019aaa <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8019aaa:	b480      	push	{r7}
 8019aac:	b083      	sub	sp, #12
 8019aae:	af00      	add	r7, sp, #0
 8019ab0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8019ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019ab6:	689b      	ldr	r3, [r3, #8]
 8019ab8:	f023 0203 	bic.w	r2, r3, #3
 8019abc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	4313      	orrs	r3, r2
 8019ac4:	608b      	str	r3, [r1, #8]
}
 8019ac6:	bf00      	nop
 8019ac8:	370c      	adds	r7, #12
 8019aca:	46bd      	mov	sp, r7
 8019acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ad0:	4770      	bx	lr

08019ad2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8019ad2:	b480      	push	{r7}
 8019ad4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8019ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019ada:	689b      	ldr	r3, [r3, #8]
 8019adc:	f003 030c 	and.w	r3, r3, #12
}
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	46bd      	mov	sp, r7
 8019ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ae8:	4770      	bx	lr

08019aea <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8019aea:	b480      	push	{r7}
 8019aec:	b083      	sub	sp, #12
 8019aee:	af00      	add	r7, sp, #0
 8019af0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8019af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019af6:	689b      	ldr	r3, [r3, #8]
 8019af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8019afc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	4313      	orrs	r3, r2
 8019b04:	608b      	str	r3, [r1, #8]
}
 8019b06:	bf00      	nop
 8019b08:	370c      	adds	r7, #12
 8019b0a:	46bd      	mov	sp, r7
 8019b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b10:	4770      	bx	lr

08019b12 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8019b12:	b480      	push	{r7}
 8019b14:	b083      	sub	sp, #12
 8019b16:	af00      	add	r7, sp, #0
 8019b18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8019b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019b1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8019b22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8019b26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	4313      	orrs	r3, r2
 8019b2e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8019b32:	bf00      	nop
 8019b34:	370c      	adds	r7, #12
 8019b36:	46bd      	mov	sp, r7
 8019b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b3c:	4770      	bx	lr

08019b3e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8019b3e:	b480      	push	{r7}
 8019b40:	b083      	sub	sp, #12
 8019b42:	af00      	add	r7, sp, #0
 8019b44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8019b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019b4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8019b4e:	f023 020f 	bic.w	r2, r3, #15
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	091b      	lsrs	r3, r3, #4
 8019b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019b5a:	4313      	orrs	r3, r2
 8019b5c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8019b60:	bf00      	nop
 8019b62:	370c      	adds	r7, #12
 8019b64:	46bd      	mov	sp, r7
 8019b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b6a:	4770      	bx	lr

08019b6c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8019b6c:	b480      	push	{r7}
 8019b6e:	b083      	sub	sp, #12
 8019b70:	af00      	add	r7, sp, #0
 8019b72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8019b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019b78:	689b      	ldr	r3, [r3, #8]
 8019b7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8019b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	4313      	orrs	r3, r2
 8019b86:	608b      	str	r3, [r1, #8]
}
 8019b88:	bf00      	nop
 8019b8a:	370c      	adds	r7, #12
 8019b8c:	46bd      	mov	sp, r7
 8019b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b92:	4770      	bx	lr

08019b94 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8019b94:	b480      	push	{r7}
 8019b96:	b083      	sub	sp, #12
 8019b98:	af00      	add	r7, sp, #0
 8019b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8019b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019ba0:	689b      	ldr	r3, [r3, #8]
 8019ba2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8019ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	4313      	orrs	r3, r2
 8019bae:	608b      	str	r3, [r1, #8]
}
 8019bb0:	bf00      	nop
 8019bb2:	370c      	adds	r7, #12
 8019bb4:	46bd      	mov	sp, r7
 8019bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bba:	4770      	bx	lr

08019bbc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8019bbc:	b480      	push	{r7}
 8019bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8019bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019bc4:	689b      	ldr	r3, [r3, #8]
 8019bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8019bca:	4618      	mov	r0, r3
 8019bcc:	46bd      	mov	sp, r7
 8019bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd2:	4770      	bx	lr

08019bd4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8019bd4:	b480      	push	{r7}
 8019bd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8019bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019bdc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8019be0:	011b      	lsls	r3, r3, #4
 8019be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8019be6:	4618      	mov	r0, r3
 8019be8:	46bd      	mov	sp, r7
 8019bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bee:	4770      	bx	lr

08019bf0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8019bf0:	b480      	push	{r7}
 8019bf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8019bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019bf8:	689b      	ldr	r3, [r3, #8]
 8019bfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8019bfe:	4618      	mov	r0, r3
 8019c00:	46bd      	mov	sp, r7
 8019c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c06:	4770      	bx	lr

08019c08 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8019c08:	b480      	push	{r7}
 8019c0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8019c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019c10:	689b      	ldr	r3, [r3, #8]
 8019c12:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8019c16:	4618      	mov	r0, r3
 8019c18:	46bd      	mov	sp, r7
 8019c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c1e:	4770      	bx	lr

08019c20 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8019c20:	b480      	push	{r7}
 8019c22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8019c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8019c32:	6013      	str	r3, [r2, #0]
}
 8019c34:	bf00      	nop
 8019c36:	46bd      	mov	sp, r7
 8019c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c3c:	4770      	bx	lr

08019c3e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8019c3e:	b480      	push	{r7}
 8019c40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8019c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019c4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8019c50:	6013      	str	r3, [r2, #0]
}
 8019c52:	bf00      	nop
 8019c54:	46bd      	mov	sp, r7
 8019c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c5a:	4770      	bx	lr

08019c5c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8019c5c:	b480      	push	{r7}
 8019c5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8019c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019c6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8019c6e:	d101      	bne.n	8019c74 <LL_RCC_PLL_IsReady+0x18>
 8019c70:	2301      	movs	r3, #1
 8019c72:	e000      	b.n	8019c76 <LL_RCC_PLL_IsReady+0x1a>
 8019c74:	2300      	movs	r3, #0
}
 8019c76:	4618      	mov	r0, r3
 8019c78:	46bd      	mov	sp, r7
 8019c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c7e:	4770      	bx	lr

08019c80 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8019c80:	b480      	push	{r7}
 8019c82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8019c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019c88:	68db      	ldr	r3, [r3, #12]
 8019c8a:	0a1b      	lsrs	r3, r3, #8
 8019c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8019c90:	4618      	mov	r0, r3
 8019c92:	46bd      	mov	sp, r7
 8019c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c98:	4770      	bx	lr

08019c9a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8019c9a:	b480      	push	{r7}
 8019c9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8019c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019ca2:	68db      	ldr	r3, [r3, #12]
 8019ca4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8019ca8:	4618      	mov	r0, r3
 8019caa:	46bd      	mov	sp, r7
 8019cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb0:	4770      	bx	lr

08019cb2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8019cb2:	b480      	push	{r7}
 8019cb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8019cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019cba:	68db      	ldr	r3, [r3, #12]
 8019cbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8019cc0:	4618      	mov	r0, r3
 8019cc2:	46bd      	mov	sp, r7
 8019cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cc8:	4770      	bx	lr

08019cca <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8019cca:	b480      	push	{r7}
 8019ccc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8019cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019cd2:	68db      	ldr	r3, [r3, #12]
 8019cd4:	f003 0303 	and.w	r3, r3, #3
}
 8019cd8:	4618      	mov	r0, r3
 8019cda:	46bd      	mov	sp, r7
 8019cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ce0:	4770      	bx	lr

08019ce2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8019ce2:	b480      	push	{r7}
 8019ce4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8019ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019cea:	689b      	ldr	r3, [r3, #8]
 8019cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019cf4:	d101      	bne.n	8019cfa <LL_RCC_IsActiveFlag_HPRE+0x18>
 8019cf6:	2301      	movs	r3, #1
 8019cf8:	e000      	b.n	8019cfc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8019cfa:	2300      	movs	r3, #0
}
 8019cfc:	4618      	mov	r0, r3
 8019cfe:	46bd      	mov	sp, r7
 8019d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d04:	4770      	bx	lr

08019d06 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8019d06:	b480      	push	{r7}
 8019d08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8019d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019d0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8019d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019d16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8019d1a:	d101      	bne.n	8019d20 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8019d1c:	2301      	movs	r3, #1
 8019d1e:	e000      	b.n	8019d22 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8019d20:	2300      	movs	r3, #0
}
 8019d22:	4618      	mov	r0, r3
 8019d24:	46bd      	mov	sp, r7
 8019d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d2a:	4770      	bx	lr

08019d2c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8019d2c:	b480      	push	{r7}
 8019d2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8019d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019d34:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8019d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019d40:	d101      	bne.n	8019d46 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8019d42:	2301      	movs	r3, #1
 8019d44:	e000      	b.n	8019d48 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8019d46:	2300      	movs	r3, #0
}
 8019d48:	4618      	mov	r0, r3
 8019d4a:	46bd      	mov	sp, r7
 8019d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d50:	4770      	bx	lr

08019d52 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8019d52:	b480      	push	{r7}
 8019d54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8019d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019d5a:	689b      	ldr	r3, [r3, #8]
 8019d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019d60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8019d64:	d101      	bne.n	8019d6a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8019d66:	2301      	movs	r3, #1
 8019d68:	e000      	b.n	8019d6c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8019d6a:	2300      	movs	r3, #0
}
 8019d6c:	4618      	mov	r0, r3
 8019d6e:	46bd      	mov	sp, r7
 8019d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d74:	4770      	bx	lr

08019d76 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8019d76:	b480      	push	{r7}
 8019d78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8019d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019d7e:	689b      	ldr	r3, [r3, #8]
 8019d80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019d84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8019d88:	d101      	bne.n	8019d8e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8019d8a:	2301      	movs	r3, #1
 8019d8c:	e000      	b.n	8019d90 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8019d8e:	2300      	movs	r3, #0
}
 8019d90:	4618      	mov	r0, r3
 8019d92:	46bd      	mov	sp, r7
 8019d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d98:	4770      	bx	lr
	...

08019d9c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8019d9c:	b590      	push	{r4, r7, lr}
 8019d9e:	b08d      	sub	sp, #52	; 0x34
 8019da0:	af00      	add	r7, sp, #0
 8019da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d101      	bne.n	8019dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8019daa:	2301      	movs	r3, #1
 8019dac:	e363      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	f003 0320 	and.w	r3, r3, #32
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	f000 808d 	beq.w	8019ed6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8019dbc:	f7ff fe89 	bl	8019ad2 <LL_RCC_GetSysClkSource>
 8019dc0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8019dc2:	f7ff ff82 	bl	8019cca <LL_RCC_PLL_GetMainSource>
 8019dc6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8019dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d005      	beq.n	8019dda <HAL_RCC_OscConfig+0x3e>
 8019dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dd0:	2b0c      	cmp	r3, #12
 8019dd2:	d147      	bne.n	8019e64 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8019dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dd6:	2b01      	cmp	r3, #1
 8019dd8:	d144      	bne.n	8019e64 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	69db      	ldr	r3, [r3, #28]
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d101      	bne.n	8019de6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8019de2:	2301      	movs	r3, #1
 8019de4:	e347      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019dea:	f7ff fe34 	bl	8019a56 <LL_RCC_MSI_GetRange>
 8019dee:	4603      	mov	r3, r0
 8019df0:	429c      	cmp	r4, r3
 8019df2:	d914      	bls.n	8019e1e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019df8:	4618      	mov	r0, r3
 8019dfa:	f000 fd2f 	bl	801a85c <RCC_SetFlashLatencyFromMSIRange>
 8019dfe:	4603      	mov	r3, r0
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d001      	beq.n	8019e08 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8019e04:	2301      	movs	r3, #1
 8019e06:	e336      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	f7ff fe0e 	bl	8019a2e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	6a1b      	ldr	r3, [r3, #32]
 8019e16:	4618      	mov	r0, r3
 8019e18:	f7ff fe32 	bl	8019a80 <LL_RCC_MSI_SetCalibTrimming>
 8019e1c:	e013      	b.n	8019e46 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e22:	4618      	mov	r0, r3
 8019e24:	f7ff fe03 	bl	8019a2e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	6a1b      	ldr	r3, [r3, #32]
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	f7ff fe27 	bl	8019a80 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e36:	4618      	mov	r0, r3
 8019e38:	f000 fd10 	bl	801a85c <RCC_SetFlashLatencyFromMSIRange>
 8019e3c:	4603      	mov	r3, r0
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d001      	beq.n	8019e46 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8019e42:	2301      	movs	r3, #1
 8019e44:	e317      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8019e46:	f000 fcc9 	bl	801a7dc <HAL_RCC_GetHCLKFreq>
 8019e4a:	4603      	mov	r3, r0
 8019e4c:	4aa4      	ldr	r2, [pc, #656]	; (801a0e0 <HAL_RCC_OscConfig+0x344>)
 8019e4e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8019e50:	4ba4      	ldr	r3, [pc, #656]	; (801a0e4 <HAL_RCC_OscConfig+0x348>)
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	4618      	mov	r0, r3
 8019e56:	f7fd fd8f 	bl	8017978 <HAL_InitTick>
 8019e5a:	4603      	mov	r3, r0
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	d039      	beq.n	8019ed4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8019e60:	2301      	movs	r3, #1
 8019e62:	e308      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	69db      	ldr	r3, [r3, #28]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d01e      	beq.n	8019eaa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8019e6c:	f7ff fdb0 	bl	80199d0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8019e70:	f7fd fdd0 	bl	8017a14 <HAL_GetTick>
 8019e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8019e76:	e008      	b.n	8019e8a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8019e78:	f7fd fdcc 	bl	8017a14 <HAL_GetTick>
 8019e7c:	4602      	mov	r2, r0
 8019e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e80:	1ad3      	subs	r3, r2, r3
 8019e82:	2b02      	cmp	r3, #2
 8019e84:	d901      	bls.n	8019e8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8019e86:	2303      	movs	r3, #3
 8019e88:	e2f5      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8019e8a:	f7ff fdbf 	bl	8019a0c <LL_RCC_MSI_IsReady>
 8019e8e:	4603      	mov	r3, r0
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d0f1      	beq.n	8019e78 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e98:	4618      	mov	r0, r3
 8019e9a:	f7ff fdc8 	bl	8019a2e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	6a1b      	ldr	r3, [r3, #32]
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	f7ff fdec 	bl	8019a80 <LL_RCC_MSI_SetCalibTrimming>
 8019ea8:	e015      	b.n	8019ed6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8019eaa:	f7ff fda0 	bl	80199ee <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8019eae:	f7fd fdb1 	bl	8017a14 <HAL_GetTick>
 8019eb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8019eb4:	e008      	b.n	8019ec8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8019eb6:	f7fd fdad 	bl	8017a14 <HAL_GetTick>
 8019eba:	4602      	mov	r2, r0
 8019ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ebe:	1ad3      	subs	r3, r2, r3
 8019ec0:	2b02      	cmp	r3, #2
 8019ec2:	d901      	bls.n	8019ec8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8019ec4:	2303      	movs	r3, #3
 8019ec6:	e2d6      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8019ec8:	f7ff fda0 	bl	8019a0c <LL_RCC_MSI_IsReady>
 8019ecc:	4603      	mov	r3, r0
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d1f1      	bne.n	8019eb6 <HAL_RCC_OscConfig+0x11a>
 8019ed2:	e000      	b.n	8019ed6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8019ed4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	f003 0301 	and.w	r3, r3, #1
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d047      	beq.n	8019f72 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8019ee2:	f7ff fdf6 	bl	8019ad2 <LL_RCC_GetSysClkSource>
 8019ee6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8019ee8:	f7ff feef 	bl	8019cca <LL_RCC_PLL_GetMainSource>
 8019eec:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8019eee:	6a3b      	ldr	r3, [r7, #32]
 8019ef0:	2b08      	cmp	r3, #8
 8019ef2:	d005      	beq.n	8019f00 <HAL_RCC_OscConfig+0x164>
 8019ef4:	6a3b      	ldr	r3, [r7, #32]
 8019ef6:	2b0c      	cmp	r3, #12
 8019ef8:	d108      	bne.n	8019f0c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8019efa:	69fb      	ldr	r3, [r7, #28]
 8019efc:	2b03      	cmp	r3, #3
 8019efe:	d105      	bne.n	8019f0c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	685b      	ldr	r3, [r3, #4]
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d134      	bne.n	8019f72 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8019f08:	2301      	movs	r3, #1
 8019f0a:	e2b4      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	685b      	ldr	r3, [r3, #4]
 8019f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019f14:	d102      	bne.n	8019f1c <HAL_RCC_OscConfig+0x180>
 8019f16:	f7ff fbdd 	bl	80196d4 <LL_RCC_HSE_Enable>
 8019f1a:	e001      	b.n	8019f20 <HAL_RCC_OscConfig+0x184>
 8019f1c:	f7ff fbe9 	bl	80196f2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	685b      	ldr	r3, [r3, #4]
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d012      	beq.n	8019f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019f28:	f7fd fd74 	bl	8017a14 <HAL_GetTick>
 8019f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8019f2e:	e008      	b.n	8019f42 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8019f30:	f7fd fd70 	bl	8017a14 <HAL_GetTick>
 8019f34:	4602      	mov	r2, r0
 8019f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f38:	1ad3      	subs	r3, r2, r3
 8019f3a:	2b64      	cmp	r3, #100	; 0x64
 8019f3c:	d901      	bls.n	8019f42 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8019f3e:	2303      	movs	r3, #3
 8019f40:	e299      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8019f42:	f7ff fbe5 	bl	8019710 <LL_RCC_HSE_IsReady>
 8019f46:	4603      	mov	r3, r0
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d0f1      	beq.n	8019f30 <HAL_RCC_OscConfig+0x194>
 8019f4c:	e011      	b.n	8019f72 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019f4e:	f7fd fd61 	bl	8017a14 <HAL_GetTick>
 8019f52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8019f54:	e008      	b.n	8019f68 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8019f56:	f7fd fd5d 	bl	8017a14 <HAL_GetTick>
 8019f5a:	4602      	mov	r2, r0
 8019f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f5e:	1ad3      	subs	r3, r2, r3
 8019f60:	2b64      	cmp	r3, #100	; 0x64
 8019f62:	d901      	bls.n	8019f68 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8019f64:	2303      	movs	r3, #3
 8019f66:	e286      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8019f68:	f7ff fbd2 	bl	8019710 <LL_RCC_HSE_IsReady>
 8019f6c:	4603      	mov	r3, r0
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d1f1      	bne.n	8019f56 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	f003 0302 	and.w	r3, r3, #2
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d04c      	beq.n	801a018 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8019f7e:	f7ff fda8 	bl	8019ad2 <LL_RCC_GetSysClkSource>
 8019f82:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8019f84:	f7ff fea1 	bl	8019cca <LL_RCC_PLL_GetMainSource>
 8019f88:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8019f8a:	69bb      	ldr	r3, [r7, #24]
 8019f8c:	2b04      	cmp	r3, #4
 8019f8e:	d005      	beq.n	8019f9c <HAL_RCC_OscConfig+0x200>
 8019f90:	69bb      	ldr	r3, [r7, #24]
 8019f92:	2b0c      	cmp	r3, #12
 8019f94:	d10e      	bne.n	8019fb4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8019f96:	697b      	ldr	r3, [r7, #20]
 8019f98:	2b02      	cmp	r3, #2
 8019f9a:	d10b      	bne.n	8019fb4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	68db      	ldr	r3, [r3, #12]
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d101      	bne.n	8019fa8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8019fa4:	2301      	movs	r3, #1
 8019fa6:	e266      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	691b      	ldr	r3, [r3, #16]
 8019fac:	4618      	mov	r0, r3
 8019fae:	f7ff fbf1 	bl	8019794 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8019fb2:	e031      	b.n	801a018 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	68db      	ldr	r3, [r3, #12]
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d019      	beq.n	8019ff0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8019fbc:	f7ff fbba 	bl	8019734 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019fc0:	f7fd fd28 	bl	8017a14 <HAL_GetTick>
 8019fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8019fc6:	e008      	b.n	8019fda <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8019fc8:	f7fd fd24 	bl	8017a14 <HAL_GetTick>
 8019fcc:	4602      	mov	r2, r0
 8019fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fd0:	1ad3      	subs	r3, r2, r3
 8019fd2:	2b02      	cmp	r3, #2
 8019fd4:	d901      	bls.n	8019fda <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8019fd6:	2303      	movs	r3, #3
 8019fd8:	e24d      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8019fda:	f7ff fbc9 	bl	8019770 <LL_RCC_HSI_IsReady>
 8019fde:	4603      	mov	r3, r0
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d0f1      	beq.n	8019fc8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	691b      	ldr	r3, [r3, #16]
 8019fe8:	4618      	mov	r0, r3
 8019fea:	f7ff fbd3 	bl	8019794 <LL_RCC_HSI_SetCalibTrimming>
 8019fee:	e013      	b.n	801a018 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8019ff0:	f7ff fbaf 	bl	8019752 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019ff4:	f7fd fd0e 	bl	8017a14 <HAL_GetTick>
 8019ff8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8019ffa:	e008      	b.n	801a00e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8019ffc:	f7fd fd0a 	bl	8017a14 <HAL_GetTick>
 801a000:	4602      	mov	r2, r0
 801a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a004:	1ad3      	subs	r3, r2, r3
 801a006:	2b02      	cmp	r3, #2
 801a008:	d901      	bls.n	801a00e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 801a00a:	2303      	movs	r3, #3
 801a00c:	e233      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 801a00e:	f7ff fbaf 	bl	8019770 <LL_RCC_HSI_IsReady>
 801a012:	4603      	mov	r3, r0
 801a014:	2b00      	cmp	r3, #0
 801a016:	d1f1      	bne.n	8019ffc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	f003 0308 	and.w	r3, r3, #8
 801a020:	2b00      	cmp	r3, #0
 801a022:	d106      	bne.n	801a032 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	f000 80a3 	beq.w	801a178 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	695b      	ldr	r3, [r3, #20]
 801a036:	2b00      	cmp	r3, #0
 801a038:	d076      	beq.n	801a128 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	f003 0310 	and.w	r3, r3, #16
 801a042:	2b00      	cmp	r3, #0
 801a044:	d046      	beq.n	801a0d4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 801a046:	f7ff fc66 	bl	8019916 <LL_RCC_LSI1_IsReady>
 801a04a:	4603      	mov	r3, r0
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d113      	bne.n	801a078 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 801a050:	f7ff fc3f 	bl	80198d2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801a054:	f7fd fcde 	bl	8017a14 <HAL_GetTick>
 801a058:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 801a05a:	e008      	b.n	801a06e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801a05c:	f7fd fcda 	bl	8017a14 <HAL_GetTick>
 801a060:	4602      	mov	r2, r0
 801a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a064:	1ad3      	subs	r3, r2, r3
 801a066:	2b02      	cmp	r3, #2
 801a068:	d901      	bls.n	801a06e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 801a06a:	2303      	movs	r3, #3
 801a06c:	e203      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 801a06e:	f7ff fc52 	bl	8019916 <LL_RCC_LSI1_IsReady>
 801a072:	4603      	mov	r3, r0
 801a074:	2b00      	cmp	r3, #0
 801a076:	d0f1      	beq.n	801a05c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 801a078:	f7ff fc5f 	bl	801993a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a07c:	f7fd fcca 	bl	8017a14 <HAL_GetTick>
 801a080:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 801a082:	e008      	b.n	801a096 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801a084:	f7fd fcc6 	bl	8017a14 <HAL_GetTick>
 801a088:	4602      	mov	r2, r0
 801a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a08c:	1ad3      	subs	r3, r2, r3
 801a08e:	2b03      	cmp	r3, #3
 801a090:	d901      	bls.n	801a096 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 801a092:	2303      	movs	r3, #3
 801a094:	e1ef      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 801a096:	f7ff fc72 	bl	801997e <LL_RCC_LSI2_IsReady>
 801a09a:	4603      	mov	r3, r0
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d0f1      	beq.n	801a084 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	699b      	ldr	r3, [r3, #24]
 801a0a4:	4618      	mov	r0, r3
 801a0a6:	f7ff fc7c 	bl	80199a2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 801a0aa:	f7ff fc23 	bl	80198f4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a0ae:	f7fd fcb1 	bl	8017a14 <HAL_GetTick>
 801a0b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 801a0b4:	e008      	b.n	801a0c8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801a0b6:	f7fd fcad 	bl	8017a14 <HAL_GetTick>
 801a0ba:	4602      	mov	r2, r0
 801a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0be:	1ad3      	subs	r3, r2, r3
 801a0c0:	2b02      	cmp	r3, #2
 801a0c2:	d901      	bls.n	801a0c8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 801a0c4:	2303      	movs	r3, #3
 801a0c6:	e1d6      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 801a0c8:	f7ff fc25 	bl	8019916 <LL_RCC_LSI1_IsReady>
 801a0cc:	4603      	mov	r3, r0
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d1f1      	bne.n	801a0b6 <HAL_RCC_OscConfig+0x31a>
 801a0d2:	e051      	b.n	801a178 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 801a0d4:	f7ff fbfd 	bl	80198d2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a0d8:	f7fd fc9c 	bl	8017a14 <HAL_GetTick>
 801a0dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 801a0de:	e00c      	b.n	801a0fa <HAL_RCC_OscConfig+0x35e>
 801a0e0:	20000018 	.word	0x20000018
 801a0e4:	20000084 	.word	0x20000084
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801a0e8:	f7fd fc94 	bl	8017a14 <HAL_GetTick>
 801a0ec:	4602      	mov	r2, r0
 801a0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0f0:	1ad3      	subs	r3, r2, r3
 801a0f2:	2b02      	cmp	r3, #2
 801a0f4:	d901      	bls.n	801a0fa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 801a0f6:	2303      	movs	r3, #3
 801a0f8:	e1bd      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 801a0fa:	f7ff fc0c 	bl	8019916 <LL_RCC_LSI1_IsReady>
 801a0fe:	4603      	mov	r3, r0
 801a100:	2b00      	cmp	r3, #0
 801a102:	d0f1      	beq.n	801a0e8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 801a104:	f7ff fc2a 	bl	801995c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 801a108:	e008      	b.n	801a11c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801a10a:	f7fd fc83 	bl	8017a14 <HAL_GetTick>
 801a10e:	4602      	mov	r2, r0
 801a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a112:	1ad3      	subs	r3, r2, r3
 801a114:	2b03      	cmp	r3, #3
 801a116:	d901      	bls.n	801a11c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 801a118:	2303      	movs	r3, #3
 801a11a:	e1ac      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 801a11c:	f7ff fc2f 	bl	801997e <LL_RCC_LSI2_IsReady>
 801a120:	4603      	mov	r3, r0
 801a122:	2b00      	cmp	r3, #0
 801a124:	d1f1      	bne.n	801a10a <HAL_RCC_OscConfig+0x36e>
 801a126:	e027      	b.n	801a178 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 801a128:	f7ff fc18 	bl	801995c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a12c:	f7fd fc72 	bl	8017a14 <HAL_GetTick>
 801a130:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 801a132:	e008      	b.n	801a146 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801a134:	f7fd fc6e 	bl	8017a14 <HAL_GetTick>
 801a138:	4602      	mov	r2, r0
 801a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a13c:	1ad3      	subs	r3, r2, r3
 801a13e:	2b03      	cmp	r3, #3
 801a140:	d901      	bls.n	801a146 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801a142:	2303      	movs	r3, #3
 801a144:	e197      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 801a146:	f7ff fc1a 	bl	801997e <LL_RCC_LSI2_IsReady>
 801a14a:	4603      	mov	r3, r0
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d1f1      	bne.n	801a134 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 801a150:	f7ff fbd0 	bl	80198f4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a154:	f7fd fc5e 	bl	8017a14 <HAL_GetTick>
 801a158:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 801a15a:	e008      	b.n	801a16e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801a15c:	f7fd fc5a 	bl	8017a14 <HAL_GetTick>
 801a160:	4602      	mov	r2, r0
 801a162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a164:	1ad3      	subs	r3, r2, r3
 801a166:	2b02      	cmp	r3, #2
 801a168:	d901      	bls.n	801a16e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 801a16a:	2303      	movs	r3, #3
 801a16c:	e183      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 801a16e:	f7ff fbd2 	bl	8019916 <LL_RCC_LSI1_IsReady>
 801a172:	4603      	mov	r3, r0
 801a174:	2b00      	cmp	r3, #0
 801a176:	d1f1      	bne.n	801a15c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	f003 0304 	and.w	r3, r3, #4
 801a180:	2b00      	cmp	r3, #0
 801a182:	d05b      	beq.n	801a23c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801a184:	4ba7      	ldr	r3, [pc, #668]	; (801a424 <HAL_RCC_OscConfig+0x688>)
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d114      	bne.n	801a1ba <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801a190:	f7ff fa70 	bl	8019674 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801a194:	f7fd fc3e 	bl	8017a14 <HAL_GetTick>
 801a198:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801a19a:	e008      	b.n	801a1ae <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a19c:	f7fd fc3a 	bl	8017a14 <HAL_GetTick>
 801a1a0:	4602      	mov	r2, r0
 801a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1a4:	1ad3      	subs	r3, r2, r3
 801a1a6:	2b02      	cmp	r3, #2
 801a1a8:	d901      	bls.n	801a1ae <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 801a1aa:	2303      	movs	r3, #3
 801a1ac:	e163      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801a1ae:	4b9d      	ldr	r3, [pc, #628]	; (801a424 <HAL_RCC_OscConfig+0x688>)
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d0f0      	beq.n	801a19c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	689b      	ldr	r3, [r3, #8]
 801a1be:	2b01      	cmp	r3, #1
 801a1c0:	d102      	bne.n	801a1c8 <HAL_RCC_OscConfig+0x42c>
 801a1c2:	f7ff fb30 	bl	8019826 <LL_RCC_LSE_Enable>
 801a1c6:	e00c      	b.n	801a1e2 <HAL_RCC_OscConfig+0x446>
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	689b      	ldr	r3, [r3, #8]
 801a1cc:	2b05      	cmp	r3, #5
 801a1ce:	d104      	bne.n	801a1da <HAL_RCC_OscConfig+0x43e>
 801a1d0:	f7ff fb4b 	bl	801986a <LL_RCC_LSE_EnableBypass>
 801a1d4:	f7ff fb27 	bl	8019826 <LL_RCC_LSE_Enable>
 801a1d8:	e003      	b.n	801a1e2 <HAL_RCC_OscConfig+0x446>
 801a1da:	f7ff fb35 	bl	8019848 <LL_RCC_LSE_Disable>
 801a1de:	f7ff fb55 	bl	801988c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	689b      	ldr	r3, [r3, #8]
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d014      	beq.n	801a214 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a1ea:	f7fd fc13 	bl	8017a14 <HAL_GetTick>
 801a1ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 801a1f0:	e00a      	b.n	801a208 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801a1f2:	f7fd fc0f 	bl	8017a14 <HAL_GetTick>
 801a1f6:	4602      	mov	r2, r0
 801a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1fa:	1ad3      	subs	r3, r2, r3
 801a1fc:	f241 3288 	movw	r2, #5000	; 0x1388
 801a200:	4293      	cmp	r3, r2
 801a202:	d901      	bls.n	801a208 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 801a204:	2303      	movs	r3, #3
 801a206:	e136      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 801a208:	f7ff fb51 	bl	80198ae <LL_RCC_LSE_IsReady>
 801a20c:	4603      	mov	r3, r0
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d0ef      	beq.n	801a1f2 <HAL_RCC_OscConfig+0x456>
 801a212:	e013      	b.n	801a23c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a214:	f7fd fbfe 	bl	8017a14 <HAL_GetTick>
 801a218:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 801a21a:	e00a      	b.n	801a232 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801a21c:	f7fd fbfa 	bl	8017a14 <HAL_GetTick>
 801a220:	4602      	mov	r2, r0
 801a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a224:	1ad3      	subs	r3, r2, r3
 801a226:	f241 3288 	movw	r2, #5000	; 0x1388
 801a22a:	4293      	cmp	r3, r2
 801a22c:	d901      	bls.n	801a232 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 801a22e:	2303      	movs	r3, #3
 801a230:	e121      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 801a232:	f7ff fb3c 	bl	80198ae <LL_RCC_LSE_IsReady>
 801a236:	4603      	mov	r3, r0
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d1ef      	bne.n	801a21c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a244:	2b00      	cmp	r3, #0
 801a246:	d02c      	beq.n	801a2a2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d014      	beq.n	801a27a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801a250:	f7ff fab5 	bl	80197be <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a254:	f7fd fbde 	bl	8017a14 <HAL_GetTick>
 801a258:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 801a25a:	e008      	b.n	801a26e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801a25c:	f7fd fbda 	bl	8017a14 <HAL_GetTick>
 801a260:	4602      	mov	r2, r0
 801a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a264:	1ad3      	subs	r3, r2, r3
 801a266:	2b02      	cmp	r3, #2
 801a268:	d901      	bls.n	801a26e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 801a26a:	2303      	movs	r3, #3
 801a26c:	e103      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 801a26e:	f7ff fac8 	bl	8019802 <LL_RCC_HSI48_IsReady>
 801a272:	4603      	mov	r3, r0
 801a274:	2b00      	cmp	r3, #0
 801a276:	d0f1      	beq.n	801a25c <HAL_RCC_OscConfig+0x4c0>
 801a278:	e013      	b.n	801a2a2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801a27a:	f7ff fab1 	bl	80197e0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a27e:	f7fd fbc9 	bl	8017a14 <HAL_GetTick>
 801a282:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 801a284:	e008      	b.n	801a298 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801a286:	f7fd fbc5 	bl	8017a14 <HAL_GetTick>
 801a28a:	4602      	mov	r2, r0
 801a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a28e:	1ad3      	subs	r3, r2, r3
 801a290:	2b02      	cmp	r3, #2
 801a292:	d901      	bls.n	801a298 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 801a294:	2303      	movs	r3, #3
 801a296:	e0ee      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 801a298:	f7ff fab3 	bl	8019802 <LL_RCC_HSI48_IsReady>
 801a29c:	4603      	mov	r3, r0
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d1f1      	bne.n	801a286 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	f000 80e4 	beq.w	801a474 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a2ac:	f7ff fc11 	bl	8019ad2 <LL_RCC_GetSysClkSource>
 801a2b0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 801a2b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a2b6:	68db      	ldr	r3, [r3, #12]
 801a2b8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2be:	2b02      	cmp	r3, #2
 801a2c0:	f040 80b4 	bne.w	801a42c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	f003 0203 	and.w	r2, r3, #3
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a2ce:	429a      	cmp	r2, r3
 801a2d0:	d123      	bne.n	801a31a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a2dc:	429a      	cmp	r2, r3
 801a2de:	d11c      	bne.n	801a31a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	0a1b      	lsrs	r3, r3, #8
 801a2e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801a2ec:	429a      	cmp	r2, r3
 801a2ee:	d114      	bne.n	801a31a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801a2fa:	429a      	cmp	r2, r3
 801a2fc:	d10d      	bne.n	801a31a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801a308:	429a      	cmp	r2, r3
 801a30a:	d106      	bne.n	801a31a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 801a30c:	68fb      	ldr	r3, [r7, #12]
 801a30e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801a316:	429a      	cmp	r2, r3
 801a318:	d05d      	beq.n	801a3d6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801a31a:	693b      	ldr	r3, [r7, #16]
 801a31c:	2b0c      	cmp	r3, #12
 801a31e:	d058      	beq.n	801a3d2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801a320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d001      	beq.n	801a332 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 801a32e:	2301      	movs	r3, #1
 801a330:	e0a1      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801a332:	f7ff fc84 	bl	8019c3e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801a336:	f7fd fb6d 	bl	8017a14 <HAL_GetTick>
 801a33a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801a33c:	e008      	b.n	801a350 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801a33e:	f7fd fb69 	bl	8017a14 <HAL_GetTick>
 801a342:	4602      	mov	r2, r0
 801a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a346:	1ad3      	subs	r3, r2, r3
 801a348:	2b02      	cmp	r3, #2
 801a34a:	d901      	bls.n	801a350 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 801a34c:	2303      	movs	r3, #3
 801a34e:	e092      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801a350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d1ef      	bne.n	801a33e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801a35e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a362:	68da      	ldr	r2, [r3, #12]
 801a364:	4b30      	ldr	r3, [pc, #192]	; (801a428 <HAL_RCC_OscConfig+0x68c>)
 801a366:	4013      	ands	r3, r2
 801a368:	687a      	ldr	r2, [r7, #4]
 801a36a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801a36c:	687a      	ldr	r2, [r7, #4]
 801a36e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801a370:	4311      	orrs	r1, r2
 801a372:	687a      	ldr	r2, [r7, #4]
 801a374:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801a376:	0212      	lsls	r2, r2, #8
 801a378:	4311      	orrs	r1, r2
 801a37a:	687a      	ldr	r2, [r7, #4]
 801a37c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801a37e:	4311      	orrs	r1, r2
 801a380:	687a      	ldr	r2, [r7, #4]
 801a382:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801a384:	4311      	orrs	r1, r2
 801a386:	687a      	ldr	r2, [r7, #4]
 801a388:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801a38a:	430a      	orrs	r2, r1
 801a38c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a390:	4313      	orrs	r3, r2
 801a392:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 801a394:	f7ff fc44 	bl	8019c20 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801a398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a39c:	68db      	ldr	r3, [r3, #12]
 801a39e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a3a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a3a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801a3a8:	f7fd fb34 	bl	8017a14 <HAL_GetTick>
 801a3ac:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801a3ae:	e008      	b.n	801a3c2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801a3b0:	f7fd fb30 	bl	8017a14 <HAL_GetTick>
 801a3b4:	4602      	mov	r2, r0
 801a3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3b8:	1ad3      	subs	r3, r2, r3
 801a3ba:	2b02      	cmp	r3, #2
 801a3bc:	d901      	bls.n	801a3c2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 801a3be:	2303      	movs	r3, #3
 801a3c0:	e059      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801a3c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a3c6:	681b      	ldr	r3, [r3, #0]
 801a3c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	d0ef      	beq.n	801a3b0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801a3d0:	e050      	b.n	801a474 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801a3d2:	2301      	movs	r3, #1
 801a3d4:	e04f      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801a3d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a3da:	681b      	ldr	r3, [r3, #0]
 801a3dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d147      	bne.n	801a474 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 801a3e4:	f7ff fc1c 	bl	8019c20 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801a3e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a3ec:	68db      	ldr	r3, [r3, #12]
 801a3ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a3f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a3f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801a3f8:	f7fd fb0c 	bl	8017a14 <HAL_GetTick>
 801a3fc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801a3fe:	e008      	b.n	801a412 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801a400:	f7fd fb08 	bl	8017a14 <HAL_GetTick>
 801a404:	4602      	mov	r2, r0
 801a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a408:	1ad3      	subs	r3, r2, r3
 801a40a:	2b02      	cmp	r3, #2
 801a40c:	d901      	bls.n	801a412 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 801a40e:	2303      	movs	r3, #3
 801a410:	e031      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801a412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d0ef      	beq.n	801a400 <HAL_RCC_OscConfig+0x664>
 801a420:	e028      	b.n	801a474 <HAL_RCC_OscConfig+0x6d8>
 801a422:	bf00      	nop
 801a424:	58000400 	.word	0x58000400
 801a428:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801a42c:	693b      	ldr	r3, [r7, #16]
 801a42e:	2b0c      	cmp	r3, #12
 801a430:	d01e      	beq.n	801a470 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a432:	f7ff fc04 	bl	8019c3e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a436:	f7fd faed 	bl	8017a14 <HAL_GetTick>
 801a43a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801a43c:	e008      	b.n	801a450 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801a43e:	f7fd fae9 	bl	8017a14 <HAL_GetTick>
 801a442:	4602      	mov	r2, r0
 801a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a446:	1ad3      	subs	r3, r2, r3
 801a448:	2b02      	cmp	r3, #2
 801a44a:	d901      	bls.n	801a450 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 801a44c:	2303      	movs	r3, #3
 801a44e:	e012      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801a450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d1ef      	bne.n	801a43e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 801a45e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a462:	68da      	ldr	r2, [r3, #12]
 801a464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a468:	4b05      	ldr	r3, [pc, #20]	; (801a480 <HAL_RCC_OscConfig+0x6e4>)
 801a46a:	4013      	ands	r3, r2
 801a46c:	60cb      	str	r3, [r1, #12]
 801a46e:	e001      	b.n	801a474 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801a470:	2301      	movs	r3, #1
 801a472:	e000      	b.n	801a476 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 801a474:	2300      	movs	r3, #0
}
 801a476:	4618      	mov	r0, r3
 801a478:	3734      	adds	r7, #52	; 0x34
 801a47a:	46bd      	mov	sp, r7
 801a47c:	bd90      	pop	{r4, r7, pc}
 801a47e:	bf00      	nop
 801a480:	eefefffc 	.word	0xeefefffc

0801a484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801a484:	b580      	push	{r7, lr}
 801a486:	b084      	sub	sp, #16
 801a488:	af00      	add	r7, sp, #0
 801a48a:	6078      	str	r0, [r7, #4]
 801a48c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	2b00      	cmp	r3, #0
 801a492:	d101      	bne.n	801a498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801a494:	2301      	movs	r3, #1
 801a496:	e12d      	b.n	801a6f4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801a498:	4b98      	ldr	r3, [pc, #608]	; (801a6fc <HAL_RCC_ClockConfig+0x278>)
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	f003 0307 	and.w	r3, r3, #7
 801a4a0:	683a      	ldr	r2, [r7, #0]
 801a4a2:	429a      	cmp	r2, r3
 801a4a4:	d91b      	bls.n	801a4de <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a4a6:	4b95      	ldr	r3, [pc, #596]	; (801a6fc <HAL_RCC_ClockConfig+0x278>)
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	f023 0207 	bic.w	r2, r3, #7
 801a4ae:	4993      	ldr	r1, [pc, #588]	; (801a6fc <HAL_RCC_ClockConfig+0x278>)
 801a4b0:	683b      	ldr	r3, [r7, #0]
 801a4b2:	4313      	orrs	r3, r2
 801a4b4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801a4b6:	f7fd faad 	bl	8017a14 <HAL_GetTick>
 801a4ba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801a4bc:	e008      	b.n	801a4d0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801a4be:	f7fd faa9 	bl	8017a14 <HAL_GetTick>
 801a4c2:	4602      	mov	r2, r0
 801a4c4:	68fb      	ldr	r3, [r7, #12]
 801a4c6:	1ad3      	subs	r3, r2, r3
 801a4c8:	2b02      	cmp	r3, #2
 801a4ca:	d901      	bls.n	801a4d0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 801a4cc:	2303      	movs	r3, #3
 801a4ce:	e111      	b.n	801a6f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801a4d0:	4b8a      	ldr	r3, [pc, #552]	; (801a6fc <HAL_RCC_ClockConfig+0x278>)
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	f003 0307 	and.w	r3, r3, #7
 801a4d8:	683a      	ldr	r2, [r7, #0]
 801a4da:	429a      	cmp	r2, r3
 801a4dc:	d1ef      	bne.n	801a4be <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	f003 0302 	and.w	r3, r3, #2
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d016      	beq.n	801a518 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	689b      	ldr	r3, [r3, #8]
 801a4ee:	4618      	mov	r0, r3
 801a4f0:	f7ff fafb 	bl	8019aea <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801a4f4:	f7fd fa8e 	bl	8017a14 <HAL_GetTick>
 801a4f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801a4fa:	e008      	b.n	801a50e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801a4fc:	f7fd fa8a 	bl	8017a14 <HAL_GetTick>
 801a500:	4602      	mov	r2, r0
 801a502:	68fb      	ldr	r3, [r7, #12]
 801a504:	1ad3      	subs	r3, r2, r3
 801a506:	2b02      	cmp	r3, #2
 801a508:	d901      	bls.n	801a50e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 801a50a:	2303      	movs	r3, #3
 801a50c:	e0f2      	b.n	801a6f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801a50e:	f7ff fbe8 	bl	8019ce2 <LL_RCC_IsActiveFlag_HPRE>
 801a512:	4603      	mov	r3, r0
 801a514:	2b00      	cmp	r3, #0
 801a516:	d0f1      	beq.n	801a4fc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	f003 0320 	and.w	r3, r3, #32
 801a520:	2b00      	cmp	r3, #0
 801a522:	d016      	beq.n	801a552 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	695b      	ldr	r3, [r3, #20]
 801a528:	4618      	mov	r0, r3
 801a52a:	f7ff faf2 	bl	8019b12 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801a52e:	f7fd fa71 	bl	8017a14 <HAL_GetTick>
 801a532:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 801a534:	e008      	b.n	801a548 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801a536:	f7fd fa6d 	bl	8017a14 <HAL_GetTick>
 801a53a:	4602      	mov	r2, r0
 801a53c:	68fb      	ldr	r3, [r7, #12]
 801a53e:	1ad3      	subs	r3, r2, r3
 801a540:	2b02      	cmp	r3, #2
 801a542:	d901      	bls.n	801a548 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 801a544:	2303      	movs	r3, #3
 801a546:	e0d5      	b.n	801a6f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 801a548:	f7ff fbdd 	bl	8019d06 <LL_RCC_IsActiveFlag_C2HPRE>
 801a54c:	4603      	mov	r3, r0
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d0f1      	beq.n	801a536 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d016      	beq.n	801a58c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	699b      	ldr	r3, [r3, #24]
 801a562:	4618      	mov	r0, r3
 801a564:	f7ff faeb 	bl	8019b3e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801a568:	f7fd fa54 	bl	8017a14 <HAL_GetTick>
 801a56c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801a56e:	e008      	b.n	801a582 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801a570:	f7fd fa50 	bl	8017a14 <HAL_GetTick>
 801a574:	4602      	mov	r2, r0
 801a576:	68fb      	ldr	r3, [r7, #12]
 801a578:	1ad3      	subs	r3, r2, r3
 801a57a:	2b02      	cmp	r3, #2
 801a57c:	d901      	bls.n	801a582 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 801a57e:	2303      	movs	r3, #3
 801a580:	e0b8      	b.n	801a6f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801a582:	f7ff fbd3 	bl	8019d2c <LL_RCC_IsActiveFlag_SHDHPRE>
 801a586:	4603      	mov	r3, r0
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d0f1      	beq.n	801a570 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	f003 0304 	and.w	r3, r3, #4
 801a594:	2b00      	cmp	r3, #0
 801a596:	d016      	beq.n	801a5c6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	68db      	ldr	r3, [r3, #12]
 801a59c:	4618      	mov	r0, r3
 801a59e:	f7ff fae5 	bl	8019b6c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801a5a2:	f7fd fa37 	bl	8017a14 <HAL_GetTick>
 801a5a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 801a5a8:	e008      	b.n	801a5bc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801a5aa:	f7fd fa33 	bl	8017a14 <HAL_GetTick>
 801a5ae:	4602      	mov	r2, r0
 801a5b0:	68fb      	ldr	r3, [r7, #12]
 801a5b2:	1ad3      	subs	r3, r2, r3
 801a5b4:	2b02      	cmp	r3, #2
 801a5b6:	d901      	bls.n	801a5bc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 801a5b8:	2303      	movs	r3, #3
 801a5ba:	e09b      	b.n	801a6f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 801a5bc:	f7ff fbc9 	bl	8019d52 <LL_RCC_IsActiveFlag_PPRE1>
 801a5c0:	4603      	mov	r3, r0
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d0f1      	beq.n	801a5aa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	f003 0308 	and.w	r3, r3, #8
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d017      	beq.n	801a602 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	691b      	ldr	r3, [r3, #16]
 801a5d6:	00db      	lsls	r3, r3, #3
 801a5d8:	4618      	mov	r0, r3
 801a5da:	f7ff fadb 	bl	8019b94 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801a5de:	f7fd fa19 	bl	8017a14 <HAL_GetTick>
 801a5e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 801a5e4:	e008      	b.n	801a5f8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801a5e6:	f7fd fa15 	bl	8017a14 <HAL_GetTick>
 801a5ea:	4602      	mov	r2, r0
 801a5ec:	68fb      	ldr	r3, [r7, #12]
 801a5ee:	1ad3      	subs	r3, r2, r3
 801a5f0:	2b02      	cmp	r3, #2
 801a5f2:	d901      	bls.n	801a5f8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 801a5f4:	2303      	movs	r3, #3
 801a5f6:	e07d      	b.n	801a6f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 801a5f8:	f7ff fbbd 	bl	8019d76 <LL_RCC_IsActiveFlag_PPRE2>
 801a5fc:	4603      	mov	r3, r0
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d0f1      	beq.n	801a5e6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	f003 0301 	and.w	r3, r3, #1
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d043      	beq.n	801a696 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	685b      	ldr	r3, [r3, #4]
 801a612:	2b02      	cmp	r3, #2
 801a614:	d106      	bne.n	801a624 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 801a616:	f7ff f87b 	bl	8019710 <LL_RCC_HSE_IsReady>
 801a61a:	4603      	mov	r3, r0
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d11e      	bne.n	801a65e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801a620:	2301      	movs	r3, #1
 801a622:	e067      	b.n	801a6f4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	685b      	ldr	r3, [r3, #4]
 801a628:	2b03      	cmp	r3, #3
 801a62a:	d106      	bne.n	801a63a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 801a62c:	f7ff fb16 	bl	8019c5c <LL_RCC_PLL_IsReady>
 801a630:	4603      	mov	r3, r0
 801a632:	2b00      	cmp	r3, #0
 801a634:	d113      	bne.n	801a65e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801a636:	2301      	movs	r3, #1
 801a638:	e05c      	b.n	801a6f4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	685b      	ldr	r3, [r3, #4]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d106      	bne.n	801a650 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 801a642:	f7ff f9e3 	bl	8019a0c <LL_RCC_MSI_IsReady>
 801a646:	4603      	mov	r3, r0
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d108      	bne.n	801a65e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801a64c:	2301      	movs	r3, #1
 801a64e:	e051      	b.n	801a6f4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 801a650:	f7ff f88e 	bl	8019770 <LL_RCC_HSI_IsReady>
 801a654:	4603      	mov	r3, r0
 801a656:	2b00      	cmp	r3, #0
 801a658:	d101      	bne.n	801a65e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801a65a:	2301      	movs	r3, #1
 801a65c:	e04a      	b.n	801a6f4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	685b      	ldr	r3, [r3, #4]
 801a662:	4618      	mov	r0, r3
 801a664:	f7ff fa21 	bl	8019aaa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801a668:	f7fd f9d4 	bl	8017a14 <HAL_GetTick>
 801a66c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a66e:	e00a      	b.n	801a686 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a670:	f7fd f9d0 	bl	8017a14 <HAL_GetTick>
 801a674:	4602      	mov	r2, r0
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	1ad3      	subs	r3, r2, r3
 801a67a:	f241 3288 	movw	r2, #5000	; 0x1388
 801a67e:	4293      	cmp	r3, r2
 801a680:	d901      	bls.n	801a686 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 801a682:	2303      	movs	r3, #3
 801a684:	e036      	b.n	801a6f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a686:	f7ff fa24 	bl	8019ad2 <LL_RCC_GetSysClkSource>
 801a68a:	4602      	mov	r2, r0
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	685b      	ldr	r3, [r3, #4]
 801a690:	009b      	lsls	r3, r3, #2
 801a692:	429a      	cmp	r2, r3
 801a694:	d1ec      	bne.n	801a670 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801a696:	4b19      	ldr	r3, [pc, #100]	; (801a6fc <HAL_RCC_ClockConfig+0x278>)
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	f003 0307 	and.w	r3, r3, #7
 801a69e:	683a      	ldr	r2, [r7, #0]
 801a6a0:	429a      	cmp	r2, r3
 801a6a2:	d21b      	bcs.n	801a6dc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a6a4:	4b15      	ldr	r3, [pc, #84]	; (801a6fc <HAL_RCC_ClockConfig+0x278>)
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	f023 0207 	bic.w	r2, r3, #7
 801a6ac:	4913      	ldr	r1, [pc, #76]	; (801a6fc <HAL_RCC_ClockConfig+0x278>)
 801a6ae:	683b      	ldr	r3, [r7, #0]
 801a6b0:	4313      	orrs	r3, r2
 801a6b2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801a6b4:	f7fd f9ae 	bl	8017a14 <HAL_GetTick>
 801a6b8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801a6ba:	e008      	b.n	801a6ce <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801a6bc:	f7fd f9aa 	bl	8017a14 <HAL_GetTick>
 801a6c0:	4602      	mov	r2, r0
 801a6c2:	68fb      	ldr	r3, [r7, #12]
 801a6c4:	1ad3      	subs	r3, r2, r3
 801a6c6:	2b02      	cmp	r3, #2
 801a6c8:	d901      	bls.n	801a6ce <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 801a6ca:	2303      	movs	r3, #3
 801a6cc:	e012      	b.n	801a6f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801a6ce:	4b0b      	ldr	r3, [pc, #44]	; (801a6fc <HAL_RCC_ClockConfig+0x278>)
 801a6d0:	681b      	ldr	r3, [r3, #0]
 801a6d2:	f003 0307 	and.w	r3, r3, #7
 801a6d6:	683a      	ldr	r2, [r7, #0]
 801a6d8:	429a      	cmp	r2, r3
 801a6da:	d1ef      	bne.n	801a6bc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801a6dc:	f000 f87e 	bl	801a7dc <HAL_RCC_GetHCLKFreq>
 801a6e0:	4603      	mov	r3, r0
 801a6e2:	4a07      	ldr	r2, [pc, #28]	; (801a700 <HAL_RCC_ClockConfig+0x27c>)
 801a6e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 801a6e6:	f7fd f9a1 	bl	8017a2c <HAL_GetTickPrio>
 801a6ea:	4603      	mov	r3, r0
 801a6ec:	4618      	mov	r0, r3
 801a6ee:	f7fd f943 	bl	8017978 <HAL_InitTick>
 801a6f2:	4603      	mov	r3, r0
}
 801a6f4:	4618      	mov	r0, r3
 801a6f6:	3710      	adds	r7, #16
 801a6f8:	46bd      	mov	sp, r7
 801a6fa:	bd80      	pop	{r7, pc}
 801a6fc:	58004000 	.word	0x58004000
 801a700:	20000018 	.word	0x20000018

0801a704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801a704:	b590      	push	{r4, r7, lr}
 801a706:	b085      	sub	sp, #20
 801a708:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a70a:	f7ff f9e2 	bl	8019ad2 <LL_RCC_GetSysClkSource>
 801a70e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	2b00      	cmp	r3, #0
 801a714:	d10a      	bne.n	801a72c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801a716:	f7ff f99e 	bl	8019a56 <LL_RCC_MSI_GetRange>
 801a71a:	4603      	mov	r3, r0
 801a71c:	091b      	lsrs	r3, r3, #4
 801a71e:	f003 030f 	and.w	r3, r3, #15
 801a722:	4a2b      	ldr	r2, [pc, #172]	; (801a7d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 801a724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a728:	60fb      	str	r3, [r7, #12]
 801a72a:	e04b      	b.n	801a7c4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	2b04      	cmp	r3, #4
 801a730:	d102      	bne.n	801a738 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801a732:	4b28      	ldr	r3, [pc, #160]	; (801a7d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 801a734:	60fb      	str	r3, [r7, #12]
 801a736:	e045      	b.n	801a7c4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	2b08      	cmp	r3, #8
 801a73c:	d10a      	bne.n	801a754 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801a73e:	f7fe ffb7 	bl	80196b0 <LL_RCC_HSE_IsEnabledDiv2>
 801a742:	4603      	mov	r3, r0
 801a744:	2b01      	cmp	r3, #1
 801a746:	d102      	bne.n	801a74e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 801a748:	4b22      	ldr	r3, [pc, #136]	; (801a7d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 801a74a:	60fb      	str	r3, [r7, #12]
 801a74c:	e03a      	b.n	801a7c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 801a74e:	4b22      	ldr	r3, [pc, #136]	; (801a7d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 801a750:	60fb      	str	r3, [r7, #12]
 801a752:	e037      	b.n	801a7c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 801a754:	f7ff fab9 	bl	8019cca <LL_RCC_PLL_GetMainSource>
 801a758:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 801a75a:	683b      	ldr	r3, [r7, #0]
 801a75c:	2b02      	cmp	r3, #2
 801a75e:	d003      	beq.n	801a768 <HAL_RCC_GetSysClockFreq+0x64>
 801a760:	683b      	ldr	r3, [r7, #0]
 801a762:	2b03      	cmp	r3, #3
 801a764:	d003      	beq.n	801a76e <HAL_RCC_GetSysClockFreq+0x6a>
 801a766:	e00d      	b.n	801a784 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 801a768:	4b1a      	ldr	r3, [pc, #104]	; (801a7d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 801a76a:	60bb      	str	r3, [r7, #8]
        break;
 801a76c:	e015      	b.n	801a79a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801a76e:	f7fe ff9f 	bl	80196b0 <LL_RCC_HSE_IsEnabledDiv2>
 801a772:	4603      	mov	r3, r0
 801a774:	2b01      	cmp	r3, #1
 801a776:	d102      	bne.n	801a77e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 801a778:	4b16      	ldr	r3, [pc, #88]	; (801a7d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 801a77a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 801a77c:	e00d      	b.n	801a79a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 801a77e:	4b16      	ldr	r3, [pc, #88]	; (801a7d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 801a780:	60bb      	str	r3, [r7, #8]
        break;
 801a782:	e00a      	b.n	801a79a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801a784:	f7ff f967 	bl	8019a56 <LL_RCC_MSI_GetRange>
 801a788:	4603      	mov	r3, r0
 801a78a:	091b      	lsrs	r3, r3, #4
 801a78c:	f003 030f 	and.w	r3, r3, #15
 801a790:	4a0f      	ldr	r2, [pc, #60]	; (801a7d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 801a792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a796:	60bb      	str	r3, [r7, #8]
        break;
 801a798:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 801a79a:	f7ff fa71 	bl	8019c80 <LL_RCC_PLL_GetN>
 801a79e:	4602      	mov	r2, r0
 801a7a0:	68bb      	ldr	r3, [r7, #8]
 801a7a2:	fb03 f402 	mul.w	r4, r3, r2
 801a7a6:	f7ff fa84 	bl	8019cb2 <LL_RCC_PLL_GetDivider>
 801a7aa:	4603      	mov	r3, r0
 801a7ac:	091b      	lsrs	r3, r3, #4
 801a7ae:	3301      	adds	r3, #1
 801a7b0:	fbb4 f4f3 	udiv	r4, r4, r3
 801a7b4:	f7ff fa71 	bl	8019c9a <LL_RCC_PLL_GetR>
 801a7b8:	4603      	mov	r3, r0
 801a7ba:	0f5b      	lsrs	r3, r3, #29
 801a7bc:	3301      	adds	r3, #1
 801a7be:	fbb4 f3f3 	udiv	r3, r4, r3
 801a7c2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 801a7c4:	68fb      	ldr	r3, [r7, #12]
}
 801a7c6:	4618      	mov	r0, r3
 801a7c8:	3714      	adds	r7, #20
 801a7ca:	46bd      	mov	sp, r7
 801a7cc:	bd90      	pop	{r4, r7, pc}
 801a7ce:	bf00      	nop
 801a7d0:	080200f4 	.word	0x080200f4
 801a7d4:	00f42400 	.word	0x00f42400
 801a7d8:	01e84800 	.word	0x01e84800

0801a7dc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801a7dc:	b598      	push	{r3, r4, r7, lr}
 801a7de:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 801a7e0:	f7ff ff90 	bl	801a704 <HAL_RCC_GetSysClockFreq>
 801a7e4:	4604      	mov	r4, r0
 801a7e6:	f7ff f9e9 	bl	8019bbc <LL_RCC_GetAHBPrescaler>
 801a7ea:	4603      	mov	r3, r0
 801a7ec:	091b      	lsrs	r3, r3, #4
 801a7ee:	f003 030f 	and.w	r3, r3, #15
 801a7f2:	4a03      	ldr	r2, [pc, #12]	; (801a800 <HAL_RCC_GetHCLKFreq+0x24>)
 801a7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a7f8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	bd98      	pop	{r3, r4, r7, pc}
 801a800:	08020094 	.word	0x08020094

0801a804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801a804:	b598      	push	{r3, r4, r7, lr}
 801a806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 801a808:	f7ff ffe8 	bl	801a7dc <HAL_RCC_GetHCLKFreq>
 801a80c:	4604      	mov	r4, r0
 801a80e:	f7ff f9ef 	bl	8019bf0 <LL_RCC_GetAPB1Prescaler>
 801a812:	4603      	mov	r3, r0
 801a814:	0a1b      	lsrs	r3, r3, #8
 801a816:	f003 0307 	and.w	r3, r3, #7
 801a81a:	4a04      	ldr	r2, [pc, #16]	; (801a82c <HAL_RCC_GetPCLK1Freq+0x28>)
 801a81c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a820:	f003 031f 	and.w	r3, r3, #31
 801a824:	fa24 f303 	lsr.w	r3, r4, r3
}
 801a828:	4618      	mov	r0, r3
 801a82a:	bd98      	pop	{r3, r4, r7, pc}
 801a82c:	080200d4 	.word	0x080200d4

0801a830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801a830:	b598      	push	{r3, r4, r7, lr}
 801a832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 801a834:	f7ff ffd2 	bl	801a7dc <HAL_RCC_GetHCLKFreq>
 801a838:	4604      	mov	r4, r0
 801a83a:	f7ff f9e5 	bl	8019c08 <LL_RCC_GetAPB2Prescaler>
 801a83e:	4603      	mov	r3, r0
 801a840:	0adb      	lsrs	r3, r3, #11
 801a842:	f003 0307 	and.w	r3, r3, #7
 801a846:	4a04      	ldr	r2, [pc, #16]	; (801a858 <HAL_RCC_GetPCLK2Freq+0x28>)
 801a848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a84c:	f003 031f 	and.w	r3, r3, #31
 801a850:	fa24 f303 	lsr.w	r3, r4, r3
}
 801a854:	4618      	mov	r0, r3
 801a856:	bd98      	pop	{r3, r4, r7, pc}
 801a858:	080200d4 	.word	0x080200d4

0801a85c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 801a85c:	b590      	push	{r4, r7, lr}
 801a85e:	b085      	sub	sp, #20
 801a860:	af00      	add	r7, sp, #0
 801a862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	2bb0      	cmp	r3, #176	; 0xb0
 801a868:	d903      	bls.n	801a872 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 801a86a:	4b15      	ldr	r3, [pc, #84]	; (801a8c0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 801a86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a86e:	60fb      	str	r3, [r7, #12]
 801a870:	e007      	b.n	801a882 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	091b      	lsrs	r3, r3, #4
 801a876:	f003 030f 	and.w	r3, r3, #15
 801a87a:	4a11      	ldr	r2, [pc, #68]	; (801a8c0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 801a87c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a880:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 801a882:	f7ff f9a7 	bl	8019bd4 <LL_RCC_GetAHB4Prescaler>
 801a886:	4603      	mov	r3, r0
 801a888:	091b      	lsrs	r3, r3, #4
 801a88a:	f003 030f 	and.w	r3, r3, #15
 801a88e:	4a0d      	ldr	r2, [pc, #52]	; (801a8c4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 801a890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a894:	68fa      	ldr	r2, [r7, #12]
 801a896:	fbb2 f3f3 	udiv	r3, r2, r3
 801a89a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 801a89c:	68bb      	ldr	r3, [r7, #8]
 801a89e:	4a0a      	ldr	r2, [pc, #40]	; (801a8c8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 801a8a0:	fba2 2303 	umull	r2, r3, r2, r3
 801a8a4:	0c9c      	lsrs	r4, r3, #18
 801a8a6:	f7fe fef5 	bl	8019694 <HAL_PWREx_GetVoltageRange>
 801a8aa:	4603      	mov	r3, r0
 801a8ac:	4619      	mov	r1, r3
 801a8ae:	4620      	mov	r0, r4
 801a8b0:	f000 f80c 	bl	801a8cc <RCC_SetFlashLatency>
 801a8b4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	3714      	adds	r7, #20
 801a8ba:	46bd      	mov	sp, r7
 801a8bc:	bd90      	pop	{r4, r7, pc}
 801a8be:	bf00      	nop
 801a8c0:	080200f4 	.word	0x080200f4
 801a8c4:	08020094 	.word	0x08020094
 801a8c8:	431bde83 	.word	0x431bde83

0801a8cc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 801a8cc:	b590      	push	{r4, r7, lr}
 801a8ce:	b093      	sub	sp, #76	; 0x4c
 801a8d0:	af00      	add	r7, sp, #0
 801a8d2:	6078      	str	r0, [r7, #4]
 801a8d4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 801a8d6:	4b37      	ldr	r3, [pc, #220]	; (801a9b4 <RCC_SetFlashLatency+0xe8>)
 801a8d8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 801a8dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a8de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 801a8e2:	4a35      	ldr	r2, [pc, #212]	; (801a9b8 <RCC_SetFlashLatency+0xec>)
 801a8e4:	f107 031c 	add.w	r3, r7, #28
 801a8e8:	ca07      	ldmia	r2, {r0, r1, r2}
 801a8ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 801a8ee:	4b33      	ldr	r3, [pc, #204]	; (801a9bc <RCC_SetFlashLatency+0xf0>)
 801a8f0:	f107 040c 	add.w	r4, r7, #12
 801a8f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a8f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 801a8fa:	2300      	movs	r3, #0
 801a8fc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 801a8fe:	683b      	ldr	r3, [r7, #0]
 801a900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a904:	d11a      	bne.n	801a93c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801a906:	2300      	movs	r3, #0
 801a908:	643b      	str	r3, [r7, #64]	; 0x40
 801a90a:	e013      	b.n	801a934 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 801a90c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a90e:	009b      	lsls	r3, r3, #2
 801a910:	3348      	adds	r3, #72	; 0x48
 801a912:	443b      	add	r3, r7
 801a914:	f853 3c20 	ldr.w	r3, [r3, #-32]
 801a918:	687a      	ldr	r2, [r7, #4]
 801a91a:	429a      	cmp	r2, r3
 801a91c:	d807      	bhi.n	801a92e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801a91e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a920:	009b      	lsls	r3, r3, #2
 801a922:	3348      	adds	r3, #72	; 0x48
 801a924:	443b      	add	r3, r7
 801a926:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801a92a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 801a92c:	e020      	b.n	801a970 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801a92e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a930:	3301      	adds	r3, #1
 801a932:	643b      	str	r3, [r7, #64]	; 0x40
 801a934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a936:	2b03      	cmp	r3, #3
 801a938:	d9e8      	bls.n	801a90c <RCC_SetFlashLatency+0x40>
 801a93a:	e019      	b.n	801a970 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 801a93c:	2300      	movs	r3, #0
 801a93e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a940:	e013      	b.n	801a96a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 801a942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a944:	009b      	lsls	r3, r3, #2
 801a946:	3348      	adds	r3, #72	; 0x48
 801a948:	443b      	add	r3, r7
 801a94a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 801a94e:	687a      	ldr	r2, [r7, #4]
 801a950:	429a      	cmp	r2, r3
 801a952:	d807      	bhi.n	801a964 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801a954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a956:	009b      	lsls	r3, r3, #2
 801a958:	3348      	adds	r3, #72	; 0x48
 801a95a:	443b      	add	r3, r7
 801a95c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801a960:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 801a962:	e005      	b.n	801a970 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 801a964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a966:	3301      	adds	r3, #1
 801a968:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a96c:	2b02      	cmp	r3, #2
 801a96e:	d9e8      	bls.n	801a942 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 801a970:	4b13      	ldr	r3, [pc, #76]	; (801a9c0 <RCC_SetFlashLatency+0xf4>)
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	f023 0207 	bic.w	r2, r3, #7
 801a978:	4911      	ldr	r1, [pc, #68]	; (801a9c0 <RCC_SetFlashLatency+0xf4>)
 801a97a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a97c:	4313      	orrs	r3, r2
 801a97e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801a980:	f7fd f848 	bl	8017a14 <HAL_GetTick>
 801a984:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801a986:	e008      	b.n	801a99a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801a988:	f7fd f844 	bl	8017a14 <HAL_GetTick>
 801a98c:	4602      	mov	r2, r0
 801a98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a990:	1ad3      	subs	r3, r2, r3
 801a992:	2b02      	cmp	r3, #2
 801a994:	d901      	bls.n	801a99a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 801a996:	2303      	movs	r3, #3
 801a998:	e007      	b.n	801a9aa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801a99a:	4b09      	ldr	r3, [pc, #36]	; (801a9c0 <RCC_SetFlashLatency+0xf4>)
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	f003 0307 	and.w	r3, r3, #7
 801a9a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a9a4:	429a      	cmp	r2, r3
 801a9a6:	d1ef      	bne.n	801a988 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 801a9a8:	2300      	movs	r3, #0
}
 801a9aa:	4618      	mov	r0, r3
 801a9ac:	374c      	adds	r7, #76	; 0x4c
 801a9ae:	46bd      	mov	sp, r7
 801a9b0:	bd90      	pop	{r4, r7, pc}
 801a9b2:	bf00      	nop
 801a9b4:	0801f63c 	.word	0x0801f63c
 801a9b8:	0801f64c 	.word	0x0801f64c
 801a9bc:	0801f658 	.word	0x0801f658
 801a9c0:	58004000 	.word	0x58004000

0801a9c4 <LL_RCC_LSE_IsEnabled>:
{
 801a9c4:	b480      	push	{r7}
 801a9c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 801a9c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a9cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a9d0:	f003 0301 	and.w	r3, r3, #1
 801a9d4:	2b01      	cmp	r3, #1
 801a9d6:	d101      	bne.n	801a9dc <LL_RCC_LSE_IsEnabled+0x18>
 801a9d8:	2301      	movs	r3, #1
 801a9da:	e000      	b.n	801a9de <LL_RCC_LSE_IsEnabled+0x1a>
 801a9dc:	2300      	movs	r3, #0
}
 801a9de:	4618      	mov	r0, r3
 801a9e0:	46bd      	mov	sp, r7
 801a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9e6:	4770      	bx	lr

0801a9e8 <LL_RCC_LSE_IsReady>:
{
 801a9e8:	b480      	push	{r7}
 801a9ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801a9ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a9f4:	f003 0302 	and.w	r3, r3, #2
 801a9f8:	2b02      	cmp	r3, #2
 801a9fa:	d101      	bne.n	801aa00 <LL_RCC_LSE_IsReady+0x18>
 801a9fc:	2301      	movs	r3, #1
 801a9fe:	e000      	b.n	801aa02 <LL_RCC_LSE_IsReady+0x1a>
 801aa00:	2300      	movs	r3, #0
}
 801aa02:	4618      	mov	r0, r3
 801aa04:	46bd      	mov	sp, r7
 801aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa0a:	4770      	bx	lr

0801aa0c <LL_RCC_MSI_EnablePLLMode>:
{
 801aa0c:	b480      	push	{r7}
 801aa0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 801aa10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aa14:	681b      	ldr	r3, [r3, #0]
 801aa16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801aa1a:	f043 0304 	orr.w	r3, r3, #4
 801aa1e:	6013      	str	r3, [r2, #0]
}
 801aa20:	bf00      	nop
 801aa22:	46bd      	mov	sp, r7
 801aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa28:	4770      	bx	lr

0801aa2a <LL_RCC_SetRFWKPClockSource>:
{
 801aa2a:	b480      	push	{r7}
 801aa2c:	b083      	sub	sp, #12
 801aa2e:	af00      	add	r7, sp, #0
 801aa30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 801aa32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aa36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801aa3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801aa3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	4313      	orrs	r3, r2
 801aa46:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 801aa4a:	bf00      	nop
 801aa4c:	370c      	adds	r7, #12
 801aa4e:	46bd      	mov	sp, r7
 801aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa54:	4770      	bx	lr

0801aa56 <LL_RCC_SetSMPSClockSource>:
{
 801aa56:	b480      	push	{r7}
 801aa58:	b083      	sub	sp, #12
 801aa5a:	af00      	add	r7, sp, #0
 801aa5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 801aa5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aa62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa64:	f023 0203 	bic.w	r2, r3, #3
 801aa68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	4313      	orrs	r3, r2
 801aa70:	624b      	str	r3, [r1, #36]	; 0x24
}
 801aa72:	bf00      	nop
 801aa74:	370c      	adds	r7, #12
 801aa76:	46bd      	mov	sp, r7
 801aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa7c:	4770      	bx	lr

0801aa7e <LL_RCC_SetSMPSPrescaler>:
{
 801aa7e:	b480      	push	{r7}
 801aa80:	b083      	sub	sp, #12
 801aa82:	af00      	add	r7, sp, #0
 801aa84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 801aa86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aa8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801aa90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	4313      	orrs	r3, r2
 801aa98:	624b      	str	r3, [r1, #36]	; 0x24
}
 801aa9a:	bf00      	nop
 801aa9c:	370c      	adds	r7, #12
 801aa9e:	46bd      	mov	sp, r7
 801aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaa4:	4770      	bx	lr

0801aaa6 <LL_RCC_SetUSARTClockSource>:
{
 801aaa6:	b480      	push	{r7}
 801aaa8:	b083      	sub	sp, #12
 801aaaa:	af00      	add	r7, sp, #0
 801aaac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 801aaae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801aab6:	f023 0203 	bic.w	r2, r3, #3
 801aaba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	4313      	orrs	r3, r2
 801aac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801aac6:	bf00      	nop
 801aac8:	370c      	adds	r7, #12
 801aaca:	46bd      	mov	sp, r7
 801aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aad0:	4770      	bx	lr

0801aad2 <LL_RCC_SetLPUARTClockSource>:
{
 801aad2:	b480      	push	{r7}
 801aad4:	b083      	sub	sp, #12
 801aad6:	af00      	add	r7, sp, #0
 801aad8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 801aada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801aae2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801aae6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	4313      	orrs	r3, r2
 801aaee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801aaf2:	bf00      	nop
 801aaf4:	370c      	adds	r7, #12
 801aaf6:	46bd      	mov	sp, r7
 801aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aafc:	4770      	bx	lr

0801aafe <LL_RCC_SetI2CClockSource>:
{
 801aafe:	b480      	push	{r7}
 801ab00:	b083      	sub	sp, #12
 801ab02:	af00      	add	r7, sp, #0
 801ab04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 801ab06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ab0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	091b      	lsrs	r3, r3, #4
 801ab12:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801ab16:	43db      	mvns	r3, r3
 801ab18:	401a      	ands	r2, r3
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	011b      	lsls	r3, r3, #4
 801ab1e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801ab22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801ab26:	4313      	orrs	r3, r2
 801ab28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801ab2c:	bf00      	nop
 801ab2e:	370c      	adds	r7, #12
 801ab30:	46bd      	mov	sp, r7
 801ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab36:	4770      	bx	lr

0801ab38 <LL_RCC_SetLPTIMClockSource>:
{
 801ab38:	b480      	push	{r7}
 801ab3a:	b083      	sub	sp, #12
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801ab40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ab44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	0c1b      	lsrs	r3, r3, #16
 801ab4c:	041b      	lsls	r3, r3, #16
 801ab4e:	43db      	mvns	r3, r3
 801ab50:	401a      	ands	r2, r3
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	041b      	lsls	r3, r3, #16
 801ab56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801ab5a:	4313      	orrs	r3, r2
 801ab5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801ab60:	bf00      	nop
 801ab62:	370c      	adds	r7, #12
 801ab64:	46bd      	mov	sp, r7
 801ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab6a:	4770      	bx	lr

0801ab6c <LL_RCC_SetSAIClockSource>:
{
 801ab6c:	b480      	push	{r7}
 801ab6e:	b083      	sub	sp, #12
 801ab70:	af00      	add	r7, sp, #0
 801ab72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 801ab74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ab78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ab7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801ab80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	4313      	orrs	r3, r2
 801ab88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801ab8c:	bf00      	nop
 801ab8e:	370c      	adds	r7, #12
 801ab90:	46bd      	mov	sp, r7
 801ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab96:	4770      	bx	lr

0801ab98 <LL_RCC_SetRNGClockSource>:
{
 801ab98:	b480      	push	{r7}
 801ab9a:	b083      	sub	sp, #12
 801ab9c:	af00      	add	r7, sp, #0
 801ab9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 801aba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801aba8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801abac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	4313      	orrs	r3, r2
 801abb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801abb8:	bf00      	nop
 801abba:	370c      	adds	r7, #12
 801abbc:	46bd      	mov	sp, r7
 801abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abc2:	4770      	bx	lr

0801abc4 <LL_RCC_SetCLK48ClockSource>:
{
 801abc4:	b480      	push	{r7}
 801abc6:	b083      	sub	sp, #12
 801abc8:	af00      	add	r7, sp, #0
 801abca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 801abcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801abd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801abd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801abd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	4313      	orrs	r3, r2
 801abe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801abe4:	bf00      	nop
 801abe6:	370c      	adds	r7, #12
 801abe8:	46bd      	mov	sp, r7
 801abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abee:	4770      	bx	lr

0801abf0 <LL_RCC_SetUSBClockSource>:
{
 801abf0:	b580      	push	{r7, lr}
 801abf2:	b082      	sub	sp, #8
 801abf4:	af00      	add	r7, sp, #0
 801abf6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 801abf8:	6878      	ldr	r0, [r7, #4]
 801abfa:	f7ff ffe3 	bl	801abc4 <LL_RCC_SetCLK48ClockSource>
}
 801abfe:	bf00      	nop
 801ac00:	3708      	adds	r7, #8
 801ac02:	46bd      	mov	sp, r7
 801ac04:	bd80      	pop	{r7, pc}

0801ac06 <LL_RCC_SetADCClockSource>:
{
 801ac06:	b480      	push	{r7}
 801ac08:	b083      	sub	sp, #12
 801ac0a:	af00      	add	r7, sp, #0
 801ac0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 801ac0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ac12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ac16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801ac1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	4313      	orrs	r3, r2
 801ac22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801ac26:	bf00      	nop
 801ac28:	370c      	adds	r7, #12
 801ac2a:	46bd      	mov	sp, r7
 801ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac30:	4770      	bx	lr

0801ac32 <LL_RCC_SetRTCClockSource>:
{
 801ac32:	b480      	push	{r7}
 801ac34:	b083      	sub	sp, #12
 801ac36:	af00      	add	r7, sp, #0
 801ac38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 801ac3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ac3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ac42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801ac46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	4313      	orrs	r3, r2
 801ac4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 801ac52:	bf00      	nop
 801ac54:	370c      	adds	r7, #12
 801ac56:	46bd      	mov	sp, r7
 801ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac5c:	4770      	bx	lr

0801ac5e <LL_RCC_GetRTCClockSource>:
{
 801ac5e:	b480      	push	{r7}
 801ac60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 801ac62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ac66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ac6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 801ac6e:	4618      	mov	r0, r3
 801ac70:	46bd      	mov	sp, r7
 801ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac76:	4770      	bx	lr

0801ac78 <LL_RCC_ForceBackupDomainReset>:
{
 801ac78:	b480      	push	{r7}
 801ac7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801ac7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ac80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ac84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ac88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ac8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801ac90:	bf00      	nop
 801ac92:	46bd      	mov	sp, r7
 801ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac98:	4770      	bx	lr

0801ac9a <LL_RCC_ReleaseBackupDomainReset>:
{
 801ac9a:	b480      	push	{r7}
 801ac9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801ac9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801aca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801acaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801acae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801acb2:	bf00      	nop
 801acb4:	46bd      	mov	sp, r7
 801acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acba:	4770      	bx	lr

0801acbc <LL_RCC_PLLSAI1_Enable>:
{
 801acbc:	b480      	push	{r7}
 801acbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801acc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801acca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801acce:	6013      	str	r3, [r2, #0]
}
 801acd0:	bf00      	nop
 801acd2:	46bd      	mov	sp, r7
 801acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acd8:	4770      	bx	lr

0801acda <LL_RCC_PLLSAI1_Disable>:
{
 801acda:	b480      	push	{r7}
 801acdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801acde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ace8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801acec:	6013      	str	r3, [r2, #0]
}
 801acee:	bf00      	nop
 801acf0:	46bd      	mov	sp, r7
 801acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acf6:	4770      	bx	lr

0801acf8 <LL_RCC_PLLSAI1_IsReady>:
{
 801acf8:	b480      	push	{r7}
 801acfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 801acfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801ad06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801ad0a:	d101      	bne.n	801ad10 <LL_RCC_PLLSAI1_IsReady+0x18>
 801ad0c:	2301      	movs	r3, #1
 801ad0e:	e000      	b.n	801ad12 <LL_RCC_PLLSAI1_IsReady+0x1a>
 801ad10:	2300      	movs	r3, #0
}
 801ad12:	4618      	mov	r0, r3
 801ad14:	46bd      	mov	sp, r7
 801ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad1a:	4770      	bx	lr

0801ad1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801ad1c:	b580      	push	{r7, lr}
 801ad1e:	b088      	sub	sp, #32
 801ad20:	af00      	add	r7, sp, #0
 801ad22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 801ad24:	2300      	movs	r3, #0
 801ad26:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 801ad28:	2300      	movs	r3, #0
 801ad2a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	d034      	beq.n	801ada2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801ad40:	d021      	beq.n	801ad86 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 801ad42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801ad46:	d81b      	bhi.n	801ad80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801ad48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801ad4c:	d01d      	beq.n	801ad8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 801ad4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801ad52:	d815      	bhi.n	801ad80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d00b      	beq.n	801ad70 <HAL_RCCEx_PeriphCLKConfig+0x54>
 801ad58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801ad5c:	d110      	bne.n	801ad80 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 801ad5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad62:	68db      	ldr	r3, [r3, #12]
 801ad64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ad68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ad6c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 801ad6e:	e00d      	b.n	801ad8c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	3304      	adds	r3, #4
 801ad74:	4618      	mov	r0, r3
 801ad76:	f000 f94d 	bl	801b014 <RCCEx_PLLSAI1_ConfigNP>
 801ad7a:	4603      	mov	r3, r0
 801ad7c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801ad7e:	e005      	b.n	801ad8c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 801ad80:	2301      	movs	r3, #1
 801ad82:	77fb      	strb	r3, [r7, #31]
        break;
 801ad84:	e002      	b.n	801ad8c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 801ad86:	bf00      	nop
 801ad88:	e000      	b.n	801ad8c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 801ad8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ad8c:	7ffb      	ldrb	r3, [r7, #31]
 801ad8e:	2b00      	cmp	r3, #0
 801ad90:	d105      	bne.n	801ad9e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad96:	4618      	mov	r0, r3
 801ad98:	f7ff fee8 	bl	801ab6c <LL_RCC_SetSAIClockSource>
 801ad9c:	e001      	b.n	801ada2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ad9e:	7ffb      	ldrb	r3, [r7, #31]
 801ada0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	681b      	ldr	r3, [r3, #0]
 801ada6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d046      	beq.n	801ae3c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 801adae:	f7ff ff56 	bl	801ac5e <LL_RCC_GetRTCClockSource>
 801adb2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801adb8:	69ba      	ldr	r2, [r7, #24]
 801adba:	429a      	cmp	r2, r3
 801adbc:	d03c      	beq.n	801ae38 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801adbe:	f7fe fc59 	bl	8019674 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 801adc2:	69bb      	ldr	r3, [r7, #24]
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d105      	bne.n	801add4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801adcc:	4618      	mov	r0, r3
 801adce:	f7ff ff30 	bl	801ac32 <LL_RCC_SetRTCClockSource>
 801add2:	e02e      	b.n	801ae32 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 801add4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801add8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801addc:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 801adde:	f7ff ff4b 	bl	801ac78 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 801ade2:	f7ff ff5a 	bl	801ac9a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 801ade6:	697b      	ldr	r3, [r7, #20]
 801ade8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801adf0:	4313      	orrs	r3, r2
 801adf2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 801adf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801adf8:	697b      	ldr	r3, [r7, #20]
 801adfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 801adfe:	f7ff fde1 	bl	801a9c4 <LL_RCC_LSE_IsEnabled>
 801ae02:	4603      	mov	r3, r0
 801ae04:	2b01      	cmp	r3, #1
 801ae06:	d114      	bne.n	801ae32 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801ae08:	f7fc fe04 	bl	8017a14 <HAL_GetTick>
 801ae0c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 801ae0e:	e00b      	b.n	801ae28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ae10:	f7fc fe00 	bl	8017a14 <HAL_GetTick>
 801ae14:	4602      	mov	r2, r0
 801ae16:	693b      	ldr	r3, [r7, #16]
 801ae18:	1ad3      	subs	r3, r2, r3
 801ae1a:	f241 3288 	movw	r2, #5000	; 0x1388
 801ae1e:	4293      	cmp	r3, r2
 801ae20:	d902      	bls.n	801ae28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 801ae22:	2303      	movs	r3, #3
 801ae24:	77fb      	strb	r3, [r7, #31]
              break;
 801ae26:	e004      	b.n	801ae32 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 801ae28:	f7ff fdde 	bl	801a9e8 <LL_RCC_LSE_IsReady>
 801ae2c:	4603      	mov	r3, r0
 801ae2e:	2b01      	cmp	r3, #1
 801ae30:	d1ee      	bne.n	801ae10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 801ae32:	7ffb      	ldrb	r3, [r7, #31]
 801ae34:	77bb      	strb	r3, [r7, #30]
 801ae36:	e001      	b.n	801ae3c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ae38:	7ffb      	ldrb	r3, [r7, #31]
 801ae3a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	f003 0301 	and.w	r3, r3, #1
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	d004      	beq.n	801ae52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	699b      	ldr	r3, [r3, #24]
 801ae4c:	4618      	mov	r0, r3
 801ae4e:	f7ff fe2a 	bl	801aaa6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	681b      	ldr	r3, [r3, #0]
 801ae56:	f003 0302 	and.w	r3, r3, #2
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d004      	beq.n	801ae68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	69db      	ldr	r3, [r3, #28]
 801ae62:	4618      	mov	r0, r3
 801ae64:	f7ff fe35 	bl	801aad2 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	f003 0310 	and.w	r3, r3, #16
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d004      	beq.n	801ae7e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae78:	4618      	mov	r0, r3
 801ae7a:	f7ff fe5d 	bl	801ab38 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	681b      	ldr	r3, [r3, #0]
 801ae82:	f003 0320 	and.w	r3, r3, #32
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d004      	beq.n	801ae94 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae8e:	4618      	mov	r0, r3
 801ae90:	f7ff fe52 	bl	801ab38 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	f003 0304 	and.w	r3, r3, #4
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d004      	beq.n	801aeaa <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	6a1b      	ldr	r3, [r3, #32]
 801aea4:	4618      	mov	r0, r3
 801aea6:	f7ff fe2a 	bl	801aafe <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	f003 0308 	and.w	r3, r3, #8
 801aeb2:	2b00      	cmp	r3, #0
 801aeb4:	d004      	beq.n	801aec0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aeba:	4618      	mov	r0, r3
 801aebc:	f7ff fe1f 	bl	801aafe <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d022      	beq.n	801af12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aed0:	4618      	mov	r0, r3
 801aed2:	f7ff fe8d 	bl	801abf0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aeda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801aede:	d107      	bne.n	801aef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 801aee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aee4:	68db      	ldr	r3, [r3, #12]
 801aee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801aeea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801aeee:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aef4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801aef8:	d10b      	bne.n	801af12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	3304      	adds	r3, #4
 801aefe:	4618      	mov	r0, r3
 801af00:	f000 f8e3 	bl	801b0ca <RCCEx_PLLSAI1_ConfigNQ>
 801af04:	4603      	mov	r3, r0
 801af06:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801af08:	7ffb      	ldrb	r3, [r7, #31]
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d001      	beq.n	801af12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 801af0e:	7ffb      	ldrb	r3, [r7, #31]
 801af10:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d02b      	beq.n	801af76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801af26:	d008      	beq.n	801af3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801af30:	d003      	beq.n	801af3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af36:	2b00      	cmp	r3, #0
 801af38:	d105      	bne.n	801af46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af3e:	4618      	mov	r0, r3
 801af40:	f7ff fe2a 	bl	801ab98 <LL_RCC_SetRNGClockSource>
 801af44:	e00a      	b.n	801af5c <HAL_RCCEx_PeriphCLKConfig+0x240>
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801af4e:	60fb      	str	r3, [r7, #12]
 801af50:	2000      	movs	r0, #0
 801af52:	f7ff fe21 	bl	801ab98 <LL_RCC_SetRNGClockSource>
 801af56:	68f8      	ldr	r0, [r7, #12]
 801af58:	f7ff fe34 	bl	801abc4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af60:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 801af64:	d107      	bne.n	801af76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 801af66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801af6a:	68db      	ldr	r3, [r3, #12]
 801af6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801af70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801af74:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d022      	beq.n	801afc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801af86:	4618      	mov	r0, r3
 801af88:	f7ff fe3d 	bl	801ac06 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801af90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801af94:	d107      	bne.n	801afa6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801af96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801af9a:	68db      	ldr	r3, [r3, #12]
 801af9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801afa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801afa4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801afaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801afae:	d10b      	bne.n	801afc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	3304      	adds	r3, #4
 801afb4:	4618      	mov	r0, r3
 801afb6:	f000 f8e3 	bl	801b180 <RCCEx_PLLSAI1_ConfigNR>
 801afba:	4603      	mov	r3, r0
 801afbc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801afbe:	7ffb      	ldrb	r3, [r7, #31]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d001      	beq.n	801afc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 801afc4:	7ffb      	ldrb	r3, [r7, #31]
 801afc6:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	d004      	beq.n	801afde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801afd8:	4618      	mov	r0, r3
 801afda:	f7ff fd26 	bl	801aa2a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d009      	beq.n	801affe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801afee:	4618      	mov	r0, r3
 801aff0:	f7ff fd45 	bl	801aa7e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aff8:	4618      	mov	r0, r3
 801affa:	f7ff fd2c 	bl	801aa56 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 801affe:	7fbb      	ldrb	r3, [r7, #30]
}
 801b000:	4618      	mov	r0, r3
 801b002:	3720      	adds	r7, #32
 801b004:	46bd      	mov	sp, r7
 801b006:	bd80      	pop	{r7, pc}

0801b008 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 801b008:	b580      	push	{r7, lr}
 801b00a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 801b00c:	f7ff fcfe 	bl	801aa0c <LL_RCC_MSI_EnablePLLMode>
}
 801b010:	bf00      	nop
 801b012:	bd80      	pop	{r7, pc}

0801b014 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801b014:	b580      	push	{r7, lr}
 801b016:	b084      	sub	sp, #16
 801b018:	af00      	add	r7, sp, #0
 801b01a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801b01c:	2300      	movs	r3, #0
 801b01e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801b020:	f7ff fe5b 	bl	801acda <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801b024:	f7fc fcf6 	bl	8017a14 <HAL_GetTick>
 801b028:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801b02a:	e009      	b.n	801b040 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801b02c:	f7fc fcf2 	bl	8017a14 <HAL_GetTick>
 801b030:	4602      	mov	r2, r0
 801b032:	68bb      	ldr	r3, [r7, #8]
 801b034:	1ad3      	subs	r3, r2, r3
 801b036:	2b02      	cmp	r3, #2
 801b038:	d902      	bls.n	801b040 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 801b03a:	2303      	movs	r3, #3
 801b03c:	73fb      	strb	r3, [r7, #15]
      break;
 801b03e:	e004      	b.n	801b04a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801b040:	f7ff fe5a 	bl	801acf8 <LL_RCC_PLLSAI1_IsReady>
 801b044:	4603      	mov	r3, r0
 801b046:	2b00      	cmp	r3, #0
 801b048:	d1f0      	bne.n	801b02c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 801b04a:	7bfb      	ldrb	r3, [r7, #15]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d137      	bne.n	801b0c0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801b050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b054:	691b      	ldr	r3, [r3, #16]
 801b056:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	021b      	lsls	r3, r3, #8
 801b060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b064:	4313      	orrs	r3, r2
 801b066:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 801b068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b06c:	691b      	ldr	r3, [r3, #16]
 801b06e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	685b      	ldr	r3, [r3, #4]
 801b076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b07a:	4313      	orrs	r3, r2
 801b07c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801b07e:	f7ff fe1d 	bl	801acbc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b082:	f7fc fcc7 	bl	8017a14 <HAL_GetTick>
 801b086:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801b088:	e009      	b.n	801b09e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801b08a:	f7fc fcc3 	bl	8017a14 <HAL_GetTick>
 801b08e:	4602      	mov	r2, r0
 801b090:	68bb      	ldr	r3, [r7, #8]
 801b092:	1ad3      	subs	r3, r2, r3
 801b094:	2b02      	cmp	r3, #2
 801b096:	d902      	bls.n	801b09e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 801b098:	2303      	movs	r3, #3
 801b09a:	73fb      	strb	r3, [r7, #15]
        break;
 801b09c:	e004      	b.n	801b0a8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801b09e:	f7ff fe2b 	bl	801acf8 <LL_RCC_PLLSAI1_IsReady>
 801b0a2:	4603      	mov	r3, r0
 801b0a4:	2b01      	cmp	r3, #1
 801b0a6:	d1f0      	bne.n	801b08a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 801b0a8:	7bfb      	ldrb	r3, [r7, #15]
 801b0aa:	2b00      	cmp	r3, #0
 801b0ac:	d108      	bne.n	801b0c0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801b0ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b0b2:	691a      	ldr	r2, [r3, #16]
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	691b      	ldr	r3, [r3, #16]
 801b0b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b0bc:	4313      	orrs	r3, r2
 801b0be:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801b0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 801b0c2:	4618      	mov	r0, r3
 801b0c4:	3710      	adds	r7, #16
 801b0c6:	46bd      	mov	sp, r7
 801b0c8:	bd80      	pop	{r7, pc}

0801b0ca <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801b0ca:	b580      	push	{r7, lr}
 801b0cc:	b084      	sub	sp, #16
 801b0ce:	af00      	add	r7, sp, #0
 801b0d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801b0d2:	2300      	movs	r3, #0
 801b0d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801b0d6:	f7ff fe00 	bl	801acda <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801b0da:	f7fc fc9b 	bl	8017a14 <HAL_GetTick>
 801b0de:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801b0e0:	e009      	b.n	801b0f6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801b0e2:	f7fc fc97 	bl	8017a14 <HAL_GetTick>
 801b0e6:	4602      	mov	r2, r0
 801b0e8:	68bb      	ldr	r3, [r7, #8]
 801b0ea:	1ad3      	subs	r3, r2, r3
 801b0ec:	2b02      	cmp	r3, #2
 801b0ee:	d902      	bls.n	801b0f6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 801b0f0:	2303      	movs	r3, #3
 801b0f2:	73fb      	strb	r3, [r7, #15]
      break;
 801b0f4:	e004      	b.n	801b100 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801b0f6:	f7ff fdff 	bl	801acf8 <LL_RCC_PLLSAI1_IsReady>
 801b0fa:	4603      	mov	r3, r0
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d1f0      	bne.n	801b0e2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 801b100:	7bfb      	ldrb	r3, [r7, #15]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d137      	bne.n	801b176 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801b106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b10a:	691b      	ldr	r3, [r3, #16]
 801b10c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	021b      	lsls	r3, r3, #8
 801b116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b11a:	4313      	orrs	r3, r2
 801b11c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 801b11e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b122:	691b      	ldr	r3, [r3, #16]
 801b124:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	689b      	ldr	r3, [r3, #8]
 801b12c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b130:	4313      	orrs	r3, r2
 801b132:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801b134:	f7ff fdc2 	bl	801acbc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b138:	f7fc fc6c 	bl	8017a14 <HAL_GetTick>
 801b13c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801b13e:	e009      	b.n	801b154 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801b140:	f7fc fc68 	bl	8017a14 <HAL_GetTick>
 801b144:	4602      	mov	r2, r0
 801b146:	68bb      	ldr	r3, [r7, #8]
 801b148:	1ad3      	subs	r3, r2, r3
 801b14a:	2b02      	cmp	r3, #2
 801b14c:	d902      	bls.n	801b154 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 801b14e:	2303      	movs	r3, #3
 801b150:	73fb      	strb	r3, [r7, #15]
        break;
 801b152:	e004      	b.n	801b15e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801b154:	f7ff fdd0 	bl	801acf8 <LL_RCC_PLLSAI1_IsReady>
 801b158:	4603      	mov	r3, r0
 801b15a:	2b01      	cmp	r3, #1
 801b15c:	d1f0      	bne.n	801b140 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 801b15e:	7bfb      	ldrb	r3, [r7, #15]
 801b160:	2b00      	cmp	r3, #0
 801b162:	d108      	bne.n	801b176 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801b164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b168:	691a      	ldr	r2, [r3, #16]
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	691b      	ldr	r3, [r3, #16]
 801b16e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b172:	4313      	orrs	r3, r2
 801b174:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801b176:	7bfb      	ldrb	r3, [r7, #15]
}
 801b178:	4618      	mov	r0, r3
 801b17a:	3710      	adds	r7, #16
 801b17c:	46bd      	mov	sp, r7
 801b17e:	bd80      	pop	{r7, pc}

0801b180 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801b180:	b580      	push	{r7, lr}
 801b182:	b084      	sub	sp, #16
 801b184:	af00      	add	r7, sp, #0
 801b186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801b188:	2300      	movs	r3, #0
 801b18a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801b18c:	f7ff fda5 	bl	801acda <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801b190:	f7fc fc40 	bl	8017a14 <HAL_GetTick>
 801b194:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801b196:	e009      	b.n	801b1ac <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801b198:	f7fc fc3c 	bl	8017a14 <HAL_GetTick>
 801b19c:	4602      	mov	r2, r0
 801b19e:	68bb      	ldr	r3, [r7, #8]
 801b1a0:	1ad3      	subs	r3, r2, r3
 801b1a2:	2b02      	cmp	r3, #2
 801b1a4:	d902      	bls.n	801b1ac <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 801b1a6:	2303      	movs	r3, #3
 801b1a8:	73fb      	strb	r3, [r7, #15]
      break;
 801b1aa:	e004      	b.n	801b1b6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801b1ac:	f7ff fda4 	bl	801acf8 <LL_RCC_PLLSAI1_IsReady>
 801b1b0:	4603      	mov	r3, r0
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	d1f0      	bne.n	801b198 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 801b1b6:	7bfb      	ldrb	r3, [r7, #15]
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	d137      	bne.n	801b22c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801b1bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b1c0:	691b      	ldr	r3, [r3, #16]
 801b1c2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	021b      	lsls	r3, r3, #8
 801b1cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b1d0:	4313      	orrs	r3, r2
 801b1d2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 801b1d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b1d8:	691b      	ldr	r3, [r3, #16]
 801b1da:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	68db      	ldr	r3, [r3, #12]
 801b1e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b1e6:	4313      	orrs	r3, r2
 801b1e8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801b1ea:	f7ff fd67 	bl	801acbc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b1ee:	f7fc fc11 	bl	8017a14 <HAL_GetTick>
 801b1f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801b1f4:	e009      	b.n	801b20a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801b1f6:	f7fc fc0d 	bl	8017a14 <HAL_GetTick>
 801b1fa:	4602      	mov	r2, r0
 801b1fc:	68bb      	ldr	r3, [r7, #8]
 801b1fe:	1ad3      	subs	r3, r2, r3
 801b200:	2b02      	cmp	r3, #2
 801b202:	d902      	bls.n	801b20a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 801b204:	2303      	movs	r3, #3
 801b206:	73fb      	strb	r3, [r7, #15]
        break;
 801b208:	e004      	b.n	801b214 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801b20a:	f7ff fd75 	bl	801acf8 <LL_RCC_PLLSAI1_IsReady>
 801b20e:	4603      	mov	r3, r0
 801b210:	2b01      	cmp	r3, #1
 801b212:	d1f0      	bne.n	801b1f6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 801b214:	7bfb      	ldrb	r3, [r7, #15]
 801b216:	2b00      	cmp	r3, #0
 801b218:	d108      	bne.n	801b22c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801b21a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b21e:	691a      	ldr	r2, [r3, #16]
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	691b      	ldr	r3, [r3, #16]
 801b224:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b228:	4313      	orrs	r3, r2
 801b22a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801b22c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b22e:	4618      	mov	r0, r3
 801b230:	3710      	adds	r7, #16
 801b232:	46bd      	mov	sp, r7
 801b234:	bd80      	pop	{r7, pc}

0801b236 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801b236:	b580      	push	{r7, lr}
 801b238:	b082      	sub	sp, #8
 801b23a:	af00      	add	r7, sp, #0
 801b23c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	2b00      	cmp	r3, #0
 801b242:	d101      	bne.n	801b248 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801b244:	2301      	movs	r3, #1
 801b246:	e049      	b.n	801b2dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b24e:	b2db      	uxtb	r3, r3
 801b250:	2b00      	cmp	r3, #0
 801b252:	d106      	bne.n	801b262 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	2200      	movs	r2, #0
 801b258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801b25c:	6878      	ldr	r0, [r7, #4]
 801b25e:	f7e8 f8b5 	bl	80033cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	2202      	movs	r2, #2
 801b266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	681a      	ldr	r2, [r3, #0]
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	3304      	adds	r3, #4
 801b272:	4619      	mov	r1, r3
 801b274:	4610      	mov	r0, r2
 801b276:	f000 f835 	bl	801b2e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	2201      	movs	r2, #1
 801b27e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	2201      	movs	r2, #1
 801b286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	2201      	movs	r2, #1
 801b28e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	2201      	movs	r2, #1
 801b296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	2201      	movs	r2, #1
 801b29e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	2201      	movs	r2, #1
 801b2a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	2201      	movs	r2, #1
 801b2ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	2201      	movs	r2, #1
 801b2b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	2201      	movs	r2, #1
 801b2be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	2201      	movs	r2, #1
 801b2c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	2201      	movs	r2, #1
 801b2ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	2201      	movs	r2, #1
 801b2d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801b2da:	2300      	movs	r3, #0
}
 801b2dc:	4618      	mov	r0, r3
 801b2de:	3708      	adds	r7, #8
 801b2e0:	46bd      	mov	sp, r7
 801b2e2:	bd80      	pop	{r7, pc}

0801b2e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801b2e4:	b480      	push	{r7}
 801b2e6:	b085      	sub	sp, #20
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	6078      	str	r0, [r7, #4]
 801b2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	681b      	ldr	r3, [r3, #0]
 801b2f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	4a2a      	ldr	r2, [pc, #168]	; (801b3a0 <TIM_Base_SetConfig+0xbc>)
 801b2f8:	4293      	cmp	r3, r2
 801b2fa:	d003      	beq.n	801b304 <TIM_Base_SetConfig+0x20>
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b302:	d108      	bne.n	801b316 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b304:	68fb      	ldr	r3, [r7, #12]
 801b306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b30a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b30c:	683b      	ldr	r3, [r7, #0]
 801b30e:	685b      	ldr	r3, [r3, #4]
 801b310:	68fa      	ldr	r2, [r7, #12]
 801b312:	4313      	orrs	r3, r2
 801b314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	4a21      	ldr	r2, [pc, #132]	; (801b3a0 <TIM_Base_SetConfig+0xbc>)
 801b31a:	4293      	cmp	r3, r2
 801b31c:	d00b      	beq.n	801b336 <TIM_Base_SetConfig+0x52>
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b324:	d007      	beq.n	801b336 <TIM_Base_SetConfig+0x52>
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	4a1e      	ldr	r2, [pc, #120]	; (801b3a4 <TIM_Base_SetConfig+0xc0>)
 801b32a:	4293      	cmp	r3, r2
 801b32c:	d003      	beq.n	801b336 <TIM_Base_SetConfig+0x52>
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	4a1d      	ldr	r2, [pc, #116]	; (801b3a8 <TIM_Base_SetConfig+0xc4>)
 801b332:	4293      	cmp	r3, r2
 801b334:	d108      	bne.n	801b348 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b336:	68fb      	ldr	r3, [r7, #12]
 801b338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b33c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b33e:	683b      	ldr	r3, [r7, #0]
 801b340:	68db      	ldr	r3, [r3, #12]
 801b342:	68fa      	ldr	r2, [r7, #12]
 801b344:	4313      	orrs	r3, r2
 801b346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b348:	68fb      	ldr	r3, [r7, #12]
 801b34a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801b34e:	683b      	ldr	r3, [r7, #0]
 801b350:	695b      	ldr	r3, [r3, #20]
 801b352:	4313      	orrs	r3, r2
 801b354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	68fa      	ldr	r2, [r7, #12]
 801b35a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b35c:	683b      	ldr	r3, [r7, #0]
 801b35e:	689a      	ldr	r2, [r3, #8]
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b364:	683b      	ldr	r3, [r7, #0]
 801b366:	681a      	ldr	r2, [r3, #0]
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	4a0c      	ldr	r2, [pc, #48]	; (801b3a0 <TIM_Base_SetConfig+0xbc>)
 801b370:	4293      	cmp	r3, r2
 801b372:	d007      	beq.n	801b384 <TIM_Base_SetConfig+0xa0>
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	4a0b      	ldr	r2, [pc, #44]	; (801b3a4 <TIM_Base_SetConfig+0xc0>)
 801b378:	4293      	cmp	r3, r2
 801b37a:	d003      	beq.n	801b384 <TIM_Base_SetConfig+0xa0>
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	4a0a      	ldr	r2, [pc, #40]	; (801b3a8 <TIM_Base_SetConfig+0xc4>)
 801b380:	4293      	cmp	r3, r2
 801b382:	d103      	bne.n	801b38c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801b384:	683b      	ldr	r3, [r7, #0]
 801b386:	691a      	ldr	r2, [r3, #16]
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	2201      	movs	r2, #1
 801b390:	615a      	str	r2, [r3, #20]
}
 801b392:	bf00      	nop
 801b394:	3714      	adds	r7, #20
 801b396:	46bd      	mov	sp, r7
 801b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b39c:	4770      	bx	lr
 801b39e:	bf00      	nop
 801b3a0:	40012c00 	.word	0x40012c00
 801b3a4:	40014400 	.word	0x40014400
 801b3a8:	40014800 	.word	0x40014800

0801b3ac <LL_RCC_GetUSARTClockSource>:
{
 801b3ac:	b480      	push	{r7}
 801b3ae:	b083      	sub	sp, #12
 801b3b0:	af00      	add	r7, sp, #0
 801b3b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 801b3b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b3b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	4013      	ands	r3, r2
}
 801b3c0:	4618      	mov	r0, r3
 801b3c2:	370c      	adds	r7, #12
 801b3c4:	46bd      	mov	sp, r7
 801b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ca:	4770      	bx	lr

0801b3cc <LL_RCC_GetLPUARTClockSource>:
{
 801b3cc:	b480      	push	{r7}
 801b3ce:	b083      	sub	sp, #12
 801b3d0:	af00      	add	r7, sp, #0
 801b3d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 801b3d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b3d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	4013      	ands	r3, r2
}
 801b3e0:	4618      	mov	r0, r3
 801b3e2:	370c      	adds	r7, #12
 801b3e4:	46bd      	mov	sp, r7
 801b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ea:	4770      	bx	lr

0801b3ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b3ec:	b580      	push	{r7, lr}
 801b3ee:	b082      	sub	sp, #8
 801b3f0:	af00      	add	r7, sp, #0
 801b3f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d101      	bne.n	801b3fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b3fa:	2301      	movs	r3, #1
 801b3fc:	e042      	b.n	801b484 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b404:	2b00      	cmp	r3, #0
 801b406:	d106      	bne.n	801b416 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	2200      	movs	r2, #0
 801b40c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801b410:	6878      	ldr	r0, [r7, #4]
 801b412:	f7e8 f87d 	bl	8003510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	2224      	movs	r2, #36	; 0x24
 801b41a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	681a      	ldr	r2, [r3, #0]
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	681b      	ldr	r3, [r3, #0]
 801b428:	f022 0201 	bic.w	r2, r2, #1
 801b42c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801b42e:	6878      	ldr	r0, [r7, #4]
 801b430:	f000 fc54 	bl	801bcdc <UART_SetConfig>
 801b434:	4603      	mov	r3, r0
 801b436:	2b01      	cmp	r3, #1
 801b438:	d101      	bne.n	801b43e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801b43a:	2301      	movs	r3, #1
 801b43c:	e022      	b.n	801b484 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b442:	2b00      	cmp	r3, #0
 801b444:	d002      	beq.n	801b44c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801b446:	6878      	ldr	r0, [r7, #4]
 801b448:	f000 fe70 	bl	801c12c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	685a      	ldr	r2, [r3, #4]
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	681b      	ldr	r3, [r3, #0]
 801b456:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801b45a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801b45c:	687b      	ldr	r3, [r7, #4]
 801b45e:	681b      	ldr	r3, [r3, #0]
 801b460:	689a      	ldr	r2, [r3, #8]
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801b46a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	681a      	ldr	r2, [r3, #0]
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	681b      	ldr	r3, [r3, #0]
 801b476:	f042 0201 	orr.w	r2, r2, #1
 801b47a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801b47c:	6878      	ldr	r0, [r7, #4]
 801b47e:	f000 fef7 	bl	801c270 <UART_CheckIdleState>
 801b482:	4603      	mov	r3, r0
}
 801b484:	4618      	mov	r0, r3
 801b486:	3708      	adds	r7, #8
 801b488:	46bd      	mov	sp, r7
 801b48a:	bd80      	pop	{r7, pc}

0801b48c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b48c:	b580      	push	{r7, lr}
 801b48e:	b08a      	sub	sp, #40	; 0x28
 801b490:	af02      	add	r7, sp, #8
 801b492:	60f8      	str	r0, [r7, #12]
 801b494:	60b9      	str	r1, [r7, #8]
 801b496:	603b      	str	r3, [r7, #0]
 801b498:	4613      	mov	r3, r2
 801b49a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801b49c:	68fb      	ldr	r3, [r7, #12]
 801b49e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b4a2:	2b20      	cmp	r3, #32
 801b4a4:	d17b      	bne.n	801b59e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801b4a6:	68bb      	ldr	r3, [r7, #8]
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	d002      	beq.n	801b4b2 <HAL_UART_Transmit+0x26>
 801b4ac:	88fb      	ldrh	r3, [r7, #6]
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	d101      	bne.n	801b4b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801b4b2:	2301      	movs	r3, #1
 801b4b4:	e074      	b.n	801b5a0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b4b6:	68fb      	ldr	r3, [r7, #12]
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801b4be:	68fb      	ldr	r3, [r7, #12]
 801b4c0:	2221      	movs	r2, #33	; 0x21
 801b4c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801b4c6:	f7fc faa5 	bl	8017a14 <HAL_GetTick>
 801b4ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801b4cc:	68fb      	ldr	r3, [r7, #12]
 801b4ce:	88fa      	ldrh	r2, [r7, #6]
 801b4d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801b4d4:	68fb      	ldr	r3, [r7, #12]
 801b4d6:	88fa      	ldrh	r2, [r7, #6]
 801b4d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	689b      	ldr	r3, [r3, #8]
 801b4e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b4e4:	d108      	bne.n	801b4f8 <HAL_UART_Transmit+0x6c>
 801b4e6:	68fb      	ldr	r3, [r7, #12]
 801b4e8:	691b      	ldr	r3, [r3, #16]
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d104      	bne.n	801b4f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801b4ee:	2300      	movs	r3, #0
 801b4f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801b4f2:	68bb      	ldr	r3, [r7, #8]
 801b4f4:	61bb      	str	r3, [r7, #24]
 801b4f6:	e003      	b.n	801b500 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801b4f8:	68bb      	ldr	r3, [r7, #8]
 801b4fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801b4fc:	2300      	movs	r3, #0
 801b4fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801b500:	e030      	b.n	801b564 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801b502:	683b      	ldr	r3, [r7, #0]
 801b504:	9300      	str	r3, [sp, #0]
 801b506:	697b      	ldr	r3, [r7, #20]
 801b508:	2200      	movs	r2, #0
 801b50a:	2180      	movs	r1, #128	; 0x80
 801b50c:	68f8      	ldr	r0, [r7, #12]
 801b50e:	f000 ff59 	bl	801c3c4 <UART_WaitOnFlagUntilTimeout>
 801b512:	4603      	mov	r3, r0
 801b514:	2b00      	cmp	r3, #0
 801b516:	d005      	beq.n	801b524 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	2220      	movs	r2, #32
 801b51c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801b520:	2303      	movs	r3, #3
 801b522:	e03d      	b.n	801b5a0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801b524:	69fb      	ldr	r3, [r7, #28]
 801b526:	2b00      	cmp	r3, #0
 801b528:	d10b      	bne.n	801b542 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801b52a:	69bb      	ldr	r3, [r7, #24]
 801b52c:	881b      	ldrh	r3, [r3, #0]
 801b52e:	461a      	mov	r2, r3
 801b530:	68fb      	ldr	r3, [r7, #12]
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b538:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801b53a:	69bb      	ldr	r3, [r7, #24]
 801b53c:	3302      	adds	r3, #2
 801b53e:	61bb      	str	r3, [r7, #24]
 801b540:	e007      	b.n	801b552 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801b542:	69fb      	ldr	r3, [r7, #28]
 801b544:	781a      	ldrb	r2, [r3, #0]
 801b546:	68fb      	ldr	r3, [r7, #12]
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801b54c:	69fb      	ldr	r3, [r7, #28]
 801b54e:	3301      	adds	r3, #1
 801b550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801b552:	68fb      	ldr	r3, [r7, #12]
 801b554:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801b558:	b29b      	uxth	r3, r3
 801b55a:	3b01      	subs	r3, #1
 801b55c:	b29a      	uxth	r2, r3
 801b55e:	68fb      	ldr	r3, [r7, #12]
 801b560:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801b564:	68fb      	ldr	r3, [r7, #12]
 801b566:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801b56a:	b29b      	uxth	r3, r3
 801b56c:	2b00      	cmp	r3, #0
 801b56e:	d1c8      	bne.n	801b502 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801b570:	683b      	ldr	r3, [r7, #0]
 801b572:	9300      	str	r3, [sp, #0]
 801b574:	697b      	ldr	r3, [r7, #20]
 801b576:	2200      	movs	r2, #0
 801b578:	2140      	movs	r1, #64	; 0x40
 801b57a:	68f8      	ldr	r0, [r7, #12]
 801b57c:	f000 ff22 	bl	801c3c4 <UART_WaitOnFlagUntilTimeout>
 801b580:	4603      	mov	r3, r0
 801b582:	2b00      	cmp	r3, #0
 801b584:	d005      	beq.n	801b592 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801b586:	68fb      	ldr	r3, [r7, #12]
 801b588:	2220      	movs	r2, #32
 801b58a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801b58e:	2303      	movs	r3, #3
 801b590:	e006      	b.n	801b5a0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801b592:	68fb      	ldr	r3, [r7, #12]
 801b594:	2220      	movs	r2, #32
 801b596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801b59a:	2300      	movs	r3, #0
 801b59c:	e000      	b.n	801b5a0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801b59e:	2302      	movs	r3, #2
  }
}
 801b5a0:	4618      	mov	r0, r3
 801b5a2:	3720      	adds	r7, #32
 801b5a4:	46bd      	mov	sp, r7
 801b5a6:	bd80      	pop	{r7, pc}

0801b5a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801b5a8:	b580      	push	{r7, lr}
 801b5aa:	b08a      	sub	sp, #40	; 0x28
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	60f8      	str	r0, [r7, #12]
 801b5b0:	60b9      	str	r1, [r7, #8]
 801b5b2:	4613      	mov	r3, r2
 801b5b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801b5b6:	68fb      	ldr	r3, [r7, #12]
 801b5b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b5bc:	2b20      	cmp	r3, #32
 801b5be:	d137      	bne.n	801b630 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801b5c0:	68bb      	ldr	r3, [r7, #8]
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	d002      	beq.n	801b5cc <HAL_UART_Receive_DMA+0x24>
 801b5c6:	88fb      	ldrh	r3, [r7, #6]
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	d101      	bne.n	801b5d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801b5cc:	2301      	movs	r3, #1
 801b5ce:	e030      	b.n	801b632 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b5d0:	68fb      	ldr	r3, [r7, #12]
 801b5d2:	2200      	movs	r2, #0
 801b5d4:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b5d6:	68fb      	ldr	r3, [r7, #12]
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	4a18      	ldr	r2, [pc, #96]	; (801b63c <HAL_UART_Receive_DMA+0x94>)
 801b5dc:	4293      	cmp	r3, r2
 801b5de:	d01f      	beq.n	801b620 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b5e0:	68fb      	ldr	r3, [r7, #12]
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	685b      	ldr	r3, [r3, #4]
 801b5e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	d018      	beq.n	801b620 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b5ee:	68fb      	ldr	r3, [r7, #12]
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b5f4:	697b      	ldr	r3, [r7, #20]
 801b5f6:	e853 3f00 	ldrex	r3, [r3]
 801b5fa:	613b      	str	r3, [r7, #16]
   return(result);
 801b5fc:	693b      	ldr	r3, [r7, #16]
 801b5fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801b602:	627b      	str	r3, [r7, #36]	; 0x24
 801b604:	68fb      	ldr	r3, [r7, #12]
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	461a      	mov	r2, r3
 801b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b60c:	623b      	str	r3, [r7, #32]
 801b60e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b610:	69f9      	ldr	r1, [r7, #28]
 801b612:	6a3a      	ldr	r2, [r7, #32]
 801b614:	e841 2300 	strex	r3, r2, [r1]
 801b618:	61bb      	str	r3, [r7, #24]
   return(result);
 801b61a:	69bb      	ldr	r3, [r7, #24]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d1e6      	bne.n	801b5ee <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801b620:	88fb      	ldrh	r3, [r7, #6]
 801b622:	461a      	mov	r2, r3
 801b624:	68b9      	ldr	r1, [r7, #8]
 801b626:	68f8      	ldr	r0, [r7, #12]
 801b628:	f000 ff34 	bl	801c494 <UART_Start_Receive_DMA>
 801b62c:	4603      	mov	r3, r0
 801b62e:	e000      	b.n	801b632 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801b630:	2302      	movs	r3, #2
  }
}
 801b632:	4618      	mov	r0, r3
 801b634:	3728      	adds	r7, #40	; 0x28
 801b636:	46bd      	mov	sp, r7
 801b638:	bd80      	pop	{r7, pc}
 801b63a:	bf00      	nop
 801b63c:	40008000 	.word	0x40008000

0801b640 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801b640:	b580      	push	{r7, lr}
 801b642:	b0ba      	sub	sp, #232	; 0xe8
 801b644:	af00      	add	r7, sp, #0
 801b646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	69db      	ldr	r3, [r3, #28]
 801b64e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	681b      	ldr	r3, [r3, #0]
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	689b      	ldr	r3, [r3, #8]
 801b662:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801b666:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801b66a:	f640 030f 	movw	r3, #2063	; 0x80f
 801b66e:	4013      	ands	r3, r2
 801b670:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801b674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d11b      	bne.n	801b6b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801b67c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b680:	f003 0320 	and.w	r3, r3, #32
 801b684:	2b00      	cmp	r3, #0
 801b686:	d015      	beq.n	801b6b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801b688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b68c:	f003 0320 	and.w	r3, r3, #32
 801b690:	2b00      	cmp	r3, #0
 801b692:	d105      	bne.n	801b6a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801b694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d009      	beq.n	801b6b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	f000 82e3 	beq.w	801bc70 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b6ae:	6878      	ldr	r0, [r7, #4]
 801b6b0:	4798      	blx	r3
      }
      return;
 801b6b2:	e2dd      	b.n	801bc70 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801b6b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	f000 8123 	beq.w	801b904 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801b6be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801b6c2:	4b8d      	ldr	r3, [pc, #564]	; (801b8f8 <HAL_UART_IRQHandler+0x2b8>)
 801b6c4:	4013      	ands	r3, r2
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	d106      	bne.n	801b6d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801b6ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801b6ce:	4b8b      	ldr	r3, [pc, #556]	; (801b8fc <HAL_UART_IRQHandler+0x2bc>)
 801b6d0:	4013      	ands	r3, r2
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	f000 8116 	beq.w	801b904 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801b6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b6dc:	f003 0301 	and.w	r3, r3, #1
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d011      	beq.n	801b708 <HAL_UART_IRQHandler+0xc8>
 801b6e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	d00b      	beq.n	801b708 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	2201      	movs	r2, #1
 801b6f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b6fe:	f043 0201 	orr.w	r2, r3, #1
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b70c:	f003 0302 	and.w	r3, r3, #2
 801b710:	2b00      	cmp	r3, #0
 801b712:	d011      	beq.n	801b738 <HAL_UART_IRQHandler+0xf8>
 801b714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b718:	f003 0301 	and.w	r3, r3, #1
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d00b      	beq.n	801b738 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	2202      	movs	r2, #2
 801b726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b72e:	f043 0204 	orr.w	r2, r3, #4
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b73c:	f003 0304 	and.w	r3, r3, #4
 801b740:	2b00      	cmp	r3, #0
 801b742:	d011      	beq.n	801b768 <HAL_UART_IRQHandler+0x128>
 801b744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b748:	f003 0301 	and.w	r3, r3, #1
 801b74c:	2b00      	cmp	r3, #0
 801b74e:	d00b      	beq.n	801b768 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	681b      	ldr	r3, [r3, #0]
 801b754:	2204      	movs	r2, #4
 801b756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b75e:	f043 0202 	orr.w	r2, r3, #2
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801b768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b76c:	f003 0308 	and.w	r3, r3, #8
 801b770:	2b00      	cmp	r3, #0
 801b772:	d017      	beq.n	801b7a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801b774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b778:	f003 0320 	and.w	r3, r3, #32
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d105      	bne.n	801b78c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801b780:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801b784:	4b5c      	ldr	r3, [pc, #368]	; (801b8f8 <HAL_UART_IRQHandler+0x2b8>)
 801b786:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d00b      	beq.n	801b7a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	2208      	movs	r2, #8
 801b792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b79a:	f043 0208 	orr.w	r2, r3, #8
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801b7a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b7a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d012      	beq.n	801b7d6 <HAL_UART_IRQHandler+0x196>
 801b7b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b7b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d00c      	beq.n	801b7d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b7c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b7cc:	f043 0220 	orr.w	r2, r3, #32
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b7dc:	2b00      	cmp	r3, #0
 801b7de:	f000 8249 	beq.w	801bc74 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801b7e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b7e6:	f003 0320 	and.w	r3, r3, #32
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	d013      	beq.n	801b816 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801b7ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b7f2:	f003 0320 	and.w	r3, r3, #32
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d105      	bne.n	801b806 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801b7fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b7fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b802:	2b00      	cmp	r3, #0
 801b804:	d007      	beq.n	801b816 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d003      	beq.n	801b816 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b812:	6878      	ldr	r0, [r7, #4]
 801b814:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b81c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	681b      	ldr	r3, [r3, #0]
 801b824:	689b      	ldr	r3, [r3, #8]
 801b826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b82a:	2b40      	cmp	r3, #64	; 0x40
 801b82c:	d005      	beq.n	801b83a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801b82e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b832:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b836:	2b00      	cmp	r3, #0
 801b838:	d054      	beq.n	801b8e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801b83a:	6878      	ldr	r0, [r7, #4]
 801b83c:	f000 ff11 	bl	801c662 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	681b      	ldr	r3, [r3, #0]
 801b844:	689b      	ldr	r3, [r3, #8]
 801b846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b84a:	2b40      	cmp	r3, #64	; 0x40
 801b84c:	d146      	bne.n	801b8dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	3308      	adds	r3, #8
 801b854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b858:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b85c:	e853 3f00 	ldrex	r3, [r3]
 801b860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801b864:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b86c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	681b      	ldr	r3, [r3, #0]
 801b874:	3308      	adds	r3, #8
 801b876:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801b87a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801b87e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b882:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801b886:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b88a:	e841 2300 	strex	r3, r2, [r1]
 801b88e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801b892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b896:	2b00      	cmp	r3, #0
 801b898:	d1d9      	bne.n	801b84e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d017      	beq.n	801b8d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b8aa:	4a15      	ldr	r2, [pc, #84]	; (801b900 <HAL_UART_IRQHandler+0x2c0>)
 801b8ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b8b4:	4618      	mov	r0, r3
 801b8b6:	f7fc fb7b 	bl	8017fb0 <HAL_DMA_Abort_IT>
 801b8ba:	4603      	mov	r3, r0
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d019      	beq.n	801b8f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b8c8:	687a      	ldr	r2, [r7, #4]
 801b8ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801b8ce:	4610      	mov	r0, r2
 801b8d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b8d2:	e00f      	b.n	801b8f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801b8d4:	6878      	ldr	r0, [r7, #4]
 801b8d6:	f000 f9eb 	bl	801bcb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b8da:	e00b      	b.n	801b8f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801b8dc:	6878      	ldr	r0, [r7, #4]
 801b8de:	f000 f9e7 	bl	801bcb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b8e2:	e007      	b.n	801b8f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801b8e4:	6878      	ldr	r0, [r7, #4]
 801b8e6:	f000 f9e3 	bl	801bcb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	2200      	movs	r2, #0
 801b8ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801b8f2:	e1bf      	b.n	801bc74 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b8f4:	bf00      	nop
    return;
 801b8f6:	e1bd      	b.n	801bc74 <HAL_UART_IRQHandler+0x634>
 801b8f8:	10000001 	.word	0x10000001
 801b8fc:	04000120 	.word	0x04000120
 801b900:	0801c919 	.word	0x0801c919

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b908:	2b01      	cmp	r3, #1
 801b90a:	f040 8153 	bne.w	801bbb4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801b90e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b912:	f003 0310 	and.w	r3, r3, #16
 801b916:	2b00      	cmp	r3, #0
 801b918:	f000 814c 	beq.w	801bbb4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801b91c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b920:	f003 0310 	and.w	r3, r3, #16
 801b924:	2b00      	cmp	r3, #0
 801b926:	f000 8145 	beq.w	801bbb4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	2210      	movs	r2, #16
 801b930:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	689b      	ldr	r3, [r3, #8]
 801b938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b93c:	2b40      	cmp	r3, #64	; 0x40
 801b93e:	f040 80bb 	bne.w	801bab8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	685b      	ldr	r3, [r3, #4]
 801b94c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801b950:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801b954:	2b00      	cmp	r3, #0
 801b956:	f000 818f 	beq.w	801bc78 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801b960:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b964:	429a      	cmp	r2, r3
 801b966:	f080 8187 	bcs.w	801bc78 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b970:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	681b      	ldr	r3, [r3, #0]
 801b97e:	f003 0320 	and.w	r3, r3, #32
 801b982:	2b00      	cmp	r3, #0
 801b984:	f040 8087 	bne.w	801ba96 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b990:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b994:	e853 3f00 	ldrex	r3, [r3]
 801b998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801b99c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b9a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b9a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	681b      	ldr	r3, [r3, #0]
 801b9ac:	461a      	mov	r2, r3
 801b9ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b9b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b9b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b9ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801b9be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801b9c2:	e841 2300 	strex	r3, r2, [r1]
 801b9c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801b9ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d1da      	bne.n	801b988 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	3308      	adds	r3, #8
 801b9d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b9da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b9dc:	e853 3f00 	ldrex	r3, [r3]
 801b9e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801b9e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b9e4:	f023 0301 	bic.w	r3, r3, #1
 801b9e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	681b      	ldr	r3, [r3, #0]
 801b9f0:	3308      	adds	r3, #8
 801b9f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b9f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801b9fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b9fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801b9fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801ba02:	e841 2300 	strex	r3, r2, [r1]
 801ba06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801ba08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	d1e1      	bne.n	801b9d2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	3308      	adds	r3, #8
 801ba14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ba18:	e853 3f00 	ldrex	r3, [r3]
 801ba1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801ba1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ba20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ba24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	681b      	ldr	r3, [r3, #0]
 801ba2c:	3308      	adds	r3, #8
 801ba2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801ba32:	66fa      	str	r2, [r7, #108]	; 0x6c
 801ba34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801ba38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801ba3a:	e841 2300 	strex	r3, r2, [r1]
 801ba3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801ba40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d1e3      	bne.n	801ba0e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	2220      	movs	r2, #32
 801ba4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	2200      	movs	r2, #0
 801ba52:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	681b      	ldr	r3, [r3, #0]
 801ba58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ba5c:	e853 3f00 	ldrex	r3, [r3]
 801ba60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801ba62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ba64:	f023 0310 	bic.w	r3, r3, #16
 801ba68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	681b      	ldr	r3, [r3, #0]
 801ba70:	461a      	mov	r2, r3
 801ba72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ba76:	65bb      	str	r3, [r7, #88]	; 0x58
 801ba78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ba7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ba7e:	e841 2300 	strex	r3, r2, [r1]
 801ba82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801ba84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ba86:	2b00      	cmp	r3, #0
 801ba88:	d1e4      	bne.n	801ba54 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ba90:	4618      	mov	r0, r3
 801ba92:	f7fc fa2e 	bl	8017ef2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	2202      	movs	r2, #2
 801ba9a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801baa8:	b29b      	uxth	r3, r3
 801baaa:	1ad3      	subs	r3, r2, r3
 801baac:	b29b      	uxth	r3, r3
 801baae:	4619      	mov	r1, r3
 801bab0:	6878      	ldr	r0, [r7, #4]
 801bab2:	f000 f907 	bl	801bcc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801bab6:	e0df      	b.n	801bc78 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801bac4:	b29b      	uxth	r3, r3
 801bac6:	1ad3      	subs	r3, r2, r3
 801bac8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801bad2:	b29b      	uxth	r3, r3
 801bad4:	2b00      	cmp	r3, #0
 801bad6:	f000 80d1 	beq.w	801bc7c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801bada:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801bade:	2b00      	cmp	r3, #0
 801bae0:	f000 80cc 	beq.w	801bc7c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801bae4:	687b      	ldr	r3, [r7, #4]
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801baea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801baec:	e853 3f00 	ldrex	r3, [r3]
 801baf0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801baf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801baf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801baf8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	681b      	ldr	r3, [r3, #0]
 801bb00:	461a      	mov	r2, r3
 801bb02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801bb06:	647b      	str	r3, [r7, #68]	; 0x44
 801bb08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801bb0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bb0e:	e841 2300 	strex	r3, r2, [r1]
 801bb12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801bb14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d1e4      	bne.n	801bae4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	3308      	adds	r3, #8
 801bb20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb24:	e853 3f00 	ldrex	r3, [r3]
 801bb28:	623b      	str	r3, [r7, #32]
   return(result);
 801bb2a:	6a3b      	ldr	r3, [r7, #32]
 801bb2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801bb30:	f023 0301 	bic.w	r3, r3, #1
 801bb34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	681b      	ldr	r3, [r3, #0]
 801bb3c:	3308      	adds	r3, #8
 801bb3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801bb42:	633a      	str	r2, [r7, #48]	; 0x30
 801bb44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bb48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bb4a:	e841 2300 	strex	r3, r2, [r1]
 801bb4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801bb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d1e1      	bne.n	801bb1a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	2220      	movs	r2, #32
 801bb5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	2200      	movs	r2, #0
 801bb62:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	2200      	movs	r2, #0
 801bb68:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb70:	693b      	ldr	r3, [r7, #16]
 801bb72:	e853 3f00 	ldrex	r3, [r3]
 801bb76:	60fb      	str	r3, [r7, #12]
   return(result);
 801bb78:	68fb      	ldr	r3, [r7, #12]
 801bb7a:	f023 0310 	bic.w	r3, r3, #16
 801bb7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	681b      	ldr	r3, [r3, #0]
 801bb86:	461a      	mov	r2, r3
 801bb88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801bb8c:	61fb      	str	r3, [r7, #28]
 801bb8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb90:	69b9      	ldr	r1, [r7, #24]
 801bb92:	69fa      	ldr	r2, [r7, #28]
 801bb94:	e841 2300 	strex	r3, r2, [r1]
 801bb98:	617b      	str	r3, [r7, #20]
   return(result);
 801bb9a:	697b      	ldr	r3, [r7, #20]
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	d1e4      	bne.n	801bb6a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	2202      	movs	r2, #2
 801bba4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801bba6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801bbaa:	4619      	mov	r1, r3
 801bbac:	6878      	ldr	r0, [r7, #4]
 801bbae:	f000 f889 	bl	801bcc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801bbb2:	e063      	b.n	801bc7c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801bbb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	d00e      	beq.n	801bbde <HAL_UART_IRQHandler+0x59e>
 801bbc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bbc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d008      	beq.n	801bbde <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801bbd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801bbd6:	6878      	ldr	r0, [r7, #4]
 801bbd8:	f000 fedf 	bl	801c99a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801bbdc:	e051      	b.n	801bc82 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801bbde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	d014      	beq.n	801bc14 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801bbea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bbee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d105      	bne.n	801bc02 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801bbf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bbfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d008      	beq.n	801bc14 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	d03a      	beq.n	801bc80 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bc0e:	6878      	ldr	r0, [r7, #4]
 801bc10:	4798      	blx	r3
    }
    return;
 801bc12:	e035      	b.n	801bc80 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801bc14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d009      	beq.n	801bc34 <HAL_UART_IRQHandler+0x5f4>
 801bc20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bc24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bc28:	2b00      	cmp	r3, #0
 801bc2a:	d003      	beq.n	801bc34 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 801bc2c:	6878      	ldr	r0, [r7, #4]
 801bc2e:	f000 fe89 	bl	801c944 <UART_EndTransmit_IT>
    return;
 801bc32:	e026      	b.n	801bc82 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801bc34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	d009      	beq.n	801bc54 <HAL_UART_IRQHandler+0x614>
 801bc40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bc44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	d003      	beq.n	801bc54 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801bc4c:	6878      	ldr	r0, [r7, #4]
 801bc4e:	f000 feb8 	bl	801c9c2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801bc52:	e016      	b.n	801bc82 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801bc54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d010      	beq.n	801bc82 <HAL_UART_IRQHandler+0x642>
 801bc60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	da0c      	bge.n	801bc82 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801bc68:	6878      	ldr	r0, [r7, #4]
 801bc6a:	f000 fea0 	bl	801c9ae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801bc6e:	e008      	b.n	801bc82 <HAL_UART_IRQHandler+0x642>
      return;
 801bc70:	bf00      	nop
 801bc72:	e006      	b.n	801bc82 <HAL_UART_IRQHandler+0x642>
    return;
 801bc74:	bf00      	nop
 801bc76:	e004      	b.n	801bc82 <HAL_UART_IRQHandler+0x642>
      return;
 801bc78:	bf00      	nop
 801bc7a:	e002      	b.n	801bc82 <HAL_UART_IRQHandler+0x642>
      return;
 801bc7c:	bf00      	nop
 801bc7e:	e000      	b.n	801bc82 <HAL_UART_IRQHandler+0x642>
    return;
 801bc80:	bf00      	nop
  }
}
 801bc82:	37e8      	adds	r7, #232	; 0xe8
 801bc84:	46bd      	mov	sp, r7
 801bc86:	bd80      	pop	{r7, pc}

0801bc88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801bc88:	b480      	push	{r7}
 801bc8a:	b083      	sub	sp, #12
 801bc8c:	af00      	add	r7, sp, #0
 801bc8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801bc90:	bf00      	nop
 801bc92:	370c      	adds	r7, #12
 801bc94:	46bd      	mov	sp, r7
 801bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc9a:	4770      	bx	lr

0801bc9c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801bc9c:	b480      	push	{r7}
 801bc9e:	b083      	sub	sp, #12
 801bca0:	af00      	add	r7, sp, #0
 801bca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801bca4:	bf00      	nop
 801bca6:	370c      	adds	r7, #12
 801bca8:	46bd      	mov	sp, r7
 801bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcae:	4770      	bx	lr

0801bcb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801bcb0:	b480      	push	{r7}
 801bcb2:	b083      	sub	sp, #12
 801bcb4:	af00      	add	r7, sp, #0
 801bcb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801bcb8:	bf00      	nop
 801bcba:	370c      	adds	r7, #12
 801bcbc:	46bd      	mov	sp, r7
 801bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcc2:	4770      	bx	lr

0801bcc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801bcc4:	b480      	push	{r7}
 801bcc6:	b083      	sub	sp, #12
 801bcc8:	af00      	add	r7, sp, #0
 801bcca:	6078      	str	r0, [r7, #4]
 801bccc:	460b      	mov	r3, r1
 801bcce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801bcd0:	bf00      	nop
 801bcd2:	370c      	adds	r7, #12
 801bcd4:	46bd      	mov	sp, r7
 801bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcda:	4770      	bx	lr

0801bcdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801bcdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bce0:	b08c      	sub	sp, #48	; 0x30
 801bce2:	af00      	add	r7, sp, #0
 801bce4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801bce6:	2300      	movs	r3, #0
 801bce8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801bcec:	697b      	ldr	r3, [r7, #20]
 801bcee:	689a      	ldr	r2, [r3, #8]
 801bcf0:	697b      	ldr	r3, [r7, #20]
 801bcf2:	691b      	ldr	r3, [r3, #16]
 801bcf4:	431a      	orrs	r2, r3
 801bcf6:	697b      	ldr	r3, [r7, #20]
 801bcf8:	695b      	ldr	r3, [r3, #20]
 801bcfa:	431a      	orrs	r2, r3
 801bcfc:	697b      	ldr	r3, [r7, #20]
 801bcfe:	69db      	ldr	r3, [r3, #28]
 801bd00:	4313      	orrs	r3, r2
 801bd02:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801bd04:	697b      	ldr	r3, [r7, #20]
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	681a      	ldr	r2, [r3, #0]
 801bd0a:	4baf      	ldr	r3, [pc, #700]	; (801bfc8 <UART_SetConfig+0x2ec>)
 801bd0c:	4013      	ands	r3, r2
 801bd0e:	697a      	ldr	r2, [r7, #20]
 801bd10:	6812      	ldr	r2, [r2, #0]
 801bd12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bd14:	430b      	orrs	r3, r1
 801bd16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801bd18:	697b      	ldr	r3, [r7, #20]
 801bd1a:	681b      	ldr	r3, [r3, #0]
 801bd1c:	685b      	ldr	r3, [r3, #4]
 801bd1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801bd22:	697b      	ldr	r3, [r7, #20]
 801bd24:	68da      	ldr	r2, [r3, #12]
 801bd26:	697b      	ldr	r3, [r7, #20]
 801bd28:	681b      	ldr	r3, [r3, #0]
 801bd2a:	430a      	orrs	r2, r1
 801bd2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801bd2e:	697b      	ldr	r3, [r7, #20]
 801bd30:	699b      	ldr	r3, [r3, #24]
 801bd32:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801bd34:	697b      	ldr	r3, [r7, #20]
 801bd36:	681b      	ldr	r3, [r3, #0]
 801bd38:	4aa4      	ldr	r2, [pc, #656]	; (801bfcc <UART_SetConfig+0x2f0>)
 801bd3a:	4293      	cmp	r3, r2
 801bd3c:	d004      	beq.n	801bd48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801bd3e:	697b      	ldr	r3, [r7, #20]
 801bd40:	6a1b      	ldr	r3, [r3, #32]
 801bd42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bd44:	4313      	orrs	r3, r2
 801bd46:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801bd48:	697b      	ldr	r3, [r7, #20]
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	689b      	ldr	r3, [r3, #8]
 801bd4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801bd52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801bd56:	697a      	ldr	r2, [r7, #20]
 801bd58:	6812      	ldr	r2, [r2, #0]
 801bd5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bd5c:	430b      	orrs	r3, r1
 801bd5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801bd60:	697b      	ldr	r3, [r7, #20]
 801bd62:	681b      	ldr	r3, [r3, #0]
 801bd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd66:	f023 010f 	bic.w	r1, r3, #15
 801bd6a:	697b      	ldr	r3, [r7, #20]
 801bd6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bd6e:	697b      	ldr	r3, [r7, #20]
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	430a      	orrs	r2, r1
 801bd74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801bd76:	697b      	ldr	r3, [r7, #20]
 801bd78:	681b      	ldr	r3, [r3, #0]
 801bd7a:	4a95      	ldr	r2, [pc, #596]	; (801bfd0 <UART_SetConfig+0x2f4>)
 801bd7c:	4293      	cmp	r3, r2
 801bd7e:	d125      	bne.n	801bdcc <UART_SetConfig+0xf0>
 801bd80:	2003      	movs	r0, #3
 801bd82:	f7ff fb13 	bl	801b3ac <LL_RCC_GetUSARTClockSource>
 801bd86:	4603      	mov	r3, r0
 801bd88:	2b03      	cmp	r3, #3
 801bd8a:	d81b      	bhi.n	801bdc4 <UART_SetConfig+0xe8>
 801bd8c:	a201      	add	r2, pc, #4	; (adr r2, 801bd94 <UART_SetConfig+0xb8>)
 801bd8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd92:	bf00      	nop
 801bd94:	0801bda5 	.word	0x0801bda5
 801bd98:	0801bdb5 	.word	0x0801bdb5
 801bd9c:	0801bdad 	.word	0x0801bdad
 801bda0:	0801bdbd 	.word	0x0801bdbd
 801bda4:	2301      	movs	r3, #1
 801bda6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bdaa:	e042      	b.n	801be32 <UART_SetConfig+0x156>
 801bdac:	2302      	movs	r3, #2
 801bdae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bdb2:	e03e      	b.n	801be32 <UART_SetConfig+0x156>
 801bdb4:	2304      	movs	r3, #4
 801bdb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bdba:	e03a      	b.n	801be32 <UART_SetConfig+0x156>
 801bdbc:	2308      	movs	r3, #8
 801bdbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bdc2:	e036      	b.n	801be32 <UART_SetConfig+0x156>
 801bdc4:	2310      	movs	r3, #16
 801bdc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bdca:	e032      	b.n	801be32 <UART_SetConfig+0x156>
 801bdcc:	697b      	ldr	r3, [r7, #20]
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	4a7e      	ldr	r2, [pc, #504]	; (801bfcc <UART_SetConfig+0x2f0>)
 801bdd2:	4293      	cmp	r3, r2
 801bdd4:	d12a      	bne.n	801be2c <UART_SetConfig+0x150>
 801bdd6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801bdda:	f7ff faf7 	bl	801b3cc <LL_RCC_GetLPUARTClockSource>
 801bdde:	4603      	mov	r3, r0
 801bde0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801bde4:	d01a      	beq.n	801be1c <UART_SetConfig+0x140>
 801bde6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801bdea:	d81b      	bhi.n	801be24 <UART_SetConfig+0x148>
 801bdec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bdf0:	d00c      	beq.n	801be0c <UART_SetConfig+0x130>
 801bdf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bdf6:	d815      	bhi.n	801be24 <UART_SetConfig+0x148>
 801bdf8:	2b00      	cmp	r3, #0
 801bdfa:	d003      	beq.n	801be04 <UART_SetConfig+0x128>
 801bdfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801be00:	d008      	beq.n	801be14 <UART_SetConfig+0x138>
 801be02:	e00f      	b.n	801be24 <UART_SetConfig+0x148>
 801be04:	2300      	movs	r3, #0
 801be06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be0a:	e012      	b.n	801be32 <UART_SetConfig+0x156>
 801be0c:	2302      	movs	r3, #2
 801be0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be12:	e00e      	b.n	801be32 <UART_SetConfig+0x156>
 801be14:	2304      	movs	r3, #4
 801be16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be1a:	e00a      	b.n	801be32 <UART_SetConfig+0x156>
 801be1c:	2308      	movs	r3, #8
 801be1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be22:	e006      	b.n	801be32 <UART_SetConfig+0x156>
 801be24:	2310      	movs	r3, #16
 801be26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be2a:	e002      	b.n	801be32 <UART_SetConfig+0x156>
 801be2c:	2310      	movs	r3, #16
 801be2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801be32:	697b      	ldr	r3, [r7, #20]
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	4a65      	ldr	r2, [pc, #404]	; (801bfcc <UART_SetConfig+0x2f0>)
 801be38:	4293      	cmp	r3, r2
 801be3a:	f040 8097 	bne.w	801bf6c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801be3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801be42:	2b08      	cmp	r3, #8
 801be44:	d823      	bhi.n	801be8e <UART_SetConfig+0x1b2>
 801be46:	a201      	add	r2, pc, #4	; (adr r2, 801be4c <UART_SetConfig+0x170>)
 801be48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801be4c:	0801be71 	.word	0x0801be71
 801be50:	0801be8f 	.word	0x0801be8f
 801be54:	0801be79 	.word	0x0801be79
 801be58:	0801be8f 	.word	0x0801be8f
 801be5c:	0801be7f 	.word	0x0801be7f
 801be60:	0801be8f 	.word	0x0801be8f
 801be64:	0801be8f 	.word	0x0801be8f
 801be68:	0801be8f 	.word	0x0801be8f
 801be6c:	0801be87 	.word	0x0801be87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801be70:	f7fe fcc8 	bl	801a804 <HAL_RCC_GetPCLK1Freq>
 801be74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801be76:	e010      	b.n	801be9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801be78:	4b56      	ldr	r3, [pc, #344]	; (801bfd4 <UART_SetConfig+0x2f8>)
 801be7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801be7c:	e00d      	b.n	801be9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801be7e:	f7fe fc41 	bl	801a704 <HAL_RCC_GetSysClockFreq>
 801be82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801be84:	e009      	b.n	801be9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801be86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801be8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801be8c:	e005      	b.n	801be9a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 801be8e:	2300      	movs	r3, #0
 801be90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801be92:	2301      	movs	r3, #1
 801be94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801be98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801be9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	f000 812b 	beq.w	801c0f8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801bea2:	697b      	ldr	r3, [r7, #20]
 801bea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bea6:	4a4c      	ldr	r2, [pc, #304]	; (801bfd8 <UART_SetConfig+0x2fc>)
 801bea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801beac:	461a      	mov	r2, r3
 801beae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801beb0:	fbb3 f3f2 	udiv	r3, r3, r2
 801beb4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801beb6:	697b      	ldr	r3, [r7, #20]
 801beb8:	685a      	ldr	r2, [r3, #4]
 801beba:	4613      	mov	r3, r2
 801bebc:	005b      	lsls	r3, r3, #1
 801bebe:	4413      	add	r3, r2
 801bec0:	69ba      	ldr	r2, [r7, #24]
 801bec2:	429a      	cmp	r2, r3
 801bec4:	d305      	bcc.n	801bed2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801bec6:	697b      	ldr	r3, [r7, #20]
 801bec8:	685b      	ldr	r3, [r3, #4]
 801beca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801becc:	69ba      	ldr	r2, [r7, #24]
 801bece:	429a      	cmp	r2, r3
 801bed0:	d903      	bls.n	801beda <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801bed2:	2301      	movs	r3, #1
 801bed4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801bed8:	e10e      	b.n	801c0f8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801beda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bedc:	2200      	movs	r2, #0
 801bede:	60bb      	str	r3, [r7, #8]
 801bee0:	60fa      	str	r2, [r7, #12]
 801bee2:	697b      	ldr	r3, [r7, #20]
 801bee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bee6:	4a3c      	ldr	r2, [pc, #240]	; (801bfd8 <UART_SetConfig+0x2fc>)
 801bee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801beec:	b29b      	uxth	r3, r3
 801beee:	2200      	movs	r2, #0
 801bef0:	603b      	str	r3, [r7, #0]
 801bef2:	607a      	str	r2, [r7, #4]
 801bef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bef8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801befc:	f7e4 fc6a 	bl	80007d4 <__aeabi_uldivmod>
 801bf00:	4602      	mov	r2, r0
 801bf02:	460b      	mov	r3, r1
 801bf04:	4610      	mov	r0, r2
 801bf06:	4619      	mov	r1, r3
 801bf08:	f04f 0200 	mov.w	r2, #0
 801bf0c:	f04f 0300 	mov.w	r3, #0
 801bf10:	020b      	lsls	r3, r1, #8
 801bf12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801bf16:	0202      	lsls	r2, r0, #8
 801bf18:	6979      	ldr	r1, [r7, #20]
 801bf1a:	6849      	ldr	r1, [r1, #4]
 801bf1c:	0849      	lsrs	r1, r1, #1
 801bf1e:	2000      	movs	r0, #0
 801bf20:	460c      	mov	r4, r1
 801bf22:	4605      	mov	r5, r0
 801bf24:	eb12 0804 	adds.w	r8, r2, r4
 801bf28:	eb43 0905 	adc.w	r9, r3, r5
 801bf2c:	697b      	ldr	r3, [r7, #20]
 801bf2e:	685b      	ldr	r3, [r3, #4]
 801bf30:	2200      	movs	r2, #0
 801bf32:	469a      	mov	sl, r3
 801bf34:	4693      	mov	fp, r2
 801bf36:	4652      	mov	r2, sl
 801bf38:	465b      	mov	r3, fp
 801bf3a:	4640      	mov	r0, r8
 801bf3c:	4649      	mov	r1, r9
 801bf3e:	f7e4 fc49 	bl	80007d4 <__aeabi_uldivmod>
 801bf42:	4602      	mov	r2, r0
 801bf44:	460b      	mov	r3, r1
 801bf46:	4613      	mov	r3, r2
 801bf48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801bf4a:	6a3b      	ldr	r3, [r7, #32]
 801bf4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bf50:	d308      	bcc.n	801bf64 <UART_SetConfig+0x288>
 801bf52:	6a3b      	ldr	r3, [r7, #32]
 801bf54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801bf58:	d204      	bcs.n	801bf64 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 801bf5a:	697b      	ldr	r3, [r7, #20]
 801bf5c:	681b      	ldr	r3, [r3, #0]
 801bf5e:	6a3a      	ldr	r2, [r7, #32]
 801bf60:	60da      	str	r2, [r3, #12]
 801bf62:	e0c9      	b.n	801c0f8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801bf64:	2301      	movs	r3, #1
 801bf66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801bf6a:	e0c5      	b.n	801c0f8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801bf6c:	697b      	ldr	r3, [r7, #20]
 801bf6e:	69db      	ldr	r3, [r3, #28]
 801bf70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bf74:	d16d      	bne.n	801c052 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801bf76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801bf7a:	3b01      	subs	r3, #1
 801bf7c:	2b07      	cmp	r3, #7
 801bf7e:	d82d      	bhi.n	801bfdc <UART_SetConfig+0x300>
 801bf80:	a201      	add	r2, pc, #4	; (adr r2, 801bf88 <UART_SetConfig+0x2ac>)
 801bf82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf86:	bf00      	nop
 801bf88:	0801bfa9 	.word	0x0801bfa9
 801bf8c:	0801bfb1 	.word	0x0801bfb1
 801bf90:	0801bfdd 	.word	0x0801bfdd
 801bf94:	0801bfb7 	.word	0x0801bfb7
 801bf98:	0801bfdd 	.word	0x0801bfdd
 801bf9c:	0801bfdd 	.word	0x0801bfdd
 801bfa0:	0801bfdd 	.word	0x0801bfdd
 801bfa4:	0801bfbf 	.word	0x0801bfbf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801bfa8:	f7fe fc42 	bl	801a830 <HAL_RCC_GetPCLK2Freq>
 801bfac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801bfae:	e01b      	b.n	801bfe8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801bfb0:	4b08      	ldr	r3, [pc, #32]	; (801bfd4 <UART_SetConfig+0x2f8>)
 801bfb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801bfb4:	e018      	b.n	801bfe8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801bfb6:	f7fe fba5 	bl	801a704 <HAL_RCC_GetSysClockFreq>
 801bfba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801bfbc:	e014      	b.n	801bfe8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801bfbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bfc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801bfc4:	e010      	b.n	801bfe8 <UART_SetConfig+0x30c>
 801bfc6:	bf00      	nop
 801bfc8:	cfff69f3 	.word	0xcfff69f3
 801bfcc:	40008000 	.word	0x40008000
 801bfd0:	40013800 	.word	0x40013800
 801bfd4:	00f42400 	.word	0x00f42400
 801bfd8:	08020134 	.word	0x08020134
      default:
        pclk = 0U;
 801bfdc:	2300      	movs	r3, #0
 801bfde:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801bfe0:	2301      	movs	r3, #1
 801bfe2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801bfe6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	f000 8084 	beq.w	801c0f8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801bff0:	697b      	ldr	r3, [r7, #20]
 801bff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bff4:	4a4b      	ldr	r2, [pc, #300]	; (801c124 <UART_SetConfig+0x448>)
 801bff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801bffa:	461a      	mov	r2, r3
 801bffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bffe:	fbb3 f3f2 	udiv	r3, r3, r2
 801c002:	005a      	lsls	r2, r3, #1
 801c004:	697b      	ldr	r3, [r7, #20]
 801c006:	685b      	ldr	r3, [r3, #4]
 801c008:	085b      	lsrs	r3, r3, #1
 801c00a:	441a      	add	r2, r3
 801c00c:	697b      	ldr	r3, [r7, #20]
 801c00e:	685b      	ldr	r3, [r3, #4]
 801c010:	fbb2 f3f3 	udiv	r3, r2, r3
 801c014:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801c016:	6a3b      	ldr	r3, [r7, #32]
 801c018:	2b0f      	cmp	r3, #15
 801c01a:	d916      	bls.n	801c04a <UART_SetConfig+0x36e>
 801c01c:	6a3b      	ldr	r3, [r7, #32]
 801c01e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c022:	d212      	bcs.n	801c04a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801c024:	6a3b      	ldr	r3, [r7, #32]
 801c026:	b29b      	uxth	r3, r3
 801c028:	f023 030f 	bic.w	r3, r3, #15
 801c02c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801c02e:	6a3b      	ldr	r3, [r7, #32]
 801c030:	085b      	lsrs	r3, r3, #1
 801c032:	b29b      	uxth	r3, r3
 801c034:	f003 0307 	and.w	r3, r3, #7
 801c038:	b29a      	uxth	r2, r3
 801c03a:	8bfb      	ldrh	r3, [r7, #30]
 801c03c:	4313      	orrs	r3, r2
 801c03e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801c040:	697b      	ldr	r3, [r7, #20]
 801c042:	681b      	ldr	r3, [r3, #0]
 801c044:	8bfa      	ldrh	r2, [r7, #30]
 801c046:	60da      	str	r2, [r3, #12]
 801c048:	e056      	b.n	801c0f8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801c04a:	2301      	movs	r3, #1
 801c04c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801c050:	e052      	b.n	801c0f8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801c052:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c056:	3b01      	subs	r3, #1
 801c058:	2b07      	cmp	r3, #7
 801c05a:	d822      	bhi.n	801c0a2 <UART_SetConfig+0x3c6>
 801c05c:	a201      	add	r2, pc, #4	; (adr r2, 801c064 <UART_SetConfig+0x388>)
 801c05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c062:	bf00      	nop
 801c064:	0801c085 	.word	0x0801c085
 801c068:	0801c08d 	.word	0x0801c08d
 801c06c:	0801c0a3 	.word	0x0801c0a3
 801c070:	0801c093 	.word	0x0801c093
 801c074:	0801c0a3 	.word	0x0801c0a3
 801c078:	0801c0a3 	.word	0x0801c0a3
 801c07c:	0801c0a3 	.word	0x0801c0a3
 801c080:	0801c09b 	.word	0x0801c09b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801c084:	f7fe fbd4 	bl	801a830 <HAL_RCC_GetPCLK2Freq>
 801c088:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c08a:	e010      	b.n	801c0ae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801c08c:	4b26      	ldr	r3, [pc, #152]	; (801c128 <UART_SetConfig+0x44c>)
 801c08e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c090:	e00d      	b.n	801c0ae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801c092:	f7fe fb37 	bl	801a704 <HAL_RCC_GetSysClockFreq>
 801c096:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c098:	e009      	b.n	801c0ae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801c09a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c09e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c0a0:	e005      	b.n	801c0ae <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801c0a2:	2300      	movs	r3, #0
 801c0a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801c0a6:	2301      	movs	r3, #1
 801c0a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801c0ac:	bf00      	nop
    }

    if (pclk != 0U)
 801c0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	d021      	beq.n	801c0f8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801c0b4:	697b      	ldr	r3, [r7, #20]
 801c0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0b8:	4a1a      	ldr	r2, [pc, #104]	; (801c124 <UART_SetConfig+0x448>)
 801c0ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c0be:	461a      	mov	r2, r3
 801c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0c2:	fbb3 f2f2 	udiv	r2, r3, r2
 801c0c6:	697b      	ldr	r3, [r7, #20]
 801c0c8:	685b      	ldr	r3, [r3, #4]
 801c0ca:	085b      	lsrs	r3, r3, #1
 801c0cc:	441a      	add	r2, r3
 801c0ce:	697b      	ldr	r3, [r7, #20]
 801c0d0:	685b      	ldr	r3, [r3, #4]
 801c0d2:	fbb2 f3f3 	udiv	r3, r2, r3
 801c0d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801c0d8:	6a3b      	ldr	r3, [r7, #32]
 801c0da:	2b0f      	cmp	r3, #15
 801c0dc:	d909      	bls.n	801c0f2 <UART_SetConfig+0x416>
 801c0de:	6a3b      	ldr	r3, [r7, #32]
 801c0e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c0e4:	d205      	bcs.n	801c0f2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801c0e6:	6a3b      	ldr	r3, [r7, #32]
 801c0e8:	b29a      	uxth	r2, r3
 801c0ea:	697b      	ldr	r3, [r7, #20]
 801c0ec:	681b      	ldr	r3, [r3, #0]
 801c0ee:	60da      	str	r2, [r3, #12]
 801c0f0:	e002      	b.n	801c0f8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801c0f2:	2301      	movs	r3, #1
 801c0f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801c0f8:	697b      	ldr	r3, [r7, #20]
 801c0fa:	2201      	movs	r2, #1
 801c0fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801c100:	697b      	ldr	r3, [r7, #20]
 801c102:	2201      	movs	r2, #1
 801c104:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801c108:	697b      	ldr	r3, [r7, #20]
 801c10a:	2200      	movs	r2, #0
 801c10c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801c10e:	697b      	ldr	r3, [r7, #20]
 801c110:	2200      	movs	r2, #0
 801c112:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801c114:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801c118:	4618      	mov	r0, r3
 801c11a:	3730      	adds	r7, #48	; 0x30
 801c11c:	46bd      	mov	sp, r7
 801c11e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801c122:	bf00      	nop
 801c124:	08020134 	.word	0x08020134
 801c128:	00f42400 	.word	0x00f42400

0801c12c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801c12c:	b480      	push	{r7}
 801c12e:	b083      	sub	sp, #12
 801c130:	af00      	add	r7, sp, #0
 801c132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c138:	f003 0301 	and.w	r3, r3, #1
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d00a      	beq.n	801c156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	681b      	ldr	r3, [r3, #0]
 801c144:	685b      	ldr	r3, [r3, #4]
 801c146:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	430a      	orrs	r2, r1
 801c154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c15a:	f003 0302 	and.w	r3, r3, #2
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d00a      	beq.n	801c178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801c162:	687b      	ldr	r3, [r7, #4]
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	685b      	ldr	r3, [r3, #4]
 801c168:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	681b      	ldr	r3, [r3, #0]
 801c174:	430a      	orrs	r2, r1
 801c176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c17c:	f003 0304 	and.w	r3, r3, #4
 801c180:	2b00      	cmp	r3, #0
 801c182:	d00a      	beq.n	801c19a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	681b      	ldr	r3, [r3, #0]
 801c188:	685b      	ldr	r3, [r3, #4]
 801c18a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	681b      	ldr	r3, [r3, #0]
 801c196:	430a      	orrs	r2, r1
 801c198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c19e:	f003 0308 	and.w	r3, r3, #8
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d00a      	beq.n	801c1bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	681b      	ldr	r3, [r3, #0]
 801c1aa:	685b      	ldr	r3, [r3, #4]
 801c1ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c1b4:	687b      	ldr	r3, [r7, #4]
 801c1b6:	681b      	ldr	r3, [r3, #0]
 801c1b8:	430a      	orrs	r2, r1
 801c1ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1c0:	f003 0310 	and.w	r3, r3, #16
 801c1c4:	2b00      	cmp	r3, #0
 801c1c6:	d00a      	beq.n	801c1de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	689b      	ldr	r3, [r3, #8]
 801c1ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	681b      	ldr	r3, [r3, #0]
 801c1da:	430a      	orrs	r2, r1
 801c1dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1e2:	f003 0320 	and.w	r3, r3, #32
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	d00a      	beq.n	801c200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	689b      	ldr	r3, [r3, #8]
 801c1f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	430a      	orrs	r2, r1
 801c1fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d01a      	beq.n	801c242 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	681b      	ldr	r3, [r3, #0]
 801c210:	685b      	ldr	r3, [r3, #4]
 801c212:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	681b      	ldr	r3, [r3, #0]
 801c21e:	430a      	orrs	r2, r1
 801c220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c22a:	d10a      	bne.n	801c242 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	681b      	ldr	r3, [r3, #0]
 801c230:	685b      	ldr	r3, [r3, #4]
 801c232:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	430a      	orrs	r2, r1
 801c240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	d00a      	beq.n	801c264 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	685b      	ldr	r3, [r3, #4]
 801c254:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	681b      	ldr	r3, [r3, #0]
 801c260:	430a      	orrs	r2, r1
 801c262:	605a      	str	r2, [r3, #4]
  }
}
 801c264:	bf00      	nop
 801c266:	370c      	adds	r7, #12
 801c268:	46bd      	mov	sp, r7
 801c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c26e:	4770      	bx	lr

0801c270 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801c270:	b580      	push	{r7, lr}
 801c272:	b098      	sub	sp, #96	; 0x60
 801c274:	af02      	add	r7, sp, #8
 801c276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	2200      	movs	r2, #0
 801c27c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801c280:	f7fb fbc8 	bl	8017a14 <HAL_GetTick>
 801c284:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	f003 0308 	and.w	r3, r3, #8
 801c290:	2b08      	cmp	r3, #8
 801c292:	d12f      	bne.n	801c2f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801c294:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801c298:	9300      	str	r3, [sp, #0]
 801c29a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c29c:	2200      	movs	r2, #0
 801c29e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801c2a2:	6878      	ldr	r0, [r7, #4]
 801c2a4:	f000 f88e 	bl	801c3c4 <UART_WaitOnFlagUntilTimeout>
 801c2a8:	4603      	mov	r3, r0
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d022      	beq.n	801c2f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	681b      	ldr	r3, [r3, #0]
 801c2b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2b6:	e853 3f00 	ldrex	r3, [r3]
 801c2ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c2be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c2c2:	653b      	str	r3, [r7, #80]	; 0x50
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	681b      	ldr	r3, [r3, #0]
 801c2c8:	461a      	mov	r2, r3
 801c2ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c2cc:	647b      	str	r3, [r7, #68]	; 0x44
 801c2ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c2d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c2d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c2d4:	e841 2300 	strex	r3, r2, [r1]
 801c2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c2da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	d1e6      	bne.n	801c2ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801c2e0:	687b      	ldr	r3, [r7, #4]
 801c2e2:	2220      	movs	r2, #32
 801c2e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	2200      	movs	r2, #0
 801c2ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801c2f0:	2303      	movs	r3, #3
 801c2f2:	e063      	b.n	801c3bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	681b      	ldr	r3, [r3, #0]
 801c2fa:	f003 0304 	and.w	r3, r3, #4
 801c2fe:	2b04      	cmp	r3, #4
 801c300:	d149      	bne.n	801c396 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801c302:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801c306:	9300      	str	r3, [sp, #0]
 801c308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c30a:	2200      	movs	r2, #0
 801c30c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801c310:	6878      	ldr	r0, [r7, #4]
 801c312:	f000 f857 	bl	801c3c4 <UART_WaitOnFlagUntilTimeout>
 801c316:	4603      	mov	r3, r0
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d03c      	beq.n	801c396 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c324:	e853 3f00 	ldrex	r3, [r3]
 801c328:	623b      	str	r3, [r7, #32]
   return(result);
 801c32a:	6a3b      	ldr	r3, [r7, #32]
 801c32c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c330:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	681b      	ldr	r3, [r3, #0]
 801c336:	461a      	mov	r2, r3
 801c338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c33a:	633b      	str	r3, [r7, #48]	; 0x30
 801c33c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c33e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c342:	e841 2300 	strex	r3, r2, [r1]
 801c346:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d1e6      	bne.n	801c31c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	681b      	ldr	r3, [r3, #0]
 801c352:	3308      	adds	r3, #8
 801c354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c356:	693b      	ldr	r3, [r7, #16]
 801c358:	e853 3f00 	ldrex	r3, [r3]
 801c35c:	60fb      	str	r3, [r7, #12]
   return(result);
 801c35e:	68fb      	ldr	r3, [r7, #12]
 801c360:	f023 0301 	bic.w	r3, r3, #1
 801c364:	64bb      	str	r3, [r7, #72]	; 0x48
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	3308      	adds	r3, #8
 801c36c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c36e:	61fa      	str	r2, [r7, #28]
 801c370:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c372:	69b9      	ldr	r1, [r7, #24]
 801c374:	69fa      	ldr	r2, [r7, #28]
 801c376:	e841 2300 	strex	r3, r2, [r1]
 801c37a:	617b      	str	r3, [r7, #20]
   return(result);
 801c37c:	697b      	ldr	r3, [r7, #20]
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d1e5      	bne.n	801c34e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	2220      	movs	r2, #32
 801c386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	2200      	movs	r2, #0
 801c38e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801c392:	2303      	movs	r3, #3
 801c394:	e012      	b.n	801c3bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801c396:	687b      	ldr	r3, [r7, #4]
 801c398:	2220      	movs	r2, #32
 801c39a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	2220      	movs	r2, #32
 801c3a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	2200      	movs	r2, #0
 801c3aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	2200      	movs	r2, #0
 801c3b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	2200      	movs	r2, #0
 801c3b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801c3ba:	2300      	movs	r3, #0
}
 801c3bc:	4618      	mov	r0, r3
 801c3be:	3758      	adds	r7, #88	; 0x58
 801c3c0:	46bd      	mov	sp, r7
 801c3c2:	bd80      	pop	{r7, pc}

0801c3c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801c3c4:	b580      	push	{r7, lr}
 801c3c6:	b084      	sub	sp, #16
 801c3c8:	af00      	add	r7, sp, #0
 801c3ca:	60f8      	str	r0, [r7, #12]
 801c3cc:	60b9      	str	r1, [r7, #8]
 801c3ce:	603b      	str	r3, [r7, #0]
 801c3d0:	4613      	mov	r3, r2
 801c3d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c3d4:	e049      	b.n	801c46a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c3d6:	69bb      	ldr	r3, [r7, #24]
 801c3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c3dc:	d045      	beq.n	801c46a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c3de:	f7fb fb19 	bl	8017a14 <HAL_GetTick>
 801c3e2:	4602      	mov	r2, r0
 801c3e4:	683b      	ldr	r3, [r7, #0]
 801c3e6:	1ad3      	subs	r3, r2, r3
 801c3e8:	69ba      	ldr	r2, [r7, #24]
 801c3ea:	429a      	cmp	r2, r3
 801c3ec:	d302      	bcc.n	801c3f4 <UART_WaitOnFlagUntilTimeout+0x30>
 801c3ee:	69bb      	ldr	r3, [r7, #24]
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d101      	bne.n	801c3f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801c3f4:	2303      	movs	r3, #3
 801c3f6:	e048      	b.n	801c48a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801c3f8:	68fb      	ldr	r3, [r7, #12]
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	f003 0304 	and.w	r3, r3, #4
 801c402:	2b00      	cmp	r3, #0
 801c404:	d031      	beq.n	801c46a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801c406:	68fb      	ldr	r3, [r7, #12]
 801c408:	681b      	ldr	r3, [r3, #0]
 801c40a:	69db      	ldr	r3, [r3, #28]
 801c40c:	f003 0308 	and.w	r3, r3, #8
 801c410:	2b08      	cmp	r3, #8
 801c412:	d110      	bne.n	801c436 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	681b      	ldr	r3, [r3, #0]
 801c418:	2208      	movs	r2, #8
 801c41a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801c41c:	68f8      	ldr	r0, [r7, #12]
 801c41e:	f000 f920 	bl	801c662 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	2208      	movs	r2, #8
 801c426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801c42a:	68fb      	ldr	r3, [r7, #12]
 801c42c:	2200      	movs	r2, #0
 801c42e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801c432:	2301      	movs	r3, #1
 801c434:	e029      	b.n	801c48a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801c436:	68fb      	ldr	r3, [r7, #12]
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	69db      	ldr	r3, [r3, #28]
 801c43c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c444:	d111      	bne.n	801c46a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801c446:	68fb      	ldr	r3, [r7, #12]
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c44e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801c450:	68f8      	ldr	r0, [r7, #12]
 801c452:	f000 f906 	bl	801c662 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	2220      	movs	r2, #32
 801c45a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801c45e:	68fb      	ldr	r3, [r7, #12]
 801c460:	2200      	movs	r2, #0
 801c462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801c466:	2303      	movs	r3, #3
 801c468:	e00f      	b.n	801c48a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c46a:	68fb      	ldr	r3, [r7, #12]
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	69da      	ldr	r2, [r3, #28]
 801c470:	68bb      	ldr	r3, [r7, #8]
 801c472:	4013      	ands	r3, r2
 801c474:	68ba      	ldr	r2, [r7, #8]
 801c476:	429a      	cmp	r2, r3
 801c478:	bf0c      	ite	eq
 801c47a:	2301      	moveq	r3, #1
 801c47c:	2300      	movne	r3, #0
 801c47e:	b2db      	uxtb	r3, r3
 801c480:	461a      	mov	r2, r3
 801c482:	79fb      	ldrb	r3, [r7, #7]
 801c484:	429a      	cmp	r2, r3
 801c486:	d0a6      	beq.n	801c3d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801c488:	2300      	movs	r3, #0
}
 801c48a:	4618      	mov	r0, r3
 801c48c:	3710      	adds	r7, #16
 801c48e:	46bd      	mov	sp, r7
 801c490:	bd80      	pop	{r7, pc}
	...

0801c494 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c494:	b580      	push	{r7, lr}
 801c496:	b096      	sub	sp, #88	; 0x58
 801c498:	af00      	add	r7, sp, #0
 801c49a:	60f8      	str	r0, [r7, #12]
 801c49c:	60b9      	str	r1, [r7, #8]
 801c49e:	4613      	mov	r3, r2
 801c4a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801c4a2:	68fb      	ldr	r3, [r7, #12]
 801c4a4:	68ba      	ldr	r2, [r7, #8]
 801c4a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 801c4a8:	68fb      	ldr	r3, [r7, #12]
 801c4aa:	88fa      	ldrh	r2, [r7, #6]
 801c4ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	2200      	movs	r2, #0
 801c4b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c4b8:	68fb      	ldr	r3, [r7, #12]
 801c4ba:	2222      	movs	r2, #34	; 0x22
 801c4bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 801c4c0:	68fb      	ldr	r3, [r7, #12]
 801c4c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	d02d      	beq.n	801c526 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801c4ca:	68fb      	ldr	r3, [r7, #12]
 801c4cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c4d0:	4a40      	ldr	r2, [pc, #256]	; (801c5d4 <UART_Start_Receive_DMA+0x140>)
 801c4d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801c4d4:	68fb      	ldr	r3, [r7, #12]
 801c4d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c4da:	4a3f      	ldr	r2, [pc, #252]	; (801c5d8 <UART_Start_Receive_DMA+0x144>)
 801c4dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801c4de:	68fb      	ldr	r3, [r7, #12]
 801c4e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c4e4:	4a3d      	ldr	r2, [pc, #244]	; (801c5dc <UART_Start_Receive_DMA+0x148>)
 801c4e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801c4e8:	68fb      	ldr	r3, [r7, #12]
 801c4ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c4ee:	2200      	movs	r2, #0
 801c4f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801c4f2:	68fb      	ldr	r3, [r7, #12]
 801c4f4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 801c4f8:	68fb      	ldr	r3, [r7, #12]
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	3324      	adds	r3, #36	; 0x24
 801c4fe:	4619      	mov	r1, r3
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c504:	461a      	mov	r2, r3
 801c506:	88fb      	ldrh	r3, [r7, #6]
 801c508:	f7fb fc78 	bl	8017dfc <HAL_DMA_Start_IT>
 801c50c:	4603      	mov	r3, r0
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d009      	beq.n	801c526 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801c512:	68fb      	ldr	r3, [r7, #12]
 801c514:	2210      	movs	r2, #16
 801c516:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c51a:	68fb      	ldr	r3, [r7, #12]
 801c51c:	2220      	movs	r2, #32
 801c51e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 801c522:	2301      	movs	r3, #1
 801c524:	e051      	b.n	801c5ca <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801c526:	68fb      	ldr	r3, [r7, #12]
 801c528:	691b      	ldr	r3, [r3, #16]
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d018      	beq.n	801c560 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	681b      	ldr	r3, [r3, #0]
 801c532:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c536:	e853 3f00 	ldrex	r3, [r3]
 801c53a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c53e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c542:	657b      	str	r3, [r7, #84]	; 0x54
 801c544:	68fb      	ldr	r3, [r7, #12]
 801c546:	681b      	ldr	r3, [r3, #0]
 801c548:	461a      	mov	r2, r3
 801c54a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c54c:	64bb      	str	r3, [r7, #72]	; 0x48
 801c54e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c550:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801c552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c554:	e841 2300 	strex	r3, r2, [r1]
 801c558:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801c55a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d1e6      	bne.n	801c52e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c560:	68fb      	ldr	r3, [r7, #12]
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	3308      	adds	r3, #8
 801c566:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c56a:	e853 3f00 	ldrex	r3, [r3]
 801c56e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c572:	f043 0301 	orr.w	r3, r3, #1
 801c576:	653b      	str	r3, [r7, #80]	; 0x50
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	3308      	adds	r3, #8
 801c57e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c580:	637a      	str	r2, [r7, #52]	; 0x34
 801c582:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c584:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c588:	e841 2300 	strex	r3, r2, [r1]
 801c58c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c590:	2b00      	cmp	r3, #0
 801c592:	d1e5      	bne.n	801c560 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c594:	68fb      	ldr	r3, [r7, #12]
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	3308      	adds	r3, #8
 801c59a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c59c:	697b      	ldr	r3, [r7, #20]
 801c59e:	e853 3f00 	ldrex	r3, [r3]
 801c5a2:	613b      	str	r3, [r7, #16]
   return(result);
 801c5a4:	693b      	ldr	r3, [r7, #16]
 801c5a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c5aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c5ac:	68fb      	ldr	r3, [r7, #12]
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	3308      	adds	r3, #8
 801c5b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c5b4:	623a      	str	r2, [r7, #32]
 801c5b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c5b8:	69f9      	ldr	r1, [r7, #28]
 801c5ba:	6a3a      	ldr	r2, [r7, #32]
 801c5bc:	e841 2300 	strex	r3, r2, [r1]
 801c5c0:	61bb      	str	r3, [r7, #24]
   return(result);
 801c5c2:	69bb      	ldr	r3, [r7, #24]
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d1e5      	bne.n	801c594 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 801c5c8:	2300      	movs	r3, #0
}
 801c5ca:	4618      	mov	r0, r3
 801c5cc:	3758      	adds	r7, #88	; 0x58
 801c5ce:	46bd      	mov	sp, r7
 801c5d0:	bd80      	pop	{r7, pc}
 801c5d2:	bf00      	nop
 801c5d4:	0801c72f 	.word	0x0801c72f
 801c5d8:	0801c85b 	.word	0x0801c85b
 801c5dc:	0801c899 	.word	0x0801c899

0801c5e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801c5e0:	b480      	push	{r7}
 801c5e2:	b08f      	sub	sp, #60	; 0x3c
 801c5e4:	af00      	add	r7, sp, #0
 801c5e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	681b      	ldr	r3, [r3, #0]
 801c5ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c5ee:	6a3b      	ldr	r3, [r7, #32]
 801c5f0:	e853 3f00 	ldrex	r3, [r3]
 801c5f4:	61fb      	str	r3, [r7, #28]
   return(result);
 801c5f6:	69fb      	ldr	r3, [r7, #28]
 801c5f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801c5fc:	637b      	str	r3, [r7, #52]	; 0x34
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	681b      	ldr	r3, [r3, #0]
 801c602:	461a      	mov	r2, r3
 801c604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c606:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c608:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c60a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c60c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c60e:	e841 2300 	strex	r3, r2, [r1]
 801c612:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c616:	2b00      	cmp	r3, #0
 801c618:	d1e6      	bne.n	801c5e8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	681b      	ldr	r3, [r3, #0]
 801c61e:	3308      	adds	r3, #8
 801c620:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	e853 3f00 	ldrex	r3, [r3]
 801c628:	60bb      	str	r3, [r7, #8]
   return(result);
 801c62a:	68bb      	ldr	r3, [r7, #8]
 801c62c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801c630:	633b      	str	r3, [r7, #48]	; 0x30
 801c632:	687b      	ldr	r3, [r7, #4]
 801c634:	681b      	ldr	r3, [r3, #0]
 801c636:	3308      	adds	r3, #8
 801c638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c63a:	61ba      	str	r2, [r7, #24]
 801c63c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c63e:	6979      	ldr	r1, [r7, #20]
 801c640:	69ba      	ldr	r2, [r7, #24]
 801c642:	e841 2300 	strex	r3, r2, [r1]
 801c646:	613b      	str	r3, [r7, #16]
   return(result);
 801c648:	693b      	ldr	r3, [r7, #16]
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	d1e5      	bne.n	801c61a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	2220      	movs	r2, #32
 801c652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801c656:	bf00      	nop
 801c658:	373c      	adds	r7, #60	; 0x3c
 801c65a:	46bd      	mov	sp, r7
 801c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c660:	4770      	bx	lr

0801c662 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c662:	b480      	push	{r7}
 801c664:	b095      	sub	sp, #84	; 0x54
 801c666:	af00      	add	r7, sp, #0
 801c668:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	681b      	ldr	r3, [r3, #0]
 801c66e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c672:	e853 3f00 	ldrex	r3, [r3]
 801c676:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c67a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c67e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c680:	687b      	ldr	r3, [r7, #4]
 801c682:	681b      	ldr	r3, [r3, #0]
 801c684:	461a      	mov	r2, r3
 801c686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c688:	643b      	str	r3, [r7, #64]	; 0x40
 801c68a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c68c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c68e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c690:	e841 2300 	strex	r3, r2, [r1]
 801c694:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d1e6      	bne.n	801c66a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	3308      	adds	r3, #8
 801c6a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c6a4:	6a3b      	ldr	r3, [r7, #32]
 801c6a6:	e853 3f00 	ldrex	r3, [r3]
 801c6aa:	61fb      	str	r3, [r7, #28]
   return(result);
 801c6ac:	69fb      	ldr	r3, [r7, #28]
 801c6ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c6b2:	f023 0301 	bic.w	r3, r3, #1
 801c6b6:	64bb      	str	r3, [r7, #72]	; 0x48
 801c6b8:	687b      	ldr	r3, [r7, #4]
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	3308      	adds	r3, #8
 801c6be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c6c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c6c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c6c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c6c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c6c8:	e841 2300 	strex	r3, r2, [r1]
 801c6cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	d1e3      	bne.n	801c69c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c6d8:	2b01      	cmp	r3, #1
 801c6da:	d118      	bne.n	801c70e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	681b      	ldr	r3, [r3, #0]
 801c6e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c6e2:	68fb      	ldr	r3, [r7, #12]
 801c6e4:	e853 3f00 	ldrex	r3, [r3]
 801c6e8:	60bb      	str	r3, [r7, #8]
   return(result);
 801c6ea:	68bb      	ldr	r3, [r7, #8]
 801c6ec:	f023 0310 	bic.w	r3, r3, #16
 801c6f0:	647b      	str	r3, [r7, #68]	; 0x44
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	681b      	ldr	r3, [r3, #0]
 801c6f6:	461a      	mov	r2, r3
 801c6f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c6fa:	61bb      	str	r3, [r7, #24]
 801c6fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c6fe:	6979      	ldr	r1, [r7, #20]
 801c700:	69ba      	ldr	r2, [r7, #24]
 801c702:	e841 2300 	strex	r3, r2, [r1]
 801c706:	613b      	str	r3, [r7, #16]
   return(result);
 801c708:	693b      	ldr	r3, [r7, #16]
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d1e6      	bne.n	801c6dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	2220      	movs	r2, #32
 801c712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	2200      	movs	r2, #0
 801c71a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801c71c:	687b      	ldr	r3, [r7, #4]
 801c71e:	2200      	movs	r2, #0
 801c720:	675a      	str	r2, [r3, #116]	; 0x74
}
 801c722:	bf00      	nop
 801c724:	3754      	adds	r7, #84	; 0x54
 801c726:	46bd      	mov	sp, r7
 801c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c72c:	4770      	bx	lr

0801c72e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801c72e:	b580      	push	{r7, lr}
 801c730:	b09c      	sub	sp, #112	; 0x70
 801c732:	af00      	add	r7, sp, #0
 801c734:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c73a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	681b      	ldr	r3, [r3, #0]
 801c740:	681b      	ldr	r3, [r3, #0]
 801c742:	f003 0320 	and.w	r3, r3, #32
 801c746:	2b00      	cmp	r3, #0
 801c748:	d171      	bne.n	801c82e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 801c74a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c74c:	2200      	movs	r2, #0
 801c74e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c75a:	e853 3f00 	ldrex	r3, [r3]
 801c75e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c766:	66bb      	str	r3, [r7, #104]	; 0x68
 801c768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	461a      	mov	r2, r3
 801c76e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c770:	65bb      	str	r3, [r7, #88]	; 0x58
 801c772:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c774:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c776:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c778:	e841 2300 	strex	r3, r2, [r1]
 801c77c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c77e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c780:	2b00      	cmp	r3, #0
 801c782:	d1e6      	bne.n	801c752 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c786:	681b      	ldr	r3, [r3, #0]
 801c788:	3308      	adds	r3, #8
 801c78a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c78e:	e853 3f00 	ldrex	r3, [r3]
 801c792:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c796:	f023 0301 	bic.w	r3, r3, #1
 801c79a:	667b      	str	r3, [r7, #100]	; 0x64
 801c79c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	3308      	adds	r3, #8
 801c7a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c7a4:	647a      	str	r2, [r7, #68]	; 0x44
 801c7a6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c7a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c7aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c7ac:	e841 2300 	strex	r3, r2, [r1]
 801c7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c7b4:	2b00      	cmp	r3, #0
 801c7b6:	d1e5      	bne.n	801c784 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c7b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c7ba:	681b      	ldr	r3, [r3, #0]
 801c7bc:	3308      	adds	r3, #8
 801c7be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7c2:	e853 3f00 	ldrex	r3, [r3]
 801c7c6:	623b      	str	r3, [r7, #32]
   return(result);
 801c7c8:	6a3b      	ldr	r3, [r7, #32]
 801c7ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c7ce:	663b      	str	r3, [r7, #96]	; 0x60
 801c7d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c7d2:	681b      	ldr	r3, [r3, #0]
 801c7d4:	3308      	adds	r3, #8
 801c7d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c7d8:	633a      	str	r2, [r7, #48]	; 0x30
 801c7da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c7dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c7de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c7e0:	e841 2300 	strex	r3, r2, [r1]
 801c7e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d1e5      	bne.n	801c7b8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801c7ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c7ee:	2220      	movs	r2, #32
 801c7f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c7f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c7f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c7f8:	2b01      	cmp	r3, #1
 801c7fa:	d118      	bne.n	801c82e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c7fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c7fe:	681b      	ldr	r3, [r3, #0]
 801c800:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c802:	693b      	ldr	r3, [r7, #16]
 801c804:	e853 3f00 	ldrex	r3, [r3]
 801c808:	60fb      	str	r3, [r7, #12]
   return(result);
 801c80a:	68fb      	ldr	r3, [r7, #12]
 801c80c:	f023 0310 	bic.w	r3, r3, #16
 801c810:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c814:	681b      	ldr	r3, [r3, #0]
 801c816:	461a      	mov	r2, r3
 801c818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c81a:	61fb      	str	r3, [r7, #28]
 801c81c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c81e:	69b9      	ldr	r1, [r7, #24]
 801c820:	69fa      	ldr	r2, [r7, #28]
 801c822:	e841 2300 	strex	r3, r2, [r1]
 801c826:	617b      	str	r3, [r7, #20]
   return(result);
 801c828:	697b      	ldr	r3, [r7, #20]
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d1e6      	bne.n	801c7fc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c82e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c830:	2200      	movs	r2, #0
 801c832:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c838:	2b01      	cmp	r3, #1
 801c83a:	d107      	bne.n	801c84c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c83c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c83e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c842:	4619      	mov	r1, r3
 801c844:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c846:	f7ff fa3d 	bl	801bcc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c84a:	e002      	b.n	801c852 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 801c84c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c84e:	f7e4 faed 	bl	8000e2c <HAL_UART_RxCpltCallback>
}
 801c852:	bf00      	nop
 801c854:	3770      	adds	r7, #112	; 0x70
 801c856:	46bd      	mov	sp, r7
 801c858:	bd80      	pop	{r7, pc}

0801c85a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c85a:	b580      	push	{r7, lr}
 801c85c:	b084      	sub	sp, #16
 801c85e:	af00      	add	r7, sp, #0
 801c860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c866:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801c868:	68fb      	ldr	r3, [r7, #12]
 801c86a:	2201      	movs	r2, #1
 801c86c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c86e:	68fb      	ldr	r3, [r7, #12]
 801c870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c872:	2b01      	cmp	r3, #1
 801c874:	d109      	bne.n	801c88a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801c876:	68fb      	ldr	r3, [r7, #12]
 801c878:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c87c:	085b      	lsrs	r3, r3, #1
 801c87e:	b29b      	uxth	r3, r3
 801c880:	4619      	mov	r1, r3
 801c882:	68f8      	ldr	r0, [r7, #12]
 801c884:	f7ff fa1e 	bl	801bcc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c888:	e002      	b.n	801c890 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 801c88a:	68f8      	ldr	r0, [r7, #12]
 801c88c:	f7ff fa06 	bl	801bc9c <HAL_UART_RxHalfCpltCallback>
}
 801c890:	bf00      	nop
 801c892:	3710      	adds	r7, #16
 801c894:	46bd      	mov	sp, r7
 801c896:	bd80      	pop	{r7, pc}

0801c898 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801c898:	b580      	push	{r7, lr}
 801c89a:	b086      	sub	sp, #24
 801c89c:	af00      	add	r7, sp, #0
 801c89e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c8a4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801c8a6:	697b      	ldr	r3, [r7, #20]
 801c8a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c8ac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801c8ae:	697b      	ldr	r3, [r7, #20]
 801c8b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c8b4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801c8b6:	697b      	ldr	r3, [r7, #20]
 801c8b8:	681b      	ldr	r3, [r3, #0]
 801c8ba:	689b      	ldr	r3, [r3, #8]
 801c8bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c8c0:	2b80      	cmp	r3, #128	; 0x80
 801c8c2:	d109      	bne.n	801c8d8 <UART_DMAError+0x40>
 801c8c4:	693b      	ldr	r3, [r7, #16]
 801c8c6:	2b21      	cmp	r3, #33	; 0x21
 801c8c8:	d106      	bne.n	801c8d8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801c8ca:	697b      	ldr	r3, [r7, #20]
 801c8cc:	2200      	movs	r2, #0
 801c8ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 801c8d2:	6978      	ldr	r0, [r7, #20]
 801c8d4:	f7ff fe84 	bl	801c5e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801c8d8:	697b      	ldr	r3, [r7, #20]
 801c8da:	681b      	ldr	r3, [r3, #0]
 801c8dc:	689b      	ldr	r3, [r3, #8]
 801c8de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c8e2:	2b40      	cmp	r3, #64	; 0x40
 801c8e4:	d109      	bne.n	801c8fa <UART_DMAError+0x62>
 801c8e6:	68fb      	ldr	r3, [r7, #12]
 801c8e8:	2b22      	cmp	r3, #34	; 0x22
 801c8ea:	d106      	bne.n	801c8fa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801c8ec:	697b      	ldr	r3, [r7, #20]
 801c8ee:	2200      	movs	r2, #0
 801c8f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 801c8f4:	6978      	ldr	r0, [r7, #20]
 801c8f6:	f7ff feb4 	bl	801c662 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801c8fa:	697b      	ldr	r3, [r7, #20]
 801c8fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c900:	f043 0210 	orr.w	r2, r3, #16
 801c904:	697b      	ldr	r3, [r7, #20]
 801c906:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c90a:	6978      	ldr	r0, [r7, #20]
 801c90c:	f7ff f9d0 	bl	801bcb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c910:	bf00      	nop
 801c912:	3718      	adds	r7, #24
 801c914:	46bd      	mov	sp, r7
 801c916:	bd80      	pop	{r7, pc}

0801c918 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c918:	b580      	push	{r7, lr}
 801c91a:	b084      	sub	sp, #16
 801c91c:	af00      	add	r7, sp, #0
 801c91e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c924:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801c926:	68fb      	ldr	r3, [r7, #12]
 801c928:	2200      	movs	r2, #0
 801c92a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801c92e:	68fb      	ldr	r3, [r7, #12]
 801c930:	2200      	movs	r2, #0
 801c932:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c936:	68f8      	ldr	r0, [r7, #12]
 801c938:	f7ff f9ba 	bl	801bcb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c93c:	bf00      	nop
 801c93e:	3710      	adds	r7, #16
 801c940:	46bd      	mov	sp, r7
 801c942:	bd80      	pop	{r7, pc}

0801c944 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c944:	b580      	push	{r7, lr}
 801c946:	b088      	sub	sp, #32
 801c948:	af00      	add	r7, sp, #0
 801c94a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801c94c:	687b      	ldr	r3, [r7, #4]
 801c94e:	681b      	ldr	r3, [r3, #0]
 801c950:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	e853 3f00 	ldrex	r3, [r3]
 801c958:	60bb      	str	r3, [r7, #8]
   return(result);
 801c95a:	68bb      	ldr	r3, [r7, #8]
 801c95c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c960:	61fb      	str	r3, [r7, #28]
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	461a      	mov	r2, r3
 801c968:	69fb      	ldr	r3, [r7, #28]
 801c96a:	61bb      	str	r3, [r7, #24]
 801c96c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c96e:	6979      	ldr	r1, [r7, #20]
 801c970:	69ba      	ldr	r2, [r7, #24]
 801c972:	e841 2300 	strex	r3, r2, [r1]
 801c976:	613b      	str	r3, [r7, #16]
   return(result);
 801c978:	693b      	ldr	r3, [r7, #16]
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	d1e6      	bne.n	801c94c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	2220      	movs	r2, #32
 801c982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	2200      	movs	r2, #0
 801c98a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801c98c:	6878      	ldr	r0, [r7, #4]
 801c98e:	f7ff f97b 	bl	801bc88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c992:	bf00      	nop
 801c994:	3720      	adds	r7, #32
 801c996:	46bd      	mov	sp, r7
 801c998:	bd80      	pop	{r7, pc}

0801c99a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801c99a:	b480      	push	{r7}
 801c99c:	b083      	sub	sp, #12
 801c99e:	af00      	add	r7, sp, #0
 801c9a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801c9a2:	bf00      	nop
 801c9a4:	370c      	adds	r7, #12
 801c9a6:	46bd      	mov	sp, r7
 801c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9ac:	4770      	bx	lr

0801c9ae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801c9ae:	b480      	push	{r7}
 801c9b0:	b083      	sub	sp, #12
 801c9b2:	af00      	add	r7, sp, #0
 801c9b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801c9b6:	bf00      	nop
 801c9b8:	370c      	adds	r7, #12
 801c9ba:	46bd      	mov	sp, r7
 801c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9c0:	4770      	bx	lr

0801c9c2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801c9c2:	b480      	push	{r7}
 801c9c4:	b083      	sub	sp, #12
 801c9c6:	af00      	add	r7, sp, #0
 801c9c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801c9ca:	bf00      	nop
 801c9cc:	370c      	adds	r7, #12
 801c9ce:	46bd      	mov	sp, r7
 801c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9d4:	4770      	bx	lr

0801c9d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801c9d6:	b480      	push	{r7}
 801c9d8:	b085      	sub	sp, #20
 801c9da:	af00      	add	r7, sp, #0
 801c9dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801c9de:	687b      	ldr	r3, [r7, #4]
 801c9e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801c9e4:	2b01      	cmp	r3, #1
 801c9e6:	d101      	bne.n	801c9ec <HAL_UARTEx_DisableFifoMode+0x16>
 801c9e8:	2302      	movs	r3, #2
 801c9ea:	e027      	b.n	801ca3c <HAL_UARTEx_DisableFifoMode+0x66>
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	2201      	movs	r2, #1
 801c9f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	2224      	movs	r2, #36	; 0x24
 801c9f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	681b      	ldr	r3, [r3, #0]
 801ca08:	681a      	ldr	r2, [r3, #0]
 801ca0a:	687b      	ldr	r3, [r7, #4]
 801ca0c:	681b      	ldr	r3, [r3, #0]
 801ca0e:	f022 0201 	bic.w	r2, r2, #1
 801ca12:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801ca14:	68fb      	ldr	r3, [r7, #12]
 801ca16:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801ca1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	2200      	movs	r2, #0
 801ca20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	681b      	ldr	r3, [r3, #0]
 801ca26:	68fa      	ldr	r2, [r7, #12]
 801ca28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	2220      	movs	r2, #32
 801ca2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	2200      	movs	r2, #0
 801ca36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801ca3a:	2300      	movs	r3, #0
}
 801ca3c:	4618      	mov	r0, r3
 801ca3e:	3714      	adds	r7, #20
 801ca40:	46bd      	mov	sp, r7
 801ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca46:	4770      	bx	lr

0801ca48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ca48:	b580      	push	{r7, lr}
 801ca4a:	b084      	sub	sp, #16
 801ca4c:	af00      	add	r7, sp, #0
 801ca4e:	6078      	str	r0, [r7, #4]
 801ca50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ca52:	687b      	ldr	r3, [r7, #4]
 801ca54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801ca58:	2b01      	cmp	r3, #1
 801ca5a:	d101      	bne.n	801ca60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801ca5c:	2302      	movs	r3, #2
 801ca5e:	e02d      	b.n	801cabc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	2201      	movs	r2, #1
 801ca64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	2224      	movs	r2, #36	; 0x24
 801ca6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	681b      	ldr	r3, [r3, #0]
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	681a      	ldr	r2, [r3, #0]
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	681b      	ldr	r3, [r3, #0]
 801ca82:	f022 0201 	bic.w	r2, r2, #1
 801ca86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	681b      	ldr	r3, [r3, #0]
 801ca8c:	689b      	ldr	r3, [r3, #8]
 801ca8e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	681b      	ldr	r3, [r3, #0]
 801ca96:	683a      	ldr	r2, [r7, #0]
 801ca98:	430a      	orrs	r2, r1
 801ca9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ca9c:	6878      	ldr	r0, [r7, #4]
 801ca9e:	f000 f84f 	bl	801cb40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	681b      	ldr	r3, [r3, #0]
 801caa6:	68fa      	ldr	r2, [r7, #12]
 801caa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	2220      	movs	r2, #32
 801caae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	2200      	movs	r2, #0
 801cab6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801caba:	2300      	movs	r3, #0
}
 801cabc:	4618      	mov	r0, r3
 801cabe:	3710      	adds	r7, #16
 801cac0:	46bd      	mov	sp, r7
 801cac2:	bd80      	pop	{r7, pc}

0801cac4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801cac4:	b580      	push	{r7, lr}
 801cac6:	b084      	sub	sp, #16
 801cac8:	af00      	add	r7, sp, #0
 801caca:	6078      	str	r0, [r7, #4]
 801cacc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801cad4:	2b01      	cmp	r3, #1
 801cad6:	d101      	bne.n	801cadc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801cad8:	2302      	movs	r3, #2
 801cada:	e02d      	b.n	801cb38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	2201      	movs	r2, #1
 801cae0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	2224      	movs	r2, #36	; 0x24
 801cae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	681b      	ldr	r3, [r3, #0]
 801caf8:	681a      	ldr	r2, [r3, #0]
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	681b      	ldr	r3, [r3, #0]
 801cafe:	f022 0201 	bic.w	r2, r2, #1
 801cb02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	681b      	ldr	r3, [r3, #0]
 801cb08:	689b      	ldr	r3, [r3, #8]
 801cb0a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	681b      	ldr	r3, [r3, #0]
 801cb12:	683a      	ldr	r2, [r7, #0]
 801cb14:	430a      	orrs	r2, r1
 801cb16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801cb18:	6878      	ldr	r0, [r7, #4]
 801cb1a:	f000 f811 	bl	801cb40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	681b      	ldr	r3, [r3, #0]
 801cb22:	68fa      	ldr	r2, [r7, #12]
 801cb24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	2220      	movs	r2, #32
 801cb2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	2200      	movs	r2, #0
 801cb32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801cb36:	2300      	movs	r3, #0
}
 801cb38:	4618      	mov	r0, r3
 801cb3a:	3710      	adds	r7, #16
 801cb3c:	46bd      	mov	sp, r7
 801cb3e:	bd80      	pop	{r7, pc}

0801cb40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801cb40:	b480      	push	{r7}
 801cb42:	b085      	sub	sp, #20
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	d108      	bne.n	801cb62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	2201      	movs	r2, #1
 801cb54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	2201      	movs	r2, #1
 801cb5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801cb60:	e031      	b.n	801cbc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801cb62:	2308      	movs	r3, #8
 801cb64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801cb66:	2308      	movs	r3, #8
 801cb68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	689b      	ldr	r3, [r3, #8]
 801cb70:	0e5b      	lsrs	r3, r3, #25
 801cb72:	b2db      	uxtb	r3, r3
 801cb74:	f003 0307 	and.w	r3, r3, #7
 801cb78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	681b      	ldr	r3, [r3, #0]
 801cb7e:	689b      	ldr	r3, [r3, #8]
 801cb80:	0f5b      	lsrs	r3, r3, #29
 801cb82:	b2db      	uxtb	r3, r3
 801cb84:	f003 0307 	and.w	r3, r3, #7
 801cb88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801cb8a:	7bbb      	ldrb	r3, [r7, #14]
 801cb8c:	7b3a      	ldrb	r2, [r7, #12]
 801cb8e:	4911      	ldr	r1, [pc, #68]	; (801cbd4 <UARTEx_SetNbDataToProcess+0x94>)
 801cb90:	5c8a      	ldrb	r2, [r1, r2]
 801cb92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801cb96:	7b3a      	ldrb	r2, [r7, #12]
 801cb98:	490f      	ldr	r1, [pc, #60]	; (801cbd8 <UARTEx_SetNbDataToProcess+0x98>)
 801cb9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801cb9c:	fb93 f3f2 	sdiv	r3, r3, r2
 801cba0:	b29a      	uxth	r2, r3
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801cba8:	7bfb      	ldrb	r3, [r7, #15]
 801cbaa:	7b7a      	ldrb	r2, [r7, #13]
 801cbac:	4909      	ldr	r1, [pc, #36]	; (801cbd4 <UARTEx_SetNbDataToProcess+0x94>)
 801cbae:	5c8a      	ldrb	r2, [r1, r2]
 801cbb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801cbb4:	7b7a      	ldrb	r2, [r7, #13]
 801cbb6:	4908      	ldr	r1, [pc, #32]	; (801cbd8 <UARTEx_SetNbDataToProcess+0x98>)
 801cbb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801cbba:	fb93 f3f2 	sdiv	r3, r3, r2
 801cbbe:	b29a      	uxth	r2, r3
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801cbc6:	bf00      	nop
 801cbc8:	3714      	adds	r7, #20
 801cbca:	46bd      	mov	sp, r7
 801cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbd0:	4770      	bx	lr
 801cbd2:	bf00      	nop
 801cbd4:	0802014c 	.word	0x0802014c
 801cbd8:	08020154 	.word	0x08020154

0801cbdc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801cbdc:	b480      	push	{r7}
 801cbde:	b085      	sub	sp, #20
 801cbe0:	af00      	add	r7, sp, #0
 801cbe2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801cbe4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801cbe8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801cbf0:	b29a      	uxth	r2, r3
 801cbf2:	68fb      	ldr	r3, [r7, #12]
 801cbf4:	b29b      	uxth	r3, r3
 801cbf6:	43db      	mvns	r3, r3
 801cbf8:	b29b      	uxth	r3, r3
 801cbfa:	4013      	ands	r3, r2
 801cbfc:	b29a      	uxth	r2, r3
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801cc04:	2300      	movs	r3, #0
}
 801cc06:	4618      	mov	r0, r3
 801cc08:	3714      	adds	r7, #20
 801cc0a:	46bd      	mov	sp, r7
 801cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc10:	4770      	bx	lr

0801cc12 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801cc12:	b084      	sub	sp, #16
 801cc14:	b480      	push	{r7}
 801cc16:	b083      	sub	sp, #12
 801cc18:	af00      	add	r7, sp, #0
 801cc1a:	6078      	str	r0, [r7, #4]
 801cc1c:	f107 0014 	add.w	r0, r7, #20
 801cc20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801cc24:	687b      	ldr	r3, [r7, #4]
 801cc26:	2201      	movs	r2, #1
 801cc28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	2200      	movs	r2, #0
 801cc30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	2200      	movs	r2, #0
 801cc38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	2200      	movs	r2, #0
 801cc40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801cc44:	2300      	movs	r3, #0
}
 801cc46:	4618      	mov	r0, r3
 801cc48:	370c      	adds	r7, #12
 801cc4a:	46bd      	mov	sp, r7
 801cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc50:	b004      	add	sp, #16
 801cc52:	4770      	bx	lr

0801cc54 <init_done>:
}button_interface;

uint16_t button_pushed = NONE;

void init_done()
{
 801cc54:	b580      	push	{r7, lr}
 801cc56:	b082      	sub	sp, #8
 801cc58:	af00      	add	r7, sp, #0
	for(int i=0; i<3; i++)
 801cc5a:	2300      	movs	r3, #0
 801cc5c:	607b      	str	r3, [r7, #4]
 801cc5e:	e017      	b.n	801cc90 <init_done+0x3c>
	{
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 801cc60:	2120      	movs	r1, #32
 801cc62:	4816      	ldr	r0, [pc, #88]	; (801ccbc <init_done+0x68>)
 801cc64:	f7fb fdd2 	bl	801880c <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 801cc68:	20c8      	movs	r0, #200	; 0xc8
 801cc6a:	f7fa feeb 	bl	8017a44 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 801cc6e:	2101      	movs	r1, #1
 801cc70:	4812      	ldr	r0, [pc, #72]	; (801ccbc <init_done+0x68>)
 801cc72:	f7fb fdcb 	bl	801880c <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 801cc76:	20c8      	movs	r0, #200	; 0xc8
 801cc78:	f7fa fee4 	bl	8017a44 <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 801cc7c:	2102      	movs	r1, #2
 801cc7e:	480f      	ldr	r0, [pc, #60]	; (801ccbc <init_done+0x68>)
 801cc80:	f7fb fdc4 	bl	801880c <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 801cc84:	20c8      	movs	r0, #200	; 0xc8
 801cc86:	f7fa fedd 	bl	8017a44 <HAL_Delay>
	for(int i=0; i<3; i++)
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	3301      	adds	r3, #1
 801cc8e:	607b      	str	r3, [r7, #4]
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	2b02      	cmp	r3, #2
 801cc94:	dde4      	ble.n	801cc60 <init_done+0xc>
	}
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 801cc96:	2200      	movs	r2, #0
 801cc98:	2120      	movs	r1, #32
 801cc9a:	4808      	ldr	r0, [pc, #32]	; (801ccbc <init_done+0x68>)
 801cc9c:	f7fb fd9e 	bl	80187dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 801cca0:	2200      	movs	r2, #0
 801cca2:	2101      	movs	r1, #1
 801cca4:	4805      	ldr	r0, [pc, #20]	; (801ccbc <init_done+0x68>)
 801cca6:	f7fb fd99 	bl	80187dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 801ccaa:	2200      	movs	r2, #0
 801ccac:	2102      	movs	r1, #2
 801ccae:	4803      	ldr	r0, [pc, #12]	; (801ccbc <init_done+0x68>)
 801ccb0:	f7fb fd94 	bl	80187dc <HAL_GPIO_WritePin>
}
 801ccb4:	bf00      	nop
 801ccb6:	3708      	adds	r7, #8
 801ccb8:	46bd      	mov	sp, r7
 801ccba:	bd80      	pop	{r7, pc}
 801ccbc:	48000400 	.word	0x48000400

0801ccc0 <formate_json_tof>:

	return serialized_string;
}

static char* formate_json_tof(int id, int value)
{
 801ccc0:	b580      	push	{r7, lr}
 801ccc2:	b086      	sub	sp, #24
 801ccc4:	af00      	add	r7, sp, #0
 801ccc6:	6078      	str	r0, [r7, #4]
 801ccc8:	6039      	str	r1, [r7, #0]
	JSON_Value *val = json_value_init_object();
 801ccca:	f7e5 fe3d 	bl	8002948 <json_value_init_object>
 801ccce:	6178      	str	r0, [r7, #20]
	if(val == NULL)
 801ccd0:	697b      	ldr	r3, [r7, #20]
 801ccd2:	2b00      	cmp	r3, #0
 801ccd4:	d101      	bne.n	801ccda <formate_json_tof+0x1a>
		return NULL;
 801ccd6:	2300      	movs	r3, #0
 801ccd8:	e049      	b.n	801cd6e <formate_json_tof+0xae>

	JSON_Object *obj = json_value_get_object(val);
 801ccda:	6978      	ldr	r0, [r7, #20]
 801ccdc:	f7e5 fd7c 	bl	80027d8 <json_value_get_object>
 801cce0:	6138      	str	r0, [r7, #16]
	if(obj == NULL)
 801cce2:	693b      	ldr	r3, [r7, #16]
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	d101      	bne.n	801ccec <formate_json_tof+0x2c>
		return NULL;
 801cce8:	2300      	movs	r3, #0
 801ccea:	e040      	b.n	801cd6e <formate_json_tof+0xae>

	if(id == 0){
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d10f      	bne.n	801cd12 <formate_json_tof+0x52>
		if(json_object_set_number(obj, "tof_left", value) != JSONSuccess)
 801ccf2:	6838      	ldr	r0, [r7, #0]
 801ccf4:	f7e3 fbee 	bl	80004d4 <__aeabi_i2d>
 801ccf8:	4602      	mov	r2, r0
 801ccfa:	460b      	mov	r3, r1
 801ccfc:	ec43 2b10 	vmov	d0, r2, r3
 801cd00:	491d      	ldr	r1, [pc, #116]	; (801cd78 <formate_json_tof+0xb8>)
 801cd02:	6938      	ldr	r0, [r7, #16]
 801cd04:	f7e5 ffde 	bl	8002cc4 <json_object_set_number>
 801cd08:	4603      	mov	r3, r0
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	d001      	beq.n	801cd12 <formate_json_tof+0x52>
			return NULL;
 801cd0e:	2300      	movs	r3, #0
 801cd10:	e02d      	b.n	801cd6e <formate_json_tof+0xae>
	}
	if(id == 1){
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	2b01      	cmp	r3, #1
 801cd16:	d10f      	bne.n	801cd38 <formate_json_tof+0x78>
		if(json_object_set_number(obj, "tof_center", value) != JSONSuccess)
 801cd18:	6838      	ldr	r0, [r7, #0]
 801cd1a:	f7e3 fbdb 	bl	80004d4 <__aeabi_i2d>
 801cd1e:	4602      	mov	r2, r0
 801cd20:	460b      	mov	r3, r1
 801cd22:	ec43 2b10 	vmov	d0, r2, r3
 801cd26:	4915      	ldr	r1, [pc, #84]	; (801cd7c <formate_json_tof+0xbc>)
 801cd28:	6938      	ldr	r0, [r7, #16]
 801cd2a:	f7e5 ffcb 	bl	8002cc4 <json_object_set_number>
 801cd2e:	4603      	mov	r3, r0
 801cd30:	2b00      	cmp	r3, #0
 801cd32:	d001      	beq.n	801cd38 <formate_json_tof+0x78>
			return NULL;
 801cd34:	2300      	movs	r3, #0
 801cd36:	e01a      	b.n	801cd6e <formate_json_tof+0xae>
	}
	if(id == 2){
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	2b02      	cmp	r3, #2
 801cd3c:	d10f      	bne.n	801cd5e <formate_json_tof+0x9e>
		if(json_object_set_number(obj, "tof_right", value) != JSONSuccess)
 801cd3e:	6838      	ldr	r0, [r7, #0]
 801cd40:	f7e3 fbc8 	bl	80004d4 <__aeabi_i2d>
 801cd44:	4602      	mov	r2, r0
 801cd46:	460b      	mov	r3, r1
 801cd48:	ec43 2b10 	vmov	d0, r2, r3
 801cd4c:	490c      	ldr	r1, [pc, #48]	; (801cd80 <formate_json_tof+0xc0>)
 801cd4e:	6938      	ldr	r0, [r7, #16]
 801cd50:	f7e5 ffb8 	bl	8002cc4 <json_object_set_number>
 801cd54:	4603      	mov	r3, r0
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	d001      	beq.n	801cd5e <formate_json_tof+0x9e>
			return NULL;
 801cd5a:	2300      	movs	r3, #0
 801cd5c:	e007      	b.n	801cd6e <formate_json_tof+0xae>
	}

	char* serialized_string = json_serialize_to_string(val);
 801cd5e:	6978      	ldr	r0, [r7, #20]
 801cd60:	f7e5 feb4 	bl	8002acc <json_serialize_to_string>
 801cd64:	60f8      	str	r0, [r7, #12]

	json_value_free(val);
 801cd66:	6978      	ldr	r0, [r7, #20]
 801cd68:	f7e5 fdc0 	bl	80028ec <json_value_free>

	return serialized_string;
 801cd6c:	68fb      	ldr	r3, [r7, #12]
}
 801cd6e:	4618      	mov	r0, r3
 801cd70:	3718      	adds	r7, #24
 801cd72:	46bd      	mov	sp, r7
 801cd74:	bd80      	pop	{r7, pc}
 801cd76:	bf00      	nop
 801cd78:	0801f66c 	.word	0x0801f66c
 801cd7c:	0801f678 	.word	0x0801f678
 801cd80:	0801f684 	.word	0x0801f684

0801cd84 <check_subscription>:

static int check_subscription()
{
 801cd84:	b580      	push	{r7, lr}
 801cd86:	b088      	sub	sp, #32
 801cd88:	af00      	add	r7, sp, #0
	if (UART_ESP32_RecvEndFlag == 1) {
 801cd8a:	4b1f      	ldr	r3, [pc, #124]	; (801ce08 <check_subscription+0x84>)
 801cd8c:	781b      	ldrb	r3, [r3, #0]
 801cd8e:	b2db      	uxtb	r3, r3
 801cd90:	2b01      	cmp	r3, #1
 801cd92:	d134      	bne.n	801cdfe <check_subscription+0x7a>
		char pattern[24];
		memset(pattern, 0, sizeof(pattern));
 801cd94:	463b      	mov	r3, r7
 801cd96:	2218      	movs	r2, #24
 801cd98:	2100      	movs	r1, #0
 801cd9a:	4618      	mov	r0, r3
 801cd9c:	f001 fb0c 	bl	801e3b8 <memset>
		//sprintf((char*) pattern, "+MQTTSUBRECV:0,\"isen%s/led\",", CARD_NUMBER);
		sprintf((char*) pattern, "+MQTTSUBRECV:0,\"%s/", MQTT_CLIENTID);
 801cda0:	463b      	mov	r3, r7
 801cda2:	4a1a      	ldr	r2, [pc, #104]	; (801ce0c <check_subscription+0x88>)
 801cda4:	491a      	ldr	r1, [pc, #104]	; (801ce10 <check_subscription+0x8c>)
 801cda6:	4618      	mov	r0, r3
 801cda8:	f001 fca2 	bl	801e6f0 <siprintf>
		uint16_t data_size = 0, off = sizeof(pattern)-1; // \0 not needed
 801cdac:	2300      	movs	r3, #0
 801cdae:	83fb      	strh	r3, [r7, #30]
 801cdb0:	2317      	movs	r3, #23
 801cdb2:	83bb      	strh	r3, [r7, #28]
		if (strstr((const char*) UART_ESP32_RxBUF, pattern) != NULL) {
 801cdb4:	463b      	mov	r3, r7
 801cdb6:	4619      	mov	r1, r3
 801cdb8:	4816      	ldr	r0, [pc, #88]	; (801ce14 <check_subscription+0x90>)
 801cdba:	f001 fd23 	bl	801e804 <strstr>
 801cdbe:	4603      	mov	r3, r0
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	d016      	beq.n	801cdf2 <check_subscription+0x6e>
			printf("APP: Match succeed\r\n");
 801cdc4:	4814      	ldr	r0, [pc, #80]	; (801ce18 <check_subscription+0x94>)
 801cdc6:	f001 fc7b 	bl	801e6c0 <puts>
			int topic_id = 0;
 801cdca:	2300      	movs	r3, #0
 801cdcc:	61bb      	str	r3, [r7, #24]
			// nul mais ok
			if(UART_ESP32_RxBUF[off] == 'l')
 801cdce:	8bbb      	ldrh	r3, [r7, #28]
 801cdd0:	4a10      	ldr	r2, [pc, #64]	; (801ce14 <check_subscription+0x90>)
 801cdd2:	5cd3      	ldrb	r3, [r2, r3]
 801cdd4:	2b6c      	cmp	r3, #108	; 0x6c
 801cdd6:	d105      	bne.n	801cde4 <check_subscription+0x60>
			{
				topic_id = 1;
 801cdd8:	2301      	movs	r3, #1
 801cdda:	61bb      	str	r3, [r7, #24]
				off+= 5;
 801cddc:	8bbb      	ldrh	r3, [r7, #28]
 801cdde:	3305      	adds	r3, #5
 801cde0:	83bb      	strh	r3, [r7, #28]
 801cde2:	e004      	b.n	801cdee <check_subscription+0x6a>
			}
			else
			{
				topic_id = 2;
 801cde4:	2302      	movs	r3, #2
 801cde6:	61bb      	str	r3, [r7, #24]
				off+= 9;
 801cde8:	8bbb      	ldrh	r3, [r7, #28]
 801cdea:	3309      	adds	r3, #9
 801cdec:	83bb      	strh	r3, [r7, #28]
			}
			return 0;
 801cdee:	2300      	movs	r3, #0
 801cdf0:	e006      	b.n	801ce00 <check_subscription+0x7c>
		}
		else
		{
			printf("APP: Match failed\r\n");
 801cdf2:	480a      	ldr	r0, [pc, #40]	; (801ce1c <check_subscription+0x98>)
 801cdf4:	f001 fc64 	bl	801e6c0 <puts>
			return -1;
 801cdf8:	f04f 33ff 	mov.w	r3, #4294967295
 801cdfc:	e000      	b.n	801ce00 <check_subscription+0x7c>
		}
	}
	else
	{
		return 1;
 801cdfe:	2301      	movs	r3, #1
	}
}
 801ce00:	4618      	mov	r0, r3
 801ce02:	3720      	adds	r7, #32
 801ce04:	46bd      	mov	sp, r7
 801ce06:	bd80      	pop	{r7, pc}
 801ce08:	200097b5 	.word	0x200097b5
 801ce0c:	0801f690 	.word	0x0801f690
 801ce10:	0801f698 	.word	0x0801f698
 801ce14:	20008fb4 	.word	0x20008fb4
 801ce18:	0801f6ac 	.word	0x0801f6ac
 801ce1c:	0801f6c0 	.word	0x0801f6c0

0801ce20 <wifi_init>:

void wifi_init(){
 801ce20:	b580      	push	{r7, lr}
 801ce22:	af00      	add	r7, sp, #0
	if (esp8266_SetupIP() != _SUCCEED) {
 801ce24:	f000 fa9c 	bl	801d360 <esp8266_SetupIP>
 801ce28:	4603      	mov	r3, r0
 801ce2a:	2b01      	cmp	r3, #1
 801ce2c:	d00a      	beq.n	801ce44 <wifi_init+0x24>
	  printf("esp8266_SetupIP failed - RESTART and configure WIFI source\n");
 801ce2e:	480f      	ldr	r0, [pc, #60]	; (801ce6c <wifi_init+0x4c>)
 801ce30:	f001 fc46 	bl	801e6c0 <puts>
	  while(1)
	  {
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 801ce34:	2102      	movs	r1, #2
 801ce36:	480e      	ldr	r0, [pc, #56]	; (801ce70 <wifi_init+0x50>)
 801ce38:	f7fb fce8 	bl	801880c <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 801ce3c:	20c8      	movs	r0, #200	; 0xc8
 801ce3e:	f7fa fe01 	bl	8017a44 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 801ce42:	e7f7      	b.n	801ce34 <wifi_init+0x14>
	  }
  }

  if(esp8266_SetupConnect_BrokerMQTT() != _SUCCEED_MQTT)
 801ce44:	f000 fd4e 	bl	801d8e4 <esp8266_SetupConnect_BrokerMQTT>
 801ce48:	4603      	mov	r3, r0
 801ce4a:	2b01      	cmp	r3, #1
 801ce4c:	d00a      	beq.n	801ce64 <wifi_init+0x44>
  {
	  printf("esp8266_SetupConnect_BrokerMQTT failed - RESTART and configure MQTT\n");
 801ce4e:	4809      	ldr	r0, [pc, #36]	; (801ce74 <wifi_init+0x54>)
 801ce50:	f001 fc36 	bl	801e6c0 <puts>
	  while(1)
	  {
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 801ce54:	2102      	movs	r1, #2
 801ce56:	4806      	ldr	r0, [pc, #24]	; (801ce70 <wifi_init+0x50>)
 801ce58:	f7fb fcd8 	bl	801880c <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 801ce5c:	20c8      	movs	r0, #200	; 0xc8
 801ce5e:	f7fa fdf1 	bl	8017a44 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 801ce62:	e7f7      	b.n	801ce54 <wifi_init+0x34>
	  }
  }
  init_done();
 801ce64:	f7ff fef6 	bl	801cc54 <init_done>
}
 801ce68:	bf00      	nop
 801ce6a:	bd80      	pop	{r7, pc}
 801ce6c:	0801f6d4 	.word	0x0801f6d4
 801ce70:	48000400 	.word	0x48000400
 801ce74:	0801f710 	.word	0x0801f710

0801ce78 <wifi_process>:

void wifi_process(){
 801ce78:	b580      	push	{r7, lr}
 801ce7a:	b088      	sub	sp, #32
 801ce7c:	af00      	add	r7, sp, #0
	// app part
	int i = 0;
 801ce7e:	2300      	movs	r3, #0
 801ce80:	61fb      	str	r3, [r7, #28]
	while(i<1)
 801ce82:	e0d3      	b.n	801d02c <wifi_process+0x1b4>
	  {
		  if(get_mqtt_state() < _SUBSCRIBED_TEMP_MQTT)
 801ce84:	f000 fe9c 	bl	801dbc0 <get_mqtt_state>
 801ce88:	4603      	mov	r3, r0
 801ce8a:	2b07      	cmp	r3, #7
 801ce8c:	d807      	bhi.n	801ce9e <wifi_process+0x26>
		  {
			  if(esp8266_Subscribe_Temp_BrokerMQTT() != _SUBSCRIBED_TEMP_MQTT)
 801ce8e:	f000 fd93 	bl	801d9b8 <esp8266_Subscribe_Temp_BrokerMQTT>
 801ce92:	4603      	mov	r3, r0
 801ce94:	2b08      	cmp	r3, #8
 801ce96:	d002      	beq.n	801ce9e <wifi_process+0x26>
				printf("APP: esp8266_Subscribe_Temp_BrokerMQTT() failed\n");
 801ce98:	4869      	ldr	r0, [pc, #420]	; (801d040 <wifi_process+0x1c8>)
 801ce9a:	f001 fc11 	bl	801e6c0 <puts>
		  }
		 if(get_mqtt_state() < _SUBSCRIBED_TOF_MQTT)
 801ce9e:	f000 fe8f 	bl	801dbc0 <get_mqtt_state>
 801cea2:	4603      	mov	r3, r0
 801cea4:	2b08      	cmp	r3, #8
 801cea6:	d807      	bhi.n	801ceb8 <wifi_process+0x40>
		  {
			  if(esp8266_Subscribe_ToF_BrokerMQTT() != _SUBSCRIBED_TOF_MQTT)
 801cea8:	f000 fdda 	bl	801da60 <esp8266_Subscribe_ToF_BrokerMQTT>
 801ceac:	4603      	mov	r3, r0
 801ceae:	2b09      	cmp	r3, #9
 801ceb0:	d002      	beq.n	801ceb8 <wifi_process+0x40>
				printf("APP: esp8266_Subscribe_ToF_BrokerMQTT() failed\n");
 801ceb2:	4864      	ldr	r0, [pc, #400]	; (801d044 <wifi_process+0x1cc>)
 801ceb4:	f001 fc04 	bl	801e6c0 <puts>
		  }

		 if(LeftPos == 1){
 801ceb8:	4b63      	ldr	r3, [pc, #396]	; (801d048 <wifi_process+0x1d0>)
 801ceba:	681b      	ldr	r3, [r3, #0]
 801cebc:	2b01      	cmp	r3, #1
 801cebe:	d11a      	bne.n	801cef6 <wifi_process+0x7e>
			 char *data = formate_json_tof(0,1);
 801cec0:	2101      	movs	r1, #1
 801cec2:	2000      	movs	r0, #0
 801cec4:	f7ff fefc 	bl	801ccc0 <formate_json_tof>
 801cec8:	6178      	str	r0, [r7, #20]
			  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801ceca:	6978      	ldr	r0, [r7, #20]
 801cecc:	f7e3 f958 	bl	8000180 <strlen>
 801ced0:	4603      	mov	r3, r0
 801ced2:	b29b      	uxth	r3, r3
 801ced4:	4619      	mov	r1, r3
 801ced6:	6978      	ldr	r0, [r7, #20]
 801ced8:	f000 fe16 	bl	801db08 <esp8266_Publish_ToF_BrokerMQTT>
 801cedc:	4603      	mov	r3, r0
 801cede:	2b0c      	cmp	r3, #12
 801cee0:	d002      	beq.n	801cee8 <wifi_process+0x70>
				printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801cee2:	485a      	ldr	r0, [pc, #360]	; (801d04c <wifi_process+0x1d4>)
 801cee4:	f001 fbec 	bl	801e6c0 <puts>
			  json_free_serialized_string(data);
 801cee8:	6978      	ldr	r0, [r7, #20]
 801ceea:	f7e5 fe21 	bl	8002b30 <json_free_serialized_string>
			 LeftPos = 2;
 801ceee:	4b56      	ldr	r3, [pc, #344]	; (801d048 <wifi_process+0x1d0>)
 801cef0:	2202      	movs	r2, #2
 801cef2:	601a      	str	r2, [r3, #0]
 801cef4:	e01a      	b.n	801cf2c <wifi_process+0xb4>
		 } else if (LeftPos == 0){
 801cef6:	4b54      	ldr	r3, [pc, #336]	; (801d048 <wifi_process+0x1d0>)
 801cef8:	681b      	ldr	r3, [r3, #0]
 801cefa:	2b00      	cmp	r3, #0
 801cefc:	d116      	bne.n	801cf2c <wifi_process+0xb4>
			 char *data = formate_json_tof(0,0);
 801cefe:	2100      	movs	r1, #0
 801cf00:	2000      	movs	r0, #0
 801cf02:	f7ff fedd 	bl	801ccc0 <formate_json_tof>
 801cf06:	61b8      	str	r0, [r7, #24]
			  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801cf08:	69b8      	ldr	r0, [r7, #24]
 801cf0a:	f7e3 f939 	bl	8000180 <strlen>
 801cf0e:	4603      	mov	r3, r0
 801cf10:	b29b      	uxth	r3, r3
 801cf12:	4619      	mov	r1, r3
 801cf14:	69b8      	ldr	r0, [r7, #24]
 801cf16:	f000 fdf7 	bl	801db08 <esp8266_Publish_ToF_BrokerMQTT>
 801cf1a:	4603      	mov	r3, r0
 801cf1c:	2b0c      	cmp	r3, #12
 801cf1e:	d002      	beq.n	801cf26 <wifi_process+0xae>
				printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801cf20:	484a      	ldr	r0, [pc, #296]	; (801d04c <wifi_process+0x1d4>)
 801cf22:	f001 fbcd 	bl	801e6c0 <puts>
			  json_free_serialized_string(data);
 801cf26:	69b8      	ldr	r0, [r7, #24]
 801cf28:	f7e5 fe02 	bl	8002b30 <json_free_serialized_string>
		 }
		 if(CenterPos == 1){
 801cf2c:	4b48      	ldr	r3, [pc, #288]	; (801d050 <wifi_process+0x1d8>)
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	2b01      	cmp	r3, #1
 801cf32:	d11a      	bne.n	801cf6a <wifi_process+0xf2>
			 char *data = formate_json_tof(1,1);
 801cf34:	2101      	movs	r1, #1
 801cf36:	2001      	movs	r0, #1
 801cf38:	f7ff fec2 	bl	801ccc0 <formate_json_tof>
 801cf3c:	60f8      	str	r0, [r7, #12]
			  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801cf3e:	68f8      	ldr	r0, [r7, #12]
 801cf40:	f7e3 f91e 	bl	8000180 <strlen>
 801cf44:	4603      	mov	r3, r0
 801cf46:	b29b      	uxth	r3, r3
 801cf48:	4619      	mov	r1, r3
 801cf4a:	68f8      	ldr	r0, [r7, #12]
 801cf4c:	f000 fddc 	bl	801db08 <esp8266_Publish_ToF_BrokerMQTT>
 801cf50:	4603      	mov	r3, r0
 801cf52:	2b0c      	cmp	r3, #12
 801cf54:	d002      	beq.n	801cf5c <wifi_process+0xe4>
				printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801cf56:	483d      	ldr	r0, [pc, #244]	; (801d04c <wifi_process+0x1d4>)
 801cf58:	f001 fbb2 	bl	801e6c0 <puts>
			  json_free_serialized_string(data);
 801cf5c:	68f8      	ldr	r0, [r7, #12]
 801cf5e:	f7e5 fde7 	bl	8002b30 <json_free_serialized_string>
			 CenterPos = 2;
 801cf62:	4b3b      	ldr	r3, [pc, #236]	; (801d050 <wifi_process+0x1d8>)
 801cf64:	2202      	movs	r2, #2
 801cf66:	601a      	str	r2, [r3, #0]
 801cf68:	e01a      	b.n	801cfa0 <wifi_process+0x128>
		 } else if (CenterPos == 0){
 801cf6a:	4b39      	ldr	r3, [pc, #228]	; (801d050 <wifi_process+0x1d8>)
 801cf6c:	681b      	ldr	r3, [r3, #0]
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	d116      	bne.n	801cfa0 <wifi_process+0x128>
			 char *data = formate_json_tof(1,0);
 801cf72:	2100      	movs	r1, #0
 801cf74:	2001      	movs	r0, #1
 801cf76:	f7ff fea3 	bl	801ccc0 <formate_json_tof>
 801cf7a:	6138      	str	r0, [r7, #16]
			  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801cf7c:	6938      	ldr	r0, [r7, #16]
 801cf7e:	f7e3 f8ff 	bl	8000180 <strlen>
 801cf82:	4603      	mov	r3, r0
 801cf84:	b29b      	uxth	r3, r3
 801cf86:	4619      	mov	r1, r3
 801cf88:	6938      	ldr	r0, [r7, #16]
 801cf8a:	f000 fdbd 	bl	801db08 <esp8266_Publish_ToF_BrokerMQTT>
 801cf8e:	4603      	mov	r3, r0
 801cf90:	2b0c      	cmp	r3, #12
 801cf92:	d002      	beq.n	801cf9a <wifi_process+0x122>
				printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801cf94:	482d      	ldr	r0, [pc, #180]	; (801d04c <wifi_process+0x1d4>)
 801cf96:	f001 fb93 	bl	801e6c0 <puts>
			  json_free_serialized_string(data);
 801cf9a:	6938      	ldr	r0, [r7, #16]
 801cf9c:	f7e5 fdc8 	bl	8002b30 <json_free_serialized_string>
		 }
		 if(RightPos == 1){
 801cfa0:	4b2c      	ldr	r3, [pc, #176]	; (801d054 <wifi_process+0x1dc>)
 801cfa2:	681b      	ldr	r3, [r3, #0]
 801cfa4:	2b01      	cmp	r3, #1
 801cfa6:	d11a      	bne.n	801cfde <wifi_process+0x166>
			 char *data = formate_json_tof(2,1);
 801cfa8:	2101      	movs	r1, #1
 801cfaa:	2002      	movs	r0, #2
 801cfac:	f7ff fe88 	bl	801ccc0 <formate_json_tof>
 801cfb0:	6078      	str	r0, [r7, #4]
			  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801cfb2:	6878      	ldr	r0, [r7, #4]
 801cfb4:	f7e3 f8e4 	bl	8000180 <strlen>
 801cfb8:	4603      	mov	r3, r0
 801cfba:	b29b      	uxth	r3, r3
 801cfbc:	4619      	mov	r1, r3
 801cfbe:	6878      	ldr	r0, [r7, #4]
 801cfc0:	f000 fda2 	bl	801db08 <esp8266_Publish_ToF_BrokerMQTT>
 801cfc4:	4603      	mov	r3, r0
 801cfc6:	2b0c      	cmp	r3, #12
 801cfc8:	d002      	beq.n	801cfd0 <wifi_process+0x158>
				printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801cfca:	4820      	ldr	r0, [pc, #128]	; (801d04c <wifi_process+0x1d4>)
 801cfcc:	f001 fb78 	bl	801e6c0 <puts>
			  json_free_serialized_string(data);
 801cfd0:	6878      	ldr	r0, [r7, #4]
 801cfd2:	f7e5 fdad 	bl	8002b30 <json_free_serialized_string>
			 RightPos = 2;
 801cfd6:	4b1f      	ldr	r3, [pc, #124]	; (801d054 <wifi_process+0x1dc>)
 801cfd8:	2202      	movs	r2, #2
 801cfda:	601a      	str	r2, [r3, #0]
 801cfdc:	e01a      	b.n	801d014 <wifi_process+0x19c>
		 } else if (RightPos == 0){
 801cfde:	4b1d      	ldr	r3, [pc, #116]	; (801d054 <wifi_process+0x1dc>)
 801cfe0:	681b      	ldr	r3, [r3, #0]
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d116      	bne.n	801d014 <wifi_process+0x19c>
			 char *data = formate_json_tof(2,0);
 801cfe6:	2100      	movs	r1, #0
 801cfe8:	2002      	movs	r0, #2
 801cfea:	f7ff fe69 	bl	801ccc0 <formate_json_tof>
 801cfee:	60b8      	str	r0, [r7, #8]
			  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801cff0:	68b8      	ldr	r0, [r7, #8]
 801cff2:	f7e3 f8c5 	bl	8000180 <strlen>
 801cff6:	4603      	mov	r3, r0
 801cff8:	b29b      	uxth	r3, r3
 801cffa:	4619      	mov	r1, r3
 801cffc:	68b8      	ldr	r0, [r7, #8]
 801cffe:	f000 fd83 	bl	801db08 <esp8266_Publish_ToF_BrokerMQTT>
 801d002:	4603      	mov	r3, r0
 801d004:	2b0c      	cmp	r3, #12
 801d006:	d002      	beq.n	801d00e <wifi_process+0x196>
				printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801d008:	4810      	ldr	r0, [pc, #64]	; (801d04c <wifi_process+0x1d4>)
 801d00a:	f001 fb59 	bl	801e6c0 <puts>
			  json_free_serialized_string(data);
 801d00e:	68b8      	ldr	r0, [r7, #8]
 801d010:	f7e5 fd8e 	bl	8002b30 <json_free_serialized_string>
		 }

		  int sub_status = check_subscription();
 801d014:	f7ff feb6 	bl	801cd84 <check_subscription>
 801d018:	6038      	str	r0, [r7, #0]
		  if(sub_status == 0)
 801d01a:	683b      	ldr	r3, [r7, #0]
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d102      	bne.n	801d026 <wifi_process+0x1ae>
			  printf("APP: check_subscription() SUB MQTT RCV\n");
 801d020:	480d      	ldr	r0, [pc, #52]	; (801d058 <wifi_process+0x1e0>)
 801d022:	f001 fb4d 	bl	801e6c0 <puts>
		  i++;
 801d026:	69fb      	ldr	r3, [r7, #28]
 801d028:	3301      	adds	r3, #1
 801d02a:	61fb      	str	r3, [r7, #28]
	while(i<1)
 801d02c:	69fb      	ldr	r3, [r7, #28]
 801d02e:	2b00      	cmp	r3, #0
 801d030:	f77f af28 	ble.w	801ce84 <wifi_process+0xc>
	  }

}
 801d034:	bf00      	nop
 801d036:	bf00      	nop
 801d038:	3720      	adds	r7, #32
 801d03a:	46bd      	mov	sp, r7
 801d03c:	bd80      	pop	{r7, pc}
 801d03e:	bf00      	nop
 801d040:	0801f754 	.word	0x0801f754
 801d044:	0801f784 	.word	0x0801f784
 801d048:	2000011c 	.word	0x2000011c
 801d04c:	0801f7b4 	.word	0x0801f7b4
 801d050:	20000124 	.word	0x20000124
 801d054:	20000120 	.word	0x20000120
 801d058:	0801f7e4 	.word	0x0801f7e4

0801d05c <uart_esp32_transmit>:
uint8_t UART_ESP32_TxBUF[UART_ESP32_MAX_SENDLEN];
uint8_t UART_ESP32_RxBUF[UART_ESP32_MAX_RECVLEN];
volatile uint8_t UART_ESP32_RxLen = 0;
volatile uint8_t UART_ESP32_RecvEndFlag = 0;

void uart_esp32_transmit(char *fmt, ...) {
 801d05c:	b40f      	push	{r0, r1, r2, r3}
 801d05e:	b580      	push	{r7, lr}
 801d060:	b082      	sub	sp, #8
 801d062:	af00      	add	r7, sp, #0
	uint16_t i, j;
	va_list ap;
	va_start(ap, fmt);
 801d064:	f107 0314 	add.w	r3, r7, #20
 801d068:	603b      	str	r3, [r7, #0]
	vsprintf((char*) UART_ESP32_TxBUF, fmt, ap);
 801d06a:	683a      	ldr	r2, [r7, #0]
 801d06c:	6939      	ldr	r1, [r7, #16]
 801d06e:	4822      	ldr	r0, [pc, #136]	; (801d0f8 <uart_esp32_transmit+0x9c>)
 801d070:	f001 fbf4 	bl	801e85c <vsiprintf>
	va_end(ap);

	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 801d074:	2300      	movs	r3, #0
 801d076:	80fb      	strh	r3, [r7, #6]
 801d078:	e019      	b.n	801d0ae <uart_esp32_transmit+0x52>
		j = i + 1;
 801d07a:	88fb      	ldrh	r3, [r7, #6]
 801d07c:	3301      	adds	r3, #1
 801d07e:	80bb      	strh	r3, [r7, #4]
		if (UART_ESP32_TxBUF[i] == '\00') {
 801d080:	88fb      	ldrh	r3, [r7, #6]
 801d082:	4a1d      	ldr	r2, [pc, #116]	; (801d0f8 <uart_esp32_transmit+0x9c>)
 801d084:	5cd3      	ldrb	r3, [r2, r3]
 801d086:	2b00      	cmp	r3, #0
 801d088:	d10e      	bne.n	801d0a8 <uart_esp32_transmit+0x4c>
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 801d08a:	e009      	b.n	801d0a0 <uart_esp32_transmit+0x44>
				UART_ESP32_TxBUF[j - 1] = UART_ESP32_TxBUF[j];
 801d08c:	88ba      	ldrh	r2, [r7, #4]
 801d08e:	88bb      	ldrh	r3, [r7, #4]
 801d090:	3b01      	subs	r3, #1
 801d092:	4919      	ldr	r1, [pc, #100]	; (801d0f8 <uart_esp32_transmit+0x9c>)
 801d094:	5c89      	ldrb	r1, [r1, r2]
 801d096:	4a18      	ldr	r2, [pc, #96]	; (801d0f8 <uart_esp32_transmit+0x9c>)
 801d098:	54d1      	strb	r1, [r2, r3]
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 801d09a:	88bb      	ldrh	r3, [r7, #4]
 801d09c:	3301      	adds	r3, #1
 801d09e:	80bb      	strh	r3, [r7, #4]
 801d0a0:	88bb      	ldrh	r3, [r7, #4]
 801d0a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d0a6:	d3f1      	bcc.n	801d08c <uart_esp32_transmit+0x30>
	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 801d0a8:	88fb      	ldrh	r3, [r7, #6]
 801d0aa:	3301      	adds	r3, #1
 801d0ac:	80fb      	strh	r3, [r7, #6]
 801d0ae:	88fb      	ldrh	r3, [r7, #6]
 801d0b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d0b4:	d3e1      	bcc.n	801d07a <uart_esp32_transmit+0x1e>
			}
		}
	}

	i = strlen((const char*) UART_ESP32_TxBUF);
 801d0b6:	4810      	ldr	r0, [pc, #64]	; (801d0f8 <uart_esp32_transmit+0x9c>)
 801d0b8:	f7e3 f862 	bl	8000180 <strlen>
 801d0bc:	4603      	mov	r3, r0
 801d0be:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(&hlpuart1, UART_ESP32_TxBUF, i, 100);
 801d0c0:	88fa      	ldrh	r2, [r7, #6]
 801d0c2:	2364      	movs	r3, #100	; 0x64
 801d0c4:	490c      	ldr	r1, [pc, #48]	; (801d0f8 <uart_esp32_transmit+0x9c>)
 801d0c6:	480d      	ldr	r0, [pc, #52]	; (801d0fc <uart_esp32_transmit+0xa0>)
 801d0c8:	f7fe f9e0 	bl	801b48c <HAL_UART_Transmit>

	memset(UART_ESP32_TxBUF, 0, UART_ESP32_MAX_SENDLEN);
 801d0cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d0d0:	2100      	movs	r1, #0
 801d0d2:	4809      	ldr	r0, [pc, #36]	; (801d0f8 <uart_esp32_transmit+0x9c>)
 801d0d4:	f001 f970 	bl	801e3b8 <memset>
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 801d0d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d0dc:	2100      	movs	r1, #0
 801d0de:	4808      	ldr	r0, [pc, #32]	; (801d100 <uart_esp32_transmit+0xa4>)
 801d0e0:	f001 f96a 	bl	801e3b8 <memset>
	UART_ESP32_RecvEndFlag = 0;
 801d0e4:	4b07      	ldr	r3, [pc, #28]	; (801d104 <uart_esp32_transmit+0xa8>)
 801d0e6:	2200      	movs	r2, #0
 801d0e8:	701a      	strb	r2, [r3, #0]
}
 801d0ea:	bf00      	nop
 801d0ec:	3708      	adds	r7, #8
 801d0ee:	46bd      	mov	sp, r7
 801d0f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d0f4:	b004      	add	sp, #16
 801d0f6:	4770      	bx	lr
 801d0f8:	200087b4 	.word	0x200087b4
 801d0fc:	200001d4 	.word	0x200001d4
 801d100:	20008fb4 	.word	0x20008fb4
 801d104:	200097b5 	.word	0x200097b5

0801d108 <esp8266_CheckRespond>:

WIFI_StateTypeDef esp8266_CheckRespond(uint8_t *str) {
 801d108:	b580      	push	{r7, lr}
 801d10a:	b082      	sub	sp, #8
 801d10c:	af00      	add	r7, sp, #0
 801d10e:	6078      	str	r0, [r7, #4]
	printf("(DBG:) recv:\r\n%s\r\n", UART_ESP32_RxBUF);
 801d110:	4910      	ldr	r1, [pc, #64]	; (801d154 <esp8266_CheckRespond+0x4c>)
 801d112:	4811      	ldr	r0, [pc, #68]	; (801d158 <esp8266_CheckRespond+0x50>)
 801d114:	f001 fa38 	bl	801e588 <iprintf>
	if (strstr((const char*) UART_ESP32_RxBUF, (const char*) str) != NULL) {
 801d118:	6879      	ldr	r1, [r7, #4]
 801d11a:	480e      	ldr	r0, [pc, #56]	; (801d154 <esp8266_CheckRespond+0x4c>)
 801d11c:	f001 fb72 	bl	801e804 <strstr>
 801d120:	4603      	mov	r3, r0
 801d122:	2b00      	cmp	r3, #0
 801d124:	d00a      	beq.n	801d13c <esp8266_CheckRespond+0x34>
		printf("(DBG:) Match succeed\r\n");
 801d126:	480d      	ldr	r0, [pc, #52]	; (801d15c <esp8266_CheckRespond+0x54>)
 801d128:	f001 faca 	bl	801e6c0 <puts>
		memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 801d12c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d130:	2100      	movs	r1, #0
 801d132:	4808      	ldr	r0, [pc, #32]	; (801d154 <esp8266_CheckRespond+0x4c>)
 801d134:	f001 f940 	bl	801e3b8 <memset>
		return _MATCHOK;
 801d138:	2304      	movs	r3, #4
 801d13a:	e006      	b.n	801d14a <esp8266_CheckRespond+0x42>
	}

	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 801d13c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d140:	2100      	movs	r1, #0
 801d142:	4804      	ldr	r0, [pc, #16]	; (801d154 <esp8266_CheckRespond+0x4c>)
 801d144:	f001 f938 	bl	801e3b8 <memset>
	return _MATCHERROR;
 801d148:	2303      	movs	r3, #3
}
 801d14a:	4618      	mov	r0, r3
 801d14c:	3708      	adds	r7, #8
 801d14e:	46bd      	mov	sp, r7
 801d150:	bd80      	pop	{r7, pc}
 801d152:	bf00      	nop
 801d154:	20008fb4 	.word	0x20008fb4
 801d158:	0801f80c 	.word	0x0801f80c
 801d15c:	0801f820 	.word	0x0801f820

0801d160 <esp8266_TransmitCmd>:

WIFI_StateTypeDef esp8266_TransmitCmd(uint8_t *cmd, uint8_t *ack,
		uint32_t waitms, uint8_t newline) {
 801d160:	b580      	push	{r7, lr}
 801d162:	b086      	sub	sp, #24
 801d164:	af00      	add	r7, sp, #0
 801d166:	60f8      	str	r0, [r7, #12]
 801d168:	60b9      	str	r1, [r7, #8]
 801d16a:	607a      	str	r2, [r7, #4]
 801d16c:	70fb      	strb	r3, [r7, #3]
	int timeout = waitms;
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	617b      	str	r3, [r7, #20]
	uint8_t check = 0;
 801d172:	2300      	movs	r3, #0
 801d174:	74fb      	strb	r3, [r7, #19]
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 801d176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d17a:	2100      	movs	r1, #0
 801d17c:	4826      	ldr	r0, [pc, #152]	; (801d218 <esp8266_TransmitCmd+0xb8>)
 801d17e:	f001 f91b 	bl	801e3b8 <memset>
	printf("\r\n(DBG:) Try to send cmd: %s\r\n", cmd);
 801d182:	68f9      	ldr	r1, [r7, #12]
 801d184:	4825      	ldr	r0, [pc, #148]	; (801d21c <esp8266_TransmitCmd+0xbc>)
 801d186:	f001 f9ff 	bl	801e588 <iprintf>
	if (newline == 0)
 801d18a:	78fb      	ldrb	r3, [r7, #3]
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	d104      	bne.n	801d19a <esp8266_TransmitCmd+0x3a>
		uart_esp32_transmit("%s", cmd);      // transmit cmd to usart2
 801d190:	68f9      	ldr	r1, [r7, #12]
 801d192:	4823      	ldr	r0, [pc, #140]	; (801d220 <esp8266_TransmitCmd+0xc0>)
 801d194:	f7ff ff62 	bl	801d05c <uart_esp32_transmit>
 801d198:	e01e      	b.n	801d1d8 <esp8266_TransmitCmd+0x78>
	else
		uart_esp32_transmit("%s\r\n", cmd); // transmit cmd to usart2
 801d19a:	68f9      	ldr	r1, [r7, #12]
 801d19c:	4821      	ldr	r0, [pc, #132]	; (801d224 <esp8266_TransmitCmd+0xc4>)
 801d19e:	f7ff ff5d 	bl	801d05c <uart_esp32_transmit>

	while (timeout--) {
 801d1a2:	e019      	b.n	801d1d8 <esp8266_TransmitCmd+0x78>
		// finish dma receive
		if (UART_ESP32_RecvEndFlag == 1) {
 801d1a4:	4b20      	ldr	r3, [pc, #128]	; (801d228 <esp8266_TransmitCmd+0xc8>)
 801d1a6:	781b      	ldrb	r3, [r3, #0]
 801d1a8:	b2db      	uxtb	r3, r3
 801d1aa:	2b01      	cmp	r3, #1
 801d1ac:	d111      	bne.n	801d1d2 <esp8266_TransmitCmd+0x72>
			check = esp8266_CheckRespond(ack);
 801d1ae:	68b8      	ldr	r0, [r7, #8]
 801d1b0:	f7ff ffaa 	bl	801d108 <esp8266_CheckRespond>
 801d1b4:	4603      	mov	r3, r0
 801d1b6:	74fb      	strb	r3, [r7, #19]
			if (check == _MATCHOK) {
			}

			UART_ESP32_RxLen = 0;
 801d1b8:	4b1c      	ldr	r3, [pc, #112]	; (801d22c <esp8266_TransmitCmd+0xcc>)
 801d1ba:	2200      	movs	r2, #0
 801d1bc:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 801d1be:	4b1a      	ldr	r3, [pc, #104]	; (801d228 <esp8266_TransmitCmd+0xc8>)
 801d1c0:	2200      	movs	r2, #0
 801d1c2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 801d1c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d1c8:	4913      	ldr	r1, [pc, #76]	; (801d218 <esp8266_TransmitCmd+0xb8>)
 801d1ca:	4819      	ldr	r0, [pc, #100]	; (801d230 <esp8266_TransmitCmd+0xd0>)
 801d1cc:	f7fe f9ec 	bl	801b5a8 <HAL_UART_Receive_DMA>

			break;
 801d1d0:	e007      	b.n	801d1e2 <esp8266_TransmitCmd+0x82>
		}
		HAL_Delay(1);
 801d1d2:	2001      	movs	r0, #1
 801d1d4:	f7fa fc36 	bl	8017a44 <HAL_Delay>
	while (timeout--) {
 801d1d8:	697b      	ldr	r3, [r7, #20]
 801d1da:	1e5a      	subs	r2, r3, #1
 801d1dc:	617a      	str	r2, [r7, #20]
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	d1e0      	bne.n	801d1a4 <esp8266_TransmitCmd+0x44>
	}

	if (check == _MATCHERROR) {
 801d1e2:	7cfb      	ldrb	r3, [r7, #19]
 801d1e4:	2b03      	cmp	r3, #3
 801d1e6:	d104      	bne.n	801d1f2 <esp8266_TransmitCmd+0x92>
		printf("\r\n(DBG:) Cmd match failed\r\n");
 801d1e8:	4812      	ldr	r0, [pc, #72]	; (801d234 <esp8266_TransmitCmd+0xd4>)
 801d1ea:	f001 fa69 	bl	801e6c0 <puts>
		return check;
 801d1ee:	7cfb      	ldrb	r3, [r7, #19]
 801d1f0:	e00e      	b.n	801d210 <esp8266_TransmitCmd+0xb0>
	}
	if (timeout <= 0) {
 801d1f2:	697b      	ldr	r3, [r7, #20]
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	dc07      	bgt.n	801d208 <esp8266_TransmitCmd+0xa8>
		printf("(DBG:) Finish waiting\r\n");
 801d1f8:	480f      	ldr	r0, [pc, #60]	; (801d238 <esp8266_TransmitCmd+0xd8>)
 801d1fa:	f001 fa61 	bl	801e6c0 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 801d1fe:	480f      	ldr	r0, [pc, #60]	; (801d23c <esp8266_TransmitCmd+0xdc>)
 801d200:	f001 fa5e 	bl	801e6c0 <puts>
		return _TIMEOUT;
 801d204:	2302      	movs	r3, #2
 801d206:	e003      	b.n	801d210 <esp8266_TransmitCmd+0xb0>
	}
	printf("(DBG:) Succeed\r\n");
 801d208:	480d      	ldr	r0, [pc, #52]	; (801d240 <esp8266_TransmitCmd+0xe0>)
 801d20a:	f001 fa59 	bl	801e6c0 <puts>
	return _SUCCEED;
 801d20e:	2301      	movs	r3, #1
}
 801d210:	4618      	mov	r0, r3
 801d212:	3718      	adds	r7, #24
 801d214:	46bd      	mov	sp, r7
 801d216:	bd80      	pop	{r7, pc}
 801d218:	20008fb4 	.word	0x20008fb4
 801d21c:	0801f838 	.word	0x0801f838
 801d220:	0801f858 	.word	0x0801f858
 801d224:	0801f85c 	.word	0x0801f85c
 801d228:	200097b5 	.word	0x200097b5
 801d22c:	200097b4 	.word	0x200097b4
 801d230:	200001d4 	.word	0x200001d4
 801d234:	0801f864 	.word	0x0801f864
 801d238:	0801f880 	.word	0x0801f880
 801d23c:	0801f898 	.word	0x0801f898
 801d240:	0801f8ac 	.word	0x0801f8ac

0801d244 <esp8266_HardwareReset>:

WIFI_StateTypeDef esp8266_HardwareReset(uint32_t waitms) {
 801d244:	b580      	push	{r7, lr}
 801d246:	b084      	sub	sp, #16
 801d248:	af00      	add	r7, sp, #0
 801d24a:	6078      	str	r0, [r7, #4]
	int timeout = waitms;
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	60fb      	str	r3, [r7, #12]
	WIFI_RST_Enable();
 801d250:	2200      	movs	r2, #0
 801d252:	2108      	movs	r1, #8
 801d254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801d258:	f7fb fac0 	bl	80187dc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 801d25c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801d260:	f7fa fbf0 	bl	8017a44 <HAL_Delay>
	WIFI_RST_Disable();
 801d264:	2201      	movs	r2, #1
 801d266:	2108      	movs	r1, #8
 801d268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801d26c:	f7fb fab6 	bl	80187dc <HAL_GPIO_WritePin>
	while (timeout--) {
 801d270:	e01b      	b.n	801d2aa <esp8266_HardwareReset+0x66>
		if (UART_ESP32_RecvEndFlag == 1) {
 801d272:	4b18      	ldr	r3, [pc, #96]	; (801d2d4 <esp8266_HardwareReset+0x90>)
 801d274:	781b      	ldrb	r3, [r3, #0]
 801d276:	b2db      	uxtb	r3, r3
 801d278:	2b01      	cmp	r3, #1
 801d27a:	d113      	bne.n	801d2a4 <esp8266_HardwareReset+0x60>

			printf("(DBG:) Hardware Reset OK!\r\n");
 801d27c:	4816      	ldr	r0, [pc, #88]	; (801d2d8 <esp8266_HardwareReset+0x94>)
 801d27e:	f001 fa1f 	bl	801e6c0 <puts>
			HAL_Delay(100);
 801d282:	2064      	movs	r0, #100	; 0x64
 801d284:	f7fa fbde 	bl	8017a44 <HAL_Delay>

			UART_ESP32_RxLen = 0;
 801d288:	4b14      	ldr	r3, [pc, #80]	; (801d2dc <esp8266_HardwareReset+0x98>)
 801d28a:	2200      	movs	r2, #0
 801d28c:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 801d28e:	4b11      	ldr	r3, [pc, #68]	; (801d2d4 <esp8266_HardwareReset+0x90>)
 801d290:	2200      	movs	r2, #0
 801d292:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 801d294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d298:	4911      	ldr	r1, [pc, #68]	; (801d2e0 <esp8266_HardwareReset+0x9c>)
 801d29a:	4812      	ldr	r0, [pc, #72]	; (801d2e4 <esp8266_HardwareReset+0xa0>)
 801d29c:	f7fe f984 	bl	801b5a8 <HAL_UART_Receive_DMA>

			return _SUCCEED;
 801d2a0:	2301      	movs	r3, #1
 801d2a2:	e013      	b.n	801d2cc <esp8266_HardwareReset+0x88>
		}
		HAL_Delay(1);
 801d2a4:	2001      	movs	r0, #1
 801d2a6:	f7fa fbcd 	bl	8017a44 <HAL_Delay>
	while (timeout--) {
 801d2aa:	68fb      	ldr	r3, [r7, #12]
 801d2ac:	1e5a      	subs	r2, r3, #1
 801d2ae:	60fa      	str	r2, [r7, #12]
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	d1de      	bne.n	801d272 <esp8266_HardwareReset+0x2e>
	}
	if (timeout <= 0) {
 801d2b4:	68fb      	ldr	r3, [r7, #12]
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	dc07      	bgt.n	801d2ca <esp8266_HardwareReset+0x86>
		printf("(DBG:) Finish waiting\r\n");
 801d2ba:	480b      	ldr	r0, [pc, #44]	; (801d2e8 <esp8266_HardwareReset+0xa4>)
 801d2bc:	f001 fa00 	bl	801e6c0 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 801d2c0:	480a      	ldr	r0, [pc, #40]	; (801d2ec <esp8266_HardwareReset+0xa8>)
 801d2c2:	f001 f9fd 	bl	801e6c0 <puts>
		return _TIMEOUT;
 801d2c6:	2302      	movs	r3, #2
 801d2c8:	e000      	b.n	801d2cc <esp8266_HardwareReset+0x88>
	}

	return _UNKNOWN_ERROR;
 801d2ca:	23ff      	movs	r3, #255	; 0xff
}
 801d2cc:	4618      	mov	r0, r3
 801d2ce:	3710      	adds	r7, #16
 801d2d0:	46bd      	mov	sp, r7
 801d2d2:	bd80      	pop	{r7, pc}
 801d2d4:	200097b5 	.word	0x200097b5
 801d2d8:	0801f8bc 	.word	0x0801f8bc
 801d2dc:	200097b4 	.word	0x200097b4
 801d2e0:	20008fb4 	.word	0x20008fb4
 801d2e4:	200001d4 	.word	0x200001d4
 801d2e8:	0801f880 	.word	0x0801f880
 801d2ec:	0801f898 	.word	0x0801f898

0801d2f0 <esp8266_ConnectAP>:

WIFI_StateTypeDef esp8266_ConnectAP() {
 801d2f0:	b580      	push	{r7, lr}
 801d2f2:	b082      	sub	sp, #8
 801d2f4:	af00      	add	r7, sp, #0
	uint16_t cmd_len = strlen(AP_SSID) + strlen(AP_PSWD) + 30;
 801d2f6:	2333      	movs	r3, #51	; 0x33
 801d2f8:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801d2fa:	88fb      	ldrh	r3, [r7, #6]
 801d2fc:	4618      	mov	r0, r3
 801d2fe:	f001 f823 	bl	801e348 <malloc>
 801d302:	4603      	mov	r3, r0
 801d304:	603b      	str	r3, [r7, #0]
	memset(cmd, 0, cmd_len);
 801d306:	88fb      	ldrh	r3, [r7, #6]
 801d308:	461a      	mov	r2, r3
 801d30a:	2100      	movs	r1, #0
 801d30c:	6838      	ldr	r0, [r7, #0]
 801d30e:	f001 f853 	bl	801e3b8 <memset>
	sprintf((char*) cmd, "AT+CWJAP=\"%s\",\"%s\"", AP_SSID, AP_PSWD);
 801d312:	4b0e      	ldr	r3, [pc, #56]	; (801d34c <esp8266_ConnectAP+0x5c>)
 801d314:	4a0e      	ldr	r2, [pc, #56]	; (801d350 <esp8266_ConnectAP+0x60>)
 801d316:	490f      	ldr	r1, [pc, #60]	; (801d354 <esp8266_ConnectAP+0x64>)
 801d318:	6838      	ldr	r0, [r7, #0]
 801d31a:	f001 f9e9 	bl	801e6f0 <siprintf>

	if (esp8266_TransmitCmd(cmd, (uint8_t*) "WIFI CONNECTED", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
 801d31e:	2301      	movs	r3, #1
 801d320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d324:	490c      	ldr	r1, [pc, #48]	; (801d358 <esp8266_ConnectAP+0x68>)
 801d326:	6838      	ldr	r0, [r7, #0]
 801d328:	f7ff ff1a 	bl	801d160 <esp8266_TransmitCmd>
 801d32c:	4603      	mov	r3, r0
 801d32e:	2b01      	cmp	r3, #1
 801d330:	d103      	bne.n	801d33a <esp8266_ConnectAP+0x4a>
		wifi_state = _ONLINE;
 801d332:	4b0a      	ldr	r3, [pc, #40]	; (801d35c <esp8266_ConnectAP+0x6c>)
 801d334:	2205      	movs	r2, #5
 801d336:	701a      	strb	r2, [r3, #0]
 801d338:	e002      	b.n	801d340 <esp8266_ConnectAP+0x50>
	else
		wifi_state = _OFFLINE;
 801d33a:	4b08      	ldr	r3, [pc, #32]	; (801d35c <esp8266_ConnectAP+0x6c>)
 801d33c:	2206      	movs	r2, #6
 801d33e:	701a      	strb	r2, [r3, #0]

	return wifi_state;
 801d340:	4b06      	ldr	r3, [pc, #24]	; (801d35c <esp8266_ConnectAP+0x6c>)
 801d342:	781b      	ldrb	r3, [r3, #0]
}
 801d344:	4618      	mov	r0, r3
 801d346:	3708      	adds	r7, #8
 801d348:	46bd      	mov	sp, r7
 801d34a:	bd80      	pop	{r7, pc}
 801d34c:	0801f8d8 	.word	0x0801f8d8
 801d350:	0801f8e4 	.word	0x0801f8e4
 801d354:	0801f8f4 	.word	0x0801f8f4
 801d358:	0801f908 	.word	0x0801f908
 801d35c:	20000089 	.word	0x20000089

0801d360 <esp8266_SetupIP>:
	return _SUCCEED;
}

// +BCH
WIFI_StateTypeDef esp8266_SetupIP()
{
 801d360:	b580      	push	{r7, lr}
 801d362:	b082      	sub	sp, #8
 801d364:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 801d366:	2300      	movs	r3, #0
 801d368:	71fb      	strb	r3, [r7, #7]

	/* Reset esp8266 */
	printf("(DBG:) Trying to reset esp8266\r\n");
 801d36a:	48a8      	ldr	r0, [pc, #672]	; (801d60c <esp8266_SetupIP+0x2ac>)
 801d36c:	f001 f9a8 	bl	801e6c0 <puts>
	wifi_config_step++;
 801d370:	4ba7      	ldr	r3, [pc, #668]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d372:	781b      	ldrb	r3, [r3, #0]
 801d374:	3301      	adds	r3, #1
 801d376:	b2da      	uxtb	r2, r3
 801d378:	4ba5      	ldr	r3, [pc, #660]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d37a:	701a      	strb	r2, [r3, #0]
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 801d37c:	e019      	b.n	801d3b2 <esp8266_SetupIP+0x52>
		retry_count++;
 801d37e:	79fb      	ldrb	r3, [r7, #7]
 801d380:	3301      	adds	r3, #1
 801d382:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801d384:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d388:	f7fa fb5c 	bl	8017a44 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801d38c:	79fb      	ldrb	r3, [r7, #7]
 801d38e:	2b03      	cmp	r3, #3
 801d390:	d90f      	bls.n	801d3b2 <esp8266_SetupIP+0x52>
			printf("(DBG:) Reset failed\r\n");
 801d392:	48a0      	ldr	r0, [pc, #640]	; (801d614 <esp8266_SetupIP+0x2b4>)
 801d394:	f001 f994 	bl	801e6c0 <puts>
			retry_count = 0;
 801d398:	2300      	movs	r3, #0
 801d39a:	71fb      	strb	r3, [r7, #7]
			trans_state = _UNKNOWN_STATE;
 801d39c:	4b9e      	ldr	r3, [pc, #632]	; (801d618 <esp8266_SetupIP+0x2b8>)
 801d39e:	22ee      	movs	r2, #238	; 0xee
 801d3a0:	701a      	strb	r2, [r3, #0]
			wifi_config_step--;
 801d3a2:	4b9b      	ldr	r3, [pc, #620]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d3a4:	781b      	ldrb	r3, [r3, #0]
 801d3a6:	3b01      	subs	r3, #1
 801d3a8:	b2da      	uxtb	r2, r3
 801d3aa:	4b99      	ldr	r3, [pc, #612]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d3ac:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801d3ae:	2300      	movs	r3, #0
 801d3b0:	e1e1      	b.n	801d776 <esp8266_SetupIP+0x416>
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 801d3b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801d3b6:	f7ff ff45 	bl	801d244 <esp8266_HardwareReset>
 801d3ba:	4603      	mov	r3, r0
 801d3bc:	2b01      	cmp	r3, #1
 801d3be:	d1de      	bne.n	801d37e <esp8266_SetupIP+0x1e>
		}
	}

	HAL_Delay(2000);		// wait 2 seconds
 801d3c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801d3c4:	f7fa fb3e 	bl	8017a44 <HAL_Delay>
	retry_count = 0;		// reset retry count
 801d3c8:	2300      	movs	r3, #0
 801d3ca:	71fb      	strb	r3, [r7, #7]

	/* Close echo */
	printf("(DBG:) Trying to close echo\r\n");
 801d3cc:	4893      	ldr	r0, [pc, #588]	; (801d61c <esp8266_SetupIP+0x2bc>)
 801d3ce:	f001 f977 	bl	801e6c0 <puts>
	wifi_config_step++;
 801d3d2:	4b8f      	ldr	r3, [pc, #572]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d3d4:	781b      	ldrb	r3, [r3, #0]
 801d3d6:	3301      	adds	r3, #1
 801d3d8:	b2da      	uxtb	r2, r3
 801d3da:	4b8d      	ldr	r3, [pc, #564]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d3dc:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 801d3de:	e016      	b.n	801d40e <esp8266_SetupIP+0xae>
			!= _SUCCEED) {
		retry_count++;
 801d3e0:	79fb      	ldrb	r3, [r7, #7]
 801d3e2:	3301      	adds	r3, #1
 801d3e4:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801d3e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d3ea:	f7fa fb2b 	bl	8017a44 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801d3ee:	79fb      	ldrb	r3, [r7, #7]
 801d3f0:	2b03      	cmp	r3, #3
 801d3f2:	d90c      	bls.n	801d40e <esp8266_SetupIP+0xae>
			printf("(DBG:) Close echo failed\r\n");
 801d3f4:	488a      	ldr	r0, [pc, #552]	; (801d620 <esp8266_SetupIP+0x2c0>)
 801d3f6:	f001 f963 	bl	801e6c0 <puts>
			retry_count = 0;
 801d3fa:	2300      	movs	r3, #0
 801d3fc:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801d3fe:	4b84      	ldr	r3, [pc, #528]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d400:	781b      	ldrb	r3, [r3, #0]
 801d402:	3b01      	subs	r3, #1
 801d404:	b2da      	uxtb	r2, r3
 801d406:	4b82      	ldr	r3, [pc, #520]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d408:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801d40a:	2300      	movs	r3, #0
 801d40c:	e1b3      	b.n	801d776 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 801d40e:	2301      	movs	r3, #1
 801d410:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801d414:	4983      	ldr	r1, [pc, #524]	; (801d624 <esp8266_SetupIP+0x2c4>)
 801d416:	4884      	ldr	r0, [pc, #528]	; (801d628 <esp8266_SetupIP+0x2c8>)
 801d418:	f7ff fea2 	bl	801d160 <esp8266_TransmitCmd>
 801d41c:	4603      	mov	r3, r0
 801d41e:	2b01      	cmp	r3, #1
 801d420:	d1de      	bne.n	801d3e0 <esp8266_SetupIP+0x80>
		}
	}

	HAL_Delay(100);
 801d422:	2064      	movs	r0, #100	; 0x64
 801d424:	f7fa fb0e 	bl	8017a44 <HAL_Delay>
	retry_count = 0;		// reset retry count
 801d428:	2300      	movs	r3, #0
 801d42a:	71fb      	strb	r3, [r7, #7]

	/* Set wifi mode 0:AP 1:STA 2:AP+STA */
	printf("(DBG:) Trying to set Wifi mode\r\n");
 801d42c:	487f      	ldr	r0, [pc, #508]	; (801d62c <esp8266_SetupIP+0x2cc>)
 801d42e:	f001 f947 	bl	801e6c0 <puts>
	wifi_config_step++;
 801d432:	4b77      	ldr	r3, [pc, #476]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d434:	781b      	ldrb	r3, [r3, #0]
 801d436:	3301      	adds	r3, #1
 801d438:	b2da      	uxtb	r2, r3
 801d43a:	4b75      	ldr	r3, [pc, #468]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d43c:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 801d43e:	e016      	b.n	801d46e <esp8266_SetupIP+0x10e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801d440:	79fb      	ldrb	r3, [r7, #7]
 801d442:	3301      	adds	r3, #1
 801d444:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801d446:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d44a:	f7fa fafb 	bl	8017a44 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801d44e:	79fb      	ldrb	r3, [r7, #7]
 801d450:	2b03      	cmp	r3, #3
 801d452:	d90c      	bls.n	801d46e <esp8266_SetupIP+0x10e>
			printf("(DBG:) Set Wifi mode failed\r\n");
 801d454:	4876      	ldr	r0, [pc, #472]	; (801d630 <esp8266_SetupIP+0x2d0>)
 801d456:	f001 f933 	bl	801e6c0 <puts>
			retry_count = 0;
 801d45a:	2300      	movs	r3, #0
 801d45c:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801d45e:	4b6c      	ldr	r3, [pc, #432]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d460:	781b      	ldrb	r3, [r3, #0]
 801d462:	3b01      	subs	r3, #1
 801d464:	b2da      	uxtb	r2, r3
 801d466:	4b6a      	ldr	r3, [pc, #424]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d468:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801d46a:	2300      	movs	r3, #0
 801d46c:	e183      	b.n	801d776 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 801d46e:	2301      	movs	r3, #1
 801d470:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801d474:	496b      	ldr	r1, [pc, #428]	; (801d624 <esp8266_SetupIP+0x2c4>)
 801d476:	486f      	ldr	r0, [pc, #444]	; (801d634 <esp8266_SetupIP+0x2d4>)
 801d478:	f7ff fe72 	bl	801d160 <esp8266_TransmitCmd>
 801d47c:	4603      	mov	r3, r0
 801d47e:	2b01      	cmp	r3, #1
 801d480:	d1de      	bne.n	801d440 <esp8266_SetupIP+0xe0>
		}
	}

	HAL_Delay(100);
 801d482:	2064      	movs	r0, #100	; 0x64
 801d484:	f7fa fade 	bl	8017a44 <HAL_Delay>
	retry_count = 0;		// reset retry count
 801d488:	2300      	movs	r3, #0
 801d48a:	71fb      	strb	r3, [r7, #7]

	/* Disable auto connect */
	printf("(DBG:) Trying to close auto connect\r\n");
 801d48c:	486a      	ldr	r0, [pc, #424]	; (801d638 <esp8266_SetupIP+0x2d8>)
 801d48e:	f001 f917 	bl	801e6c0 <puts>
	wifi_config_step++;
 801d492:	4b5f      	ldr	r3, [pc, #380]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d494:	781b      	ldrb	r3, [r3, #0]
 801d496:	3301      	adds	r3, #1
 801d498:	b2da      	uxtb	r2, r3
 801d49a:	4b5d      	ldr	r3, [pc, #372]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d49c:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 801d49e:	e016      	b.n	801d4ce <esp8266_SetupIP+0x16e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801d4a0:	79fb      	ldrb	r3, [r7, #7]
 801d4a2:	3301      	adds	r3, #1
 801d4a4:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801d4a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d4aa:	f7fa facb 	bl	8017a44 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801d4ae:	79fb      	ldrb	r3, [r7, #7]
 801d4b0:	2b03      	cmp	r3, #3
 801d4b2:	d90c      	bls.n	801d4ce <esp8266_SetupIP+0x16e>
			printf("(DBG:) Close auto connect failed\r\n");
 801d4b4:	4861      	ldr	r0, [pc, #388]	; (801d63c <esp8266_SetupIP+0x2dc>)
 801d4b6:	f001 f903 	bl	801e6c0 <puts>
			retry_count = 0;
 801d4ba:	2300      	movs	r3, #0
 801d4bc:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801d4be:	4b54      	ldr	r3, [pc, #336]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d4c0:	781b      	ldrb	r3, [r3, #0]
 801d4c2:	3b01      	subs	r3, #1
 801d4c4:	b2da      	uxtb	r2, r3
 801d4c6:	4b52      	ldr	r3, [pc, #328]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d4c8:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801d4ca:	2300      	movs	r3, #0
 801d4cc:	e153      	b.n	801d776 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 801d4ce:	2301      	movs	r3, #1
 801d4d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801d4d4:	4953      	ldr	r1, [pc, #332]	; (801d624 <esp8266_SetupIP+0x2c4>)
 801d4d6:	485a      	ldr	r0, [pc, #360]	; (801d640 <esp8266_SetupIP+0x2e0>)
 801d4d8:	f7ff fe42 	bl	801d160 <esp8266_TransmitCmd>
 801d4dc:	4603      	mov	r3, r0
 801d4de:	2b01      	cmp	r3, #1
 801d4e0:	d1de      	bne.n	801d4a0 <esp8266_SetupIP+0x140>
		}
	}

	HAL_Delay(100);
 801d4e2:	2064      	movs	r0, #100	; 0x64
 801d4e4:	f7fa faae 	bl	8017a44 <HAL_Delay>
	retry_count = 0;		// reset retry count
 801d4e8:	2300      	movs	r3, #0
 801d4ea:	71fb      	strb	r3, [r7, #7]

	/* Connect to AP(Wifi) */
	printf("(DBG:) Trying to connect to AP\r\n");
 801d4ec:	4855      	ldr	r0, [pc, #340]	; (801d644 <esp8266_SetupIP+0x2e4>)
 801d4ee:	f001 f8e7 	bl	801e6c0 <puts>
	wifi_config_step++;
 801d4f2:	4b47      	ldr	r3, [pc, #284]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d4f4:	781b      	ldrb	r3, [r3, #0]
 801d4f6:	3301      	adds	r3, #1
 801d4f8:	b2da      	uxtb	r2, r3
 801d4fa:	4b45      	ldr	r3, [pc, #276]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d4fc:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectAP() != _ONLINE) {
 801d4fe:	e016      	b.n	801d52e <esp8266_SetupIP+0x1ce>
		retry_count++;
 801d500:	79fb      	ldrb	r3, [r7, #7]
 801d502:	3301      	adds	r3, #1
 801d504:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801d506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d50a:	f7fa fa9b 	bl	8017a44 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801d50e:	79fb      	ldrb	r3, [r7, #7]
 801d510:	2b03      	cmp	r3, #3
 801d512:	d90c      	bls.n	801d52e <esp8266_SetupIP+0x1ce>
			printf("(DBG:) Connect to AP failed\r\n");
 801d514:	484c      	ldr	r0, [pc, #304]	; (801d648 <esp8266_SetupIP+0x2e8>)
 801d516:	f001 f8d3 	bl	801e6c0 <puts>
			retry_count = 0;
 801d51a:	2300      	movs	r3, #0
 801d51c:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801d51e:	4b3c      	ldr	r3, [pc, #240]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d520:	781b      	ldrb	r3, [r3, #0]
 801d522:	3b01      	subs	r3, #1
 801d524:	b2da      	uxtb	r2, r3
 801d526:	4b3a      	ldr	r3, [pc, #232]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d528:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801d52a:	2300      	movs	r3, #0
 801d52c:	e123      	b.n	801d776 <esp8266_SetupIP+0x416>
	while (esp8266_ConnectAP() != _ONLINE) {
 801d52e:	f7ff fedf 	bl	801d2f0 <esp8266_ConnectAP>
 801d532:	4603      	mov	r3, r0
 801d534:	2b05      	cmp	r3, #5
 801d536:	d1e3      	bne.n	801d500 <esp8266_SetupIP+0x1a0>
		}
	}

	HAL_Delay(100);
 801d538:	2064      	movs	r0, #100	; 0x64
 801d53a:	f7fa fa83 	bl	8017a44 <HAL_Delay>
	retry_count = 0;		// reset retry count
 801d53e:	2300      	movs	r3, #0
 801d540:	71fb      	strb	r3, [r7, #7]

	/* Try to get AP info */
	if (wifi_state == _ONLINE) {
 801d542:	4b42      	ldr	r3, [pc, #264]	; (801d64c <esp8266_SetupIP+0x2ec>)
 801d544:	781b      	ldrb	r3, [r3, #0]
 801d546:	2b05      	cmp	r3, #5
 801d548:	d123      	bne.n	801d592 <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 801d54a:	e018      	b.n	801d57e <esp8266_SetupIP+0x21e>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 801d54c:	79fb      	ldrb	r3, [r7, #7]
 801d54e:	3301      	adds	r3, #1
 801d550:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 801d552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d556:	f7fa fa75 	bl	8017a44 <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 801d55a:	79fb      	ldrb	r3, [r7, #7]
 801d55c:	2b01      	cmp	r3, #1
 801d55e:	d90e      	bls.n	801d57e <esp8266_SetupIP+0x21e>
				printf("(DBG:) Get AP msg failed\r\n");
 801d560:	483b      	ldr	r0, [pc, #236]	; (801d650 <esp8266_SetupIP+0x2f0>)
 801d562:	f001 f8ad 	bl	801e6c0 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 801d566:	483b      	ldr	r0, [pc, #236]	; (801d654 <esp8266_SetupIP+0x2f4>)
 801d568:	f001 f80e 	bl	801e588 <iprintf>
				retry_count = 0;
 801d56c:	2300      	movs	r3, #0
 801d56e:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 801d570:	4b27      	ldr	r3, [pc, #156]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d572:	781b      	ldrb	r3, [r3, #0]
 801d574:	3b01      	subs	r3, #1
 801d576:	b2da      	uxtb	r2, r3
 801d578:	4b25      	ldr	r3, [pc, #148]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d57a:	701a      	strb	r2, [r3, #0]
				break;
 801d57c:	e009      	b.n	801d592 <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 801d57e:	2301      	movs	r3, #1
 801d580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d584:	4927      	ldr	r1, [pc, #156]	; (801d624 <esp8266_SetupIP+0x2c4>)
 801d586:	4834      	ldr	r0, [pc, #208]	; (801d658 <esp8266_SetupIP+0x2f8>)
 801d588:	f7ff fdea 	bl	801d160 <esp8266_TransmitCmd>
 801d58c:	4603      	mov	r3, r0
 801d58e:	2b01      	cmp	r3, #1
 801d590:	d1dc      	bne.n	801d54c <esp8266_SetupIP+0x1ec>
			}
		}
	}

	HAL_Delay(100);
 801d592:	2064      	movs	r0, #100	; 0x64
 801d594:	f7fa fa56 	bl	8017a44 <HAL_Delay>
	retry_count = 0;		// reset retry count
 801d598:	2300      	movs	r3, #0
 801d59a:	71fb      	strb	r3, [r7, #7]

	/* Try to get IP info */
	if (wifi_state == _ONLINE) {
 801d59c:	4b2b      	ldr	r3, [pc, #172]	; (801d64c <esp8266_SetupIP+0x2ec>)
 801d59e:	781b      	ldrb	r3, [r3, #0]
 801d5a0:	2b05      	cmp	r3, #5
 801d5a2:	d123      	bne.n	801d5ec <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 801d5a4:	e018      	b.n	801d5d8 <esp8266_SetupIP+0x278>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 801d5a6:	79fb      	ldrb	r3, [r7, #7]
 801d5a8:	3301      	adds	r3, #1
 801d5aa:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 801d5ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d5b0:	f7fa fa48 	bl	8017a44 <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 801d5b4:	79fb      	ldrb	r3, [r7, #7]
 801d5b6:	2b01      	cmp	r3, #1
 801d5b8:	d90e      	bls.n	801d5d8 <esp8266_SetupIP+0x278>
				printf("(DBG:) Get IP info failed\r\n");
 801d5ba:	4828      	ldr	r0, [pc, #160]	; (801d65c <esp8266_SetupIP+0x2fc>)
 801d5bc:	f001 f880 	bl	801e6c0 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 801d5c0:	4824      	ldr	r0, [pc, #144]	; (801d654 <esp8266_SetupIP+0x2f4>)
 801d5c2:	f000 ffe1 	bl	801e588 <iprintf>
				retry_count = 0;
 801d5c6:	2300      	movs	r3, #0
 801d5c8:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 801d5ca:	4b11      	ldr	r3, [pc, #68]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d5cc:	781b      	ldrb	r3, [r3, #0]
 801d5ce:	3b01      	subs	r3, #1
 801d5d0:	b2da      	uxtb	r2, r3
 801d5d2:	4b0f      	ldr	r3, [pc, #60]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d5d4:	701a      	strb	r2, [r3, #0]
				break;
 801d5d6:	e009      	b.n	801d5ec <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 801d5d8:	2301      	movs	r3, #1
 801d5da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d5de:	4911      	ldr	r1, [pc, #68]	; (801d624 <esp8266_SetupIP+0x2c4>)
 801d5e0:	481f      	ldr	r0, [pc, #124]	; (801d660 <esp8266_SetupIP+0x300>)
 801d5e2:	f7ff fdbd 	bl	801d160 <esp8266_TransmitCmd>
 801d5e6:	4603      	mov	r3, r0
 801d5e8:	2b01      	cmp	r3, #1
 801d5ea:	d1dc      	bne.n	801d5a6 <esp8266_SetupIP+0x246>
			}
		}
	}

	HAL_Delay(100);
 801d5ec:	2064      	movs	r0, #100	; 0x64
 801d5ee:	f7fa fa29 	bl	8017a44 <HAL_Delay>
	retry_count = 0;		// reset retry count
 801d5f2:	2300      	movs	r3, #0
 801d5f4:	71fb      	strb	r3, [r7, #7]

	/* Set DHCP */
	printf("(DBG:) Trying to set DHCP mode\r\n");
 801d5f6:	481b      	ldr	r0, [pc, #108]	; (801d664 <esp8266_SetupIP+0x304>)
 801d5f8:	f001 f862 	bl	801e6c0 <puts>
	wifi_config_step++;
 801d5fc:	4b04      	ldr	r3, [pc, #16]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d5fe:	781b      	ldrb	r3, [r3, #0]
 801d600:	3301      	adds	r3, #1
 801d602:	b2da      	uxtb	r2, r3
 801d604:	4b02      	ldr	r3, [pc, #8]	; (801d610 <esp8266_SetupIP+0x2b0>)
 801d606:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 801d608:	e045      	b.n	801d696 <esp8266_SetupIP+0x336>
 801d60a:	bf00      	nop
 801d60c:	0801f958 	.word	0x0801f958
 801d610:	200087b2 	.word	0x200087b2
 801d614:	0801f978 	.word	0x0801f978
 801d618:	2000008a 	.word	0x2000008a
 801d61c:	0801f9c4 	.word	0x0801f9c4
 801d620:	0801f9e4 	.word	0x0801f9e4
 801d624:	0801fa00 	.word	0x0801fa00
 801d628:	0801fa04 	.word	0x0801fa04
 801d62c:	0801fa0c 	.word	0x0801fa0c
 801d630:	0801fa2c 	.word	0x0801fa2c
 801d634:	0801fa4c 	.word	0x0801fa4c
 801d638:	0801fa58 	.word	0x0801fa58
 801d63c:	0801fa80 	.word	0x0801fa80
 801d640:	0801faa4 	.word	0x0801faa4
 801d644:	0801fab4 	.word	0x0801fab4
 801d648:	0801fad4 	.word	0x0801fad4
 801d64c:	20000089 	.word	0x20000089
 801d650:	0801faf4 	.word	0x0801faf4
 801d654:	0801fb10 	.word	0x0801fb10
 801d658:	0801fb48 	.word	0x0801fb48
 801d65c:	0801fb54 	.word	0x0801fb54
 801d660:	0801fb70 	.word	0x0801fb70
 801d664:	0801fb7c 	.word	0x0801fb7c
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801d668:	79fb      	ldrb	r3, [r7, #7]
 801d66a:	3301      	adds	r3, #1
 801d66c:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801d66e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d672:	f7fa f9e7 	bl	8017a44 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801d676:	79fb      	ldrb	r3, [r7, #7]
 801d678:	2b03      	cmp	r3, #3
 801d67a:	d90c      	bls.n	801d696 <esp8266_SetupIP+0x336>
			printf("(DBG:) Set DHCP model failed\r\n");
 801d67c:	4840      	ldr	r0, [pc, #256]	; (801d780 <esp8266_SetupIP+0x420>)
 801d67e:	f001 f81f 	bl	801e6c0 <puts>
			retry_count = 0;
 801d682:	2300      	movs	r3, #0
 801d684:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801d686:	4b3f      	ldr	r3, [pc, #252]	; (801d784 <esp8266_SetupIP+0x424>)
 801d688:	781b      	ldrb	r3, [r3, #0]
 801d68a:	3b01      	subs	r3, #1
 801d68c:	b2da      	uxtb	r2, r3
 801d68e:	4b3d      	ldr	r3, [pc, #244]	; (801d784 <esp8266_SetupIP+0x424>)
 801d690:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801d692:	2300      	movs	r3, #0
 801d694:	e06f      	b.n	801d776 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 801d696:	2301      	movs	r3, #1
 801d698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d69c:	493a      	ldr	r1, [pc, #232]	; (801d788 <esp8266_SetupIP+0x428>)
 801d69e:	483b      	ldr	r0, [pc, #236]	; (801d78c <esp8266_SetupIP+0x42c>)
 801d6a0:	f7ff fd5e 	bl	801d160 <esp8266_TransmitCmd>
 801d6a4:	4603      	mov	r3, r0
 801d6a6:	2b01      	cmp	r3, #1
 801d6a8:	d1de      	bne.n	801d668 <esp8266_SetupIP+0x308>
		}
	}

	HAL_Delay(100);
 801d6aa:	2064      	movs	r0, #100	; 0x64
 801d6ac:	f7fa f9ca 	bl	8017a44 <HAL_Delay>
	retry_count = 0;
 801d6b0:	2300      	movs	r3, #0
 801d6b2:	71fb      	strb	r3, [r7, #7]

	/* Set single connection */
	printf("(DBG:) Trying to set single connection\r\n");
 801d6b4:	4836      	ldr	r0, [pc, #216]	; (801d790 <esp8266_SetupIP+0x430>)
 801d6b6:	f001 f803 	bl	801e6c0 <puts>
	wifi_config_step++;
 801d6ba:	4b32      	ldr	r3, [pc, #200]	; (801d784 <esp8266_SetupIP+0x424>)
 801d6bc:	781b      	ldrb	r3, [r3, #0]
 801d6be:	3301      	adds	r3, #1
 801d6c0:	b2da      	uxtb	r2, r3
 801d6c2:	4b30      	ldr	r3, [pc, #192]	; (801d784 <esp8266_SetupIP+0x424>)
 801d6c4:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 801d6c6:	e016      	b.n	801d6f6 <esp8266_SetupIP+0x396>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801d6c8:	79fb      	ldrb	r3, [r7, #7]
 801d6ca:	3301      	adds	r3, #1
 801d6cc:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801d6ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d6d2:	f7fa f9b7 	bl	8017a44 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801d6d6:	79fb      	ldrb	r3, [r7, #7]
 801d6d8:	2b03      	cmp	r3, #3
 801d6da:	d90c      	bls.n	801d6f6 <esp8266_SetupIP+0x396>
			printf("(DBG:) Set single connection model failed\r\n");
 801d6dc:	482d      	ldr	r0, [pc, #180]	; (801d794 <esp8266_SetupIP+0x434>)
 801d6de:	f000 ffef 	bl	801e6c0 <puts>
			retry_count = 0;
 801d6e2:	2300      	movs	r3, #0
 801d6e4:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801d6e6:	4b27      	ldr	r3, [pc, #156]	; (801d784 <esp8266_SetupIP+0x424>)
 801d6e8:	781b      	ldrb	r3, [r3, #0]
 801d6ea:	3b01      	subs	r3, #1
 801d6ec:	b2da      	uxtb	r2, r3
 801d6ee:	4b25      	ldr	r3, [pc, #148]	; (801d784 <esp8266_SetupIP+0x424>)
 801d6f0:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801d6f2:	2300      	movs	r3, #0
 801d6f4:	e03f      	b.n	801d776 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 801d6f6:	2301      	movs	r3, #1
 801d6f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d6fc:	4922      	ldr	r1, [pc, #136]	; (801d788 <esp8266_SetupIP+0x428>)
 801d6fe:	4826      	ldr	r0, [pc, #152]	; (801d798 <esp8266_SetupIP+0x438>)
 801d700:	f7ff fd2e 	bl	801d160 <esp8266_TransmitCmd>
 801d704:	4603      	mov	r3, r0
 801d706:	2b01      	cmp	r3, #1
 801d708:	d1de      	bne.n	801d6c8 <esp8266_SetupIP+0x368>
		}
	}

	HAL_Delay(100);
 801d70a:	2064      	movs	r0, #100	; 0x64
 801d70c:	f7fa f99a 	bl	8017a44 <HAL_Delay>
	retry_count = 0;
 801d710:	2300      	movs	r3, #0
 801d712:	71fb      	strb	r3, [r7, #7]

	/* Set transparent transmission */
	printf("(DBG:) Trying to set transparent transmission mode\r\n");
 801d714:	4821      	ldr	r0, [pc, #132]	; (801d79c <esp8266_SetupIP+0x43c>)
 801d716:	f000 ffd3 	bl	801e6c0 <puts>
	wifi_config_step++;
 801d71a:	4b1a      	ldr	r3, [pc, #104]	; (801d784 <esp8266_SetupIP+0x424>)
 801d71c:	781b      	ldrb	r3, [r3, #0]
 801d71e:	3301      	adds	r3, #1
 801d720:	b2da      	uxtb	r2, r3
 801d722:	4b18      	ldr	r3, [pc, #96]	; (801d784 <esp8266_SetupIP+0x424>)
 801d724:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 801d726:	e016      	b.n	801d756 <esp8266_SetupIP+0x3f6>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801d728:	79fb      	ldrb	r3, [r7, #7]
 801d72a:	3301      	adds	r3, #1
 801d72c:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801d72e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d732:	f7fa f987 	bl	8017a44 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801d736:	79fb      	ldrb	r3, [r7, #7]
 801d738:	2b03      	cmp	r3, #3
 801d73a:	d90c      	bls.n	801d756 <esp8266_SetupIP+0x3f6>
			printf("(DBG:) Set transparent transmission mode failed\r\n");
 801d73c:	4818      	ldr	r0, [pc, #96]	; (801d7a0 <esp8266_SetupIP+0x440>)
 801d73e:	f000 ffbf 	bl	801e6c0 <puts>
			retry_count = 0;
 801d742:	2300      	movs	r3, #0
 801d744:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801d746:	4b0f      	ldr	r3, [pc, #60]	; (801d784 <esp8266_SetupIP+0x424>)
 801d748:	781b      	ldrb	r3, [r3, #0]
 801d74a:	3b01      	subs	r3, #1
 801d74c:	b2da      	uxtb	r2, r3
 801d74e:	4b0d      	ldr	r3, [pc, #52]	; (801d784 <esp8266_SetupIP+0x424>)
 801d750:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801d752:	2300      	movs	r3, #0
 801d754:	e00f      	b.n	801d776 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 801d756:	2301      	movs	r3, #1
 801d758:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d75c:	490a      	ldr	r1, [pc, #40]	; (801d788 <esp8266_SetupIP+0x428>)
 801d75e:	4811      	ldr	r0, [pc, #68]	; (801d7a4 <esp8266_SetupIP+0x444>)
 801d760:	f7ff fcfe 	bl	801d160 <esp8266_TransmitCmd>
 801d764:	4603      	mov	r3, r0
 801d766:	2b01      	cmp	r3, #1
 801d768:	d1de      	bne.n	801d728 <esp8266_SetupIP+0x3c8>
		}
	}

	HAL_Delay(100);
 801d76a:	2064      	movs	r0, #100	; 0x64
 801d76c:	f7fa f96a 	bl	8017a44 <HAL_Delay>
	retry_count = 0;
 801d770:	2300      	movs	r3, #0
 801d772:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED;
 801d774:	2301      	movs	r3, #1

}
 801d776:	4618      	mov	r0, r3
 801d778:	3708      	adds	r7, #8
 801d77a:	46bd      	mov	sp, r7
 801d77c:	bd80      	pop	{r7, pc}
 801d77e:	bf00      	nop
 801d780:	0801fb9c 	.word	0x0801fb9c
 801d784:	200087b2 	.word	0x200087b2
 801d788:	0801fa00 	.word	0x0801fa00
 801d78c:	0801fbbc 	.word	0x0801fbbc
 801d790:	0801fbcc 	.word	0x0801fbcc
 801d794:	0801fbf4 	.word	0x0801fbf4
 801d798:	0801fc20 	.word	0x0801fc20
 801d79c:	0801fc2c 	.word	0x0801fc2c
 801d7a0:	0801fc60 	.word	0x0801fc60
 801d7a4:	0801fc94 	.word	0x0801fc94

0801d7a8 <esp8266_ConfigAccessBroker>:

static MQTT_StateTypeDef esp8266_ConfigAccessBroker()
{
 801d7a8:	b580      	push	{r7, lr}
 801d7aa:	b086      	sub	sp, #24
 801d7ac:	af02      	add	r7, sp, #8
	int retry_count = 0;
 801d7ae:	2300      	movs	r3, #0
 801d7b0:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(MQTT_CLIENTID) + strlen(MQTT_USERNAME) + strlen(MQTT_PASSWORD) + 40;
 801d7b2:	232d      	movs	r3, #45	; 0x2d
 801d7b4:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801d7b6:	897b      	ldrh	r3, [r7, #10]
 801d7b8:	4618      	mov	r0, r3
 801d7ba:	f000 fdc5 	bl	801e348 <malloc>
 801d7be:	4603      	mov	r3, r0
 801d7c0:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 801d7c2:	897b      	ldrh	r3, [r7, #10]
 801d7c4:	461a      	mov	r2, r3
 801d7c6:	2100      	movs	r1, #0
 801d7c8:	6878      	ldr	r0, [r7, #4]
 801d7ca:	f000 fdf5 	bl	801e3b8 <memset>
	sprintf((char*) cmd, "AT+MQTTUSERCFG=0,1,\"%s\",\"%s\",\"%s\",0,0,\"\"", MQTT_CLIENTID, MQTT_USERNAME, MQTT_PASSWORD);
 801d7ce:	4b19      	ldr	r3, [pc, #100]	; (801d834 <esp8266_ConfigAccessBroker+0x8c>)
 801d7d0:	9300      	str	r3, [sp, #0]
 801d7d2:	4b18      	ldr	r3, [pc, #96]	; (801d834 <esp8266_ConfigAccessBroker+0x8c>)
 801d7d4:	4a18      	ldr	r2, [pc, #96]	; (801d838 <esp8266_ConfigAccessBroker+0x90>)
 801d7d6:	4919      	ldr	r1, [pc, #100]	; (801d83c <esp8266_ConfigAccessBroker+0x94>)
 801d7d8:	6878      	ldr	r0, [r7, #4]
 801d7da:	f000 ff89 	bl	801e6f0 <siprintf>

	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801d7de:	e011      	b.n	801d804 <esp8266_ConfigAccessBroker+0x5c>
	{
		retry_count++;
 801d7e0:	68fb      	ldr	r3, [r7, #12]
 801d7e2:	3301      	adds	r3, #1
 801d7e4:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 801d7e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d7ea:	f7fa f92b 	bl	8017a44 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801d7ee:	68fb      	ldr	r3, [r7, #12]
 801d7f0:	2b03      	cmp	r3, #3
 801d7f2:	dd07      	ble.n	801d804 <esp8266_ConfigAccessBroker+0x5c>
			printf("(DBG:) esp8266_ConfigAccessBroker() failed\r\n");
 801d7f4:	4812      	ldr	r0, [pc, #72]	; (801d840 <esp8266_ConfigAccessBroker+0x98>)
 801d7f6:	f000 ff63 	bl	801e6c0 <puts>
			retry_count = 0;
 801d7fa:	2300      	movs	r3, #0
 801d7fc:	60fb      	str	r3, [r7, #12]
			mqtt_state = _CONFIG_ERROR_MQTT;
 801d7fe:	4b11      	ldr	r3, [pc, #68]	; (801d844 <esp8266_ConfigAccessBroker+0x9c>)
 801d800:	2204      	movs	r2, #4
 801d802:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801d804:	2301      	movs	r3, #1
 801d806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d80a:	490f      	ldr	r1, [pc, #60]	; (801d848 <esp8266_ConfigAccessBroker+0xa0>)
 801d80c:	6878      	ldr	r0, [r7, #4]
 801d80e:	f7ff fca7 	bl	801d160 <esp8266_TransmitCmd>
 801d812:	4603      	mov	r3, r0
 801d814:	2b01      	cmp	r3, #1
 801d816:	d1e3      	bne.n	801d7e0 <esp8266_ConfigAccessBroker+0x38>
		}
	}

	mqtt_state = _CONFIG_OK_MQTT;
 801d818:	4b0a      	ldr	r3, [pc, #40]	; (801d844 <esp8266_ConfigAccessBroker+0x9c>)
 801d81a:	2205      	movs	r2, #5
 801d81c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 801d81e:	2064      	movs	r0, #100	; 0x64
 801d820:	f7fa f910 	bl	8017a44 <HAL_Delay>
	retry_count = 0;
 801d824:	2300      	movs	r3, #0
 801d826:	60fb      	str	r3, [r7, #12]

	return mqtt_state;
 801d828:	4b06      	ldr	r3, [pc, #24]	; (801d844 <esp8266_ConfigAccessBroker+0x9c>)
 801d82a:	781b      	ldrb	r3, [r3, #0]
}
 801d82c:	4618      	mov	r0, r3
 801d82e:	3710      	adds	r7, #16
 801d830:	46bd      	mov	sp, r7
 801d832:	bd80      	pop	{r7, pc}
 801d834:	0801fd20 	.word	0x0801fd20
 801d838:	0801fd24 	.word	0x0801fd24
 801d83c:	0801fd2c 	.word	0x0801fd2c
 801d840:	0801fd58 	.word	0x0801fd58
 801d844:	2000008b 	.word	0x2000008b
 801d848:	0801fa00 	.word	0x0801fa00

0801d84c <esp8266_ConnectBroker>:

	return mqtt_state;
}

static MQTT_StateTypeDef esp8266_ConnectBroker()
{
 801d84c:	b580      	push	{r7, lr}
 801d84e:	b084      	sub	sp, #16
 801d850:	af00      	add	r7, sp, #0
	int retry_count = 0;
 801d852:	2300      	movs	r3, #0
 801d854:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(IpServer) + strlen(ServerPort) + 25;
 801d856:	232e      	movs	r3, #46	; 0x2e
 801d858:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801d85a:	897b      	ldrh	r3, [r7, #10]
 801d85c:	4618      	mov	r0, r3
 801d85e:	f000 fd73 	bl	801e348 <malloc>
 801d862:	4603      	mov	r3, r0
 801d864:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 801d866:	897b      	ldrh	r3, [r7, #10]
 801d868:	461a      	mov	r2, r3
 801d86a:	2100      	movs	r1, #0
 801d86c:	6878      	ldr	r0, [r7, #4]
 801d86e:	f000 fda3 	bl	801e3b8 <memset>
	sprintf((char*) cmd, "AT+MQTTCONN=0,\"%s\",%s,0", IpServer, ServerPort);
 801d872:	4b16      	ldr	r3, [pc, #88]	; (801d8cc <esp8266_ConnectBroker+0x80>)
 801d874:	4a16      	ldr	r2, [pc, #88]	; (801d8d0 <esp8266_ConnectBroker+0x84>)
 801d876:	4917      	ldr	r1, [pc, #92]	; (801d8d4 <esp8266_ConnectBroker+0x88>)
 801d878:	6878      	ldr	r0, [r7, #4]
 801d87a:	f000 ff39 	bl	801e6f0 <siprintf>

	//if (esp8266_TransmitCmd(cmd, (uint8_t*)"\r\nready\r\n", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801d87e:	e011      	b.n	801d8a4 <esp8266_ConnectBroker+0x58>
	{
		retry_count++;
 801d880:	68fb      	ldr	r3, [r7, #12]
 801d882:	3301      	adds	r3, #1
 801d884:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 801d886:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d88a:	f7fa f8db 	bl	8017a44 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801d88e:	68fb      	ldr	r3, [r7, #12]
 801d890:	2b03      	cmp	r3, #3
 801d892:	dd07      	ble.n	801d8a4 <esp8266_ConnectBroker+0x58>
			printf("(DBG:) esp8266_ConnectBroker() failed\r\n");
 801d894:	4810      	ldr	r0, [pc, #64]	; (801d8d8 <esp8266_ConnectBroker+0x8c>)
 801d896:	f000 ff13 	bl	801e6c0 <puts>
			retry_count = 0;
 801d89a:	2300      	movs	r3, #0
 801d89c:	60fb      	str	r3, [r7, #12]
			mqtt_state = _UNCONNECTED_MQTT;
 801d89e:	4b0f      	ldr	r3, [pc, #60]	; (801d8dc <esp8266_ConnectBroker+0x90>)
 801d8a0:	2206      	movs	r2, #6
 801d8a2:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801d8a4:	2301      	movs	r3, #1
 801d8a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d8aa:	490d      	ldr	r1, [pc, #52]	; (801d8e0 <esp8266_ConnectBroker+0x94>)
 801d8ac:	6878      	ldr	r0, [r7, #4]
 801d8ae:	f7ff fc57 	bl	801d160 <esp8266_TransmitCmd>
 801d8b2:	4603      	mov	r3, r0
 801d8b4:	2b01      	cmp	r3, #1
 801d8b6:	d1e3      	bne.n	801d880 <esp8266_ConnectBroker+0x34>
		}
	}

	mqtt_state = _CONNECTED_MQTT;
 801d8b8:	4b08      	ldr	r3, [pc, #32]	; (801d8dc <esp8266_ConnectBroker+0x90>)
 801d8ba:	2207      	movs	r2, #7
 801d8bc:	701a      	strb	r2, [r3, #0]

	return mqtt_state;
 801d8be:	4b07      	ldr	r3, [pc, #28]	; (801d8dc <esp8266_ConnectBroker+0x90>)
 801d8c0:	781b      	ldrb	r3, [r3, #0]
}
 801d8c2:	4618      	mov	r0, r3
 801d8c4:	3710      	adds	r7, #16
 801d8c6:	46bd      	mov	sp, r7
 801d8c8:	bd80      	pop	{r7, pc}
 801d8ca:	bf00      	nop
 801d8cc:	0801f918 	.word	0x0801f918
 801d8d0:	0801f920 	.word	0x0801f920
 801d8d4:	0801fdac 	.word	0x0801fdac
 801d8d8:	0801fdc4 	.word	0x0801fdc4
 801d8dc:	2000008b 	.word	0x2000008b
 801d8e0:	0801fa00 	.word	0x0801fa00

0801d8e4 <esp8266_SetupConnect_BrokerMQTT>:

MQTT_StateTypeDef esp8266_SetupConnect_BrokerMQTT()
{
 801d8e4:	b580      	push	{r7, lr}
 801d8e6:	b082      	sub	sp, #8
 801d8e8:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 801d8ea:	2300      	movs	r3, #0
 801d8ec:	71fb      	strb	r3, [r7, #7]

	/* MQTT broker configuration esp8266 */
	printf("(DBG:) Trying to configure MQTT access broker esp8266\r\n");
 801d8ee:	482d      	ldr	r0, [pc, #180]	; (801d9a4 <esp8266_SetupConnect_BrokerMQTT+0xc0>)
 801d8f0:	f000 fee6 	bl	801e6c0 <puts>
	mqtt_config_step++;
 801d8f4:	4b2c      	ldr	r3, [pc, #176]	; (801d9a8 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801d8f6:	781b      	ldrb	r3, [r3, #0]
 801d8f8:	3301      	adds	r3, #1
 801d8fa:	b2da      	uxtb	r2, r3
 801d8fc:	4b2a      	ldr	r3, [pc, #168]	; (801d9a8 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801d8fe:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 801d900:	e016      	b.n	801d930 <esp8266_SetupConnect_BrokerMQTT+0x4c>
		retry_count++;
 801d902:	79fb      	ldrb	r3, [r7, #7]
 801d904:	3301      	adds	r3, #1
 801d906:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 801d908:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801d90c:	f7fa f89a 	bl	8017a44 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801d910:	79fb      	ldrb	r3, [r7, #7]
 801d912:	2b03      	cmp	r3, #3
 801d914:	d90c      	bls.n	801d930 <esp8266_SetupConnect_BrokerMQTT+0x4c>
			printf("(DBG:) Configure MQTT access broker failed\r\n");
 801d916:	4825      	ldr	r0, [pc, #148]	; (801d9ac <esp8266_SetupConnect_BrokerMQTT+0xc8>)
 801d918:	f000 fed2 	bl	801e6c0 <puts>
			retry_count = 0;
 801d91c:	2300      	movs	r3, #0
 801d91e:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 801d920:	4b21      	ldr	r3, [pc, #132]	; (801d9a8 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801d922:	781b      	ldrb	r3, [r3, #0]
 801d924:	3b01      	subs	r3, #1
 801d926:	b2da      	uxtb	r2, r3
 801d928:	4b1f      	ldr	r3, [pc, #124]	; (801d9a8 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801d92a:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 801d92c:	2300      	movs	r3, #0
 801d92e:	e035      	b.n	801d99c <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 801d930:	f7ff ff3a 	bl	801d7a8 <esp8266_ConfigAccessBroker>
 801d934:	4603      	mov	r3, r0
 801d936:	2b05      	cmp	r3, #5
 801d938:	d1e3      	bne.n	801d902 <esp8266_SetupConnect_BrokerMQTT+0x1e>
		}
	}

	HAL_Delay(100);
 801d93a:	2064      	movs	r0, #100	; 0x64
 801d93c:	f7fa f882 	bl	8017a44 <HAL_Delay>
	retry_count = 0;		// reset retry count
 801d940:	2300      	movs	r3, #0
 801d942:	71fb      	strb	r3, [r7, #7]

	/* MQTT broker connection esp8266 */
	printf("(DBG:) Trying to connect to MQTT broker esp8266\r\n");
 801d944:	481a      	ldr	r0, [pc, #104]	; (801d9b0 <esp8266_SetupConnect_BrokerMQTT+0xcc>)
 801d946:	f000 febb 	bl	801e6c0 <puts>
	mqtt_config_step++;
 801d94a:	4b17      	ldr	r3, [pc, #92]	; (801d9a8 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801d94c:	781b      	ldrb	r3, [r3, #0]
 801d94e:	3301      	adds	r3, #1
 801d950:	b2da      	uxtb	r2, r3
 801d952:	4b15      	ldr	r3, [pc, #84]	; (801d9a8 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801d954:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 801d956:	e016      	b.n	801d986 <esp8266_SetupConnect_BrokerMQTT+0xa2>
		retry_count++;
 801d958:	79fb      	ldrb	r3, [r7, #7]
 801d95a:	3301      	adds	r3, #1
 801d95c:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 801d95e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801d962:	f7fa f86f 	bl	8017a44 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801d966:	79fb      	ldrb	r3, [r7, #7]
 801d968:	2b03      	cmp	r3, #3
 801d96a:	d90c      	bls.n	801d986 <esp8266_SetupConnect_BrokerMQTT+0xa2>
			printf("(DBG:) connection MQTT broker failed\r\n");
 801d96c:	4811      	ldr	r0, [pc, #68]	; (801d9b4 <esp8266_SetupConnect_BrokerMQTT+0xd0>)
 801d96e:	f000 fea7 	bl	801e6c0 <puts>
			retry_count = 0;
 801d972:	2300      	movs	r3, #0
 801d974:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 801d976:	4b0c      	ldr	r3, [pc, #48]	; (801d9a8 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801d978:	781b      	ldrb	r3, [r3, #0]
 801d97a:	3b01      	subs	r3, #1
 801d97c:	b2da      	uxtb	r2, r3
 801d97e:	4b0a      	ldr	r3, [pc, #40]	; (801d9a8 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801d980:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 801d982:	2300      	movs	r3, #0
 801d984:	e00a      	b.n	801d99c <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 801d986:	f7ff ff61 	bl	801d84c <esp8266_ConnectBroker>
 801d98a:	4603      	mov	r3, r0
 801d98c:	2b06      	cmp	r3, #6
 801d98e:	d9e3      	bls.n	801d958 <esp8266_SetupConnect_BrokerMQTT+0x74>
		}
	}

	HAL_Delay(100);
 801d990:	2064      	movs	r0, #100	; 0x64
 801d992:	f7fa f857 	bl	8017a44 <HAL_Delay>
	retry_count = 0;		// reset retry count
 801d996:	2300      	movs	r3, #0
 801d998:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED_MQTT;
 801d99a:	2301      	movs	r3, #1
}
 801d99c:	4618      	mov	r0, r3
 801d99e:	3708      	adds	r7, #8
 801d9a0:	46bd      	mov	sp, r7
 801d9a2:	bd80      	pop	{r7, pc}
 801d9a4:	0801fdec 	.word	0x0801fdec
 801d9a8:	200087b3 	.word	0x200087b3
 801d9ac:	0801fe24 	.word	0x0801fe24
 801d9b0:	0801fe50 	.word	0x0801fe50
 801d9b4:	0801fe84 	.word	0x0801fe84

0801d9b8 <esp8266_Subscribe_Temp_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Subscribe_Temp_BrokerMQTT()
{
 801d9b8:	b580      	push	{r7, lr}
 801d9ba:	b084      	sub	sp, #16
 801d9bc:	af00      	add	r7, sp, #0
	int retry_count = 0;
 801d9be:	2300      	movs	r3, #0
 801d9c0:	60fb      	str	r3, [r7, #12]
	if(mqtt_state < _CONNECTED_MQTT)
 801d9c2:	4b22      	ldr	r3, [pc, #136]	; (801da4c <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 801d9c4:	781b      	ldrb	r3, [r3, #0]
 801d9c6:	2b06      	cmp	r3, #6
 801d9c8:	d801      	bhi.n	801d9ce <esp8266_Subscribe_Temp_BrokerMQTT+0x16>
		return _FAILED_MQTT;
 801d9ca:	2300      	movs	r3, #0
 801d9cc:	e039      	b.n	801da42 <esp8266_Subscribe_Temp_BrokerMQTT+0x8a>

	uint16_t cmd_len = 40;
 801d9ce:	2328      	movs	r3, #40	; 0x28
 801d9d0:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801d9d2:	897b      	ldrh	r3, [r7, #10]
 801d9d4:	4618      	mov	r0, r3
 801d9d6:	f000 fcb7 	bl	801e348 <malloc>
 801d9da:	4603      	mov	r3, r0
 801d9dc:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 801d9de:	897b      	ldrh	r3, [r7, #10]
 801d9e0:	461a      	mov	r2, r3
 801d9e2:	2100      	movs	r1, #0
 801d9e4:	6878      	ldr	r0, [r7, #4]
 801d9e6:	f000 fce7 	bl	801e3b8 <memset>
	sprintf((char*) cmd, "AT+MQTTSUB=0,\"%s/getTemp\",1", MQTT_CLIENTID);
 801d9ea:	4a19      	ldr	r2, [pc, #100]	; (801da50 <esp8266_Subscribe_Temp_BrokerMQTT+0x98>)
 801d9ec:	4919      	ldr	r1, [pc, #100]	; (801da54 <esp8266_Subscribe_Temp_BrokerMQTT+0x9c>)
 801d9ee:	6878      	ldr	r0, [r7, #4]
 801d9f0:	f000 fe7e 	bl	801e6f0 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801d9f4:	e011      	b.n	801da1a <esp8266_Subscribe_Temp_BrokerMQTT+0x62>
	{
		retry_count++;
 801d9f6:	68fb      	ldr	r3, [r7, #12]
 801d9f8:	3301      	adds	r3, #1
 801d9fa:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 801d9fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801da00:	f7fa f820 	bl	8017a44 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801da04:	68fb      	ldr	r3, [r7, #12]
 801da06:	2b03      	cmp	r3, #3
 801da08:	dd07      	ble.n	801da1a <esp8266_Subscribe_Temp_BrokerMQTT+0x62>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 801da0a:	4813      	ldr	r0, [pc, #76]	; (801da58 <esp8266_Subscribe_Temp_BrokerMQTT+0xa0>)
 801da0c:	f000 fe58 	bl	801e6c0 <puts>
			retry_count = 0;
 801da10:	2300      	movs	r3, #0
 801da12:	60fb      	str	r3, [r7, #12]
			mqtt_state = _FAILED_MQTT;
 801da14:	4b0d      	ldr	r3, [pc, #52]	; (801da4c <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 801da16:	2200      	movs	r2, #0
 801da18:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801da1a:	2301      	movs	r3, #1
 801da1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801da20:	490e      	ldr	r1, [pc, #56]	; (801da5c <esp8266_Subscribe_Temp_BrokerMQTT+0xa4>)
 801da22:	6878      	ldr	r0, [r7, #4]
 801da24:	f7ff fb9c 	bl	801d160 <esp8266_TransmitCmd>
 801da28:	4603      	mov	r3, r0
 801da2a:	2b01      	cmp	r3, #1
 801da2c:	d1e3      	bne.n	801d9f6 <esp8266_Subscribe_Temp_BrokerMQTT+0x3e>
		}
	}
	HAL_Delay(100);
 801da2e:	2064      	movs	r0, #100	; 0x64
 801da30:	f7fa f808 	bl	8017a44 <HAL_Delay>
	retry_count = 0;
 801da34:	2300      	movs	r3, #0
 801da36:	60fb      	str	r3, [r7, #12]
	mqtt_state = _SUBSCRIBED_TEMP_MQTT;
 801da38:	4b04      	ldr	r3, [pc, #16]	; (801da4c <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 801da3a:	2208      	movs	r2, #8
 801da3c:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 801da3e:	4b03      	ldr	r3, [pc, #12]	; (801da4c <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 801da40:	781b      	ldrb	r3, [r3, #0]
}
 801da42:	4618      	mov	r0, r3
 801da44:	3710      	adds	r7, #16
 801da46:	46bd      	mov	sp, r7
 801da48:	bd80      	pop	{r7, pc}
 801da4a:	bf00      	nop
 801da4c:	2000008b 	.word	0x2000008b
 801da50:	0801fd24 	.word	0x0801fd24
 801da54:	0801feac 	.word	0x0801feac
 801da58:	0801fec8 	.word	0x0801fec8
 801da5c:	0801fa00 	.word	0x0801fa00

0801da60 <esp8266_Subscribe_ToF_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Subscribe_ToF_BrokerMQTT()
{
 801da60:	b580      	push	{r7, lr}
 801da62:	b084      	sub	sp, #16
 801da64:	af00      	add	r7, sp, #0
	int retry_count = 0;
 801da66:	2300      	movs	r3, #0
 801da68:	60fb      	str	r3, [r7, #12]
	if(mqtt_state < _CONNECTED_MQTT)
 801da6a:	4b22      	ldr	r3, [pc, #136]	; (801daf4 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 801da6c:	781b      	ldrb	r3, [r3, #0]
 801da6e:	2b06      	cmp	r3, #6
 801da70:	d801      	bhi.n	801da76 <esp8266_Subscribe_ToF_BrokerMQTT+0x16>
		return _FAILED_MQTT;
 801da72:	2300      	movs	r3, #0
 801da74:	e039      	b.n	801daea <esp8266_Subscribe_ToF_BrokerMQTT+0x8a>

	uint16_t cmd_len = 40;
 801da76:	2328      	movs	r3, #40	; 0x28
 801da78:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801da7a:	897b      	ldrh	r3, [r7, #10]
 801da7c:	4618      	mov	r0, r3
 801da7e:	f000 fc63 	bl	801e348 <malloc>
 801da82:	4603      	mov	r3, r0
 801da84:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 801da86:	897b      	ldrh	r3, [r7, #10]
 801da88:	461a      	mov	r2, r3
 801da8a:	2100      	movs	r1, #0
 801da8c:	6878      	ldr	r0, [r7, #4]
 801da8e:	f000 fc93 	bl	801e3b8 <memset>
	sprintf((char*) cmd, "AT+MQTTSUB=0,\"%s/getTof\",1", MQTT_CLIENTID);
 801da92:	4a19      	ldr	r2, [pc, #100]	; (801daf8 <esp8266_Subscribe_ToF_BrokerMQTT+0x98>)
 801da94:	4919      	ldr	r1, [pc, #100]	; (801dafc <esp8266_Subscribe_ToF_BrokerMQTT+0x9c>)
 801da96:	6878      	ldr	r0, [r7, #4]
 801da98:	f000 fe2a 	bl	801e6f0 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801da9c:	e011      	b.n	801dac2 <esp8266_Subscribe_ToF_BrokerMQTT+0x62>
	{
		retry_count++;
 801da9e:	68fb      	ldr	r3, [r7, #12]
 801daa0:	3301      	adds	r3, #1
 801daa2:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 801daa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801daa8:	f7f9 ffcc 	bl	8017a44 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801daac:	68fb      	ldr	r3, [r7, #12]
 801daae:	2b03      	cmp	r3, #3
 801dab0:	dd07      	ble.n	801dac2 <esp8266_Subscribe_ToF_BrokerMQTT+0x62>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 801dab2:	4813      	ldr	r0, [pc, #76]	; (801db00 <esp8266_Subscribe_ToF_BrokerMQTT+0xa0>)
 801dab4:	f000 fe04 	bl	801e6c0 <puts>
			retry_count = 0;
 801dab8:	2300      	movs	r3, #0
 801daba:	60fb      	str	r3, [r7, #12]
			mqtt_state = _FAILED_MQTT;
 801dabc:	4b0d      	ldr	r3, [pc, #52]	; (801daf4 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 801dabe:	2200      	movs	r2, #0
 801dac0:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801dac2:	2301      	movs	r3, #1
 801dac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dac8:	490e      	ldr	r1, [pc, #56]	; (801db04 <esp8266_Subscribe_ToF_BrokerMQTT+0xa4>)
 801daca:	6878      	ldr	r0, [r7, #4]
 801dacc:	f7ff fb48 	bl	801d160 <esp8266_TransmitCmd>
 801dad0:	4603      	mov	r3, r0
 801dad2:	2b01      	cmp	r3, #1
 801dad4:	d1e3      	bne.n	801da9e <esp8266_Subscribe_ToF_BrokerMQTT+0x3e>
		}
	}
	HAL_Delay(100);
 801dad6:	2064      	movs	r0, #100	; 0x64
 801dad8:	f7f9 ffb4 	bl	8017a44 <HAL_Delay>
	retry_count = 0;
 801dadc:	2300      	movs	r3, #0
 801dade:	60fb      	str	r3, [r7, #12]
	mqtt_state = _SUBSCRIBED_TOF_MQTT;
 801dae0:	4b04      	ldr	r3, [pc, #16]	; (801daf4 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 801dae2:	2209      	movs	r2, #9
 801dae4:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 801dae6:	4b03      	ldr	r3, [pc, #12]	; (801daf4 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 801dae8:	781b      	ldrb	r3, [r3, #0]
}
 801daea:	4618      	mov	r0, r3
 801daec:	3710      	adds	r7, #16
 801daee:	46bd      	mov	sp, r7
 801daf0:	bd80      	pop	{r7, pc}
 801daf2:	bf00      	nop
 801daf4:	2000008b 	.word	0x2000008b
 801daf8:	0801fd24 	.word	0x0801fd24
 801dafc:	0801fefc 	.word	0x0801fefc
 801db00:	0801fec8 	.word	0x0801fec8
 801db04:	0801fa00 	.word	0x0801fa00

0801db08 <esp8266_Publish_ToF_BrokerMQTT>:
	retry_count = 0;
	mqtt_state = _PUBLISH_TEMP_MQTT;
	return mqtt_state;
}
MQTT_StateTypeDef esp8266_Publish_ToF_BrokerMQTT(uint8_t *data, uint16_t size)
{
 801db08:	b580      	push	{r7, lr}
 801db0a:	b086      	sub	sp, #24
 801db0c:	af00      	add	r7, sp, #0
 801db0e:	6078      	str	r0, [r7, #4]
 801db10:	460b      	mov	r3, r1
 801db12:	807b      	strh	r3, [r7, #2]
	int retry_count = 0;
 801db14:	2300      	movs	r3, #0
 801db16:	617b      	str	r3, [r7, #20]
	if(mqtt_state < _CONNECTED_MQTT  || data == NULL)
 801db18:	4b24      	ldr	r3, [pc, #144]	; (801dbac <esp8266_Publish_ToF_BrokerMQTT+0xa4>)
 801db1a:	781b      	ldrb	r3, [r3, #0]
 801db1c:	2b06      	cmp	r3, #6
 801db1e:	d902      	bls.n	801db26 <esp8266_Publish_ToF_BrokerMQTT+0x1e>
 801db20:	687b      	ldr	r3, [r7, #4]
 801db22:	2b00      	cmp	r3, #0
 801db24:	d101      	bne.n	801db2a <esp8266_Publish_ToF_BrokerMQTT+0x22>
		return _FAILED_MQTT;
 801db26:	2300      	movs	r3, #0
 801db28:	e03b      	b.n	801dba2 <esp8266_Publish_ToF_BrokerMQTT+0x9a>

	uint16_t cmd_len = size + 40;
 801db2a:	887b      	ldrh	r3, [r7, #2]
 801db2c:	3328      	adds	r3, #40	; 0x28
 801db2e:	827b      	strh	r3, [r7, #18]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801db30:	8a7b      	ldrh	r3, [r7, #18]
 801db32:	4618      	mov	r0, r3
 801db34:	f000 fc08 	bl	801e348 <malloc>
 801db38:	4603      	mov	r3, r0
 801db3a:	60fb      	str	r3, [r7, #12]
	memset(cmd, 0, cmd_len);
 801db3c:	8a7b      	ldrh	r3, [r7, #18]
 801db3e:	461a      	mov	r2, r3
 801db40:	2100      	movs	r1, #0
 801db42:	68f8      	ldr	r0, [r7, #12]
 801db44:	f000 fc38 	bl	801e3b8 <memset>
	sprintf((char*) cmd, "AT+MQTTPUB=0,\"%s/ToF\",\"%s\",1,0", MQTT_CLIENTID, data);
 801db48:	687b      	ldr	r3, [r7, #4]
 801db4a:	4a19      	ldr	r2, [pc, #100]	; (801dbb0 <esp8266_Publish_ToF_BrokerMQTT+0xa8>)
 801db4c:	4919      	ldr	r1, [pc, #100]	; (801dbb4 <esp8266_Publish_ToF_BrokerMQTT+0xac>)
 801db4e:	68f8      	ldr	r0, [r7, #12]
 801db50:	f000 fdce 	bl	801e6f0 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801db54:	e011      	b.n	801db7a <esp8266_Publish_ToF_BrokerMQTT+0x72>
	{
		retry_count++;
 801db56:	697b      	ldr	r3, [r7, #20]
 801db58:	3301      	adds	r3, #1
 801db5a:	617b      	str	r3, [r7, #20]
		HAL_Delay(1000);
 801db5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801db60:	f7f9 ff70 	bl	8017a44 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801db64:	697b      	ldr	r3, [r7, #20]
 801db66:	2b03      	cmp	r3, #3
 801db68:	dd07      	ble.n	801db7a <esp8266_Publish_ToF_BrokerMQTT+0x72>
			printf("(DBG:) esp8266_Subscribe_ToF_BrokerMQTT() failed\r\n");
 801db6a:	4813      	ldr	r0, [pc, #76]	; (801dbb8 <esp8266_Publish_ToF_BrokerMQTT+0xb0>)
 801db6c:	f000 fda8 	bl	801e6c0 <puts>
			retry_count = 0;
 801db70:	2300      	movs	r3, #0
 801db72:	617b      	str	r3, [r7, #20]
			mqtt_state = _FAILED_MQTT;
 801db74:	4b0d      	ldr	r3, [pc, #52]	; (801dbac <esp8266_Publish_ToF_BrokerMQTT+0xa4>)
 801db76:	2200      	movs	r2, #0
 801db78:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801db7a:	2301      	movs	r3, #1
 801db7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801db80:	490e      	ldr	r1, [pc, #56]	; (801dbbc <esp8266_Publish_ToF_BrokerMQTT+0xb4>)
 801db82:	68f8      	ldr	r0, [r7, #12]
 801db84:	f7ff faec 	bl	801d160 <esp8266_TransmitCmd>
 801db88:	4603      	mov	r3, r0
 801db8a:	2b01      	cmp	r3, #1
 801db8c:	d1e3      	bne.n	801db56 <esp8266_Publish_ToF_BrokerMQTT+0x4e>
		}
	}
	HAL_Delay(100);
 801db8e:	2064      	movs	r0, #100	; 0x64
 801db90:	f7f9 ff58 	bl	8017a44 <HAL_Delay>
	retry_count = 0;
 801db94:	2300      	movs	r3, #0
 801db96:	617b      	str	r3, [r7, #20]
	mqtt_state = _PUBLISH_TOF_MQTT;
 801db98:	4b04      	ldr	r3, [pc, #16]	; (801dbac <esp8266_Publish_ToF_BrokerMQTT+0xa4>)
 801db9a:	220c      	movs	r2, #12
 801db9c:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 801db9e:	4b03      	ldr	r3, [pc, #12]	; (801dbac <esp8266_Publish_ToF_BrokerMQTT+0xa4>)
 801dba0:	781b      	ldrb	r3, [r3, #0]
}
 801dba2:	4618      	mov	r0, r3
 801dba4:	3718      	adds	r7, #24
 801dba6:	46bd      	mov	sp, r7
 801dba8:	bd80      	pop	{r7, pc}
 801dbaa:	bf00      	nop
 801dbac:	2000008b 	.word	0x2000008b
 801dbb0:	0801fd24 	.word	0x0801fd24
 801dbb4:	0801ff5c 	.word	0x0801ff5c
 801dbb8:	0801ff7c 	.word	0x0801ff7c
 801dbbc:	0801fa00 	.word	0x0801fa00

0801dbc0 <get_mqtt_state>:

uint8_t get_mqtt_state()
{
 801dbc0:	b480      	push	{r7}
 801dbc2:	af00      	add	r7, sp, #0
	return mqtt_state;
 801dbc4:	4b03      	ldr	r3, [pc, #12]	; (801dbd4 <get_mqtt_state+0x14>)
 801dbc6:	781b      	ldrb	r3, [r3, #0]
}
 801dbc8:	4618      	mov	r0, r3
 801dbca:	46bd      	mov	sp, r7
 801dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbd0:	4770      	bx	lr
 801dbd2:	bf00      	nop
 801dbd4:	2000008b 	.word	0x2000008b

0801dbd8 <MX_TOF_Init>:
static void MX_53L1A2_MultiSensorRanging_Init(void);
static void MX_53L1A2_MultiSensorRanging_Process(void);
static void print_result(uint32_t Instance, RANGING_SENSOR_Result_t *Result);

void MX_TOF_Init(void)
{
 801dbd8:	b580      	push	{r7, lr}
 801dbda:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L1A2_MultiSensorRanging_Init();
 801dbdc:	f000 f808 	bl	801dbf0 <MX_53L1A2_MultiSensorRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 801dbe0:	bf00      	nop
 801dbe2:	bd80      	pop	{r7, pc}

0801dbe4 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 801dbe4:	b580      	push	{r7, lr}
 801dbe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_53L1A2_MultiSensorRanging_Process();
 801dbe8:	f000 f866 	bl	801dcb8 <MX_53L1A2_MultiSensorRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 801dbec:	bf00      	nop
 801dbee:	bd80      	pop	{r7, pc}

0801dbf0 <MX_53L1A2_MultiSensorRanging_Init>:

static void MX_53L1A2_MultiSensorRanging_Init(void)
{
 801dbf0:	b580      	push	{r7, lr}
 801dbf2:	b082      	sub	sp, #8
 801dbf4:	af00      	add	r7, sp, #0
  uint8_t device;
  uint16_t i2c_addr;
  uint32_t id;

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 801dbf6:	2000      	movs	r0, #0
 801dbf8:	f7f9 fdd0 	bl	801779c <BSP_COM_Init>

  printf("53L1A2 Multi Sensor Ranging demo application\n");
 801dbfc:	482a      	ldr	r0, [pc, #168]	; (801dca8 <MX_53L1A2_MultiSensorRanging_Init+0xb8>)
 801dbfe:	f000 fd5f 	bl	801e6c0 <puts>

  /* put all the devices in shutdown mode */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 801dc02:	2300      	movs	r3, #0
 801dc04:	71fb      	strb	r3, [r7, #7]
 801dc06:	e007      	b.n	801dc18 <MX_53L1A2_MultiSensorRanging_Init+0x28>
  {
    VL53L1A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_OFF);
 801dc08:	79fb      	ldrb	r3, [r7, #7]
 801dc0a:	2101      	movs	r1, #1
 801dc0c:	4618      	mov	r0, r3
 801dc0e:	f7e6 f8dd 	bl	8003dcc <VL53L1A2_RANGING_SENSOR_SetPowerMode>
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 801dc12:	79fb      	ldrb	r3, [r7, #7]
 801dc14:	3301      	adds	r3, #1
 801dc16:	71fb      	strb	r3, [r7, #7]
 801dc18:	79fb      	ldrb	r3, [r7, #7]
 801dc1a:	2b02      	cmp	r3, #2
 801dc1c:	d9f4      	bls.n	801dc08 <MX_53L1A2_MultiSensorRanging_Init+0x18>

  /* power on the devices one at a time, initialize them and change their address.
   * once the address is updated, the communication with the devices is checked
   * reading its ID.
   */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 801dc1e:	2300      	movs	r3, #0
 801dc20:	71fb      	strb	r3, [r7, #7]
 801dc22:	e039      	b.n	801dc98 <MX_53L1A2_MultiSensorRanging_Init+0xa8>
  {
    VL53L1A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_ON);
 801dc24:	79fb      	ldrb	r3, [r7, #7]
 801dc26:	2100      	movs	r1, #0
 801dc28:	4618      	mov	r0, r3
 801dc2a:	f7e6 f8cf 	bl	8003dcc <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    status = VL53L1A2_RANGING_SENSOR_Init(device);
 801dc2e:	79fb      	ldrb	r3, [r7, #7]
 801dc30:	4618      	mov	r0, r3
 801dc32:	f7e5 ffb7 	bl	8003ba4 <VL53L1A2_RANGING_SENSOR_Init>
 801dc36:	4603      	mov	r3, r0
 801dc38:	4a1c      	ldr	r2, [pc, #112]	; (801dcac <MX_53L1A2_MultiSensorRanging_Init+0xbc>)
 801dc3a:	6013      	str	r3, [r2, #0]

    /* 0: not detected, 1: detected */
    ToF_Present[device] = (status != BSP_ERROR_NONE) ? 0 : 1;
 801dc3c:	4b1b      	ldr	r3, [pc, #108]	; (801dcac <MX_53L1A2_MultiSensorRanging_Init+0xbc>)
 801dc3e:	681b      	ldr	r3, [r3, #0]
 801dc40:	2b00      	cmp	r3, #0
 801dc42:	bf0c      	ite	eq
 801dc44:	2301      	moveq	r3, #1
 801dc46:	2300      	movne	r3, #0
 801dc48:	b2da      	uxtb	r2, r3
 801dc4a:	79fb      	ldrb	r3, [r7, #7]
 801dc4c:	4611      	mov	r1, r2
 801dc4e:	4a18      	ldr	r2, [pc, #96]	; (801dcb0 <MX_53L1A2_MultiSensorRanging_Init+0xc0>)
 801dc50:	54d1      	strb	r1, [r2, r3]

    /* skip this device if init not successful */
    if (ToF_Present[device] == 0) continue;
 801dc52:	79fb      	ldrb	r3, [r7, #7]
 801dc54:	4a16      	ldr	r2, [pc, #88]	; (801dcb0 <MX_53L1A2_MultiSensorRanging_Init+0xc0>)
 801dc56:	5cd3      	ldrb	r3, [r2, r3]
 801dc58:	2b00      	cmp	r3, #0
 801dc5a:	d019      	beq.n	801dc90 <MX_53L1A2_MultiSensorRanging_Init+0xa0>

    /* left: 0x54, center: 0x56, right: 0x58 */
    i2c_addr = (RANGING_SENSOR_VL53L1CB_ADDRESS + (device + 1) * 2);
 801dc5c:	79fb      	ldrb	r3, [r7, #7]
 801dc5e:	3301      	adds	r3, #1
 801dc60:	b29b      	uxth	r3, r3
 801dc62:	3329      	adds	r3, #41	; 0x29
 801dc64:	b29b      	uxth	r3, r3
 801dc66:	005b      	lsls	r3, r3, #1
 801dc68:	80bb      	strh	r3, [r7, #4]
    VL53L1A2_RANGING_SENSOR_SetAddress(device, i2c_addr);
 801dc6a:	79fb      	ldrb	r3, [r7, #7]
 801dc6c:	88ba      	ldrh	r2, [r7, #4]
 801dc6e:	4611      	mov	r1, r2
 801dc70:	4618      	mov	r0, r3
 801dc72:	f7e6 f883 	bl	8003d7c <VL53L1A2_RANGING_SENSOR_SetAddress>

    /* check the communication with the device reading the ID */
    VL53L1A2_RANGING_SENSOR_ReadID(device, &id);
 801dc76:	79fb      	ldrb	r3, [r7, #7]
 801dc78:	463a      	mov	r2, r7
 801dc7a:	4611      	mov	r1, r2
 801dc7c:	4618      	mov	r0, r3
 801dc7e:	f7e5 ffb7 	bl	8003bf0 <VL53L1A2_RANGING_SENSOR_ReadID>
    printf("ToF sensor %d - ID: %04lX\n", device, (unsigned long)id);
 801dc82:	79fb      	ldrb	r3, [r7, #7]
 801dc84:	683a      	ldr	r2, [r7, #0]
 801dc86:	4619      	mov	r1, r3
 801dc88:	480a      	ldr	r0, [pc, #40]	; (801dcb4 <MX_53L1A2_MultiSensorRanging_Init+0xc4>)
 801dc8a:	f000 fc7d 	bl	801e588 <iprintf>
 801dc8e:	e000      	b.n	801dc92 <MX_53L1A2_MultiSensorRanging_Init+0xa2>
    if (ToF_Present[device] == 0) continue;
 801dc90:	bf00      	nop
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 801dc92:	79fb      	ldrb	r3, [r7, #7]
 801dc94:	3301      	adds	r3, #1
 801dc96:	71fb      	strb	r3, [r7, #7]
 801dc98:	79fb      	ldrb	r3, [r7, #7]
 801dc9a:	2b02      	cmp	r3, #2
 801dc9c:	d9c2      	bls.n	801dc24 <MX_53L1A2_MultiSensorRanging_Init+0x34>
  }
}
 801dc9e:	bf00      	nop
 801dca0:	bf00      	nop
 801dca2:	3708      	adds	r7, #8
 801dca4:	46bd      	mov	sp, r7
 801dca6:	bd80      	pop	{r7, pc}
 801dca8:	0801ffc8 	.word	0x0801ffc8
 801dcac:	200097b8 	.word	0x200097b8
 801dcb0:	200097bc 	.word	0x200097bc
 801dcb4:	0801fff8 	.word	0x0801fff8

0801dcb8 <MX_53L1A2_MultiSensorRanging_Process>:

static void MX_53L1A2_MultiSensorRanging_Process(void)
{
 801dcb8:	b580      	push	{r7, lr}
 801dcba:	b082      	sub	sp, #8
 801dcbc:	af00      	add	r7, sp, #0
  uint8_t i;

  static RANGING_SENSOR_Result_t Result;
  static RANGING_SENSOR_ProfileConfig_t Profile;

  Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 801dcbe:	4b3c      	ldr	r3, [pc, #240]	; (801ddb0 <MX_53L1A2_MultiSensorRanging_Process+0xf8>)
 801dcc0:	2202      	movs	r2, #2
 801dcc2:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET; /* 16 ms < TimingBudget < 500 ms */
 801dcc4:	4b3a      	ldr	r3, [pc, #232]	; (801ddb0 <MX_53L1A2_MultiSensorRanging_Process+0xf8>)
 801dcc6:	221e      	movs	r2, #30
 801dcc8:	605a      	str	r2, [r3, #4]
  Profile.Frequency = 0; /* Induces intermeasurement period, set to ZERO for normal ranging */
 801dcca:	4b39      	ldr	r3, [pc, #228]	; (801ddb0 <MX_53L1A2_MultiSensorRanging_Process+0xf8>)
 801dccc:	2200      	movs	r2, #0
 801dcce:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 801dcd0:	4b37      	ldr	r3, [pc, #220]	; (801ddb0 <MX_53L1A2_MultiSensorRanging_Process+0xf8>)
 801dcd2:	2200      	movs	r2, #0
 801dcd4:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 801dcd6:	4b36      	ldr	r3, [pc, #216]	; (801ddb0 <MX_53L1A2_MultiSensorRanging_Process+0xf8>)
 801dcd8:	2200      	movs	r2, #0
 801dcda:	611a      	str	r2, [r3, #16]

  for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 801dcdc:	2300      	movs	r3, #0
 801dcde:	71fb      	strb	r3, [r7, #7]
 801dce0:	e01d      	b.n	801dd1e <MX_53L1A2_MultiSensorRanging_Process+0x66>
  {
    /* skip this device if not detected */
    if (ToF_Present[i] != 1) continue;
 801dce2:	79fb      	ldrb	r3, [r7, #7]
 801dce4:	4a33      	ldr	r2, [pc, #204]	; (801ddb4 <MX_53L1A2_MultiSensorRanging_Process+0xfc>)
 801dce6:	5cd3      	ldrb	r3, [r2, r3]
 801dce8:	2b01      	cmp	r3, #1
 801dcea:	d114      	bne.n	801dd16 <MX_53L1A2_MultiSensorRanging_Process+0x5e>

    VL53L1A2_RANGING_SENSOR_ConfigProfile(i, &Profile);
 801dcec:	79fb      	ldrb	r3, [r7, #7]
 801dcee:	4930      	ldr	r1, [pc, #192]	; (801ddb0 <MX_53L1A2_MultiSensorRanging_Process+0xf8>)
 801dcf0:	4618      	mov	r0, r3
 801dcf2:	f7e5 ffa5 	bl	8003c40 <VL53L1A2_RANGING_SENSOR_ConfigProfile>
    status = VL53L1A2_RANGING_SENSOR_Start(i, RS_MODE_BLOCKING_CONTINUOUS);
 801dcf6:	79fb      	ldrb	r3, [r7, #7]
 801dcf8:	2101      	movs	r1, #1
 801dcfa:	4618      	mov	r0, r3
 801dcfc:	f7e5 fff0 	bl	8003ce0 <VL53L1A2_RANGING_SENSOR_Start>
 801dd00:	4603      	mov	r3, r0
 801dd02:	4a2d      	ldr	r2, [pc, #180]	; (801ddb8 <MX_53L1A2_MultiSensorRanging_Process+0x100>)
 801dd04:	6013      	str	r3, [r2, #0]

    if (status != BSP_ERROR_NONE)
 801dd06:	4b2c      	ldr	r3, [pc, #176]	; (801ddb8 <MX_53L1A2_MultiSensorRanging_Process+0x100>)
 801dd08:	681b      	ldr	r3, [r3, #0]
 801dd0a:	2b00      	cmp	r3, #0
 801dd0c:	d004      	beq.n	801dd18 <MX_53L1A2_MultiSensorRanging_Process+0x60>
    {
      printf("VL53L1A2_RANGING_SENSOR_Start failed\n");
 801dd0e:	482b      	ldr	r0, [pc, #172]	; (801ddbc <MX_53L1A2_MultiSensorRanging_Process+0x104>)
 801dd10:	f000 fcd6 	bl	801e6c0 <puts>
      while(1);
 801dd14:	e7fe      	b.n	801dd14 <MX_53L1A2_MultiSensorRanging_Process+0x5c>
    if (ToF_Present[i] != 1) continue;
 801dd16:	bf00      	nop
  for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 801dd18:	79fb      	ldrb	r3, [r7, #7]
 801dd1a:	3301      	adds	r3, #1
 801dd1c:	71fb      	strb	r3, [r7, #7]
 801dd1e:	79fb      	ldrb	r3, [r7, #7]
 801dd20:	2b02      	cmp	r3, #2
 801dd22:	d9de      	bls.n	801dce2 <MX_53L1A2_MultiSensorRanging_Process+0x2a>
    }
  }
  int k = 0 ;
 801dd24:	2300      	movs	r3, #0
 801dd26:	603b      	str	r3, [r7, #0]
  while (k < 10)
 801dd28:	e02a      	b.n	801dd80 <MX_53L1A2_MultiSensorRanging_Process+0xc8>
  {
    /* polling mode */
    for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 801dd2a:	2300      	movs	r3, #0
 801dd2c:	71fb      	strb	r3, [r7, #7]
 801dd2e:	e01e      	b.n	801dd6e <MX_53L1A2_MultiSensorRanging_Process+0xb6>
    {
      status = VL53L1A2_RANGING_SENSOR_GetDistance(i, &Result);
 801dd30:	79fb      	ldrb	r3, [r7, #7]
 801dd32:	4923      	ldr	r1, [pc, #140]	; (801ddc0 <MX_53L1A2_MultiSensorRanging_Process+0x108>)
 801dd34:	4618      	mov	r0, r3
 801dd36:	f7e5 ffab 	bl	8003c90 <VL53L1A2_RANGING_SENSOR_GetDistance>
 801dd3a:	4603      	mov	r3, r0
 801dd3c:	4a1e      	ldr	r2, [pc, #120]	; (801ddb8 <MX_53L1A2_MultiSensorRanging_Process+0x100>)
 801dd3e:	6013      	str	r3, [r2, #0]

      if (status == BSP_ERROR_NONE)
 801dd40:	4b1d      	ldr	r3, [pc, #116]	; (801ddb8 <MX_53L1A2_MultiSensorRanging_Process+0x100>)
 801dd42:	681b      	ldr	r3, [r3, #0]
 801dd44:	2b00      	cmp	r3, #0
 801dd46:	d10f      	bne.n	801dd68 <MX_53L1A2_MultiSensorRanging_Process+0xb0>
      {
        printf("%s\t - ", TofDevStr[i]);
 801dd48:	79fb      	ldrb	r3, [r7, #7]
 801dd4a:	4a1e      	ldr	r2, [pc, #120]	; (801ddc4 <MX_53L1A2_MultiSensorRanging_Process+0x10c>)
 801dd4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801dd50:	4619      	mov	r1, r3
 801dd52:	481d      	ldr	r0, [pc, #116]	; (801ddc8 <MX_53L1A2_MultiSensorRanging_Process+0x110>)
 801dd54:	f000 fc18 	bl	801e588 <iprintf>
        print_result(i,&Result);
 801dd58:	79fb      	ldrb	r3, [r7, #7]
 801dd5a:	4919      	ldr	r1, [pc, #100]	; (801ddc0 <MX_53L1A2_MultiSensorRanging_Process+0x108>)
 801dd5c:	4618      	mov	r0, r3
 801dd5e:	f000 f835 	bl	801ddcc <print_result>
        HAL_Delay(POLLING_PERIOD);
 801dd62:	20fa      	movs	r0, #250	; 0xfa
 801dd64:	f7f9 fe6e 	bl	8017a44 <HAL_Delay>
    for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 801dd68:	79fb      	ldrb	r3, [r7, #7]
 801dd6a:	3301      	adds	r3, #1
 801dd6c:	71fb      	strb	r3, [r7, #7]
 801dd6e:	79fb      	ldrb	r3, [r7, #7]
 801dd70:	2b02      	cmp	r3, #2
 801dd72:	d9dd      	bls.n	801dd30 <MX_53L1A2_MultiSensorRanging_Process+0x78>
      }
    }
    printf ("\n");
 801dd74:	200a      	movs	r0, #10
 801dd76:	f000 fc1f 	bl	801e5b8 <putchar>
    k++;
 801dd7a:	683b      	ldr	r3, [r7, #0]
 801dd7c:	3301      	adds	r3, #1
 801dd7e:	603b      	str	r3, [r7, #0]
  while (k < 10)
 801dd80:	683b      	ldr	r3, [r7, #0]
 801dd82:	2b09      	cmp	r3, #9
 801dd84:	ddd1      	ble.n	801dd2a <MX_53L1A2_MultiSensorRanging_Process+0x72>
  }
  for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 801dd86:	2300      	movs	r3, #0
 801dd88:	71fb      	strb	r3, [r7, #7]
 801dd8a:	e009      	b.n	801dda0 <MX_53L1A2_MultiSensorRanging_Process+0xe8>
    {
	  status = VL53L1A2_RANGING_SENSOR_Stop(i);
 801dd8c:	79fb      	ldrb	r3, [r7, #7]
 801dd8e:	4618      	mov	r0, r3
 801dd90:	f7e5 ffce 	bl	8003d30 <VL53L1A2_RANGING_SENSOR_Stop>
 801dd94:	4603      	mov	r3, r0
 801dd96:	4a08      	ldr	r2, [pc, #32]	; (801ddb8 <MX_53L1A2_MultiSensorRanging_Process+0x100>)
 801dd98:	6013      	str	r3, [r2, #0]
  for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 801dd9a:	79fb      	ldrb	r3, [r7, #7]
 801dd9c:	3301      	adds	r3, #1
 801dd9e:	71fb      	strb	r3, [r7, #7]
 801dda0:	79fb      	ldrb	r3, [r7, #7]
 801dda2:	2b02      	cmp	r3, #2
 801dda4:	d9f2      	bls.n	801dd8c <MX_53L1A2_MultiSensorRanging_Process+0xd4>
    }

}
 801dda6:	bf00      	nop
 801dda8:	bf00      	nop
 801ddaa:	3708      	adds	r7, #8
 801ddac:	46bd      	mov	sp, r7
 801ddae:	bd80      	pop	{r7, pc}
 801ddb0:	200097c0 	.word	0x200097c0
 801ddb4:	200097bc 	.word	0x200097bc
 801ddb8:	200097b8 	.word	0x200097b8
 801ddbc:	08020014 	.word	0x08020014
 801ddc0:	200097d4 	.word	0x200097d4
 801ddc4:	2000008c 	.word	0x2000008c
 801ddc8:	0802003c 	.word	0x0802003c

0801ddcc <print_result>:

static void print_result(uint32_t Instance, RANGING_SENSOR_Result_t *Result)
{
 801ddcc:	b580      	push	{r7, lr}
 801ddce:	b084      	sub	sp, #16
 801ddd0:	af00      	add	r7, sp, #0
 801ddd2:	6078      	str	r0, [r7, #4]
 801ddd4:	6039      	str	r1, [r7, #0]
  uint8_t i;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 801ddd6:	2300      	movs	r3, #0
 801ddd8:	73fb      	strb	r3, [r7, #15]
 801ddda:	e054      	b.n	801de86 <print_result+0xba>
      printf("Status = %2ld, Distance = %5ld mm",
      (long)Result->ZoneResult[i].Status[0],
      (long)Result->ZoneResult[i].Distance[0]);
      */
	  //JN
	  if((long)Result->ZoneResult[i].Distance[0] > 10 && (long)Result->ZoneResult[i].Distance[0] < 100){
 801dddc:	7bfa      	ldrb	r2, [r7, #15]
 801ddde:	6839      	ldr	r1, [r7, #0]
 801dde0:	4613      	mov	r3, r2
 801dde2:	011b      	lsls	r3, r3, #4
 801dde4:	4413      	add	r3, r2
 801dde6:	009b      	lsls	r3, r3, #2
 801dde8:	440b      	add	r3, r1
 801ddea:	3308      	adds	r3, #8
 801ddec:	681b      	ldr	r3, [r3, #0]
 801ddee:	2b0a      	cmp	r3, #10
 801ddf0:	dd32      	ble.n	801de58 <print_result+0x8c>
 801ddf2:	7bfa      	ldrb	r2, [r7, #15]
 801ddf4:	6839      	ldr	r1, [r7, #0]
 801ddf6:	4613      	mov	r3, r2
 801ddf8:	011b      	lsls	r3, r3, #4
 801ddfa:	4413      	add	r3, r2
 801ddfc:	009b      	lsls	r3, r3, #2
 801ddfe:	440b      	add	r3, r1
 801de00:	3308      	adds	r3, #8
 801de02:	681b      	ldr	r3, [r3, #0]
 801de04:	2b63      	cmp	r3, #99	; 0x63
 801de06:	dc27      	bgt.n	801de58 <print_result+0x8c>
		if(Instance == 0){
 801de08:	687b      	ldr	r3, [r7, #4]
 801de0a:	2b00      	cmp	r3, #0
 801de0c:	d109      	bne.n	801de22 <print_result+0x56>
			printf ("Bottle in left position\n");
 801de0e:	4823      	ldr	r0, [pc, #140]	; (801de9c <print_result+0xd0>)
 801de10:	f000 fc56 	bl	801e6c0 <puts>
			if(LeftPos != 2){
 801de14:	4b22      	ldr	r3, [pc, #136]	; (801dea0 <print_result+0xd4>)
 801de16:	681b      	ldr	r3, [r3, #0]
 801de18:	2b02      	cmp	r3, #2
 801de1a:	d002      	beq.n	801de22 <print_result+0x56>
				LeftPos = 1;
 801de1c:	4b20      	ldr	r3, [pc, #128]	; (801dea0 <print_result+0xd4>)
 801de1e:	2201      	movs	r2, #1
 801de20:	601a      	str	r2, [r3, #0]
			}
		}
		if(Instance == 1){
 801de22:	687b      	ldr	r3, [r7, #4]
 801de24:	2b01      	cmp	r3, #1
 801de26:	d109      	bne.n	801de3c <print_result+0x70>
			printf ("Bottle in center position\n");
 801de28:	481e      	ldr	r0, [pc, #120]	; (801dea4 <print_result+0xd8>)
 801de2a:	f000 fc49 	bl	801e6c0 <puts>
			if(CenterPos != 2){
 801de2e:	4b1e      	ldr	r3, [pc, #120]	; (801dea8 <print_result+0xdc>)
 801de30:	681b      	ldr	r3, [r3, #0]
 801de32:	2b02      	cmp	r3, #2
 801de34:	d002      	beq.n	801de3c <print_result+0x70>
				CenterPos = 1;
 801de36:	4b1c      	ldr	r3, [pc, #112]	; (801dea8 <print_result+0xdc>)
 801de38:	2201      	movs	r2, #1
 801de3a:	601a      	str	r2, [r3, #0]
			}
		}
		if(Instance == 2){
 801de3c:	687b      	ldr	r3, [r7, #4]
 801de3e:	2b02      	cmp	r3, #2
 801de40:	d11d      	bne.n	801de7e <print_result+0xb2>
			printf ("Bottle in right position\n");
 801de42:	481a      	ldr	r0, [pc, #104]	; (801deac <print_result+0xe0>)
 801de44:	f000 fc3c 	bl	801e6c0 <puts>
			if(RightPos != 2){
 801de48:	4b19      	ldr	r3, [pc, #100]	; (801deb0 <print_result+0xe4>)
 801de4a:	681b      	ldr	r3, [r3, #0]
 801de4c:	2b02      	cmp	r3, #2
 801de4e:	d016      	beq.n	801de7e <print_result+0xb2>
				RightPos = 1;
 801de50:	4b17      	ldr	r3, [pc, #92]	; (801deb0 <print_result+0xe4>)
 801de52:	2201      	movs	r2, #1
 801de54:	601a      	str	r2, [r3, #0]
		if(Instance == 2){
 801de56:	e012      	b.n	801de7e <print_result+0xb2>
			}
		}
	 } else {
		 if(Instance == 0){
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d102      	bne.n	801de64 <print_result+0x98>
			 LeftPos = 0;
 801de5e:	4b10      	ldr	r3, [pc, #64]	; (801dea0 <print_result+0xd4>)
 801de60:	2200      	movs	r2, #0
 801de62:	601a      	str	r2, [r3, #0]
		 }
		 if(Instance == 1){
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	2b01      	cmp	r3, #1
 801de68:	d102      	bne.n	801de70 <print_result+0xa4>
			CenterPos = 0;
 801de6a:	4b0f      	ldr	r3, [pc, #60]	; (801dea8 <print_result+0xdc>)
 801de6c:	2200      	movs	r2, #0
 801de6e:	601a      	str	r2, [r3, #0]
		 }
		 if(Instance == 2){
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	2b02      	cmp	r3, #2
 801de74:	d104      	bne.n	801de80 <print_result+0xb4>
			 RightPos = 0;
 801de76:	4b0e      	ldr	r3, [pc, #56]	; (801deb0 <print_result+0xe4>)
 801de78:	2200      	movs	r2, #0
 801de7a:	601a      	str	r2, [r3, #0]
 801de7c:	e000      	b.n	801de80 <print_result+0xb4>
		if(Instance == 2){
 801de7e:	bf00      	nop
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 801de80:	7bfb      	ldrb	r3, [r7, #15]
 801de82:	3301      	adds	r3, #1
 801de84:	73fb      	strb	r3, [r7, #15]
 801de86:	7bfb      	ldrb	r3, [r7, #15]
 801de88:	2b00      	cmp	r3, #0
 801de8a:	d0a7      	beq.n	801dddc <print_result+0x10>
		 }
	 }
  }
  printf ("\n");
 801de8c:	200a      	movs	r0, #10
 801de8e:	f000 fb93 	bl	801e5b8 <putchar>
}
 801de92:	bf00      	nop
 801de94:	3710      	adds	r7, #16
 801de96:	46bd      	mov	sp, r7
 801de98:	bd80      	pop	{r7, pc}
 801de9a:	bf00      	nop
 801de9c:	08020044 	.word	0x08020044
 801dea0:	2000011c 	.word	0x2000011c
 801dea4:	0802005c 	.word	0x0802005c
 801dea8:	20000124 	.word	0x20000124
 801deac:	08020078 	.word	0x08020078
 801deb0:	20000120 	.word	0x20000120

0801deb4 <__errno>:
 801deb4:	4b01      	ldr	r3, [pc, #4]	; (801debc <__errno+0x8>)
 801deb6:	6818      	ldr	r0, [r3, #0]
 801deb8:	4770      	bx	lr
 801deba:	bf00      	nop
 801debc:	20000098 	.word	0x20000098

0801dec0 <__sflush_r>:
 801dec0:	898a      	ldrh	r2, [r1, #12]
 801dec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dec6:	4605      	mov	r5, r0
 801dec8:	0710      	lsls	r0, r2, #28
 801deca:	460c      	mov	r4, r1
 801decc:	d458      	bmi.n	801df80 <__sflush_r+0xc0>
 801dece:	684b      	ldr	r3, [r1, #4]
 801ded0:	2b00      	cmp	r3, #0
 801ded2:	dc05      	bgt.n	801dee0 <__sflush_r+0x20>
 801ded4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ded6:	2b00      	cmp	r3, #0
 801ded8:	dc02      	bgt.n	801dee0 <__sflush_r+0x20>
 801deda:	2000      	movs	r0, #0
 801dedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dee0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dee2:	2e00      	cmp	r6, #0
 801dee4:	d0f9      	beq.n	801deda <__sflush_r+0x1a>
 801dee6:	2300      	movs	r3, #0
 801dee8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801deec:	682f      	ldr	r7, [r5, #0]
 801deee:	602b      	str	r3, [r5, #0]
 801def0:	d032      	beq.n	801df58 <__sflush_r+0x98>
 801def2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801def4:	89a3      	ldrh	r3, [r4, #12]
 801def6:	075a      	lsls	r2, r3, #29
 801def8:	d505      	bpl.n	801df06 <__sflush_r+0x46>
 801defa:	6863      	ldr	r3, [r4, #4]
 801defc:	1ac0      	subs	r0, r0, r3
 801defe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801df00:	b10b      	cbz	r3, 801df06 <__sflush_r+0x46>
 801df02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801df04:	1ac0      	subs	r0, r0, r3
 801df06:	2300      	movs	r3, #0
 801df08:	4602      	mov	r2, r0
 801df0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801df0c:	6a21      	ldr	r1, [r4, #32]
 801df0e:	4628      	mov	r0, r5
 801df10:	47b0      	blx	r6
 801df12:	1c43      	adds	r3, r0, #1
 801df14:	89a3      	ldrh	r3, [r4, #12]
 801df16:	d106      	bne.n	801df26 <__sflush_r+0x66>
 801df18:	6829      	ldr	r1, [r5, #0]
 801df1a:	291d      	cmp	r1, #29
 801df1c:	d82c      	bhi.n	801df78 <__sflush_r+0xb8>
 801df1e:	4a2a      	ldr	r2, [pc, #168]	; (801dfc8 <__sflush_r+0x108>)
 801df20:	40ca      	lsrs	r2, r1
 801df22:	07d6      	lsls	r6, r2, #31
 801df24:	d528      	bpl.n	801df78 <__sflush_r+0xb8>
 801df26:	2200      	movs	r2, #0
 801df28:	6062      	str	r2, [r4, #4]
 801df2a:	04d9      	lsls	r1, r3, #19
 801df2c:	6922      	ldr	r2, [r4, #16]
 801df2e:	6022      	str	r2, [r4, #0]
 801df30:	d504      	bpl.n	801df3c <__sflush_r+0x7c>
 801df32:	1c42      	adds	r2, r0, #1
 801df34:	d101      	bne.n	801df3a <__sflush_r+0x7a>
 801df36:	682b      	ldr	r3, [r5, #0]
 801df38:	b903      	cbnz	r3, 801df3c <__sflush_r+0x7c>
 801df3a:	6560      	str	r0, [r4, #84]	; 0x54
 801df3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801df3e:	602f      	str	r7, [r5, #0]
 801df40:	2900      	cmp	r1, #0
 801df42:	d0ca      	beq.n	801deda <__sflush_r+0x1a>
 801df44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801df48:	4299      	cmp	r1, r3
 801df4a:	d002      	beq.n	801df52 <__sflush_r+0x92>
 801df4c:	4628      	mov	r0, r5
 801df4e:	f000 fa3b 	bl	801e3c8 <_free_r>
 801df52:	2000      	movs	r0, #0
 801df54:	6360      	str	r0, [r4, #52]	; 0x34
 801df56:	e7c1      	b.n	801dedc <__sflush_r+0x1c>
 801df58:	6a21      	ldr	r1, [r4, #32]
 801df5a:	2301      	movs	r3, #1
 801df5c:	4628      	mov	r0, r5
 801df5e:	47b0      	blx	r6
 801df60:	1c41      	adds	r1, r0, #1
 801df62:	d1c7      	bne.n	801def4 <__sflush_r+0x34>
 801df64:	682b      	ldr	r3, [r5, #0]
 801df66:	2b00      	cmp	r3, #0
 801df68:	d0c4      	beq.n	801def4 <__sflush_r+0x34>
 801df6a:	2b1d      	cmp	r3, #29
 801df6c:	d001      	beq.n	801df72 <__sflush_r+0xb2>
 801df6e:	2b16      	cmp	r3, #22
 801df70:	d101      	bne.n	801df76 <__sflush_r+0xb6>
 801df72:	602f      	str	r7, [r5, #0]
 801df74:	e7b1      	b.n	801deda <__sflush_r+0x1a>
 801df76:	89a3      	ldrh	r3, [r4, #12]
 801df78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801df7c:	81a3      	strh	r3, [r4, #12]
 801df7e:	e7ad      	b.n	801dedc <__sflush_r+0x1c>
 801df80:	690f      	ldr	r7, [r1, #16]
 801df82:	2f00      	cmp	r7, #0
 801df84:	d0a9      	beq.n	801deda <__sflush_r+0x1a>
 801df86:	0793      	lsls	r3, r2, #30
 801df88:	680e      	ldr	r6, [r1, #0]
 801df8a:	bf08      	it	eq
 801df8c:	694b      	ldreq	r3, [r1, #20]
 801df8e:	600f      	str	r7, [r1, #0]
 801df90:	bf18      	it	ne
 801df92:	2300      	movne	r3, #0
 801df94:	eba6 0807 	sub.w	r8, r6, r7
 801df98:	608b      	str	r3, [r1, #8]
 801df9a:	f1b8 0f00 	cmp.w	r8, #0
 801df9e:	dd9c      	ble.n	801deda <__sflush_r+0x1a>
 801dfa0:	6a21      	ldr	r1, [r4, #32]
 801dfa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dfa4:	4643      	mov	r3, r8
 801dfa6:	463a      	mov	r2, r7
 801dfa8:	4628      	mov	r0, r5
 801dfaa:	47b0      	blx	r6
 801dfac:	2800      	cmp	r0, #0
 801dfae:	dc06      	bgt.n	801dfbe <__sflush_r+0xfe>
 801dfb0:	89a3      	ldrh	r3, [r4, #12]
 801dfb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dfb6:	81a3      	strh	r3, [r4, #12]
 801dfb8:	f04f 30ff 	mov.w	r0, #4294967295
 801dfbc:	e78e      	b.n	801dedc <__sflush_r+0x1c>
 801dfbe:	4407      	add	r7, r0
 801dfc0:	eba8 0800 	sub.w	r8, r8, r0
 801dfc4:	e7e9      	b.n	801df9a <__sflush_r+0xda>
 801dfc6:	bf00      	nop
 801dfc8:	20400001 	.word	0x20400001

0801dfcc <_fflush_r>:
 801dfcc:	b538      	push	{r3, r4, r5, lr}
 801dfce:	690b      	ldr	r3, [r1, #16]
 801dfd0:	4605      	mov	r5, r0
 801dfd2:	460c      	mov	r4, r1
 801dfd4:	b913      	cbnz	r3, 801dfdc <_fflush_r+0x10>
 801dfd6:	2500      	movs	r5, #0
 801dfd8:	4628      	mov	r0, r5
 801dfda:	bd38      	pop	{r3, r4, r5, pc}
 801dfdc:	b118      	cbz	r0, 801dfe6 <_fflush_r+0x1a>
 801dfde:	6983      	ldr	r3, [r0, #24]
 801dfe0:	b90b      	cbnz	r3, 801dfe6 <_fflush_r+0x1a>
 801dfe2:	f000 f887 	bl	801e0f4 <__sinit>
 801dfe6:	4b14      	ldr	r3, [pc, #80]	; (801e038 <_fflush_r+0x6c>)
 801dfe8:	429c      	cmp	r4, r3
 801dfea:	d11b      	bne.n	801e024 <_fflush_r+0x58>
 801dfec:	686c      	ldr	r4, [r5, #4]
 801dfee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	d0ef      	beq.n	801dfd6 <_fflush_r+0xa>
 801dff6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dff8:	07d0      	lsls	r0, r2, #31
 801dffa:	d404      	bmi.n	801e006 <_fflush_r+0x3a>
 801dffc:	0599      	lsls	r1, r3, #22
 801dffe:	d402      	bmi.n	801e006 <_fflush_r+0x3a>
 801e000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e002:	f000 f93a 	bl	801e27a <__retarget_lock_acquire_recursive>
 801e006:	4628      	mov	r0, r5
 801e008:	4621      	mov	r1, r4
 801e00a:	f7ff ff59 	bl	801dec0 <__sflush_r>
 801e00e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e010:	07da      	lsls	r2, r3, #31
 801e012:	4605      	mov	r5, r0
 801e014:	d4e0      	bmi.n	801dfd8 <_fflush_r+0xc>
 801e016:	89a3      	ldrh	r3, [r4, #12]
 801e018:	059b      	lsls	r3, r3, #22
 801e01a:	d4dd      	bmi.n	801dfd8 <_fflush_r+0xc>
 801e01c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e01e:	f000 f92d 	bl	801e27c <__retarget_lock_release_recursive>
 801e022:	e7d9      	b.n	801dfd8 <_fflush_r+0xc>
 801e024:	4b05      	ldr	r3, [pc, #20]	; (801e03c <_fflush_r+0x70>)
 801e026:	429c      	cmp	r4, r3
 801e028:	d101      	bne.n	801e02e <_fflush_r+0x62>
 801e02a:	68ac      	ldr	r4, [r5, #8]
 801e02c:	e7df      	b.n	801dfee <_fflush_r+0x22>
 801e02e:	4b04      	ldr	r3, [pc, #16]	; (801e040 <_fflush_r+0x74>)
 801e030:	429c      	cmp	r4, r3
 801e032:	bf08      	it	eq
 801e034:	68ec      	ldreq	r4, [r5, #12]
 801e036:	e7da      	b.n	801dfee <_fflush_r+0x22>
 801e038:	0802017c 	.word	0x0802017c
 801e03c:	0802019c 	.word	0x0802019c
 801e040:	0802015c 	.word	0x0802015c

0801e044 <std>:
 801e044:	2300      	movs	r3, #0
 801e046:	b510      	push	{r4, lr}
 801e048:	4604      	mov	r4, r0
 801e04a:	e9c0 3300 	strd	r3, r3, [r0]
 801e04e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e052:	6083      	str	r3, [r0, #8]
 801e054:	8181      	strh	r1, [r0, #12]
 801e056:	6643      	str	r3, [r0, #100]	; 0x64
 801e058:	81c2      	strh	r2, [r0, #14]
 801e05a:	6183      	str	r3, [r0, #24]
 801e05c:	4619      	mov	r1, r3
 801e05e:	2208      	movs	r2, #8
 801e060:	305c      	adds	r0, #92	; 0x5c
 801e062:	f000 f9a9 	bl	801e3b8 <memset>
 801e066:	4b05      	ldr	r3, [pc, #20]	; (801e07c <std+0x38>)
 801e068:	6263      	str	r3, [r4, #36]	; 0x24
 801e06a:	4b05      	ldr	r3, [pc, #20]	; (801e080 <std+0x3c>)
 801e06c:	62a3      	str	r3, [r4, #40]	; 0x28
 801e06e:	4b05      	ldr	r3, [pc, #20]	; (801e084 <std+0x40>)
 801e070:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e072:	4b05      	ldr	r3, [pc, #20]	; (801e088 <std+0x44>)
 801e074:	6224      	str	r4, [r4, #32]
 801e076:	6323      	str	r3, [r4, #48]	; 0x30
 801e078:	bd10      	pop	{r4, pc}
 801e07a:	bf00      	nop
 801e07c:	0801e731 	.word	0x0801e731
 801e080:	0801e753 	.word	0x0801e753
 801e084:	0801e78b 	.word	0x0801e78b
 801e088:	0801e7af 	.word	0x0801e7af

0801e08c <_cleanup_r>:
 801e08c:	4901      	ldr	r1, [pc, #4]	; (801e094 <_cleanup_r+0x8>)
 801e08e:	f000 b8af 	b.w	801e1f0 <_fwalk_reent>
 801e092:	bf00      	nop
 801e094:	0801dfcd 	.word	0x0801dfcd

0801e098 <__sfmoreglue>:
 801e098:	b570      	push	{r4, r5, r6, lr}
 801e09a:	2268      	movs	r2, #104	; 0x68
 801e09c:	1e4d      	subs	r5, r1, #1
 801e09e:	4355      	muls	r5, r2
 801e0a0:	460e      	mov	r6, r1
 801e0a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e0a6:	f000 f9fb 	bl	801e4a0 <_malloc_r>
 801e0aa:	4604      	mov	r4, r0
 801e0ac:	b140      	cbz	r0, 801e0c0 <__sfmoreglue+0x28>
 801e0ae:	2100      	movs	r1, #0
 801e0b0:	e9c0 1600 	strd	r1, r6, [r0]
 801e0b4:	300c      	adds	r0, #12
 801e0b6:	60a0      	str	r0, [r4, #8]
 801e0b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e0bc:	f000 f97c 	bl	801e3b8 <memset>
 801e0c0:	4620      	mov	r0, r4
 801e0c2:	bd70      	pop	{r4, r5, r6, pc}

0801e0c4 <__sfp_lock_acquire>:
 801e0c4:	4801      	ldr	r0, [pc, #4]	; (801e0cc <__sfp_lock_acquire+0x8>)
 801e0c6:	f000 b8d8 	b.w	801e27a <__retarget_lock_acquire_recursive>
 801e0ca:	bf00      	nop
 801e0cc:	2000981d 	.word	0x2000981d

0801e0d0 <__sfp_lock_release>:
 801e0d0:	4801      	ldr	r0, [pc, #4]	; (801e0d8 <__sfp_lock_release+0x8>)
 801e0d2:	f000 b8d3 	b.w	801e27c <__retarget_lock_release_recursive>
 801e0d6:	bf00      	nop
 801e0d8:	2000981d 	.word	0x2000981d

0801e0dc <__sinit_lock_acquire>:
 801e0dc:	4801      	ldr	r0, [pc, #4]	; (801e0e4 <__sinit_lock_acquire+0x8>)
 801e0de:	f000 b8cc 	b.w	801e27a <__retarget_lock_acquire_recursive>
 801e0e2:	bf00      	nop
 801e0e4:	2000981e 	.word	0x2000981e

0801e0e8 <__sinit_lock_release>:
 801e0e8:	4801      	ldr	r0, [pc, #4]	; (801e0f0 <__sinit_lock_release+0x8>)
 801e0ea:	f000 b8c7 	b.w	801e27c <__retarget_lock_release_recursive>
 801e0ee:	bf00      	nop
 801e0f0:	2000981e 	.word	0x2000981e

0801e0f4 <__sinit>:
 801e0f4:	b510      	push	{r4, lr}
 801e0f6:	4604      	mov	r4, r0
 801e0f8:	f7ff fff0 	bl	801e0dc <__sinit_lock_acquire>
 801e0fc:	69a3      	ldr	r3, [r4, #24]
 801e0fe:	b11b      	cbz	r3, 801e108 <__sinit+0x14>
 801e100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e104:	f7ff bff0 	b.w	801e0e8 <__sinit_lock_release>
 801e108:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e10c:	6523      	str	r3, [r4, #80]	; 0x50
 801e10e:	4b13      	ldr	r3, [pc, #76]	; (801e15c <__sinit+0x68>)
 801e110:	4a13      	ldr	r2, [pc, #76]	; (801e160 <__sinit+0x6c>)
 801e112:	681b      	ldr	r3, [r3, #0]
 801e114:	62a2      	str	r2, [r4, #40]	; 0x28
 801e116:	42a3      	cmp	r3, r4
 801e118:	bf04      	itt	eq
 801e11a:	2301      	moveq	r3, #1
 801e11c:	61a3      	streq	r3, [r4, #24]
 801e11e:	4620      	mov	r0, r4
 801e120:	f000 f820 	bl	801e164 <__sfp>
 801e124:	6060      	str	r0, [r4, #4]
 801e126:	4620      	mov	r0, r4
 801e128:	f000 f81c 	bl	801e164 <__sfp>
 801e12c:	60a0      	str	r0, [r4, #8]
 801e12e:	4620      	mov	r0, r4
 801e130:	f000 f818 	bl	801e164 <__sfp>
 801e134:	2200      	movs	r2, #0
 801e136:	60e0      	str	r0, [r4, #12]
 801e138:	2104      	movs	r1, #4
 801e13a:	6860      	ldr	r0, [r4, #4]
 801e13c:	f7ff ff82 	bl	801e044 <std>
 801e140:	68a0      	ldr	r0, [r4, #8]
 801e142:	2201      	movs	r2, #1
 801e144:	2109      	movs	r1, #9
 801e146:	f7ff ff7d 	bl	801e044 <std>
 801e14a:	68e0      	ldr	r0, [r4, #12]
 801e14c:	2202      	movs	r2, #2
 801e14e:	2112      	movs	r1, #18
 801e150:	f7ff ff78 	bl	801e044 <std>
 801e154:	2301      	movs	r3, #1
 801e156:	61a3      	str	r3, [r4, #24]
 801e158:	e7d2      	b.n	801e100 <__sinit+0xc>
 801e15a:	bf00      	nop
 801e15c:	080201bc 	.word	0x080201bc
 801e160:	0801e08d 	.word	0x0801e08d

0801e164 <__sfp>:
 801e164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e166:	4607      	mov	r7, r0
 801e168:	f7ff ffac 	bl	801e0c4 <__sfp_lock_acquire>
 801e16c:	4b1e      	ldr	r3, [pc, #120]	; (801e1e8 <__sfp+0x84>)
 801e16e:	681e      	ldr	r6, [r3, #0]
 801e170:	69b3      	ldr	r3, [r6, #24]
 801e172:	b913      	cbnz	r3, 801e17a <__sfp+0x16>
 801e174:	4630      	mov	r0, r6
 801e176:	f7ff ffbd 	bl	801e0f4 <__sinit>
 801e17a:	3648      	adds	r6, #72	; 0x48
 801e17c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e180:	3b01      	subs	r3, #1
 801e182:	d503      	bpl.n	801e18c <__sfp+0x28>
 801e184:	6833      	ldr	r3, [r6, #0]
 801e186:	b30b      	cbz	r3, 801e1cc <__sfp+0x68>
 801e188:	6836      	ldr	r6, [r6, #0]
 801e18a:	e7f7      	b.n	801e17c <__sfp+0x18>
 801e18c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e190:	b9d5      	cbnz	r5, 801e1c8 <__sfp+0x64>
 801e192:	4b16      	ldr	r3, [pc, #88]	; (801e1ec <__sfp+0x88>)
 801e194:	60e3      	str	r3, [r4, #12]
 801e196:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e19a:	6665      	str	r5, [r4, #100]	; 0x64
 801e19c:	f000 f86c 	bl	801e278 <__retarget_lock_init_recursive>
 801e1a0:	f7ff ff96 	bl	801e0d0 <__sfp_lock_release>
 801e1a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e1a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e1ac:	6025      	str	r5, [r4, #0]
 801e1ae:	61a5      	str	r5, [r4, #24]
 801e1b0:	2208      	movs	r2, #8
 801e1b2:	4629      	mov	r1, r5
 801e1b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e1b8:	f000 f8fe 	bl	801e3b8 <memset>
 801e1bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e1c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e1c4:	4620      	mov	r0, r4
 801e1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e1c8:	3468      	adds	r4, #104	; 0x68
 801e1ca:	e7d9      	b.n	801e180 <__sfp+0x1c>
 801e1cc:	2104      	movs	r1, #4
 801e1ce:	4638      	mov	r0, r7
 801e1d0:	f7ff ff62 	bl	801e098 <__sfmoreglue>
 801e1d4:	4604      	mov	r4, r0
 801e1d6:	6030      	str	r0, [r6, #0]
 801e1d8:	2800      	cmp	r0, #0
 801e1da:	d1d5      	bne.n	801e188 <__sfp+0x24>
 801e1dc:	f7ff ff78 	bl	801e0d0 <__sfp_lock_release>
 801e1e0:	230c      	movs	r3, #12
 801e1e2:	603b      	str	r3, [r7, #0]
 801e1e4:	e7ee      	b.n	801e1c4 <__sfp+0x60>
 801e1e6:	bf00      	nop
 801e1e8:	080201bc 	.word	0x080201bc
 801e1ec:	ffff0001 	.word	0xffff0001

0801e1f0 <_fwalk_reent>:
 801e1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e1f4:	4606      	mov	r6, r0
 801e1f6:	4688      	mov	r8, r1
 801e1f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e1fc:	2700      	movs	r7, #0
 801e1fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e202:	f1b9 0901 	subs.w	r9, r9, #1
 801e206:	d505      	bpl.n	801e214 <_fwalk_reent+0x24>
 801e208:	6824      	ldr	r4, [r4, #0]
 801e20a:	2c00      	cmp	r4, #0
 801e20c:	d1f7      	bne.n	801e1fe <_fwalk_reent+0xe>
 801e20e:	4638      	mov	r0, r7
 801e210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e214:	89ab      	ldrh	r3, [r5, #12]
 801e216:	2b01      	cmp	r3, #1
 801e218:	d907      	bls.n	801e22a <_fwalk_reent+0x3a>
 801e21a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e21e:	3301      	adds	r3, #1
 801e220:	d003      	beq.n	801e22a <_fwalk_reent+0x3a>
 801e222:	4629      	mov	r1, r5
 801e224:	4630      	mov	r0, r6
 801e226:	47c0      	blx	r8
 801e228:	4307      	orrs	r7, r0
 801e22a:	3568      	adds	r5, #104	; 0x68
 801e22c:	e7e9      	b.n	801e202 <_fwalk_reent+0x12>
	...

0801e230 <__libc_init_array>:
 801e230:	b570      	push	{r4, r5, r6, lr}
 801e232:	4d0d      	ldr	r5, [pc, #52]	; (801e268 <__libc_init_array+0x38>)
 801e234:	4c0d      	ldr	r4, [pc, #52]	; (801e26c <__libc_init_array+0x3c>)
 801e236:	1b64      	subs	r4, r4, r5
 801e238:	10a4      	asrs	r4, r4, #2
 801e23a:	2600      	movs	r6, #0
 801e23c:	42a6      	cmp	r6, r4
 801e23e:	d109      	bne.n	801e254 <__libc_init_array+0x24>
 801e240:	4d0b      	ldr	r5, [pc, #44]	; (801e270 <__libc_init_array+0x40>)
 801e242:	4c0c      	ldr	r4, [pc, #48]	; (801e274 <__libc_init_array+0x44>)
 801e244:	f001 f910 	bl	801f468 <_init>
 801e248:	1b64      	subs	r4, r4, r5
 801e24a:	10a4      	asrs	r4, r4, #2
 801e24c:	2600      	movs	r6, #0
 801e24e:	42a6      	cmp	r6, r4
 801e250:	d105      	bne.n	801e25e <__libc_init_array+0x2e>
 801e252:	bd70      	pop	{r4, r5, r6, pc}
 801e254:	f855 3b04 	ldr.w	r3, [r5], #4
 801e258:	4798      	blx	r3
 801e25a:	3601      	adds	r6, #1
 801e25c:	e7ee      	b.n	801e23c <__libc_init_array+0xc>
 801e25e:	f855 3b04 	ldr.w	r3, [r5], #4
 801e262:	4798      	blx	r3
 801e264:	3601      	adds	r6, #1
 801e266:	e7f2      	b.n	801e24e <__libc_init_array+0x1e>
 801e268:	080201fc 	.word	0x080201fc
 801e26c:	080201fc 	.word	0x080201fc
 801e270:	080201fc 	.word	0x080201fc
 801e274:	08020200 	.word	0x08020200

0801e278 <__retarget_lock_init_recursive>:
 801e278:	4770      	bx	lr

0801e27a <__retarget_lock_acquire_recursive>:
 801e27a:	4770      	bx	lr

0801e27c <__retarget_lock_release_recursive>:
 801e27c:	4770      	bx	lr

0801e27e <__swhatbuf_r>:
 801e27e:	b570      	push	{r4, r5, r6, lr}
 801e280:	460e      	mov	r6, r1
 801e282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e286:	2900      	cmp	r1, #0
 801e288:	b096      	sub	sp, #88	; 0x58
 801e28a:	4614      	mov	r4, r2
 801e28c:	461d      	mov	r5, r3
 801e28e:	da08      	bge.n	801e2a2 <__swhatbuf_r+0x24>
 801e290:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e294:	2200      	movs	r2, #0
 801e296:	602a      	str	r2, [r5, #0]
 801e298:	061a      	lsls	r2, r3, #24
 801e29a:	d410      	bmi.n	801e2be <__swhatbuf_r+0x40>
 801e29c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e2a0:	e00e      	b.n	801e2c0 <__swhatbuf_r+0x42>
 801e2a2:	466a      	mov	r2, sp
 801e2a4:	f000 fbc6 	bl	801ea34 <_fstat_r>
 801e2a8:	2800      	cmp	r0, #0
 801e2aa:	dbf1      	blt.n	801e290 <__swhatbuf_r+0x12>
 801e2ac:	9a01      	ldr	r2, [sp, #4]
 801e2ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e2b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e2b6:	425a      	negs	r2, r3
 801e2b8:	415a      	adcs	r2, r3
 801e2ba:	602a      	str	r2, [r5, #0]
 801e2bc:	e7ee      	b.n	801e29c <__swhatbuf_r+0x1e>
 801e2be:	2340      	movs	r3, #64	; 0x40
 801e2c0:	2000      	movs	r0, #0
 801e2c2:	6023      	str	r3, [r4, #0]
 801e2c4:	b016      	add	sp, #88	; 0x58
 801e2c6:	bd70      	pop	{r4, r5, r6, pc}

0801e2c8 <__smakebuf_r>:
 801e2c8:	898b      	ldrh	r3, [r1, #12]
 801e2ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e2cc:	079d      	lsls	r5, r3, #30
 801e2ce:	4606      	mov	r6, r0
 801e2d0:	460c      	mov	r4, r1
 801e2d2:	d507      	bpl.n	801e2e4 <__smakebuf_r+0x1c>
 801e2d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e2d8:	6023      	str	r3, [r4, #0]
 801e2da:	6123      	str	r3, [r4, #16]
 801e2dc:	2301      	movs	r3, #1
 801e2de:	6163      	str	r3, [r4, #20]
 801e2e0:	b002      	add	sp, #8
 801e2e2:	bd70      	pop	{r4, r5, r6, pc}
 801e2e4:	ab01      	add	r3, sp, #4
 801e2e6:	466a      	mov	r2, sp
 801e2e8:	f7ff ffc9 	bl	801e27e <__swhatbuf_r>
 801e2ec:	9900      	ldr	r1, [sp, #0]
 801e2ee:	4605      	mov	r5, r0
 801e2f0:	4630      	mov	r0, r6
 801e2f2:	f000 f8d5 	bl	801e4a0 <_malloc_r>
 801e2f6:	b948      	cbnz	r0, 801e30c <__smakebuf_r+0x44>
 801e2f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e2fc:	059a      	lsls	r2, r3, #22
 801e2fe:	d4ef      	bmi.n	801e2e0 <__smakebuf_r+0x18>
 801e300:	f023 0303 	bic.w	r3, r3, #3
 801e304:	f043 0302 	orr.w	r3, r3, #2
 801e308:	81a3      	strh	r3, [r4, #12]
 801e30a:	e7e3      	b.n	801e2d4 <__smakebuf_r+0xc>
 801e30c:	4b0d      	ldr	r3, [pc, #52]	; (801e344 <__smakebuf_r+0x7c>)
 801e30e:	62b3      	str	r3, [r6, #40]	; 0x28
 801e310:	89a3      	ldrh	r3, [r4, #12]
 801e312:	6020      	str	r0, [r4, #0]
 801e314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e318:	81a3      	strh	r3, [r4, #12]
 801e31a:	9b00      	ldr	r3, [sp, #0]
 801e31c:	6163      	str	r3, [r4, #20]
 801e31e:	9b01      	ldr	r3, [sp, #4]
 801e320:	6120      	str	r0, [r4, #16]
 801e322:	b15b      	cbz	r3, 801e33c <__smakebuf_r+0x74>
 801e324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e328:	4630      	mov	r0, r6
 801e32a:	f000 fb95 	bl	801ea58 <_isatty_r>
 801e32e:	b128      	cbz	r0, 801e33c <__smakebuf_r+0x74>
 801e330:	89a3      	ldrh	r3, [r4, #12]
 801e332:	f023 0303 	bic.w	r3, r3, #3
 801e336:	f043 0301 	orr.w	r3, r3, #1
 801e33a:	81a3      	strh	r3, [r4, #12]
 801e33c:	89a0      	ldrh	r0, [r4, #12]
 801e33e:	4305      	orrs	r5, r0
 801e340:	81a5      	strh	r5, [r4, #12]
 801e342:	e7cd      	b.n	801e2e0 <__smakebuf_r+0x18>
 801e344:	0801e08d 	.word	0x0801e08d

0801e348 <malloc>:
 801e348:	4b02      	ldr	r3, [pc, #8]	; (801e354 <malloc+0xc>)
 801e34a:	4601      	mov	r1, r0
 801e34c:	6818      	ldr	r0, [r3, #0]
 801e34e:	f000 b8a7 	b.w	801e4a0 <_malloc_r>
 801e352:	bf00      	nop
 801e354:	20000098 	.word	0x20000098

0801e358 <free>:
 801e358:	4b02      	ldr	r3, [pc, #8]	; (801e364 <free+0xc>)
 801e35a:	4601      	mov	r1, r0
 801e35c:	6818      	ldr	r0, [r3, #0]
 801e35e:	f000 b833 	b.w	801e3c8 <_free_r>
 801e362:	bf00      	nop
 801e364:	20000098 	.word	0x20000098

0801e368 <memcpy>:
 801e368:	440a      	add	r2, r1
 801e36a:	4291      	cmp	r1, r2
 801e36c:	f100 33ff 	add.w	r3, r0, #4294967295
 801e370:	d100      	bne.n	801e374 <memcpy+0xc>
 801e372:	4770      	bx	lr
 801e374:	b510      	push	{r4, lr}
 801e376:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e37a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e37e:	4291      	cmp	r1, r2
 801e380:	d1f9      	bne.n	801e376 <memcpy+0xe>
 801e382:	bd10      	pop	{r4, pc}

0801e384 <memmove>:
 801e384:	4288      	cmp	r0, r1
 801e386:	b510      	push	{r4, lr}
 801e388:	eb01 0402 	add.w	r4, r1, r2
 801e38c:	d902      	bls.n	801e394 <memmove+0x10>
 801e38e:	4284      	cmp	r4, r0
 801e390:	4623      	mov	r3, r4
 801e392:	d807      	bhi.n	801e3a4 <memmove+0x20>
 801e394:	1e43      	subs	r3, r0, #1
 801e396:	42a1      	cmp	r1, r4
 801e398:	d008      	beq.n	801e3ac <memmove+0x28>
 801e39a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e39e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e3a2:	e7f8      	b.n	801e396 <memmove+0x12>
 801e3a4:	4402      	add	r2, r0
 801e3a6:	4601      	mov	r1, r0
 801e3a8:	428a      	cmp	r2, r1
 801e3aa:	d100      	bne.n	801e3ae <memmove+0x2a>
 801e3ac:	bd10      	pop	{r4, pc}
 801e3ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e3b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e3b6:	e7f7      	b.n	801e3a8 <memmove+0x24>

0801e3b8 <memset>:
 801e3b8:	4402      	add	r2, r0
 801e3ba:	4603      	mov	r3, r0
 801e3bc:	4293      	cmp	r3, r2
 801e3be:	d100      	bne.n	801e3c2 <memset+0xa>
 801e3c0:	4770      	bx	lr
 801e3c2:	f803 1b01 	strb.w	r1, [r3], #1
 801e3c6:	e7f9      	b.n	801e3bc <memset+0x4>

0801e3c8 <_free_r>:
 801e3c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e3ca:	2900      	cmp	r1, #0
 801e3cc:	d044      	beq.n	801e458 <_free_r+0x90>
 801e3ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e3d2:	9001      	str	r0, [sp, #4]
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	f1a1 0404 	sub.w	r4, r1, #4
 801e3da:	bfb8      	it	lt
 801e3dc:	18e4      	addlt	r4, r4, r3
 801e3de:	f000 fb5d 	bl	801ea9c <__malloc_lock>
 801e3e2:	4a1e      	ldr	r2, [pc, #120]	; (801e45c <_free_r+0x94>)
 801e3e4:	9801      	ldr	r0, [sp, #4]
 801e3e6:	6813      	ldr	r3, [r2, #0]
 801e3e8:	b933      	cbnz	r3, 801e3f8 <_free_r+0x30>
 801e3ea:	6063      	str	r3, [r4, #4]
 801e3ec:	6014      	str	r4, [r2, #0]
 801e3ee:	b003      	add	sp, #12
 801e3f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e3f4:	f000 bb58 	b.w	801eaa8 <__malloc_unlock>
 801e3f8:	42a3      	cmp	r3, r4
 801e3fa:	d908      	bls.n	801e40e <_free_r+0x46>
 801e3fc:	6825      	ldr	r5, [r4, #0]
 801e3fe:	1961      	adds	r1, r4, r5
 801e400:	428b      	cmp	r3, r1
 801e402:	bf01      	itttt	eq
 801e404:	6819      	ldreq	r1, [r3, #0]
 801e406:	685b      	ldreq	r3, [r3, #4]
 801e408:	1949      	addeq	r1, r1, r5
 801e40a:	6021      	streq	r1, [r4, #0]
 801e40c:	e7ed      	b.n	801e3ea <_free_r+0x22>
 801e40e:	461a      	mov	r2, r3
 801e410:	685b      	ldr	r3, [r3, #4]
 801e412:	b10b      	cbz	r3, 801e418 <_free_r+0x50>
 801e414:	42a3      	cmp	r3, r4
 801e416:	d9fa      	bls.n	801e40e <_free_r+0x46>
 801e418:	6811      	ldr	r1, [r2, #0]
 801e41a:	1855      	adds	r5, r2, r1
 801e41c:	42a5      	cmp	r5, r4
 801e41e:	d10b      	bne.n	801e438 <_free_r+0x70>
 801e420:	6824      	ldr	r4, [r4, #0]
 801e422:	4421      	add	r1, r4
 801e424:	1854      	adds	r4, r2, r1
 801e426:	42a3      	cmp	r3, r4
 801e428:	6011      	str	r1, [r2, #0]
 801e42a:	d1e0      	bne.n	801e3ee <_free_r+0x26>
 801e42c:	681c      	ldr	r4, [r3, #0]
 801e42e:	685b      	ldr	r3, [r3, #4]
 801e430:	6053      	str	r3, [r2, #4]
 801e432:	4421      	add	r1, r4
 801e434:	6011      	str	r1, [r2, #0]
 801e436:	e7da      	b.n	801e3ee <_free_r+0x26>
 801e438:	d902      	bls.n	801e440 <_free_r+0x78>
 801e43a:	230c      	movs	r3, #12
 801e43c:	6003      	str	r3, [r0, #0]
 801e43e:	e7d6      	b.n	801e3ee <_free_r+0x26>
 801e440:	6825      	ldr	r5, [r4, #0]
 801e442:	1961      	adds	r1, r4, r5
 801e444:	428b      	cmp	r3, r1
 801e446:	bf04      	itt	eq
 801e448:	6819      	ldreq	r1, [r3, #0]
 801e44a:	685b      	ldreq	r3, [r3, #4]
 801e44c:	6063      	str	r3, [r4, #4]
 801e44e:	bf04      	itt	eq
 801e450:	1949      	addeq	r1, r1, r5
 801e452:	6021      	streq	r1, [r4, #0]
 801e454:	6054      	str	r4, [r2, #4]
 801e456:	e7ca      	b.n	801e3ee <_free_r+0x26>
 801e458:	b003      	add	sp, #12
 801e45a:	bd30      	pop	{r4, r5, pc}
 801e45c:	20009820 	.word	0x20009820

0801e460 <sbrk_aligned>:
 801e460:	b570      	push	{r4, r5, r6, lr}
 801e462:	4e0e      	ldr	r6, [pc, #56]	; (801e49c <sbrk_aligned+0x3c>)
 801e464:	460c      	mov	r4, r1
 801e466:	6831      	ldr	r1, [r6, #0]
 801e468:	4605      	mov	r5, r0
 801e46a:	b911      	cbnz	r1, 801e472 <sbrk_aligned+0x12>
 801e46c:	f000 f930 	bl	801e6d0 <_sbrk_r>
 801e470:	6030      	str	r0, [r6, #0]
 801e472:	4621      	mov	r1, r4
 801e474:	4628      	mov	r0, r5
 801e476:	f000 f92b 	bl	801e6d0 <_sbrk_r>
 801e47a:	1c43      	adds	r3, r0, #1
 801e47c:	d00a      	beq.n	801e494 <sbrk_aligned+0x34>
 801e47e:	1cc4      	adds	r4, r0, #3
 801e480:	f024 0403 	bic.w	r4, r4, #3
 801e484:	42a0      	cmp	r0, r4
 801e486:	d007      	beq.n	801e498 <sbrk_aligned+0x38>
 801e488:	1a21      	subs	r1, r4, r0
 801e48a:	4628      	mov	r0, r5
 801e48c:	f000 f920 	bl	801e6d0 <_sbrk_r>
 801e490:	3001      	adds	r0, #1
 801e492:	d101      	bne.n	801e498 <sbrk_aligned+0x38>
 801e494:	f04f 34ff 	mov.w	r4, #4294967295
 801e498:	4620      	mov	r0, r4
 801e49a:	bd70      	pop	{r4, r5, r6, pc}
 801e49c:	20009824 	.word	0x20009824

0801e4a0 <_malloc_r>:
 801e4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e4a4:	1ccd      	adds	r5, r1, #3
 801e4a6:	f025 0503 	bic.w	r5, r5, #3
 801e4aa:	3508      	adds	r5, #8
 801e4ac:	2d0c      	cmp	r5, #12
 801e4ae:	bf38      	it	cc
 801e4b0:	250c      	movcc	r5, #12
 801e4b2:	2d00      	cmp	r5, #0
 801e4b4:	4607      	mov	r7, r0
 801e4b6:	db01      	blt.n	801e4bc <_malloc_r+0x1c>
 801e4b8:	42a9      	cmp	r1, r5
 801e4ba:	d905      	bls.n	801e4c8 <_malloc_r+0x28>
 801e4bc:	230c      	movs	r3, #12
 801e4be:	603b      	str	r3, [r7, #0]
 801e4c0:	2600      	movs	r6, #0
 801e4c2:	4630      	mov	r0, r6
 801e4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e4c8:	4e2e      	ldr	r6, [pc, #184]	; (801e584 <_malloc_r+0xe4>)
 801e4ca:	f000 fae7 	bl	801ea9c <__malloc_lock>
 801e4ce:	6833      	ldr	r3, [r6, #0]
 801e4d0:	461c      	mov	r4, r3
 801e4d2:	bb34      	cbnz	r4, 801e522 <_malloc_r+0x82>
 801e4d4:	4629      	mov	r1, r5
 801e4d6:	4638      	mov	r0, r7
 801e4d8:	f7ff ffc2 	bl	801e460 <sbrk_aligned>
 801e4dc:	1c43      	adds	r3, r0, #1
 801e4de:	4604      	mov	r4, r0
 801e4e0:	d14d      	bne.n	801e57e <_malloc_r+0xde>
 801e4e2:	6834      	ldr	r4, [r6, #0]
 801e4e4:	4626      	mov	r6, r4
 801e4e6:	2e00      	cmp	r6, #0
 801e4e8:	d140      	bne.n	801e56c <_malloc_r+0xcc>
 801e4ea:	6823      	ldr	r3, [r4, #0]
 801e4ec:	4631      	mov	r1, r6
 801e4ee:	4638      	mov	r0, r7
 801e4f0:	eb04 0803 	add.w	r8, r4, r3
 801e4f4:	f000 f8ec 	bl	801e6d0 <_sbrk_r>
 801e4f8:	4580      	cmp	r8, r0
 801e4fa:	d13a      	bne.n	801e572 <_malloc_r+0xd2>
 801e4fc:	6821      	ldr	r1, [r4, #0]
 801e4fe:	3503      	adds	r5, #3
 801e500:	1a6d      	subs	r5, r5, r1
 801e502:	f025 0503 	bic.w	r5, r5, #3
 801e506:	3508      	adds	r5, #8
 801e508:	2d0c      	cmp	r5, #12
 801e50a:	bf38      	it	cc
 801e50c:	250c      	movcc	r5, #12
 801e50e:	4629      	mov	r1, r5
 801e510:	4638      	mov	r0, r7
 801e512:	f7ff ffa5 	bl	801e460 <sbrk_aligned>
 801e516:	3001      	adds	r0, #1
 801e518:	d02b      	beq.n	801e572 <_malloc_r+0xd2>
 801e51a:	6823      	ldr	r3, [r4, #0]
 801e51c:	442b      	add	r3, r5
 801e51e:	6023      	str	r3, [r4, #0]
 801e520:	e00e      	b.n	801e540 <_malloc_r+0xa0>
 801e522:	6822      	ldr	r2, [r4, #0]
 801e524:	1b52      	subs	r2, r2, r5
 801e526:	d41e      	bmi.n	801e566 <_malloc_r+0xc6>
 801e528:	2a0b      	cmp	r2, #11
 801e52a:	d916      	bls.n	801e55a <_malloc_r+0xba>
 801e52c:	1961      	adds	r1, r4, r5
 801e52e:	42a3      	cmp	r3, r4
 801e530:	6025      	str	r5, [r4, #0]
 801e532:	bf18      	it	ne
 801e534:	6059      	strne	r1, [r3, #4]
 801e536:	6863      	ldr	r3, [r4, #4]
 801e538:	bf08      	it	eq
 801e53a:	6031      	streq	r1, [r6, #0]
 801e53c:	5162      	str	r2, [r4, r5]
 801e53e:	604b      	str	r3, [r1, #4]
 801e540:	4638      	mov	r0, r7
 801e542:	f104 060b 	add.w	r6, r4, #11
 801e546:	f000 faaf 	bl	801eaa8 <__malloc_unlock>
 801e54a:	f026 0607 	bic.w	r6, r6, #7
 801e54e:	1d23      	adds	r3, r4, #4
 801e550:	1af2      	subs	r2, r6, r3
 801e552:	d0b6      	beq.n	801e4c2 <_malloc_r+0x22>
 801e554:	1b9b      	subs	r3, r3, r6
 801e556:	50a3      	str	r3, [r4, r2]
 801e558:	e7b3      	b.n	801e4c2 <_malloc_r+0x22>
 801e55a:	6862      	ldr	r2, [r4, #4]
 801e55c:	42a3      	cmp	r3, r4
 801e55e:	bf0c      	ite	eq
 801e560:	6032      	streq	r2, [r6, #0]
 801e562:	605a      	strne	r2, [r3, #4]
 801e564:	e7ec      	b.n	801e540 <_malloc_r+0xa0>
 801e566:	4623      	mov	r3, r4
 801e568:	6864      	ldr	r4, [r4, #4]
 801e56a:	e7b2      	b.n	801e4d2 <_malloc_r+0x32>
 801e56c:	4634      	mov	r4, r6
 801e56e:	6876      	ldr	r6, [r6, #4]
 801e570:	e7b9      	b.n	801e4e6 <_malloc_r+0x46>
 801e572:	230c      	movs	r3, #12
 801e574:	603b      	str	r3, [r7, #0]
 801e576:	4638      	mov	r0, r7
 801e578:	f000 fa96 	bl	801eaa8 <__malloc_unlock>
 801e57c:	e7a1      	b.n	801e4c2 <_malloc_r+0x22>
 801e57e:	6025      	str	r5, [r4, #0]
 801e580:	e7de      	b.n	801e540 <_malloc_r+0xa0>
 801e582:	bf00      	nop
 801e584:	20009820 	.word	0x20009820

0801e588 <iprintf>:
 801e588:	b40f      	push	{r0, r1, r2, r3}
 801e58a:	4b0a      	ldr	r3, [pc, #40]	; (801e5b4 <iprintf+0x2c>)
 801e58c:	b513      	push	{r0, r1, r4, lr}
 801e58e:	681c      	ldr	r4, [r3, #0]
 801e590:	b124      	cbz	r4, 801e59c <iprintf+0x14>
 801e592:	69a3      	ldr	r3, [r4, #24]
 801e594:	b913      	cbnz	r3, 801e59c <iprintf+0x14>
 801e596:	4620      	mov	r0, r4
 801e598:	f7ff fdac 	bl	801e0f4 <__sinit>
 801e59c:	ab05      	add	r3, sp, #20
 801e59e:	9a04      	ldr	r2, [sp, #16]
 801e5a0:	68a1      	ldr	r1, [r4, #8]
 801e5a2:	9301      	str	r3, [sp, #4]
 801e5a4:	4620      	mov	r0, r4
 801e5a6:	f000 fc39 	bl	801ee1c <_vfiprintf_r>
 801e5aa:	b002      	add	sp, #8
 801e5ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5b0:	b004      	add	sp, #16
 801e5b2:	4770      	bx	lr
 801e5b4:	20000098 	.word	0x20000098

0801e5b8 <putchar>:
 801e5b8:	4b09      	ldr	r3, [pc, #36]	; (801e5e0 <putchar+0x28>)
 801e5ba:	b513      	push	{r0, r1, r4, lr}
 801e5bc:	681c      	ldr	r4, [r3, #0]
 801e5be:	4601      	mov	r1, r0
 801e5c0:	b134      	cbz	r4, 801e5d0 <putchar+0x18>
 801e5c2:	69a3      	ldr	r3, [r4, #24]
 801e5c4:	b923      	cbnz	r3, 801e5d0 <putchar+0x18>
 801e5c6:	9001      	str	r0, [sp, #4]
 801e5c8:	4620      	mov	r0, r4
 801e5ca:	f7ff fd93 	bl	801e0f4 <__sinit>
 801e5ce:	9901      	ldr	r1, [sp, #4]
 801e5d0:	68a2      	ldr	r2, [r4, #8]
 801e5d2:	4620      	mov	r0, r4
 801e5d4:	b002      	add	sp, #8
 801e5d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5da:	f000 bee3 	b.w	801f3a4 <_putc_r>
 801e5de:	bf00      	nop
 801e5e0:	20000098 	.word	0x20000098

0801e5e4 <_puts_r>:
 801e5e4:	b570      	push	{r4, r5, r6, lr}
 801e5e6:	460e      	mov	r6, r1
 801e5e8:	4605      	mov	r5, r0
 801e5ea:	b118      	cbz	r0, 801e5f4 <_puts_r+0x10>
 801e5ec:	6983      	ldr	r3, [r0, #24]
 801e5ee:	b90b      	cbnz	r3, 801e5f4 <_puts_r+0x10>
 801e5f0:	f7ff fd80 	bl	801e0f4 <__sinit>
 801e5f4:	69ab      	ldr	r3, [r5, #24]
 801e5f6:	68ac      	ldr	r4, [r5, #8]
 801e5f8:	b913      	cbnz	r3, 801e600 <_puts_r+0x1c>
 801e5fa:	4628      	mov	r0, r5
 801e5fc:	f7ff fd7a 	bl	801e0f4 <__sinit>
 801e600:	4b2c      	ldr	r3, [pc, #176]	; (801e6b4 <_puts_r+0xd0>)
 801e602:	429c      	cmp	r4, r3
 801e604:	d120      	bne.n	801e648 <_puts_r+0x64>
 801e606:	686c      	ldr	r4, [r5, #4]
 801e608:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e60a:	07db      	lsls	r3, r3, #31
 801e60c:	d405      	bmi.n	801e61a <_puts_r+0x36>
 801e60e:	89a3      	ldrh	r3, [r4, #12]
 801e610:	0598      	lsls	r0, r3, #22
 801e612:	d402      	bmi.n	801e61a <_puts_r+0x36>
 801e614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e616:	f7ff fe30 	bl	801e27a <__retarget_lock_acquire_recursive>
 801e61a:	89a3      	ldrh	r3, [r4, #12]
 801e61c:	0719      	lsls	r1, r3, #28
 801e61e:	d51d      	bpl.n	801e65c <_puts_r+0x78>
 801e620:	6923      	ldr	r3, [r4, #16]
 801e622:	b1db      	cbz	r3, 801e65c <_puts_r+0x78>
 801e624:	3e01      	subs	r6, #1
 801e626:	68a3      	ldr	r3, [r4, #8]
 801e628:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e62c:	3b01      	subs	r3, #1
 801e62e:	60a3      	str	r3, [r4, #8]
 801e630:	bb39      	cbnz	r1, 801e682 <_puts_r+0x9e>
 801e632:	2b00      	cmp	r3, #0
 801e634:	da38      	bge.n	801e6a8 <_puts_r+0xc4>
 801e636:	4622      	mov	r2, r4
 801e638:	210a      	movs	r1, #10
 801e63a:	4628      	mov	r0, r5
 801e63c:	f000 f918 	bl	801e870 <__swbuf_r>
 801e640:	3001      	adds	r0, #1
 801e642:	d011      	beq.n	801e668 <_puts_r+0x84>
 801e644:	250a      	movs	r5, #10
 801e646:	e011      	b.n	801e66c <_puts_r+0x88>
 801e648:	4b1b      	ldr	r3, [pc, #108]	; (801e6b8 <_puts_r+0xd4>)
 801e64a:	429c      	cmp	r4, r3
 801e64c:	d101      	bne.n	801e652 <_puts_r+0x6e>
 801e64e:	68ac      	ldr	r4, [r5, #8]
 801e650:	e7da      	b.n	801e608 <_puts_r+0x24>
 801e652:	4b1a      	ldr	r3, [pc, #104]	; (801e6bc <_puts_r+0xd8>)
 801e654:	429c      	cmp	r4, r3
 801e656:	bf08      	it	eq
 801e658:	68ec      	ldreq	r4, [r5, #12]
 801e65a:	e7d5      	b.n	801e608 <_puts_r+0x24>
 801e65c:	4621      	mov	r1, r4
 801e65e:	4628      	mov	r0, r5
 801e660:	f000 f96a 	bl	801e938 <__swsetup_r>
 801e664:	2800      	cmp	r0, #0
 801e666:	d0dd      	beq.n	801e624 <_puts_r+0x40>
 801e668:	f04f 35ff 	mov.w	r5, #4294967295
 801e66c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e66e:	07da      	lsls	r2, r3, #31
 801e670:	d405      	bmi.n	801e67e <_puts_r+0x9a>
 801e672:	89a3      	ldrh	r3, [r4, #12]
 801e674:	059b      	lsls	r3, r3, #22
 801e676:	d402      	bmi.n	801e67e <_puts_r+0x9a>
 801e678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e67a:	f7ff fdff 	bl	801e27c <__retarget_lock_release_recursive>
 801e67e:	4628      	mov	r0, r5
 801e680:	bd70      	pop	{r4, r5, r6, pc}
 801e682:	2b00      	cmp	r3, #0
 801e684:	da04      	bge.n	801e690 <_puts_r+0xac>
 801e686:	69a2      	ldr	r2, [r4, #24]
 801e688:	429a      	cmp	r2, r3
 801e68a:	dc06      	bgt.n	801e69a <_puts_r+0xb6>
 801e68c:	290a      	cmp	r1, #10
 801e68e:	d004      	beq.n	801e69a <_puts_r+0xb6>
 801e690:	6823      	ldr	r3, [r4, #0]
 801e692:	1c5a      	adds	r2, r3, #1
 801e694:	6022      	str	r2, [r4, #0]
 801e696:	7019      	strb	r1, [r3, #0]
 801e698:	e7c5      	b.n	801e626 <_puts_r+0x42>
 801e69a:	4622      	mov	r2, r4
 801e69c:	4628      	mov	r0, r5
 801e69e:	f000 f8e7 	bl	801e870 <__swbuf_r>
 801e6a2:	3001      	adds	r0, #1
 801e6a4:	d1bf      	bne.n	801e626 <_puts_r+0x42>
 801e6a6:	e7df      	b.n	801e668 <_puts_r+0x84>
 801e6a8:	6823      	ldr	r3, [r4, #0]
 801e6aa:	250a      	movs	r5, #10
 801e6ac:	1c5a      	adds	r2, r3, #1
 801e6ae:	6022      	str	r2, [r4, #0]
 801e6b0:	701d      	strb	r5, [r3, #0]
 801e6b2:	e7db      	b.n	801e66c <_puts_r+0x88>
 801e6b4:	0802017c 	.word	0x0802017c
 801e6b8:	0802019c 	.word	0x0802019c
 801e6bc:	0802015c 	.word	0x0802015c

0801e6c0 <puts>:
 801e6c0:	4b02      	ldr	r3, [pc, #8]	; (801e6cc <puts+0xc>)
 801e6c2:	4601      	mov	r1, r0
 801e6c4:	6818      	ldr	r0, [r3, #0]
 801e6c6:	f7ff bf8d 	b.w	801e5e4 <_puts_r>
 801e6ca:	bf00      	nop
 801e6cc:	20000098 	.word	0x20000098

0801e6d0 <_sbrk_r>:
 801e6d0:	b538      	push	{r3, r4, r5, lr}
 801e6d2:	4d06      	ldr	r5, [pc, #24]	; (801e6ec <_sbrk_r+0x1c>)
 801e6d4:	2300      	movs	r3, #0
 801e6d6:	4604      	mov	r4, r0
 801e6d8:	4608      	mov	r0, r1
 801e6da:	602b      	str	r3, [r5, #0]
 801e6dc:	f7e4 fdac 	bl	8003238 <_sbrk>
 801e6e0:	1c43      	adds	r3, r0, #1
 801e6e2:	d102      	bne.n	801e6ea <_sbrk_r+0x1a>
 801e6e4:	682b      	ldr	r3, [r5, #0]
 801e6e6:	b103      	cbz	r3, 801e6ea <_sbrk_r+0x1a>
 801e6e8:	6023      	str	r3, [r4, #0]
 801e6ea:	bd38      	pop	{r3, r4, r5, pc}
 801e6ec:	20009828 	.word	0x20009828

0801e6f0 <siprintf>:
 801e6f0:	b40e      	push	{r1, r2, r3}
 801e6f2:	b500      	push	{lr}
 801e6f4:	b09c      	sub	sp, #112	; 0x70
 801e6f6:	ab1d      	add	r3, sp, #116	; 0x74
 801e6f8:	9002      	str	r0, [sp, #8]
 801e6fa:	9006      	str	r0, [sp, #24]
 801e6fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e700:	4809      	ldr	r0, [pc, #36]	; (801e728 <siprintf+0x38>)
 801e702:	9107      	str	r1, [sp, #28]
 801e704:	9104      	str	r1, [sp, #16]
 801e706:	4909      	ldr	r1, [pc, #36]	; (801e72c <siprintf+0x3c>)
 801e708:	f853 2b04 	ldr.w	r2, [r3], #4
 801e70c:	9105      	str	r1, [sp, #20]
 801e70e:	6800      	ldr	r0, [r0, #0]
 801e710:	9301      	str	r3, [sp, #4]
 801e712:	a902      	add	r1, sp, #8
 801e714:	f000 fa58 	bl	801ebc8 <_svfiprintf_r>
 801e718:	9b02      	ldr	r3, [sp, #8]
 801e71a:	2200      	movs	r2, #0
 801e71c:	701a      	strb	r2, [r3, #0]
 801e71e:	b01c      	add	sp, #112	; 0x70
 801e720:	f85d eb04 	ldr.w	lr, [sp], #4
 801e724:	b003      	add	sp, #12
 801e726:	4770      	bx	lr
 801e728:	20000098 	.word	0x20000098
 801e72c:	ffff0208 	.word	0xffff0208

0801e730 <__sread>:
 801e730:	b510      	push	{r4, lr}
 801e732:	460c      	mov	r4, r1
 801e734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e738:	f000 fe7c 	bl	801f434 <_read_r>
 801e73c:	2800      	cmp	r0, #0
 801e73e:	bfab      	itete	ge
 801e740:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e742:	89a3      	ldrhlt	r3, [r4, #12]
 801e744:	181b      	addge	r3, r3, r0
 801e746:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e74a:	bfac      	ite	ge
 801e74c:	6563      	strge	r3, [r4, #84]	; 0x54
 801e74e:	81a3      	strhlt	r3, [r4, #12]
 801e750:	bd10      	pop	{r4, pc}

0801e752 <__swrite>:
 801e752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e756:	461f      	mov	r7, r3
 801e758:	898b      	ldrh	r3, [r1, #12]
 801e75a:	05db      	lsls	r3, r3, #23
 801e75c:	4605      	mov	r5, r0
 801e75e:	460c      	mov	r4, r1
 801e760:	4616      	mov	r6, r2
 801e762:	d505      	bpl.n	801e770 <__swrite+0x1e>
 801e764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e768:	2302      	movs	r3, #2
 801e76a:	2200      	movs	r2, #0
 801e76c:	f000 f984 	bl	801ea78 <_lseek_r>
 801e770:	89a3      	ldrh	r3, [r4, #12]
 801e772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e77a:	81a3      	strh	r3, [r4, #12]
 801e77c:	4632      	mov	r2, r6
 801e77e:	463b      	mov	r3, r7
 801e780:	4628      	mov	r0, r5
 801e782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e786:	f000 b8c5 	b.w	801e914 <_write_r>

0801e78a <__sseek>:
 801e78a:	b510      	push	{r4, lr}
 801e78c:	460c      	mov	r4, r1
 801e78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e792:	f000 f971 	bl	801ea78 <_lseek_r>
 801e796:	1c43      	adds	r3, r0, #1
 801e798:	89a3      	ldrh	r3, [r4, #12]
 801e79a:	bf15      	itete	ne
 801e79c:	6560      	strne	r0, [r4, #84]	; 0x54
 801e79e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e7a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e7a6:	81a3      	strheq	r3, [r4, #12]
 801e7a8:	bf18      	it	ne
 801e7aa:	81a3      	strhne	r3, [r4, #12]
 801e7ac:	bd10      	pop	{r4, pc}

0801e7ae <__sclose>:
 801e7ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7b2:	f000 b92f 	b.w	801ea14 <_close_r>

0801e7b6 <strncmp>:
 801e7b6:	b510      	push	{r4, lr}
 801e7b8:	b17a      	cbz	r2, 801e7da <strncmp+0x24>
 801e7ba:	4603      	mov	r3, r0
 801e7bc:	3901      	subs	r1, #1
 801e7be:	1884      	adds	r4, r0, r2
 801e7c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 801e7c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801e7c8:	4290      	cmp	r0, r2
 801e7ca:	d101      	bne.n	801e7d0 <strncmp+0x1a>
 801e7cc:	42a3      	cmp	r3, r4
 801e7ce:	d101      	bne.n	801e7d4 <strncmp+0x1e>
 801e7d0:	1a80      	subs	r0, r0, r2
 801e7d2:	bd10      	pop	{r4, pc}
 801e7d4:	2800      	cmp	r0, #0
 801e7d6:	d1f3      	bne.n	801e7c0 <strncmp+0xa>
 801e7d8:	e7fa      	b.n	801e7d0 <strncmp+0x1a>
 801e7da:	4610      	mov	r0, r2
 801e7dc:	e7f9      	b.n	801e7d2 <strncmp+0x1c>

0801e7de <strncpy>:
 801e7de:	b510      	push	{r4, lr}
 801e7e0:	3901      	subs	r1, #1
 801e7e2:	4603      	mov	r3, r0
 801e7e4:	b132      	cbz	r2, 801e7f4 <strncpy+0x16>
 801e7e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e7ea:	f803 4b01 	strb.w	r4, [r3], #1
 801e7ee:	3a01      	subs	r2, #1
 801e7f0:	2c00      	cmp	r4, #0
 801e7f2:	d1f7      	bne.n	801e7e4 <strncpy+0x6>
 801e7f4:	441a      	add	r2, r3
 801e7f6:	2100      	movs	r1, #0
 801e7f8:	4293      	cmp	r3, r2
 801e7fa:	d100      	bne.n	801e7fe <strncpy+0x20>
 801e7fc:	bd10      	pop	{r4, pc}
 801e7fe:	f803 1b01 	strb.w	r1, [r3], #1
 801e802:	e7f9      	b.n	801e7f8 <strncpy+0x1a>

0801e804 <strstr>:
 801e804:	780a      	ldrb	r2, [r1, #0]
 801e806:	b570      	push	{r4, r5, r6, lr}
 801e808:	b96a      	cbnz	r2, 801e826 <strstr+0x22>
 801e80a:	bd70      	pop	{r4, r5, r6, pc}
 801e80c:	429a      	cmp	r2, r3
 801e80e:	d109      	bne.n	801e824 <strstr+0x20>
 801e810:	460c      	mov	r4, r1
 801e812:	4605      	mov	r5, r0
 801e814:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801e818:	2b00      	cmp	r3, #0
 801e81a:	d0f6      	beq.n	801e80a <strstr+0x6>
 801e81c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801e820:	429e      	cmp	r6, r3
 801e822:	d0f7      	beq.n	801e814 <strstr+0x10>
 801e824:	3001      	adds	r0, #1
 801e826:	7803      	ldrb	r3, [r0, #0]
 801e828:	2b00      	cmp	r3, #0
 801e82a:	d1ef      	bne.n	801e80c <strstr+0x8>
 801e82c:	4618      	mov	r0, r3
 801e82e:	e7ec      	b.n	801e80a <strstr+0x6>

0801e830 <_vsiprintf_r>:
 801e830:	b500      	push	{lr}
 801e832:	b09b      	sub	sp, #108	; 0x6c
 801e834:	9100      	str	r1, [sp, #0]
 801e836:	9104      	str	r1, [sp, #16]
 801e838:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e83c:	9105      	str	r1, [sp, #20]
 801e83e:	9102      	str	r1, [sp, #8]
 801e840:	4905      	ldr	r1, [pc, #20]	; (801e858 <_vsiprintf_r+0x28>)
 801e842:	9103      	str	r1, [sp, #12]
 801e844:	4669      	mov	r1, sp
 801e846:	f000 f9bf 	bl	801ebc8 <_svfiprintf_r>
 801e84a:	9b00      	ldr	r3, [sp, #0]
 801e84c:	2200      	movs	r2, #0
 801e84e:	701a      	strb	r2, [r3, #0]
 801e850:	b01b      	add	sp, #108	; 0x6c
 801e852:	f85d fb04 	ldr.w	pc, [sp], #4
 801e856:	bf00      	nop
 801e858:	ffff0208 	.word	0xffff0208

0801e85c <vsiprintf>:
 801e85c:	4613      	mov	r3, r2
 801e85e:	460a      	mov	r2, r1
 801e860:	4601      	mov	r1, r0
 801e862:	4802      	ldr	r0, [pc, #8]	; (801e86c <vsiprintf+0x10>)
 801e864:	6800      	ldr	r0, [r0, #0]
 801e866:	f7ff bfe3 	b.w	801e830 <_vsiprintf_r>
 801e86a:	bf00      	nop
 801e86c:	20000098 	.word	0x20000098

0801e870 <__swbuf_r>:
 801e870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e872:	460e      	mov	r6, r1
 801e874:	4614      	mov	r4, r2
 801e876:	4605      	mov	r5, r0
 801e878:	b118      	cbz	r0, 801e882 <__swbuf_r+0x12>
 801e87a:	6983      	ldr	r3, [r0, #24]
 801e87c:	b90b      	cbnz	r3, 801e882 <__swbuf_r+0x12>
 801e87e:	f7ff fc39 	bl	801e0f4 <__sinit>
 801e882:	4b21      	ldr	r3, [pc, #132]	; (801e908 <__swbuf_r+0x98>)
 801e884:	429c      	cmp	r4, r3
 801e886:	d12b      	bne.n	801e8e0 <__swbuf_r+0x70>
 801e888:	686c      	ldr	r4, [r5, #4]
 801e88a:	69a3      	ldr	r3, [r4, #24]
 801e88c:	60a3      	str	r3, [r4, #8]
 801e88e:	89a3      	ldrh	r3, [r4, #12]
 801e890:	071a      	lsls	r2, r3, #28
 801e892:	d52f      	bpl.n	801e8f4 <__swbuf_r+0x84>
 801e894:	6923      	ldr	r3, [r4, #16]
 801e896:	b36b      	cbz	r3, 801e8f4 <__swbuf_r+0x84>
 801e898:	6923      	ldr	r3, [r4, #16]
 801e89a:	6820      	ldr	r0, [r4, #0]
 801e89c:	1ac0      	subs	r0, r0, r3
 801e89e:	6963      	ldr	r3, [r4, #20]
 801e8a0:	b2f6      	uxtb	r6, r6
 801e8a2:	4283      	cmp	r3, r0
 801e8a4:	4637      	mov	r7, r6
 801e8a6:	dc04      	bgt.n	801e8b2 <__swbuf_r+0x42>
 801e8a8:	4621      	mov	r1, r4
 801e8aa:	4628      	mov	r0, r5
 801e8ac:	f7ff fb8e 	bl	801dfcc <_fflush_r>
 801e8b0:	bb30      	cbnz	r0, 801e900 <__swbuf_r+0x90>
 801e8b2:	68a3      	ldr	r3, [r4, #8]
 801e8b4:	3b01      	subs	r3, #1
 801e8b6:	60a3      	str	r3, [r4, #8]
 801e8b8:	6823      	ldr	r3, [r4, #0]
 801e8ba:	1c5a      	adds	r2, r3, #1
 801e8bc:	6022      	str	r2, [r4, #0]
 801e8be:	701e      	strb	r6, [r3, #0]
 801e8c0:	6963      	ldr	r3, [r4, #20]
 801e8c2:	3001      	adds	r0, #1
 801e8c4:	4283      	cmp	r3, r0
 801e8c6:	d004      	beq.n	801e8d2 <__swbuf_r+0x62>
 801e8c8:	89a3      	ldrh	r3, [r4, #12]
 801e8ca:	07db      	lsls	r3, r3, #31
 801e8cc:	d506      	bpl.n	801e8dc <__swbuf_r+0x6c>
 801e8ce:	2e0a      	cmp	r6, #10
 801e8d0:	d104      	bne.n	801e8dc <__swbuf_r+0x6c>
 801e8d2:	4621      	mov	r1, r4
 801e8d4:	4628      	mov	r0, r5
 801e8d6:	f7ff fb79 	bl	801dfcc <_fflush_r>
 801e8da:	b988      	cbnz	r0, 801e900 <__swbuf_r+0x90>
 801e8dc:	4638      	mov	r0, r7
 801e8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e8e0:	4b0a      	ldr	r3, [pc, #40]	; (801e90c <__swbuf_r+0x9c>)
 801e8e2:	429c      	cmp	r4, r3
 801e8e4:	d101      	bne.n	801e8ea <__swbuf_r+0x7a>
 801e8e6:	68ac      	ldr	r4, [r5, #8]
 801e8e8:	e7cf      	b.n	801e88a <__swbuf_r+0x1a>
 801e8ea:	4b09      	ldr	r3, [pc, #36]	; (801e910 <__swbuf_r+0xa0>)
 801e8ec:	429c      	cmp	r4, r3
 801e8ee:	bf08      	it	eq
 801e8f0:	68ec      	ldreq	r4, [r5, #12]
 801e8f2:	e7ca      	b.n	801e88a <__swbuf_r+0x1a>
 801e8f4:	4621      	mov	r1, r4
 801e8f6:	4628      	mov	r0, r5
 801e8f8:	f000 f81e 	bl	801e938 <__swsetup_r>
 801e8fc:	2800      	cmp	r0, #0
 801e8fe:	d0cb      	beq.n	801e898 <__swbuf_r+0x28>
 801e900:	f04f 37ff 	mov.w	r7, #4294967295
 801e904:	e7ea      	b.n	801e8dc <__swbuf_r+0x6c>
 801e906:	bf00      	nop
 801e908:	0802017c 	.word	0x0802017c
 801e90c:	0802019c 	.word	0x0802019c
 801e910:	0802015c 	.word	0x0802015c

0801e914 <_write_r>:
 801e914:	b538      	push	{r3, r4, r5, lr}
 801e916:	4d07      	ldr	r5, [pc, #28]	; (801e934 <_write_r+0x20>)
 801e918:	4604      	mov	r4, r0
 801e91a:	4608      	mov	r0, r1
 801e91c:	4611      	mov	r1, r2
 801e91e:	2200      	movs	r2, #0
 801e920:	602a      	str	r2, [r5, #0]
 801e922:	461a      	mov	r2, r3
 801e924:	f7e2 fa90 	bl	8000e48 <_write>
 801e928:	1c43      	adds	r3, r0, #1
 801e92a:	d102      	bne.n	801e932 <_write_r+0x1e>
 801e92c:	682b      	ldr	r3, [r5, #0]
 801e92e:	b103      	cbz	r3, 801e932 <_write_r+0x1e>
 801e930:	6023      	str	r3, [r4, #0]
 801e932:	bd38      	pop	{r3, r4, r5, pc}
 801e934:	20009828 	.word	0x20009828

0801e938 <__swsetup_r>:
 801e938:	4b32      	ldr	r3, [pc, #200]	; (801ea04 <__swsetup_r+0xcc>)
 801e93a:	b570      	push	{r4, r5, r6, lr}
 801e93c:	681d      	ldr	r5, [r3, #0]
 801e93e:	4606      	mov	r6, r0
 801e940:	460c      	mov	r4, r1
 801e942:	b125      	cbz	r5, 801e94e <__swsetup_r+0x16>
 801e944:	69ab      	ldr	r3, [r5, #24]
 801e946:	b913      	cbnz	r3, 801e94e <__swsetup_r+0x16>
 801e948:	4628      	mov	r0, r5
 801e94a:	f7ff fbd3 	bl	801e0f4 <__sinit>
 801e94e:	4b2e      	ldr	r3, [pc, #184]	; (801ea08 <__swsetup_r+0xd0>)
 801e950:	429c      	cmp	r4, r3
 801e952:	d10f      	bne.n	801e974 <__swsetup_r+0x3c>
 801e954:	686c      	ldr	r4, [r5, #4]
 801e956:	89a3      	ldrh	r3, [r4, #12]
 801e958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e95c:	0719      	lsls	r1, r3, #28
 801e95e:	d42c      	bmi.n	801e9ba <__swsetup_r+0x82>
 801e960:	06dd      	lsls	r5, r3, #27
 801e962:	d411      	bmi.n	801e988 <__swsetup_r+0x50>
 801e964:	2309      	movs	r3, #9
 801e966:	6033      	str	r3, [r6, #0]
 801e968:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e96c:	81a3      	strh	r3, [r4, #12]
 801e96e:	f04f 30ff 	mov.w	r0, #4294967295
 801e972:	e03e      	b.n	801e9f2 <__swsetup_r+0xba>
 801e974:	4b25      	ldr	r3, [pc, #148]	; (801ea0c <__swsetup_r+0xd4>)
 801e976:	429c      	cmp	r4, r3
 801e978:	d101      	bne.n	801e97e <__swsetup_r+0x46>
 801e97a:	68ac      	ldr	r4, [r5, #8]
 801e97c:	e7eb      	b.n	801e956 <__swsetup_r+0x1e>
 801e97e:	4b24      	ldr	r3, [pc, #144]	; (801ea10 <__swsetup_r+0xd8>)
 801e980:	429c      	cmp	r4, r3
 801e982:	bf08      	it	eq
 801e984:	68ec      	ldreq	r4, [r5, #12]
 801e986:	e7e6      	b.n	801e956 <__swsetup_r+0x1e>
 801e988:	0758      	lsls	r0, r3, #29
 801e98a:	d512      	bpl.n	801e9b2 <__swsetup_r+0x7a>
 801e98c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e98e:	b141      	cbz	r1, 801e9a2 <__swsetup_r+0x6a>
 801e990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e994:	4299      	cmp	r1, r3
 801e996:	d002      	beq.n	801e99e <__swsetup_r+0x66>
 801e998:	4630      	mov	r0, r6
 801e99a:	f7ff fd15 	bl	801e3c8 <_free_r>
 801e99e:	2300      	movs	r3, #0
 801e9a0:	6363      	str	r3, [r4, #52]	; 0x34
 801e9a2:	89a3      	ldrh	r3, [r4, #12]
 801e9a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e9a8:	81a3      	strh	r3, [r4, #12]
 801e9aa:	2300      	movs	r3, #0
 801e9ac:	6063      	str	r3, [r4, #4]
 801e9ae:	6923      	ldr	r3, [r4, #16]
 801e9b0:	6023      	str	r3, [r4, #0]
 801e9b2:	89a3      	ldrh	r3, [r4, #12]
 801e9b4:	f043 0308 	orr.w	r3, r3, #8
 801e9b8:	81a3      	strh	r3, [r4, #12]
 801e9ba:	6923      	ldr	r3, [r4, #16]
 801e9bc:	b94b      	cbnz	r3, 801e9d2 <__swsetup_r+0x9a>
 801e9be:	89a3      	ldrh	r3, [r4, #12]
 801e9c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e9c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e9c8:	d003      	beq.n	801e9d2 <__swsetup_r+0x9a>
 801e9ca:	4621      	mov	r1, r4
 801e9cc:	4630      	mov	r0, r6
 801e9ce:	f7ff fc7b 	bl	801e2c8 <__smakebuf_r>
 801e9d2:	89a0      	ldrh	r0, [r4, #12]
 801e9d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e9d8:	f010 0301 	ands.w	r3, r0, #1
 801e9dc:	d00a      	beq.n	801e9f4 <__swsetup_r+0xbc>
 801e9de:	2300      	movs	r3, #0
 801e9e0:	60a3      	str	r3, [r4, #8]
 801e9e2:	6963      	ldr	r3, [r4, #20]
 801e9e4:	425b      	negs	r3, r3
 801e9e6:	61a3      	str	r3, [r4, #24]
 801e9e8:	6923      	ldr	r3, [r4, #16]
 801e9ea:	b943      	cbnz	r3, 801e9fe <__swsetup_r+0xc6>
 801e9ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e9f0:	d1ba      	bne.n	801e968 <__swsetup_r+0x30>
 801e9f2:	bd70      	pop	{r4, r5, r6, pc}
 801e9f4:	0781      	lsls	r1, r0, #30
 801e9f6:	bf58      	it	pl
 801e9f8:	6963      	ldrpl	r3, [r4, #20]
 801e9fa:	60a3      	str	r3, [r4, #8]
 801e9fc:	e7f4      	b.n	801e9e8 <__swsetup_r+0xb0>
 801e9fe:	2000      	movs	r0, #0
 801ea00:	e7f7      	b.n	801e9f2 <__swsetup_r+0xba>
 801ea02:	bf00      	nop
 801ea04:	20000098 	.word	0x20000098
 801ea08:	0802017c 	.word	0x0802017c
 801ea0c:	0802019c 	.word	0x0802019c
 801ea10:	0802015c 	.word	0x0802015c

0801ea14 <_close_r>:
 801ea14:	b538      	push	{r3, r4, r5, lr}
 801ea16:	4d06      	ldr	r5, [pc, #24]	; (801ea30 <_close_r+0x1c>)
 801ea18:	2300      	movs	r3, #0
 801ea1a:	4604      	mov	r4, r0
 801ea1c:	4608      	mov	r0, r1
 801ea1e:	602b      	str	r3, [r5, #0]
 801ea20:	f7e4 fbd5 	bl	80031ce <_close>
 801ea24:	1c43      	adds	r3, r0, #1
 801ea26:	d102      	bne.n	801ea2e <_close_r+0x1a>
 801ea28:	682b      	ldr	r3, [r5, #0]
 801ea2a:	b103      	cbz	r3, 801ea2e <_close_r+0x1a>
 801ea2c:	6023      	str	r3, [r4, #0]
 801ea2e:	bd38      	pop	{r3, r4, r5, pc}
 801ea30:	20009828 	.word	0x20009828

0801ea34 <_fstat_r>:
 801ea34:	b538      	push	{r3, r4, r5, lr}
 801ea36:	4d07      	ldr	r5, [pc, #28]	; (801ea54 <_fstat_r+0x20>)
 801ea38:	2300      	movs	r3, #0
 801ea3a:	4604      	mov	r4, r0
 801ea3c:	4608      	mov	r0, r1
 801ea3e:	4611      	mov	r1, r2
 801ea40:	602b      	str	r3, [r5, #0]
 801ea42:	f7e4 fbd0 	bl	80031e6 <_fstat>
 801ea46:	1c43      	adds	r3, r0, #1
 801ea48:	d102      	bne.n	801ea50 <_fstat_r+0x1c>
 801ea4a:	682b      	ldr	r3, [r5, #0]
 801ea4c:	b103      	cbz	r3, 801ea50 <_fstat_r+0x1c>
 801ea4e:	6023      	str	r3, [r4, #0]
 801ea50:	bd38      	pop	{r3, r4, r5, pc}
 801ea52:	bf00      	nop
 801ea54:	20009828 	.word	0x20009828

0801ea58 <_isatty_r>:
 801ea58:	b538      	push	{r3, r4, r5, lr}
 801ea5a:	4d06      	ldr	r5, [pc, #24]	; (801ea74 <_isatty_r+0x1c>)
 801ea5c:	2300      	movs	r3, #0
 801ea5e:	4604      	mov	r4, r0
 801ea60:	4608      	mov	r0, r1
 801ea62:	602b      	str	r3, [r5, #0]
 801ea64:	f7e4 fbcf 	bl	8003206 <_isatty>
 801ea68:	1c43      	adds	r3, r0, #1
 801ea6a:	d102      	bne.n	801ea72 <_isatty_r+0x1a>
 801ea6c:	682b      	ldr	r3, [r5, #0]
 801ea6e:	b103      	cbz	r3, 801ea72 <_isatty_r+0x1a>
 801ea70:	6023      	str	r3, [r4, #0]
 801ea72:	bd38      	pop	{r3, r4, r5, pc}
 801ea74:	20009828 	.word	0x20009828

0801ea78 <_lseek_r>:
 801ea78:	b538      	push	{r3, r4, r5, lr}
 801ea7a:	4d07      	ldr	r5, [pc, #28]	; (801ea98 <_lseek_r+0x20>)
 801ea7c:	4604      	mov	r4, r0
 801ea7e:	4608      	mov	r0, r1
 801ea80:	4611      	mov	r1, r2
 801ea82:	2200      	movs	r2, #0
 801ea84:	602a      	str	r2, [r5, #0]
 801ea86:	461a      	mov	r2, r3
 801ea88:	f7e4 fbc8 	bl	800321c <_lseek>
 801ea8c:	1c43      	adds	r3, r0, #1
 801ea8e:	d102      	bne.n	801ea96 <_lseek_r+0x1e>
 801ea90:	682b      	ldr	r3, [r5, #0]
 801ea92:	b103      	cbz	r3, 801ea96 <_lseek_r+0x1e>
 801ea94:	6023      	str	r3, [r4, #0]
 801ea96:	bd38      	pop	{r3, r4, r5, pc}
 801ea98:	20009828 	.word	0x20009828

0801ea9c <__malloc_lock>:
 801ea9c:	4801      	ldr	r0, [pc, #4]	; (801eaa4 <__malloc_lock+0x8>)
 801ea9e:	f7ff bbec 	b.w	801e27a <__retarget_lock_acquire_recursive>
 801eaa2:	bf00      	nop
 801eaa4:	2000981c 	.word	0x2000981c

0801eaa8 <__malloc_unlock>:
 801eaa8:	4801      	ldr	r0, [pc, #4]	; (801eab0 <__malloc_unlock+0x8>)
 801eaaa:	f7ff bbe7 	b.w	801e27c <__retarget_lock_release_recursive>
 801eaae:	bf00      	nop
 801eab0:	2000981c 	.word	0x2000981c

0801eab4 <_realloc_r>:
 801eab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eab8:	4680      	mov	r8, r0
 801eaba:	4614      	mov	r4, r2
 801eabc:	460e      	mov	r6, r1
 801eabe:	b921      	cbnz	r1, 801eaca <_realloc_r+0x16>
 801eac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eac4:	4611      	mov	r1, r2
 801eac6:	f7ff bceb 	b.w	801e4a0 <_malloc_r>
 801eaca:	b92a      	cbnz	r2, 801ead8 <_realloc_r+0x24>
 801eacc:	f7ff fc7c 	bl	801e3c8 <_free_r>
 801ead0:	4625      	mov	r5, r4
 801ead2:	4628      	mov	r0, r5
 801ead4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ead8:	f000 fcbe 	bl	801f458 <_malloc_usable_size_r>
 801eadc:	4284      	cmp	r4, r0
 801eade:	4607      	mov	r7, r0
 801eae0:	d802      	bhi.n	801eae8 <_realloc_r+0x34>
 801eae2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801eae6:	d812      	bhi.n	801eb0e <_realloc_r+0x5a>
 801eae8:	4621      	mov	r1, r4
 801eaea:	4640      	mov	r0, r8
 801eaec:	f7ff fcd8 	bl	801e4a0 <_malloc_r>
 801eaf0:	4605      	mov	r5, r0
 801eaf2:	2800      	cmp	r0, #0
 801eaf4:	d0ed      	beq.n	801ead2 <_realloc_r+0x1e>
 801eaf6:	42bc      	cmp	r4, r7
 801eaf8:	4622      	mov	r2, r4
 801eafa:	4631      	mov	r1, r6
 801eafc:	bf28      	it	cs
 801eafe:	463a      	movcs	r2, r7
 801eb00:	f7ff fc32 	bl	801e368 <memcpy>
 801eb04:	4631      	mov	r1, r6
 801eb06:	4640      	mov	r0, r8
 801eb08:	f7ff fc5e 	bl	801e3c8 <_free_r>
 801eb0c:	e7e1      	b.n	801ead2 <_realloc_r+0x1e>
 801eb0e:	4635      	mov	r5, r6
 801eb10:	e7df      	b.n	801ead2 <_realloc_r+0x1e>

0801eb12 <__ssputs_r>:
 801eb12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb16:	688e      	ldr	r6, [r1, #8]
 801eb18:	429e      	cmp	r6, r3
 801eb1a:	4682      	mov	sl, r0
 801eb1c:	460c      	mov	r4, r1
 801eb1e:	4690      	mov	r8, r2
 801eb20:	461f      	mov	r7, r3
 801eb22:	d838      	bhi.n	801eb96 <__ssputs_r+0x84>
 801eb24:	898a      	ldrh	r2, [r1, #12]
 801eb26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801eb2a:	d032      	beq.n	801eb92 <__ssputs_r+0x80>
 801eb2c:	6825      	ldr	r5, [r4, #0]
 801eb2e:	6909      	ldr	r1, [r1, #16]
 801eb30:	eba5 0901 	sub.w	r9, r5, r1
 801eb34:	6965      	ldr	r5, [r4, #20]
 801eb36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eb3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801eb3e:	3301      	adds	r3, #1
 801eb40:	444b      	add	r3, r9
 801eb42:	106d      	asrs	r5, r5, #1
 801eb44:	429d      	cmp	r5, r3
 801eb46:	bf38      	it	cc
 801eb48:	461d      	movcc	r5, r3
 801eb4a:	0553      	lsls	r3, r2, #21
 801eb4c:	d531      	bpl.n	801ebb2 <__ssputs_r+0xa0>
 801eb4e:	4629      	mov	r1, r5
 801eb50:	f7ff fca6 	bl	801e4a0 <_malloc_r>
 801eb54:	4606      	mov	r6, r0
 801eb56:	b950      	cbnz	r0, 801eb6e <__ssputs_r+0x5c>
 801eb58:	230c      	movs	r3, #12
 801eb5a:	f8ca 3000 	str.w	r3, [sl]
 801eb5e:	89a3      	ldrh	r3, [r4, #12]
 801eb60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eb64:	81a3      	strh	r3, [r4, #12]
 801eb66:	f04f 30ff 	mov.w	r0, #4294967295
 801eb6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb6e:	6921      	ldr	r1, [r4, #16]
 801eb70:	464a      	mov	r2, r9
 801eb72:	f7ff fbf9 	bl	801e368 <memcpy>
 801eb76:	89a3      	ldrh	r3, [r4, #12]
 801eb78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801eb7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801eb80:	81a3      	strh	r3, [r4, #12]
 801eb82:	6126      	str	r6, [r4, #16]
 801eb84:	6165      	str	r5, [r4, #20]
 801eb86:	444e      	add	r6, r9
 801eb88:	eba5 0509 	sub.w	r5, r5, r9
 801eb8c:	6026      	str	r6, [r4, #0]
 801eb8e:	60a5      	str	r5, [r4, #8]
 801eb90:	463e      	mov	r6, r7
 801eb92:	42be      	cmp	r6, r7
 801eb94:	d900      	bls.n	801eb98 <__ssputs_r+0x86>
 801eb96:	463e      	mov	r6, r7
 801eb98:	6820      	ldr	r0, [r4, #0]
 801eb9a:	4632      	mov	r2, r6
 801eb9c:	4641      	mov	r1, r8
 801eb9e:	f7ff fbf1 	bl	801e384 <memmove>
 801eba2:	68a3      	ldr	r3, [r4, #8]
 801eba4:	1b9b      	subs	r3, r3, r6
 801eba6:	60a3      	str	r3, [r4, #8]
 801eba8:	6823      	ldr	r3, [r4, #0]
 801ebaa:	4433      	add	r3, r6
 801ebac:	6023      	str	r3, [r4, #0]
 801ebae:	2000      	movs	r0, #0
 801ebb0:	e7db      	b.n	801eb6a <__ssputs_r+0x58>
 801ebb2:	462a      	mov	r2, r5
 801ebb4:	f7ff ff7e 	bl	801eab4 <_realloc_r>
 801ebb8:	4606      	mov	r6, r0
 801ebba:	2800      	cmp	r0, #0
 801ebbc:	d1e1      	bne.n	801eb82 <__ssputs_r+0x70>
 801ebbe:	6921      	ldr	r1, [r4, #16]
 801ebc0:	4650      	mov	r0, sl
 801ebc2:	f7ff fc01 	bl	801e3c8 <_free_r>
 801ebc6:	e7c7      	b.n	801eb58 <__ssputs_r+0x46>

0801ebc8 <_svfiprintf_r>:
 801ebc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebcc:	4698      	mov	r8, r3
 801ebce:	898b      	ldrh	r3, [r1, #12]
 801ebd0:	061b      	lsls	r3, r3, #24
 801ebd2:	b09d      	sub	sp, #116	; 0x74
 801ebd4:	4607      	mov	r7, r0
 801ebd6:	460d      	mov	r5, r1
 801ebd8:	4614      	mov	r4, r2
 801ebda:	d50e      	bpl.n	801ebfa <_svfiprintf_r+0x32>
 801ebdc:	690b      	ldr	r3, [r1, #16]
 801ebde:	b963      	cbnz	r3, 801ebfa <_svfiprintf_r+0x32>
 801ebe0:	2140      	movs	r1, #64	; 0x40
 801ebe2:	f7ff fc5d 	bl	801e4a0 <_malloc_r>
 801ebe6:	6028      	str	r0, [r5, #0]
 801ebe8:	6128      	str	r0, [r5, #16]
 801ebea:	b920      	cbnz	r0, 801ebf6 <_svfiprintf_r+0x2e>
 801ebec:	230c      	movs	r3, #12
 801ebee:	603b      	str	r3, [r7, #0]
 801ebf0:	f04f 30ff 	mov.w	r0, #4294967295
 801ebf4:	e0d1      	b.n	801ed9a <_svfiprintf_r+0x1d2>
 801ebf6:	2340      	movs	r3, #64	; 0x40
 801ebf8:	616b      	str	r3, [r5, #20]
 801ebfa:	2300      	movs	r3, #0
 801ebfc:	9309      	str	r3, [sp, #36]	; 0x24
 801ebfe:	2320      	movs	r3, #32
 801ec00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ec04:	f8cd 800c 	str.w	r8, [sp, #12]
 801ec08:	2330      	movs	r3, #48	; 0x30
 801ec0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801edb4 <_svfiprintf_r+0x1ec>
 801ec0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ec12:	f04f 0901 	mov.w	r9, #1
 801ec16:	4623      	mov	r3, r4
 801ec18:	469a      	mov	sl, r3
 801ec1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ec1e:	b10a      	cbz	r2, 801ec24 <_svfiprintf_r+0x5c>
 801ec20:	2a25      	cmp	r2, #37	; 0x25
 801ec22:	d1f9      	bne.n	801ec18 <_svfiprintf_r+0x50>
 801ec24:	ebba 0b04 	subs.w	fp, sl, r4
 801ec28:	d00b      	beq.n	801ec42 <_svfiprintf_r+0x7a>
 801ec2a:	465b      	mov	r3, fp
 801ec2c:	4622      	mov	r2, r4
 801ec2e:	4629      	mov	r1, r5
 801ec30:	4638      	mov	r0, r7
 801ec32:	f7ff ff6e 	bl	801eb12 <__ssputs_r>
 801ec36:	3001      	adds	r0, #1
 801ec38:	f000 80aa 	beq.w	801ed90 <_svfiprintf_r+0x1c8>
 801ec3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ec3e:	445a      	add	r2, fp
 801ec40:	9209      	str	r2, [sp, #36]	; 0x24
 801ec42:	f89a 3000 	ldrb.w	r3, [sl]
 801ec46:	2b00      	cmp	r3, #0
 801ec48:	f000 80a2 	beq.w	801ed90 <_svfiprintf_r+0x1c8>
 801ec4c:	2300      	movs	r3, #0
 801ec4e:	f04f 32ff 	mov.w	r2, #4294967295
 801ec52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ec56:	f10a 0a01 	add.w	sl, sl, #1
 801ec5a:	9304      	str	r3, [sp, #16]
 801ec5c:	9307      	str	r3, [sp, #28]
 801ec5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ec62:	931a      	str	r3, [sp, #104]	; 0x68
 801ec64:	4654      	mov	r4, sl
 801ec66:	2205      	movs	r2, #5
 801ec68:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ec6c:	4851      	ldr	r0, [pc, #324]	; (801edb4 <_svfiprintf_r+0x1ec>)
 801ec6e:	f7e1 fa8f 	bl	8000190 <memchr>
 801ec72:	9a04      	ldr	r2, [sp, #16]
 801ec74:	b9d8      	cbnz	r0, 801ecae <_svfiprintf_r+0xe6>
 801ec76:	06d0      	lsls	r0, r2, #27
 801ec78:	bf44      	itt	mi
 801ec7a:	2320      	movmi	r3, #32
 801ec7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ec80:	0711      	lsls	r1, r2, #28
 801ec82:	bf44      	itt	mi
 801ec84:	232b      	movmi	r3, #43	; 0x2b
 801ec86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ec8a:	f89a 3000 	ldrb.w	r3, [sl]
 801ec8e:	2b2a      	cmp	r3, #42	; 0x2a
 801ec90:	d015      	beq.n	801ecbe <_svfiprintf_r+0xf6>
 801ec92:	9a07      	ldr	r2, [sp, #28]
 801ec94:	4654      	mov	r4, sl
 801ec96:	2000      	movs	r0, #0
 801ec98:	f04f 0c0a 	mov.w	ip, #10
 801ec9c:	4621      	mov	r1, r4
 801ec9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801eca2:	3b30      	subs	r3, #48	; 0x30
 801eca4:	2b09      	cmp	r3, #9
 801eca6:	d94e      	bls.n	801ed46 <_svfiprintf_r+0x17e>
 801eca8:	b1b0      	cbz	r0, 801ecd8 <_svfiprintf_r+0x110>
 801ecaa:	9207      	str	r2, [sp, #28]
 801ecac:	e014      	b.n	801ecd8 <_svfiprintf_r+0x110>
 801ecae:	eba0 0308 	sub.w	r3, r0, r8
 801ecb2:	fa09 f303 	lsl.w	r3, r9, r3
 801ecb6:	4313      	orrs	r3, r2
 801ecb8:	9304      	str	r3, [sp, #16]
 801ecba:	46a2      	mov	sl, r4
 801ecbc:	e7d2      	b.n	801ec64 <_svfiprintf_r+0x9c>
 801ecbe:	9b03      	ldr	r3, [sp, #12]
 801ecc0:	1d19      	adds	r1, r3, #4
 801ecc2:	681b      	ldr	r3, [r3, #0]
 801ecc4:	9103      	str	r1, [sp, #12]
 801ecc6:	2b00      	cmp	r3, #0
 801ecc8:	bfbb      	ittet	lt
 801ecca:	425b      	neglt	r3, r3
 801eccc:	f042 0202 	orrlt.w	r2, r2, #2
 801ecd0:	9307      	strge	r3, [sp, #28]
 801ecd2:	9307      	strlt	r3, [sp, #28]
 801ecd4:	bfb8      	it	lt
 801ecd6:	9204      	strlt	r2, [sp, #16]
 801ecd8:	7823      	ldrb	r3, [r4, #0]
 801ecda:	2b2e      	cmp	r3, #46	; 0x2e
 801ecdc:	d10c      	bne.n	801ecf8 <_svfiprintf_r+0x130>
 801ecde:	7863      	ldrb	r3, [r4, #1]
 801ece0:	2b2a      	cmp	r3, #42	; 0x2a
 801ece2:	d135      	bne.n	801ed50 <_svfiprintf_r+0x188>
 801ece4:	9b03      	ldr	r3, [sp, #12]
 801ece6:	1d1a      	adds	r2, r3, #4
 801ece8:	681b      	ldr	r3, [r3, #0]
 801ecea:	9203      	str	r2, [sp, #12]
 801ecec:	2b00      	cmp	r3, #0
 801ecee:	bfb8      	it	lt
 801ecf0:	f04f 33ff 	movlt.w	r3, #4294967295
 801ecf4:	3402      	adds	r4, #2
 801ecf6:	9305      	str	r3, [sp, #20]
 801ecf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801edc4 <_svfiprintf_r+0x1fc>
 801ecfc:	7821      	ldrb	r1, [r4, #0]
 801ecfe:	2203      	movs	r2, #3
 801ed00:	4650      	mov	r0, sl
 801ed02:	f7e1 fa45 	bl	8000190 <memchr>
 801ed06:	b140      	cbz	r0, 801ed1a <_svfiprintf_r+0x152>
 801ed08:	2340      	movs	r3, #64	; 0x40
 801ed0a:	eba0 000a 	sub.w	r0, r0, sl
 801ed0e:	fa03 f000 	lsl.w	r0, r3, r0
 801ed12:	9b04      	ldr	r3, [sp, #16]
 801ed14:	4303      	orrs	r3, r0
 801ed16:	3401      	adds	r4, #1
 801ed18:	9304      	str	r3, [sp, #16]
 801ed1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ed1e:	4826      	ldr	r0, [pc, #152]	; (801edb8 <_svfiprintf_r+0x1f0>)
 801ed20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ed24:	2206      	movs	r2, #6
 801ed26:	f7e1 fa33 	bl	8000190 <memchr>
 801ed2a:	2800      	cmp	r0, #0
 801ed2c:	d038      	beq.n	801eda0 <_svfiprintf_r+0x1d8>
 801ed2e:	4b23      	ldr	r3, [pc, #140]	; (801edbc <_svfiprintf_r+0x1f4>)
 801ed30:	bb1b      	cbnz	r3, 801ed7a <_svfiprintf_r+0x1b2>
 801ed32:	9b03      	ldr	r3, [sp, #12]
 801ed34:	3307      	adds	r3, #7
 801ed36:	f023 0307 	bic.w	r3, r3, #7
 801ed3a:	3308      	adds	r3, #8
 801ed3c:	9303      	str	r3, [sp, #12]
 801ed3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed40:	4433      	add	r3, r6
 801ed42:	9309      	str	r3, [sp, #36]	; 0x24
 801ed44:	e767      	b.n	801ec16 <_svfiprintf_r+0x4e>
 801ed46:	fb0c 3202 	mla	r2, ip, r2, r3
 801ed4a:	460c      	mov	r4, r1
 801ed4c:	2001      	movs	r0, #1
 801ed4e:	e7a5      	b.n	801ec9c <_svfiprintf_r+0xd4>
 801ed50:	2300      	movs	r3, #0
 801ed52:	3401      	adds	r4, #1
 801ed54:	9305      	str	r3, [sp, #20]
 801ed56:	4619      	mov	r1, r3
 801ed58:	f04f 0c0a 	mov.w	ip, #10
 801ed5c:	4620      	mov	r0, r4
 801ed5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ed62:	3a30      	subs	r2, #48	; 0x30
 801ed64:	2a09      	cmp	r2, #9
 801ed66:	d903      	bls.n	801ed70 <_svfiprintf_r+0x1a8>
 801ed68:	2b00      	cmp	r3, #0
 801ed6a:	d0c5      	beq.n	801ecf8 <_svfiprintf_r+0x130>
 801ed6c:	9105      	str	r1, [sp, #20]
 801ed6e:	e7c3      	b.n	801ecf8 <_svfiprintf_r+0x130>
 801ed70:	fb0c 2101 	mla	r1, ip, r1, r2
 801ed74:	4604      	mov	r4, r0
 801ed76:	2301      	movs	r3, #1
 801ed78:	e7f0      	b.n	801ed5c <_svfiprintf_r+0x194>
 801ed7a:	ab03      	add	r3, sp, #12
 801ed7c:	9300      	str	r3, [sp, #0]
 801ed7e:	462a      	mov	r2, r5
 801ed80:	4b0f      	ldr	r3, [pc, #60]	; (801edc0 <_svfiprintf_r+0x1f8>)
 801ed82:	a904      	add	r1, sp, #16
 801ed84:	4638      	mov	r0, r7
 801ed86:	f3af 8000 	nop.w
 801ed8a:	1c42      	adds	r2, r0, #1
 801ed8c:	4606      	mov	r6, r0
 801ed8e:	d1d6      	bne.n	801ed3e <_svfiprintf_r+0x176>
 801ed90:	89ab      	ldrh	r3, [r5, #12]
 801ed92:	065b      	lsls	r3, r3, #25
 801ed94:	f53f af2c 	bmi.w	801ebf0 <_svfiprintf_r+0x28>
 801ed98:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ed9a:	b01d      	add	sp, #116	; 0x74
 801ed9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eda0:	ab03      	add	r3, sp, #12
 801eda2:	9300      	str	r3, [sp, #0]
 801eda4:	462a      	mov	r2, r5
 801eda6:	4b06      	ldr	r3, [pc, #24]	; (801edc0 <_svfiprintf_r+0x1f8>)
 801eda8:	a904      	add	r1, sp, #16
 801edaa:	4638      	mov	r0, r7
 801edac:	f000 f9d4 	bl	801f158 <_printf_i>
 801edb0:	e7eb      	b.n	801ed8a <_svfiprintf_r+0x1c2>
 801edb2:	bf00      	nop
 801edb4:	080201c0 	.word	0x080201c0
 801edb8:	080201ca 	.word	0x080201ca
 801edbc:	00000000 	.word	0x00000000
 801edc0:	0801eb13 	.word	0x0801eb13
 801edc4:	080201c6 	.word	0x080201c6

0801edc8 <__sfputc_r>:
 801edc8:	6893      	ldr	r3, [r2, #8]
 801edca:	3b01      	subs	r3, #1
 801edcc:	2b00      	cmp	r3, #0
 801edce:	b410      	push	{r4}
 801edd0:	6093      	str	r3, [r2, #8]
 801edd2:	da08      	bge.n	801ede6 <__sfputc_r+0x1e>
 801edd4:	6994      	ldr	r4, [r2, #24]
 801edd6:	42a3      	cmp	r3, r4
 801edd8:	db01      	blt.n	801edde <__sfputc_r+0x16>
 801edda:	290a      	cmp	r1, #10
 801eddc:	d103      	bne.n	801ede6 <__sfputc_r+0x1e>
 801edde:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ede2:	f7ff bd45 	b.w	801e870 <__swbuf_r>
 801ede6:	6813      	ldr	r3, [r2, #0]
 801ede8:	1c58      	adds	r0, r3, #1
 801edea:	6010      	str	r0, [r2, #0]
 801edec:	7019      	strb	r1, [r3, #0]
 801edee:	4608      	mov	r0, r1
 801edf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801edf4:	4770      	bx	lr

0801edf6 <__sfputs_r>:
 801edf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801edf8:	4606      	mov	r6, r0
 801edfa:	460f      	mov	r7, r1
 801edfc:	4614      	mov	r4, r2
 801edfe:	18d5      	adds	r5, r2, r3
 801ee00:	42ac      	cmp	r4, r5
 801ee02:	d101      	bne.n	801ee08 <__sfputs_r+0x12>
 801ee04:	2000      	movs	r0, #0
 801ee06:	e007      	b.n	801ee18 <__sfputs_r+0x22>
 801ee08:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ee0c:	463a      	mov	r2, r7
 801ee0e:	4630      	mov	r0, r6
 801ee10:	f7ff ffda 	bl	801edc8 <__sfputc_r>
 801ee14:	1c43      	adds	r3, r0, #1
 801ee16:	d1f3      	bne.n	801ee00 <__sfputs_r+0xa>
 801ee18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ee1c <_vfiprintf_r>:
 801ee1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee20:	460d      	mov	r5, r1
 801ee22:	b09d      	sub	sp, #116	; 0x74
 801ee24:	4614      	mov	r4, r2
 801ee26:	4698      	mov	r8, r3
 801ee28:	4606      	mov	r6, r0
 801ee2a:	b118      	cbz	r0, 801ee34 <_vfiprintf_r+0x18>
 801ee2c:	6983      	ldr	r3, [r0, #24]
 801ee2e:	b90b      	cbnz	r3, 801ee34 <_vfiprintf_r+0x18>
 801ee30:	f7ff f960 	bl	801e0f4 <__sinit>
 801ee34:	4b89      	ldr	r3, [pc, #548]	; (801f05c <_vfiprintf_r+0x240>)
 801ee36:	429d      	cmp	r5, r3
 801ee38:	d11b      	bne.n	801ee72 <_vfiprintf_r+0x56>
 801ee3a:	6875      	ldr	r5, [r6, #4]
 801ee3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ee3e:	07d9      	lsls	r1, r3, #31
 801ee40:	d405      	bmi.n	801ee4e <_vfiprintf_r+0x32>
 801ee42:	89ab      	ldrh	r3, [r5, #12]
 801ee44:	059a      	lsls	r2, r3, #22
 801ee46:	d402      	bmi.n	801ee4e <_vfiprintf_r+0x32>
 801ee48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ee4a:	f7ff fa16 	bl	801e27a <__retarget_lock_acquire_recursive>
 801ee4e:	89ab      	ldrh	r3, [r5, #12]
 801ee50:	071b      	lsls	r3, r3, #28
 801ee52:	d501      	bpl.n	801ee58 <_vfiprintf_r+0x3c>
 801ee54:	692b      	ldr	r3, [r5, #16]
 801ee56:	b9eb      	cbnz	r3, 801ee94 <_vfiprintf_r+0x78>
 801ee58:	4629      	mov	r1, r5
 801ee5a:	4630      	mov	r0, r6
 801ee5c:	f7ff fd6c 	bl	801e938 <__swsetup_r>
 801ee60:	b1c0      	cbz	r0, 801ee94 <_vfiprintf_r+0x78>
 801ee62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ee64:	07dc      	lsls	r4, r3, #31
 801ee66:	d50e      	bpl.n	801ee86 <_vfiprintf_r+0x6a>
 801ee68:	f04f 30ff 	mov.w	r0, #4294967295
 801ee6c:	b01d      	add	sp, #116	; 0x74
 801ee6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee72:	4b7b      	ldr	r3, [pc, #492]	; (801f060 <_vfiprintf_r+0x244>)
 801ee74:	429d      	cmp	r5, r3
 801ee76:	d101      	bne.n	801ee7c <_vfiprintf_r+0x60>
 801ee78:	68b5      	ldr	r5, [r6, #8]
 801ee7a:	e7df      	b.n	801ee3c <_vfiprintf_r+0x20>
 801ee7c:	4b79      	ldr	r3, [pc, #484]	; (801f064 <_vfiprintf_r+0x248>)
 801ee7e:	429d      	cmp	r5, r3
 801ee80:	bf08      	it	eq
 801ee82:	68f5      	ldreq	r5, [r6, #12]
 801ee84:	e7da      	b.n	801ee3c <_vfiprintf_r+0x20>
 801ee86:	89ab      	ldrh	r3, [r5, #12]
 801ee88:	0598      	lsls	r0, r3, #22
 801ee8a:	d4ed      	bmi.n	801ee68 <_vfiprintf_r+0x4c>
 801ee8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ee8e:	f7ff f9f5 	bl	801e27c <__retarget_lock_release_recursive>
 801ee92:	e7e9      	b.n	801ee68 <_vfiprintf_r+0x4c>
 801ee94:	2300      	movs	r3, #0
 801ee96:	9309      	str	r3, [sp, #36]	; 0x24
 801ee98:	2320      	movs	r3, #32
 801ee9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ee9e:	f8cd 800c 	str.w	r8, [sp, #12]
 801eea2:	2330      	movs	r3, #48	; 0x30
 801eea4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f068 <_vfiprintf_r+0x24c>
 801eea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801eeac:	f04f 0901 	mov.w	r9, #1
 801eeb0:	4623      	mov	r3, r4
 801eeb2:	469a      	mov	sl, r3
 801eeb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801eeb8:	b10a      	cbz	r2, 801eebe <_vfiprintf_r+0xa2>
 801eeba:	2a25      	cmp	r2, #37	; 0x25
 801eebc:	d1f9      	bne.n	801eeb2 <_vfiprintf_r+0x96>
 801eebe:	ebba 0b04 	subs.w	fp, sl, r4
 801eec2:	d00b      	beq.n	801eedc <_vfiprintf_r+0xc0>
 801eec4:	465b      	mov	r3, fp
 801eec6:	4622      	mov	r2, r4
 801eec8:	4629      	mov	r1, r5
 801eeca:	4630      	mov	r0, r6
 801eecc:	f7ff ff93 	bl	801edf6 <__sfputs_r>
 801eed0:	3001      	adds	r0, #1
 801eed2:	f000 80aa 	beq.w	801f02a <_vfiprintf_r+0x20e>
 801eed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801eed8:	445a      	add	r2, fp
 801eeda:	9209      	str	r2, [sp, #36]	; 0x24
 801eedc:	f89a 3000 	ldrb.w	r3, [sl]
 801eee0:	2b00      	cmp	r3, #0
 801eee2:	f000 80a2 	beq.w	801f02a <_vfiprintf_r+0x20e>
 801eee6:	2300      	movs	r3, #0
 801eee8:	f04f 32ff 	mov.w	r2, #4294967295
 801eeec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801eef0:	f10a 0a01 	add.w	sl, sl, #1
 801eef4:	9304      	str	r3, [sp, #16]
 801eef6:	9307      	str	r3, [sp, #28]
 801eef8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801eefc:	931a      	str	r3, [sp, #104]	; 0x68
 801eefe:	4654      	mov	r4, sl
 801ef00:	2205      	movs	r2, #5
 801ef02:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ef06:	4858      	ldr	r0, [pc, #352]	; (801f068 <_vfiprintf_r+0x24c>)
 801ef08:	f7e1 f942 	bl	8000190 <memchr>
 801ef0c:	9a04      	ldr	r2, [sp, #16]
 801ef0e:	b9d8      	cbnz	r0, 801ef48 <_vfiprintf_r+0x12c>
 801ef10:	06d1      	lsls	r1, r2, #27
 801ef12:	bf44      	itt	mi
 801ef14:	2320      	movmi	r3, #32
 801ef16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ef1a:	0713      	lsls	r3, r2, #28
 801ef1c:	bf44      	itt	mi
 801ef1e:	232b      	movmi	r3, #43	; 0x2b
 801ef20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ef24:	f89a 3000 	ldrb.w	r3, [sl]
 801ef28:	2b2a      	cmp	r3, #42	; 0x2a
 801ef2a:	d015      	beq.n	801ef58 <_vfiprintf_r+0x13c>
 801ef2c:	9a07      	ldr	r2, [sp, #28]
 801ef2e:	4654      	mov	r4, sl
 801ef30:	2000      	movs	r0, #0
 801ef32:	f04f 0c0a 	mov.w	ip, #10
 801ef36:	4621      	mov	r1, r4
 801ef38:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ef3c:	3b30      	subs	r3, #48	; 0x30
 801ef3e:	2b09      	cmp	r3, #9
 801ef40:	d94e      	bls.n	801efe0 <_vfiprintf_r+0x1c4>
 801ef42:	b1b0      	cbz	r0, 801ef72 <_vfiprintf_r+0x156>
 801ef44:	9207      	str	r2, [sp, #28]
 801ef46:	e014      	b.n	801ef72 <_vfiprintf_r+0x156>
 801ef48:	eba0 0308 	sub.w	r3, r0, r8
 801ef4c:	fa09 f303 	lsl.w	r3, r9, r3
 801ef50:	4313      	orrs	r3, r2
 801ef52:	9304      	str	r3, [sp, #16]
 801ef54:	46a2      	mov	sl, r4
 801ef56:	e7d2      	b.n	801eefe <_vfiprintf_r+0xe2>
 801ef58:	9b03      	ldr	r3, [sp, #12]
 801ef5a:	1d19      	adds	r1, r3, #4
 801ef5c:	681b      	ldr	r3, [r3, #0]
 801ef5e:	9103      	str	r1, [sp, #12]
 801ef60:	2b00      	cmp	r3, #0
 801ef62:	bfbb      	ittet	lt
 801ef64:	425b      	neglt	r3, r3
 801ef66:	f042 0202 	orrlt.w	r2, r2, #2
 801ef6a:	9307      	strge	r3, [sp, #28]
 801ef6c:	9307      	strlt	r3, [sp, #28]
 801ef6e:	bfb8      	it	lt
 801ef70:	9204      	strlt	r2, [sp, #16]
 801ef72:	7823      	ldrb	r3, [r4, #0]
 801ef74:	2b2e      	cmp	r3, #46	; 0x2e
 801ef76:	d10c      	bne.n	801ef92 <_vfiprintf_r+0x176>
 801ef78:	7863      	ldrb	r3, [r4, #1]
 801ef7a:	2b2a      	cmp	r3, #42	; 0x2a
 801ef7c:	d135      	bne.n	801efea <_vfiprintf_r+0x1ce>
 801ef7e:	9b03      	ldr	r3, [sp, #12]
 801ef80:	1d1a      	adds	r2, r3, #4
 801ef82:	681b      	ldr	r3, [r3, #0]
 801ef84:	9203      	str	r2, [sp, #12]
 801ef86:	2b00      	cmp	r3, #0
 801ef88:	bfb8      	it	lt
 801ef8a:	f04f 33ff 	movlt.w	r3, #4294967295
 801ef8e:	3402      	adds	r4, #2
 801ef90:	9305      	str	r3, [sp, #20]
 801ef92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f078 <_vfiprintf_r+0x25c>
 801ef96:	7821      	ldrb	r1, [r4, #0]
 801ef98:	2203      	movs	r2, #3
 801ef9a:	4650      	mov	r0, sl
 801ef9c:	f7e1 f8f8 	bl	8000190 <memchr>
 801efa0:	b140      	cbz	r0, 801efb4 <_vfiprintf_r+0x198>
 801efa2:	2340      	movs	r3, #64	; 0x40
 801efa4:	eba0 000a 	sub.w	r0, r0, sl
 801efa8:	fa03 f000 	lsl.w	r0, r3, r0
 801efac:	9b04      	ldr	r3, [sp, #16]
 801efae:	4303      	orrs	r3, r0
 801efb0:	3401      	adds	r4, #1
 801efb2:	9304      	str	r3, [sp, #16]
 801efb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801efb8:	482c      	ldr	r0, [pc, #176]	; (801f06c <_vfiprintf_r+0x250>)
 801efba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801efbe:	2206      	movs	r2, #6
 801efc0:	f7e1 f8e6 	bl	8000190 <memchr>
 801efc4:	2800      	cmp	r0, #0
 801efc6:	d03f      	beq.n	801f048 <_vfiprintf_r+0x22c>
 801efc8:	4b29      	ldr	r3, [pc, #164]	; (801f070 <_vfiprintf_r+0x254>)
 801efca:	bb1b      	cbnz	r3, 801f014 <_vfiprintf_r+0x1f8>
 801efcc:	9b03      	ldr	r3, [sp, #12]
 801efce:	3307      	adds	r3, #7
 801efd0:	f023 0307 	bic.w	r3, r3, #7
 801efd4:	3308      	adds	r3, #8
 801efd6:	9303      	str	r3, [sp, #12]
 801efd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801efda:	443b      	add	r3, r7
 801efdc:	9309      	str	r3, [sp, #36]	; 0x24
 801efde:	e767      	b.n	801eeb0 <_vfiprintf_r+0x94>
 801efe0:	fb0c 3202 	mla	r2, ip, r2, r3
 801efe4:	460c      	mov	r4, r1
 801efe6:	2001      	movs	r0, #1
 801efe8:	e7a5      	b.n	801ef36 <_vfiprintf_r+0x11a>
 801efea:	2300      	movs	r3, #0
 801efec:	3401      	adds	r4, #1
 801efee:	9305      	str	r3, [sp, #20]
 801eff0:	4619      	mov	r1, r3
 801eff2:	f04f 0c0a 	mov.w	ip, #10
 801eff6:	4620      	mov	r0, r4
 801eff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801effc:	3a30      	subs	r2, #48	; 0x30
 801effe:	2a09      	cmp	r2, #9
 801f000:	d903      	bls.n	801f00a <_vfiprintf_r+0x1ee>
 801f002:	2b00      	cmp	r3, #0
 801f004:	d0c5      	beq.n	801ef92 <_vfiprintf_r+0x176>
 801f006:	9105      	str	r1, [sp, #20]
 801f008:	e7c3      	b.n	801ef92 <_vfiprintf_r+0x176>
 801f00a:	fb0c 2101 	mla	r1, ip, r1, r2
 801f00e:	4604      	mov	r4, r0
 801f010:	2301      	movs	r3, #1
 801f012:	e7f0      	b.n	801eff6 <_vfiprintf_r+0x1da>
 801f014:	ab03      	add	r3, sp, #12
 801f016:	9300      	str	r3, [sp, #0]
 801f018:	462a      	mov	r2, r5
 801f01a:	4b16      	ldr	r3, [pc, #88]	; (801f074 <_vfiprintf_r+0x258>)
 801f01c:	a904      	add	r1, sp, #16
 801f01e:	4630      	mov	r0, r6
 801f020:	f3af 8000 	nop.w
 801f024:	4607      	mov	r7, r0
 801f026:	1c78      	adds	r0, r7, #1
 801f028:	d1d6      	bne.n	801efd8 <_vfiprintf_r+0x1bc>
 801f02a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f02c:	07d9      	lsls	r1, r3, #31
 801f02e:	d405      	bmi.n	801f03c <_vfiprintf_r+0x220>
 801f030:	89ab      	ldrh	r3, [r5, #12]
 801f032:	059a      	lsls	r2, r3, #22
 801f034:	d402      	bmi.n	801f03c <_vfiprintf_r+0x220>
 801f036:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f038:	f7ff f920 	bl	801e27c <__retarget_lock_release_recursive>
 801f03c:	89ab      	ldrh	r3, [r5, #12]
 801f03e:	065b      	lsls	r3, r3, #25
 801f040:	f53f af12 	bmi.w	801ee68 <_vfiprintf_r+0x4c>
 801f044:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f046:	e711      	b.n	801ee6c <_vfiprintf_r+0x50>
 801f048:	ab03      	add	r3, sp, #12
 801f04a:	9300      	str	r3, [sp, #0]
 801f04c:	462a      	mov	r2, r5
 801f04e:	4b09      	ldr	r3, [pc, #36]	; (801f074 <_vfiprintf_r+0x258>)
 801f050:	a904      	add	r1, sp, #16
 801f052:	4630      	mov	r0, r6
 801f054:	f000 f880 	bl	801f158 <_printf_i>
 801f058:	e7e4      	b.n	801f024 <_vfiprintf_r+0x208>
 801f05a:	bf00      	nop
 801f05c:	0802017c 	.word	0x0802017c
 801f060:	0802019c 	.word	0x0802019c
 801f064:	0802015c 	.word	0x0802015c
 801f068:	080201c0 	.word	0x080201c0
 801f06c:	080201ca 	.word	0x080201ca
 801f070:	00000000 	.word	0x00000000
 801f074:	0801edf7 	.word	0x0801edf7
 801f078:	080201c6 	.word	0x080201c6

0801f07c <_printf_common>:
 801f07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f080:	4616      	mov	r6, r2
 801f082:	4699      	mov	r9, r3
 801f084:	688a      	ldr	r2, [r1, #8]
 801f086:	690b      	ldr	r3, [r1, #16]
 801f088:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f08c:	4293      	cmp	r3, r2
 801f08e:	bfb8      	it	lt
 801f090:	4613      	movlt	r3, r2
 801f092:	6033      	str	r3, [r6, #0]
 801f094:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f098:	4607      	mov	r7, r0
 801f09a:	460c      	mov	r4, r1
 801f09c:	b10a      	cbz	r2, 801f0a2 <_printf_common+0x26>
 801f09e:	3301      	adds	r3, #1
 801f0a0:	6033      	str	r3, [r6, #0]
 801f0a2:	6823      	ldr	r3, [r4, #0]
 801f0a4:	0699      	lsls	r1, r3, #26
 801f0a6:	bf42      	ittt	mi
 801f0a8:	6833      	ldrmi	r3, [r6, #0]
 801f0aa:	3302      	addmi	r3, #2
 801f0ac:	6033      	strmi	r3, [r6, #0]
 801f0ae:	6825      	ldr	r5, [r4, #0]
 801f0b0:	f015 0506 	ands.w	r5, r5, #6
 801f0b4:	d106      	bne.n	801f0c4 <_printf_common+0x48>
 801f0b6:	f104 0a19 	add.w	sl, r4, #25
 801f0ba:	68e3      	ldr	r3, [r4, #12]
 801f0bc:	6832      	ldr	r2, [r6, #0]
 801f0be:	1a9b      	subs	r3, r3, r2
 801f0c0:	42ab      	cmp	r3, r5
 801f0c2:	dc26      	bgt.n	801f112 <_printf_common+0x96>
 801f0c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f0c8:	1e13      	subs	r3, r2, #0
 801f0ca:	6822      	ldr	r2, [r4, #0]
 801f0cc:	bf18      	it	ne
 801f0ce:	2301      	movne	r3, #1
 801f0d0:	0692      	lsls	r2, r2, #26
 801f0d2:	d42b      	bmi.n	801f12c <_printf_common+0xb0>
 801f0d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f0d8:	4649      	mov	r1, r9
 801f0da:	4638      	mov	r0, r7
 801f0dc:	47c0      	blx	r8
 801f0de:	3001      	adds	r0, #1
 801f0e0:	d01e      	beq.n	801f120 <_printf_common+0xa4>
 801f0e2:	6823      	ldr	r3, [r4, #0]
 801f0e4:	68e5      	ldr	r5, [r4, #12]
 801f0e6:	6832      	ldr	r2, [r6, #0]
 801f0e8:	f003 0306 	and.w	r3, r3, #6
 801f0ec:	2b04      	cmp	r3, #4
 801f0ee:	bf08      	it	eq
 801f0f0:	1aad      	subeq	r5, r5, r2
 801f0f2:	68a3      	ldr	r3, [r4, #8]
 801f0f4:	6922      	ldr	r2, [r4, #16]
 801f0f6:	bf0c      	ite	eq
 801f0f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f0fc:	2500      	movne	r5, #0
 801f0fe:	4293      	cmp	r3, r2
 801f100:	bfc4      	itt	gt
 801f102:	1a9b      	subgt	r3, r3, r2
 801f104:	18ed      	addgt	r5, r5, r3
 801f106:	2600      	movs	r6, #0
 801f108:	341a      	adds	r4, #26
 801f10a:	42b5      	cmp	r5, r6
 801f10c:	d11a      	bne.n	801f144 <_printf_common+0xc8>
 801f10e:	2000      	movs	r0, #0
 801f110:	e008      	b.n	801f124 <_printf_common+0xa8>
 801f112:	2301      	movs	r3, #1
 801f114:	4652      	mov	r2, sl
 801f116:	4649      	mov	r1, r9
 801f118:	4638      	mov	r0, r7
 801f11a:	47c0      	blx	r8
 801f11c:	3001      	adds	r0, #1
 801f11e:	d103      	bne.n	801f128 <_printf_common+0xac>
 801f120:	f04f 30ff 	mov.w	r0, #4294967295
 801f124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f128:	3501      	adds	r5, #1
 801f12a:	e7c6      	b.n	801f0ba <_printf_common+0x3e>
 801f12c:	18e1      	adds	r1, r4, r3
 801f12e:	1c5a      	adds	r2, r3, #1
 801f130:	2030      	movs	r0, #48	; 0x30
 801f132:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f136:	4422      	add	r2, r4
 801f138:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f13c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f140:	3302      	adds	r3, #2
 801f142:	e7c7      	b.n	801f0d4 <_printf_common+0x58>
 801f144:	2301      	movs	r3, #1
 801f146:	4622      	mov	r2, r4
 801f148:	4649      	mov	r1, r9
 801f14a:	4638      	mov	r0, r7
 801f14c:	47c0      	blx	r8
 801f14e:	3001      	adds	r0, #1
 801f150:	d0e6      	beq.n	801f120 <_printf_common+0xa4>
 801f152:	3601      	adds	r6, #1
 801f154:	e7d9      	b.n	801f10a <_printf_common+0x8e>
	...

0801f158 <_printf_i>:
 801f158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f15c:	7e0f      	ldrb	r7, [r1, #24]
 801f15e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f160:	2f78      	cmp	r7, #120	; 0x78
 801f162:	4691      	mov	r9, r2
 801f164:	4680      	mov	r8, r0
 801f166:	460c      	mov	r4, r1
 801f168:	469a      	mov	sl, r3
 801f16a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f16e:	d807      	bhi.n	801f180 <_printf_i+0x28>
 801f170:	2f62      	cmp	r7, #98	; 0x62
 801f172:	d80a      	bhi.n	801f18a <_printf_i+0x32>
 801f174:	2f00      	cmp	r7, #0
 801f176:	f000 80d8 	beq.w	801f32a <_printf_i+0x1d2>
 801f17a:	2f58      	cmp	r7, #88	; 0x58
 801f17c:	f000 80a3 	beq.w	801f2c6 <_printf_i+0x16e>
 801f180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f184:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f188:	e03a      	b.n	801f200 <_printf_i+0xa8>
 801f18a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f18e:	2b15      	cmp	r3, #21
 801f190:	d8f6      	bhi.n	801f180 <_printf_i+0x28>
 801f192:	a101      	add	r1, pc, #4	; (adr r1, 801f198 <_printf_i+0x40>)
 801f194:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f198:	0801f1f1 	.word	0x0801f1f1
 801f19c:	0801f205 	.word	0x0801f205
 801f1a0:	0801f181 	.word	0x0801f181
 801f1a4:	0801f181 	.word	0x0801f181
 801f1a8:	0801f181 	.word	0x0801f181
 801f1ac:	0801f181 	.word	0x0801f181
 801f1b0:	0801f205 	.word	0x0801f205
 801f1b4:	0801f181 	.word	0x0801f181
 801f1b8:	0801f181 	.word	0x0801f181
 801f1bc:	0801f181 	.word	0x0801f181
 801f1c0:	0801f181 	.word	0x0801f181
 801f1c4:	0801f311 	.word	0x0801f311
 801f1c8:	0801f235 	.word	0x0801f235
 801f1cc:	0801f2f3 	.word	0x0801f2f3
 801f1d0:	0801f181 	.word	0x0801f181
 801f1d4:	0801f181 	.word	0x0801f181
 801f1d8:	0801f333 	.word	0x0801f333
 801f1dc:	0801f181 	.word	0x0801f181
 801f1e0:	0801f235 	.word	0x0801f235
 801f1e4:	0801f181 	.word	0x0801f181
 801f1e8:	0801f181 	.word	0x0801f181
 801f1ec:	0801f2fb 	.word	0x0801f2fb
 801f1f0:	682b      	ldr	r3, [r5, #0]
 801f1f2:	1d1a      	adds	r2, r3, #4
 801f1f4:	681b      	ldr	r3, [r3, #0]
 801f1f6:	602a      	str	r2, [r5, #0]
 801f1f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f1fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f200:	2301      	movs	r3, #1
 801f202:	e0a3      	b.n	801f34c <_printf_i+0x1f4>
 801f204:	6820      	ldr	r0, [r4, #0]
 801f206:	6829      	ldr	r1, [r5, #0]
 801f208:	0606      	lsls	r6, r0, #24
 801f20a:	f101 0304 	add.w	r3, r1, #4
 801f20e:	d50a      	bpl.n	801f226 <_printf_i+0xce>
 801f210:	680e      	ldr	r6, [r1, #0]
 801f212:	602b      	str	r3, [r5, #0]
 801f214:	2e00      	cmp	r6, #0
 801f216:	da03      	bge.n	801f220 <_printf_i+0xc8>
 801f218:	232d      	movs	r3, #45	; 0x2d
 801f21a:	4276      	negs	r6, r6
 801f21c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f220:	485e      	ldr	r0, [pc, #376]	; (801f39c <_printf_i+0x244>)
 801f222:	230a      	movs	r3, #10
 801f224:	e019      	b.n	801f25a <_printf_i+0x102>
 801f226:	680e      	ldr	r6, [r1, #0]
 801f228:	602b      	str	r3, [r5, #0]
 801f22a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f22e:	bf18      	it	ne
 801f230:	b236      	sxthne	r6, r6
 801f232:	e7ef      	b.n	801f214 <_printf_i+0xbc>
 801f234:	682b      	ldr	r3, [r5, #0]
 801f236:	6820      	ldr	r0, [r4, #0]
 801f238:	1d19      	adds	r1, r3, #4
 801f23a:	6029      	str	r1, [r5, #0]
 801f23c:	0601      	lsls	r1, r0, #24
 801f23e:	d501      	bpl.n	801f244 <_printf_i+0xec>
 801f240:	681e      	ldr	r6, [r3, #0]
 801f242:	e002      	b.n	801f24a <_printf_i+0xf2>
 801f244:	0646      	lsls	r6, r0, #25
 801f246:	d5fb      	bpl.n	801f240 <_printf_i+0xe8>
 801f248:	881e      	ldrh	r6, [r3, #0]
 801f24a:	4854      	ldr	r0, [pc, #336]	; (801f39c <_printf_i+0x244>)
 801f24c:	2f6f      	cmp	r7, #111	; 0x6f
 801f24e:	bf0c      	ite	eq
 801f250:	2308      	moveq	r3, #8
 801f252:	230a      	movne	r3, #10
 801f254:	2100      	movs	r1, #0
 801f256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f25a:	6865      	ldr	r5, [r4, #4]
 801f25c:	60a5      	str	r5, [r4, #8]
 801f25e:	2d00      	cmp	r5, #0
 801f260:	bfa2      	ittt	ge
 801f262:	6821      	ldrge	r1, [r4, #0]
 801f264:	f021 0104 	bicge.w	r1, r1, #4
 801f268:	6021      	strge	r1, [r4, #0]
 801f26a:	b90e      	cbnz	r6, 801f270 <_printf_i+0x118>
 801f26c:	2d00      	cmp	r5, #0
 801f26e:	d04d      	beq.n	801f30c <_printf_i+0x1b4>
 801f270:	4615      	mov	r5, r2
 801f272:	fbb6 f1f3 	udiv	r1, r6, r3
 801f276:	fb03 6711 	mls	r7, r3, r1, r6
 801f27a:	5dc7      	ldrb	r7, [r0, r7]
 801f27c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f280:	4637      	mov	r7, r6
 801f282:	42bb      	cmp	r3, r7
 801f284:	460e      	mov	r6, r1
 801f286:	d9f4      	bls.n	801f272 <_printf_i+0x11a>
 801f288:	2b08      	cmp	r3, #8
 801f28a:	d10b      	bne.n	801f2a4 <_printf_i+0x14c>
 801f28c:	6823      	ldr	r3, [r4, #0]
 801f28e:	07de      	lsls	r6, r3, #31
 801f290:	d508      	bpl.n	801f2a4 <_printf_i+0x14c>
 801f292:	6923      	ldr	r3, [r4, #16]
 801f294:	6861      	ldr	r1, [r4, #4]
 801f296:	4299      	cmp	r1, r3
 801f298:	bfde      	ittt	le
 801f29a:	2330      	movle	r3, #48	; 0x30
 801f29c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f2a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f2a4:	1b52      	subs	r2, r2, r5
 801f2a6:	6122      	str	r2, [r4, #16]
 801f2a8:	f8cd a000 	str.w	sl, [sp]
 801f2ac:	464b      	mov	r3, r9
 801f2ae:	aa03      	add	r2, sp, #12
 801f2b0:	4621      	mov	r1, r4
 801f2b2:	4640      	mov	r0, r8
 801f2b4:	f7ff fee2 	bl	801f07c <_printf_common>
 801f2b8:	3001      	adds	r0, #1
 801f2ba:	d14c      	bne.n	801f356 <_printf_i+0x1fe>
 801f2bc:	f04f 30ff 	mov.w	r0, #4294967295
 801f2c0:	b004      	add	sp, #16
 801f2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f2c6:	4835      	ldr	r0, [pc, #212]	; (801f39c <_printf_i+0x244>)
 801f2c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801f2cc:	6829      	ldr	r1, [r5, #0]
 801f2ce:	6823      	ldr	r3, [r4, #0]
 801f2d0:	f851 6b04 	ldr.w	r6, [r1], #4
 801f2d4:	6029      	str	r1, [r5, #0]
 801f2d6:	061d      	lsls	r5, r3, #24
 801f2d8:	d514      	bpl.n	801f304 <_printf_i+0x1ac>
 801f2da:	07df      	lsls	r7, r3, #31
 801f2dc:	bf44      	itt	mi
 801f2de:	f043 0320 	orrmi.w	r3, r3, #32
 801f2e2:	6023      	strmi	r3, [r4, #0]
 801f2e4:	b91e      	cbnz	r6, 801f2ee <_printf_i+0x196>
 801f2e6:	6823      	ldr	r3, [r4, #0]
 801f2e8:	f023 0320 	bic.w	r3, r3, #32
 801f2ec:	6023      	str	r3, [r4, #0]
 801f2ee:	2310      	movs	r3, #16
 801f2f0:	e7b0      	b.n	801f254 <_printf_i+0xfc>
 801f2f2:	6823      	ldr	r3, [r4, #0]
 801f2f4:	f043 0320 	orr.w	r3, r3, #32
 801f2f8:	6023      	str	r3, [r4, #0]
 801f2fa:	2378      	movs	r3, #120	; 0x78
 801f2fc:	4828      	ldr	r0, [pc, #160]	; (801f3a0 <_printf_i+0x248>)
 801f2fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f302:	e7e3      	b.n	801f2cc <_printf_i+0x174>
 801f304:	0659      	lsls	r1, r3, #25
 801f306:	bf48      	it	mi
 801f308:	b2b6      	uxthmi	r6, r6
 801f30a:	e7e6      	b.n	801f2da <_printf_i+0x182>
 801f30c:	4615      	mov	r5, r2
 801f30e:	e7bb      	b.n	801f288 <_printf_i+0x130>
 801f310:	682b      	ldr	r3, [r5, #0]
 801f312:	6826      	ldr	r6, [r4, #0]
 801f314:	6961      	ldr	r1, [r4, #20]
 801f316:	1d18      	adds	r0, r3, #4
 801f318:	6028      	str	r0, [r5, #0]
 801f31a:	0635      	lsls	r5, r6, #24
 801f31c:	681b      	ldr	r3, [r3, #0]
 801f31e:	d501      	bpl.n	801f324 <_printf_i+0x1cc>
 801f320:	6019      	str	r1, [r3, #0]
 801f322:	e002      	b.n	801f32a <_printf_i+0x1d2>
 801f324:	0670      	lsls	r0, r6, #25
 801f326:	d5fb      	bpl.n	801f320 <_printf_i+0x1c8>
 801f328:	8019      	strh	r1, [r3, #0]
 801f32a:	2300      	movs	r3, #0
 801f32c:	6123      	str	r3, [r4, #16]
 801f32e:	4615      	mov	r5, r2
 801f330:	e7ba      	b.n	801f2a8 <_printf_i+0x150>
 801f332:	682b      	ldr	r3, [r5, #0]
 801f334:	1d1a      	adds	r2, r3, #4
 801f336:	602a      	str	r2, [r5, #0]
 801f338:	681d      	ldr	r5, [r3, #0]
 801f33a:	6862      	ldr	r2, [r4, #4]
 801f33c:	2100      	movs	r1, #0
 801f33e:	4628      	mov	r0, r5
 801f340:	f7e0 ff26 	bl	8000190 <memchr>
 801f344:	b108      	cbz	r0, 801f34a <_printf_i+0x1f2>
 801f346:	1b40      	subs	r0, r0, r5
 801f348:	6060      	str	r0, [r4, #4]
 801f34a:	6863      	ldr	r3, [r4, #4]
 801f34c:	6123      	str	r3, [r4, #16]
 801f34e:	2300      	movs	r3, #0
 801f350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f354:	e7a8      	b.n	801f2a8 <_printf_i+0x150>
 801f356:	6923      	ldr	r3, [r4, #16]
 801f358:	462a      	mov	r2, r5
 801f35a:	4649      	mov	r1, r9
 801f35c:	4640      	mov	r0, r8
 801f35e:	47d0      	blx	sl
 801f360:	3001      	adds	r0, #1
 801f362:	d0ab      	beq.n	801f2bc <_printf_i+0x164>
 801f364:	6823      	ldr	r3, [r4, #0]
 801f366:	079b      	lsls	r3, r3, #30
 801f368:	d413      	bmi.n	801f392 <_printf_i+0x23a>
 801f36a:	68e0      	ldr	r0, [r4, #12]
 801f36c:	9b03      	ldr	r3, [sp, #12]
 801f36e:	4298      	cmp	r0, r3
 801f370:	bfb8      	it	lt
 801f372:	4618      	movlt	r0, r3
 801f374:	e7a4      	b.n	801f2c0 <_printf_i+0x168>
 801f376:	2301      	movs	r3, #1
 801f378:	4632      	mov	r2, r6
 801f37a:	4649      	mov	r1, r9
 801f37c:	4640      	mov	r0, r8
 801f37e:	47d0      	blx	sl
 801f380:	3001      	adds	r0, #1
 801f382:	d09b      	beq.n	801f2bc <_printf_i+0x164>
 801f384:	3501      	adds	r5, #1
 801f386:	68e3      	ldr	r3, [r4, #12]
 801f388:	9903      	ldr	r1, [sp, #12]
 801f38a:	1a5b      	subs	r3, r3, r1
 801f38c:	42ab      	cmp	r3, r5
 801f38e:	dcf2      	bgt.n	801f376 <_printf_i+0x21e>
 801f390:	e7eb      	b.n	801f36a <_printf_i+0x212>
 801f392:	2500      	movs	r5, #0
 801f394:	f104 0619 	add.w	r6, r4, #25
 801f398:	e7f5      	b.n	801f386 <_printf_i+0x22e>
 801f39a:	bf00      	nop
 801f39c:	080201d1 	.word	0x080201d1
 801f3a0:	080201e2 	.word	0x080201e2

0801f3a4 <_putc_r>:
 801f3a4:	b570      	push	{r4, r5, r6, lr}
 801f3a6:	460d      	mov	r5, r1
 801f3a8:	4614      	mov	r4, r2
 801f3aa:	4606      	mov	r6, r0
 801f3ac:	b118      	cbz	r0, 801f3b6 <_putc_r+0x12>
 801f3ae:	6983      	ldr	r3, [r0, #24]
 801f3b0:	b90b      	cbnz	r3, 801f3b6 <_putc_r+0x12>
 801f3b2:	f7fe fe9f 	bl	801e0f4 <__sinit>
 801f3b6:	4b1c      	ldr	r3, [pc, #112]	; (801f428 <_putc_r+0x84>)
 801f3b8:	429c      	cmp	r4, r3
 801f3ba:	d124      	bne.n	801f406 <_putc_r+0x62>
 801f3bc:	6874      	ldr	r4, [r6, #4]
 801f3be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f3c0:	07d8      	lsls	r0, r3, #31
 801f3c2:	d405      	bmi.n	801f3d0 <_putc_r+0x2c>
 801f3c4:	89a3      	ldrh	r3, [r4, #12]
 801f3c6:	0599      	lsls	r1, r3, #22
 801f3c8:	d402      	bmi.n	801f3d0 <_putc_r+0x2c>
 801f3ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f3cc:	f7fe ff55 	bl	801e27a <__retarget_lock_acquire_recursive>
 801f3d0:	68a3      	ldr	r3, [r4, #8]
 801f3d2:	3b01      	subs	r3, #1
 801f3d4:	2b00      	cmp	r3, #0
 801f3d6:	60a3      	str	r3, [r4, #8]
 801f3d8:	da05      	bge.n	801f3e6 <_putc_r+0x42>
 801f3da:	69a2      	ldr	r2, [r4, #24]
 801f3dc:	4293      	cmp	r3, r2
 801f3de:	db1c      	blt.n	801f41a <_putc_r+0x76>
 801f3e0:	b2eb      	uxtb	r3, r5
 801f3e2:	2b0a      	cmp	r3, #10
 801f3e4:	d019      	beq.n	801f41a <_putc_r+0x76>
 801f3e6:	6823      	ldr	r3, [r4, #0]
 801f3e8:	1c5a      	adds	r2, r3, #1
 801f3ea:	6022      	str	r2, [r4, #0]
 801f3ec:	701d      	strb	r5, [r3, #0]
 801f3ee:	b2ed      	uxtb	r5, r5
 801f3f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f3f2:	07da      	lsls	r2, r3, #31
 801f3f4:	d405      	bmi.n	801f402 <_putc_r+0x5e>
 801f3f6:	89a3      	ldrh	r3, [r4, #12]
 801f3f8:	059b      	lsls	r3, r3, #22
 801f3fa:	d402      	bmi.n	801f402 <_putc_r+0x5e>
 801f3fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f3fe:	f7fe ff3d 	bl	801e27c <__retarget_lock_release_recursive>
 801f402:	4628      	mov	r0, r5
 801f404:	bd70      	pop	{r4, r5, r6, pc}
 801f406:	4b09      	ldr	r3, [pc, #36]	; (801f42c <_putc_r+0x88>)
 801f408:	429c      	cmp	r4, r3
 801f40a:	d101      	bne.n	801f410 <_putc_r+0x6c>
 801f40c:	68b4      	ldr	r4, [r6, #8]
 801f40e:	e7d6      	b.n	801f3be <_putc_r+0x1a>
 801f410:	4b07      	ldr	r3, [pc, #28]	; (801f430 <_putc_r+0x8c>)
 801f412:	429c      	cmp	r4, r3
 801f414:	bf08      	it	eq
 801f416:	68f4      	ldreq	r4, [r6, #12]
 801f418:	e7d1      	b.n	801f3be <_putc_r+0x1a>
 801f41a:	4629      	mov	r1, r5
 801f41c:	4622      	mov	r2, r4
 801f41e:	4630      	mov	r0, r6
 801f420:	f7ff fa26 	bl	801e870 <__swbuf_r>
 801f424:	4605      	mov	r5, r0
 801f426:	e7e3      	b.n	801f3f0 <_putc_r+0x4c>
 801f428:	0802017c 	.word	0x0802017c
 801f42c:	0802019c 	.word	0x0802019c
 801f430:	0802015c 	.word	0x0802015c

0801f434 <_read_r>:
 801f434:	b538      	push	{r3, r4, r5, lr}
 801f436:	4d07      	ldr	r5, [pc, #28]	; (801f454 <_read_r+0x20>)
 801f438:	4604      	mov	r4, r0
 801f43a:	4608      	mov	r0, r1
 801f43c:	4611      	mov	r1, r2
 801f43e:	2200      	movs	r2, #0
 801f440:	602a      	str	r2, [r5, #0]
 801f442:	461a      	mov	r2, r3
 801f444:	f7e3 fea6 	bl	8003194 <_read>
 801f448:	1c43      	adds	r3, r0, #1
 801f44a:	d102      	bne.n	801f452 <_read_r+0x1e>
 801f44c:	682b      	ldr	r3, [r5, #0]
 801f44e:	b103      	cbz	r3, 801f452 <_read_r+0x1e>
 801f450:	6023      	str	r3, [r4, #0]
 801f452:	bd38      	pop	{r3, r4, r5, pc}
 801f454:	20009828 	.word	0x20009828

0801f458 <_malloc_usable_size_r>:
 801f458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f45c:	1f18      	subs	r0, r3, #4
 801f45e:	2b00      	cmp	r3, #0
 801f460:	bfbc      	itt	lt
 801f462:	580b      	ldrlt	r3, [r1, r0]
 801f464:	18c0      	addlt	r0, r0, r3
 801f466:	4770      	bx	lr

0801f468 <_init>:
 801f468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f46a:	bf00      	nop
 801f46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f46e:	bc08      	pop	{r3}
 801f470:	469e      	mov	lr, r3
 801f472:	4770      	bx	lr

0801f474 <_fini>:
 801f474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f476:	bf00      	nop
 801f478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f47a:	bc08      	pop	{r3}
 801f47c:	469e      	mov	lr, r3
 801f47e:	4770      	bx	lr
